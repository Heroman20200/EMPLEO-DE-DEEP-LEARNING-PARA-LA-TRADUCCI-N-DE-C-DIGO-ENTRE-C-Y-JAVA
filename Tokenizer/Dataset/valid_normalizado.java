public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { _option_flags = VAR_RECORDINPUTSTREAM . readInt ( ) ; _promptTitle = readUnicodeString ( VAR_RECORDINPUTSTREAM ) ; _errorTitle = readUnicodeString ( VAR_RECORDINPUTSTREAM ) ; _promptText = readUnicodeString ( VAR_RECORDINPUTSTREAM ) ; _errorText = readUnicodeString ( VAR_RECORDINPUTSTREAM ) ; int VAR_INT = VAR_RECORDINPUTSTREAM . readUShort ( ) ; _not_used_1 = VAR_RECORDINPUTSTREAM . readShort ( ) ; _formula1 = Formula . read ( VAR_INT , VAR_RECORDINPUTSTREAM ) ; int VAR_INT = VAR_RECORDINPUTSTREAM . readUShort ( ) ; _not_used_2 = VAR_RECORDINPUTSTREAM . readShort ( ) ; _formula2 = Formula . read ( VAR_INT , VAR_RECORDINPUTSTREAM ) ; _regions = new CellRangeAddressList ( VAR_RECORDINPUTSTREAM ) ; }
public String METHOD_NAME ( ) { return pattern ( ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setMethod ( MethodType . POST ) ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { return indexOf ( VAR_OBJECT ) != - LITERAL_INT ; }
public final ByteBuffer METHOD_NAME ( String VAR_STRING ) { return METHOD_NAME ( CharBuffer . wrap ( VAR_STRING ) ) ; }
public boolean METHOD_NAME ( ) { return false ; }
public String METHOD_NAME ( ) { return RawParseUtils . decode ( enc , buffer , keyStart , keyEnd ) ; }
public ValueEval METHOD_NAME ( int VAR_INT , int VAR_INT , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL ) { double VAR_DOUBLE ; try { double VAR_DOUBLE = NumericFunction . singleOperandEvaluate ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; double VAR_DOUBLE = NumericFunction . singleOperandEvaluate ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; double VAR_DOUBLE = NumericFunction . singleOperandEvaluate ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; double VAR_DOUBLE = NumericFunction . singleOperandEvaluate ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; double VAR_DOUBLE = NumericFunction . singleOperandEvaluate ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; VAR_DOUBLE = METHOD_NAME ( VAR_DOUBLE , VAR_DOUBLE , VAR_DOUBLE , VAR_DOUBLE , VAR_DOUBLE != LITERAL_FLOAT ) ; NumericFunction . checkValue ( VAR_DOUBLE ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } return new NumberEval ( VAR_DOUBLE ) ; }
public DeleteClientVpnEndpointResult METHOD_NAME ( DeleteClientVpnEndpointRequest VAR_DELETECLIENTVPNENDPOINTREQUEST ) { VAR_DELETECLIENTVPNENDPOINTREQUEST = beforeClientExecution ( VAR_DELETECLIENTVPNENDPOINTREQUEST ) ; return executeDeleteClientVpnEndpoint ( VAR_DELETECLIENTVPNENDPOINTREQUEST ) ; }
public Object METHOD_NAME ( CharSequence VAR_CHARSEQUENCE ) { List<TernaryTreeNode> VAR_LIST<TERNARYTREENODE> = autocomplete . prefixCompletion ( root , VAR_CHARSEQUENCE , LITERAL_INT ) ; if ( VAR_LIST<TERNARYTREENODE> == null || VAR_LIST<TERNARYTREENODE> . isEmpty ( ) ) { return null ; } for ( TernaryTreeNode VAR_TERNARYTREENODE : VAR_LIST<TERNARYTREENODE> ) { if ( charSeqEquals ( VAR_TERNARYTREENODE . token , VAR_CHARSEQUENCE ) ) { return VAR_TERNARYTREENODE . val ; } } return null ; }
public StartFleetActionsResult METHOD_NAME ( StartFleetActionsRequest VAR_STARTFLEETACTIONSREQUEST ) { VAR_STARTFLEETACTIONSREQUEST = beforeClientExecution ( VAR_STARTFLEETACTIONSREQUEST ) ; return executeStartFleetActions ( VAR_STARTFLEETACTIONSREQUEST ) ; }
public CellRangeAddress METHOD_NAME ( int VAR_INT ) { return _list . get ( VAR_INT ) ; }
public static Document METHOD_NAME ( Reader VAR_READER ) { DocumentBuilderFactory VAR_DOCUMENTBUILDERFACTORY = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder VAR_DOCUMENTBUILDER = null ; try { VAR_DOCUMENTBUILDER = VAR_DOCUMENTBUILDERFACTORY . newDocumentBuilder ( ) ; } catch ( Exception se ) { throw new RuntimeException ( LITERAL_STRING , se ) ; } org.w3c.dom.Document VAR_ORG.W3C.DOM.DOCUMENT = null ; try { VAR_ORG.W3C.DOM.DOCUMENT = VAR_DOCUMENTBUILDER . parse ( new InputSource ( VAR_READER ) ) ; } catch ( Exception se ) { throw new RuntimeException ( LITERAL_STRING + se , se ) ; } return VAR_ORG.W3C.DOM.DOCUMENT ; }
public double METHOD_NAME ( String VAR_STRING , double VAR_DOUBLE ) { double VAR_DOUBLE = ( double [ ] ) valByRound . METHOD_NAME ( VAR_STRING ) ; if ( VAR_DOUBLE != null ) { return VAR_DOUBLE [ roundNumber % VAR_DOUBLE . length ] ; } String VAR_STRING = props . getProperty ( VAR_STRING , LITERAL_STRING + VAR_DOUBLE ) ; if ( VAR_STRING . indexOf ( LITERAL_STRING ) < LITERAL_INT ) { return Double . parseDouble ( VAR_STRING ) ; } int VAR_INT = VAR_STRING . indexOf ( LITERAL_STRING ) ; String VAR_STRING = VAR_STRING . substring ( LITERAL_INT , VAR_INT ) ; VAR_STRING = VAR_STRING . substring ( VAR_INT + LITERAL_INT ) ; colForValByRound . put ( VAR_STRING , VAR_STRING ) ; VAR_DOUBLE = propToDoubleArray ( VAR_STRING ) ; valByRound . put ( VAR_STRING , VAR_DOUBLE ) ; return VAR_DOUBLE [ roundNumber % VAR_DOUBLE . length ] ; }
public int METHOD_NAME ( ) { EscherSimpleProperty VAR_ESCHERSIMPLEPROPERTY = getOptRecord ( ) . lookup ( EscherPropertyTypes . FILL__PATTERNTEXTURE ) ; return VAR_ESCHERSIMPLEPROPERTY == null ? LITERAL_INT : VAR_ESCHERSIMPLEPROPERTY . getPropertyValue ( ) ; }
public TreeFilter METHOD_NAME ( ) { return treeFilter ; }
public GetMemberResult METHOD_NAME ( GetMemberRequest VAR_GETMEMBERREQUEST ) { VAR_GETMEMBERREQUEST = beforeClientExecution ( VAR_GETMEMBERREQUEST ) ; return executeGetMember ( VAR_GETMEMBERREQUEST ) ; }
public boolean METHOD_NAME ( ) { return true ; }
public ReplaceRouteResult METHOD_NAME ( ReplaceRouteRequest VAR_REPLACEROUTEREQUEST ) { VAR_REPLACEROUTEREQUEST = beforeClientExecution ( VAR_REPLACEROUTEREQUEST ) ; return executeReplaceRoute ( VAR_REPLACEROUTEREQUEST ) ; }
public ObjectId METHOD_NAME ( ) { return ( resultTree == null ) ? null : resultTree . toObjectId ( ) ; }
public boolean METHOD_NAME ( final Object VAR_OBJECT ) { boolean VAR_BOOLEAN = this == VAR_OBJECT ; if ( ! VAR_BOOLEAN && ( VAR_OBJECT != null ) && ( VAR_OBJECT . getClass ( ) == this . getClass ( ) ) ) { IntList VAR_INTLIST = ( IntList ) VAR_OBJECT ; if ( VAR_INTLIST . _limit == _limit ) { VAR_BOOLEAN = true ; for ( int VAR_INT = LITERAL_INT ; VAR_BOOLEAN && ( VAR_INT < _limit ) ; VAR_INT ++ ) { VAR_BOOLEAN = _array [ VAR_INT ] == VAR_INTLIST . _array [ VAR_INT ] ; } } } return VAR_BOOLEAN ; }
public ListReusableDelegationSetsResult METHOD_NAME ( ListReusableDelegationSetsRequest VAR_LISTREUSABLEDELEGATIONSETSREQUEST ) { VAR_LISTREUSABLEDELEGATIONSETSREQUEST = beforeClientExecution ( VAR_LISTREUSABLEDELEGATIONSETSREQUEST ) ; return executeListReusableDelegationSets ( VAR_LISTREUSABLEDELEGATIONSETSREQUEST ) ; }
public String METHOD_NAME ( ) { return LITERAL_STRING + a . METHOD_NAME ( ) + LITERAL_STRING + b . METHOD_NAME ( ) + LITERAL_STRING ; }
public InitiateLayerUploadResult METHOD_NAME ( InitiateLayerUploadRequest VAR_INITIATELAYERUPLOADREQUEST ) { VAR_INITIATELAYERUPLOADREQUEST = beforeClientExecution ( VAR_INITIATELAYERUPLOADREQUEST ) ; return executeInitiateLayerUpload ( VAR_INITIATELAYERUPLOADREQUEST ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setUriPattern ( LITERAL_STRING ) ; setMethod ( MethodType . POST ) ; }
public CONSTRUCTOR_NAME ( Map < String , String > VAR_MAP<STRING,STRING> ) { super ( VAR_MAP<STRING,STRING> ) ; inject = getBoolean ( VAR_MAP<STRING,STRING> , INJECT , true ) ; name = require ( VAR_MAP<STRING,STRING> , ENCODER ) ; String VAR_STRING = get ( VAR_MAP<STRING,STRING> , MAX_CODE_LENGTH ) ; if ( VAR_STRING != null ) { maxCodeLength = Integer . valueOf ( VAR_STRING ) ; } else { maxCodeLength = null ; } if ( ! VAR_MAP<STRING,STRING> . isEmpty ( ) ) { throw new IllegalArgumentException ( LITERAL_STRING + VAR_MAP<STRING,STRING> ) ; } }
public FetchCommand METHOD_NAME ( ) { return new FetchCommand ( repo ) ; }
public QueryPhraseMap METHOD_NAME ( String VAR_STRING , final List < TermInfo > VAR_LIST<TERMINFO> ) { QueryPhraseMap VAR_QUERYPHRASEMAP = getRootMap ( VAR_STRING ) ; if ( VAR_QUERYPHRASEMAP == null ) return null ; return VAR_QUERYPHRASEMAP . METHOD_NAME ( VAR_LIST<TERMINFO> ) ; }
@ Override public Iterator < Multiset . Entry < K > > METHOD_NAME ( ) { return new MultisetEntryIterator ( ) ; }
public DBSnapshot METHOD_NAME ( DeleteDBSnapshotRequest VAR_DELETEDBSNAPSHOTREQUEST ) { VAR_DELETEDBSNAPSHOTREQUEST = beforeClientExecution ( VAR_DELETEDBSNAPSHOTREQUEST ) ; return executeDeleteDBSnapshot ( VAR_DELETEDBSNAPSHOTREQUEST ) ; }
public void METHOD_NAME ( ) { output = true ; }
public ByteBuffer METHOD_NAME ( ) { throw new ReadOnlyBufferException ( ) ; }
public XmlPullParser METHOD_NAME ( ) throws XmlPullParserException { if ( parserClasses == null ) throw new XmlPullParserException ( LITERAL_STRING + classNamesLocation ) ; if ( parserClasses . size ( ) == LITERAL_INT ) throw new XmlPullParserException ( LITERAL_STRING + classNamesLocation ) ; StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < parserClasses . size ( ) ; VAR_INT ++ ) { Class VAR_CLASS = ( Class ) parserClasses . get ( VAR_INT ) ; try { XmlPullParser VAR_XMLPULLPARSER = ( XmlPullParser ) VAR_CLASS . newInstance ( ) ; for ( Iterator VAR_ITERATOR = features . keySet ( ) . iterator ( ) ; VAR_ITERATOR . hasNext ( ) ; ) { String VAR_STRING = ( String ) VAR_ITERATOR . next ( ) ; Boolean VAR_BOOLEAN = ( Boolean ) features . get ( VAR_STRING ) ; if ( VAR_BOOLEAN != null && VAR_BOOLEAN . booleanValue ( ) ) { VAR_XMLPULLPARSER . setFeature ( VAR_STRING , true ) ; } } return VAR_XMLPULLPARSER ; } catch ( Exception ex ) { VAR_STRINGBUILDER . append ( VAR_CLASS . getName ( ) + LITERAL_STRING + ex . toString ( ) + LITERAL_STRING ) ; } } throw new XmlPullParserException ( LITERAL_STRING + VAR_STRINGBUILDER ) ; }
public DeleteAnalysisSchemeResult METHOD_NAME ( DeleteAnalysisSchemeRequest VAR_DELETEANALYSISSCHEMEREQUEST ) { VAR_DELETEANALYSISSCHEMEREQUEST = beforeClientExecution ( VAR_DELETEANALYSISSCHEMEREQUEST ) ; return executeDeleteAnalysisScheme ( VAR_DELETEANALYSISSCHEMEREQUEST ) ; }
public CONSTRUCTOR_NAME ( HSSFWorkbook VAR_HSSFWORKBOOK ) { super ( VAR_HSSFWORKBOOK ) ; _wb = VAR_HSSFWORKBOOK ; _formatter = new HSSFDataFormatter ( ) ; }
public IntBuffer METHOD_NAME ( int VAR_INT , int VAR_INT ) { checkIndex ( VAR_INT ) ; byteBuffer . putInt ( VAR_INT * SizeOf . INT , VAR_INT ) ; return this ; }
public final byte METHOD_NAME ( int VAR_INT ) { if ( VAR_INT >= paramClass . length ) { return paramClass [ paramClass . length - LITERAL_INT ] ; } return paramClass [ VAR_INT ] ; }
public ListEndpointsResult METHOD_NAME ( ListEndpointsRequest VAR_LISTENDPOINTSREQUEST ) { VAR_LISTENDPOINTSREQUEST = beforeClientExecution ( VAR_LISTENDPOINTSREQUEST ) ; return executeListEndpoints ( VAR_LISTENDPOINTSREQUEST ) ; }
public static CharsRef METHOD_NAME ( String [ ] VAR_STRING[] , CharsRefBuilder VAR_CHARSREFBUILDER ) { int VAR_INT = LITERAL_INT ; char[] VAR_CHAR[] = VAR_CHARSREFBUILDER . chars ( ) ; for ( String VAR_STRING : VAR_STRING[] ) { int VAR_INT = VAR_STRING . length ( ) ; int VAR_INT = ( LITERAL_INT == VAR_INT ? VAR_INT : LITERAL_INT + VAR_INT + VAR_INT ) ; if ( VAR_INT > VAR_CHAR[] . length ) { VAR_CHARSREFBUILDER . grow ( VAR_INT ) ; VAR_CHAR[] = VAR_CHARSREFBUILDER . chars ( ) ; } if ( VAR_INT > LITERAL_INT ) { VAR_CHAR[] [ VAR_INT ++ ] = SynonymMap . WORD_SEPARATOR ; } VAR_STRING . getChars ( LITERAL_INT , VAR_INT , VAR_CHAR[] , VAR_INT ) ; VAR_INT += VAR_INT ; } VAR_CHARSREFBUILDER . setLength ( VAR_INT ) ; return VAR_CHARSREFBUILDER . get ( ) ; }
public StringBuffer METHOD_NAME ( int VAR_INT , float VAR_FLOAT ) { return METHOD_NAME ( VAR_INT , Float . toString ( VAR_FLOAT ) ) ; }
public ShortBuffer METHOD_NAME ( short [ ] VAR_SHORT[] , int VAR_INT , int VAR_INT ) { if ( VAR_INT > remaining ( ) ) { throw new BufferOverflowException ( ) ; } System . arraycopy ( VAR_SHORT[] , VAR_INT , backingArray , offset + position , VAR_INT ) ; position += VAR_INT ; return this ; }
public DisassociateResolverEndpointIpAddressResult METHOD_NAME ( DisassociateResolverEndpointIpAddressRequest VAR_DISASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST ) { VAR_DISASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST = beforeClientExecution ( VAR_DISASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST ) ; return executeDisassociateResolverEndpointIpAddress ( VAR_DISASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST ) ; }
public AcceptDirectConnectGatewayAssociationProposalResult METHOD_NAME ( AcceptDirectConnectGatewayAssociationProposalRequest VAR_ACCEPTDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST ) { VAR_ACCEPTDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST = beforeClientExecution ( VAR_ACCEPTDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST ) ; return executeAcceptDirectConnectGatewayAssociationProposal ( VAR_ACCEPTDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST ) ; }
public StopStackSetOperationResult METHOD_NAME ( StopStackSetOperationRequest VAR_STOPSTACKSETOPERATIONREQUEST ) { VAR_STOPSTACKSETOPERATIONREQUEST = beforeClientExecution ( VAR_STOPSTACKSETOPERATIONREQUEST ) ; return executeStopStackSetOperation ( VAR_STOPSTACKSETOPERATIONREQUEST ) ; }
public CacheSubnetGroup METHOD_NAME ( CreateCacheSubnetGroupRequest VAR_CREATECACHESUBNETGROUPREQUEST ) { VAR_CREATECACHESUBNETGROUPREQUEST = beforeClientExecution ( VAR_CREATECACHESUBNETGROUPREQUEST ) ; return executeCreateCacheSubnetGroup ( VAR_CREATECACHESUBNETGROUPREQUEST ) ; }
public CONSTRUCTOR_NAME ( OrdinalsSegmentReader VAR_ORDINALSSEGMENTREADER , int VAR_INT ) throws IOException { offsets = new int [ VAR_INT + LITERAL_INT ] ; int[] VAR_INT[] = new int [ VAR_INT ] ; long VAR_LONG = LITERAL_INT ; IntsRef VAR_INTSREF = new IntsRef ( LITERAL_INT ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; VAR_INT ++ ) { offsets [ VAR_INT ] = ( int ) VAR_LONG ; VAR_ORDINALSSEGMENTREADER . get ( VAR_INT , VAR_INTSREF ) ; long VAR_LONG = VAR_LONG + VAR_INTSREF . length ; if ( VAR_LONG > VAR_INT[] . length ) { if ( VAR_LONG > ArrayUtil . MAX_ARRAY_LENGTH ) { throw new IllegalStateException ( LITERAL_STRING + VAR_LONG + LITERAL_STRING ) ; } VAR_INT[] = ArrayUtil . grow ( VAR_INT[] , ( int ) VAR_LONG ) ; } System . arraycopy ( VAR_INTSREF . ints , LITERAL_INT , VAR_INT[] , ( int ) VAR_LONG , VAR_INTSREF . length ) ; VAR_LONG = VAR_LONG ; } offsets [ VAR_INT ] = ( int ) VAR_LONG ; if ( ( double ) VAR_LONG / VAR_INT[] . length < LITERAL_FLOAT ) { this . ordinals = new int [ ( int ) VAR_LONG ] ; System . arraycopy ( VAR_INT[] , LITERAL_INT , this . ordinals , LITERAL_INT , ( int ) VAR_LONG ) ; } else { this . ordinals = VAR_INT[] ; } }
public String METHOD_NAME ( ) { return userInfo ; }
@ Override public Object [ ] METHOD_NAME ( ) { return ObjectArrays . toArrayImpl ( this ) ; }
public DescribeCompilationJobResult METHOD_NAME ( DescribeCompilationJobRequest VAR_DESCRIBECOMPILATIONJOBREQUEST ) { VAR_DESCRIBECOMPILATIONJOBREQUEST = beforeClientExecution ( VAR_DESCRIBECOMPILATIONJOBREQUEST ) ; return executeDescribeCompilationJob ( VAR_DESCRIBECOMPILATIONJOBREQUEST ) ; }
public String METHOD_NAME ( ) { return decode ( query ) ; }
public CreateEnvironmentResult METHOD_NAME ( CreateEnvironmentRequest VAR_CREATEENVIRONMENTREQUEST ) { VAR_CREATEENVIRONMENTREQUEST = beforeClientExecution ( VAR_CREATEENVIRONMENTREQUEST ) ; return executeCreateEnvironment ( VAR_CREATEENVIRONMENTREQUEST ) ; }
public ParseTreeMatch METHOD_NAME ( ParseTree VAR_PARSETREE ) { return matcher . METHOD_NAME ( VAR_PARSETREE , this ) ; }
public boolean METHOD_NAME ( CharSequence VAR_CHARSEQUENCE ) { return map . containsKey ( VAR_CHARSEQUENCE ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING ) { setTableName ( VAR_STRING ) ; }
public boolean METHOD_NAME ( int VAR_INT ) { int VAR_INT ; boolean VAR_BOOLEAN ; int VAR_INT = findEndOfRowOutlineGroup ( VAR_INT ) ; if ( getRow ( VAR_INT + LITERAL_INT ) == null ) { VAR_INT = LITERAL_INT ; VAR_BOOLEAN = false ; } else { VAR_INT = getRow ( VAR_INT + LITERAL_INT ) . getOutlineLevel ( ) ; VAR_BOOLEAN = getRow ( VAR_INT + LITERAL_INT ) . getZeroHeight ( ) ; } int VAR_INT ; boolean VAR_BOOLEAN ; int VAR_INT = findStartOfRowOutlineGroup ( VAR_INT ) ; if ( VAR_INT - LITERAL_INT < LITERAL_INT || getRow ( VAR_INT - LITERAL_INT ) == null ) { VAR_INT = LITERAL_INT ; VAR_BOOLEAN = false ; } else { VAR_INT = getRow ( VAR_INT - LITERAL_INT ) . getOutlineLevel ( ) ; VAR_BOOLEAN = getRow ( VAR_INT - LITERAL_INT ) . getZeroHeight ( ) ; } if ( VAR_INT > VAR_INT ) { return VAR_BOOLEAN ; } return VAR_BOOLEAN ; }
public boolean METHOD_NAME ( ) { return true ; }
public ValidateMatchmakingRuleSetResult METHOD_NAME ( ValidateMatchmakingRuleSetRequest VAR_VALIDATEMATCHMAKINGRULESETREQUEST ) { VAR_VALIDATEMATCHMAKINGRULESETREQUEST = beforeClientExecution ( VAR_VALIDATEMATCHMAKINGRULESETREQUEST ) ; return executeValidateMatchmakingRuleSet ( VAR_VALIDATEMATCHMAKINGRULESETREQUEST ) ; }
public boolean METHOD_NAME ( String VAR_STRING , boolean VAR_BOOLEAN ) { boolean VAR_BOOLEAN = ( boolean [ ] ) valByRound . METHOD_NAME ( VAR_STRING ) ; if ( VAR_BOOLEAN != null ) { return VAR_BOOLEAN [ roundNumber % VAR_BOOLEAN . length ] ; } String VAR_STRING = props . getProperty ( VAR_STRING , LITERAL_STRING + VAR_BOOLEAN ) ; if ( VAR_STRING . indexOf ( LITERAL_STRING ) < LITERAL_INT ) { return Boolean . valueOf ( VAR_STRING ) . booleanValue ( ) ; } int VAR_INT = VAR_STRING . indexOf ( LITERAL_STRING ) ; String VAR_STRING = VAR_STRING . substring ( LITERAL_INT , VAR_INT ) ; VAR_STRING = VAR_STRING . substring ( VAR_INT + LITERAL_INT ) ; colForValByRound . put ( VAR_STRING , VAR_STRING ) ; VAR_BOOLEAN = propToBooleanArray ( VAR_STRING ) ; valByRound . put ( VAR_STRING , VAR_BOOLEAN ) ; return VAR_BOOLEAN [ roundNumber % VAR_BOOLEAN . length ] ; }
public UpdateLinkAttributesResult METHOD_NAME ( UpdateLinkAttributesRequest VAR_UPDATELINKATTRIBUTESREQUEST ) { VAR_UPDATELINKATTRIBUTESREQUEST = beforeClientExecution ( VAR_UPDATELINKATTRIBUTESREQUEST ) ; return executeUpdateLinkAttributes ( VAR_UPDATELINKATTRIBUTESREQUEST ) ; }
public CONSTRUCTOR_NAME ( TokenStream VAR_TOKENSTREAM , float VAR_FLOAT , String VAR_STRING ) { super ( VAR_TOKENSTREAM ) ; if ( VAR_STRING == null ) { throw new IllegalArgumentException ( LITERAL_STRING ) ; } thePayload = new BytesRef ( PayloadHelper . encodeFloat ( VAR_FLOAT ) ) ; this . VAR_STRING = VAR_STRING ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( Integer . toHexString ( getIterations ( ) ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public E METHOD_NAME ( E VAR_E ) { addElement ( VAR_E ) ; return VAR_E ; }
public CONSTRUCTOR_NAME ( int VAR_INT , float VAR_FLOAT , boolean VAR_BOOLEAN ) { super ( VAR_INT , VAR_FLOAT ) ; init ( ) ; this . VAR_BOOLEAN = VAR_BOOLEAN ; }
public CONSTRUCTOR_NAME ( ) { backingMap = new TreeMap < E , Object > ( ) ; }
public long METHOD_NAME ( long VAR_LONG ) throws IOException { if ( VAR_LONG < LITERAL_INT ) { throw new IllegalArgumentException ( LITERAL_STRING + VAR_LONG ) ; } synchronized ( lock ) { long VAR_LONG = LITERAL_INT ; int VAR_INT = VAR_LONG < LITERAL_INT ? ( int ) VAR_LONG : LITERAL_INT ; char[] VAR_CHAR[] = new char [ VAR_INT ] ; while ( VAR_LONG < VAR_LONG ) { int VAR_INT = VAR_INT ( VAR_CHAR[] , LITERAL_INT , VAR_INT ) ; if ( VAR_INT == - LITERAL_INT ) { return VAR_LONG ; } VAR_LONG += VAR_INT ; if ( VAR_INT < VAR_INT ) { return VAR_LONG ; } if ( VAR_LONG - VAR_LONG < VAR_INT ) { VAR_INT = ( int ) ( VAR_LONG - VAR_LONG ) ; } } return VAR_LONG ; } }
public ValueEval METHOD_NAME ( Ref3DPxg VAR_REF3DPXG ) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = createExternSheetRefEvaluator ( VAR_REF3DPXG . getSheetName ( ) , VAR_REF3DPXG . getLastSheetName ( ) , VAR_REF3DPXG . getExternalWorkbookNumber ( ) ) ; return new LazyRefEval ( VAR_REF3DPXG . getRow ( ) , VAR_REF3DPXG . getColumn ( ) , VAR_SHEETRANGEEVALUATOR ) ; }
public CONSTRUCTOR_NAME ( PerfRunData VAR_PERFRUNDATA ) { super ( VAR_PERFRUNDATA ) ; analyzerNames = new ArrayList < > ( ) ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { return VAR_OBJECT instanceof EnglishStemmer ; }
public void METHOD_NAME ( long [ ] VAR_LONG[] , int VAR_INT , long [ ] VAR_LONG[] , int VAR_INT , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; ++ VAR_INT ) { long VAR_LONG = VAR_LONG[] [ VAR_INT ++ ] ; VAR_INT = METHOD_NAME ( VAR_LONG , VAR_LONG[] , VAR_INT ) ; } }
public final void METHOD_NAME ( ) { ensureOpen ( ) ; refCount . incrementAndGet ( ) ; }
public ReplicationGroup METHOD_NAME ( TestFailoverRequest VAR_TESTFAILOVERREQUEST ) { VAR_TESTFAILOVERREQUEST = beforeClientExecution ( VAR_TESTFAILOVERREQUEST ) ; return executeTestFailover ( VAR_TESTFAILOVERREQUEST ) ; }
public CONSTRUCTOR_NAME ( Collection < Ref > VAR_COLLECTION<REF> ) { this . VAR_COLLECTION<REF> = RefComparator . sort ( VAR_COLLECTION<REF> ) ; }
public CONSTRUCTOR_NAME ( int VAR_INT ) { if ( VAR_INT > LITERAL_INT ) { blockSize = VAR_INT ; } else { blockSize = DEFAULT_BLOCK_SIZE ; } array = new byte [ blockSize ] ; n = LITERAL_INT ; }
public void METHOD_NAME ( ) { if ( workers . decrementAndGet ( ) == LITERAL_INT ) process . release ( ) ; }
public DescribeVolumeStatusResult METHOD_NAME ( DescribeVolumeStatusRequest VAR_DESCRIBEVOLUMESTATUSREQUEST ) { VAR_DESCRIBEVOLUMESTATUSREQUEST = beforeClientExecution ( VAR_DESCRIBEVOLUMESTATUSREQUEST ) ; return executeDescribeVolumeStatus ( VAR_DESCRIBEVOLUMESTATUSREQUEST ) ; }
public CONSTRUCTOR_NAME ( final int VAR_INT ) { elements = new ArrayList < > ( VAR_INT ) ; valueKeyMap = new HashMap < > ( VAR_INT ) ; }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { VAR_LITTLEENDIANOUTPUT . writeShort ( field_1_borderType ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( field_2_options ) ; }
public synchronized void METHOD_NAME ( Object [ ] VAR_OBJECT[] ) { System . arraycopy ( elementData , LITERAL_INT , VAR_OBJECT[] , LITERAL_INT , elementCount ) ; }
public ValueEval METHOD_NAME ( int VAR_INT , int VAR_INT , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL ) { double VAR_DOUBLE ; String VAR_STRING ; try { VAR_DOUBLE = evaluateDoubleArg ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; VAR_STRING = evaluateStringArg ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } try { String VAR_STRING = formatter . formatRawCellContents ( VAR_DOUBLE , - LITERAL_INT , VAR_STRING ) ; return new StringEval ( VAR_STRING ) ; } catch ( Exception e ) { return ErrorEval . VALUE_INVALID ; } }
public CONSTRUCTOR_NAME ( RecordStream VAR_RECORDSTREAM ) { _begin = VAR_RECORDSTREAM . getNext ( ) ; if ( _begin . getSid ( ) != UserSViewBegin . sid ) { throw new IllegalStateException ( LITERAL_STRING ) ; } List<RecordBase> VAR_LIST<RECORDBASE> = new ArrayList < > ( ) ; while ( VAR_RECORDSTREAM . peekNextSid ( ) != UserSViewEnd . sid ) { if ( PageSettingsBlock . isComponentRecord ( VAR_RECORDSTREAM . peekNextSid ( ) ) ) { if ( _psBlock != null ) { if ( VAR_RECORDSTREAM . peekNextSid ( ) == HeaderFooterRecord . sid ) { _psBlock . addLateHeaderFooter ( ( HeaderFooterRecord ) VAR_RECORDSTREAM . getNext ( ) ) ; continue ; } throw new IllegalStateException ( LITERAL_STRING + VAR_RECORDSTREAM . peekNextSid ( ) ) ; } _psBlock = new PageSettingsBlock ( VAR_RECORDSTREAM ) ; VAR_LIST<RECORDBASE> . add ( _psBlock ) ; continue ; } VAR_LIST<RECORDBASE> . add ( VAR_RECORDSTREAM . getNext ( ) ) ; } _recs = VAR_LIST<RECORDBASE> ; _end = VAR_RECORDSTREAM . getNext ( ) ; if ( _end . getSid ( ) != UserSViewEnd . sid ) { throw new IllegalStateException ( LITERAL_STRING ) ; } }
public DeleteSignalingChannelResult METHOD_NAME ( DeleteSignalingChannelRequest VAR_DELETESIGNALINGCHANNELREQUEST ) { VAR_DELETESIGNALINGCHANNELREQUEST = beforeClientExecution ( VAR_DELETESIGNALINGCHANNELREQUEST ) ; return executeDeleteSignalingChannel ( VAR_DELETESIGNALINGCHANNELREQUEST ) ; }
@ Override public boolean METHOD_NAME ( Object VAR_OBJECT ) { if ( contains ( VAR_OBJECT ) ) { Entry<?> VAR_ENTRY<?> = ( Entry < ? > ) VAR_OBJECT ; AtomicInteger VAR_ATOMICINTEGER = backingMap . METHOD_NAME ( VAR_ENTRY<?> . getElement ( ) ) ; int VAR_INT = VAR_ATOMICINTEGER . getAndSet ( LITERAL_INT ) ; size -= VAR_INT ; return true ; } return false ; }
public CONSTRUCTOR_NAME ( IndexDeletionPolicy VAR_INDEXDELETIONPOLICY ) { this . VAR_INDEXDELETIONPOLICY = VAR_INDEXDELETIONPOLICY ; }
public void METHOD_NAME ( ) throws BufferUnderflowException , BufferOverflowException , UnmappableCharacterException , MalformedInputException , CharacterCodingException { switch ( this . type ) { case TYPE_UNDERFLOW : throw new BufferUnderflowException ( ) ; case TYPE_OVERFLOW : throw new BufferOverflowException ( ) ; case TYPE_UNMAPPABLE_CHAR : throw new UnmappableCharacterException ( this . length ) ; case TYPE_MALFORMED_INPUT : throw new MalformedInputException ( this . length ) ; default : throw new CharacterCodingException ( ) ; } }
public CONSTRUCTOR_NAME ( LittleEndianInput VAR_LITTLEENDIANINPUT ) { int VAR_INT = VAR_LITTLEENDIANINPUT . readUByte ( ) ; _is16bitUnicode = ( VAR_LITTLEENDIANINPUT . readByte ( ) & LITERAL_INT ) != LITERAL_INT ; if ( _is16bitUnicode ) { field_3_string = StringUtil . readUnicodeLE ( VAR_LITTLEENDIANINPUT , VAR_INT ) ; } else { field_3_string = StringUtil . readCompressedUnicode ( VAR_LITTLEENDIANINPUT , VAR_INT ) ; } }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setProtocol ( ProtocolType . HTTPS ) ; }
public CleanCommand METHOD_NAME ( ) { return new CleanCommand ( repo ) ; }
public Collection < PackFile > METHOD_NAME ( ) { PackList VAR_PACKLIST = packList . get ( ) ; if ( VAR_PACKLIST == NO_PACKS ) VAR_PACKLIST = scanPacks ( VAR_PACKLIST ) ; PackFile[] VAR_PACKFILE[] = VAR_PACKLIST . VAR_PACKFILE[] ; return Collections . unmodifiableCollection ( Arrays . asList ( VAR_PACKFILE[] ) ) ; }
public DescribeStackDriftDetectionStatusResult METHOD_NAME ( DescribeStackDriftDetectionStatusRequest VAR_DESCRIBESTACKDRIFTDETECTIONSTATUSREQUEST ) { VAR_DESCRIBESTACKDRIFTDETECTIONSTATUSREQUEST = beforeClientExecution ( VAR_DESCRIBESTACKDRIFTDETECTIONSTATUSREQUEST ) ; return executeDescribeStackDriftDetectionStatus ( VAR_DESCRIBESTACKDRIFTDETECTIONSTATUSREQUEST ) ; }
public ListCloudFrontOriginAccessIdentitiesResult METHOD_NAME ( ListCloudFrontOriginAccessIdentitiesRequest VAR_LISTCLOUDFRONTORIGINACCESSIDENTITIESREQUEST ) { VAR_LISTCLOUDFRONTORIGINACCESSIDENTITIESREQUEST = beforeClientExecution ( VAR_LISTCLOUDFRONTORIGINACCESSIDENTITIESREQUEST ) ; return executeListCloudFrontOriginAccessIdentities ( VAR_LISTCLOUDFRONTORIGINACCESSIDENTITIESREQUEST ) ; }
public static SshSessionFactory METHOD_NAME ( ) { return INSTANCE ; }
public ListConferenceProvidersResult METHOD_NAME ( ListConferenceProvidersRequest VAR_LISTCONFERENCEPROVIDERSREQUEST ) { VAR_LISTCONFERENCEPROVIDERSREQUEST = beforeClientExecution ( VAR_LISTCONFERENCEPROVIDERSREQUEST ) ; return executeListConferenceProviders ( VAR_LISTCONFERENCEPROVIDERSREQUEST ) ; }
public UpdateReceiptRuleResult METHOD_NAME ( UpdateReceiptRuleRequest VAR_UPDATERECEIPTRULEREQUEST ) { VAR_UPDATERECEIPTRULEREQUEST = beforeClientExecution ( VAR_UPDATERECEIPTRULEREQUEST ) ; return executeUpdateReceiptRule ( VAR_UPDATERECEIPTRULEREQUEST ) ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < subfilters . length ; VAR_INT ++ ) { if ( VAR_INT > LITERAL_INT ) VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( subfilters [ VAR_INT ] . METHOD_NAME ( ) ) ; } VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { VAR_LITTLEENDIANOUTPUT . writeShort ( sid ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( length ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( flags ) ; }
public UpdateHealthCheckResult METHOD_NAME ( UpdateHealthCheckRequest VAR_UPDATEHEALTHCHECKREQUEST ) { VAR_UPDATEHEALTHCHECKREQUEST = beforeClientExecution ( VAR_UPDATEHEALTHCHECKREQUEST ) ; return executeUpdateHealthCheck ( VAR_UPDATEHEALTHCHECKREQUEST ) ; }
public synchronized long METHOD_NAME ( ) { long VAR_LONG = LITERAL_INT ; for ( CachedOrds VAR_CACHEDORDS : ordsCache . values ( ) ) { VAR_LONG += VAR_CACHEDORDS . METHOD_NAME ( ) ; } return VAR_LONG ; }
public UpdateWorkforceResult METHOD_NAME ( UpdateWorkforceRequest VAR_UPDATEWORKFORCEREQUEST ) { VAR_UPDATEWORKFORCEREQUEST = beforeClientExecution ( VAR_UPDATEWORKFORCEREQUEST ) ; return executeUpdateWorkforce ( VAR_UPDATEWORKFORCEREQUEST ) ; }
public void METHOD_NAME ( AnyObjectId VAR_ANYOBJECTID ) { VAR_ANYOBJECTID . copyRawTo ( idBuffer ( ) , idOffset ( ) ) ; }
public void METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , int VAR_INT ) throws IOException { IoBridge . METHOD_NAME ( fd , VAR_BYTE[] , VAR_INT , VAR_INT ) ; if ( syncMetadata ) { fd . sync ( ) ; } }
public GetBlockResult METHOD_NAME ( GetBlockRequest VAR_GETBLOCKREQUEST ) { VAR_GETBLOCKREQUEST = beforeClientExecution ( VAR_GETBLOCKREQUEST ) ; return executeGetBlock ( VAR_GETBLOCKREQUEST ) ; }
public void METHOD_NAME ( File VAR_FILE ) { exportBase . add ( VAR_FILE ) ; }
public CreateReservedInstancesListingResult METHOD_NAME ( CreateReservedInstancesListingRequest VAR_CREATERESERVEDINSTANCESLISTINGREQUEST ) { VAR_CREATERESERVEDINSTANCESLISTINGREQUEST = beforeClientExecution ( VAR_CREATERESERVEDINSTANCESLISTINGREQUEST ) ; return executeCreateReservedInstancesListing ( VAR_CREATERESERVEDINSTANCESLISTINGREQUEST ) ; }
public ByteBuffer METHOD_NAME ( byte VAR_BYTE ) { throw new ReadOnlyBufferException ( ) ; }
public ValueEval METHOD_NAME ( ValueEval [ ] VAR_VALUEEVAL[] , int VAR_INT , int VAR_INT ) { double VAR_DOUBLE ; try { List<Double> VAR_LIST<DOUBLE> = new ArrayList < > ( ) ; for ( ValueEval VAR_VALUEEVAL : VAR_VALUEEVAL[] ) { collectValues ( VAR_VALUEEVAL , VAR_LIST<DOUBLE> ) ; } double[] VAR_DOUBLE[] = new double [ VAR_LIST<DOUBLE> . size ( ) ] ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_DOUBLE[] . length ; VAR_INT ++ ) { VAR_DOUBLE[] [ VAR_INT ] = VAR_LIST<DOUBLE> . get ( VAR_INT ) . doubleValue ( ) ; } VAR_DOUBLE = METHOD_NAME ( VAR_DOUBLE[] ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } return new NumberEval ( VAR_DOUBLE ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setMethod ( MethodType . POST ) ; }
public CreateDirectoryConfigResult METHOD_NAME ( CreateDirectoryConfigRequest VAR_CREATEDIRECTORYCONFIGREQUEST ) { VAR_CREATEDIRECTORYCONFIGREQUEST = beforeClientExecution ( VAR_CREATEDIRECTORYCONFIGREQUEST ) ; return executeCreateDirectoryConfig ( VAR_CREATEDIRECTORYCONFIGREQUEST ) ; }
public DescribeExportTasksResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeExportTasksRequest ( ) ) ; }
public ExportClientVpnClientCertificateRevocationListResult METHOD_NAME ( ExportClientVpnClientCertificateRevocationListRequest VAR_EXPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST ) { VAR_EXPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST = beforeClientExecution ( VAR_EXPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST ) ; return executeExportClientVpnClientCertificateRevocationList ( VAR_EXPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST ) ; }
public CompleteMultipartUploadResult METHOD_NAME ( CompleteMultipartUploadRequest VAR_COMPLETEMULTIPARTUPLOADREQUEST ) { VAR_COMPLETEMULTIPARTUPLOADREQUEST = beforeClientExecution ( VAR_COMPLETEMULTIPARTUPLOADREQUEST ) ; return executeCompleteMultipartUpload ( VAR_COMPLETEMULTIPARTUPLOADREQUEST ) ; }
public long METHOD_NAME ( ) { long VAR_LONG = LITERAL_INT ; VAR_LONG += RamUsageEstimator . sizeOf ( minValues ) ; VAR_LONG += RamUsageEstimator . sizeOf ( averages ) ; for ( PackedInts . Reader VAR_PACKEDINTS.READER : subReaders ) { VAR_LONG += VAR_PACKEDINTS.READER . METHOD_NAME ( ) ; } return VAR_LONG ; }
public static void METHOD_NAME ( Object [ ] VAR_OBJECT[] , Object VAR_OBJECT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_OBJECT[] . length ; VAR_INT ++ ) { VAR_OBJECT[] [ VAR_INT ] = VAR_OBJECT ; } }
public ByteBuffer METHOD_NAME ( int VAR_INT , double VAR_DOUBLE ) { throw new ReadOnlyBufferException ( ) ; }
public DescribeAdjustmentTypesResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeAdjustmentTypesRequest ( ) ) ; }
public PersonIdent METHOD_NAME ( ) { RevCommit VAR_REVCOMMIT = getSourceCommit ( ) ; return VAR_REVCOMMIT != null ? VAR_REVCOMMIT . getCommitterIdent ( ) : null ; }
public Object [ ] METHOD_NAME ( ) { int VAR_INT = LITERAL_INT ; Object[] VAR_OBJECT[] = new Object [ size ] ; Link<E> VAR_LINK<E> = voidLink . next ; while ( VAR_LINK<E> != voidLink ) { VAR_OBJECT[] [ VAR_INT ++ ] = VAR_LINK<E> . data ; VAR_LINK<E> = VAR_LINK<E> . next ; } return VAR_OBJECT[] ; }
public String METHOD_NAME ( ) { return name + LITERAL_STRING + version ; }
public PushCommand METHOD_NAME ( RefSpec ... VAR_REFSPEC ) { checkCallable ( ) ; this . refSpecs . clear ( ) ; Collections . addAll ( refSpecs , VAR_REFSPEC ) ; return this ; }
public String METHOD_NAME ( String VAR_STRING ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( match . METHOD_NAME ( VAR_STRING ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( end ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public X509Certificate [ ] METHOD_NAME ( ) { return null ; }
public int METHOD_NAME ( ) { if ( pos < size ) { return s . charAt ( pos ++ ) ; } else { s = null ; return - LITERAL_INT ; } }
public PersonIdent METHOD_NAME ( ) { return destination . METHOD_NAME ( ) ; }
@ Override public int METHOD_NAME ( ) { return METHOD_NAME ; }
public GetRequestValidatorsResult METHOD_NAME ( GetRequestValidatorsRequest VAR_GETREQUESTVALIDATORSREQUEST ) { VAR_GETREQUESTVALIDATORSREQUEST = beforeClientExecution ( VAR_GETREQUESTVALIDATORSREQUEST ) ; return executeGetRequestValidators ( VAR_GETREQUESTVALIDATORSREQUEST ) ; }
public String METHOD_NAME ( ) { return LITERAL_STRING ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { if ( this == VAR_OBJECT ) return true ; if ( VAR_OBJECT == null ) return false ; if ( getClass ( ) != VAR_OBJECT . getClass ( ) ) return false ; SegToken VAR_SEGTOKEN = ( SegToken ) VAR_OBJECT ; if ( ! Arrays . METHOD_NAME ( charArray , VAR_SEGTOKEN . charArray ) ) return false ; if ( endOffset != VAR_SEGTOKEN . endOffset ) return false ; if ( index != VAR_SEGTOKEN . index ) return false ; if ( startOffset != VAR_SEGTOKEN . startOffset ) return false ; if ( weight != VAR_SEGTOKEN . weight ) return false ; if ( wordType != VAR_SEGTOKEN . wordType ) return false ; return true ; }
public int METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , EscherRecordFactory VAR_ESCHERRECORDFACTORY ) { readHeader ( VAR_BYTE[] , VAR_INT ) ; int VAR_INT = VAR_INT + LITERAL_INT ; int VAR_INT = LITERAL_INT ; field_1_shapeId = LittleEndian . getInt ( VAR_BYTE[] , VAR_INT + VAR_INT ) ; VAR_INT += LITERAL_INT ; field_2_flags = LittleEndian . getInt ( VAR_BYTE[] , VAR_INT + VAR_INT ) ; VAR_INT += LITERAL_INT ; return getRecordSize ( ) ; }
public String METHOD_NAME ( ) { return ALGORITHM_NAME ; }
public synchronized void METHOD_NAME ( ) { if ( size != LITERAL_INT ) { Arrays . fill ( table , null ) ; modCount ++ ; size = LITERAL_INT ; } }
public CancelCapacityReservationResult METHOD_NAME ( CancelCapacityReservationRequest VAR_CANCELCAPACITYRESERVATIONREQUEST ) { VAR_CANCELCAPACITYRESERVATIONREQUEST = beforeClientExecution ( VAR_CANCELCAPACITYRESERVATIONREQUEST ) ; return executeCancelCapacityReservation ( VAR_CANCELCAPACITYRESERVATIONREQUEST ) ; }
public ImportDocumentationPartsResult METHOD_NAME ( ImportDocumentationPartsRequest VAR_IMPORTDOCUMENTATIONPARTSREQUEST ) { VAR_IMPORTDOCUMENTATIONPARTSREQUEST = beforeClientExecution ( VAR_IMPORTDOCUMENTATIONPARTSREQUEST ) ; return executeImportDocumentationParts ( VAR_IMPORTDOCUMENTATIONPARTSREQUEST ) ; }
public SuggestResult METHOD_NAME ( SuggestRequest VAR_SUGGESTREQUEST ) { VAR_SUGGESTREQUEST = beforeClientExecution ( VAR_SUGGESTREQUEST ) ; return executeSuggest ( VAR_SUGGESTREQUEST ) ; }
public Explanation METHOD_NAME ( int VAR_INT , String VAR_STRING , int VAR_INT , float VAR_FLOAT ) { return Explanation . match ( docScore ( VAR_INT , VAR_STRING , VAR_INT , VAR_FLOAT ) , getClass ( ) . getSimpleName ( ) + LITERAL_STRING ) ; }
public int METHOD_NAME ( int VAR_INT , byte [ ] VAR_BYTE[] ) { int VAR_INT = LITERAL_INT ; for ( org . apache . poi . hssf . record . Record VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD : _list ) { VAR_INT += VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD . METHOD_NAME ( VAR_INT + VAR_INT , VAR_BYTE[] ) ; } return VAR_INT ; }
public String METHOD_NAME ( ) { return _string . METHOD_NAME ( ) ; }
public static long [ ] METHOD_NAME ( long [ ] VAR_LONG[] , int VAR_INT , int VAR_INT ) { if ( VAR_INT > VAR_INT ) { throw new IllegalArgumentException ( ) ; } int VAR_INT = VAR_LONG[] . length ; if ( VAR_INT < LITERAL_INT || VAR_INT > VAR_INT ) { throw new ArrayIndexOutOfBoundsException ( ) ; } int VAR_INT = VAR_INT - VAR_INT ; int VAR_INT = Math . min ( VAR_INT , VAR_INT - VAR_INT ) ; long[] VAR_LONG[] = new long [ VAR_INT ] ; System . arraycopy ( VAR_LONG[] , VAR_INT , VAR_LONG[] , LITERAL_INT , VAR_INT ) ; return VAR_LONG[] ; }
public static byte [ ] METHOD_NAME ( ByteBuffer VAR_BYTEBUFFER , int VAR_INT ) { if ( VAR_BYTEBUFFER . hasArray ( ) && VAR_BYTEBUFFER . arrayOffset ( ) == LITERAL_INT ) { return VAR_BYTEBUFFER . array ( ) ; } checkByteSizeLimit ( VAR_INT ) ; byte[] VAR_BYTE[] = new byte [ VAR_INT ] ; VAR_BYTEBUFFER . get ( VAR_BYTE[] ) ; return VAR_BYTE[] ; }
public synchronized void METHOD_NAME ( int VAR_INT ) { METHOD_NAME ( VAR_INT , false ) ; }
public void METHOD_NAME ( CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE ) { if ( VAR_CELLVALUERECORDINTERFACE == null ) { throw new IllegalArgumentException ( LITERAL_STRING ) ; } int VAR_INT = VAR_CELLVALUERECORDINTERFACE . getRow ( ) ; if ( VAR_INT >= records . length ) { throw new RuntimeException ( LITERAL_STRING ) ; } CellValueRecordInterface[] VAR_CELLVALUERECORDINTERFACE[] = records [ VAR_INT ] ; if ( VAR_CELLVALUERECORDINTERFACE[] == null ) { throw new RuntimeException ( LITERAL_STRING ) ; } short VAR_SHORT = VAR_CELLVALUERECORDINTERFACE . getColumn ( ) ; if ( VAR_SHORT >= VAR_CELLVALUERECORDINTERFACE[] . length ) { throw new RuntimeException ( LITERAL_STRING ) ; } VAR_CELLVALUERECORDINTERFACE[] [ VAR_SHORT ] = null ; }
public static String METHOD_NAME ( String VAR_STRING , boolean VAR_BOOLEAN ) { int VAR_INT = LITERAL_INT ; int VAR_INT = LITERAL_INT ; for ( int VAR_INT = LITERAL_INT ; VAR_INT <= VAR_STRING . length ( ) ; ) { int VAR_INT ; if ( VAR_INT == VAR_STRING . length ( ) ) { VAR_INT = VAR_INT ; } else if ( VAR_STRING . charAt ( VAR_INT ) == LITERAL_CHAR ) { VAR_INT = VAR_INT + LITERAL_INT ; } else { VAR_INT ++ ; continue ; } if ( VAR_INT == VAR_INT + LITERAL_INT && VAR_STRING . regionMatches ( VAR_INT , LITERAL_STRING , LITERAL_INT , LITERAL_INT ) ) { VAR_STRING = VAR_STRING . substring ( LITERAL_INT , VAR_INT ) + VAR_STRING . substring ( VAR_INT ) ; VAR_INT = VAR_INT ; } else if ( VAR_INT == VAR_INT + LITERAL_INT && VAR_STRING . regionMatches ( VAR_INT , LITERAL_STRING , LITERAL_INT , LITERAL_INT ) ) { if ( VAR_INT > LITERAL_INT || VAR_BOOLEAN ) { VAR_INT -- ; int VAR_INT = VAR_STRING . lastIndexOf ( LITERAL_CHAR , VAR_INT - LITERAL_INT ) + LITERAL_INT ; VAR_STRING = VAR_STRING . substring ( LITERAL_INT , VAR_INT ) + VAR_STRING . substring ( VAR_INT ) ; VAR_INT = VAR_INT = VAR_INT ; } else { VAR_INT ++ ; VAR_INT = VAR_INT ; } } else { if ( VAR_INT > LITERAL_INT ) { VAR_INT ++ ; } VAR_INT ++ ; VAR_INT = VAR_INT ; } } return VAR_STRING ; }
public CONSTRUCTOR_NAME ( Map < String , String > VAR_MAP<STRING,STRING> ) { super ( VAR_MAP<STRING,STRING> ) ; if ( ! VAR_MAP<STRING,STRING> . isEmpty ( ) ) { throw new IllegalArgumentException ( LITERAL_STRING + VAR_MAP<STRING,STRING> ) ; } }
public Entry < String , Ref > METHOD_NAME ( ) { if ( packedIdx < packed . size ( ) && looseIdx < loose . size ( ) ) { Ref VAR_REF = packed . get ( packedIdx ) ; Ref VAR_REF = loose . get ( looseIdx ) ; int VAR_INT = RefComparator . compareTo ( VAR_REF , VAR_REF ) ; if ( VAR_INT < LITERAL_INT ) { packedIdx ++ ; return toEntry ( VAR_REF ) ; } if ( VAR_INT == LITERAL_INT ) packedIdx ++ ; looseIdx ++ ; return toEntry ( resolveLoose ( VAR_REF ) ) ; } if ( looseIdx < loose . size ( ) ) return toEntry ( resolveLoose ( loose . get ( looseIdx ++ ) ) ) ; if ( packedIdx < packed . size ( ) ) return toEntry ( packed . get ( packedIdx ++ ) ) ; return null ; }
public DeleteEnvironmentResult METHOD_NAME ( DeleteEnvironmentRequest VAR_DELETEENVIRONMENTREQUEST ) { VAR_DELETEENVIRONMENTREQUEST = beforeClientExecution ( VAR_DELETEENVIRONMENTREQUEST ) ; return executeDeleteEnvironment ( VAR_DELETEENVIRONMENTREQUEST ) ; }
public int METHOD_NAME ( char VAR_CHAR , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; VAR_INT ++ ) switch ( s [ VAR_INT ] ) { case LITERAL_CHAR : s [ VAR_INT ] = LITERAL_CHAR ; break ; case LITERAL_CHAR : case LITERAL_CHAR : s [ VAR_INT ] = LITERAL_CHAR ; break ; case LITERAL_CHAR : s [ VAR_INT ] = LITERAL_CHAR ; break ; case LITERAL_CHAR : case LITERAL_CHAR : case LITERAL_CHAR : case LITERAL_CHAR : s [ VAR_INT ] = LITERAL_CHAR ; break ; case LITERAL_CHAR : case LITERAL_CHAR : case LITERAL_CHAR : case LITERAL_CHAR : case LITERAL_CHAR : s [ VAR_INT ] = LITERAL_CHAR ; break ; } VAR_INT = removeCase ( s , VAR_INT ) ; VAR_INT = removePossessive ( s , VAR_INT ) ; VAR_INT = removePlural ( s , VAR_INT ) ; return normalize ( s , VAR_INT ) ; }
public void METHOD_NAME ( EscherRecord VAR_ESCHERRECORD , int VAR_INT ) { int VAR_INT = LITERAL_INT ; for ( EscherRecord VAR_ESCHERRECORD : this ) { if ( VAR_ESCHERRECORD . getRecordId ( ) == ( short ) VAR_INT ) { break ; } VAR_INT ++ ; } _childRecords . add ( VAR_INT , VAR_ESCHERRECORD ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setProtocol ( ProtocolType . HTTPS ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setMethod ( MethodType . POST ) ; }
public ValueEval METHOD_NAME ( int VAR_INT , int VAR_INT , ValueEval VAR_VALUEEVAL ) { int VAR_INT ; if ( VAR_VALUEEVAL instanceof TwoDEval ) { VAR_INT = ( ( TwoDEval ) VAR_VALUEEVAL ) . getHeight ( ) ; } else if ( VAR_VALUEEVAL instanceof RefEval ) { VAR_INT = LITERAL_INT ; } else { return ErrorEval . VALUE_INVALID ; } return new NumberEval ( VAR_INT ) ; }
public DescribeReservedInstancesResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeReservedInstancesRequest ( ) ) ; }
public void METHOD_NAME ( boolean VAR_BOOLEAN ) { packedGitMMAP = VAR_BOOLEAN ; }
public CONSTRUCTOR_NAME ( ) { this . components = new String [ LITERAL_INT ] ; }
public String METHOD_NAME ( ) { return key + LITERAL_STRING + value ; }
public void METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , int [ ] VAR_INT[] , int VAR_INT , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; ++ VAR_INT ) { int VAR_INT = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; int VAR_INT = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; int VAR_INT = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; VAR_INT[] [ VAR_INT ++ ] = ( VAR_INT < < LITERAL_INT ) | ( VAR_INT < < LITERAL_INT ) | ( VAR_INT > > > LITERAL_INT ) ; int VAR_INT = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; int VAR_INT = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; VAR_INT[] [ VAR_INT ++ ] = ( ( VAR_INT & LITERAL_INT ) < < LITERAL_INT ) | ( VAR_INT < < LITERAL_INT ) | VAR_INT ; } }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { VAR_LITTLEENDIANOUTPUT . writeShort ( _extBookIndex ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( _firstSheetIndex ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( _lastSheetIndex ) ; }
public CONSTRUCTOR_NAME ( PatternConsumer VAR_PATTERNCONSUMER ) { this ( ) ; this . VAR_PATTERNCONSUMER = VAR_PATTERNCONSUMER ; }
public final String [ ] METHOD_NAME ( String VAR_STRING ) { List<String> VAR_LIST<STRING> = new ArrayList < > ( ) ; for ( IndexableField VAR_INDEXABLEFIELD : fields ) { if ( VAR_INDEXABLEFIELD . VAR_STRING ( ) . equals ( VAR_STRING ) && VAR_INDEXABLEFIELD . stringValue ( ) != null ) { VAR_LIST<STRING> . add ( VAR_INDEXABLEFIELD . stringValue ( ) ) ; } } if ( VAR_LIST<STRING> . size ( ) == LITERAL_INT ) { return NO_STRINGS ; } return VAR_LIST<STRING> . toArray ( new String [ VAR_LIST<STRING> . size ( ) ] ) ; }
public ListIdentityPoolUsageResult METHOD_NAME ( ListIdentityPoolUsageRequest VAR_LISTIDENTITYPOOLUSAGEREQUEST ) { VAR_LISTIDENTITYPOOLUSAGEREQUEST = beforeClientExecution ( VAR_LISTIDENTITYPOOLUSAGEREQUEST ) ; return executeListIdentityPoolUsage ( VAR_LISTIDENTITYPOOLUSAGEREQUEST ) ; }
public ValueEval METHOD_NAME ( ValueEval [ ] VAR_VALUEEVAL[] , int VAR_INT , int VAR_INT ) { if ( VAR_VALUEEVAL[] . length < LITERAL_INT || VAR_VALUEEVAL[] . length > LITERAL_INT ) { return ErrorEval . VALUE_INVALID ; } try { BaseRef VAR_BASEREF = evaluateBaseRef ( VAR_VALUEEVAL[] [ LITERAL_INT ] ) ; int VAR_INT = ( VAR_VALUEEVAL[] [ LITERAL_INT ] instanceof MissingArgEval ) ? LITERAL_INT : evaluateIntArg ( VAR_VALUEEVAL[] [ LITERAL_INT ] , VAR_INT , VAR_INT ) ; int VAR_INT = ( VAR_VALUEEVAL[] [ LITERAL_INT ] instanceof MissingArgEval ) ? LITERAL_INT : evaluateIntArg ( VAR_VALUEEVAL[] [ LITERAL_INT ] , VAR_INT , VAR_INT ) ; int VAR_INT = VAR_BASEREF . getHeight ( ) ; int VAR_INT = VAR_BASEREF . getWidth ( ) ; switch ( VAR_VALUEEVAL[] . length ) { case LITERAL_INT : if ( ! ( VAR_VALUEEVAL[] [ LITERAL_INT ] instanceof MissingArgEval ) ) { VAR_INT = evaluateIntArg ( VAR_VALUEEVAL[] [ LITERAL_INT ] , VAR_INT , VAR_INT ) ; } case LITERAL_INT : if ( ! ( VAR_VALUEEVAL[] [ LITERAL_INT ] instanceof MissingArgEval ) ) { VAR_INT = evaluateIntArg ( VAR_VALUEEVAL[] [ LITERAL_INT ] , VAR_INT , VAR_INT ) ; } break ; default : break ; } if ( VAR_INT == LITERAL_INT || VAR_INT == LITERAL_INT ) { return ErrorEval . REF_INVALID ; } LinearOffsetRange VAR_LINEAROFFSETRANGE = new LinearOffsetRange ( VAR_INT , VAR_INT ) ; LinearOffsetRange VAR_LINEAROFFSETRANGE = new LinearOffsetRange ( VAR_INT , VAR_INT ) ; return createOffset ( VAR_BASEREF , VAR_LINEAROFFSETRANGE , VAR_LINEAROFFSETRANGE ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } }
public int [ ] METHOD_NAME ( ) { return countsByTime ; }
public UpdateAccountResult METHOD_NAME ( UpdateAccountRequest VAR_UPDATEACCOUNTREQUEST ) { VAR_UPDATEACCOUNTREQUEST = beforeClientExecution ( VAR_UPDATEACCOUNTREQUEST ) ; return executeUpdateAccount ( VAR_UPDATEACCOUNTREQUEST ) ; }
public DescribeTrainingJobResult METHOD_NAME ( DescribeTrainingJobRequest VAR_DESCRIBETRAININGJOBREQUEST ) { VAR_DESCRIBETRAININGJOBREQUEST = beforeClientExecution ( VAR_DESCRIBETRAININGJOBREQUEST ) ; return executeDescribeTrainingJob ( VAR_DESCRIBETRAININGJOBREQUEST ) ; }
public DeleteGroupResult METHOD_NAME ( DeleteGroupRequest VAR_DELETEGROUPREQUEST ) { VAR_DELETEGROUPREQUEST = beforeClientExecution ( VAR_DELETEGROUPREQUEST ) ; return executeDeleteGroup ( VAR_DELETEGROUPREQUEST ) ; }
public int METHOD_NAME ( int VAR_INT ) { upto ++ ; if ( upto == docIDs . length ) { return docID = NO_MORE_DOCS ; } int VAR_INT = LITERAL_INT ; int VAR_INT = upto + LITERAL_INT ; int VAR_INT ; int VAR_INT ; while ( true ) { if ( VAR_INT >= docIDs . length ) { VAR_INT = VAR_INT - VAR_INT ; VAR_INT = docIDs . length - LITERAL_INT ; break ; } if ( VAR_INT <= docIDs [ VAR_INT ] ) { VAR_INT = VAR_INT - VAR_INT ; VAR_INT = VAR_INT ; break ; } VAR_INT *= LITERAL_INT ; VAR_INT += VAR_INT ; } while ( true ) { if ( VAR_INT > VAR_INT ) { upto = VAR_INT ; break ; } int VAR_INT = ( VAR_INT + VAR_INT ) > > > LITERAL_INT ; int VAR_INT = docIDs [ VAR_INT ] - VAR_INT ; if ( VAR_INT < LITERAL_INT ) { VAR_INT = VAR_INT + LITERAL_INT ; } else if ( VAR_INT > LITERAL_INT ) { VAR_INT = VAR_INT - LITERAL_INT ; } else { upto = VAR_INT ; break ; } } if ( upto == docIDs . length ) { return docID = NO_MORE_DOCS ; } else { return docID = docIDs [ upto ] ; } }
public void METHOD_NAME ( final POIFSReaderListener VAR_POIFSREADERLISTENER ) { if ( VAR_POIFSREADERLISTENER == null ) { throw new NullPointerException ( ) ; } if ( registryClosed ) { throw new IllegalStateException ( ) ; } registry . METHOD_NAME ( VAR_POIFSREADERLISTENER ) ; }
public static int [ ] METHOD_NAME ( int [ ] VAR_INT[] , int VAR_INT ) { assert VAR_INT >= LITERAL_INT : LITERAL_STRING + VAR_INT + LITERAL_STRING ; if ( VAR_INT[] . length < VAR_INT ) { return growExact ( VAR_INT[] , oversize ( VAR_INT , Integer . BYTES ) ) ; } else return VAR_INT[] ; }
public void METHOD_NAME ( TerminalNode VAR_TERMINALNODE ) { System . out . println ( LITERAL_STRING + VAR_TERMINALNODE . getSymbol ( ) + LITERAL_STRING + getRuleNames ( ) [ _ctx . getRuleIndex ( ) ] ) ; }
public TokenStream METHOD_NAME ( TokenStream VAR_TOKENSTREAM ) { return new LatvianStemFilter ( VAR_TOKENSTREAM ) ; }
public ReplicationGroup METHOD_NAME ( IncreaseReplicaCountRequest VAR_INCREASEREPLICACOUNTREQUEST ) { VAR_INCREASEREPLICACOUNTREQUEST = beforeClientExecution ( VAR_INCREASEREPLICACOUNTREQUEST ) ; return executeIncreaseReplicaCount ( VAR_INCREASEREPLICACOUNTREQUEST ) ; }
public void METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , long [ ] VAR_LONG[] , int VAR_INT , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; ++ VAR_INT ) { long VAR_LONG = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = VAR_LONG > > > LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = ( VAR_LONG > > > LITERAL_INT ) & LITERAL_INT ; long VAR_LONG = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = ( ( VAR_LONG & LITERAL_INT ) < < LITERAL_INT ) | ( VAR_LONG > > > LITERAL_INT ) ; VAR_LONG[] [ VAR_INT ++ ] = ( VAR_LONG > > > LITERAL_INT ) & LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = ( VAR_LONG > > > LITERAL_INT ) & LITERAL_INT ; long VAR_LONG = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = ( ( VAR_LONG & LITERAL_INT ) < < LITERAL_INT ) | ( VAR_LONG > > > LITERAL_INT ) ; VAR_LONG[] [ VAR_INT ++ ] = ( VAR_LONG > > > LITERAL_INT ) & LITERAL_INT ; VAR_LONG[] [ VAR_INT ++ ] = VAR_LONG & LITERAL_INT ; } }
public StopHyperParameterTuningJobResult METHOD_NAME ( StopHyperParameterTuningJobRequest VAR_STOPHYPERPARAMETERTUNINGJOBREQUEST ) { VAR_STOPHYPERPARAMETERTUNINGJOBREQUEST = beforeClientExecution ( VAR_STOPHYPERPARAMETERTUNINGJOBREQUEST ) ; return executeStopHyperParameterTuningJob ( VAR_STOPHYPERPARAMETERTUNINGJOBREQUEST ) ; }
public ResetNetworkInterfaceAttributeResult METHOD_NAME ( ResetNetworkInterfaceAttributeRequest VAR_RESETNETWORKINTERFACEATTRIBUTEREQUEST ) { VAR_RESETNETWORKINTERFACEATTRIBUTEREQUEST = beforeClientExecution ( VAR_RESETNETWORKINTERFACEATTRIBUTEREQUEST ) ; return executeResetNetworkInterfaceAttribute ( VAR_RESETNETWORKINTERFACEATTRIBUTEREQUEST ) ; }
public RevBlob METHOD_NAME ( AnyObjectId VAR_ANYOBJECTID ) { RevBlob VAR_REVBLOB = ( RevBlob ) objects . get ( VAR_ANYOBJECTID ) ; if ( VAR_REVBLOB == null ) { VAR_REVBLOB = new RevBlob ( VAR_ANYOBJECTID ) ; objects . add ( VAR_REVBLOB ) ; } return VAR_REVBLOB ; }
public ListGroupMembershipsResult METHOD_NAME ( ListGroupMembershipsRequest VAR_LISTGROUPMEMBERSHIPSREQUEST ) { VAR_LISTGROUPMEMBERSHIPSREQUEST = beforeClientExecution ( VAR_LISTGROUPMEMBERSHIPSREQUEST ) ; return executeListGroupMemberships ( VAR_LISTGROUPMEMBERSHIPSREQUEST ) ; }
public static void METHOD_NAME ( File VAR_FILE , boolean VAR_BOOLEAN ) throws IOException { if ( ! VAR_FILE . METHOD_NAME ( ) ) { if ( VAR_BOOLEAN && VAR_FILE . isDirectory ( ) ) return ; throw new IOException ( MessageFormat . format ( JGitText . get ( ) . mkDirFailed , VAR_FILE . getAbsolutePath ( ) ) ) ; } }
public UpdateDetectorVersionMetadataResult METHOD_NAME ( UpdateDetectorVersionMetadataRequest VAR_UPDATEDETECTORVERSIONMETADATAREQUEST ) { VAR_UPDATEDETECTORVERSIONMETADATAREQUEST = beforeClientExecution ( VAR_UPDATEDETECTORVERSIONMETADATAREQUEST ) ; return executeUpdateDetectorVersionMetadata ( VAR_UPDATEDETECTORVERSIONMETADATAREQUEST ) ; }
public void METHOD_NAME ( String VAR_STRING , int VAR_INT , int VAR_INT ) throws IOException { if ( ( VAR_INT | VAR_INT ) < LITERAL_INT || VAR_INT > VAR_STRING . length ( ) - VAR_INT ) { throw new StringIndexOutOfBoundsException ( VAR_STRING , VAR_INT , VAR_INT ) ; } char[] VAR_CHAR[] = new char [ VAR_INT ] ; VAR_STRING . getChars ( VAR_INT , VAR_INT + VAR_INT , VAR_CHAR[] , LITERAL_INT ) ; synchronized ( lock ) { METHOD_NAME ( VAR_CHAR[] , LITERAL_INT , VAR_CHAR[] . length ) ; } }
public synchronized void METHOD_NAME ( int VAR_INT ) { super . METHOD_NAME ( VAR_INT ) ; }
public DescribeRecipeResult METHOD_NAME ( DescribeRecipeRequest VAR_DESCRIBERECIPEREQUEST ) { VAR_DESCRIBERECIPEREQUEST = beforeClientExecution ( VAR_DESCRIBERECIPEREQUEST ) ; return executeDescribeRecipe ( VAR_DESCRIBERECIPEREQUEST ) ; }
public DisassociateRouteTableResult METHOD_NAME ( DisassociateRouteTableRequest VAR_DISASSOCIATEROUTETABLEREQUEST ) { VAR_DISASSOCIATEROUTETABLEREQUEST = beforeClientExecution ( VAR_DISASSOCIATEROUTETABLEREQUEST ) ; return executeDisassociateRouteTable ( VAR_DISASSOCIATEROUTETABLEREQUEST ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING , String VAR_STRING , String VAR_STRING ) { setTopicArn ( VAR_STRING ) ; setAttributeName ( VAR_STRING ) ; setAttributeValue ( VAR_STRING ) ; }
public static char [ ] METHOD_NAME ( char [ ] VAR_CHAR[] , int VAR_INT ) { assert VAR_INT >= LITERAL_INT : LITERAL_STRING + VAR_INT + LITERAL_STRING ; if ( VAR_CHAR[] . length < VAR_INT ) { return growExact ( VAR_CHAR[] , oversize ( VAR_INT , Character . BYTES ) ) ; } else return VAR_CHAR[] ; }
public StashCreateCommand METHOD_NAME ( String VAR_STRING ) { this . VAR_STRING = VAR_STRING ; return this ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { super ( VAR_RECORDINPUTSTREAM ) ; long VAR_LONG = VAR_RECORDINPUTSTREAM . readLong ( ) ; field_5_options = VAR_RECORDINPUTSTREAM . readShort ( ) ; specialCachedValue = FormulaSpecialCachedValue . create ( VAR_LONG ) ; if ( specialCachedValue == null ) { field_4_value = Double . longBitsToDouble ( VAR_LONG ) ; } field_6_zero = VAR_RECORDINPUTSTREAM . readInt ( ) ; int VAR_INT = VAR_RECORDINPUTSTREAM . readShort ( ) ; int VAR_INT = VAR_RECORDINPUTSTREAM . available ( ) ; field_8_parsed_expr = Formula . read ( VAR_INT , VAR_RECORDINPUTSTREAM , VAR_INT ) ; }
public SynonymQuery METHOD_NAME ( ) { Collections . sort ( terms , Comparator . comparing ( a -> a . term ) ) ; return new SynonymQuery ( terms . toArray ( new TermAndBoost [ LITERAL_INT ] ) , field ) ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { field_1_password = VAR_RECORDINPUTSTREAM . readShort ( ) ; }
public boolean METHOD_NAME ( ) { return false ; }
public int METHOD_NAME ( int VAR_INT ) { if ( VAR_INT < start || VAR_INT > end ) { throw new IllegalArgumentException ( LITERAL_STRING ) ; } else if ( VAR_INT == start ) { current = start ; return DONE ; } else { return first ( ) ; } }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { field_1_codepage = VAR_RECORDINPUTSTREAM . readShort ( ) ; }
public ApproveAssignmentResult METHOD_NAME ( ApproveAssignmentRequest VAR_APPROVEASSIGNMENTREQUEST ) { VAR_APPROVEASSIGNMENTREQUEST = beforeClientExecution ( VAR_APPROVEASSIGNMENTREQUEST ) ; return executeApproveAssignment ( VAR_APPROVEASSIGNMENTREQUEST ) ; }
public DescribeVpnConnectionsResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeVpnConnectionsRequest ( ) ) ; }
public final V METHOD_NAME ( ) { return nextEntry ( ) . value ; }
public DescribeInstanceHealthResult METHOD_NAME ( DescribeInstanceHealthRequest VAR_DESCRIBEINSTANCEHEALTHREQUEST ) { VAR_DESCRIBEINSTANCEHEALTHREQUEST = beforeClientExecution ( VAR_DESCRIBEINSTANCEHEALTHREQUEST ) ; return executeDescribeInstanceHealth ( VAR_DESCRIBEINSTANCEHEALTHREQUEST ) ; }
public static void METHOD_NAME ( TransportProtocol VAR_TRANSPORTPROTOCOL ) { protocols . add ( LITERAL_INT , new WeakReference < > ( VAR_TRANSPORTPROTOCOL ) ) ; }
public static char [ ] METHOD_NAME ( char [ ] VAR_CHAR[] , int VAR_INT , int VAR_INT ) { if ( VAR_INT > VAR_INT ) { throw new IllegalArgumentException ( ) ; } int VAR_INT = VAR_CHAR[] . length ; if ( VAR_INT < LITERAL_INT || VAR_INT > VAR_INT ) { throw new ArrayIndexOutOfBoundsException ( ) ; } int VAR_INT = VAR_INT - VAR_INT ; int VAR_INT = Math . min ( VAR_INT , VAR_INT - VAR_INT ) ; char[] VAR_CHAR[] = new char [ VAR_INT ] ; System . arraycopy ( VAR_CHAR[] , VAR_INT , VAR_CHAR[] , LITERAL_INT , VAR_INT ) ; return VAR_CHAR[] ; }
public static void METHOD_NAME ( int [ ] VAR_INT[] , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT[] . length ; VAR_INT ++ ) { VAR_INT[] [ VAR_INT ] = VAR_INT ; } }
public Class < ? extends Record > METHOD_NAME ( ) { if ( ! hasNext ( ) ) { return null ; } return _list . get ( _nextIndex ) . getClass ( ) ; }
public static char [ ] METHOD_NAME ( char [ ] VAR_CHAR[] , int VAR_INT ) { if ( VAR_INT < LITERAL_INT ) { throw new NegativeArraySizeException ( ) ; } return copyOfRange ( VAR_CHAR[] , LITERAL_INT , VAR_INT ) ; }
public DeleteRelationalDatabaseResult METHOD_NAME ( DeleteRelationalDatabaseRequest VAR_DELETERELATIONALDATABASEREQUEST ) { VAR_DELETERELATIONALDATABASEREQUEST = beforeClientExecution ( VAR_DELETERELATIONALDATABASEREQUEST ) ; return executeDeleteRelationalDatabase ( VAR_DELETERELATIONALDATABASEREQUEST ) ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { if ( this == VAR_OBJECT ) { return true ; } if ( VAR_OBJECT == null ) { return false ; } if ( getClass ( ) != VAR_OBJECT . getClass ( ) ) { return false ; } WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO = ( WeightedPhraseInfo ) VAR_OBJECT ; if ( getStartOffset ( ) != VAR_WEIGHTEDPHRASEINFO . getStartOffset ( ) ) { return false ; } if ( getEndOffset ( ) != VAR_WEIGHTEDPHRASEINFO . getEndOffset ( ) ) { return false ; } if ( getBoost ( ) != VAR_WEIGHTEDPHRASEINFO . getBoost ( ) ) { return false ; } return true ; }
public boolean METHOD_NAME ( ) { return nextBlock != POIFSConstants . END_OF_CHAIN ; }
public void METHOD_NAME ( char VAR_CHAR ) { if ( len >= buf . length ) { resize ( len + LITERAL_INT ) ; } unsafeWrite ( VAR_CHAR ) ; }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { futureHeader . METHOD_NAME ( VAR_LITTLEENDIANOUTPUT ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( isf_sharedFeatureType ) ; VAR_LITTLEENDIANOUTPUT . writeByte ( reserved ) ; VAR_LITTLEENDIANOUTPUT . writeInt ( ( int ) cbHdrData ) ; VAR_LITTLEENDIANOUTPUT . write ( rgbHdrData ) ; }
public ListUserHierarchyGroupsResult METHOD_NAME ( ListUserHierarchyGroupsRequest VAR_LISTUSERHIERARCHYGROUPSREQUEST ) { VAR_LISTUSERHIERARCHYGROUPSREQUEST = beforeClientExecution ( VAR_LISTUSERHIERARCHYGROUPSREQUEST ) ; return executeListUserHierarchyGroups ( VAR_LISTUSERHIERARCHYGROUPSREQUEST ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING ) { setTopicArn ( VAR_STRING ) ; }
public CreateTrafficPolicyVersionResult METHOD_NAME ( CreateTrafficPolicyVersionRequest VAR_CREATETRAFFICPOLICYVERSIONREQUEST ) { VAR_CREATETRAFFICPOLICYVERSIONREQUEST = beforeClientExecution ( VAR_CREATETRAFFICPOLICYVERSIONREQUEST ) ; return executeCreateTrafficPolicyVersion ( VAR_CREATETRAFFICPOLICYVERSIONREQUEST ) ; }
@ Override public boolean METHOD_NAME ( Object VAR_OBJECT ) { if ( this == VAR_OBJECT ) { return true ; } if ( VAR_OBJECT instanceof Map . Entry ) { Map.Entry<?,?> VAR_MAP.ENTRY<?,?> = ( Map . Entry < ? , ? > ) VAR_OBJECT ; return ( key == null ? VAR_MAP.ENTRY<?,?> . getKey ( ) == null : key . METHOD_NAME ( VAR_MAP.ENTRY<?,?> . getKey ( ) ) ) && ( value == null ? VAR_MAP.ENTRY<?,?> . getValue ( ) == null : value . METHOD_NAME ( VAR_MAP.ENTRY<?,?> . getValue ( ) ) ) ; } return false ; }
public ListResourcesResult METHOD_NAME ( ListResourcesRequest VAR_LISTRESOURCESREQUEST ) { VAR_LISTRESOURCESREQUEST = beforeClientExecution ( VAR_LISTRESOURCESREQUEST ) ; return executeListResources ( VAR_LISTRESOURCESREQUEST ) ; }
public final V METHOD_NAME ( V VAR_V ) { while ( true ) { V VAR_V = get ( ) ; if ( compareAndSet ( VAR_V , VAR_V ) ) return VAR_V ; } }
public CONSTRUCTOR_NAME ( ) { futureHeader = new FtrHeader ( ) ; futureHeader . setRecordType ( sid ) ; }
public DisassociatePhoneNumbersFromVoiceConnectorResult METHOD_NAME ( DisassociatePhoneNumbersFromVoiceConnectorRequest VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORREQUEST ) { VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORREQUEST = beforeClientExecution ( VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORREQUEST ) ; return executeDisassociatePhoneNumbersFromVoiceConnector ( VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORREQUEST ) ; }
public ObjectId METHOD_NAME ( int VAR_INT , byte [ ] VAR_BYTE[] ) { return METHOD_NAME ( VAR_INT , VAR_BYTE[] , LITERAL_INT , VAR_BYTE[] . length ) ; }
public void METHOD_NAME ( ParseTreeListener VAR_PARSETREELISTENER ) { if ( _parseListeners != null ) { if ( _parseListeners . remove ( VAR_PARSETREELISTENER ) ) { if ( _parseListeners . isEmpty ( ) ) { _parseListeners = null ; } } } }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { field_1_axisType = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_2_reserved1 = VAR_RECORDINPUTSTREAM . readInt ( ) ; field_3_reserved2 = VAR_RECORDINPUTSTREAM . readInt ( ) ; field_4_reserved3 = VAR_RECORDINPUTSTREAM . readInt ( ) ; field_5_reserved4 = VAR_RECORDINPUTSTREAM . readInt ( ) ; }
public static double METHOD_NAME ( double [ ] VAR_DOUBLE[] ) throws EvaluationException { if ( VAR_DOUBLE[] . length < LITERAL_INT ) { throw new EvaluationException ( ErrorEval . NA ) ; } int[] VAR_INT[] = new int [ VAR_DOUBLE[] . length ] ; Arrays . fill ( VAR_INT[] , LITERAL_INT ) ; for ( int VAR_INT = LITERAL_INT int VAR_INT = VAR_DOUBLE[] . length ; VAR_INT < VAR_INT ; VAR_INT ++ ) { for ( int VAR_INT = VAR_INT + LITERAL_INT int VAR_INT = VAR_DOUBLE[] . length ; VAR_INT < VAR_INT ; VAR_INT ++ ) { if ( VAR_DOUBLE[] [ VAR_INT ] == VAR_DOUBLE[] [ VAR_INT ] ) VAR_INT[] [ VAR_INT ] ++ ; } } double VAR_DOUBLE = LITERAL_INT ; int VAR_INT = LITERAL_INT ; for ( int VAR_INT = LITERAL_INT int VAR_INT = VAR_INT[] . length ; VAR_INT < VAR_INT ; VAR_INT ++ ) { if ( VAR_INT[] [ VAR_INT ] > VAR_INT ) { VAR_DOUBLE = VAR_DOUBLE[] [ VAR_INT ] ; VAR_INT = VAR_INT[] [ VAR_INT ] ; } } if ( VAR_INT > LITERAL_INT ) { return VAR_DOUBLE ; } throw new EvaluationException ( ErrorEval . NA ) ; }
public void METHOD_NAME ( BytesRef VAR_BYTESREF , int VAR_INT ) { if ( VAR_INT < currentMin ) { return ; } FacetEntry VAR_FACETENTRY = new FacetEntry ( VAR_BYTESREF , VAR_INT ) ; if ( facetEntries . size ( ) == maxSize ) { if ( facetEntries . higher ( VAR_FACETENTRY ) == null ) { return ; } facetEntries . pollLast ( ) ; } facetEntries . add ( VAR_FACETENTRY ) ; if ( facetEntries . size ( ) == maxSize ) { currentMin = facetEntries . last ( ) . VAR_INT ; } }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; String VAR_STRING = System . getProperty ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING + VAR_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . toHex ( reserved ) ) . append ( VAR_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING + VAR_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public String METHOD_NAME ( ) { return getMode ( ) . METHOD_NAME ( ) + LITERAL_STRING + getName ( ) ; }
public CONSTRUCTOR_NAME ( int VAR_INT ) { if ( VAR_INT > LITERAL_INT ) { blockSize = VAR_INT ; } else { blockSize = DEFAULT_BLOCK_SIZE ; } array = new char [ blockSize ] ; n = LITERAL_INT ; }
public DescribeAccountLimitsResult METHOD_NAME ( DescribeAccountLimitsRequest VAR_DESCRIBEACCOUNTLIMITSREQUEST ) { VAR_DESCRIBEACCOUNTLIMITSREQUEST = beforeClientExecution ( VAR_DESCRIBEACCOUNTLIMITSREQUEST ) ; return executeDescribeAccountLimits ( VAR_DESCRIBEACCOUNTLIMITSREQUEST ) ; }
public void METHOD_NAME ( byte VAR_BYTE , int VAR_INT ) { linkTable . METHOD_NAME ( VAR_BYTE , VAR_INT ) ; }
public CreateSecurityGroupResult METHOD_NAME ( CreateSecurityGroupRequest VAR_CREATESECURITYGROUPREQUEST ) { VAR_CREATESECURITYGROUPREQUEST = beforeClientExecution ( VAR_CREATESECURITYGROUPREQUEST ) ; return executeCreateSecurityGroup ( VAR_CREATESECURITYGROUPREQUEST ) ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { return sameClassAs ( VAR_OBJECT ) && equalsTo ( getClass ( ) . cast ( VAR_OBJECT ) ) ; }
public GetObjectInformationResult METHOD_NAME ( GetObjectInformationRequest VAR_GETOBJECTINFORMATIONREQUEST ) { VAR_GETOBJECTINFORMATIONREQUEST = beforeClientExecution ( VAR_GETOBJECTINFORMATIONREQUEST ) ; return executeGetObjectInformation ( VAR_GETOBJECTINFORMATIONREQUEST ) ; }
public StringBuffer METHOD_NAME ( long VAR_LONG ) { IntegralToString . appendLong ( this , VAR_LONG ) ; return this ; }
public GetIntegrationResponsesResult METHOD_NAME ( GetIntegrationResponsesRequest VAR_GETINTEGRATIONRESPONSESREQUEST ) { VAR_GETINTEGRATIONRESPONSESREQUEST = beforeClientExecution ( VAR_GETINTEGRATIONRESPONSESREQUEST ) ; return executeGetIntegrationResponses ( VAR_GETINTEGRATIONRESPONSESREQUEST ) ; }
public ListDeploymentConfigsResult METHOD_NAME ( ) { return METHOD_NAME ( new ListDeploymentConfigsRequest ( ) ) ; }
public CellRangeAddress METHOD_NAME ( int VAR_INT ) { if ( _list . isEmpty ( ) ) { throw new RuntimeException ( LITERAL_STRING ) ; } if ( VAR_INT < LITERAL_INT || VAR_INT >= _list . size ( ) ) { throw new RuntimeException ( LITERAL_STRING + VAR_INT + LITERAL_STRING + ( _list . size ( ) - LITERAL_INT ) + LITERAL_STRING ) ; } return _list . METHOD_NAME ( VAR_INT ) ; }
public DimConfig METHOD_NAME ( String VAR_STRING ) { DimConfig VAR_DIMCONFIG = fieldTypes . get ( VAR_STRING ) ; if ( VAR_DIMCONFIG == null ) { VAR_DIMCONFIG = getDefaultDimConfig ( ) ; } return VAR_DIMCONFIG ; }
public DescribeStackResourceDriftsResult METHOD_NAME ( DescribeStackResourceDriftsRequest VAR_DESCRIBESTACKRESOURCEDRIFTSREQUEST ) { VAR_DESCRIBESTACKRESOURCEDRIFTSREQUEST = beforeClientExecution ( VAR_DESCRIBESTACKRESOURCEDRIFTSREQUEST ) ; return executeDescribeStackResourceDrifts ( VAR_DESCRIBESTACKRESOURCEDRIFTSREQUEST ) ; }
public void METHOD_NAME ( String VAR_STRING ) { if ( ! supportsParams ( ) ) { throw new UnsupportedOperationException ( getName ( ) + LITERAL_STRING ) ; } this . VAR_STRING = VAR_STRING ; }
public DescribeRepositoryAssociationResult METHOD_NAME ( DescribeRepositoryAssociationRequest VAR_DESCRIBEREPOSITORYASSOCIATIONREQUEST ) { VAR_DESCRIBEREPOSITORYASSOCIATIONREQUEST = beforeClientExecution ( VAR_DESCRIBEREPOSITORYASSOCIATIONREQUEST ) ; return executeDescribeRepositoryAssociation ( VAR_DESCRIBEREPOSITORYASSOCIATIONREQUEST ) ; }
public synchronized Enumeration < V > METHOD_NAME ( ) { return new ValueEnumeration ( ) ; }
public void METHOD_NAME ( int VAR_INT , long VAR_LONG ) { int VAR_INT = VAR_INT > > > LITERAL_INT ; int VAR_INT = VAR_INT & LITERAL_INT ; int VAR_INT = VAR_INT < < LITERAL_INT ; blocks [ VAR_INT ] = ( blocks [ VAR_INT ] & ~ ( LITERAL_INT < < VAR_INT ) ) | ( VAR_LONG < < VAR_INT ) ; }
public CONSTRUCTOR_NAME ( Map < String , String > VAR_MAP<STRING,STRING> ) { super ( VAR_MAP<STRING,STRING> ) ; escapedTags = getSet ( VAR_MAP<STRING,STRING> , LITERAL_STRING ) ; if ( ! VAR_MAP<STRING,STRING> . isEmpty ( ) ) { throw new IllegalArgumentException ( LITERAL_STRING + VAR_MAP<STRING,STRING> ) ; } }
public int METHOD_NAME ( ) { return pathLen ; }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { VAR_LITTLEENDIANOUTPUT . writeShort ( field_1_option_flag ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( field_2_ixals ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( field_3_not_used ) ; VAR_LITTLEENDIANOUTPUT . writeByte ( field_4_name . length ( ) ) ; StringUtil . writeUnicodeStringFlagAndData ( VAR_LITTLEENDIANOUTPUT , field_4_name ) ; if ( ! isOLELink ( ) && ! isStdDocumentNameIdentifier ( ) ) { if ( isAutomaticLink ( ) ) { if ( _ddeValues != null ) { VAR_LITTLEENDIANOUTPUT . writeByte ( _nColumns - LITERAL_INT ) ; VAR_LITTLEENDIANOUTPUT . writeShort ( _nRows - LITERAL_INT ) ; ConstantValueParser . encode ( VAR_LITTLEENDIANOUTPUT , _ddeValues ) ; } } else { field_5_name_definition . METHOD_NAME ( VAR_LITTLEENDIANOUTPUT ) ; } } }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( _options ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public ContinueDeploymentResult METHOD_NAME ( ContinueDeploymentRequest VAR_CONTINUEDEPLOYMENTREQUEST ) { VAR_CONTINUEDEPLOYMENTREQUEST = beforeClientExecution ( VAR_CONTINUEDEPLOYMENTREQUEST ) ; return executeContinueDeployment ( VAR_CONTINUEDEPLOYMENTREQUEST ) ; }
public void METHOD_NAME ( int VAR_INT , long VAR_LONG ) { int VAR_INT = VAR_INT / LITERAL_INT ; int VAR_INT = VAR_INT % LITERAL_INT ; int VAR_INT = VAR_INT * LITERAL_INT ; blocks [ VAR_INT ] = ( blocks [ VAR_INT ] & ~ ( LITERAL_INT < < VAR_INT ) ) | ( VAR_LONG < < VAR_INT ) ; }
public long METHOD_NAME ( ) throws IOException { if ( ord == valueCount ) { throw new EOFException ( ) ; } if ( off == blockSize ) { refill ( ) ; } long VAR_LONG = values [ off ++ ] ; ++ ord ; return VAR_LONG ; }
public static final RevFilter METHOD_NAME ( Date VAR_DATE , Date VAR_DATE ) { return METHOD_NAME ( VAR_DATE . getTime ( ) , VAR_DATE . getTime ( ) ) ; }
public DeleteVaultResult METHOD_NAME ( DeleteVaultRequest VAR_DELETEVAULTREQUEST ) { VAR_DELETEVAULTREQUEST = beforeClientExecution ( VAR_DELETEVAULTREQUEST ) ; return executeDeleteVault ( VAR_DELETEVAULTREQUEST ) ; }
public final void METHOD_NAME ( ) { it = cachedStates . getStates ( ) ; }
public void METHOD_NAME ( ) { detachingSymbolicRef = true ; }
public ModifyIdentityIdFormatResult METHOD_NAME ( ModifyIdentityIdFormatRequest VAR_MODIFYIDENTITYIDFORMATREQUEST ) { VAR_MODIFYIDENTITYIDFORMATREQUEST = beforeClientExecution ( VAR_MODIFYIDENTITYIDFORMATREQUEST ) ; return executeModifyIdentityIdFormat ( VAR_MODIFYIDENTITYIDFORMATREQUEST ) ; }
public void METHOD_NAME ( String VAR_STRING , ArrayList < Object > VAR_ARRAYLIST<OBJECT> ) { stoplist . put ( VAR_STRING , VAR_ARRAYLIST<OBJECT> ) ; }
public CONSTRUCTOR_NAME ( Map < String , String > VAR_MAP<STRING,STRING> ) { super ( VAR_MAP<STRING,STRING> ) ; if ( ! VAR_MAP<STRING,STRING> . isEmpty ( ) ) { throw new IllegalArgumentException ( LITERAL_STRING + VAR_MAP<STRING,STRING> ) ; } }
public RegisterTypeResult METHOD_NAME ( RegisterTypeRequest VAR_REGISTERTYPEREQUEST ) { VAR_REGISTERTYPEREQUEST = beforeClientExecution ( VAR_REGISTERTYPEREQUEST ) ; return executeRegisterType ( VAR_REGISTERTYPEREQUEST ) ; }
public GetAccessControlEffectResult METHOD_NAME ( GetAccessControlEffectRequest VAR_GETACCESSCONTROLEFFECTREQUEST ) { VAR_GETACCESSCONTROLEFFECTREQUEST = beforeClientExecution ( VAR_GETACCESSCONTROLEFFECTREQUEST ) ; return executeGetAccessControlEffect ( VAR_GETACCESSCONTROLEFFECTREQUEST ) ; }
public HSSFShapeGroup METHOD_NAME ( HSSFChildAnchor VAR_HSSFCHILDANCHOR ) { HSSFShapeGroup VAR_HSSFSHAPEGROUP = new HSSFShapeGroup ( this , VAR_HSSFCHILDANCHOR ) ; VAR_HSSFSHAPEGROUP . setParent ( this ) ; VAR_HSSFSHAPEGROUP . setAnchor ( VAR_HSSFCHILDANCHOR ) ; shapes . add ( VAR_HSSFSHAPEGROUP ) ; onCreate ( VAR_HSSFSHAPEGROUP ) ; return VAR_HSSFSHAPEGROUP ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; appendSanitized ( VAR_STRINGBUILDER , getName ( ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; appendSanitized ( VAR_STRINGBUILDER , getEmailAddress ( ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( when / LITERAL_INT ) ; VAR_STRINGBUILDER . append ( LITERAL_CHAR ) ; appendTimezone ( VAR_STRINGBUILDER , tzOffset ) ; return VAR_STRINGBUILDER . toString ( ) ; }
public static FontCharset METHOD_NAME ( int VAR_INT ) { if ( VAR_INT >= _table . length ) return null ; return _table [ VAR_INT ] ; }
public CONSTRUCTOR_NAME ( ) { sentenceSplitter = null ; }
public String METHOD_NAME ( ) { return this . METHOD_NAME ; }
public CONSTRUCTOR_NAME ( Query VAR_QUERY , String VAR_STRING ) { init ( VAR_QUERY , VAR_STRING , null , true ) ; }
public CONSTRUCTOR_NAME ( java . util . List < Signer > VAR_JAVA.UTIL.LIST<SIGNER> ) { setItems ( VAR_JAVA.UTIL.LIST<SIGNER> ) ; }
public final String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( getClass ( ) . getName ( ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( formatReferenceAsString ( ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public UpdateNodegroupConfigResult METHOD_NAME ( UpdateNodegroupConfigRequest VAR_UPDATENODEGROUPCONFIGREQUEST ) { VAR_UPDATENODEGROUPCONFIGREQUEST = beforeClientExecution ( VAR_UPDATENODEGROUPCONFIGREQUEST ) ; return executeUpdateNodegroupConfig ( VAR_UPDATENODEGROUPCONFIGREQUEST ) ; }
public void METHOD_NAME ( int VAR_INT , int VAR_INT , long VAR_LONG ) { assert VAR_LONG <= maxValue ( getBitsPerValue ( ) ) ; assert VAR_INT <= VAR_INT ; for ( int VAR_INT = VAR_INT ; VAR_INT < VAR_INT ; ++ VAR_INT ) { set ( VAR_INT , VAR_LONG ) ; } }
public ListTrainingJobsResult METHOD_NAME ( ListTrainingJobsRequest VAR_LISTTRAININGJOBSREQUEST ) { VAR_LISTTRAININGJOBSREQUEST = beforeClientExecution ( VAR_LISTTRAININGJOBSREQUEST ) ; return executeListTrainingJobs ( VAR_LISTTRAININGJOBSREQUEST ) ; }
public DescribeProfilingGroupResult METHOD_NAME ( DescribeProfilingGroupRequest VAR_DESCRIBEPROFILINGGROUPREQUEST ) { VAR_DESCRIBEPROFILINGGROUPREQUEST = beforeClientExecution ( VAR_DESCRIBEPROFILINGGROUPREQUEST ) ; return executeDescribeProfilingGroup ( VAR_DESCRIBEPROFILINGGROUPREQUEST ) ; }
public CONSTRUCTOR_NAME ( List < FastIgnoreRule > VAR_LIST<FASTIGNORERULE> ) { this . VAR_LIST<FASTIGNORERULE> = VAR_LIST<FASTIGNORERULE> ; }
public static void METHOD_NAME ( char [ ] VAR_CHAR[] , char VAR_CHAR ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_CHAR[] . length ; VAR_INT ++ ) { VAR_CHAR[] [ VAR_INT ] = VAR_CHAR ; } }
public GetTransitGatewayMulticastDomainAssociationsResult METHOD_NAME ( GetTransitGatewayMulticastDomainAssociationsRequest VAR_GETTRANSITGATEWAYMULTICASTDOMAINASSOCIATIONSREQUEST ) { VAR_GETTRANSITGATEWAYMULTICASTDOMAINASSOCIATIONSREQUEST = beforeClientExecution ( VAR_GETTRANSITGATEWAYMULTICASTDOMAINASSOCIATIONSREQUEST ) ; return executeGetTransitGatewayMulticastDomainAssociations ( VAR_GETTRANSITGATEWAYMULTICASTDOMAINASSOCIATIONSREQUEST ) ; }
public LongBuffer METHOD_NAME ( ) { System . arraycopy ( backingArray , position + offset , backingArray , offset , remaining ( ) ) ; position = limit - position ; limit = capacity ; mark = UNSET_MARK ; return this ; }
public GetCelebrityInfoResult METHOD_NAME ( GetCelebrityInfoRequest VAR_GETCELEBRITYINFOREQUEST ) { VAR_GETCELEBRITYINFOREQUEST = beforeClientExecution ( VAR_GETCELEBRITYINFOREQUEST ) ; return executeGetCelebrityInfo ( VAR_GETCELEBRITYINFOREQUEST ) ; }
public GetTranscriptResult METHOD_NAME ( GetTranscriptRequest VAR_GETTRANSCRIPTREQUEST ) { VAR_GETTRANSCRIPTREQUEST = beforeClientExecution ( VAR_GETTRANSCRIPTREQUEST ) ; return executeGetTranscript ( VAR_GETTRANSCRIPTREQUEST ) ; }
public DeleteCacheParameterGroupResult METHOD_NAME ( DeleteCacheParameterGroupRequest VAR_DELETECACHEPARAMETERGROUPREQUEST ) { VAR_DELETECACHEPARAMETERGROUPREQUEST = beforeClientExecution ( VAR_DELETECACHEPARAMETERGROUPREQUEST ) ; return executeDeleteCacheParameterGroup ( VAR_DELETECACHEPARAMETERGROUPREQUEST ) ; }
public CONSTRUCTOR_NAME ( java . util . List < Filter > VAR_JAVA.UTIL.LIST<FILTER> ) { setFilters ( VAR_JAVA.UTIL.LIST<FILTER> ) ; }
public CreateCustomMetadataResult METHOD_NAME ( CreateCustomMetadataRequest VAR_CREATECUSTOMMETADATAREQUEST ) { VAR_CREATECUSTOMMETADATAREQUEST = beforeClientExecution ( VAR_CREATECUSTOMMETADATAREQUEST ) ; return executeCreateCustomMetadata ( VAR_CREATECUSTOMMETADATAREQUEST ) ; }
public Cluster METHOD_NAME ( ResumeClusterRequest VAR_RESUMECLUSTERREQUEST ) { VAR_RESUMECLUSTERREQUEST = beforeClientExecution ( VAR_RESUMECLUSTERREQUEST ) ; return executeResumeCluster ( VAR_RESUMECLUSTERREQUEST ) ; }
public DescribeMovingAddressesResult METHOD_NAME ( DescribeMovingAddressesRequest VAR_DESCRIBEMOVINGADDRESSESREQUEST ) { VAR_DESCRIBEMOVINGADDRESSESREQUEST = beforeClientExecution ( VAR_DESCRIBEMOVINGADDRESSESREQUEST ) ; return executeDescribeMovingAddresses ( VAR_DESCRIBEMOVINGADDRESSESREQUEST ) ; }
public SearchAddressBooksResult METHOD_NAME ( SearchAddressBooksRequest VAR_SEARCHADDRESSBOOKSREQUEST ) { VAR_SEARCHADDRESSBOOKSREQUEST = beforeClientExecution ( VAR_SEARCHADDRESSBOOKSREQUEST ) ; return executeSearchAddressBooks ( VAR_SEARCHADDRESSBOOKSREQUEST ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setMethod ( MethodType . POST ) ; }
public void METHOD_NAME ( RevCommit VAR_REVCOMMIT ) { Block VAR_BLOCK = tail ; if ( VAR_BLOCK == null ) { VAR_BLOCK = free . newBlock ( ) ; VAR_BLOCK . METHOD_NAME ( VAR_REVCOMMIT ) ; head = VAR_BLOCK ; tail = VAR_BLOCK ; return ; } else if ( VAR_BLOCK . isFull ( ) ) { VAR_BLOCK = free . newBlock ( ) ; tail . next = VAR_BLOCK ; tail = VAR_BLOCK ; } VAR_BLOCK . METHOD_NAME ( VAR_REVCOMMIT ) ; }
public FloatBuffer METHOD_NAME ( int VAR_INT , float VAR_FLOAT ) { checkIndex ( VAR_INT ) ; byteBuffer . putFloat ( VAR_INT * SizeOf . FLOAT , VAR_FLOAT ) ; return this ; }
public void METHOD_NAME ( ) throws IOException { try { beginWrite ( ) ; dst . METHOD_NAME ( ) ; } catch ( InterruptedIOException e ) { throw writeTimedOut ( e ) ; } finally { endWrite ( ) ; } }
public Set < String > METHOD_NAME ( ) { return Collections . unmodifiableSet ( diff . METHOD_NAME ( ) ) ; }
public LongsRef METHOD_NAME ( int VAR_INT ) throws IOException { assert VAR_INT > LITERAL_INT ; if ( ord == valueCount ) { throw new EOFException ( ) ; } if ( off == blockSize ) { refill ( ) ; } VAR_INT = Math . min ( VAR_INT , blockSize - off ) ; VAR_INT = ( int ) Math . min ( VAR_INT , valueCount - ord ) ; valuesRef . offset = off ; valuesRef . length = VAR_INT ; off += VAR_INT ; ord += VAR_INT ; return valuesRef ; }
public ByteBuffer METHOD_NAME ( ) { return new ReadOnlyHeapByteBuffer ( backingArray , remaining ( ) , offset + position ) ; }
public final boolean METHOD_NAME ( ) { return beginA == endA && beginB == endB ; }
public static final int METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT ) { int VAR_INT = VAR_BYTE[] . length ; if ( VAR_INT == LITERAL_INT ) VAR_INT += LITERAL_INT ; while ( VAR_INT < VAR_INT && VAR_BYTE[] [ VAR_INT ] == LITERAL_CHAR ) VAR_INT += LITERAL_INT ; return tagMessage ( VAR_BYTE[] , VAR_INT ) ; }
public ValueEval METHOD_NAME ( ValueEval [ ] VAR_VALUEEVAL[] , OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT ) { if ( VAR_VALUEEVAL[] . length != LITERAL_INT ) { return ErrorEval . VALUE_INVALID ; } try { double VAR_DOUBLE = getValue ( VAR_VALUEEVAL[] [ LITERAL_INT ] ) ; int VAR_INT = ( int ) getValue ( VAR_VALUEEVAL[] [ LITERAL_INT ] ) ; Date VAR_DATE = DateUtil . getJavaDate ( VAR_DOUBLE ) ; if ( VAR_DATE == null ) { return ErrorEval . VALUE_INVALID ; } Calendar VAR_CALENDAR = LocaleUtil . getLocaleCalendar ( ) ; VAR_CALENDAR . setTime ( VAR_DATE ) ; VAR_CALENDAR . add ( Calendar . MONTH , VAR_INT ) ; return new NumberEval ( DateUtil . getExcelDate ( VAR_CALENDAR . getTime ( ) ) ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } }
public DeleteSuggesterResult METHOD_NAME ( DeleteSuggesterRequest VAR_DELETESUGGESTERREQUEST ) { VAR_DELETESUGGESTERREQUEST = beforeClientExecution ( VAR_DELETESUGGESTERREQUEST ) ; return executeDeleteSuggester ( VAR_DELETESUGGESTERREQUEST ) ; }
public CreatePipelineResult METHOD_NAME ( CreatePipelineRequest VAR_CREATEPIPELINEREQUEST ) { VAR_CREATEPIPELINEREQUEST = beforeClientExecution ( VAR_CREATEPIPELINEREQUEST ) ; return executeCreatePipeline ( VAR_CREATEPIPELINEREQUEST ) ; }
public StopDeliveryStreamEncryptionResult METHOD_NAME ( StopDeliveryStreamEncryptionRequest VAR_STOPDELIVERYSTREAMENCRYPTIONREQUEST ) { VAR_STOPDELIVERYSTREAMENCRYPTIONREQUEST = beforeClientExecution ( VAR_STOPDELIVERYSTREAMENCRYPTIONREQUEST ) ; return executeStopDeliveryStreamEncryption ( VAR_STOPDELIVERYSTREAMENCRYPTIONREQUEST ) ; }
public DeleteApplicationSnapshotResult METHOD_NAME ( DeleteApplicationSnapshotRequest VAR_DELETEAPPLICATIONSNAPSHOTREQUEST ) { VAR_DELETEAPPLICATIONSNAPSHOTREQUEST = beforeClientExecution ( VAR_DELETEAPPLICATIONSNAPSHOTREQUEST ) ; return executeDeleteApplicationSnapshot ( VAR_DELETEAPPLICATIONSNAPSHOTREQUEST ) ; }
public ApplyCommand METHOD_NAME ( ) { return new ApplyCommand ( repo ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING , java . util . List < String > VAR_JAVA.UTIL.LIST<STRING> ) { setCacheClusterId ( VAR_STRING ) ; setCacheNodeIdsToReboot ( VAR_JAVA.UTIL.LIST<STRING> ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING ) { setCacheClusterId ( VAR_STRING ) ; }
public boolean METHOD_NAME ( Object VAR_OBJECT ) { if ( this == VAR_OBJECT ) return true ; if ( VAR_OBJECT == null ) return false ; if ( getClass ( ) != VAR_OBJECT . getClass ( ) ) return false ; ScoreTerm VAR_SCORETERM = ( ScoreTerm ) VAR_OBJECT ; if ( term == null ) { if ( VAR_SCORETERM . term != null ) return false ; } else if ( ! term . bytesEquals ( VAR_SCORETERM . term ) ) return false ; return true ; }
public AssociateTransitGatewayMulticastDomainResult METHOD_NAME ( AssociateTransitGatewayMulticastDomainRequest VAR_ASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST ) { VAR_ASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST = beforeClientExecution ( VAR_ASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST ) ; return executeAssociateTransitGatewayMulticastDomain ( VAR_ASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST ) ; }
public UpdateContactResult METHOD_NAME ( UpdateContactRequest VAR_UPDATECONTACTREQUEST ) { VAR_UPDATECONTACTREQUEST = beforeClientExecution ( VAR_UPDATECONTACTREQUEST ) ; return executeUpdateContact ( VAR_UPDATECONTACTREQUEST ) ; }
public CONSTRUCTOR_NAME ( CellRangeAddress8Bit VAR_CELLRANGEADDRESS8BIT ) { super ( VAR_CELLRANGEADDRESS8BIT ) ; field_6_res = LITERAL_INT ; }
public CreateProcessingJobResult METHOD_NAME ( CreateProcessingJobRequest VAR_CREATEPROCESSINGJOBREQUEST ) { VAR_CREATEPROCESSINGJOBREQUEST = beforeClientExecution ( VAR_CREATEPROCESSINGJOBREQUEST ) ; return executeCreateProcessingJob ( VAR_CREATEPROCESSINGJOBREQUEST ) ; }
public CharSequence METHOD_NAME ( int VAR_INT , int VAR_INT ) { checkStartEndRemaining ( VAR_INT , VAR_INT ) ; CharSequenceAdapter VAR_CHARSEQUENCEADAPTER = copy ( this ) ; VAR_CHARSEQUENCEADAPTER . position = position + VAR_INT ; VAR_CHARSEQUENCEADAPTER . limit = position + VAR_INT ; return VAR_CHARSEQUENCEADAPTER ; }
public GetCoipPoolUsageResult METHOD_NAME ( GetCoipPoolUsageRequest VAR_GETCOIPPOOLUSAGEREQUEST ) { VAR_GETCOIPPOOLUSAGEREQUEST = beforeClientExecution ( VAR_GETCOIPPOOLUSAGEREQUEST ) ; return executeGetCoipPoolUsage ( VAR_GETCOIPPOOLUSAGEREQUEST ) ; }
public UpdateResolverEndpointResult METHOD_NAME ( UpdateResolverEndpointRequest VAR_UPDATERESOLVERENDPOINTREQUEST ) { VAR_UPDATERESOLVERENDPOINTREQUEST = beforeClientExecution ( VAR_UPDATERESOLVERENDPOINTREQUEST ) ; return executeUpdateResolverEndpoint ( VAR_UPDATERESOLVERENDPOINTREQUEST ) ; }
public ValueEval METHOD_NAME ( int VAR_INT , int VAR_INT , ValueEval VAR_VALUEEVAL ) { ValueEval VAR_VALUEEVAL ; try { VAR_VALUEEVAL = OperandResolver . getSingleValue ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } String VAR_STRING = OperandResolver . coerceValueToString ( VAR_VALUEEVAL ) ; Double VAR_DOUBLE = convertTextToNumber ( VAR_STRING ) ; if ( VAR_DOUBLE == null ) VAR_DOUBLE = parseDateTime ( VAR_STRING ) ; if ( VAR_DOUBLE == null ) { return ErrorEval . VALUE_INVALID ; } return new NumberEval ( VAR_DOUBLE . doubleValue ( ) ) ; }
public int METHOD_NAME ( ExternalNameRecord VAR_EXTERNALNAMERECORD ) { ExternalNameRecord[] VAR_EXTERNALNAMERECORD[] = new ExternalNameRecord [ _externalNameRecords . length + LITERAL_INT ] ; System . arraycopy ( _externalNameRecords , LITERAL_INT , VAR_EXTERNALNAMERECORD[] , LITERAL_INT , _externalNameRecords . length ) ; VAR_EXTERNALNAMERECORD[] [ VAR_EXTERNALNAMERECORD[] . length - LITERAL_INT ] = VAR_EXTERNALNAMERECORD ; _externalNameRecords = VAR_EXTERNALNAMERECORD[] ; return _externalNameRecords . length - LITERAL_INT ; }
public DescribePrincipalIdFormatResult METHOD_NAME ( DescribePrincipalIdFormatRequest VAR_DESCRIBEPRINCIPALIDFORMATREQUEST ) { VAR_DESCRIBEPRINCIPALIDFORMATREQUEST = beforeClientExecution ( VAR_DESCRIBEPRINCIPALIDFORMATREQUEST ) ; return executeDescribePrincipalIdFormat ( VAR_DESCRIBEPRINCIPALIDFORMATREQUEST ) ; }
public ListPartnerEventSourceAccountsResult METHOD_NAME ( ListPartnerEventSourceAccountsRequest VAR_LISTPARTNEREVENTSOURCEACCOUNTSREQUEST ) { VAR_LISTPARTNEREVENTSOURCEACCOUNTSREQUEST = beforeClientExecution ( VAR_LISTPARTNEREVENTSOURCEACCOUNTSREQUEST ) ; return executeListPartnerEventSourceAccounts ( VAR_LISTPARTNEREVENTSOURCEACCOUNTSREQUEST ) ; }
public File METHOD_NAME ( ) { return file ; }
public void METHOD_NAME ( ) { if ( mSelectedIds . size ( ) > LITERAL_INT ) { return ; } chooseListToShow ( ) ; ensureSomeGroupIsExpanded ( ) ; }
public String METHOD_NAME ( ) { if ( this . text == null ) return null ; else return this . text . toString ( ) ; }
public LongBuffer METHOD_NAME ( long [ ] VAR_LONG[] , int VAR_INT , int VAR_INT ) { Arrays . checkOffsetAndCount ( VAR_LONG[] . length , VAR_INT , VAR_INT ) ; if ( VAR_INT > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int VAR_INT = VAR_INT ; VAR_INT < VAR_INT + VAR_INT ; ++ VAR_INT ) { METHOD_NAME ( VAR_LONG[] [ VAR_INT ] ) ; } return this ; }
@ Override public boolean METHOD_NAME ( Object VAR_OBJECT ) { synchronized ( CopyOnWriteArrayList . this ) { int VAR_INT = indexOf ( VAR_OBJECT ) ; if ( VAR_INT == - LITERAL_INT ) { return false ; } METHOD_NAME ( VAR_INT ) ; return true ; } }
public long METHOD_NAME ( ) { if ( onDiskFile == null ) { return super . METHOD_NAME ( ) ; } return onDiskFile . METHOD_NAME ( ) ; }
public CONSTRUCTOR_NAME ( QueryConfigHandler VAR_QUERYCONFIGHANDLER ) { this . VAR_QUERYCONFIGHANDLER = VAR_QUERYCONFIGHANDLER ; }
public StartActivityStreamResult METHOD_NAME ( StartActivityStreamRequest VAR_STARTACTIVITYSTREAMREQUEST ) { VAR_STARTACTIVITYSTREAMREQUEST = beforeClientExecution ( VAR_STARTACTIVITYSTREAMREQUEST ) ; return executeStartActivityStream ( VAR_STARTACTIVITYSTREAMREQUEST ) ; }
public Hyphenation METHOD_NAME ( String VAR_STRING , int VAR_INT , int VAR_INT ) { char[] VAR_CHAR[] = VAR_STRING . toCharArray ( ) ; return METHOD_NAME ( VAR_CHAR[] , LITERAL_INT , VAR_CHAR[] . length , VAR_INT , VAR_INT ) ; }
public CreateSmsTemplateResult METHOD_NAME ( CreateSmsTemplateRequest VAR_CREATESMSTEMPLATEREQUEST ) { VAR_CREATESMSTEMPLATEREQUEST = beforeClientExecution ( VAR_CREATESMSTEMPLATEREQUEST ) ; return executeCreateSmsTemplate ( VAR_CREATESMSTEMPLATEREQUEST ) ; }
public void METHOD_NAME ( ) { int VAR_INT = mSize ; Object[] VAR_OBJECT[] = mValues ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; VAR_INT ++ ) { VAR_OBJECT[] [ VAR_INT ] = null ; } mSize = LITERAL_INT ; mGarbage = false ; }
public String METHOD_NAME ( Parser VAR_PARSER ) { return toString ( ) ; }
public long METHOD_NAME ( int VAR_INT ) { int VAR_INT = VAR_INT > > > LITERAL_INT ; int VAR_INT = VAR_INT & LITERAL_INT ; int VAR_INT = VAR_INT < < LITERAL_INT ; return ( blocks [ VAR_INT ] > > > VAR_INT ) & LITERAL_INT ; }
public String METHOD_NAME ( ) { return getType ( ) . name ( ) + LITERAL_STRING + getOldId ( ) . name ( ) + LITERAL_STRING + getNewId ( ) . name ( ) + LITERAL_STRING + getRefName ( ) ; }
public ValueEval METHOD_NAME ( int VAR_INT , int VAR_INT , ValueEval VAR_VALUEEVAL , ValueEval VAR_VALUEEVAL ) { ValueEval VAR_VALUEEVAL ; try { VAR_VALUEEVAL = OperandResolver . getSingleValue ( VAR_VALUEEVAL , VAR_INT , VAR_INT ) ; } catch ( EvaluationException e ) { return e . getErrorEval ( ) ; } String VAR_STRING = OperandResolver . coerceValueToString ( VAR_VALUEEVAL ) ; double VAR_DOUBLE = LITERAL_INT ; try { VAR_DOUBLE = OperandResolver . coerceValueToDouble ( VAR_VALUEEVAL ) ; } catch ( EvaluationException e ) { return ErrorEval . VALUE_INVALID ; } int VAR_INT = ( int ) VAR_DOUBLE ; StringBuilder VAR_STRINGBUILDER = new StringBuilder ( VAR_STRING . length ( ) * VAR_INT ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; VAR_INT ++ ) { VAR_STRINGBUILDER . append ( VAR_STRING ) ; } if ( VAR_STRINGBUILDER . toString ( ) . length ( ) > LITERAL_INT ) { return ErrorEval . VALUE_INVALID ; } return new StringEval ( VAR_STRINGBUILDER . toString ( ) ) ; }
public Entry < K , V > METHOD_NAME ( ) { return immutableCopy ( endpoint ( false ) ) ; }
public DeleteEvaluationResult METHOD_NAME ( DeleteEvaluationRequest VAR_DELETEEVALUATIONREQUEST ) { VAR_DELETEEVALUATIONREQUEST = beforeClientExecution ( VAR_DELETEEVALUATIONREQUEST ) ; return executeDeleteEvaluation ( VAR_DELETEEVALUATIONREQUEST ) ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { _data = VAR_RECORDINPUTSTREAM . readRemainder ( ) ; }
public CreateFilterResult METHOD_NAME ( CreateFilterRequest VAR_CREATEFILTERREQUEST ) { VAR_CREATEFILTERREQUEST = beforeClientExecution ( VAR_CREATEFILTERREQUEST ) ; return executeCreateFilter ( VAR_CREATEFILTERREQUEST ) ; }
public CharSequence METHOD_NAME ( int VAR_INT , int VAR_INT ) { checkStartEndRemaining ( VAR_INT , VAR_INT ) ; CharBuffer VAR_CHARBUFFER = duplicate ( ) ; VAR_CHARBUFFER . limit ( position + VAR_INT ) ; VAR_CHARBUFFER . position ( position + VAR_INT ) ; return VAR_CHARBUFFER ; }
public CreateTrafficMirrorSessionResult METHOD_NAME ( CreateTrafficMirrorSessionRequest VAR_CREATETRAFFICMIRRORSESSIONREQUEST ) { VAR_CREATETRAFFICMIRRORSESSIONREQUEST = beforeClientExecution ( VAR_CREATETRAFFICMIRRORSESSIONREQUEST ) ; return executeCreateTrafficMirrorSession ( VAR_CREATETRAFFICMIRRORSESSIONREQUEST ) ; }
public CreateNodegroupResult METHOD_NAME ( CreateNodegroupRequest VAR_CREATENODEGROUPREQUEST ) { VAR_CREATENODEGROUPREQUEST = beforeClientExecution ( VAR_CREATENODEGROUPREQUEST ) ; return executeCreateNodegroup ( VAR_CREATENODEGROUPREQUEST ) ; }
public SoraniStemFilter METHOD_NAME ( TokenStream VAR_TOKENSTREAM ) { return new SoraniStemFilter ( VAR_TOKENSTREAM ) ; }
public UpdateCustomVerificationEmailTemplateResult METHOD_NAME ( UpdateCustomVerificationEmailTemplateRequest VAR_UPDATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST ) { VAR_UPDATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST = beforeClientExecution ( VAR_UPDATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST ) ; return executeUpdateCustomVerificationEmailTemplate ( VAR_UPDATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST ) ; }
public static FormulaError METHOD_NAME ( int VAR_INT ) throws IllegalArgumentException { FormulaError VAR_FORMULAERROR = imap . get ( VAR_INT ) ; if ( VAR_FORMULAERROR == null ) VAR_FORMULAERROR = bmap . get ( ( byte ) VAR_INT ) ; if ( VAR_FORMULAERROR == null ) throw new IllegalArgumentException ( LITERAL_STRING + VAR_INT ) ; return VAR_FORMULAERROR ; }
public DeleteSubnetGroupResult METHOD_NAME ( DeleteSubnetGroupRequest VAR_DELETESUBNETGROUPREQUEST ) { VAR_DELETESUBNETGROUPREQUEST = beforeClientExecution ( VAR_DELETESUBNETGROUPREQUEST ) ; return executeDeleteSubnetGroup ( VAR_DELETESUBNETGROUPREQUEST ) ; }
public String METHOD_NAME ( ) { return getClass ( ) . getName ( ) + LITERAL_STRING + _error . getString ( ) + LITERAL_STRING ; }
public Object METHOD_NAME ( ) { assert exists || LITERAL_FLOAT == value ; return exists ? value : null ; }
public void METHOD_NAME ( ) { super . METHOD_NAME ( ) ; if ( onDiskFile != null ) { try { if ( ! onDiskFile . delete ( ) ) onDiskFile . deleteOnExit ( ) ; } finally { onDiskFile = null ; } } }
public DecreaseReplicationFactorResult METHOD_NAME ( DecreaseReplicationFactorRequest VAR_DECREASEREPLICATIONFACTORREQUEST ) { VAR_DECREASEREPLICATIONFACTORREQUEST = beforeClientExecution ( VAR_DECREASEREPLICATIONFACTORREQUEST ) ; return executeDecreaseReplicationFactor ( VAR_DECREASEREPLICATIONFACTORREQUEST ) ; }
public CONSTRUCTOR_NAME ( ) { _predicate = defaultPredicate ; }
public EvaluationWorkbook METHOD_NAME ( ) { return _workbook ; }
public DescribeRouteTablesResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeRouteTablesRequest ( ) ) ; }
public CreateAssessmentTemplateResult METHOD_NAME ( CreateAssessmentTemplateRequest VAR_CREATEASSESSMENTTEMPLATEREQUEST ) { VAR_CREATEASSESSMENTTEMPLATEREQUEST = beforeClientExecution ( VAR_CREATEASSESSMENTTEMPLATEREQUEST ) ; return executeCreateAssessmentTemplate ( VAR_CREATEASSESSMENTTEMPLATEREQUEST ) ; }
public DeleteProjectResult METHOD_NAME ( DeleteProjectRequest VAR_DELETEPROJECTREQUEST ) { VAR_DELETEPROJECTREQUEST = beforeClientExecution ( VAR_DELETEPROJECTREQUEST ) ; return executeDeleteProject ( VAR_DELETEPROJECTREQUEST ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING , String VAR_STRING ) { setUserName ( VAR_STRING ) ; setPolicyName ( VAR_STRING ) ; }
public TermVectorsReader METHOD_NAME ( ) { return new CompressingTermVectorsReader ( this ) ; }
public void METHOD_NAME ( ) { if ( sock != null ) { try { sch . releaseSession ( sock ) ; } finally { sock = null ; } } }
public LongBuffer METHOD_NAME ( long VAR_LONG ) { throw new ReadOnlyBufferException ( ) ; }
public int METHOD_NAME ( int VAR_INT , byte [ ] VAR_BYTE[] ) { LOG . log ( DEBUG , LITERAL_STRING ) ; int VAR_INT = LITERAL_INT ; SSTRecord VAR_SSTRECORD = null ; int VAR_INT = LITERAL_INT ; boolean VAR_BOOLEAN = false ; for ( org . apache . poi . hssf . record . Record VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD : records . getRecords ( ) ) { int VAR_INT = LITERAL_INT ; if ( VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD instanceof SSTRecord ) { VAR_SSTRECORD = ( SSTRecord ) VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD ; VAR_INT = VAR_INT ; } if ( VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD . getSid ( ) == ExtSSTRecord . sid && VAR_SSTRECORD != null ) { VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD = VAR_SSTRECORD . createExtSSTRecord ( VAR_INT + VAR_INT ) ; } if ( VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD instanceof BoundSheetRecord ) { if ( ! VAR_BOOLEAN ) { for ( BoundSheetRecord VAR_BOUNDSHEETRECORD : boundsheets ) { VAR_INT += VAR_BOUNDSHEETRECORD . METHOD_NAME ( VAR_INT + VAR_INT + VAR_INT , VAR_BYTE[] ) ; } VAR_BOOLEAN = true ; } } else { VAR_INT = VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD . METHOD_NAME ( VAR_INT + VAR_INT , VAR_BYTE[] ) ; } VAR_INT += VAR_INT ; } LOG . log ( DEBUG , LITERAL_STRING ) ; return VAR_INT ; }
public DescribeClusterSecurityGroupsResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeClusterSecurityGroupsRequest ( ) ) ; }
public Explanation METHOD_NAME ( Explanation VAR_EXPLANATION , long VAR_LONG ) { return Explanation . match ( score ( VAR_EXPLANATION . getValue ( ) . floatValue ( ) , VAR_LONG ) , LITERAL_STRING + VAR_EXPLANATION . getValue ( ) + LITERAL_STRING , Collections . singleton ( VAR_EXPLANATION ) ) ; }
public DisassociatePhoneNumberFromUserResult METHOD_NAME ( DisassociatePhoneNumberFromUserRequest VAR_DISASSOCIATEPHONENUMBERFROMUSERREQUEST ) { VAR_DISASSOCIATEPHONENUMBERFROMUSERREQUEST = beforeClientExecution ( VAR_DISASSOCIATEPHONENUMBERFROMUSERREQUEST ) ; return executeDisassociatePhoneNumberFromUser ( VAR_DISASSOCIATEPHONENUMBERFROMUSERREQUEST ) ; }
public boolean METHOD_NAME ( AnyObjectId VAR_ANYOBJECTID , int VAR_INT ) throws IOException { try { open ( VAR_ANYOBJECTID , VAR_INT ) ; return true ; } catch ( MissingObjectException notFound ) { return false ; } }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( LITERAL_STRING ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( LITERAL_STRING ) . append ( getFormatFlags ( ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( System . getProperty ( LITERAL_STRING ) ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isShowActual ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isShowPercent ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isLabelAsPercentage ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isSmoothedLine ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isShowLabel ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( isShowBubbleSizes ( ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public String METHOD_NAME ( String VAR_STRING ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; Iterator<SpanQuery> VAR_ITERATOR<SPANQUERY> = clauses . iterator ( ) ; while ( VAR_ITERATOR<SPANQUERY> . hasNext ( ) ) { SpanQuery VAR_SPANQUERY = VAR_ITERATOR<SPANQUERY> . next ( ) ; VAR_STRINGBUILDER . append ( VAR_SPANQUERY . METHOD_NAME ( VAR_STRING ) ) ; if ( VAR_ITERATOR<SPANQUERY> . hasNext ( ) ) { VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; } } VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public DisableInsightRulesResult METHOD_NAME ( DisableInsightRulesRequest VAR_DISABLEINSIGHTRULESREQUEST ) { VAR_DISABLEINSIGHTRULESREQUEST = beforeClientExecution ( VAR_DISABLEINSIGHTRULESREQUEST ) ; return executeDisableInsightRules ( VAR_DISABLEINSIGHTRULESREQUEST ) ; }
public BootstrapActionConfig METHOD_NAME ( String VAR_STRING , BootstrapActionConfig VAR_BOOTSTRAPACTIONCONFIG ) { List<String> VAR_LIST<STRING> = VAR_BOOTSTRAPACTIONCONFIG . getScriptBootstrapAction ( ) . getArgs ( ) ; VAR_LIST<STRING> . add ( LITERAL_INT , VAR_STRING ) ; VAR_LIST<STRING> . add ( LITERAL_INT , VAR_BOOTSTRAPACTIONCONFIG . getScriptBootstrapAction ( ) . getPath ( ) ) ; return new BootstrapActionConfig ( ) . withName ( LITERAL_STRING + VAR_BOOTSTRAPACTIONCONFIG . getName ( ) ) . withScriptBootstrapAction ( new ScriptBootstrapActionConfig ( ) . withPath ( LITERAL_STRING ) . withArgs ( VAR_LIST<STRING> ) ) ; }
public final CharBuffer METHOD_NAME ( char [ ] VAR_CHAR[] , int VAR_INT , int VAR_INT ) { Arrays . checkOffsetAndCount ( VAR_CHAR[] . length , VAR_INT , VAR_INT ) ; if ( VAR_INT > remaining ( ) ) { throw new BufferUnderflowException ( ) ; } int VAR_INT = position + VAR_INT ; sequence . toString ( ) . getChars ( position , VAR_INT , VAR_CHAR[] , VAR_INT ) ; position = VAR_INT ; return this ; }
public Set < String > METHOD_NAME ( String VAR_STRING , String VAR_STRING ) { return getState ( ) . METHOD_NAME ( VAR_STRING , VAR_STRING ) ; }
public CreateBrokerResult METHOD_NAME ( CreateBrokerRequest VAR_CREATEBROKERREQUEST ) { VAR_CREATEBROKERREQUEST = beforeClientExecution ( VAR_CREATEBROKERREQUEST ) ; return executeCreateBroker ( VAR_CREATEBROKERREQUEST ) ; }
public void METHOD_NAME ( int VAR_INT ) { mState = STATE_ABSORB ; VAR_INT = Math . max ( MIN_VELOCITY , Math . abs ( VAR_INT ) ) ; mStartTime = AnimationUtils . currentAnimationTimeMillis ( ) ; mDuration = LITERAL_FLOAT + ( VAR_INT * LITERAL_FLOAT ) ; mEdgeAlphaStart = LITERAL_FLOAT ; mEdgeScaleY = mEdgeScaleYStart = LITERAL_FLOAT ; mGlowAlphaStart = LITERAL_FLOAT ; mGlowScaleYStart = LITERAL_FLOAT ; mEdgeAlphaFinish = Math . max ( LITERAL_INT , Math . min ( VAR_INT * VELOCITY_EDGE_FACTOR , LITERAL_INT ) ) ; mEdgeScaleYFinish = Math . max ( HELD_EDGE_SCALE_Y , Math . min ( VAR_INT * VELOCITY_EDGE_FACTOR , LITERAL_FLOAT ) ) ; mGlowScaleYFinish = Math . min ( LITERAL_FLOAT + ( VAR_INT * ( VAR_INT / LITERAL_INT ) * LITERAL_FLOAT ) , LITERAL_FLOAT ) ; mGlowAlphaFinish = Math . max ( mGlowAlphaStart , Math . min ( VAR_INT * VELOCITY_GLOW_FACTOR * LITERAL_FLOAT , MAX_ALPHA ) ) ; }
public ListSuppressedDestinationsResult METHOD_NAME ( ListSuppressedDestinationsRequest VAR_LISTSUPPRESSEDDESTINATIONSREQUEST ) { VAR_LISTSUPPRESSEDDESTINATIONSREQUEST = beforeClientExecution ( VAR_LISTSUPPRESSEDDESTINATIONSREQUEST ) ; return executeListSuppressedDestinations ( VAR_LISTSUPPRESSEDDESTINATIONSREQUEST ) ; }
public List < Pair < K , V > > METHOD_NAME ( ) { List<Pair<K,V>> VAR_LIST<PAIR<K,V>> = new ArrayList < Pair < K , V > > ( ) ; for ( K VAR_K : keySet ( ) ) { for ( V VAR_V : get ( VAR_K ) ) { VAR_LIST<PAIR<K,V>> . add ( new Pair < K , V > ( VAR_K , VAR_V ) ) ; } } return VAR_LIST<PAIR<K,V>> ; }
public void METHOD_NAME ( String VAR_STRING ) { super . METHOD_NAME ( VAR_STRING ) ; int VAR_INT = VAR_STRING . indexOf ( LITERAL_STRING ) ; name = VAR_STRING . substring ( LITERAL_INT , VAR_INT ) . trim ( ) ; value = VAR_STRING . substring ( VAR_INT + LITERAL_INT ) . trim ( ) ; }
@ Override public V METHOD_NAME ( K VAR_K , V VAR_V ) { if ( ! isInBounds ( VAR_K ) ) { throw outOfBounds ( VAR_K , fromBound , toBound ) ; } return putInternal ( VAR_K , VAR_V ) ; }
public CONSTRUCTOR_NAME ( String VAR_STRING ) { setImageId ( VAR_STRING ) ; }
public GetApplicationResult METHOD_NAME ( GetApplicationRequest VAR_GETAPPLICATIONREQUEST ) { VAR_GETAPPLICATIONREQUEST = beforeClientExecution ( VAR_GETAPPLICATIONREQUEST ) ; return executeGetApplication ( VAR_GETAPPLICATIONREQUEST ) ; }
public DescribeProblemObservationsResult METHOD_NAME ( DescribeProblemObservationsRequest VAR_DESCRIBEPROBLEMOBSERVATIONSREQUEST ) { VAR_DESCRIBEPROBLEMOBSERVATIONSREQUEST = beforeClientExecution ( VAR_DESCRIBEPROBLEMOBSERVATIONSREQUEST ) ; return executeDescribeProblemObservations ( VAR_DESCRIBEPROBLEMOBSERVATIONSREQUEST ) ; }
public int METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , EscherRecordFactory VAR_ESCHERRECORDFACTORY ) { int VAR_INT = readHeader ( VAR_BYTE[] , VAR_INT ) ; int VAR_INT = VAR_INT + HEADER_SIZE ; System . arraycopy ( VAR_BYTE[] , VAR_INT , field_1_UID , LITERAL_INT , LITERAL_INT ) ; VAR_INT += LITERAL_INT ; field_2_marker = VAR_BYTE[] [ VAR_INT ] ; VAR_INT ++ ; setPictureData ( VAR_BYTE[] , VAR_INT , VAR_INT - LITERAL_INT ) ; return VAR_INT + HEADER_SIZE ; }
public static boolean METHOD_NAME ( BytesRef VAR_BYTESREF , BytesRef VAR_BYTESREF ) { int VAR_INT = VAR_BYTESREF . length - VAR_BYTESREF . length ; if ( VAR_INT < LITERAL_INT ) { return false ; } return Arrays . equals ( VAR_BYTESREF . bytes , VAR_BYTESREF . offset + VAR_INT , VAR_BYTESREF . offset + VAR_INT + VAR_BYTESREF . length , VAR_BYTESREF . bytes , VAR_BYTESREF . offset , VAR_BYTESREF . offset + VAR_BYTESREF . length ) ; }
public DeleteOptionGroupResult METHOD_NAME ( DeleteOptionGroupRequest VAR_DELETEOPTIONGROUPREQUEST ) { VAR_DELETEOPTIONGROUPREQUEST = beforeClientExecution ( VAR_DELETEOPTIONGROUPREQUEST ) ; return executeDeleteOptionGroup ( VAR_DELETEOPTIONGROUPREQUEST ) ; }
public static String METHOD_NAME ( byte [ ] VAR_BYTE[] ) { if ( VAR_BYTE[] . length == LITERAL_INT ) { return LITERAL_STRING ; } return METHOD_NAME ( VAR_BYTE[] , LITERAL_INT , VAR_BYTE[] . length / LITERAL_INT ) ; }
public CONSTRUCTOR_NAME ( ) { _list = new ArrayList < > ( ) ; }
public ValueEval METHOD_NAME ( ValueEval [ ] VAR_VALUEEVAL[] , OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT ) { throw new NotImplementedFunctionException ( _functionName ) ; }
public DescribeOptionGroupsResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeOptionGroupsRequest ( ) ) ; }
public DisableVpcClassicLinkResult METHOD_NAME ( DisableVpcClassicLinkRequest VAR_DISABLEVPCCLASSICLINKREQUEST ) { VAR_DISABLEVPCCLASSICLINKREQUEST = beforeClientExecution ( VAR_DISABLEVPCCLASSICLINKREQUEST ) ; return executeDisableVpcClassicLink ( VAR_DISABLEVPCCLASSICLINKREQUEST ) ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( idstm ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public ListStackInstancesResult METHOD_NAME ( ListStackInstancesRequest VAR_LISTSTACKINSTANCESREQUEST ) { VAR_LISTSTACKINSTANCESREQUEST = beforeClientExecution ( VAR_LISTSTACKINSTANCESREQUEST ) ; return executeListStackInstances ( VAR_LISTSTACKINSTANCESREQUEST ) ; }
public DescribeCompanyNetworkConfigurationResult METHOD_NAME ( DescribeCompanyNetworkConfigurationRequest VAR_DESCRIBECOMPANYNETWORKCONFIGURATIONREQUEST ) { VAR_DESCRIBECOMPANYNETWORKCONFIGURATIONREQUEST = beforeClientExecution ( VAR_DESCRIBECOMPANYNETWORKCONFIGURATIONREQUEST ) ; return executeDescribeCompanyNetworkConfiguration ( VAR_DESCRIBECOMPANYNETWORKCONFIGURATIONREQUEST ) ; }
public final CoderResult METHOD_NAME ( CharBuffer VAR_CHARBUFFER ) { if ( status != END && status != INIT ) { throw new IllegalStateException ( ) ; } CoderResult VAR_CODERRESULT = implFlush ( VAR_CHARBUFFER ) ; if ( VAR_CODERRESULT == CoderResult . UNDERFLOW ) { status = FLUSH ; } return VAR_CODERRESULT ; }
public DescribeDBClustersResult METHOD_NAME ( DescribeDBClustersRequest VAR_DESCRIBEDBCLUSTERSREQUEST ) { VAR_DESCRIBEDBCLUSTERSREQUEST = beforeClientExecution ( VAR_DESCRIBEDBCLUSTERSREQUEST ) ; return executeDescribeDBClusters ( VAR_DESCRIBEDBCLUSTERSREQUEST ) ; }
public GetDocumentVersionResult METHOD_NAME ( GetDocumentVersionRequest VAR_GETDOCUMENTVERSIONREQUEST ) { VAR_GETDOCUMENTVERSIONREQUEST = beforeClientExecution ( VAR_GETDOCUMENTVERSIONREQUEST ) ; return executeGetDocumentVersion ( VAR_GETDOCUMENTVERSIONREQUEST ) ; }
public TermData METHOD_NAME ( TermData VAR_TERMDATA , TermData VAR_TERMDATA ) { if ( VAR_TERMDATA == NO_OUTPUT ) { return VAR_TERMDATA ; } TermData VAR_TERMDATA ; if ( statsEqual ( VAR_TERMDATA , VAR_TERMDATA ) && bytesEqual ( VAR_TERMDATA , VAR_TERMDATA ) ) { VAR_TERMDATA = NO_OUTPUT ; } else { VAR_TERMDATA = new TermData ( VAR_TERMDATA . bytes , VAR_TERMDATA . docFreq , VAR_TERMDATA . totalTermFreq ) ; } return VAR_TERMDATA ; }
public ModifyCapacityReservationResult METHOD_NAME ( ModifyCapacityReservationRequest VAR_MODIFYCAPACITYRESERVATIONREQUEST ) { VAR_MODIFYCAPACITYRESERVATIONREQUEST = beforeClientExecution ( VAR_MODIFYCAPACITYRESERVATIONREQUEST ) ; return executeModifyCapacityReservation ( VAR_MODIFYCAPACITYRESERVATIONREQUEST ) ; }
@ Override public int METHOD_NAME ( ) { synchronized ( mutex ) { return c . METHOD_NAME ( ) ; } }
public void METHOD_NAME ( byte [ ] VAR_BYTE[] , int VAR_INT , long [ ] VAR_LONG[] , int VAR_INT , int VAR_INT ) { for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_INT ; ++ VAR_INT ) { VAR_LONG[] [ VAR_INT ++ ] = VAR_BYTE[] [ VAR_INT ++ ] & LITERAL_INT ; } }
public int METHOD_NAME ( ) throws UnsupportedOperationException { if ( this . type == TYPE_MALFORMED_INPUT || this . type == TYPE_UNMAPPABLE_CHAR ) { return this . METHOD_NAME ; } throw new UnsupportedOperationException ( LITERAL_STRING + toString ( ) ) ; }
public String METHOD_NAME ( ) { throw invalid ( ) ; }
public E METHOD_NAME ( ) { if ( iterator . nextIndex ( ) < end ) { return iterator . METHOD_NAME ( ) ; } throw new NoSuchElementException ( ) ; }
public static String METHOD_NAME ( long VAR_LONG ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( LITERAL_INT ) ; writeHex ( VAR_STRINGBUILDER , VAR_LONG , LITERAL_INT , LITERAL_STRING ) ; return VAR_STRINGBUILDER . toString ( ) ; }
public long METHOD_NAME ( int VAR_INT ) { int VAR_INT = VAR_INT > > > LITERAL_INT ; int VAR_INT = VAR_INT & LITERAL_INT ; int VAR_INT = VAR_INT < < LITERAL_INT ; return ( blocks [ VAR_INT ] > > > VAR_INT ) & LITERAL_INT ; }
public int [ ] METHOD_NAME ( ) { start = end = null ; return super . METHOD_NAME ( ) ; }
public TokenStream METHOD_NAME ( TokenStream VAR_TOKENSTREAM ) { termAtt = VAR_TOKENSTREAM . addAttribute ( CharTermAttribute . class ) ; return null ; }
public UpdateGameServerGroupResult METHOD_NAME ( UpdateGameServerGroupRequest VAR_UPDATEGAMESERVERGROUPREQUEST ) { VAR_UPDATEGAMESERVERGROUPREQUEST = beforeClientExecution ( VAR_UPDATEGAMESERVERGROUPREQUEST ) ; return executeUpdateGameServerGroup ( VAR_UPDATEGAMESERVERGROUPREQUEST ) ; }
public CONSTRUCTOR_NAME ( int VAR_INT ) { this . inputLength = VAR_INT ; }
public UpdateIdentityProviderConfigurationResult METHOD_NAME ( UpdateIdentityProviderConfigurationRequest VAR_UPDATEIDENTITYPROVIDERCONFIGURATIONREQUEST ) { VAR_UPDATEIDENTITYPROVIDERCONFIGURATIONREQUEST = beforeClientExecution ( VAR_UPDATEIDENTITYPROVIDERCONFIGURATIONREQUEST ) ; return executeUpdateIdentityProviderConfiguration ( VAR_UPDATEIDENTITYPROVIDERCONFIGURATIONREQUEST ) ; }
@ Override public int METHOD_NAME ( Object VAR_OBJECT ) { Object[] VAR_OBJECT[] = array ; if ( VAR_OBJECT != null ) { for ( int VAR_INT = size - LITERAL_INT ; VAR_INT >= LITERAL_INT ; VAR_INT -- ) { if ( VAR_OBJECT . equals ( VAR_OBJECT[] [ VAR_INT ] ) ) { return VAR_INT ; } } } else { for ( int VAR_INT = size - LITERAL_INT ; VAR_INT >= LITERAL_INT ; VAR_INT -- ) { if ( VAR_OBJECT[] [ VAR_INT ] == null ) { return VAR_INT ; } } } return - LITERAL_INT ; }
public CONSTRUCTOR_NAME ( QueryBuilderFactory VAR_QUERYBUILDERFACTORY ) { this . VAR_QUERYBUILDERFACTORY = VAR_QUERYBUILDERFACTORY ; }
public int METHOD_NAME ( ) { int VAR_INT = LITERAL_INT ; fill ( ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < tokens . size ( ) ; VAR_INT ++ ) { Token VAR_TOKEN = tokens . get ( VAR_INT ) ; if ( VAR_TOKEN . getChannel ( ) == channel ) VAR_INT ++ ; if ( VAR_TOKEN . getType ( ) == Token . EOF ) break ; } return VAR_INT ; }
public CONSTRUCTOR_NAME ( final String [ ] VAR_STRING[] ) throws IllegalArgumentException { if ( VAR_STRING[] == null ) { this . VAR_STRING[] = new String [ LITERAL_INT ] ; } else { this . VAR_STRING[] = new String [ VAR_STRING[] . length ] ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < VAR_STRING[] . length ; VAR_INT ++ ) { if ( ( VAR_STRING[] [ VAR_INT ] == null ) || ( VAR_STRING[] [ VAR_INT ] . length ( ) == LITERAL_INT ) ) { throw new IllegalArgumentException ( LITERAL_STRING ) ; } this . VAR_STRING[] [ VAR_INT ] = VAR_STRING[] [ VAR_INT ] ; } } }
public CONSTRUCTOR_NAME ( String VAR_STRING ) { this ( VAR_STRING , null , LITERAL_INT ) ; }
public ListFragmentsResult METHOD_NAME ( ListFragmentsRequest VAR_LISTFRAGMENTSREQUEST ) { VAR_LISTFRAGMENTSREQUEST = beforeClientExecution ( VAR_LISTFRAGMENTSREQUEST ) ; return executeListFragments ( VAR_LISTFRAGMENTSREQUEST ) ; }
public QueryBuilder METHOD_NAME ( String VAR_STRING ) { return builders . get ( VAR_STRING ) ; }
public CreateDirectoryResult METHOD_NAME ( CreateDirectoryRequest VAR_CREATEDIRECTORYREQUEST ) { VAR_CREATEDIRECTORYREQUEST = beforeClientExecution ( VAR_CREATEDIRECTORYREQUEST ) ; return executeCreateDirectory ( VAR_CREATEDIRECTORYREQUEST ) ; }
public int METHOD_NAME ( String VAR_STRING , String VAR_STRING ) { return getOrCreateLinkTable ( ) . METHOD_NAME ( VAR_STRING , VAR_STRING , VAR_STRING ) ; }
public V METHOD_NAME ( ) { return value ; }
public K METHOD_NAME ( ) { return key ; }
public boolean METHOD_NAME ( ) { return transparentBounds ; }
public void METHOD_NAME ( boolean VAR_BOOLEAN ) { keepEmpty = VAR_BOOLEAN ; }
public CONSTRUCTOR_NAME ( String VAR_STRING , int VAR_INT ) { super ( VAR_STRING ) ; this . VAR_INT = VAR_INT ; }
public int METHOD_NAME ( ) { return _height ; }
public final void METHOD_NAME ( OpenStringBuilder VAR_OPENSTRINGBUILDER ) { METHOD_NAME ( VAR_OPENSTRINGBUILDER . buf , LITERAL_INT , len ) ; }
public void METHOD_NAME ( ) { super . METHOD_NAME ( ) ; if ( mThumb != null ) mThumb . jumpToCurrentState ( ) ; }
public void METHOD_NAME ( String VAR_STRING ) { super . METHOD_NAME ( VAR_STRING ) ; StreamTokenizer VAR_STREAMTOKENIZER = new StreamTokenizer ( new StringReader ( VAR_STRING ) ) ; VAR_STREAMTOKENIZER . quoteChar ( LITERAL_CHAR ) ; VAR_STREAMTOKENIZER . quoteChar ( LITERAL_CHAR ) ; VAR_STREAMTOKENIZER . eolIsSignificant ( false ) ; VAR_STREAMTOKENIZER . ordinaryChar ( LITERAL_CHAR ) ; try { while ( VAR_STREAMTOKENIZER . nextToken ( ) != StreamTokenizer . TT_EOF ) { switch ( VAR_STREAMTOKENIZER . ttype ) { case LITERAL_CHAR : { break ; } case LITERAL_CHAR : case LITERAL_CHAR : case StreamTokenizer . TT_WORD : { analyzerNames . add ( VAR_STREAMTOKENIZER . sval ) ; break ; } default : { throw new RuntimeException ( LITERAL_STRING + VAR_STREAMTOKENIZER . toString ( ) ) ; } } } } catch ( RuntimeException e ) { if ( e . getMessage ( ) . startsWith ( LITERAL_STRING ) ) { throw e ; } else { throw new RuntimeException ( LITERAL_STRING + ( VAR_STREAMTOKENIZER . lineno ( ) + getAlgLineNum ( ) ) + LITERAL_STRING , e ) ; } } catch ( Throwable t ) { throw new RuntimeException ( LITERAL_STRING + ( VAR_STREAMTOKENIZER . lineno ( ) + getAlgLineNum ( ) ) + LITERAL_STRING , t ) ; } }
public DescribeVolumesResult METHOD_NAME ( DescribeVolumesRequest VAR_DESCRIBEVOLUMESREQUEST ) { VAR_DESCRIBEVOLUMESREQUEST = beforeClientExecution ( VAR_DESCRIBEVOLUMESREQUEST ) ; return executeDescribeVolumes ( VAR_DESCRIBEVOLUMESREQUEST ) ; }
public DescribeFlowLogsResult METHOD_NAME ( DescribeFlowLogsRequest VAR_DESCRIBEFLOWLOGSREQUEST ) { VAR_DESCRIBEFLOWLOGSREQUEST = beforeClientExecution ( VAR_DESCRIBEFLOWLOGSREQUEST ) ; return executeDescribeFlowLogs ( VAR_DESCRIBEFLOWLOGSREQUEST ) ; }
public UpdateMethodResult METHOD_NAME ( UpdateMethodRequest VAR_UPDATEMETHODREQUEST ) { VAR_UPDATEMETHODREQUEST = beforeClientExecution ( VAR_UPDATEMETHODREQUEST ) ; return executeUpdateMethod ( VAR_UPDATEMETHODREQUEST ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setUriPattern ( LITERAL_STRING ) ; setMethod ( MethodType . GET ) ; }
public StopContactResult METHOD_NAME ( StopContactRequest VAR_STOPCONTACTREQUEST ) { VAR_STOPCONTACTREQUEST = beforeClientExecution ( VAR_STOPCONTACTREQUEST ) ; return executeStopContact ( VAR_STOPCONTACTREQUEST ) ; }
public CreateDataSetResult METHOD_NAME ( CreateDataSetRequest VAR_CREATEDATASETREQUEST ) { VAR_CREATEDATASETREQUEST = beforeClientExecution ( VAR_CREATEDATASETREQUEST ) ; return executeCreateDataSet ( VAR_CREATEDATASETREQUEST ) ; }
public ObjectDatabase METHOD_NAME ( ) { return this ; }
public CreateJourneyResult METHOD_NAME ( CreateJourneyRequest VAR_CREATEJOURNEYREQUEST ) { VAR_CREATEJOURNEYREQUEST = beforeClientExecution ( VAR_CREATEJOURNEYREQUEST ) ; return executeCreateJourney ( VAR_CREATEJOURNEYREQUEST ) ; }
public DeleteDashboardsResult METHOD_NAME ( DeleteDashboardsRequest VAR_DELETEDASHBOARDSREQUEST ) { VAR_DELETEDASHBOARDSREQUEST = beforeClientExecution ( VAR_DELETEDASHBOARDSREQUEST ) ; return executeDeleteDashboards ( VAR_DELETEDASHBOARDSREQUEST ) ; }
public CONSTRUCTOR_NAME ( MergePolicy VAR_MERGEPOLICY ) { super ( VAR_MERGEPOLICY ) ; }
public GetHealthCheckCountResult METHOD_NAME ( GetHealthCheckCountRequest VAR_GETHEALTHCHECKCOUNTREQUEST ) { VAR_GETHEALTHCHECKCOUNTREQUEST = beforeClientExecution ( VAR_GETHEALTHCHECKCOUNTREQUEST ) ; return executeGetHealthCheckCount ( VAR_GETHEALTHCHECKCOUNTREQUEST ) ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { rt = VAR_RECORDINPUTSTREAM . readShort ( ) ; grbitFrt = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectKind = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectContext = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectInstance1 = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectInstance2 = VAR_RECORDINPUTSTREAM . readShort ( ) ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { field_1_categoryDataType = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_2_valuesDataType = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_3_numCategories = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_4_numValues = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_5_bubbleSeriesType = VAR_RECORDINPUTSTREAM . readShort ( ) ; field_6_numBubbleValues = VAR_RECORDINPUTSTREAM . readShort ( ) ; }
public static Class < ? extends CharFilterFactory > METHOD_NAME ( String VAR_STRING ) { return loader . METHOD_NAME ( VAR_STRING ) ; }
public GetPublicKeyResult METHOD_NAME ( GetPublicKeyRequest VAR_GETPUBLICKEYREQUEST ) { VAR_GETPUBLICKEYREQUEST = beforeClientExecution ( VAR_GETPUBLICKEYREQUEST ) ; return executeGetPublicKey ( VAR_GETPUBLICKEYREQUEST ) ; }
public CreateLocalGatewayRouteTableVpcAssociationResult METHOD_NAME ( CreateLocalGatewayRouteTableVpcAssociationRequest VAR_CREATELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST ) { VAR_CREATELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST = beforeClientExecution ( VAR_CREATELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST ) ; return executeCreateLocalGatewayRouteTableVpcAssociation ( VAR_CREATELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST ) ; }
public static boolean METHOD_NAME ( String VAR_STRING ) { if ( VAR_STRING == null ) throw new NullPointerException ( JGitText . get ( ) . expectedBooleanStringValue ) ; Boolean VAR_BOOLEAN = toBooleanOrNull ( VAR_STRING ) ; if ( VAR_BOOLEAN == null ) throw new IllegalArgumentException ( MessageFormat . format ( JGitText . get ( ) . notABoolean , VAR_STRING ) ) ; return VAR_BOOLEAN . booleanValue ( ) ; }
public Set < String > METHOD_NAME ( ) { return Collections . unmodifiableSet ( diff . METHOD_NAME ( ) ) ; }
public Set < String > METHOD_NAME ( String VAR_STRING ) { return METHOD_NAME ( VAR_STRING , null ) ; }
public DescribeCacheClustersResult METHOD_NAME ( DescribeCacheClustersRequest VAR_DESCRIBECACHECLUSTERSREQUEST ) { VAR_DESCRIBECACHECLUSTERSREQUEST = beforeClientExecution ( VAR_DESCRIBECACHECLUSTERSREQUEST ) ; return executeDescribeCacheClusters ( VAR_DESCRIBECACHECLUSTERSREQUEST ) ; }
public List < String > METHOD_NAME ( ) { return unmergedPaths ; }
public ValueEval METHOD_NAME ( ValueEval [ ] VAR_VALUEEVAL[] , OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT ) { if ( VAR_VALUEEVAL[] . length != LITERAL_INT ) { return ErrorEval . VALUE_INVALID ; } return METHOD_NAME ( VAR_OPERATIONEVALUATIONCONTEXT . getRowIndex ( ) , VAR_OPERATIONEVALUATIONCONTEXT . getColumnIndex ( ) , VAR_VALUEEVAL[] [ LITERAL_INT ] , VAR_VALUEEVAL[] [ LITERAL_INT ] ) ; }
public int METHOD_NAME ( UnicodeString VAR_UNICODESTRING ) { field_1_num_strings ++ ; UnicodeString VAR_UNICODESTRING = ( VAR_UNICODESTRING == null ) ? EMPTY_STRING : VAR_UNICODESTRING ; int VAR_INT ; int VAR_INT = field_3_strings . getIndex ( VAR_UNICODESTRING ) ; if ( VAR_INT != - LITERAL_INT ) { VAR_INT = VAR_INT ; } else { VAR_INT = field_3_strings . size ( ) ; field_2_num_unique_strings ++ ; SSTDeserializer . addToStringTable ( field_3_strings , VAR_UNICODESTRING ) ; } return VAR_INT ; }
public long METHOD_NAME ( ) { return deltaSearchMemoryLimit ; }
public String METHOD_NAME ( ) { return LITERAL_STRING + new String ( surfaceForm , offset , length ) + LITERAL_STRING + position + LITERAL_STRING + length + LITERAL_STRING + positionLength + LITERAL_STRING + type + LITERAL_STRING + wordId + LITERAL_STRING + dictionary . getLeftId ( wordId ) + LITERAL_STRING ; }
public String METHOD_NAME ( FormulaRenderingWorkbook VAR_FORMULARENDERINGWORKBOOK ) { return ExternSheetNameResolver . prependSheetName ( VAR_FORMULARENDERINGWORKBOOK , field_1_index_extern_sheet , formatReferenceAsString ( ) ) ; }
public E METHOD_NAME ( int VAR_INT ) { return ( E ) elements [ VAR_INT ] ; }
public byte [ ] METHOD_NAME ( ) { return data ; }
public DescribeConnectionsResult METHOD_NAME ( ) { return METHOD_NAME ( new DescribeConnectionsRequest ( ) ) ; }
public void METHOD_NAME ( int VAR_INT ) { Object[] VAR_OBJECT[] = array ; if ( VAR_OBJECT[] . length < VAR_INT ) { Object[] VAR_OBJECT[] = new Object [ VAR_INT ] ; System . arraycopy ( VAR_OBJECT[] , LITERAL_INT , VAR_OBJECT[] , LITERAL_INT , size ) ; array = VAR_OBJECT[] ; modCount ++ ; } }
public DeleteLifecycleHookResult METHOD_NAME ( DeleteLifecycleHookRequest VAR_DELETELIFECYCLEHOOKREQUEST ) { VAR_DELETELIFECYCLEHOOKREQUEST = beforeClientExecution ( VAR_DELETELIFECYCLEHOOKREQUEST ) ; return executeDeleteLifecycleHook ( VAR_DELETELIFECYCLEHOOKREQUEST ) ; }
public final float METHOD_NAME ( ) { return METHOD_NAME ; }
public CONSTRUCTOR_NAME ( int VAR_INT , int VAR_INT , int VAR_INT ) { _firstRowIndex = VAR_INT ; _firstColumnIndex = VAR_INT ; _lastColumnIndex = VAR_INT ; _lastRowIndex = VAR_INT ; }
public int METHOD_NAME ( int VAR_INT ) { int VAR_INT = getRow ( VAR_INT ) . getOutlineLevel ( ) ; int VAR_INT ; for ( VAR_INT = VAR_INT ; VAR_INT < getLastRowNum ( ) ; VAR_INT ++ ) { if ( getRow ( VAR_INT ) == null || getRow ( VAR_INT ) . getOutlineLevel ( ) < VAR_INT ) { break ; } } return VAR_INT - LITERAL_INT ; }
public String METHOD_NAME ( ) { if ( encoder == null ) { return null ; } return HistoricalCharsetNames . get ( encoder . charset ( ) ) ; }
public void METHOD_NAME ( ) { _cache . clear ( ) ; _sheetIndexesBySheet . clear ( ) ; _workbook . METHOD_NAME ( ) ; }
public final String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; String VAR_STRING = getRecordName ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( VAR_STRING ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( getRow ( ) ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( getColumn ( ) ) ) . append ( LITERAL_STRING ) ; if ( isBiff2 ( ) ) { VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( getCellAttrs ( ) ) ) . append ( LITERAL_STRING ) ; } else { VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( getXFIndex ( ) ) ) . append ( LITERAL_STRING ) ; } appendValueText ( VAR_STRINGBUILDER ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( VAR_STRING ) . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public DescribeDBClusterEndpointsResult METHOD_NAME ( DescribeDBClusterEndpointsRequest VAR_DESCRIBEDBCLUSTERENDPOINTSREQUEST ) { VAR_DESCRIBEDBCLUSTERENDPOINTSREQUEST = beforeClientExecution ( VAR_DESCRIBEDBCLUSTERENDPOINTSREQUEST ) ; return executeDescribeDBClusterEndpoints ( VAR_DESCRIBEDBCLUSTERENDPOINTSREQUEST ) ; }
public boolean METHOD_NAME ( final String VAR_STRING ) { boolean VAR_BOOLEAN = false ; if ( ! isRoot ( ) ) { VAR_BOOLEAN = _parent . changeName ( getName ( ) , VAR_STRING ) ; } return VAR_BOOLEAN ; }
public Explanation METHOD_NAME ( Explanation VAR_EXPLANATION , long VAR_LONG ) { List<Explanation> VAR_LIST<EXPLANATION> = new ArrayList < > ( ) ; for ( SimScorer VAR_SIMSCORER : subScorers ) { VAR_LIST<EXPLANATION> . add ( VAR_SIMSCORER . METHOD_NAME ( VAR_EXPLANATION , VAR_LONG ) ) ; } return Explanation . match ( score ( VAR_EXPLANATION . getValue ( ) . floatValue ( ) , VAR_LONG ) , LITERAL_STRING , VAR_LIST<EXPLANATION> ) ; }
public CONSTRUCTOR_NAME ( ValueSource VAR_VALUESOURCE , LeafReaderContext VAR_LEAFREADERCONTEXT , String VAR_STRING ) throws IOException { this ( VAR_VALUESOURCE , open ( VAR_LEAFREADERCONTEXT , VAR_STRING ) ) ; }
public static int METHOD_NAME ( Ref VAR_REF , Ref VAR_REF ) { return VAR_REF . getName ( ) . METHOD_NAME ( VAR_REF . getName ( ) ) ; }
public Dimension METHOD_NAME ( ) { InternalWorkbook VAR_INTERNALWORKBOOK = getPatriarch ( ) . getSheet ( ) . getWorkbook ( ) . getWorkbook ( ) ; EscherBSERecord VAR_ESCHERBSERECORD = VAR_INTERNALWORKBOOK . getBSERecord ( getPictureIndex ( ) ) ; byte[] VAR_BYTE[] = VAR_ESCHERBSERECORD . getBlipRecord ( ) . getPicturedata ( ) ; int VAR_INT = VAR_ESCHERBSERECORD . getBlipTypeWin32 ( ) ; return ImageUtils . METHOD_NAME ( new ByteArrayInputStream ( VAR_BYTE[] ) , VAR_INT ) ; }
public static double METHOD_NAME ( double [ ] VAR_DOUBLE[] ) { double VAR_DOUBLE = Double . NaN ; if ( VAR_DOUBLE[] != null && VAR_DOUBLE[] . length > LITERAL_INT ) { VAR_DOUBLE = devsq ( VAR_DOUBLE[] ) / ( VAR_DOUBLE[] . length - LITERAL_INT ) ; } return VAR_DOUBLE ; }
public CONSTRUCTOR_NAME ( CloudFrontOriginAccessIdentityConfig VAR_CLOUDFRONTORIGINACCESSIDENTITYCONFIG , String VAR_STRING , String VAR_STRING ) { setCloudFrontOriginAccessIdentityConfig ( VAR_CLOUDFRONTORIGINACCESSIDENTITYCONFIG ) ; setId ( VAR_STRING ) ; setIfMatch ( VAR_STRING ) ; }
public DiffCommand METHOD_NAME ( String VAR_STRING ) { this . VAR_STRING = VAR_STRING ; return this ; }
public int METHOD_NAME ( ) throws IOException { return IoBridge . METHOD_NAME ( fd ) ; }
final public SrndQuery METHOD_NAME ( ) throws ParseException { SrndQuery VAR_SRNDQUERY ; ArrayList<SrndQuery> VAR_ARRAYLIST<SRNDQUERY> = null ; Token VAR_TOKEN = null ; VAR_SRNDQUERY = NQuery ( ) ; label_4 : while ( true ) { switch ( ( jj_ntk == - LITERAL_INT ) ? jj_ntk ( ) : jj_ntk ) { case NOT : ; break ; default : jj_la1 [ LITERAL_INT ] = jj_gen ; break label_4 ; } VAR_TOKEN = jj_consume_token ( NOT ) ; if ( VAR_ARRAYLIST<SRNDQUERY> == null ) { VAR_ARRAYLIST<SRNDQUERY> = new ArrayList < SrndQuery > ( ) ; VAR_ARRAYLIST<SRNDQUERY> . add ( VAR_SRNDQUERY ) ; } VAR_SRNDQUERY = NQuery ( ) ; VAR_ARRAYLIST<SRNDQUERY> . add ( VAR_SRNDQUERY ) ; } { if ( true ) return ( VAR_ARRAYLIST<SRNDQUERY> == null ) ? VAR_SRNDQUERY : getNotQuery ( VAR_ARRAYLIST<SRNDQUERY> , VAR_TOKEN ) ; } throw new Error ( LITERAL_STRING ) ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_CHAR ) . append ( LITERAL_STRING ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( Integer . toHexString ( sid ) . toUpperCase ( Locale . ROOT ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . toHex ( _rawData ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( LITERAL_STRING ) . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public FloatBuffer METHOD_NAME ( ) { FloatToByteBufferAdapter VAR_FLOATTOBYTEBUFFERADAPTER = new FloatToByteBufferAdapter ( byteBuffer . METHOD_NAME ( ) ) ; VAR_FLOATTOBYTEBUFFERADAPTER . limit = limit ; VAR_FLOATTOBYTEBUFFERADAPTER . position = position ; VAR_FLOATTOBYTEBUFFERADAPTER . mark = mark ; VAR_FLOATTOBYTEBUFFERADAPTER . byteBuffer . order = byteBuffer . order ; return VAR_FLOATTOBYTEBUFFERADAPTER ; }
public LogCommand METHOD_NAME ( ) { return new LogCommand ( repo ) ; }
public CreateDomainResult METHOD_NAME ( CreateDomainRequest VAR_CREATEDOMAINREQUEST ) { VAR_CREATEDOMAINREQUEST = beforeClientExecution ( VAR_CREATEDOMAINREQUEST ) ; return executeCreateDomain ( VAR_CREATEDOMAINREQUEST ) ; }
public int METHOD_NAME ( ) { return WEIGHT_UNKNOWN ; }
public CONSTRUCTOR_NAME ( RecordInputStream VAR_RECORDINPUTSTREAM ) { rt = VAR_RECORDINPUTSTREAM . readShort ( ) ; grbitFrt = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectKind = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectContext = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectInstance1 = VAR_RECORDINPUTSTREAM . readShort ( ) ; iObjectInstance2 = VAR_RECORDINPUTSTREAM . readShort ( ) ; }
public void METHOD_NAME ( ) { if ( lastReturned == null ) throw new IllegalStateException ( ) ; ConcurrentHashMap . this . METHOD_NAME ( lastReturned . key ) ; lastReturned = null ; }
public DescribeMetricCollectionTypesResult METHOD_NAME ( DescribeMetricCollectionTypesRequest VAR_DESCRIBEMETRICCOLLECTIONTYPESREQUEST ) { VAR_DESCRIBEMETRICCOLLECTIONTYPESREQUEST = beforeClientExecution ( VAR_DESCRIBEMETRICCOLLECTIONTYPESREQUEST ) ; return executeDescribeMetricCollectionTypes ( VAR_DESCRIBEMETRICCOLLECTIONTYPESREQUEST ) ; }
public UpdateFieldLevelEncryptionProfileResult METHOD_NAME ( UpdateFieldLevelEncryptionProfileRequest VAR_UPDATEFIELDLEVELENCRYPTIONPROFILEREQUEST ) { VAR_UPDATEFIELDLEVELENCRYPTIONPROFILEREQUEST = beforeClientExecution ( VAR_UPDATEFIELDLEVELENCRYPTIONPROFILEREQUEST ) ; return executeUpdateFieldLevelEncryptionProfile ( VAR_UPDATEFIELDLEVELENCRYPTIONPROFILEREQUEST ) ; }
public Ref METHOD_NAME ( ) { return this ; }
public int METHOD_NAME ( Object VAR_OBJECT ) { if ( VAR_OBJECT != null ) { for ( int VAR_INT = a . length - LITERAL_INT ; VAR_INT >= LITERAL_INT ; VAR_INT -- ) { if ( VAR_OBJECT . equals ( a [ VAR_INT ] ) ) { return VAR_INT ; } } } else { for ( int VAR_INT = a . length - LITERAL_INT ; VAR_INT >= LITERAL_INT ; VAR_INT -- ) { if ( a [ VAR_INT ] == null ) { return VAR_INT ; } } } return - LITERAL_INT ; }
public CONSTRUCTOR_NAME ( Scorer VAR_SCORER ) { if ( VAR_SCORER == null ) { throw new NullPointerException ( ) ; } this . VAR_SCORER = VAR_SCORER ; this . iterator = VAR_SCORER . iterator ( ) ; this . twoPhase = VAR_SCORER . twoPhaseIterator ( ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setUriPattern ( LITERAL_STRING ) ; setMethod ( MethodType . PUT ) ; }
public TokenStream METHOD_NAME ( TokenStream VAR_TOKENSTREAM ) { return new PortugueseLightStemFilter ( VAR_TOKENSTREAM ) ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( rt ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . shortToHex ( grbitFrt ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . toHex ( unused ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( HexDump . intToHex ( cts ) ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( rgchDefListStyle ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( rgchDefPivotStyle ) . append ( LITERAL_CHAR ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public synchronized Enumeration < K > METHOD_NAME ( ) { return new KeyEnumeration ( ) ; }
public DescribeInstanceTypesResult METHOD_NAME ( DescribeInstanceTypesRequest VAR_DESCRIBEINSTANCETYPESREQUEST ) { VAR_DESCRIBEINSTANCETYPESREQUEST = beforeClientExecution ( VAR_DESCRIBEINSTANCETYPESREQUEST ) ; return executeDescribeInstanceTypes ( VAR_DESCRIBEINSTANCETYPESREQUEST ) ; }
public RefUpdate . Result METHOD_NAME ( ) { return rc ; }
public UpdateBasePathMappingResult METHOD_NAME ( UpdateBasePathMappingRequest VAR_UPDATEBASEPATHMAPPINGREQUEST ) { VAR_UPDATEBASEPATHMAPPINGREQUEST = beforeClientExecution ( VAR_UPDATEBASEPATHMAPPINGREQUEST ) ; return executeUpdateBasePathMapping ( VAR_UPDATEBASEPATHMAPPINGREQUEST ) ; }
public UpdateDocumentResult METHOD_NAME ( UpdateDocumentRequest VAR_UPDATEDOCUMENTREQUEST ) { VAR_UPDATEDOCUMENTREQUEST = beforeClientExecution ( VAR_UPDATEDOCUMENTREQUEST ) ; return executeUpdateDocument ( VAR_UPDATEDOCUMENTREQUEST ) ; }
public void METHOD_NAME ( int VAR_INT ) { streamFileThreshold = VAR_INT ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( Integer . toHexString ( _stringsPerBucket ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( _sstInfos . length ) . append ( LITERAL_STRING ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < _sstInfos . length ; VAR_INT ++ ) { VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( VAR_INT ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( Integer . toHexString ( _sstInfos [ VAR_INT ] . getStreamPos ( ) ) ) . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( LITERAL_STRING ) . append ( Integer . toHexString ( _sstInfos [ VAR_INT ] . getBucketSSTOffset ( ) ) ) . append ( LITERAL_STRING ) ; } VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public void METHOD_NAME ( int VAR_INT ) { this . VAR_INT = VAR_INT ; }
public RevFilter METHOD_NAME ( ) { return filter ; }
public CONSTRUCTOR_NAME ( String VAR_STRING , boolean VAR_BOOLEAN , char VAR_CHAR ) { super ( VAR_BOOLEAN ) ; this . VAR_STRING = VAR_STRING ; prefixRef = new BytesRef ( VAR_STRING ) ; this . VAR_CHAR = VAR_CHAR ; }
public byte METHOD_NAME ( ) throws IOException { int VAR_INT = is . read ( ) ; if ( VAR_INT == - LITERAL_INT ) throw new EOFException ( ) ; return ( byte ) VAR_INT ; }
public GetWorkGroupResult METHOD_NAME ( GetWorkGroupRequest VAR_GETWORKGROUPREQUEST ) { VAR_GETWORKGROUPREQUEST = beforeClientExecution ( VAR_GETWORKGROUPREQUEST ) ; return executeGetWorkGroup ( VAR_GETWORKGROUPREQUEST ) ; }
public PutBlockPublicAccessConfigurationResult METHOD_NAME ( PutBlockPublicAccessConfigurationRequest VAR_PUTBLOCKPUBLICACCESSCONFIGURATIONREQUEST ) { VAR_PUTBLOCKPUBLICACCESSCONFIGURATIONREQUEST = beforeClientExecution ( VAR_PUTBLOCKPUBLICACCESSCONFIGURATIONREQUEST ) ; return executePutBlockPublicAccessConfiguration ( VAR_PUTBLOCKPUBLICACCESSCONFIGURATIONREQUEST ) ; }
public String METHOD_NAME ( ) { StringBuilder VAR_STRINGBUILDER = new StringBuilder ( ) ; VAR_STRINGBUILDER . append ( LITERAL_CHAR ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < count ; VAR_INT ++ ) { if ( VAR_INT > LITERAL_INT ) VAR_STRINGBUILDER . append ( LITERAL_STRING ) ; VAR_STRINGBUILDER . append ( entries [ VAR_INT ] ) ; } VAR_STRINGBUILDER . append ( LITERAL_CHAR ) ; return VAR_STRINGBUILDER . METHOD_NAME ( ) ; }
public int METHOD_NAME ( int VAR_INT ) { checkIndex ( VAR_INT ) ; return byteBuffer . getInt ( VAR_INT * SizeOf . INT ) ; }
public CONSTRUCTOR_NAME ( ) { super ( LITERAL_STRING , LITERAL_STRING , LITERAL_STRING , LITERAL_STRING ) ; setProtocol ( ProtocolType . HTTPS ) ; }
public CONSTRUCTOR_NAME ( File VAR_FILE , FS VAR_FS , WorkingTreeOptions VAR_WORKINGTREEOPTIONS ) { this ( VAR_FILE , VAR_FS , VAR_WORKINGTREEOPTIONS , DefaultFileModeStrategy . INSTANCE ) ; }
public int METHOD_NAME ( int VAR_INT ) { return bytes [ VAR_INT ] . value ; }
public DescribeTypeRegistrationResult METHOD_NAME ( DescribeTypeRegistrationRequest VAR_DESCRIBETYPEREGISTRATIONREQUEST ) { VAR_DESCRIBETYPEREGISTRATIONREQUEST = beforeClientExecution ( VAR_DESCRIBETYPEREGISTRATIONREQUEST ) ; return executeDescribeTypeRegistration ( VAR_DESCRIBETYPEREGISTRATIONREQUEST ) ; }
public TerminateInstancesResult METHOD_NAME ( TerminateInstancesRequest VAR_TERMINATEINSTANCESREQUEST ) { VAR_TERMINATEINSTANCESREQUEST = beforeClientExecution ( VAR_TERMINATEINSTANCESREQUEST ) ; return executeTerminateInstances ( VAR_TERMINATEINSTANCESREQUEST ) ; }
public DoubleBuffer METHOD_NAME ( ) { ByteBuffer VAR_BYTEBUFFER = byteBuffer . METHOD_NAME ( ) . order ( byteBuffer . order ( ) ) ; DoubleToByteBufferAdapter VAR_DOUBLETOBYTEBUFFERADAPTER = new DoubleToByteBufferAdapter ( VAR_BYTEBUFFER ) ; VAR_DOUBLETOBYTEBUFFERADAPTER . limit = limit ; VAR_DOUBLETOBYTEBUFFERADAPTER . position = position ; VAR_DOUBLETOBYTEBUFFERADAPTER . mark = mark ; return VAR_DOUBLETOBYTEBUFFERADAPTER ; }
public CONSTRUCTOR_NAME ( SemanticContext VAR_SEMANTICCONTEXT , SemanticContext VAR_SEMANTICCONTEXT ) { Set<SemanticContext> VAR_SET<SEMANTICCONTEXT> = new HashSet < SemanticContext > ( ) ; if ( VAR_SEMANTICCONTEXT instanceof OR ) VAR_SET<SEMANTICCONTEXT> . addAll ( Arrays . asList ( ( ( OR ) VAR_SEMANTICCONTEXT ) . opnds ) ) ; else VAR_SET<SEMANTICCONTEXT> . add ( VAR_SEMANTICCONTEXT ) ; if ( VAR_SEMANTICCONTEXT instanceof OR ) VAR_SET<SEMANTICCONTEXT> . addAll ( Arrays . asList ( ( ( OR ) VAR_SEMANTICCONTEXT ) . opnds ) ) ; else VAR_SET<SEMANTICCONTEXT> . add ( VAR_SEMANTICCONTEXT ) ; List<PrecedencePredicate> VAR_LIST<PRECEDENCEPREDICATE> = filterPrecedencePredicates ( VAR_SET<SEMANTICCONTEXT> ) ; if ( ! VAR_LIST<PRECEDENCEPREDICATE> . isEmpty ( ) ) { PrecedencePredicate VAR_PRECEDENCEPREDICATE = Collections . max ( VAR_LIST<PRECEDENCEPREDICATE> ) ; VAR_SET<SEMANTICCONTEXT> . add ( VAR_PRECEDENCEPREDICATE ) ; } this . opnds = VAR_SET<SEMANTICCONTEXT> . toArray ( new SemanticContext [ VAR_SET<SEMANTICCONTEXT> . size ( ) ] ) ; }
public void METHOD_NAME ( LittleEndianOutput VAR_LITTLEENDIANOUTPUT ) { VAR_LITTLEENDIANOUTPUT . writeShort ( _formats . length ) ; for ( int VAR_INT = LITERAL_INT ; VAR_INT < _formats . length ; VAR_INT ++ ) { _formats [ VAR_INT ] . METHOD_NAME ( VAR_LITTLEENDIANOUTPUT ) ; } }
public DescribeAvailabilityOptionsResult METHOD_NAME ( DescribeAvailabilityOptionsRequest VAR_DESCRIBEAVAILABILITYOPTIONSREQUEST ) { VAR_DESCRIBEAVAILABILITYOPTIONSREQUEST = beforeClientExecution ( VAR_DESCRIBEAVAILABILITYOPTIONSREQUEST ) ; return executeDescribeAvailabilityOptions ( VAR_DESCRIBEAVAILABILITYOPTIONSREQUEST ) ; }
public int METHOD_NAME ( ) { return offset ; }
public static float [ ] METHOD_NAME ( float [ ] VAR_FLOAT[] ) { return METHOD_NAME ( VAR_FLOAT[] , LITERAL_INT + VAR_FLOAT[] . length ) ; }
public ListMetricsResult METHOD_NAME ( ) { return METHOD_NAME ( new ListMetricsRequest ( ) ) ; }
public int METHOD_NAME ( short VAR_SHORT ) { int VAR_INT = LITERAL_INT ; for ( org . apache . poi . hssf . record . Record VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD : records . getRecords ( ) ) { if ( VAR_ORG.APACHE.POI.HSSF.RECORD.RECORD . getSid ( ) == VAR_SHORT ) { return VAR_INT ; } VAR_INT ++ ; } return - LITERAL_INT ; }
public DeleteVpnConnectionRouteResult METHOD_NAME ( DeleteVpnConnectionRouteRequest VAR_DELETEVPNCONNECTIONROUTEREQUEST ) { VAR_DELETEVPNCONNECTIONROUTEREQUEST = beforeClientExecution ( VAR_DELETEVPNCONNECTIONROUTEREQUEST ) ; return executeDeleteVpnConnectionRoute ( VAR_DELETEVPNCONNECTIONROUTEREQUEST ) ; }
