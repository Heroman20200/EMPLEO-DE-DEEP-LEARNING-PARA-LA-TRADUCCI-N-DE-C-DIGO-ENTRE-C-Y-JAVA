public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_vcenter); }
public virtual void METHOD_NAME(NGit.Util.BlockList<T> VAR_NGIT.UTIL.BLOCKLIST<T>) { if (VAR_NGIT.UTIL.BLOCKLIST<T>.size == LITERAL_INT) { return; } int VAR_INT = LITERAL_INT; for (; VAR_INT < VAR_NGIT.UTIL.BLOCKLIST<T>.tailDirIdx; VAR_INT++) { METHOD_NAME(VAR_NGIT.UTIL.BLOCKLIST<T>.directory[VAR_INT], LITERAL_INT, BLOCK_SIZE); } if (VAR_NGIT.UTIL.BLOCKLIST<T>.tailBlkIdx != LITERAL_INT) { METHOD_NAME(VAR_NGIT.UTIL.BLOCKLIST<T>.tailBlock, LITERAL_INT, VAR_NGIT.UTIL.BLOCKLIST<T>.tailBlkIdx); } }
public override void METHOD_NAME(byte VAR_BYTE) { if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != LITERAL_NULL) { outerInstance.blocks.Add(outerInstance.currentBlock); outerInstance.blockEnd.Add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = LITERAL_INT; } outerInstance.currentBlock[outerInstance.upto++] = (byte)VAR_BYTE; }
public virtual ObjectId METHOD_NAME() { return objectId; }
public virtual DeleteDomainEntryResponse METHOD_NAME(DeleteDomainEntryRequest VAR_DELETEDOMAINENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(VAR_DELETEDOMAINENTRYREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return fst == LITERAL_NULL ? LITERAL_INT : fst.GetSizeInBytes(); }
public string METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.TagMessage(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return string.Empty; } Encoding VAR_ENCODING = RawParseUtils.ParseEncoding(VAR_BYTE[]); return RawParseUtils.Decode(VAR_ENCODING, VAR_BYTE[], VAR_INT, VAR_BYTE[].Length); }
public POIFSFileSystem() { HeaderBlock VAR_HEADERBLOCK = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(VAR_HEADERBLOCK); _documents = new ArrayList(); _root = LITERAL_NULL; }
public void METHOD_NAME(int VAR_INT) { slice = pool.Buffers[VAR_INT >> ByteBlockPool.BYTE_BLOCK_SHIFT]; Debug.Assert(slice != LITERAL_NULL); upto = VAR_INT & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = VAR_INT; Debug.Assert(upto < slice.Length); }
public virtual NGit.Api.SubmoduleAddCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public virtual ListIngestionsResponse METHOD_NAME(ListIngestionsRequest VAR_LISTINGESTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(VAR_LISTINGESTIONSREQUEST, VAR_VAR); }
public QueryParserTokenManager(ICharStream VAR_ICHARSTREAM, int VAR_INT) : this(stream) { SwitchTo(VAR_INT); }
public virtual GetShardIteratorResponse METHOD_NAME(GetShardIteratorRequest VAR_GETSHARDITERATORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(VAR_GETSHARDITERATORREQUEST, VAR_VAR); }
public ModifyStrategyRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override bool METHOD_NAME() { lock (@lock) { if (@in == LITERAL_NULL) { throw new System.IO.IOException(LITERAL_STRING); } try { return bytes.hasRemaining() || @in.available() > LITERAL_INT; } catch (System.IO.IOException) { return false; } } }
protected internal EscherOptRecord METHOD_NAME() { return _optRecord; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { lock (this) { if (VAR_BYTE[] == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); if (VAR_INT == LITERAL_INT) { return LITERAL_INT; } int VAR_INT = count - pos < VAR_INT ? count - pos : VAR_INT; { for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_BYTE[][VAR_INT + i] = unchecked((byte)this.VAR_BYTE[][pos + i]); } } pos += VAR_INT; return VAR_INT; } }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp VAR_NLPSENTENCEDETECTOROP) { this.VAR_NLPSENTENCEDETECTOROP = VAR_NLPSENTENCEDETECTOROP; }
public virtual void METHOD_NAME(string VAR_STRING) { write(VAR_STRING != LITERAL_NULL ? VAR_STRING : Sharpen.StringHelper.GetValueOf((object)LITERAL_NULL)); }
public NotImplementedFunctionException(string VAR_STRING, NotImplementedException VAR_NOTIMPLEMENTEDEXCEPTION) : base(functionName, cause) { this.VAR_STRING = VAR_STRING; }
public override V METHOD_NAME() { return this.nextEntry().value; }
public override sealed void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT, bool VAR_BOOL) { int VAR_INT = bufferLength - bufferPosition; if (VAR_INT <= VAR_INT) { if (VAR_INT > LITERAL_INT) { Buffer.BlockCopy(m_buffer, bufferPosition, VAR_BYTE[], VAR_INT, VAR_INT); } bufferPosition += VAR_INT; } else { if (VAR_INT > LITERAL_INT) { Buffer.BlockCopy(m_buffer, bufferPosition, VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; bufferPosition += VAR_INT; } if (VAR_BOOL && VAR_INT < bufferSize) { Refill(); if (bufferLength < VAR_INT) { Buffer.BlockCopy(m_buffer, LITERAL_INT, VAR_BYTE[], VAR_INT, bufferLength); throw new EndOfStreamException(LITERAL_STRING + this); } else { Buffer.BlockCopy(m_buffer, LITERAL_INT, VAR_BYTE[], VAR_INT, VAR_INT); bufferPosition = VAR_INT; } } else { long VAR_LONG = bufferStart + bufferPosition + VAR_INT; if (VAR_LONG > Length) { throw new EndOfStreamException(LITERAL_STRING + this); } ReadInternal(VAR_BYTE[], VAR_INT, VAR_INT); bufferStart = VAR_LONG; bufferPosition = LITERAL_INT; bufferLength = LITERAL_INT; } } }
public virtual TagQueueResponse METHOD_NAME(TagQueueRequest VAR_TAGQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(VAR_TAGQUEUEREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new NotSupportedException(); }
public virtual ModifyCacheSubnetGroupResponse METHOD_NAME(ModifyCacheSubnetGroupRequest VAR_MODIFYCACHESUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(VAR_MODIFYCACHESUBNETGROUPREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); culture = LITERAL_STRING; string VAR_STRING; StringTokenizer VAR_STRINGTOKENIZER = new StringTokenizer(VAR_STRING, LITERAL_STRING); if (VAR_STRINGTOKENIZER.MoveNext()) culture = VAR_STRINGTOKENIZER.Current; if (VAR_STRINGTOKENIZER.MoveNext()) culture += LITERAL_STRING + VAR_STRINGTOKENIZER.Current; if (VAR_STRINGTOKENIZER.MoveNext()) VAR_STRING = VAR_STRINGTOKENIZER.Current; }
public virtual DeleteDocumentationVersionResponse METHOD_NAME(DeleteDocumentationVersionRequest VAR_DELETEDOCUMENTATIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(VAR_DELETEDOCUMENTATIONVERSIONREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is FacetLabel)) { return false; } FacetLabel VAR_FACETLABEL = (FacetLabel)VAR_OBJECT; if (Length != VAR_FACETLABEL.Length) { return false; } for (int i = Length - LITERAL_INT; i >= LITERAL_INT; i--) { if (!Components[i].METHOD_NAME(VAR_FACETLABEL.Components[i], StringComparison.Ordinal)) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse METHOD_NAME(GetInstanceAccessDetailsRequest VAR_GETINSTANCEACCESSDETAILSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(VAR_GETINSTANCEACCESSDETAILSREQUEST, VAR_VAR); }
public HSSFPolygon METHOD_NAME(HSSFChildAnchor VAR_HSSFCHILDANCHOR) { HSSFPolygon VAR_HSSFPOLYGON = new HSSFPolygon(this, VAR_HSSFCHILDANCHOR); VAR_HSSFPOLYGON.Parent = this; VAR_HSSFPOLYGON.Anchor = VAR_HSSFCHILDANCHOR; shapes.Add(VAR_HSSFPOLYGON); OnCreate(VAR_HSSFPOLYGON); return VAR_HSSFPOLYGON; }
public String METHOD_NAME(int VAR_INT) { return GetBoundSheetRec(VAR_INT).Sheetname; }
public virtual GetDashboardResponse METHOD_NAME(GetDashboardRequest VAR_GETDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(VAR_GETDASHBOARDREQUEST, VAR_VAR); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse METHOD_NAME(AssociateSigninDelegateGroupsWithAccountRequest VAR_ASSOCIATESIGNINDELEGATEGROUPSWITHACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(VAR_ASSOCIATESIGNINDELEGATEGROUPSWITHACCOUNTREQUEST, VAR_VAR); }
public void METHOD_NAME(MulBlankRecord VAR_MULBLANKRECORD) { for (int j = LITERAL_INT; j < VAR_MULBLANKRECORD.NumColumns; j++) { BlankRecord VAR_BLANKRECORD = new BlankRecord(); VAR_BLANKRECORD.Column = j + VAR_MULBLANKRECORD.FirstColumn; VAR_BLANKRECORD.Row = VAR_MULBLANKRECORD.Row; VAR_BLANKRECORD.XFIndex = (VAR_MULBLANKRECORD.GetXFAt(j)); InsertCell(VAR_BLANKRECORD); } }
public static string METHOD_NAME(string VAR_STRING) { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); int VAR_INT = LITERAL_INT; int VAR_INT; while ((VAR_INT = VAR_STRING.IndexOf(LITERAL_STRING, VAR_INT)) >= LITERAL_INT) { VAR_JAVA.LANG.STRINGBUILDER.append(Sharpen.StringHelper.Substring(VAR_STRING, VAR_INT, VAR_INT + LITERAL_INT)).append(LITERAL_STRING); VAR_INT = VAR_INT + LITERAL_INT; } return VAR_JAVA.LANG.STRINGBUILDER.append(Sharpen.StringHelper.Substring(VAR_STRING, VAR_INT)).append(LITERAL_STRING).ToString(); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Object[][] VAR_OBJECT[][]) { int VAR_INT = VAR_OBJECT[][][LITERAL_INT].Length; int VAR_INT = VAR_OBJECT[][].Length; _nColumns = (short)VAR_INT; _nRows = (short)VAR_INT; Object[] VAR_OBJECT[] = new Object[_nColumns * _nRows]; for (int r = LITERAL_INT; r < VAR_INT; r++) { Object[] VAR_OBJECT[] = VAR_OBJECT[][][r]; for (int c = LITERAL_INT; c < VAR_INT; c++) { VAR_OBJECT[][GetValueIndex(c, r)] = VAR_OBJECT[][c]; } } _arrayValues = VAR_OBJECT[]; _reserved0Int = LITERAL_INT; _reserved1Short = LITERAL_INT; _reserved2Byte = LITERAL_INT; }
public virtual GetIceServerConfigResponse METHOD_NAME(GetIceServerConfigRequest VAR_GETICESERVERCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIceServerConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance; return Invoke<GetIceServerConfigResponse>(VAR_GETICESERVERCONFIGREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetValueAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME(string VAR_STRING) { return LITERAL_STRING + _parentQuery + LITERAL_STRING; }
public void METHOD_NAME() { refCount.IncrementAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse METHOD_NAME(UpdateConfigurationSetSendingEnabledRequest VAR_UPDATECONFIGURATIONSETSENDINGENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(VAR_UPDATECONFIGURATIONSETSENDINGENABLEDREQUEST, VAR_VAR); }
public int METHOD_NAME() { return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void METHOD_NAME(int VAR_INT) { TenPower VAR_TENPOWER = TenPower.GetInstance(Math.Abs(VAR_INT)); if (VAR_INT < LITERAL_INT) { mulShift(VAR_TENPOWER._divisor, VAR_TENPOWER._divisorShift); } else { mulShift(VAR_TENPOWER._multiplicand, VAR_TENPOWER._multiplierShift); } }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); int VAR_INT = this.Length; VAR_STRINGBUILDER.Append(Path.DirectorySeparatorChar); for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_STRINGBUILDER.Append(this.GetComponent(i)); if (i < (VAR_INT - LITERAL_INT)) { VAR_STRINGBUILDER.Append(Path.DirectorySeparatorChar); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(ECSMetadataServiceCredentialsFetcher VAR_ECSMETADATASERVICECREDENTIALSFETCHER) { this.VAR_ECSMETADATASERVICECREDENTIALSFETCHER = VAR_ECSMETADATASERVICECREDENTIALSFETCHER; this.VAR_ECSMETADATASERVICECREDENTIALSFETCHER.SetRoleName(roleName); }
public virtual void METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { progressMonitor = VAR_PROGRESSMONITOR; }
public override void METHOD_NAME() { if (!First) { ptr = LITERAL_INT; if (!Eof) { ParseEntry(); } } }
public E METHOD_NAME() { if (iterator.previousIndex() >= start) { return iterator.METHOD_NAME(); } throw new java.util.NoSuchElementException(); }
public virtual string METHOD_NAME() { return this.newPrefix; }
public virtual int METHOD_NAME(int VAR_INT) { { for (int i = LITERAL_INT; i < mSize; i++) { if (mValues[i] == VAR_INT) { return i; } } } return -LITERAL_INT; }
public IList<CharsRef> METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { IList<CharsRef> VAR_ILIST<CHARSREF> = Stem(VAR_CHAR[], VAR_INT); if (VAR_ILIST<CHARSREF>.Count < LITERAL_INT) { return VAR_ILIST<CHARSREF>; } CharArraySet VAR_CHARARRAYSET = new CharArraySet(LuceneVersion.LUCENE_CURRENT, LITERAL_INT, dictionary.ignoreCase); IList<CharsRef> VAR_ILIST<CHARSREF> = new List<CharsRef>(); foreach (CharsRef s in VAR_ILIST<CHARSREF>) { if (!VAR_CHARARRAYSET.Contains(s)) { VAR_ILIST<CHARSREF>.Add(s); VAR_CHARARRAYSET.Add(s); } } return VAR_ILIST<CHARSREF>; }
public virtual GetGatewayResponsesResponse METHOD_NAME(GetGatewayResponsesRequest VAR_GETGATEWAYRESPONSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(VAR_GETGATEWAYRESPONSESREQUEST, VAR_VAR); }
public void METHOD_NAME(long VAR_LONG) { currentBlockIndex = (int)(VAR_LONG >> outerInstance.blockBits); currentBlock = outerInstance.blocks[currentBlockIndex]; currentBlockUpto = (int)(VAR_LONG & outerInstance.blockMask); }
public override long METHOD_NAME(long VAR_LONG) { int VAR_INT = (int)Math.Min(Available(), Math.Max(LITERAL_INT, VAR_LONG)); ptr += VAR_INT; return VAR_INT; }
public BootstrapActionDetail(BootstrapActionConfig VAR_BOOTSTRAPACTIONCONFIG) { _bootstrapActionConfig = VAR_BOOTSTRAPACTIONCONFIG; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_row); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_col); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_flags); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_shapeid); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_author.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_5_hasMultibyte ? LITERAL_INT : LITERAL_INT); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(field_6_author, VAR_ILITTLEENDIANOUTPUT); } if (field_7_padding != LITERAL_NULL) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Convert.ToInt32(field_7_padding, CultureInfo.InvariantCulture)); } }
public virtual int METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, count); }
public override bool METHOD_NAME(E VAR_E) { return addLastImpl(VAR_E); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING) { ConfigSnapshot VAR_CONFIGSNAPSHOT; ConfigSnapshot VAR_CONFIGSNAPSHOT; do { VAR_CONFIGSNAPSHOT = state.Get(); VAR_CONFIGSNAPSHOT = METHOD_NAME(VAR_CONFIGSNAPSHOT, VAR_STRING, VAR_STRING); } while (!state.CompareAndSet(VAR_CONFIGSNAPSHOT, VAR_CONFIGSNAPSHOT)); }
public string METHOD_NAME() { return tagName; }
public void METHOD_NAME(int VAR_INT, SubRecord VAR_SUBRECORD) { subrecords.Insert(VAR_INT, VAR_SUBRECORD); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return c.METHOD_NAME(VAR_OBJECT); } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new DoubleMetaphoneFilter(VAR_TOKENSTREAM, maxCodeLength, inject); }
public virtual long METHOD_NAME() { return InCoreLength(); }
public virtual void METHOD_NAME(bool VAR_BOOL) { value = VAR_BOOL; }
public Pair(ContentSource VAR_CONTENTSOURCE, ContentSource VAR_CONTENTSOURCE) { this.VAR_CONTENTSOURCE = VAR_CONTENTSOURCE; this.VAR_CONTENTSOURCE = VAR_CONTENTSOURCE; }
public virtual int METHOD_NAME(int VAR_INT) { if (count <= VAR_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } return entries[VAR_INT]; }
public CreateRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual bool METHOD_NAME() { return deltaBaseAsOffset; }
public void METHOD_NAME() { if (expectedModCount == list.modCount) { if (lastLink != LITERAL_NULL) { java.util.LinkedList.Link<ET> VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> = lastLink.next; java.util.LinkedList.Link<ET> VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> = lastLink.previous; VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>.previous = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>.next = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; if (lastLink == link) { pos--; } link = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; lastLink = LITERAL_NULL; expectedModCount++; list._size--; list.modCount++; } else { throw new System.InvalidOperationException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public virtual MergeShardsResponse METHOD_NAME(MergeShardsRequest VAR_MERGESHARDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = MergeShardsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance; return Invoke<MergeShardsResponse>(VAR_MERGESHARDSREQUEST, VAR_VAR); }
public virtual AllocateHostedConnectionResponse METHOD_NAME(AllocateHostedConnectionRequest VAR_ALLOCATEHOSTEDCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(VAR_ALLOCATEHOSTEDCONNECTIONREQUEST, VAR_VAR); }
public int METHOD_NAME() { return start; }
public static WeightedTerm[] METHOD_NAME(Query VAR_QUERY) { return METHOD_NAME(VAR_QUERY, false); }
public override java.nio.ByteBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); VAR_INT[][VAR_INT++] = VAR_INT & LITERAL_INT; } }
public virtual string METHOD_NAME() { if (string.Empty.Equals(GetPath()) || GetPath() == LITERAL_NULL) { throw new ArgumentException(); } string VAR_STRING = GetPath(); string[] VAR_STRING[]; if (LITERAL_STRING.Equals(scheme) || LOCAL_FILE.Matcher(VAR_STRING).Matches()) { VAR_STRING[] = VAR_STRING.Split(LITERAL_STRING + FilePath.separatorChar + LITERAL_STRING); } else { VAR_STRING[] = VAR_STRING.Split(LITERAL_STRING); } if (VAR_STRING[].Length == LITERAL_INT) { throw new ArgumentException(); } string VAR_STRING = VAR_STRING[][VAR_STRING[].Length - LITERAL_INT]; if (Constants.DOT_GIT.Equals(VAR_STRING)) { VAR_STRING = VAR_STRING[][VAR_STRING[].Length - LITERAL_INT]; } else { if (VAR_STRING.EndsWith(Constants.DOT_GIT_EXT)) { VAR_STRING = Sharpen.Runtime.Substring(VAR_STRING, LITERAL_INT, VAR_STRING.Length - Constants.DOT_GIT_EXT.Length); } } return VAR_STRING; }
public virtual DescribeNotebookInstanceLifecycleConfigResponse METHOD_NAME(DescribeNotebookInstanceLifecycleConfigRequest VAR_DESCRIBENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(VAR_DESCRIBENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST, VAR_VAR); }
public string METHOD_NAME() { return AccessSecret; }
public virtual CreateVpnConnectionResponse METHOD_NAME(CreateVpnConnectionRequest VAR_CREATEVPNCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(VAR_CREATEVPNCONNECTIONREQUEST, VAR_VAR); }
public virtual DescribeVoicesResponse METHOD_NAME(DescribeVoicesRequest VAR_DESCRIBEVOICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(VAR_DESCRIBEVOICESREQUEST, VAR_VAR); }
public virtual ListMonitoringExecutionsResponse METHOD_NAME(ListMonitoringExecutionsRequest VAR_LISTMONITORINGEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(VAR_LISTMONITORINGEXECUTIONSREQUEST, VAR_VAR); }
public DescribeJobRequest(string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _jobId = VAR_STRING; }
public EscherRecord METHOD_NAME(int VAR_INT) { return escherRecords[VAR_INT]; }
public virtual GetApisResponse METHOD_NAME(GetApisRequest VAR_GETAPISREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApisRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(VAR_GETAPISREQUEST, VAR_VAR); }
public virtual DeleteSmsChannelResponse METHOD_NAME(DeleteSmsChannelRequest VAR_DELETESMSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(VAR_DELETESMSCHANNELREQUEST, VAR_VAR); }
public virtual TrackingRefUpdate METHOD_NAME() { return trackingRefUpdate; }
public virtual void METHOD_NAME(bool VAR_BOOL) { METHOD_NAME(VAR_BOOL.ToString()); }
public virtual IQueryNode METHOD_NAME() { return GetChildren()[LITERAL_INT]; }
public NotIgnoredFilter(int VAR_INT) { this.index = VAR_INT; }
public AreaRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_formatFlags = VAR_RECORDINPUTSTREAM.ReadShort(); }
public GetThumbnailRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsResponse METHOD_NAME(DescribeTransitGatewayVpcAttachmentsRequest VAR_DESCRIBETRANSITGATEWAYVPCATTACHMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(VAR_DESCRIBETRANSITGATEWAYVPCATTACHMENTSREQUEST, VAR_VAR); }
public virtual PutVoiceConnectorStreamingConfigurationResponse METHOD_NAME(PutVoiceConnectorStreamingConfigurationRequest VAR_PUTVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(VAR_PUTVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST, VAR_VAR); }
public override OrdRange METHOD_NAME(string VAR_STRING) { OrdRange VAR_ORDRANGE; prefixToOrdRange.TryGetValue(VAR_STRING, out VAR_ORDRANGE); return VAR_ORDRANGE; }
public override string METHOD_NAME() { string VAR_STRING = string.Empty; if (startIndex >= LITERAL_INT && startIndex < ((ICharStream)InputStream).Size) { VAR_STRING = ((ICharStream)InputStream).GetText(Interval.Of(startIndex, startIndex)); VAR_STRING = Utils.EscapeWhitespace(VAR_STRING, false); } return string.Format(CultureInfo.CurrentCulture, LITERAL_STRING, typeof(Antlr4.Runtime.LexerNoViableAltException).Name, VAR_STRING); }
public virtual E METHOD_NAME() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse METHOD_NAME(CreateWorkspacesRequest VAR_CREATEWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(VAR_CREATEWORKSPACESREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { NumberFormatIndexRecord VAR_NUMBERFORMATINDEXRECORD = new NumberFormatIndexRecord(); VAR_NUMBERFORMATINDEXRECORD.field_1_formatIndex = field_1_formatIndex; return VAR_NUMBERFORMATINDEXRECORD; }
public virtual DescribeRepositoriesResponse METHOD_NAME(DescribeRepositoriesRequest VAR_DESCRIBEREPOSITORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(VAR_DESCRIBEREPOSITORIESREQUEST, VAR_VAR); }
public SparseIntArray(int VAR_INT) { VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(VAR_INT); mKeys = new int[VAR_INT]; mValues = new int[VAR_INT]; mSize = LITERAL_INT; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HyphenatedWordsFilter(VAR_TOKENSTREAM); }
public virtual CreateDistributionWithTagsResponse METHOD_NAME(CreateDistributionWithTagsRequest VAR_CREATEDISTRIBUTIONWITHTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(VAR_CREATEDISTRIBUTIONWITHTAGSREQUEST, VAR_VAR); }
public RandomAccessFile(string VAR_STRING, string VAR_STRING) : this(new java.io.File(fileName), mode) { throw new System.NotImplementedException(); }
public virtual DeleteWorkspaceImageResponse METHOD_NAME(DeleteWorkspaceImageRequest VAR_DELETEWORKSPACEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(VAR_DELETEWORKSPACEIMAGEREQUEST, VAR_VAR); }
public static string METHOD_NAME(int VAR_INT) { return METHOD_NAME((long)VAR_INT, LITERAL_INT); }
public virtual UpdateDistributionResponse METHOD_NAME(UpdateDistributionRequest VAR_UPDATEDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(VAR_UPDATEDISTRIBUTIONREQUEST, VAR_VAR); }
public HSSFColor METHOD_NAME(short VAR_SHORT) { if (VAR_SHORT == HSSFColor.Automatic.Index) return HSSFColor.Automatic.GetInstance(); else { byte[] VAR_BYTE[] = palette.METHOD_NAME(VAR_SHORT); if (VAR_BYTE[] != LITERAL_NULL) { return new CustomColor(VAR_SHORT, VAR_BYTE[]); } } return LITERAL_NULL; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { throw new NotImplementedFunctionException(_functionName); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort((short)field_1_number_crn_records); VAR_ILITTLEENDIANOUTPUT.WriteShort((short)field_2_sheet_table_index); }
public virtual DescribeDBEngineVersionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short VAR_SHORT, short VAR_SHORT) { this._character = VAR_SHORT; this._fontIndex = VAR_SHORT; }
public static byte[] METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { byte[] VAR_BYTE[] = new byte[VAR_INT * LITERAL_INT]; int VAR_INT = VAR_INT + VAR_INT; int VAR_INT = LITERAL_INT; { for (int i = VAR_INT; i < VAR_INT; ++i) { char VAR_CHAR = VAR_CHAR[][i]; VAR_BYTE[][VAR_INT++] = unchecked((byte)(VAR_CHAR >> LITERAL_INT)); VAR_BYTE[][VAR_INT++] = unchecked((byte)VAR_CHAR); } } return VAR_BYTE[]; }
public virtual UploadArchiveResponse METHOD_NAME(UploadArchiveRequest VAR_UPLOADARCHIVEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(VAR_UPLOADARCHIVEREQUEST, VAR_VAR); }
public virtual IList<IToken> METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, -LITERAL_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!base.METHOD_NAME(VAR_OBJECT)) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } AutomatonQuery VAR_AUTOMATONQUERY = (AutomatonQuery)VAR_OBJECT; if (!m_compiled.METHOD_NAME(VAR_AUTOMATONQUERY.m_compiled)) { return false; } if (m_term == LITERAL_NULL) { if (VAR_AUTOMATONQUERY.m_term != LITERAL_NULL) { return false; } } else if (!m_term.METHOD_NAME(VAR_AUTOMATONQUERY.m_term)) { return false; } return true; }
public virtual SpanQuery METHOD_NAME() { List<SpanQuery> VAR_LIST<SPANQUERY> = new List<SpanQuery>(); foreach (var wsq in weightBySpanQuery) { wsq.Key.Boost = wsq.Value; VAR_LIST<SPANQUERY>.Add(wsq.Key); } if (VAR_LIST<SPANQUERY>.Count == LITERAL_INT) return VAR_LIST<SPANQUERY>[LITERAL_INT]; else return new SpanOrQuery(VAR_LIST<SPANQUERY>.ToArray()); }
public virtual StashCreateCommand METHOD_NAME() { return new StashCreateCommand(repo); }
public FieldInfo METHOD_NAME(string VAR_STRING) { FieldInfo VAR_FIELDINFO; byName.TryGetValue(VAR_STRING, out VAR_FIELDINFO); return VAR_FIELDINFO; }
public virtual DescribeEventSourceResponse METHOD_NAME(DescribeEventSourceRequest VAR_DESCRIBEEVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(VAR_DESCRIBEEVENTSOURCEREQUEST, VAR_VAR); }
public virtual GetDocumentAnalysisResponse METHOD_NAME(GetDocumentAnalysisRequest VAR_GETDOCUMENTANALYSISREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(VAR_GETDOCUMENTANALYSISREQUEST, VAR_VAR); }
public virtual CancelUpdateStackResponse METHOD_NAME(CancelUpdateStackRequest VAR_CANCELUPDATESTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(VAR_CANCELUPDATESTACKREQUEST, VAR_VAR); }
public virtual ModifyLoadBalancerAttributesResponse METHOD_NAME(ModifyLoadBalancerAttributesRequest VAR_MODIFYLOADBALANCERATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(VAR_MODIFYLOADBALANCERATTRIBUTESREQUEST, VAR_VAR); }
public virtual SetInstanceProtectionResponse METHOD_NAME(SetInstanceProtectionRequest VAR_SETINSTANCEPROTECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(VAR_SETINSTANCEPROTECTIONREQUEST, VAR_VAR); }
public virtual ModifyDBProxyResponse METHOD_NAME(ModifyDBProxyRequest VAR_MODIFYDBPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(VAR_MODIFYDBPROXYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (count == outputs.Length) { CharsRef[] VAR_CHARSREF[] = new CharsRef[ArrayUtil.Oversize(LITERAL_INT + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; Array.Copy(outputs, LITERAL_INT, VAR_CHARSREF[], LITERAL_INT, count); outputs = VAR_CHARSREF[]; } if (count == endOffsets.Length) { int[] VAR_INT[] = new int[ArrayUtil.Oversize(LITERAL_INT + count, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(endOffsets, LITERAL_INT, VAR_INT[], LITERAL_INT, count); endOffsets = VAR_INT[]; } if (count == posLengths.Length) { int[] VAR_INT[] = new int[ArrayUtil.Oversize(LITERAL_INT + count, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(posLengths, LITERAL_INT, VAR_INT[], LITERAL_INT, count); posLengths = VAR_INT[]; } if (outputs[count] == LITERAL_NULL) { outputs[count] = new CharsRef(); } outputs[count].CopyChars(VAR_CHAR[], VAR_INT, VAR_INT); endOffsets[count] = VAR_INT; posLengths[count] = VAR_INT; count++; }
public FetchLibrariesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override bool METHOD_NAME() { return objects.METHOD_NAME(); }
public FilterOutputStream(java.io.OutputStream VAR_JAVA.IO.OUTPUTSTREAM) { this.VAR_JAVA.IO.OUTPUTSTREAM = VAR_JAVA.IO.OUTPUTSTREAM; }
public ScaleClusterRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public IDataValidationConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING) { return DVConstraint.METHOD_NAME(VAR_INT, VAR_STRING, VAR_STRING); }
public virtual ListObjectParentPathsResponse METHOD_NAME(ListObjectParentPathsRequest VAR_LISTOBJECTPARENTPATHSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(VAR_LISTOBJECTPARENTPATHSREQUEST, VAR_VAR); }
public virtual DescribeCacheSubnetGroupsResponse METHOD_NAME(DescribeCacheSubnetGroupsRequest VAR_DESCRIBECACHESUBNETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(VAR_DESCRIBECACHESUBNETGROUPSREQUEST, VAR_VAR); }
public void METHOD_NAME(bool VAR_BOOL) { field_5_options = sharedFormula.SetShortBoolean(field_5_options, VAR_BOOL); }
public virtual bool METHOD_NAME() { return reuseObjects; }
public virtual IErrorNode METHOD_NAME(IToken VAR_ITOKEN) { ErrorNodeImpl VAR_ERRORNODEIMPL = new ErrorNodeImpl(VAR_ITOKEN); AddChild(VAR_ERRORNODEIMPL); VAR_ERRORNODEIMPL.Parent = this; return VAR_ERRORNODEIMPL; }
public LatvianStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse METHOD_NAME(RemoveSourceIdentifierFromSubscriptionRequest VAR_REMOVESOURCEIDENTIFIERFROMSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(VAR_REMOVESOURCEIDENTIFIERFROMSUBSCRIPTIONREQUEST, VAR_VAR); }
public static TokenFilterFactory METHOD_NAME(string VAR_STRING, IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) { return loader.NewInstance(VAR_STRING, VAR_IDICTIONARY<STRING, STRING>); }
public AddAlbumPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse METHOD_NAME(GetThreatIntelSetRequest VAR_GETTHREATINTELSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(VAR_GETTHREATINTELSETREQUEST, VAR_VAR); }
public override TreeFilter METHOD_NAME() { return new AndTreeFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is ArmenianStemmer; }
public sealed override bool METHOD_NAME() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse METHOD_NAME(UpdateContributorInsightsRequest VAR_UPDATECONTRIBUTORINSIGHTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(VAR_UPDATECONTRIBUTORINSIGHTSREQUEST, VAR_VAR); }
public void METHOD_NAME() { records.Remove(fileShare); records.Remove(WriteProtect); fileShare = LITERAL_NULL; writeProtect = LITERAL_NULL; }
public SolrSynonymParser(bool VAR_BOOL, bool VAR_BOOL, Analyzer VAR_ANALYZER) : base(dedup, analyzer) { this.VAR_BOOL = VAR_BOOL; }
public virtual RequestSpotInstancesResponse METHOD_NAME(RequestSpotInstancesRequest VAR_REQUESTSPOTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(VAR_REQUESTSPOTINSTANCESREQUEST, VAR_VAR); }
public byte[] METHOD_NAME() { return FindObjectRecord().ObjectData; }
public virtual GetContactAttributesResponse METHOD_NAME(GetContactAttributesRequest VAR_GETCONTACTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(VAR_GETCONTACTATTRIBUTESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return GetKey() + LITERAL_STRING + GetValue(); }
public virtual ListTextTranslationJobsResponse METHOD_NAME(ListTextTranslationJobsRequest VAR_LISTTEXTTRANSLATIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(VAR_LISTTEXTTRANSLATIONJOBSREQUEST, VAR_VAR); }
public virtual GetContactMethodsResponse METHOD_NAME(GetContactMethodsRequest VAR_GETCONTACTMETHODSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetContactMethodsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetContactMethodsResponseUnmarshaller.Instance; return Invoke<GetContactMethodsResponse>(VAR_GETCONTACTMETHODSREQUEST, VAR_VAR); }
public static short METHOD_NAME(String VAR_STRING) { FunctionMetadata VAR_FUNCTIONMETADATA = GetInstance().GetFunctionByNameInternal(VAR_STRING); if (VAR_FUNCTIONMETADATA == LITERAL_NULL) { return -LITERAL_INT; } return (short)VAR_FUNCTIONMETADATA.Index; }
public virtual DescribeAnomalyDetectorsResponse METHOD_NAME(DescribeAnomalyDetectorsRequest VAR_DESCRIBEANOMALYDETECTORSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(VAR_DESCRIBEANOMALYDETECTORSREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING, ObjectId VAR_OBJECTID) { return METHOD_NAME(VAR_STRING, VAR_OBJECTID, false); }
public override long METHOD_NAME(AnyObjectId VAR_ANYOBJECTID, int VAR_INT) { long VAR_LONG = db.METHOD_NAME(this, VAR_ANYOBJECTID); if (VAR_LONG < LITERAL_INT) { if (VAR_INT == OBJ_ANY) { throw new MissingObjectException(VAR_ANYOBJECTID.Copy(), LITERAL_STRING); } throw new MissingObjectException(VAR_ANYOBJECTID.Copy(), VAR_INT); } return VAR_LONG; }
public virtual ImportInstallationMediaResponse METHOD_NAME(ImportInstallationMediaRequest VAR_IMPORTINSTALLATIONMEDIAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(VAR_IMPORTINSTALLATIONMEDIAREQUEST, VAR_VAR); }
public virtual PutLifecycleEventHookExecutionStatusResponse METHOD_NAME(PutLifecycleEventHookExecutionStatusRequest VAR_PUTLIFECYCLEEVENTHOOKEXECUTIONSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutLifecycleEventHookExecutionStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleEventHookExecutionStatusResponse>(VAR_PUTLIFECYCLEEVENTHOOKEXECUTIONSTATUSREQUEST, VAR_VAR); }
public NumberPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_value = VAR_ILITTLEENDIANINPUT.ReadDouble(); }
public virtual GetFieldLevelEncryptionConfigResponse METHOD_NAME(GetFieldLevelEncryptionConfigRequest VAR_GETFIELDLEVELENCRYPTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(VAR_GETFIELDLEVELENCRYPTIONCONFIGREQUEST, VAR_VAR); }
public virtual DescribeDetectorResponse METHOD_NAME(DescribeDetectorRequest VAR_DESCRIBEDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(VAR_DESCRIBEDETECTORREQUEST, VAR_VAR); }
public virtual ReportInstanceStatusResponse METHOD_NAME(ReportInstanceStatusRequest VAR_REPORTINSTANCESTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatusResponse>(VAR_REPORTINSTANCESTATUSREQUEST, VAR_VAR); }
public virtual DeleteAlarmResponse METHOD_NAME(DeleteAlarmRequest VAR_DELETEALARMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(VAR_DELETEALARMREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PortugueseStemFilter(VAR_TOKENSTREAM); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return c.METHOD_NAME(VAR_OBJECT); } }
public virtual GetDedicatedIpResponse METHOD_NAME(GetDedicatedIpRequest VAR_GETDEDICATEDIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(VAR_GETDEDICATEDIPREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return precedence + LITERAL_STRING; }
public virtual ListStreamProcessorsResponse METHOD_NAME(ListStreamProcessorsRequest VAR_LISTSTREAMPROCESSORSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(VAR_LISTSTREAMPROCESSORSREQUEST, VAR_VAR); }
public DeleteLoadBalancerPolicyRequest(string VAR_STRING, string VAR_STRING) { _loadBalancerName = VAR_STRING; _policyName = VAR_STRING; }
public WindowProtectRecord(int VAR_INT) { _options = VAR_INT; }
public UnbufferedCharStream(int VAR_INT) { n = LITERAL_INT; data = new int[VAR_INT]; }
public virtual GetOperationsResponse METHOD_NAME(GetOperationsRequest VAR_GETOPERATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOperationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(VAR_GETOPERATIONSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { NB.EncodeInt32(VAR_BYTE[], VAR_INT, w1); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w2); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w3); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w4); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w5); }
public WindowOneRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_h_hold = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_v_hold = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_width = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_height = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_active_sheet = VAR_RECORDINPUTSTREAM.ReadShort(); field_7_first_visible_tab = VAR_RECORDINPUTSTREAM.ReadShort(); field_8_num_selected_tabs = VAR_RECORDINPUTSTREAM.ReadShort(); field_9_tab_width_ratio = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual StopWorkspacesResponse METHOD_NAME(StopWorkspacesRequest VAR_STOPWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(VAR_STOPWORKSPACESREQUEST, VAR_VAR); }
public void METHOD_NAME()throws IOException { if (isOpen) { isOpen = false ; try { dump(); } finally { try { channel.truncate(fileLength); } finally { try { channel.METHOD_NAME(); } finally { fos.METHOD_NAME(); } } } } }
public virtual DescribeMatchmakingRuleSetsResponse METHOD_NAME(DescribeMatchmakingRuleSetsRequest VAR_DESCRIBEMATCHMAKINGRULESETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(VAR_DESCRIBEMATCHMAKINGRULESETSREQUEST, VAR_VAR); }
public string METHOD_NAME(int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { return LITERAL_NULL; }
public virtual string METHOD_NAME() { return pathStr; }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = double.NaN; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length >= LITERAL_INT) { double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; int VAR_INT = VAR_DOUBLE[].Length; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_DOUBLE += VAR_DOUBLE[][i]; } VAR_DOUBLE = VAR_DOUBLE / VAR_INT; VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_DOUBLE += (VAR_DOUBLE[][i] - VAR_DOUBLE) * (VAR_DOUBLE[][i] - VAR_DOUBLE); } VAR_DOUBLE = (VAR_INT == LITERAL_INT) ? LITERAL_INT : VAR_DOUBLE; } return VAR_DOUBLE; }
public virtual DescribeResizeResponse METHOD_NAME(DescribeResizeRequest VAR_DESCRIBERESIZEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(VAR_DESCRIBERESIZEREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return passedThroughNonGreedyDecision; }
public int METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public void METHOD_NAME(ICellHandler VAR_ICELLHANDLER) { int VAR_INT = range.FirstRow; int VAR_INT = range.LastRow; int VAR_INT = range.FirstColumn; int VAR_INT = range.LastColumn; int VAR_INT = VAR_INT - VAR_INT + LITERAL_INT; SimpleCellWalkContext VAR_SIMPLECELLWALKCONTEXT = new SimpleCellWalkContext(); IRow VAR_IROW = LITERAL_NULL; ICell VAR_ICELL = LITERAL_NULL; for (VAR_SIMPLECELLWALKCONTEXT.rowNumber = VAR_INT; VAR_SIMPLECELLWALKCONTEXT.rowNumber <= VAR_INT; ++VAR_SIMPLECELLWALKCONTEXT.rowNumber) { VAR_IROW = sheet.GetRow(VAR_SIMPLECELLWALKCONTEXT.rowNumber); if (VAR_IROW == LITERAL_NULL) { continue; } for (VAR_SIMPLECELLWALKCONTEXT.colNumber = VAR_INT; VAR_SIMPLECELLWALKCONTEXT.colNumber <= VAR_INT; ++VAR_SIMPLECELLWALKCONTEXT.colNumber) { VAR_ICELL = VAR_IROW.GetCell(VAR_SIMPLECELLWALKCONTEXT.colNumber); if (VAR_ICELL == LITERAL_NULL) { continue; } if (IsEmpty(VAR_ICELL) && !traverseEmptyCells) { continue; } VAR_SIMPLECELLWALKCONTEXT.ordinalNumber = (VAR_SIMPLECELLWALKCONTEXT.rowNumber - VAR_INT) * VAR_INT + (VAR_SIMPLECELLWALKCONTEXT.colNumber - VAR_INT + LITERAL_INT); VAR_ICELLHANDLER.OnCell(VAR_ICELL, VAR_SIMPLECELLWALKCONTEXT); } } }
public int METHOD_NAME() { return _ReadIndex; }
public virtual int METHOD_NAME(ScoreTerm VAR_SCORETERM) { if (Term.BytesEquals(VAR_SCORETERM.Term)) { return LITERAL_INT; } if (this.Boost == VAR_SCORETERM.Boost) { return VAR_SCORETERM.Term.METHOD_NAME(this.Term); } else { return this.Boost.METHOD_NAME(VAR_SCORETERM.Boost); } }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; i++) { switch (VAR_CHAR[][i]) { case FARSI_YEH: case YEH_BARREE: VAR_CHAR[][i] = YEH; break; case KEHEH: VAR_CHAR[][i] = KAF; break; case HEH_YEH: case HEH_GOAL: VAR_CHAR[][i] = HEH; break; case HAMZA_ABOVE: VAR_INT = StemmerUtil.Delete(VAR_CHAR[], i, VAR_INT); i--; break; default: break; } } return VAR_INT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_options); }
public DiagnosticErrorListener(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public KeySchemaElement(string VAR_STRING, KeyType VAR_KEYTYPE) { _attributeName = VAR_STRING; _keyType = VAR_KEYTYPE; }
public virtual GetAssignmentResponse METHOD_NAME(GetAssignmentRequest VAR_GETASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(VAR_GETASSIGNMENTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return FindOffset(VAR_ANYOBJECTID) != -LITERAL_INT; }
public virtual GroupingSearch METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual void METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { lock (this) { if (!fieldTypes.TryGetValue(VAR_STRING, out DimConfig fieldType)) { fieldTypes[VAR_STRING] = new DimConfig { IsMultiValued = VAR_BOOL }; } else { fieldType.IsMultiValued = VAR_BOOL; } } }
public int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (char c in cells.Keys) { Cell VAR_CELL = At(c); if (VAR_CELL.cmd >= LITERAL_INT) { VAR_INT++; } } return VAR_INT; }
public virtual DeleteVoiceConnectorResponse METHOD_NAME(DeleteVoiceConnectorRequest VAR_DELETEVOICECONNECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(VAR_DELETEVOICECONNECTORREQUEST, VAR_VAR); }
public virtual DeleteLifecyclePolicyResponse METHOD_NAME(DeleteLifecyclePolicyRequest VAR_DELETELIFECYCLEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(VAR_DELETELIFECYCLEPOLICYREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { int VAR_INT = VAR_BYTE[].Length; CheckPosition(VAR_INT); System.Array.Copy(VAR_BYTE[], LITERAL_INT, _buf, _writeIndex, VAR_INT); _writeIndex += VAR_INT; }
public virtual RebaseResult METHOD_NAME() { return this.rebaseResult; }
public static int METHOD_NAME(int VAR_INT, float VAR_FLOAT) { foreach (var t in from t in _usableBitSetSizes let numSetBitsAtDesiredSaturation = (int)(t * VAR_FLOAT)let estimatedNumUniqueValues = GetEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation) where estimatedNumUniqueValues > VAR_INT select t) { return t; } return -LITERAL_INT; }
public virtual DescribeDashboardResponse METHOD_NAME(DescribeDashboardRequest VAR_DESCRIBEDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(VAR_DESCRIBEDASHBOARDREQUEST, VAR_VAR); }
public virtual CreateSegmentResponse METHOD_NAME(CreateSegmentRequest VAR_CREATESEGMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(VAR_CREATESEGMENTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(RowOffset)).Append(LITERAL_STRING); for (int k = LITERAL_INT; k < field_2_cell_offsets.Length; k++) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(k).Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_2_cell_offsets[k])).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual IList<string> METHOD_NAME() { return undeletedList; }
public override String METHOD_NAME() { return LITERAL_STRING; }
public override object METHOD_NAME() { return this; }
public PlainTextDictionary(TextReader VAR_TEXTREADER) { @in = VAR_TEXTREADER; }
public java.lang.StringBuilder METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE == LITERAL_NULL) { appendNull(); } else { append0(VAR_JAVA.LANG.CHARSEQUENCE, LITERAL_INT, VAR_JAVA.LANG.CHARSEQUENCE.Length); } return this; }
public virtual ListAssociatedStacksResponse METHOD_NAME(ListAssociatedStacksRequest VAR_LISTASSOCIATEDSTACKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(VAR_LISTASSOCIATEDSTACKSREQUEST, VAR_VAR); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += VAR_DOUBLE[][i]; } VAR_DOUBLE = VAR_DOUBLE / VAR_DOUBLE[].Length; VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += Math.Abs(VAR_DOUBLE[][i] - VAR_DOUBLE); } VAR_DOUBLE = VAR_DOUBLE / VAR_DOUBLE[].Length; return VAR_DOUBLE; }
public virtual DescribeByoipCidrsResponse METHOD_NAME(DescribeByoipCidrsRequest VAR_DESCRIBEBYOIPCIDRSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(VAR_DESCRIBEBYOIPCIDRSREQUEST, VAR_VAR); }
public virtual GetDiskResponse METHOD_NAME(GetDiskRequest VAR_GETDISKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDiskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(VAR_GETDISKREQUEST, VAR_VAR); }
public virtual CreateDBClusterParameterGroupResponse METHOD_NAME(CreateDBClusterParameterGroupRequest VAR_CREATEDBCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(VAR_CREATEDBCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public static java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = new java.nio.ReadWriteCharArrayBuffer(VAR_CHAR[]); VAR_JAVA.NIO.CHARBUFFER._position = VAR_INT; VAR_JAVA.NIO.CHARBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.CHARBUFFER; }
public virtual SubmoduleStatusType METHOD_NAME() { return type; }
public virtual DescribeGameServerGroupResponse METHOD_NAME(DescribeGameServerGroupRequest VAR_DESCRIBEGAMESERVERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(VAR_DESCRIBEGAMESERVERGROUPREQUEST, VAR_VAR); }
public java.util.regex.Pattern METHOD_NAME() { return _pattern; }
public virtual V METHOD_NAME(V VAR_V) { throw new System.NotSupportedException(); }
public StringBuilder METHOD_NAME(string VAR_STRING) { string VAR_STRING = stemmer.GetLastOnPath(VAR_STRING); if (VAR_STRING == LITERAL_NULL) return LITERAL_NULL; buffer.Length = LITERAL_INT; buffer.Append(VAR_STRING); Diff.Apply(buffer, VAR_STRING); if (buffer.Length > LITERAL_INT) return buffer; else return LITERAL_NULL; }
public RenameFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual char METHOD_NAME(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>, string VAR_STRING) { return Require(VAR_IDICTIONARY<STRING, STRING>, VAR_STRING)[LITERAL_INT]; }
public static string METHOD_NAME(ITree VAR_ITREE) { return METHOD_NAME(VAR_ITREE, (IList<string>)LITERAL_NULL); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public GetRepoWebhookLogListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual GetJobUnlockCodeResponse METHOD_NAME(GetJobUnlockCodeRequest VAR_GETJOBUNLOCKCODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJobUnlockCodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance; return Invoke<GetJobUnlockCodeResponse>(VAR_GETJOBUNLOCKCODEREQUEST, VAR_VAR); }
public RemoveTagsRequest(string VAR_STRING) { _resourceId = VAR_STRING; }
public virtual short METHOD_NAME(char VAR_CHAR) { try { byte[] VAR_BYTE[] = Encoding.GetEncoding(LITERAL_STRING).GetBytes(VAR_CHAR.ToString()); if (VAR_BYTE[].Length != LITERAL_INT) { return -LITERAL_INT; } int VAR_INT = (VAR_BYTE[][LITERAL_INT] & LITERAL_INT) - LITERAL_INT; int VAR_INT = (VAR_BYTE[][LITERAL_INT] & LITERAL_INT) - LITERAL_INT; return (short)(VAR_INT * LITERAL_INT + VAR_INT); } catch (ArgumentException e) { throw new Exception(e.ToString(), e); } }
public virtual NGit.BatchRefUpdate METHOD_NAME(ICollection<ReceiveCommand> VAR_ICOLLECTION<RECEIVECOMMAND>) { Sharpen.Collections.AddAll(commands, VAR_ICOLLECTION<RECEIVECOMMAND>); return this; }
public int METHOD_NAME(int VAR_INT) { return OrCreateLinkTable.METHOD_NAME(VAR_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { return c.METHOD_NAME(VAR_OBJECT); }
public virtual Query METHOD_NAME(IQueryNode VAR_IQUERYNODE) { AnyQueryNode VAR_ANYQUERYNODE = (AnyQueryNode)VAR_IQUERYNODE; BooleanQuery VAR_BOOLEANQUERY = new BooleanQuery(); IList<IQueryNode> VAR_ILIST<IQUERYNODE> = VAR_ANYQUERYNODE.GetChildren(); if (VAR_ILIST<IQUERYNODE> != LITERAL_NULL) { foreach (IQueryNode child in VAR_ILIST<IQUERYNODE>) { object VAR_OBJECT = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID); if (VAR_OBJECT != LITERAL_NULL) { Query VAR_QUERY = (Query)VAR_OBJECT; try { VAR_BOOLEANQUERY.Add(VAR_QUERY, Occur.SHOULD); } catch (BooleanQuery.TooManyClausesException ex) { throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSAGE), ex); } } } } VAR_BOOLEANQUERY.MinimumNumberShouldMatch = VAR_ANYQUERYNODE.MinimumMatchingElements; return VAR_BOOLEANQUERY; }
public virtual DescribeStreamProcessorResponse METHOD_NAME(DescribeStreamProcessorRequest VAR_DESCRIBESTREAMPROCESSORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(VAR_DESCRIBESTREAMPROCESSORREQUEST, VAR_VAR); }
public virtual DescribeDashboardPermissionsResponse METHOD_NAME(DescribeDashboardPermissionsRequest VAR_DESCRIBEDASHBOARDPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(VAR_DESCRIBEDASHBOARDPERMISSIONSREQUEST, VAR_VAR); }
public virtual Ref METHOD_NAME(Ref VAR_REF) { try { return RefDatabase.METHOD_NAME(VAR_REF); } catch (IOException) { return VAR_REF; } }
public override long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + LITERAL_INT * RamUsageEstimator.NUM_BYTES_INT32 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks); }
public virtual GetDomainSuggestionsResponse METHOD_NAME(GetDomainSuggestionsRequest VAR_GETDOMAINSUGGESTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(VAR_GETDOMAINSUGGESTIONSREQUEST, VAR_VAR); }
public virtual DescribeStackEventsResponse METHOD_NAME(DescribeStackEventsRequest VAR_DESCRIBESTACKEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(VAR_DESCRIBESTACKEVENTSREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE) { METHOD_NAME(VAR_INT, (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE); }
public virtual CreateResolverRuleResponse METHOD_NAME(CreateResolverRuleRequest VAR_CREATERESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(VAR_CREATERESOLVERRULEREQUEST, VAR_VAR); }
public SeriesIndexRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_index = VAR_RECORDINPUTSTREAM.ReadShort(); }
public GetStylesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_gridset_flag); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (GetType() != VAR_OBJECT.GetType()) { return false; } Toffs VAR_TOFFS = (Toffs)VAR_OBJECT; if (StartOffset != VAR_TOFFS.StartOffset) { return false; } if (EndOffset != VAR_TOFFS.EndOffset) { return false; } return true; }
public virtual CreateGatewayGroupResponse METHOD_NAME(CreateGatewayGroupRequest VAR_CREATEGATEWAYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(VAR_CREATEGATEWAYGROUPREQUEST, VAR_VAR); }
public virtual CreateParticipantConnectionResponse METHOD_NAME(CreateParticipantConnectionRequest VAR_CREATEPARTICIPANTCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(VAR_CREATEPARTICIPANTCONNECTIONREQUEST, VAR_VAR); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT); }
public virtual RegisterWorkspaceDirectoryResponse METHOD_NAME(RegisterWorkspaceDirectoryRequest VAR_REGISTERWORKSPACEDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(VAR_REGISTERWORKSPACEDIRECTORYREQUEST, VAR_VAR); }
public virtual NGit.Api.RevertCommand METHOD_NAME(Ref VAR_REF) { CheckCallable(); commits.AddItem(VAR_REF); return this; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); System.Text.RegularExpressions.Match VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH = COMPLEX_NUMBER_PATTERN.Match(VAR_STRING); bool VAR_BOOL = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Success && VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[LITERAL_INT].Length > LITERAL_INT; String VAR_STRING = LITERAL_STRING; if (VAR_BOOL == true) { String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[LITERAL_INT].Value; bool VAR_BOOL = VAR_STRING.Equals(LITERAL_STRING) || VAR_STRING.Equals(LITERAL_STRING); if (VAR_STRING.Length == LITERAL_INT) { return new StringEval(Convert.ToString(LITERAL_INT)); } if (VAR_BOOL) { String VAR_STRING = LITERAL_STRING; String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[(GROUP3_IMAGINARY_SIGN)].Value; if (VAR_STRING.Length != LITERAL_INT && !(VAR_STRING.Equals(LITERAL_STRING))) { VAR_STRING = VAR_STRING; } String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE)].Value; if (VAR_STRING.Length != LITERAL_INT) { VAR_STRING = VAR_STRING + VAR_STRING; } else { VAR_STRING = VAR_STRING + LITERAL_STRING; } } } else { return ErrorEval.NUM_ERROR; } return new StringEval(VAR_STRING); }
public virtual E METHOD_NAME() { java.util.MapClass.Entry<E, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT> = backingMap.pollLastEntry(); return (VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT> == LITERAL_NULL) ? default(E) : VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT>.getKey(); }
public int METHOD_NAME() { int VAR_INT = ReadUByte(); int VAR_INT = ReadUByte(); return (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT); }
public ModifySnapshotAttributeRequest(string VAR_STRING, SnapshotAttributeName VAR_SNAPSHOTATTRIBUTENAME, OperationType VAR_OPERATIONTYPE) { _snapshotId = VAR_STRING; _attribute = VAR_SNAPSHOTATTRIBUTENAME; _operationType = VAR_OPERATIONTYPE; }
public virtual ListBonusPaymentsResponse METHOD_NAME(ListBonusPaymentsRequest VAR_LISTBONUSPAYMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(VAR_LISTBONUSPAYMENTSREQUEST, VAR_VAR); }
public override V METHOD_NAME(char[] VAR_CHAR[]) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return default(V); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { var VAR_VAR = (CommonGramsFilter)base.METHOD_NAME(VAR_TOKENSTREAM); return new CommonGramsQueryFilter(VAR_VAR); }
public virtual string METHOD_NAME() { return path; }
public virtual InitiateMultipartUploadResponse METHOD_NAME(InitiateMultipartUploadRequest VAR_INITIATEMULTIPARTUPLOADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(VAR_INITIATEMULTIPARTUPLOADREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, int VAR_INT) { insert0(VAR_INT, System.Convert.ToString(VAR_INT)); return this; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_INT[][VAR_INT++] = (int)(((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT); } } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ElisionFilter(VAR_TOKENSTREAM, articles); }
public bool METHOD_NAME(Row VAR_ROW, int[] VAR_INT[]) { int VAR_INT = LITERAL_INT; foreach (Cell c in VAR_ROW.cells.Values) { VAR_INT += c.cnt; if (c.@ref >= LITERAL_INT) { if (VAR_INT[][c.@ref] == LITERAL_INT) { c.@ref = -LITERAL_INT; } } } int VAR_INT = VAR_INT / LITERAL_INT; bool VAR_BOOL = false; foreach (Cell c in VAR_ROW.cells.Values) { if (c.cnt < VAR_INT && c.cmd >= LITERAL_INT) { c.cnt = LITERAL_INT; c.cmd = -LITERAL_INT; } if (c.cmd >= LITERAL_INT || c.@ref >= LITERAL_INT) { VAR_BOOL |= true; } } return !VAR_BOOL; }
public Token METHOD_NAME(int VAR_INT) { Token VAR_TOKEN = Token; for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_TOKEN.Next != LITERAL_NULL) VAR_TOKEN = VAR_TOKEN.Next; else VAR_TOKEN = VAR_TOKEN.Next = TokenSource.GetNextToken(); } return VAR_TOKEN; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Range.METHOD_NAME()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_options)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(_field3notUsed)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); Ptg[] VAR_PTG[] = _formula.Tokens; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { Ptg VAR_PTG = VAR_PTG[][i]; VAR_STRINGBUILDER.Append(VAR_PTG.METHOD_NAME()).Append(VAR_PTG.RVAType).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetFolderResponse METHOD_NAME(GetFolderRequest VAR_GETFOLDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFolderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(VAR_GETFOLDERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { throw new System.NotSupportedException(); }
public PositiveScoresOnlyCollector(ICollector VAR_ICOLLECTOR) { this.VAR_ICOLLECTOR = VAR_ICOLLECTOR; }
public CreateRepoBuildRuleRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public BaseRef(RefEval VAR_REFEVAL) { _refEval = VAR_REFEVAL; _areaEval = LITERAL_NULL; _firstRowIndex = VAR_REFEVAL.Row; _firstColumnIndex = VAR_REFEVAL.Column; _height = LITERAL_INT; _width = LITERAL_INT; }
public DrawingManager2(EscherDggRecord VAR_ESCHERDGGRECORD) { this.VAR_ESCHERDGGRECORD = VAR_ESCHERDGGRECORD; }
public override void METHOD_NAME() { if (!First) { METHOD_NAME(raw); } }
public java.nio.charset.CharsetDecoder METHOD_NAME() { status = INIT; implReset(); return this; }
public BufferedReader(java.io.Reader VAR_JAVA.IO.READER, int VAR_INT) : base(@in) { if (VAR_INT <= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_JAVA.IO.READER = VAR_JAVA.IO.READER; buf = new char[VAR_INT]; }
public virtual DescribeCodeRepositoryResponse METHOD_NAME(DescribeCodeRepositoryRequest VAR_DESCRIBECODEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(VAR_DESCRIBECODEREPOSITORYREQUEST, VAR_VAR); }
public virtual CreateDBSubnetGroupResponse METHOD_NAME(CreateDBSubnetGroupRequest VAR_CREATEDBSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(VAR_CREATEDBSUBNETGROUPREQUEST, VAR_VAR); }
public virtual NGit.Api.RenameBranchCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual NGit.Api.DeleteBranchCommand METHOD_NAME(bool VAR_BOOL) { CheckCallable(); this.VAR_BOOL = VAR_BOOL; return this; }
public virtual StopCompilationJobResponse METHOD_NAME(StopCompilationJobRequest VAR_STOPCOMPILATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(VAR_STOPCOMPILATIONJOBREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { lock (this) { setSecondaryProgress(mSecondaryProgress + VAR_INT); } }
public override int[] METHOD_NAME() { return bytesStart = LITERAL_NULL; }
public string METHOD_NAME() { return path; }
public GetUserSourceAccountRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual CreateExportJobResponse METHOD_NAME(CreateExportJobRequest VAR_CREATEEXPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(VAR_CREATEEXPORTJOBREQUEST, VAR_VAR); }
public virtual CreateDedicatedIpPoolResponse METHOD_NAME(CreateDedicatedIpPoolRequest VAR_CREATEDEDICATEDIPPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(VAR_CREATEDEDICATEDIPPOOLREQUEST, VAR_VAR); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (VAR_OBJECT == LITERAL_NULL) return false; if (VAR_OBJECT is HSSFCellStyle) { HSSFCellStyle VAR_HSSFCELLSTYLE = (HSSFCellStyle)VAR_OBJECT; if (_format == LITERAL_NULL) { if (VAR_HSSFCELLSTYLE._format != LITERAL_NULL) return false; } else if (!_format.METHOD_NAME(VAR_HSSFCELLSTYLE._format)) return false; if (index != VAR_HSSFCELLSTYLE.index) return false; return true; } return false; }
public virtual ReleaseHostsResponse METHOD_NAME(ReleaseHostsRequest VAR_RELEASEHOSTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(VAR_RELEASEHOSTSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT is java.util.Set<E>) { java.util.Set<E> VAR_JAVA.UTIL.SET<E> = (java.util.Set<E>)VAR_OBJECT; try { return size() == VAR_JAVA.UTIL.SET<E>.size() && containsAll(VAR_JAVA.UTIL.SET<E>); } catch (System.ArgumentNullException) { return false; } catch (System.InvalidCastException) { return false; } } return false; }
public virtual void METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { if (VAR_STRING == LITERAL_NULL && !VAR_BOOL) { DisableRefLog(); } else { if (VAR_STRING == LITERAL_NULL && VAR_BOOL) { refLogMessage = string.Empty; refLogIncludeResult = true; } else { refLogMessage = VAR_STRING; refLogIncludeResult = VAR_BOOL; } } }
public StreamIDRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { idstm = VAR_RECORDINPUTSTREAM.ReadShort(); }
public RecognizeCarRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public sealed override java.nio.ByteOrder METHOD_NAME() { return java.nio.ByteOrder.nativeOrder(); }
public virtual int METHOD_NAME() { return aheadCount; }
public virtual bool METHOD_NAME() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse METHOD_NAME(GetCloudFrontOriginAccessIdentityConfigRequest VAR_GETCLOUDFRONTORIGINACCESSIDENTITYCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(VAR_GETCLOUDFRONTORIGINACCESSIDENTITYCONFIGREQUEST, VAR_VAR); }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return token == VAR_INT; }
public virtual DeleteTransitGatewayResponse METHOD_NAME(DeleteTransitGatewayRequest VAR_DELETETRANSITGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(VAR_DELETETRANSITGATEWAYREQUEST, VAR_VAR); }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_DOUBLE[].Length < VAR_INT) { double[] VAR_DOUBLE[] = new double[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_DOUBLE)]; Array.Copy(VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[].Length); return VAR_DOUBLE[]; } else { return VAR_DOUBLE[]; } }
public CreateTransactionRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate METHOD_NAME(PersonIdent VAR_PERSONIDENT) { refLogIdent = VAR_PERSONIDENT; return this; }
public virtual GetLaunchTemplateDataResponse METHOD_NAME(GetLaunchTemplateDataRequest VAR_GETLAUNCHTEMPLATEDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(VAR_GETLAUNCHTEMPLATEDATAREQUEST, VAR_VAR); }
public ParseInfo(ProfilingATNSimulator VAR_PROFILINGATNSIMULATOR) { this.VAR_PROFILINGATNSIMULATOR = VAR_PROFILINGATNSIMULATOR; }
public SimpleQQParser(string[] VAR_STRING[], string VAR_STRING) { this.VAR_STRING[] = VAR_STRING[]; this.VAR_STRING = VAR_STRING; }
public virtual PromoteReadReplicaDBClusterResponse METHOD_NAME(PromoteReadReplicaDBClusterRequest VAR_PROMOTEREADREPLICADBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PromoteReadReplicaDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PromoteReadReplicaDBClusterResponseUnmarshaller.Instance; return Invoke<PromoteReadReplicaDBClusterResponse>(VAR_PROMOTEREADREPLICADBCLUSTERREQUEST, VAR_VAR); }
public virtual DescribeCapacityReservationsResponse METHOD_NAME(DescribeCapacityReservationsRequest VAR_DESCRIBECAPACITYRESERVATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityReservationsResponse>(VAR_DESCRIBECAPACITYRESERVATIONSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + reader + LITERAL_STRING + executor + LITERAL_STRING; }
public override bool METHOD_NAME() { return false; }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(main + LITERAL_INT); VAR_ILITTLEENDIANOUTPUT.WriteShort(subFrom); VAR_ILITTLEENDIANOUTPUT.WriteShort(subTo); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (bitsPerValue > LITERAL_INT) { throw new System.NotSupportedException(LITERAL_STRING + bitsPerValue + LITERAL_STRING); } for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = ReadInt64(VAR_BYTE[], VAR_INT); VAR_INT += LITERAL_INT; VAR_INT = METHOD_NAME(VAR_LONG, VAR_INT[], VAR_INT); } }
public virtual bool METHOD_NAME(int VAR_INT) { ATN VAR_ATN = Interpreter.atn; ParserRuleContext VAR_PARSERRULECONTEXT = _ctx; ATNState VAR_ATNSTATE = VAR_ATN.states[State]; IntervalSet VAR_INTERVALSET = VAR_ATN.NextTokens(VAR_ATNSTATE); if (VAR_INTERVALSET.Contains(VAR_INT)) { return true; } if (!VAR_INTERVALSET.Contains(TokenConstants.EPSILON)) { return false; } while (VAR_PARSERRULECONTEXT != LITERAL_NULL && VAR_PARSERRULECONTEXT.invokingState >= LITERAL_INT && VAR_INTERVALSET.Contains(TokenConstants.EPSILON)) { ATNState VAR_ATNSTATE = VAR_ATN.states[VAR_PARSERRULECONTEXT.invokingState]; RuleTransition VAR_RULETRANSITION = (RuleTransition)VAR_ATNSTATE.Transition(LITERAL_INT); VAR_INTERVALSET = VAR_ATN.NextTokens(VAR_RULETRANSITION.followState); if (VAR_INTERVALSET.Contains(VAR_INT)) { return true; } VAR_PARSERRULECONTEXT = (ParserRuleContext)VAR_PARSERRULECONTEXT.Parent; } if (VAR_INTERVALSET.Contains(TokenConstants.EPSILON) && VAR_INT == TokenConstants.EOF) { return true; } return false; }
public virtual UpdateStreamResponse METHOD_NAME(UpdateStreamRequest VAR_UPDATESTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(VAR_UPDATESTREAMREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { try { OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); return ErrorEval.NA; } catch (EvaluationException e) { int VAR_INT = TranslateErrorCodeToErrorTypeValue(e.GetErrorEval().ErrorCode); return new NumberEval(VAR_INT); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_index).Append(LITERAL_STRING).Append(_name); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListAssignmentsForHITResponse METHOD_NAME(ListAssignmentsForHITRequest VAR_LISTASSIGNMENTSFORHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(VAR_LISTASSIGNMENTSFORHITREQUEST, VAR_VAR); }
public virtual DeleteAccessControlRuleResponse METHOD_NAME(DeleteAccessControlRuleRequest VAR_DELETEACCESSCONTROLRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(VAR_DELETEACCESSCONTROLRULEREQUEST, VAR_VAR); }
public FST.Arc<long?> METHOD_NAME(FST.Arc<long?> VAR_FST.ARC<LONG?>) { return fst.METHOD_NAME(VAR_FST.ARC<LONG?>); }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_INT[][VAR_INT++] = (int)(((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT); } } }
public override long METHOD_NAME(long VAR_LONG) { if (VAR_LONG < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_LONG); } lock (@lock) { checkNotClosed(); if (VAR_LONG == LITERAL_INT) { return LITERAL_INT; } long VAR_LONG; int VAR_INT = buf.Length - pos; if (VAR_INT > LITERAL_INT) { long VAR_LONG = VAR_LONG - VAR_INT; if (VAR_LONG <= LITERAL_INT) { pos += (int)(VAR_LONG); return VAR_LONG; } pos += VAR_INT; VAR_LONG = @in.METHOD_NAME(VAR_LONG); } else { VAR_LONG = @in.METHOD_NAME(VAR_LONG); } return VAR_LONG + VAR_INT; } }
public virtual IDictionary<string, Ref> METHOD_NAME() { return advertisedRefs; }
public virtual UpdateApiKeyResponse METHOD_NAME(UpdateApiKeyRequest VAR_UPDATEAPIKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(VAR_UPDATEAPIKEYREQUEST, VAR_VAR); }
public override ObjectStream METHOD_NAME() { WindowCursor VAR_WINDOWCURSOR = new WindowCursor(db); InputStream VAR_INPUTSTREAM; try { VAR_INPUTSTREAM = new PackInputStream(pack, objectOffset + headerLength, VAR_WINDOWCURSOR); } catch (IOException) { return VAR_WINDOWCURSOR.Open(GetObjectId(), type).METHOD_NAME(); } VAR_INPUTSTREAM = new BufferedInputStream(new InflaterInputStream(VAR_INPUTSTREAM, VAR_WINDOWCURSOR.Inflater(), LITERAL_INT), LITERAL_INT); return new ObjectStream.Filter(type, size, VAR_INPUTSTREAM); }
public ArrayList() { array = libcore.util.EmptyArray.OBJECT; }
public virtual UpdateDetectorVersionResponse METHOD_NAME(UpdateDetectorVersionRequest VAR_UPDATEDETECTORVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(VAR_UPDATEDETECTORVERSIONREQUEST, VAR_VAR); }
public void METHOD_NAME() { METHOD_NAME(Double.MaxValue); }
public RevFlagSet(ICollection<RevFlag> VAR_ICOLLECTION<REVFLAG>) : this() { Sharpen.Collections.AddAll(this, VAR_ICOLLECTION<REVFLAG>); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public sealed override long METHOD_NAME() { int VAR_INT = _position + libcore.io.SizeOf.LONG; if (VAR_INT > _limit) { throw new java.nio.BufferUnderflowException(); } long VAR_LONG = libcore.io.Memory.peekLong(backingArray, offset + _position, _order); _position = VAR_INT; return VAR_LONG; }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, long VAR_LONG) { insert0(VAR_INT, System.Convert.ToString(VAR_LONG)); return this; }
public TurkishLowerCaseFilter(TokenStream VAR_TOKENSTREAM) : base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch METHOD_NAME(IParseTree VAR_IPARSETREE, ParseTreePattern VAR_PARSETREEPATTERN) { MultiMap<string, IParseTree> VAR_MULTIMAP<STRING, IPARSETREE> = new MultiMap<string, IParseTree>(); IParseTree VAR_IPARSETREE = MatchImpl(VAR_IPARSETREE, VAR_PARSETREEPATTERN.PatternTree, VAR_MULTIMAP<STRING, IPARSETREE>); return new ParseTreeMatch(VAR_IPARSETREE, VAR_PARSETREEPATTERN, VAR_MULTIMAP<STRING, IPARSETREE>, VAR_IPARSETREE); }
public virtual void METHOD_NAME(WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO) { foreach (WeightedPhraseInfo existWpi in PhraseList) { if (existWpi.IsOffsetOverlap(VAR_WEIGHTEDPHRASEINFO)) { existWpi.TermsInfos.AddRange(VAR_WEIGHTEDPHRASEINFO.TermsInfos); return; } } PhraseList.Add(VAR_WEIGHTEDPHRASEINFO); }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY) { return new StrategySimpleTwoWayInCore.InCoreMerger(VAR_REPOSITORY); }
public override float METHOD_NAME(int VAR_INT, string VAR_STRING, int VAR_INT, float VAR_FLOAT) { return VAR_INT > LITERAL_INT ? (VAR_FLOAT / VAR_INT) : LITERAL_INT; }
public override ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE) { return Trees.FindAllRuleNodes(VAR_IPARSETREE, ruleIndex); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_condition_type).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(string.Format(LITERAL_STRING, Options)).Append(LITERAL_STRING); if (ContainsFontFormattingBlock) { VAR_STRINGBUILDER.Append(_fontFormatting.METHOD_NAME()).Append(LITERAL_STRING); } if (ContainsBorderFormattingBlock) { VAR_STRINGBUILDER.Append(_borderFormatting.METHOD_NAME()).Append(LITERAL_STRING); } if (ContainsPatternFormattingBlock) { VAR_STRINGBUILDER.Append(_patternFormatting.METHOD_NAME()).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Arrays.METHOD_NAME(field_17_formula1.Tokens)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Arrays.METHOD_NAME(field_18_formula2.Tokens)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeServiceUpdatesResponse METHOD_NAME(DescribeServiceUpdatesRequest VAR_DESCRIBESERVICEUPDATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(VAR_DESCRIBESERVICEUPDATESREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT) { String VAR_STRING = GetNameAt(VAR_INT).NameName; return VAR_STRING; }
public virtual DescribeLocationsResponse METHOD_NAME() { return METHOD_NAME(new DescribeLocationsRequest()); }
public override string METHOD_NAME() { return LITERAL_STRING + GetValueString() + LITERAL_STRING + LITERAL_STRING + GetChild().METHOD_NAME() + LITERAL_STRING; }
public virtual DirCacheEntry METHOD_NAME() { return currentSubtree == LITERAL_NULL ? currentEntry : LITERAL_NULL; }
public virtual java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_INT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_INT[][i]); } } return this; }
public virtual void METHOD_NAME() { int VAR_INT = _size; if (VAR_INT == array.Length) { return; } if (VAR_INT == LITERAL_INT) { array = libcore.util.EmptyArray.OBJECT; } else { object[] VAR_OBJECT[] = new object[VAR_INT]; System.Array.Copy(array, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, VAR_INT); array = VAR_OBJECT[]; } modCount++; }
public virtual DescribeLocalGatewayVirtualInterfacesResponse METHOD_NAME(DescribeLocalGatewayVirtualInterfacesRequest VAR_DESCRIBELOCALGATEWAYVIRTUALINTERFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(VAR_DESCRIBELOCALGATEWAYVIRTUALINTERFACESREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new RussianLightStemFilter(VAR_TOKENSTREAM); }
public int[] METHOD_NAME(int[] VAR_INT[]) { int[] VAR_INT[]; if (VAR_INT[].Length == _limit) { Array.Copy(_array, LITERAL_INT, VAR_INT[], LITERAL_INT, _limit); VAR_INT[] = VAR_INT[]; } else { VAR_INT[] = METHOD_NAME(); } return VAR_INT[]; }
public BasicSessionCredentials(string VAR_STRING, string VAR_STRING, string VAR_STRING, long VAR_LONG = LITERAL_INT) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } if (VAR_STRING == LITERAL_NULL) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; this.VAR_LONG = VAR_LONG; sessionStartedTimeInMilliSeconds = DateTime.UtcNow.currentTimeMillis(); }
public sealed override java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, VAR_SHORT[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public virtual ActivateEventSourceResponse METHOD_NAME(ActivateEventSourceRequest VAR_ACTIVATEEVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ActivateEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance; return Invoke<ActivateEventSourceResponse>(VAR_ACTIVATEEVENTSOURCEREQUEST, VAR_VAR); }
public virtual DescribeReceiptRuleSetResponse METHOD_NAME(DescribeReceiptRuleSetRequest VAR_DESCRIBERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(VAR_DESCRIBERECEIPTRULESETREQUEST, VAR_VAR); }
public Filter(string VAR_STRING) { _name = VAR_STRING; }
public override java.nio.DoubleBuffer METHOD_NAME(double VAR_DOUBLE) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse METHOD_NAME(CreateTrafficPolicyInstanceRequest VAR_CREATETRAFFICPOLICYINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(VAR_CREATETRAFFICPOLICYINSTANCEREQUEST, VAR_VAR); }
public JapaneseIterationMarkCharFilter(TextReader VAR_TEXTREADER, bool VAR_BOOL, bool VAR_BOOL) : base(input) { this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; buffer.Reset(VAR_TEXTREADER); }
public void METHOD_NAME(long VAR_LONG) { WriteInt((int)(VAR_LONG >> LITERAL_INT)); WriteInt((int)(VAR_LONG >> LITERAL_INT)); }
public FileResolver() { exports = new ConcurrentHashMap<string, Repository>(); exportBase = new CopyOnWriteArrayList<FilePath>(); }
public ValueEval METHOD_NAME(Ref3DPtg VAR_REF3DPTG) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = CreateExternSheetRefEvaluator(VAR_REF3DPTG.ExternSheetIndex); return new LazyRefEval(VAR_REF3DPTG.Row, VAR_REF3DPTG.Column, VAR_SHEETRANGEEVALUATOR); }
public virtual DeleteDatasetResponse METHOD_NAME(DeleteDatasetRequest VAR_DELETEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(VAR_DELETEDATASETREQUEST, VAR_VAR); }
public virtual StartRelationalDatabaseResponse METHOD_NAME(StartRelationalDatabaseRequest VAR_STARTRELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(VAR_STARTRELATIONALDATABASEREQUEST, VAR_VAR); }
public virtual DescribeReservedCacheNodesOfferingsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE, int VAR_INT) { double VAR_DOUBLE = -VAR_DOUBLE * (VAR_DOUBLE * Math.Pow(LITERAL_INT + VAR_DOUBLE, VAR_INT) + VAR_DOUBLE) / ((LITERAL_INT + VAR_DOUBLE * VAR_INT) * (Math.Pow(LITERAL_INT + VAR_DOUBLE, VAR_INT) - LITERAL_INT)); return VAR_DOUBLE; }
public virtual DescribeDocumentVersionsResponse METHOD_NAME(DescribeDocumentVersionsRequest VAR_DESCRIBEDOCUMENTVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(VAR_DESCRIBEDOCUMENTVERSIONSREQUEST, VAR_VAR); }
public virtual ListPublishingDestinationsResponse METHOD_NAME(ListPublishingDestinationsRequest VAR_LISTPUBLISHINGDESTINATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(VAR_LISTPUBLISHINGDESTINATIONSREQUEST, VAR_VAR); }
public DeleteAccountAliasRequest(string VAR_STRING) { _accountAlias = VAR_STRING; }
public static float[] METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT + VAR_FLOAT[].Length); }
public override string METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is IList)) { return outputs.METHOD_NAME((T)VAR_OBJECT); } else { IList VAR_ILIST = (IList)VAR_OBJECT; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR); for (int i = LITERAL_INT; i < VAR_ILIST.Count; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(outputs.METHOD_NAME((T)VAR_ILIST[i])); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.ToString(); } }
public void METHOD_NAME(ICell VAR_ICELL) { _bookEvaluator.METHOD_NAME(new HSSFEvaluationCell(VAR_ICELL)); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, int VAR_INT, string VAR_STRING) { replace0(VAR_INT, VAR_INT, VAR_STRING); return this; }
public virtual SetIdentityPoolConfigurationResponse METHOD_NAME(SetIdentityPoolConfigurationRequest VAR_SETIDENTITYPOOLCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(VAR_SETIDENTITYPOOLCONFIGURATIONREQUEST, VAR_VAR); }
public static double METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT) { double VAR_DOUBLE = double.NaN; VAR_INT--; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length > VAR_INT && VAR_INT >= LITERAL_INT) { Array.Sort(VAR_DOUBLE[]); VAR_DOUBLE = VAR_DOUBLE[][VAR_INT]; } return VAR_DOUBLE; }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(child.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = LITERAL_INT; for (int i = VAR_INT; i < VAR_INT; i++) { VAR_INT += _ptgs[i].Size; } return VAR_INT; }
public virtual void METHOD_NAME(bool VAR_BOOL) { if (this.VAR_BOOL && !VAR_BOOL) { throw new InvalidOperationException(LITERAL_STRING); } this.VAR_BOOL = VAR_BOOL; }
public void METHOD_NAME(FormulaCellCacheEntry VAR_FORMULACELLCACHEENTRY) { if (!_consumingCells.Remove(VAR_FORMULACELLCACHEENTRY)) { throw new InvalidOperationException(LITERAL_STRING); } }
public override java.util.List<E> METHOD_NAME(int VAR_INT, int VAR_INT) { lock (mutex) { return new java.util.Collections.SynchronizedRandomAccessList<E>(list.METHOD_NAME(VAR_INT, VAR_INT), mutex); } }
public virtual FileHeader METHOD_NAME() { return file; }
public virtual AttachLoadBalancersResponse METHOD_NAME(AttachLoadBalancersRequest VAR_ATTACHLOADBALANCERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(VAR_ATTACHLOADBALANCERSREQUEST, VAR_VAR); }
public InitiateJobRequest(string VAR_STRING, string VAR_STRING, JobParameters VAR_JOBPARAMETERS) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _jobParameters = VAR_JOBPARAMETERS; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public ReplaceableAttribute(string VAR_STRING, string VAR_STRING, bool VAR_BOOL) { _name = VAR_STRING; _value = VAR_STRING; _replace = VAR_BOOL; }
public void METHOD_NAME(IIndexableField VAR_IINDEXABLEFIELD) { fields.METHOD_NAME(VAR_IINDEXABLEFIELD); }
public virtual DeleteStackSetResponse METHOD_NAME(DeleteStackSetRequest VAR_DELETESTACKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(VAR_DELETESTACKSETREQUEST, VAR_VAR); }
public GetRepoBuildRuleListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public SparseArray(int VAR_INT) { VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(VAR_INT); mKeys = new int[VAR_INT]; mValues = new object[VAR_INT]; mSize = LITERAL_INT; }
public InvokeServiceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public ListAlbumPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public bool METHOD_NAME() { return link != list.voidLink; }
public virtual DeleteHsmConfigurationResponse METHOD_NAME(DeleteHsmConfigurationRequest VAR_DELETEHSMCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(VAR_DELETEHSMCONFIGURATIONREQUEST, VAR_VAR); }
public CreateLoadBalancerRequest(string VAR_STRING) { _loadBalancerName = VAR_STRING; }
public string METHOD_NAME() { return decode(userInfo); }
public virtual TagAttendeeResponse METHOD_NAME(TagAttendeeRequest VAR_TAGATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(VAR_TAGATTENDEEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return name; }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public virtual bool METHOD_NAME(int VAR_INT, int VAR_INT) { return false; }
public virtual DescribeDBProxiesResponse METHOD_NAME(DescribeDBProxiesRequest VAR_DESCRIBEDBPROXIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(VAR_DESCRIBEDBPROXIESREQUEST, VAR_VAR); }
public virtual GetVoiceConnectorProxyResponse METHOD_NAME(GetVoiceConnectorProxyRequest VAR_GETVOICECONNECTORPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(VAR_GETVOICECONNECTORPROXYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(Config VAR_CONFIG) { SetPackedGitOpenFiles(VAR_CONFIG.GetInt(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, GetPackedGitOpenFiles())); SetPackedGitLimit(VAR_CONFIG.GetLong(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, GetPackedGitLimit())); SetPackedGitWindowSize(VAR_CONFIG.GetInt(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, GetPackedGitWindowSize())); SetPackedGitMMAP(VAR_CONFIG.GetBoolean(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, IsPackedGitMMAP())); SetDeltaBaseCacheLimit(VAR_CONFIG.GetInt(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, GetDeltaBaseCacheLimit())); long VAR_LONG = Runtime.GetRuntime().MaxMemory(); long VAR_LONG = VAR_CONFIG.GetLong(LITERAL_STRING, LITERAL_NULL, LITERAL_STRING, GetStreamFileThreshold()); VAR_LONG = Math.Min(VAR_LONG, VAR_LONG / LITERAL_INT); VAR_LONG = Math.Min(VAR_LONG, int.MaxValue); SetStreamFileThreshold((int)VAR_LONG); }
public static DateTime METHOD_NAME(double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, false); }
public virtual StartPersonTrackingResponse METHOD_NAME(StartPersonTrackingRequest VAR_STARTPERSONTRACKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(VAR_STARTPERSONTRACKINGREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public virtual GetRouteResponse METHOD_NAME(GetRouteRequest VAR_GETROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(VAR_GETROUTEREQUEST, VAR_VAR); }
public virtual DeleteClusterResponse METHOD_NAME(DeleteClusterRequest VAR_DELETECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(VAR_DELETECLUSTERREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(AddMenuCount)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(DelMenuCount)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public FileBasedConfig(Config VAR_CONFIG, FilePath VAR_FILEPATH, FS VAR_FS) : base(@base) { configFile = VAR_FILEPATH; this.VAR_FS = VAR_FS; this.snapshot = FileSnapshot.DIRTY; this.hash = ObjectId.ZeroId; }
public override int METHOD_NAME(int VAR_INT) { if (VAR_INT < text.BeginIndex || VAR_INT > text.EndIndex) { throw new ArgumentException(LITERAL_STRING); } else if (LITERAL_INT == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); return Done; } else if (VAR_INT >= sentenceStarts[sentenceStarts.Length - LITERAL_INT]) { text.SetIndex(text.EndIndex); currentSentence = sentenceStarts.Length - LITERAL_INT; return Done; } else { currentSentence = (sentenceStarts.Length - LITERAL_INT) / LITERAL_INT; MoveToSentenceAt(VAR_INT, LITERAL_INT, sentenceStarts.Length - LITERAL_INT); text.SetIndex(sentenceStarts[++currentSentence]); return Current; } }
public virtual UpdateParameterGroupResponse METHOD_NAME(UpdateParameterGroupRequest VAR_UPDATEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(VAR_UPDATEPARAMETERGROUPREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { SeriesChartGroupIndexRecord VAR_SERIESCHARTGROUPINDEXRECORD = new SeriesChartGroupIndexRecord(); VAR_SERIESCHARTGROUPINDEXRECORD.field_1_chartGroupIndex = field_1_chartGroupIndex; return VAR_SERIESCHARTGROUPINDEXRECORD; }
public static double METHOD_NAME(IShape VAR_ISHAPE, double VAR_DOUBLE, SpatialContext VAR_SPATIALCONTEXT) { if (VAR_DOUBLE < LITERAL_INT || VAR_DOUBLE > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_DOUBLE + LITERAL_STRING, LITERAL_STRING); } if (VAR_DOUBLE == LITERAL_INT || VAR_ISHAPE is IPoint) { return LITERAL_INT; } IRectangle VAR_IRECTANGLE = VAR_ISHAPE.BoundingBox; IPoint VAR_IPOINT = VAR_IRECTANGLE.Center; double VAR_DOUBLE = (VAR_IPOINT.Y >= LITERAL_INT ? VAR_IRECTANGLE.MaxY : VAR_IRECTANGLE.MinY); double VAR_DOUBLE = VAR_SPATIALCONTEXT.DistCalc.Distance(VAR_IPOINT, VAR_IRECTANGLE.MaxX, VAR_DOUBLE); return VAR_DOUBLE * VAR_DOUBLE; }
public virtual int METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= count) { throw indexAndLength(VAR_INT); } return Sharpen.CharHelper.CodePointAt(value, VAR_INT, count); }
public void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; }
public ListVaultsRequest(string VAR_STRING) { _accountId = VAR_STRING; }
public SquashMessageFormatter() { dateFormatter = new GitDateFormatter(GitDateFormatter.Format.DEFAULT); }
public GetVideoCoverRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override int METHOD_NAME(object VAR_OBJECT) { int VAR_INT = _size; java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink.previous; if (VAR_OBJECT != LITERAL_NULL) { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { VAR_INT--; if (VAR_OBJECT.Equals(VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data)) { return VAR_INT; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } else { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { VAR_INT--; if ((object)VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data == LITERAL_NULL) { return VAR_INT; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } return -LITERAL_INT; }
public virtual DescribeSpotFleetRequestsResponse METHOD_NAME(DescribeSpotFleetRequestsRequest VAR_DESCRIBESPOTFLEETREQUESTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(VAR_DESCRIBESPOTFLEETREQUESTSREQUEST, VAR_VAR); }
public virtual IndexFacesResponse METHOD_NAME(IndexFacesRequest VAR_INDEXFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IndexFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(VAR_INDEXFACESREQUEST, VAR_VAR); }
public override BreakIterator METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case UScript.Japanese: return (BreakIterator)cjkBreakIterator.Clone(); case UScript.Myanmar: if (myanmarAsWords) { return (BreakIterator)defaultBreakIterator.Clone(); } else { return (BreakIterator)myanmarSyllableIterator.Clone(); } default: return (BreakIterator)defaultBreakIterator.Clone(); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(firstRow).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(lastRow).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(firstCol).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(lastCol).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(charCount).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(charType).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ReadablePath).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual int METHOD_NAME() { return packedGitOpenFiles; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static byte[] METHOD_NAME(String VAR_STRING) { return UTF16LE.GetBytes(VAR_STRING); }
public IList<string> METHOD_NAME(string VAR_STRING) { return METHOD_NAME(new FooterKey(VAR_STRING)); }
public override void METHOD_NAME() { base.METHOD_NAME(); Rescan(); }
public override float METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return byteBuffer.getFloat(VAR_INT * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse METHOD_NAME(DeleteDetectorRequest VAR_DELETEDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(VAR_DELETEDETECTORREQUEST, VAR_VAR); }
public override int[] METHOD_NAME() { Debug.Assert(bytesStart != LITERAL_NULL); return bytesStart = ArrayUtil.METHOD_NAME(bytesStart, bytesStart.Length + LITERAL_INT); }
public virtual ListExclusionsResponse METHOD_NAME(ListExclusionsRequest VAR_LISTEXCLUSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(VAR_LISTEXCLUSIONSREQUEST, VAR_VAR); }
public static SpatialStrategy METHOD_NAME(int VAR_INT) { SpatialStrategy VAR_SPATIALSTRATEGY; if (!spatialStrategyCache.TryGetValue(VAR_INT, out VAR_SPATIALSTRATEGY) || VAR_SPATIALSTRATEGY == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } return VAR_SPATIALSTRATEGY; }
public virtual RestoreDBClusterToPointInTimeResponse METHOD_NAME(RestoreDBClusterToPointInTimeRequest VAR_RESTOREDBCLUSTERTOPOINTINTIMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(VAR_RESTOREDBCLUSTERTOPOINTINTIMEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_categoryDataType); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_valuesDataType); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_numCategories); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_numValues); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_5_bubbleSeriesType); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_numBubbleValues); }
public virtual PostAgentProfileResponse METHOD_NAME(PostAgentProfileRequest VAR_POSTAGENTPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(VAR_POSTAGENTPROFILEREQUEST, VAR_VAR); }
public virtual ParseTreePattern METHOD_NAME(string VAR_STRING, int VAR_INT) { if (((ITokenStream)InputStream) != LITERAL_NULL) { ITokenSource VAR_ITOKENSOURCE = ((ITokenStream)InputStream).TokenSource; if (VAR_ITOKENSOURCE is Lexer) { Lexer VAR_LEXER = (Lexer)VAR_ITOKENSOURCE; return METHOD_NAME(VAR_STRING, VAR_INT, VAR_LEXER); } } throw new NotSupportedException(LITERAL_STRING); }
public virtual BacktrackDBClusterResponse METHOD_NAME(BacktrackDBClusterRequest VAR_BACKTRACKDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BacktrackDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance; return Invoke<BacktrackDBClusterResponse>(VAR_BACKTRACKDBCLUSTERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return strategyName; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { FormatHexByte(VAR_BYTE[], VAR_INT + LITERAL_INT, w1); FormatHexByte(VAR_BYTE[], VAR_INT + LITERAL_INT, w2); FormatHexByte(VAR_BYTE[], VAR_INT + LITERAL_INT, w3); FormatHexByte(VAR_BYTE[], VAR_INT + LITERAL_INT, w4); FormatHexByte(VAR_BYTE[], VAR_INT + LITERAL_INT, w5); }
public static IntList METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { IntList VAR_INTLIST = new IntList((VAR_INT - VAR_INT) / LITERAL_INT); VAR_INTLIST.FillTo(LITERAL_INT, int.MinValue); for (; VAR_INT < VAR_INT; VAR_INT = NextLF(VAR_BYTE[], VAR_INT)) { VAR_INTLIST.Add(VAR_INT); } VAR_INTLIST.Add(VAR_INT); return VAR_INTLIST; }
public virtual ICollection<ObjectId> METHOD_NAME() { return Sharpen.Collections.EmptySet<ObjectId>(); }
public override long METHOD_NAME() { return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms != LITERAL_NULL) ? simpleTextTerms.METHOD_NAME() : LITERAL_INT); }
public String METHOD_NAME(String VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING).Append(LITERAL_STRING).Append(RecordName).Append(LITERAL_STRING); for (IEnumerator iterator = EscherRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_STRINGBUILDER.Append(VAR_ESCHERRECORD.METHOD_NAME(VAR_STRING + LITERAL_STRING)); } VAR_STRINGBUILDER.Append(VAR_STRING).Append(LITERAL_STRING).Append(RecordName).Append(LITERAL_STRING); return VAR_STRINGBUILDER.ToString(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GalicianMinimalStemFilter(VAR_TOKENSTREAM); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(treeId != LITERAL_NULL ? treeId.Name : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (ObjectId p in parentIds) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(p.Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(author != LITERAL_NULL ? author.METHOD_NAME() : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(committer != LITERAL_NULL ? committer.METHOD_NAME() : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (encoding != LITERAL_NULL && encoding != Constants.CHARSET) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(encoding.Name()); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(message != LITERAL_NULL ? message : string.Empty); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public IndicNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual CreateOptionGroupResponse METHOD_NAME(CreateOptionGroupRequest VAR_CREATEOPTIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(VAR_CREATEOPTIONGROUPREQUEST, VAR_VAR); }
public virtual AssociateMemberAccountResponse METHOD_NAME(AssociateMemberAccountRequest VAR_ASSOCIATEMEMBERACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberAccountResponse>(VAR_ASSOCIATEMEMBERACCOUNTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { this._enclosing.doRefreshProgress(this.mId, this.mProgress, this.mFromUser, true); this._enclosing.mRefreshProgressRunnable = this; }
public virtual SetTerminationProtectionResponse METHOD_NAME(SetTerminationProtectionRequest VAR_SETTERMINATIONPROTECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(VAR_SETTERMINATIONPROTECTIONREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(RecognitionException VAR_RECOGNITIONEXCEPTION) { int VAR_INT = VAR_RECOGNITIONEXCEPTION.OffendingToken.Line; int VAR_INT = VAR_RECOGNITIONEXCEPTION.OffendingToken.Column; return LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT; }
public override java.nio.CharBuffer METHOD_NAME() { java.nio.CharToByteBufferAdapter VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER = new java.nio.CharToByteBufferAdapter(byteBuffer.METHOD_NAME()); VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._mark = _mark; VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER.byteBuffer._order = byteBuffer._order; return VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER; }
public virtual StopSentimentDetectionJobResponse METHOD_NAME(StopSentimentDetectionJobRequest VAR_STOPSENTIMENTDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(VAR_STOPSENTIMENTDETECTIONJOBREQUEST, VAR_VAR); }
if (newObjectIds != LITERAL_NULL) { return newObjectIds; } return new ObjectIdSubclassMap<ObjectId>();
protected internal override void METHOD_NAME() { hash = Hash(new byte[LITERAL_INT]); base.METHOD_NAME(); }
public override void METHOD_NAME() { lock (@lock) { checkNotClosed(); if (_mark == -LITERAL_INT) { throw new System.IO.IOException(LITERAL_STRING); } pos = _mark; } }
public RefErrorPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_reserved = VAR_ILITTLEENDIANINPUT.ReadInt(); }
public virtual SuspendGameServerGroupResponse METHOD_NAME(SuspendGameServerGroupRequest VAR_SUSPENDGAMESERVERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendGameServerGroupResponse>(VAR_SUSPENDGAMESERVERGROUPREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); }
public GetRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual void METHOD_NAME(DateTime? VAR_DATETIME?) { if (VAR_DATETIME?.HasValue) { METHOD_NAME(DateTools.DateToString(VAR_DATETIME?.Value, DateTools.Resolution.SECOND)); } else { this.VAR_DATETIME? = LITERAL_NULL; } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GermanMinimalStemFilter(VAR_TOKENSTREAM); }
public override object[] METHOD_NAME() { return (object[])a.Clone(); }
public override void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); lock (@lock) { expand(VAR_INT); System.Array.Copy(VAR_CHAR[], VAR_INT, this.buf, this.count, VAR_INT); this.count += VAR_INT; } }
public static RevFilter METHOD_NAME(long VAR_LONG) { return new CommitTimeRevFilterAfter(VAR_LONG); }
public DeleteGroupPolicyRequest(string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _policyName = VAR_STRING; }
public virtual DeregisterTransitGatewayMulticastGroupMembersResponse METHOD_NAME(DeregisterTransitGatewayMulticastGroupMembersRequest VAR_DEREGISTERTRANSITGATEWAYMULTICASTGROUPMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(VAR_DEREGISTERTRANSITGATEWAYMULTICASTGROUPMEMBERSREQUEST, VAR_VAR); }
public virtual BatchDeleteScheduledActionResponse METHOD_NAME(BatchDeleteScheduledActionRequest VAR_BATCHDELETESCHEDULEDACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(VAR_BATCHDELETESCHEDULEDACTIONREQUEST, VAR_VAR); }
public virtual CreateAlgorithmResponse METHOD_NAME(CreateAlgorithmRequest VAR_CREATEALGORITHMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(VAR_CREATEALGORITHMREQUEST, VAR_VAR); }
public int METHOD_NAME() { CheckPosition(LITERAL_INT); return _buf[_ReadIndex++] & LITERAL_INT; }
public virtual void METHOD_NAME(int VAR_INT) { NB.EncodeInt32(info, infoOffset + P_SIZE, VAR_INT); }
public virtual DescribeScalingProcessTypesResponse METHOD_NAME() { return METHOD_NAME(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse METHOD_NAME(ListResourceRecordSetsRequest VAR_LISTRESOURCERECORDSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(VAR_LISTRESOURCERECORDSETSREQUEST, VAR_VAR); }
public override IToken METHOD_NAME(Parser VAR_PARSER) { InputMismatchException VAR_INPUTMISMATCHEXCEPTION = new InputMismatchException(VAR_PARSER); for (ParserRuleContext context = VAR_PARSER.Context; context != LITERAL_NULL; context = ((ParserRuleContext)context.Parent)) { context.exception = VAR_INPUTMISMATCHEXCEPTION; } throw new ParseCanceledException(VAR_INPUTMISMATCHEXCEPTION); }
public virtual SetTagsForResourceResponse METHOD_NAME(SetTagsForResourceRequest VAR_SETTAGSFORRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(VAR_SETTAGSFORRESOURCEREQUEST, VAR_VAR); }
public ModifyStrategyRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual DescribeVpcEndpointServicesResponse METHOD_NAME(DescribeVpcEndpointServicesRequest VAR_DESCRIBEVPCENDPOINTSERVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(VAR_DESCRIBEVPCENDPOINTSERVICESREQUEST, VAR_VAR); }
public virtual EnableLoggingResponse METHOD_NAME(EnableLoggingRequest VAR_ENABLELOGGINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(VAR_ENABLELOGGINGREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsValue(VAR_OBJECT); }
public SheetRangeIdentifier(String VAR_STRING, NameIdentifier VAR_NAMEIDENTIFIER, NameIdentifier VAR_NAMEIDENTIFIER) : base(bookName, firstSheetIdentifier) { _lastSheetIdentifier = VAR_NAMEIDENTIFIER; }
public DomainMetadataRequest(string VAR_STRING) { _domainName = VAR_STRING; }
public ParseException(Token VAR_TOKEN, int[][] VAR_INT[][], string[] VAR_STRING[]) : base(Initialize(currentToken, expectedTokenSequences, tokenImage)) { this.CurrentToken = VAR_TOKEN; this.ExpectedTokenSequences = VAR_INT[][]; this.TokenImage = VAR_STRING[]; }
public FetchPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public java.io.PrintWriter METHOD_NAME() { return _writer; }
public NGramTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { minGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE); maxGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual bool METHOD_NAME() { return dfConflict != LITERAL_NULL; }
public IndonesianStemFilter(TokenStream VAR_TOKENSTREAM, bool VAR_BOOL) : base(input) { this.VAR_BOOL = VAR_BOOL; termAtt = AddAttribute<ICharTermAttribute>(); keywordAtt = AddAttribute<IKeywordAttribute>(); }
public virtual CreateTrafficPolicyResponse METHOD_NAME(CreateTrafficPolicyRequest VAR_CREATETRAFFICPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(VAR_CREATETRAFFICPOLICYREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(fSD); VAR_ILITTLEENDIANOUTPUT.WriteInt(passwordVerifier); StringUtil.WriteUnicodeString(VAR_ILITTLEENDIANOUTPUT, title); VAR_ILITTLEENDIANOUTPUT.Write(securityDescriptor); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { double VAR_DOUBLE; if ((VAR_DOUBLE < LITERAL_INT && VAR_DOUBLE > LITERAL_INT) || (VAR_DOUBLE > LITERAL_INT && VAR_DOUBLE < LITERAL_INT) || (VAR_DOUBLE == LITERAL_INT && VAR_DOUBLE != LITERAL_INT)) { VAR_DOUBLE = double.NaN; } else { VAR_DOUBLE = (VAR_DOUBLE == LITERAL_INT || VAR_DOUBLE == LITERAL_INT) ? LITERAL_INT : Math.METHOD_NAME(VAR_DOUBLE / VAR_DOUBLE) * VAR_DOUBLE; } return VAR_DOUBLE; }
public ByteArrayDataOutput(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Reset(VAR_BYTE[], VAR_INT, VAR_INT); }
public static IList<ITree> METHOD_NAME(ITree VAR_ITREE) { IList<ITree> VAR_ILIST<ITREE> = new List<ITree>(); for (int i = LITERAL_INT; i < VAR_ITREE.ChildCount; i++) { VAR_ILIST<ITREE>.Add(VAR_ITREE.GetChild(i)); } return VAR_ILIST<ITREE>; }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public RefreshAllRecord(bool VAR_BOOL) : this(LITERAL_INT) { RefreshAll = (VAR_BOOL); }
public virtual DeleteNamedQueryResponse METHOD_NAME(DeleteNamedQueryRequest VAR_DELETENAMEDQUERYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(VAR_DELETENAMEDQUERYREQUEST, VAR_VAR); }
public GraphvizFormatter(ConnectionCosts VAR_CONNECTIONCOSTS) { this.VAR_CONNECTIONCOSTS = VAR_CONNECTIONCOSTS; this.bestPathMap = new Dictionary<string, string>(); sb.Append(FormatHeader()); sb.Append(LITERAL_STRING); sb.Append(LITERAL_STRING + BOS_LABEL + LITERAL_STRING); }
public CheckMultiagentRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual ListUserProfilesResponse METHOD_NAME(ListUserProfilesRequest VAR_LISTUSERPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(VAR_LISTUSERPROFILESREQUEST, VAR_VAR); }
public virtual CreateRelationalDatabaseFromSnapshotResponse METHOD_NAME(CreateRelationalDatabaseFromSnapshotRequest VAR_CREATERELATIONALDATABASEFROMSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(VAR_CREATERELATIONALDATABASEFROMSNAPSHOTREQUEST, VAR_VAR); }
public virtual StartTaskResponse METHOD_NAME(StartTaskRequest VAR_STARTTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(VAR_STARTTASKREQUEST, VAR_VAR); }
public virtual ICollection<string> METHOD_NAME() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream VAR_RECORDINPUTSTREAM) { data = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public Change(ChangeAction VAR_CHANGEACTION, ResourceRecordSet VAR_RESOURCERECORDSET) { _action = VAR_CHANGEACTION; _resourceRecordSet = VAR_RESOURCERECORDSET; }
public virtual DeleteImageResponse METHOD_NAME(DeleteImageRequest VAR_DELETEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(VAR_DELETEIMAGEREQUEST, VAR_VAR); }
public virtual CreateConfigurationSetResponse METHOD_NAME(CreateConfigurationSetRequest VAR_CREATECONFIGURATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(VAR_CREATECONFIGURATIONSETREQUEST, VAR_VAR); }
public virtual java.util.Iterator<E> METHOD_NAME() { object[] VAR_OBJECT[] = elements; return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { if (_recs.Count == LITERAL_INT) { return; } VAR_RECORDVISITOR.VisitRecord(_bofRec); for (int i = LITERAL_INT; i < _recs.Count; i++) { RecordBase VAR_RECORDBASE = _recs[i]; if (VAR_RECORDBASE is RecordAggregate) { ((RecordAggregate)VAR_RECORDBASE).METHOD_NAME(VAR_RECORDVISITOR); } else { VAR_RECORDVISITOR.VisitRecord((Record)VAR_RECORDBASE); } } VAR_RECORDVISITOR.VisitRecord(EOFRecord.instance); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(DataSize).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(reserved)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static BATBlock METHOD_NAME(POIFSBigBlockSize VAR_POIFSBIGBLOCKSIZE, bool VAR_BOOL) { BATBlock VAR_BATBLOCK = new BATBlock(VAR_POIFSBIGBLOCKSIZE); if (VAR_BOOL) { VAR_BATBLOCK.SetXBATChain(VAR_POIFSBIGBLOCKSIZE, POIFSConstants.END_OF_CHAIN); } return VAR_BATBLOCK; }
public virtual TagResourceResponse METHOD_NAME(TagResourceRequest VAR_TAGRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(VAR_TAGRESOURCEREQUEST, VAR_VAR); }
public virtual DeleteMailboxPermissionsResponse METHOD_NAME(DeleteMailboxPermissionsRequest VAR_DELETEMAILBOXPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(VAR_DELETEMAILBOXPERMISSIONSREQUEST, VAR_VAR); }
public virtual ListDatasetGroupsResponse METHOD_NAME(ListDatasetGroupsRequest VAR_LISTDATASETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(VAR_LISTDATASETGROUPSREQUEST, VAR_VAR); }
public virtual ResumeProcessesResponse METHOD_NAME(ResumeProcessesRequest VAR_RESUMEPROCESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(VAR_RESUMEPROCESSESREQUEST, VAR_VAR); }
public virtual GetPersonTrackingResponse METHOD_NAME(GetPersonTrackingRequest VAR_GETPERSONTRACKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(VAR_GETPERSONTRACKINGREQUEST, VAR_VAR); }
public String METHOD_NAME(String[] VAR_STRING[]) { if (space.IsSet(field_1_options)) { return VAR_STRING[][LITERAL_INT]; } else if (optiIf.IsSet(field_1_options)) { return METHOD_NAME() + LITERAL_STRING + VAR_STRING[][LITERAL_INT] + LITERAL_STRING; } else if (optiSkip.IsSet(field_1_options)) { return METHOD_NAME() + VAR_STRING[][LITERAL_INT]; } else { return METHOD_NAME() + LITERAL_STRING + VAR_STRING[][LITERAL_INT] + LITERAL_STRING; } }
public virtual T METHOD_NAME(T VAR_T, T VAR_T) { throw new System.NotSupportedException(); }
public override string METHOD_NAME() { return this.m_message.Key + LITERAL_STRING + GetLocalizedMessage(); }
public XPath(Parser VAR_PARSER, string VAR_STRING) { this.VAR_PARSER = VAR_PARSER; this.VAR_STRING = VAR_STRING; elements = Split(VAR_STRING); }
public CreateAccountAliasRequest(string VAR_STRING) { _accountAlias = VAR_STRING; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public override PushConnection METHOD_NAME() { throw new NGit.Errors.NotSupportedException(JGitText.Get().pushIsNotSupportedForBundleTransport); }
public static void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { while (VAR_CHAR[][VAR_INT] != LITERAL_INT) { VAR_CHAR[][VAR_INT++] = VAR_CHAR[][VAR_INT++]; } VAR_CHAR[][VAR_INT] = (char)LITERAL_INT; }
public virtual K METHOD_NAME() { return mapEntry.METHOD_NAME(); }
public static int METHOD_NAME(object[] VAR_OBJECT[]) { int VAR_INT = LITERAL_INT; if (VAR_OBJECT[] == LITERAL_NULL) { return VAR_INT; } foreach (object o in VAR_OBJECT[]) { if (o != LITERAL_NULL) { VAR_INT++; } } return VAR_INT; }
public override void METHOD_NAME(int VAR_INT, E VAR_E) { if (VAR_INT >= LITERAL_INT && VAR_INT <= _size) { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink; if (VAR_INT < (_size / LITERAL_INT)) { { for (int i = LITERAL_INT; i <= VAR_INT; i++) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } } else { { for (int i = _size; i > VAR_INT; i--) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } } java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = new java.util.LinkedList.Link<E>(VAR_E, VAR_JAVA.UTIL.LINKEDLIST.LINK<E>, VAR_JAVA.UTIL.LINKEDLIST.LINK<E>); VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>; VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>; _size++; modCount++; } else { throw new System.IndexOutOfRangeException(); } }
public virtual DescribeDomainResponse METHOD_NAME(DescribeDomainRequest VAR_DESCRIBEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(VAR_DESCRIBEDOMAINREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override bool METHOD_NAME() { if (used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(LITERAL_INT, value.Length); used = true; return true; }
public static java.nio.FloatBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(VAR_INT); }
public NGit.Diff.Edit METHOD_NAME(NGit.Diff.Edit VAR_NGIT.DIFF.EDIT) { return new NGit.Diff.Edit(VAR_NGIT.DIFF.EDIT.endA, endA, VAR_NGIT.DIFF.EDIT.endB, endB); }
public virtual UpdateRuleVersionResponse METHOD_NAME(UpdateRuleVersionRequest VAR_UPDATERULEVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(VAR_UPDATERULEVERSIONREQUEST, VAR_VAR); }
public virtual ListVoiceConnectorTerminationCredentialsResponse METHOD_NAME(ListVoiceConnectorTerminationCredentialsRequest VAR_LISTVOICECONNECTORTERMINATIONCREDENTIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(VAR_LISTVOICECONNECTORTERMINATIONCREDENTIALSREQUEST, VAR_VAR); }
public virtual GetDeploymentTargetResponse METHOD_NAME(GetDeploymentTargetRequest VAR_GETDEPLOYMENTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(VAR_GETDEPLOYMENTTARGETREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { letChildReport = false; foreach (PerfTask task in tasks) { if (task is TaskSequence) { ((TaskSequence)task).METHOD_NAME(); } } }
public override E METHOD_NAME(int VAR_INT) { try { return a[VAR_INT]; } catch (System.IndexOutOfRangeException) { throw java.util.ArrayList<E>.throwIndexOutOfBoundsException(VAR_INT, a.Length); } }
public virtual DescribeDataSetResponse METHOD_NAME(DescribeDataSetRequest VAR_DESCRIBEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(VAR_DESCRIBEDATASETREQUEST, VAR_VAR); }
public SkipWorkTreeFilter(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual DescribeNetworkInterfacesResponse METHOD_NAME() { return METHOD_NAME(new DescribeNetworkInterfacesRequest()); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { return _firstRow <= VAR_INT && _lastRow >= VAR_INT && _firstColumn <= VAR_INT && _lastColumn >= VAR_INT; }
public override string METHOD_NAME() { return new string (this.chars); }
public virtual FileHeader.PatchType METHOD_NAME() { return patchType; }
public override java.util.Iterator<K> METHOD_NAME() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public virtual CreateScriptResponse METHOD_NAME(CreateScriptRequest VAR_CREATESCRIPTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateScriptRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(VAR_CREATESCRIPTREQUEST, VAR_VAR); }
public override BytesRef METHOD_NAME() { termUpto++; if (termUpto >= info.terms.Count) { return LITERAL_NULL; } else { info.terms.Get(info.sortedTerms[termUpto], br); return br; } }
public override string METHOD_NAME(CharsRef VAR_CHARSREF) { return VAR_CHARSREF.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse METHOD_NAME(AssociateWebsiteAuthorizationProviderRequest VAR_ASSOCIATEWEBSITEAUTHORIZATIONPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(VAR_ASSOCIATEWEBSITEAUTHORIZATIONPROVIDERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RevCommit VAR_REVCOMMIT) { BlockRevQueue.Block VAR_BLOCKREVQUEUE.BLOCK = head; if (VAR_BLOCKREVQUEUE.BLOCK == LITERAL_NULL) { VAR_BLOCKREVQUEUE.BLOCK = free.NewBlock(); VAR_BLOCKREVQUEUE.BLOCK.ResetToMiddle(); VAR_BLOCKREVQUEUE.BLOCK.Add(VAR_REVCOMMIT); head = VAR_BLOCKREVQUEUE.BLOCK; tail = VAR_BLOCKREVQUEUE.BLOCK; return; } else { if (VAR_BLOCKREVQUEUE.BLOCK.CanUnpop()) { VAR_BLOCKREVQUEUE.BLOCK.METHOD_NAME(VAR_REVCOMMIT); return; } } VAR_BLOCKREVQUEUE.BLOCK = free.NewBlock(); VAR_BLOCKREVQUEUE.BLOCK.ResetToEnd(); VAR_BLOCKREVQUEUE.BLOCK.METHOD_NAME(VAR_REVCOMMIT); VAR_BLOCKREVQUEUE.BLOCK.next = head; head = VAR_BLOCKREVQUEUE.BLOCK; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { minGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE); maxGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE); side = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenFilter.Side.FRONT.ToString()); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public ModifyDBParameterGroupRequest(string VAR_STRING, List<Parameter> VAR_LIST<PARAMETER>) { _dbParameterGroupName = VAR_STRING; _parameters = VAR_LIST<PARAMETER>; }
public virtual GetHostedZoneLimitResponse METHOD_NAME(GetHostedZoneLimitRequest VAR_GETHOSTEDZONELIMITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(VAR_GETHOSTEDZONELIMITREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override RevFilter METHOD_NAME() { return new CommitterRevFilter.PatternSearch(Pattern()); }
public override string METHOD_NAME() { return LITERAL_STRING + m_term.METHOD_NAME() + LITERAL_STRING + (m_doc == -LITERAL_INT ? LITERAL_STRING : (m_doc == int.MaxValue) ? LITERAL_STRING : m_doc + LITERAL_STRING + m_position); }
public virtual bool METHOD_NAME() { for (int i = LITERAL_INT; i < heads.Count; i++) { if (heads[i] != LastHead.INSTANCE) { return true; } } return false; }
public override int METHOD_NAME(string VAR_STRING, int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_STRING, VAR_INT); } }
public virtual DeleteNetworkAclEntryResponse METHOD_NAME(DeleteNetworkAclEntryRequest VAR_DELETENETWORKACLENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(VAR_DELETENETWORKACLENTRYREQUEST, VAR_VAR); }
public virtual AssociateMemberToGroupResponse METHOD_NAME(AssociateMemberToGroupRequest VAR_ASSOCIATEMEMBERTOGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(VAR_ASSOCIATEMEMBERTOGROUPREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_BYTE[].Length; if (VAR_INT == LITERAL_INT) { VAR_INT += LITERAL_INT; } while (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { VAR_INT += LITERAL_INT; } if (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { VAR_INT = NextLF(VAR_BYTE[], VAR_INT); } return Match(VAR_BYTE[], VAR_INT, ObjectChecker.committer); }
public virtual int METHOD_NAME() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand METHOD_NAME(string VAR_STRING) { paths.AddItem(VAR_STRING); return this; }
public virtual GetPushTemplateResponse METHOD_NAME(GetPushTemplateRequest VAR_GETPUSHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(VAR_GETPUSHTEMPLATEREQUEST, VAR_VAR); }
public virtual DescribeVaultResponse METHOD_NAME(DescribeVaultRequest VAR_DESCRIBEVAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(VAR_DESCRIBEVAULTREQUEST, VAR_VAR); }
public virtual DescribeVpcPeeringConnectionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { throw new System.NotImplementedException(); }
public virtual RegisterDeviceResponse METHOD_NAME(RegisterDeviceRequest VAR_REGISTERDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(VAR_REGISTERDEVICEREQUEST, VAR_VAR); }
public static Format METHOD_NAME(int VAR_INT) { foreach (Format format in Values) { if (format.Id == VAR_INT) { return format; } } throw new ArgumentException(LITERAL_STRING + VAR_INT); }
public virtual DeleteAppResponse METHOD_NAME(DeleteAppRequest VAR_DELETEAPPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAppRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(VAR_DELETEAPPREQUEST, VAR_VAR); }
public virtual GetBaiduChannelResponse METHOD_NAME(GetBaiduChannelRequest VAR_GETBAIDUCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(VAR_GETBAIDUCHANNELREQUEST, VAR_VAR); }
public FST.BytesReader METHOD_NAME() { return fst.METHOD_NAME(); }
public static bool METHOD_NAME(int VAR_INT, char VAR_CHAR) { if ((VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || (VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR)) { return true; } if (VAR_INT > LITERAL_INT && ((VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR)) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse METHOD_NAME(ListAppliedSchemaArnsRequest VAR_LISTAPPLIEDSCHEMAARNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(VAR_LISTAPPLIEDSCHEMAARNSREQUEST, VAR_VAR); }
public System.Uri BaseUri { get; set; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } bool VAR_BOOL; String VAR_STRING; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL[][LITERAL_INT], VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex); VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: VAR_BOOL = true; break; case LITERAL_INT: VAR_BOOL = EvaluateBooleanArg(VAR_VALUEEVAL[][LITERAL_INT], VAR_OPERATIONEVALUATIONCONTEXT); break; default: return ErrorEval.VALUE_INVALID; } } catch (EvaluationException e) { return e.GetErrorEval(); } return EvaluateIndirect(VAR_OPERATIONEVALUATIONCONTEXT, VAR_STRING, VAR_BOOL); }
public int METHOD_NAME(int[] VAR_INT[], int VAR_INT) { int VAR_INT; VAR_INT = NB.CompareUInt32(w1, VAR_INT[][VAR_INT]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, VAR_INT[][VAR_INT + LITERAL_INT]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, VAR_INT[][VAR_INT + LITERAL_INT]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, VAR_INT[][VAR_INT + LITERAL_INT]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, VAR_INT[][VAR_INT + LITERAL_INT]); }
public void METHOD_NAME(int VAR_INT) { names.RemoveAt(VAR_INT); workbook.METHOD_NAME(VAR_INT); }
public GetQueueAttributesRequest(string VAR_STRING, List<string> VAR_LIST<STRING>) { _queueUrl = VAR_STRING; _attributeNames = VAR_LIST<STRING>; }
public static bool[] METHOD_NAME(bool[] VAR_BOOL[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_BOOL[], LITERAL_INT, VAR_INT); }
public static void METHOD_NAME(bool VAR_BOOL) { ENABLED = VAR_BOOL; }
public virtual DeleteLogPatternResponse METHOD_NAME(DeleteLogPatternRequest VAR_DELETELOGPATTERNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(VAR_DELETELOGPATTERNREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { return map.ContainsKey(VAR_CHAR[], VAR_INT, VAR_INT); }
public int METHOD_NAME(int VAR_INT) { return linkTable.GetFirstInternalSheetIndexForExtIndex(VAR_INT); }
public virtual bool METHOD_NAME(string VAR_STRING) { return command.Length + LITERAL_INT < VAR_STRING.Length && VAR_STRING[command.Length] == LITERAL_CHAR && VAR_STRING.StartsWith(command); }
public static void METHOD_NAME(MergeStrategy VAR_MERGESTRATEGY) { METHOD_NAME(VAR_MERGESTRATEGY.GetName(), VAR_MERGESTRATEGY); }
public long METHOD_NAME() { return ((index != LITERAL_NULL) ? index.GetSizeInBytes() : LITERAL_INT); }
public HostedZone(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _name = VAR_STRING; _callerReference = VAR_STRING; }
public virtual GetFindingsResponse METHOD_NAME(GetFindingsRequest VAR_GETFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(VAR_GETFINDINGSREQUEST, VAR_VAR); }
public virtual DescribeTopicsDetectionJobResponse METHOD_NAME(DescribeTopicsDetectionJobRequest VAR_DESCRIBETOPICSDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(VAR_DESCRIBETOPICSDETECTIONJOBREQUEST, VAR_VAR); }
public bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL is NumericValueEval) { if (minimumValue == LITERAL_NULL) { minimumValue = VAR_VALUEEVAL; } else { double VAR_DOUBLE = ((NumericValueEval)VAR_VALUEEVAL).NumberValue; double VAR_DOUBLE = ((NumericValueEval)minimumValue).NumberValue; if (VAR_DOUBLE < VAR_DOUBLE) { minimumValue = VAR_VALUEEVAL; } } } return true; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_len_ref_subexpression); }
public static int METHOD_NAME(string[] VAR_STRING[]) { bool VAR_BOOL = false; string VAR_STRING = LITERAL_NULL; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (VAR_STRING[][i].Equals(LITERAL_STRING, StringComparison.Ordinal)) { VAR_BOOL = true; } else { VAR_STRING = VAR_STRING[][i]; } } if (VAR_STRING[].Length != (VAR_BOOL ? LITERAL_INT : LITERAL_INT)) { throw new ArgumentException(); } using (Store.Directory dir = FSDirectory.Open(new DirectoryInfo(VAR_STRING))) { using (var r = new DirectoryTaxonomyReader(dir)) { PrintStats(r, System.Console.Out, VAR_BOOL); } } return LITERAL_INT; }
public virtual void METHOD_NAME(byte VAR_BYTE) { if (!(FieldsData is Byte)) { throw new System.ArgumentException(LITERAL_STRING + FieldsData.GetType().Name + LITERAL_STRING); } FieldsData = new Byte(VAR_BYTE); }
public static int METHOD_NAME() { return METHOD_NAME(DefaultSeed); }
public CachingDoubleValueSource(ValueSource VAR_VALUESOURCE) { this.m_source = VAR_VALUESOURCE; m_cache = new JCG.Dictionary<int, double>(); }
public AttributeDefinition(string VAR_STRING, ScalarAttributeType VAR_SCALARATTRIBUTETYPE) { _attributeName = VAR_STRING; _attributeType = VAR_SCALARATTRIBUTETYPE; }
public static string METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>, string VAR_STRING) { return NGit.Util.StringUtils.METHOD_NAME(VAR_ICOLLECTION<STRING>, VAR_STRING, VAR_STRING); }
public virtual ListTaskDefinitionFamiliesResponse METHOD_NAME(ListTaskDefinitionFamiliesRequest VAR_LISTTASKDEFINITIONFAMILIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTaskDefinitionFamiliesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTaskDefinitionFamiliesResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamiliesResponse>(VAR_LISTTASKDEFINITIONFAMILIESREQUEST, VAR_VAR); }
public virtual ListComponentsResponse METHOD_NAME(ListComponentsRequest VAR_LISTCOMPONENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListComponentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(VAR_LISTCOMPONENTSREQUEST, VAR_VAR); }
public ActivatePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse METHOD_NAME(CreateMatchmakingRuleSetRequest VAR_CREATEMATCHMAKINGRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(VAR_CREATEMATCHMAKINGRULESETREQUEST, VAR_VAR); }
public virtual ListAvailableManagementCidrRangesResponse METHOD_NAME(ListAvailableManagementCidrRangesRequest VAR_LISTAVAILABLEMANAGEMENTCIDRRANGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAvailableManagementCidrRangesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAvailableManagementCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableManagementCidrRangesResponse>(VAR_LISTAVAILABLEMANAGEMENTCIDRRANGESREQUEST, VAR_VAR); }
if (baseObjectIds != LITERAL_NULL) { return baseObjectIds; } return new ObjectIdSubclassMap<ObjectId>();
public virtual DeletePushTemplateResponse METHOD_NAME(DeletePushTemplateRequest VAR_DELETEPUSHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(VAR_DELETEPUSHTEMPLATEREQUEST, VAR_VAR); }
public virtual CreateDomainEntryResponse METHOD_NAME(CreateDomainEntryRequest VAR_CREATEDOMAINENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(VAR_CREATEDOMAINENTRYREQUEST, VAR_VAR); }
public static int METHOD_NAME(Array VAR_ARRAY) { int VAR_INT = VAR_ARRAY.Length * LITERAL_INT; for (int i = LITERAL_INT; i < VAR_ARRAY.Length; i++) { VAR_INT += METHOD_NAME(VAR_ARRAY.GetValue(i)); } return VAR_INT; }
public OpenNLPTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { sentenceModelFile = Require(VAR_IDICTIONARY<STRING, STRING>, SENTENCE_MODEL); tokenizerModelFile = Require(VAR_IDICTIONARY<STRING, STRING>, TOKENIZER_MODEL); if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public sealed override int METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + VAR_INT, _order); }
public virtual IList<Head> METHOD_NAME(char VAR_CHAR) { if (Matches(VAR_CHAR)) { return newHeads; } else { return FileNameMatcher.EMPTY_HEAD_LIST; } }
public override java.nio.ByteBuffer METHOD_NAME(short VAR_SHORT) { throw new System.NotImplementedException(); }
public virtual void METHOD_NAME(object VAR_OBJECT) { throw new System.NotImplementedException(); }
public virtual int METHOD_NAME(int VAR_INT, int VAR_INT) { return Sharpen.CharHelper.OffsetByCodePoints(value, LITERAL_INT, count, VAR_INT, VAR_INT); }
public static int METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { BitSet VAR_BITSET = GetAlts(VAR_IENUMERABLE<BITSET>); if (VAR_BITSET.Cardinality() == LITERAL_INT) { return VAR_BITSET.NextSetBit(LITERAL_INT); } return ATN.INVALID_ALT_NUMBER; }
public virtual DateTime METHOD_NAME() { return Sharpen.Extensions.CreateDate(when); }
public RuleTagToken(string VAR_STRING, int VAR_INT, string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; this.VAR_INT = VAR_INT; this.VAR_STRING = VAR_STRING; }
public virtual DisableOrganizationAdminAccountResponse METHOD_NAME(DisableOrganizationAdminAccountRequest VAR_DISABLEORGANIZATIONADMINACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(VAR_DISABLEORGANIZATIONADMINACCOUNTREQUEST, VAR_VAR); }
public virtual CreateRoomResponse METHOD_NAME(CreateRoomRequest VAR_CREATEROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(VAR_CREATEROOMREQUEST, VAR_VAR); }
public virtual DeleteReplicationGroupResponse METHOD_NAME(DeleteReplicationGroupRequest VAR_DELETEREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(VAR_DELETEREPLICATIONGROUPREQUEST, VAR_VAR); }
public java.nio.CharBuffer METHOD_NAME(java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER) { try { return newDecoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).METHOD_NAME(VAR_JAVA.NIO.BYTEBUFFER); } catch (java.nio.charset.CharacterCodingException ex) { throw new System.Exception(ex.Message, ex); } }
public Distribution(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _status = VAR_STRING; _domainName = VAR_STRING; }
public sealed override object METHOD_NAME() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_window = VAR_RECORDINPUTSTREAM.ReadShort(); }
public DeleteDBSnapshotRequest(string VAR_STRING) { _dbSnapshotIdentifier = VAR_STRING; }
public ParserExtension METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL || !this.extensions.TryGetValue(VAR_STRING, out ParserExtension value)) return LITERAL_NULL; return value; }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { try { if (chunkerModelFile != LITERAL_NULL) { OpenNLPOpsFactory.GetChunkerModel(chunkerModelFile, VAR_IRESOURCELOADER); } } catch (IOException e) { throw new ArgumentException(e.ToString(), e); } }
public virtual CompleteVaultLockResponse METHOD_NAME(CompleteVaultLockRequest VAR_COMPLETEVAULTLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(VAR_COMPLETEVAULTLOCKREQUEST, VAR_VAR); }
public int[] METHOD_NAME() { return (int[])(Array)_points.Clone(); }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF + LITERAL_INT * RamUsageEstimator.NUM_BYTES_INT32) + RamUsageEstimator.SizeOf(data) + positions.METHOD_NAME() + wordNums.METHOD_NAME(); }
public virtual RegisterInstancesWithLoadBalancerResponse METHOD_NAME(RegisterInstancesWithLoadBalancerRequest VAR_REGISTERINSTANCESWITHLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(VAR_REGISTERINSTANCESWITHLOADBALANCERREQUEST, VAR_VAR); }
public DescribeClusterUserKubeconfigRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public PrecisionRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_precision = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(LeftRowGutter); VAR_ILITTLEENDIANOUTPUT.WriteShort(TopColGutter); VAR_ILITTLEENDIANOUTPUT.WriteShort(RowLevelMax); VAR_ILITTLEENDIANOUTPUT.WriteShort(ColLevelMax); }
public virtual DeleteVirtualInterfaceResponse METHOD_NAME(DeleteVirtualInterfaceRequest VAR_DELETEVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(VAR_DELETEVIRTUALINTERFACEREQUEST, VAR_VAR); }
public Entry METHOD_NAME(String VAR_STRING) { if (excludes.Contains(VAR_STRING)) { throw new FileNotFoundException(VAR_STRING); } Entry VAR_ENTRY = directory.METHOD_NAME(VAR_STRING); return WrapEntry(VAR_ENTRY); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Backup)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DeleteVoiceConnectorOriginationResponse METHOD_NAME(DeleteVoiceConnectorOriginationRequest VAR_DELETEVOICECONNECTORORIGINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(VAR_DELETEVOICECONNECTORORIGINATIONREQUEST, VAR_VAR); }
public virtual OpenStringBuilder METHOD_NAME(char VAR_CHAR) { Write(VAR_CHAR); return this; }
public static long METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Equals(IndexFileNames.SEGMENTS, StringComparison.Ordinal)) { return LITERAL_INT; } else if (VAR_STRING.StartsWith(IndexFileNames.SEGMENTS, StringComparison.Ordinal)) { return Number.Parse(VAR_STRING.Substring(LITERAL_INT + IndexFileNames.SEGMENTS.Length), Character.MaxRadix); } else { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } }
public static NGit.Transport.TagOpt METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL || VAR_STRING.Length == LITERAL_INT) { return AUTO_FOLLOW; } foreach (NGit.Transport.TagOpt tagopt in Values()) { if (tagopt.Option().Equals(VAR_STRING)) { return tagopt; } } throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidTagOption, VAR_STRING)); }
public virtual StartContentModerationResponse METHOD_NAME(StartContentModerationRequest VAR_STARTCONTENTMODERATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(VAR_STARTCONTENTMODERATIONREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING) { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(VAR_STRING.Length); { for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); } VAR_JAVA.LANG.STRINGBUILDER.append(VAR_CHAR); } } return VAR_JAVA.LANG.STRINGBUILDER.ToString(); }
public void METHOD_NAME(V VAR_V) { value = VAR_V; }
public QueryParserTokenManager(ICharStream VAR_ICHARSTREAM) { InitBlock(); m_input_stream = VAR_ICHARSTREAM; }
public long METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE; if (modBy == LITERAL_INT) VAR_DOUBLE = VAR_DOUBLE / factor; elseval = VAR_DOUBLE / factor % modBy; if (type == LITERAL_CHAR) return (long)Math.Round(VAR_DOUBLE); else return (long)VAR_DOUBLE; }
public override java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_LONG[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_LONG[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual void METHOD_NAME() { _listeners = new IAntlrErrorListener<Symbol>[LITERAL_INT]; }
public CommonTokenStream(ITokenSource VAR_ITOKENSOURCE, int VAR_INT) : this(tokenSource) { this.VAR_INT = VAR_INT; }
public virtual ListObjectPoliciesResponse METHOD_NAME(ListObjectPoliciesRequest VAR_LISTOBJECTPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(VAR_LISTOBJECTPOLICIESREQUEST, VAR_VAR); }
public ObjectToPack(AnyObjectId VAR_ANYOBJECTID, int VAR_INT) : base(src) { flags = VAR_INT << TYPE_SHIFT; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { int VAR_INT = NumVowels(VAR_CHAR[], VAR_INT); for (int i = LITERAL_INT; i < affixes.Length; i++) { Affix VAR_AFFIX = affixes[i]; if (VAR_INT > VAR_AFFIX.vc && VAR_INT >= VAR_AFFIX.VAR_AFFIX.Length + LITERAL_INT && StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, VAR_AFFIX.VAR_AFFIX)) { VAR_INT -= VAR_AFFIX.VAR_AFFIX.Length; return VAR_AFFIX.palatalizes ? Unpalatalize(VAR_CHAR[], VAR_INT) : VAR_INT; } } return VAR_INT; }
public virtual void METHOD_NAME(Parser VAR_PARSER, RecognitionException VAR_RECOGNITIONEXCEPTION) { if (lastErrorIndex == ((ITokenStream)VAR_PARSER.InputStream).Index && lastErrorStates != LITERAL_NULL && lastErrorStates.Contains(VAR_PARSER.State)) { VAR_PARSER.Consume(); } lastErrorIndex = ((ITokenStream)VAR_PARSER.InputStream).Index; if (lastErrorStates == LITERAL_NULL) { lastErrorStates = new IntervalSet(); } lastErrorStates.Add(VAR_PARSER.State); IntervalSet VAR_INTERVALSET = GetErrorRecoverySet(VAR_PARSER); ConsumeUntil(VAR_PARSER, VAR_INTERVALSET); }
public override String METHOD_NAME() { String VAR_STRING = field_3_string; int VAR_INT = VAR_STRING.Length; StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_INT + LITERAL_INT); VAR_STRINGBUILDER.Append(FORMULA_DELIMITER); for (int i = LITERAL_INT; i < VAR_INT; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR == FORMULA_DELIMITER) { VAR_STRINGBUILDER.Append(FORMULA_DELIMITER); } VAR_STRINGBUILDER.Append(VAR_CHAR); } VAR_STRINGBUILDER.Append(FORMULA_DELIMITER); return VAR_STRINGBUILDER.ToString(); }
public UnlinkFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public ConfigurationOptionSetting(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _awsNamespace = VAR_STRING; _optionName = VAR_STRING; _value = VAR_STRING; }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(m_tries.Count * LITERAL_INT); for (int i = LITERAL_INT; i < m_tries.Count; i++) { string VAR_STRING = m_tries[i].METHOD_NAME(VAR_STRING); if (VAR_STRING == LITERAL_NULL || (VAR_STRING.Length == LITERAL_INT && VAR_STRING[LITERAL_INT] == EOM)) { return VAR_STRINGBUILDER.ToString(); } VAR_STRINGBUILDER.Append(VAR_STRING); } return VAR_STRINGBUILDER.ToString(); }
public virtual DescribeMountTargetSecurityGroupsResponse METHOD_NAME(DescribeMountTargetSecurityGroupsRequest VAR_DESCRIBEMOUNTTARGETSECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(VAR_DESCRIBEMOUNTTARGETSECURITYGROUPSREQUEST, VAR_VAR); }
public virtual GetApiMappingResponse METHOD_NAME(GetApiMappingRequest VAR_GETAPIMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(VAR_GETAPIMAPPINGREQUEST, VAR_VAR); }
public HttpRequest(string VAR_STRING) { Url = VAR_STRING; Headers = new Dictionary<string, string>(); }
public MemFuncPtg(int VAR_INT) { field_1_len_ref_subexpression = VAR_INT; }
public static TermStats[] METHOD_NAME(IndexReader VAR_INDEXREADER, int VAR_INT, string VAR_STRING, IComparer<TermStats> VAR_ICOMPARER<TERMSTATS>) { TermStatsQueue VAR_TERMSTATSQUEUE = LITERAL_NULL; if (VAR_STRING != LITERAL_NULL) { Fields VAR_FIELDS = MultiFields.GetFields(VAR_INDEXREADER); if (VAR_FIELDS == LITERAL_NULL) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } Terms VAR_TERMS = VAR_FIELDS.GetTerms(VAR_STRING); if (VAR_TERMS != LITERAL_NULL) { TermsEnum VAR_TERMSENUM = VAR_TERMS.GetIterator(LITERAL_NULL); VAR_TERMSTATSQUEUE = new TermStatsQueue(VAR_INT, VAR_ICOMPARER<TERMSTATS>); VAR_TERMSTATSQUEUE.Fill(VAR_STRING, VAR_TERMSENUM); } } else { Fields VAR_FIELDS = MultiFields.GetFields(VAR_INDEXREADER); if (VAR_FIELDS == LITERAL_NULL) { throw new Exception(LITERAL_STRING); } VAR_TERMSTATSQUEUE = new TermStatsQueue(VAR_INT, VAR_ICOMPARER<TERMSTATS>); foreach (string fieldName in VAR_FIELDS) { Terms VAR_TERMS = VAR_FIELDS.GetTerms(fieldName); if (VAR_TERMS != LITERAL_NULL) { VAR_TERMSTATSQUEUE.Fill(fieldName, VAR_TERMS.GetIterator(LITERAL_NULL)); } } } TermStats[] VAR_TERMSTATS[] = new TermStats[VAR_TERMSTATSQUEUE.Count]; int VAR_INT = VAR_TERMSTATSQUEUE.Count - LITERAL_INT; while (VAR_TERMSTATSQUEUE.Count != LITERAL_INT) { VAR_TERMSTATS[][VAR_INT] = VAR_TERMSTATSQUEUE.Pop(); VAR_INT--; } return VAR_TERMSTATS[]; }
public virtual DeleteApnsVoipChannelResponse METHOD_NAME(DeleteApnsVoipChannelRequest VAR_DELETEAPNSVOIPCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(VAR_DELETEAPNSVOIPCHANNELREQUEST, VAR_VAR); }
public virtual ListFacesResponse METHOD_NAME(ListFacesRequest VAR_LISTFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(VAR_LISTFACESREQUEST, VAR_VAR); }
public ShapeFieldCacheDistanceValueSource(SpatialContext VAR_SPATIALCONTEXT, ShapeFieldCacheProvider<IPoint> VAR_SHAPEFIELDCACHEPROVIDER<IPOINT>, IPoint VAR_IPOINT, double VAR_DOUBLE) { this.VAR_SPATIALCONTEXT = VAR_SPATIALCONTEXT; this.VAR_IPOINT = VAR_IPOINT; this.VAR_SHAPEFIELDCACHEPROVIDER<IPOINT> = VAR_SHAPEFIELDCACHEPROVIDER<IPOINT>; this.VAR_DOUBLE = VAR_DOUBLE; }
public override char METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return sequence[VAR_INT]; }
public virtual UpdateConfigurationProfileResponse METHOD_NAME(UpdateConfigurationProfileRequest VAR_UPDATECONFIGURATIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(VAR_UPDATECONFIGURATIONPROFILEREQUEST, VAR_VAR); }
public virtual DescribeLifecycleHooksResponse METHOD_NAME(DescribeLifecycleHooksRequest VAR_DESCRIBELIFECYCLEHOOKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLifecycleHooksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLifecycleHooksResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHooksResponse>(VAR_DESCRIBELIFECYCLEHOOKSREQUEST, VAR_VAR); }
public virtual DescribeHostReservationsResponse METHOD_NAME(DescribeHostReservationsRequest VAR_DESCRIBEHOSTRESERVATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHostReservationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHostReservationsResponseUnmarshaller.Instance; return Invoke<DescribeHostReservationsResponse>(VAR_DESCRIBEHOSTRESERVATIONSREQUEST, VAR_VAR); }
public static PredictionContext METHOD_NAME(ATN VAR_ATN, RuleContext VAR_RULECONTEXT) { if (VAR_RULECONTEXT == LITERAL_NULL) VAR_RULECONTEXT = ParserRuleContext.EMPTY; if (VAR_RULECONTEXT.Parent == LITERAL_NULL || VAR_RULECONTEXT == ParserRuleContext.EMPTY) return PredictionContext.EMPTY; PredictionContext VAR_PREDICTIONCONTEXT = PredictionContext.METHOD_NAME(VAR_ATN, VAR_RULECONTEXT.Parent); ATNState VAR_ATNSTATE = VAR_ATN.states[VAR_RULECONTEXT.invokingState]; RuleTransition VAR_RULETRANSITION = (RuleTransition)VAR_ATNSTATE.Transition(LITERAL_INT); return VAR_PREDICTIONCONTEXT.GetChild(VAR_RULETRANSITION.followState.stateNumber); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(grbit1)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(grbit2)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(citmShow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(isxdiSort)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(isxdiShow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(subName).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetResultPath()); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListChangeSetsResponse METHOD_NAME(ListChangeSetsRequest VAR_LISTCHANGESETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(VAR_LISTCHANGESETSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.RecordType = (sid); }
public override java.nio.ShortBuffer METHOD_NAME(short VAR_SHORT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; this.m_message = new Message(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, VAR_STRING, LITERAL_STRING); }
public virtual StashApplyCommand METHOD_NAME() { return new StashApplyCommand(repo); }
public ICollection METHOD_NAME() { return dictionaryNameToID.Keys; }
public static int METHOD_NAME(string VAR_STRING, int VAR_INT) { if (VAR_INT != -LITERAL_INT) { return VAR_INT; } if (Sharpen.StringHelper.EqualsIgnoreCase(LITERAL_STRING, VAR_STRING)) { return LITERAL_INT; } else { if (Sharpen.StringHelper.EqualsIgnoreCase(LITERAL_STRING, VAR_STRING)) { return LITERAL_INT; } else { return -LITERAL_INT; } } }
public virtual ListAssessmentTemplatesResponse METHOD_NAME(ListAssessmentTemplatesRequest VAR_LISTASSESSMENTTEMPLATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(VAR_LISTASSESSMENTTEMPLATESREQUEST, VAR_VAR); }
public virtual RestoreFromClusterSnapshotResponse METHOD_NAME(RestoreFromClusterSnapshotRequest VAR_RESTOREFROMCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreFromClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreFromClusterSnapshotResponse>(VAR_RESTOREFROMCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public void METHOD_NAME(HSSFShape VAR_HSSFSHAPE) { VAR_HSSFSHAPE.Patriarch = (this.Patriarch); VAR_HSSFSHAPE.Parent = (this); shapes.Add(VAR_HSSFSHAPE); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (VAR_OBJECT == LITERAL_NULL || GetType() != VAR_OBJECT.GetType()) return false; FacetEntry VAR_FACETENTRY = (FacetEntry)VAR_OBJECT; if (count != VAR_FACETENTRY.count) return false; if (!value.METHOD_NAME(VAR_FACETENTRY.value)) return false; return true; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, char VAR_CHAR) { if (VAR_INT == VAR_BYTE[].Length) { --VAR_INT; } while (VAR_INT >= LITERAL_INT) { if (VAR_BYTE[][VAR_INT--] == VAR_CHAR) { return VAR_INT; } } return VAR_INT; }
public virtual bool METHOD_NAME() { return deltaBase != LITERAL_NULL; }
public virtual IToken METHOD_NAME() { int VAR_INT = Column; int VAR_INT = Line; IToken VAR_ITOKEN = _factory.Create(_tokenFactorySourcePair, TokenConstants.EOF, LITERAL_NULL, TokenConstants.DefaultChannel, _input.Index, _input.Index - LITERAL_INT, VAR_INT, VAR_INT); Emit(VAR_ITOKEN); return VAR_ITOKEN; }
public UpdateUserRequest(string VAR_STRING) { _userName = VAR_STRING; }
public virtual RevFilter METHOD_NAME() { return NotRevFilter.Create(this); }
public virtual void METHOD_NAME(PersonIdent VAR_PERSONIDENT) { tagger = VAR_PERSONIDENT; }
public static BufferSize METHOD_NAME() { long VAR_LONG, VAR_LONG, VAR_LONG; using (var proc = Process.GetCurrentProcess()) { VAR_LONG = proc.PeakVirtualMemorySize64; VAR_LONG = proc.VirtualMemorySize64; VAR_LONG = proc.PrivateMemorySize64; } long VAR_LONG = VAR_LONG - VAR_LONG + VAR_LONG; long VAR_LONG = VAR_LONG / LITERAL_INT; long VAR_LONG = MIN_BUFFER_SIZE_MB * MB; if (VAR_LONG < VAR_LONG || VAR_LONG > LITERAL_INT * VAR_LONG) { if (VAR_LONG / LITERAL_INT > VAR_LONG) { VAR_LONG = VAR_LONG / LITERAL_INT; } else { VAR_LONG = Math.Max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, VAR_LONG); } } return new BufferSize(Math.Min((long)int.MaxValue, VAR_LONG)); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT - LITERAL_INT; while (VAR_INT <= VAR_INT && IsWhitespace(VAR_BYTE[][VAR_INT])) { VAR_INT--; } return VAR_INT + LITERAL_INT; }
public TopMarginRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_margin = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType VAR_ENVIRONMENTINFOTYPE) { _infoType = VAR_ENVIRONMENTINFOTYPE; }
public virtual CreatePlayerSessionsResponse METHOD_NAME(CreatePlayerSessionsRequest VAR_CREATEPLAYERSESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(VAR_CREATEPLAYERSESSIONSREQUEST, VAR_VAR); }
public virtual CreateProxySessionResponse METHOD_NAME(CreateProxySessionRequest VAR_CREATEPROXYSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(VAR_CREATEPROXYSESSIONREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return type; }
public virtual string METHOD_NAME() { return scheme; }
public override void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { contents.Append(VAR_CHAR[], VAR_INT, VAR_INT); }
public FetchAlbumTagPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse METHOD_NAME(DeleteMembersRequest VAR_DELETEMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(VAR_DELETEMEMBERSREQUEST, VAR_VAR); }
public virtual GetContactReachabilityStatusResponse METHOD_NAME(GetContactReachabilityStatusRequest VAR_GETCONTACTREACHABILITYSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(VAR_GETCONTACTREACHABILITYSTATUSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public virtual E METHOD_NAME() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse METHOD_NAME(CreateStreamingDistributionRequest VAR_CREATESTREAMINGDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(VAR_CREATESTREAMINGDISTRIBUTIONREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return absolute; }
public virtual DisableAddOnResponse METHOD_NAME(DisableAddOnRequest VAR_DISABLEADDONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(VAR_DISABLEADDONREQUEST, VAR_VAR); }
public virtual DescribeAliasResponse METHOD_NAME(DescribeAliasRequest VAR_DESCRIBEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(VAR_DESCRIBEALIASREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { while (--VAR_INT >= LITERAL_INT) { if (currentSubtree != LITERAL_NULL) { ptr += currentSubtree.GetEntrySpan(); } else { ptr++; } if (Eof) { break; } ParseEntry(); } }
public override RevFilter METHOD_NAME() { return new AndRevFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { return new PersianCharFilter(VAR_TEXTREADER); }
public virtual string METHOD_NAME() { return option; }
public override string METHOD_NAME() { var VAR_VAR = new StringBuilder(LITERAL_STRING); foreach (var item in this) { if (VAR_VAR.Length > LITERAL_INT) { VAR_VAR.Append(LITERAL_STRING); } VAR_VAR.Append(item); } return VAR_VAR.Append(LITERAL_CHAR).METHOD_NAME(); }
public virtual DescribeSignalingChannelResponse METHOD_NAME(DescribeSignalingChannelRequest VAR_DESCRIBESIGNALINGCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(VAR_DESCRIBESIGNALINGCHANNELREQUEST, VAR_VAR); }
public virtual AttachStaticIpResponse METHOD_NAME(AttachStaticIpRequest VAR_ATTACHSTATICIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(VAR_ATTACHSTATICIPREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); CellReference VAR_CELLREFERENCE = new CellReference(_firstRowIndex, _firstColumnIndex, false, false); CellReference VAR_CELLREFERENCE = new CellReference(_lastRowIndex, _lastColumnIndex, false, false); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLREFERENCE.FormatAsString()).Append(LITERAL_CHAR).Append(VAR_CELLREFERENCE.FormatAsString()).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public BloomFilteringPostingsFormat(PostingsFormat VAR_POSTINGSFORMAT, BloomFilterFactory VAR_BLOOMFILTERFACTORY) : base() { _delegatePostingsFormat = VAR_POSTINGSFORMAT; _bloomFilterFactory = VAR_BLOOMFILTERFACTORY; }
public virtual ListTemplatesResponse METHOD_NAME(ListTemplatesRequest VAR_LISTTEMPLATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(VAR_LISTTEMPLATESREQUEST, VAR_VAR); }
public TimerThread(long VAR_LONG, Counter VAR_COUNTER) : base(THREAD_NAME) { this.VAR_LONG = VAR_LONG; this.VAR_COUNTER = VAR_COUNTER; this.IsBackground = (true); }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse METHOD_NAME(ListDirectoriesRequest VAR_LISTDIRECTORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(VAR_LISTDIRECTORIESREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public virtual GroupingSearch METHOD_NAME() { this.maxCacheRAMMB = LITERAL_NULL; this.maxDocsToCache = LITERAL_NULL; return this; }
public static int METHOD_NAME(int VAR_INT) { { for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_INT <= (LITERAL_INT << i) - LITERAL_INT) { return (LITERAL_INT << i) - LITERAL_INT; } } } return VAR_INT; }
public virtual UpdateAssessmentTargetResponse METHOD_NAME(UpdateAssessmentTargetRequest VAR_UPDATEASSESSMENTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(VAR_UPDATEASSESSMENTTARGETREQUEST, VAR_VAR); }
public virtual ModifyVolumeResponse METHOD_NAME(ModifyVolumeRequest VAR_MODIFYVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(VAR_MODIFYVOLUMEREQUEST, VAR_VAR); }
public override Cell METHOD_NAME(Cell VAR_CELL, Cell VAR_CELL) { if (VAR_CELL.cmd == VAR_CELL.cmd && VAR_CELL.@ref == VAR_CELL.@ref && VAR_CELL.skip == VAR_CELL.skip) { Cell VAR_CELL = new Cell(VAR_CELL); VAR_CELL.cnt += VAR_CELL.cnt; return VAR_CELL; } else { return LITERAL_NULL; } }
public override ByteBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { if (VAR_LONG >= Size) throw new ArgumentException(LITERAL_STRING + VAR_LONG + LITERAL_STRING); ByteBuffer VAR_BYTEBUFFER; int VAR_INT = -LITERAL_INT; if (writable) { VAR_BYTEBUFFER = ByteBuffer.CreateBuffer(VAR_INT); VAR_INT = LITERAL_INT; } else { fileStream.Position = VAR_LONG; VAR_BYTEBUFFER = ByteBuffer.CreateBuffer(VAR_INT); VAR_INT = IOUtils.ReadFully(fileStream, VAR_BYTEBUFFER.Buffer); } if (VAR_INT == -LITERAL_INT) throw new ArgumentException(LITERAL_STRING + VAR_LONG + LITERAL_STRING); VAR_BYTEBUFFER.Position = LITERAL_INT; return VAR_BYTEBUFFER; }
public virtual RespondActivityTaskCompletedResponse METHOD_NAME(RespondActivityTaskCompletedRequest VAR_RESPONDACTIVITYTASKCOMPLETEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompletedResponse>(VAR_RESPONDACTIVITYTASKCOMPLETEDREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { lock (this) { setProgress(mProgress + VAR_INT); } }
public virtual WorkingTreeIterator.MetadataDiff METHOD_NAME(DirCacheEntry VAR_DIRCACHEENTRY) { if (VAR_DIRCACHEENTRY.IsAssumeValid) { return WorkingTreeIterator.MetadataDiff.EQUAL; } if (VAR_DIRCACHEENTRY.IsUpdateNeeded) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } if (!VAR_DIRCACHEENTRY.IsSmudged && VAR_DIRCACHEENTRY.Length != (int)GetEntryLength()) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } if (IsModeDifferent(VAR_DIRCACHEENTRY.RawMode)) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA; } long VAR_LONG = VAR_DIRCACHEENTRY.LastModified; long VAR_LONG = GetEntryLastModified(); if (VAR_LONG % LITERAL_INT == LITERAL_INT || VAR_LONG % LITERAL_INT == LITERAL_INT) { VAR_LONG = VAR_LONG - VAR_LONG % LITERAL_INT; VAR_LONG = VAR_LONG - VAR_LONG % LITERAL_INT; } if (VAR_LONG != VAR_LONG) { return WorkingTreeIterator.MetadataDiff.DIFFER_BY_TIMESTAMP; } else { if (!VAR_DIRCACHEENTRY.IsSmudged) { return WorkingTreeIterator.MetadataDiff.EQUAL; } else { return WorkingTreeIterator.MetadataDiff.SMUDGED; } } }
public static NumberRecord METHOD_NAME(RKRecord VAR_RKRECORD) { NumberRecord VAR_NUMBERRECORD = new NumberRecord(); VAR_NUMBERRECORD.Column = (VAR_RKRECORD.Column); VAR_NUMBERRECORD.Row = (VAR_RKRECORD.Row); VAR_NUMBERRECORD.XFIndex = (VAR_RKRECORD.XFIndex); VAR_NUMBERRECORD.Value = (VAR_RKRECORD.RKNumber); return VAR_NUMBERRECORD; }
public override java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (char c in cells.Keys) { Cell VAR_CELL = At(c); if (VAR_CELL.cmd >= LITERAL_INT || VAR_CELL.@ref >= LITERAL_INT) { VAR_INT++; } } return VAR_INT; }
public BeiderMorseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { NameType VAR_NAMETYPE = (NameType)Enum.Parse(typeof(NameType), Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, NameType.GENERIC.ToString()), true); RuleType VAR_RULETYPE = (RuleType)Enum.Parse(typeof(RuleType), Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, RuleType.APPROX.ToString()), true); bool VAR_BOOL = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); engine = new PhoneticEngine(VAR_NAMETYPE, VAR_RULETYPE, VAR_BOOL); ISet<string> VAR_ISET<STRING> = GetSet(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); languageSet = (LITERAL_NULL == VAR_ISET<STRING> || (LITERAL_INT == VAR_ISET<STRING>.Count && VAR_ISET<STRING>.Contains(LITERAL_STRING))) ? LITERAL_NULL : LanguageSet.From(VAR_ISET<STRING>); if (!(VAR_IDICTIONARY<STRING, STRING>.Count == LITERAL_INT)) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = Double.NaN; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length > LITERAL_INT) { VAR_DOUBLE = devsq(VAR_DOUBLE[]) / VAR_DOUBLE[].Length; } return VAR_DOUBLE; }
public PersianNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static WeightedTerm[] METHOD_NAME(Query VAR_QUERY, bool VAR_BOOL, string VAR_STRING) { var VAR_VAR = new JCG.HashSet<WeightedTerm>(); if (VAR_STRING != LITERAL_NULL) { VAR_STRING = VAR_STRING.Intern(); } METHOD_NAME(VAR_QUERY, VAR_VAR, VAR_BOOL, VAR_STRING); return VAR_VAR.ToArray(); }
public virtual DeleteDocumentationPartResponse METHOD_NAME(DeleteDocumentationPartRequest VAR_DELETEDOCUMENTATIONPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(VAR_DELETEDOCUMENTATIONPARTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(X)).Append(LITERAL_STRING).Append(X).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Y)).Append(LITERAL_STRING).Append(Y).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Width)).Append(LITERAL_STRING).Append(Width).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Height)).Append(LITERAL_STRING).Append(Height).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public sealed override short METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public override string METHOD_NAME() { return Image; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { try { AreaEval VAR_AREAEVAL = EvaluateRef(VAR_VALUEEVAL); AreaEval VAR_AREAEVAL = EvaluateRef(VAR_VALUEEVAL); AreaEval VAR_AREAEVAL = ResolveRange(VAR_AREAEVAL, VAR_AREAEVAL); if (VAR_AREAEVAL == LITERAL_NULL) { return ErrorEval.NULL_INTERSECTION; } return VAR_AREAEVAL; } catch (EvaluationException e) { return e.GetErrorEval(); } }
public virtual void METHOD_NAME() { weightBySpanQuery.METHOD_NAME(); }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { if (VAR_INT > VAR_STRINGBUILDER.Length || VAR_INT < LITERAL_INT) return VAR_INT; bi.SetText(VAR_STRINGBUILDER.ToString(VAR_INT, VAR_STRINGBUILDER.Length - VAR_INT)); return bi.Next() + VAR_INT; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.LPAREN: Jj_consume_token(RegexpToken.LPAREN); VAR_SRNDQUERY = FieldsQuery(); Jj_consume_token(RegexpToken.RPAREN); break; case RegexpToken.OR: case RegexpToken.AND: case RegexpToken.W: case RegexpToken.N: VAR_SRNDQUERY = PrefixOperatorQuery(); break; case RegexpToken.TRUNCQUOTED: case RegexpToken.QUOTED: case RegexpToken.SUFFIXTERM: case RegexpToken.TRUNCTERM: case RegexpToken.TERM: VAR_SRNDQUERY = SimpleTerm(); break; default: jj_la1[LITERAL_INT] = jj_gen; Jj_consume_token(-LITERAL_INT); throw new ParseException(); } OptionalWeights(VAR_SRNDQUERY); { if (true) return VAR_SRNDQUERY; } throw new Exception(LITERAL_STRING); }
public virtual DeleteApiKeyResponse METHOD_NAME(DeleteApiKeyRequest VAR_DELETEAPIKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(VAR_DELETEAPIKEYREQUEST, VAR_VAR); }
public InsertTagsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual DeleteUserByPrincipalIdResponse METHOD_NAME(DeleteUserByPrincipalIdRequest VAR_DELETEUSERBYPRINCIPALIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUserByPrincipalIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUserByPrincipalIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByPrincipalIdResponse>(VAR_DELETEUSERBYPRINCIPALIDREQUEST, VAR_VAR); }
public virtual DescribeNetworkInterfacesResponse METHOD_NAME(DescribeNetworkInterfacesRequest VAR_DESCRIBENETWORKINTERFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(VAR_DESCRIBENETWORKINTERFACESREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, LITERAL_INT); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_1_numShapes); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_2_lastMSOSPID); VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT + LITERAL_INT, RecordId, RecordSize, this); return RecordSize; }
public virtual CreateSecurityConfigurationResponse METHOD_NAME(CreateSecurityConfigurationRequest VAR_CREATESECURITYCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(VAR_CREATESECURITYCONFIGURATIONREQUEST, VAR_VAR); }
public virtual DescribeClientVpnConnectionsResponse METHOD_NAME(DescribeClientVpnConnectionsRequest VAR_DESCRIBECLIENTVPNCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(VAR_DESCRIBECLIENTVPNCONNECTIONSREQUEST, VAR_VAR); }
public static void METHOD_NAME(double[] VAR_DOUBLE[], double VAR_DOUBLE) { { for (int i = LITERAL_INT; i < VAR_DOUBLE[].Length; i++) { VAR_DOUBLE[][i] = VAR_DOUBLE; } } }
public bool METHOD_NAME() { return pos < maxColumn; }
public DocsEnum METHOD_NAME(int[] VAR_INT[]) { this.VAR_INT[] = VAR_INT[]; upto = -LITERAL_INT; freq_Renamed = LITERAL_INT; return this; }
public bool METHOD_NAME(RevFlagSet VAR_REVFLAGSET) { return (flags & VAR_REVFLAGSET.mask) == VAR_REVFLAGSET.mask; }
public virtual ModifyAccountResponse METHOD_NAME(ModifyAccountRequest VAR_MODIFYACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(VAR_MODIFYACCOUNTREQUEST, VAR_VAR); }
public virtual IToken METHOD_NAME(int VAR_INT) { LazyInit(); if (VAR_INT == LITERAL_INT) { return LITERAL_NULL; } if (VAR_INT < LITERAL_INT) { return Lb(-VAR_INT); } int VAR_INT = p + VAR_INT - LITERAL_INT; Sync(VAR_INT); if (VAR_INT >= tokens.Count) { return tokens[tokens.Count - LITERAL_INT]; } return tokens[VAR_INT]; }
public void METHOD_NAME(int VAR_INT) { if (boundsheets.Count > VAR_INT) { records.Remove(records.Bspos - (boundsheets.Count - LITERAL_INT) + VAR_INT); boundsheets.RemoveAt(VAR_INT); FixTabIdRecord(); } int VAR_INT = VAR_INT + LITERAL_INT; for (int i = LITERAL_INT; i < NumNames; i++) { NameRecord VAR_NAMERECORD = GetNameRecord(i); if (VAR_NAMERECORD.SheetNumber == VAR_INT) { VAR_NAMERECORD.SheetNumber = (LITERAL_INT); } else if (VAR_NAMERECORD.SheetNumber > VAR_INT) { VAR_NAMERECORD.SheetNumber = (VAR_NAMERECORD.SheetNumber - LITERAL_INT); } } if (linkTable != LITERAL_NULL) { for (int i = VAR_INT + LITERAL_INT; i < NumSheets + LITERAL_INT; i++) { linkTable.METHOD_NAME(i); } } }
public void METHOD_NAME(int VAR_INT) { names.RemoveAt(VAR_INT); workbook.METHOD_NAME(VAR_INT); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (!(VAR_OBJECT is Property)) return false; Property VAR_PROPERTY = (Property)VAR_OBJECT; Object VAR_OBJECT = VAR_PROPERTY.Value; long VAR_LONG = VAR_PROPERTY.ID; if (id != VAR_LONG || (id != LITERAL_INT && !TypesAreEqual(type, VAR_PROPERTY.Type))) return false; if (value == LITERAL_NULL && VAR_OBJECT == LITERAL_NULL) return true; if (value == LITERAL_NULL || VAR_OBJECT == LITERAL_NULL) return false; Type VAR_TYPE = value.GetType(); Type VAR_TYPE = VAR_OBJECT.GetType(); if (!(VAR_TYPE.IsAssignableFrom(VAR_TYPE)) && !(VAR_TYPE.IsAssignableFrom(VAR_TYPE))) return false; if (value is byte[]) return Arrays.METHOD_NAME((byte[])value, (byte[])VAR_OBJECT); return value.METHOD_NAME(VAR_OBJECT); }
public GetRepoBuildListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public MessageWriter() { buf = new ByteArrayOutputStream(); enc = new OutputStreamWriter(GetRawStream(), Constants.CHARSET); }
public void METHOD_NAME(RecordBase VAR_RECORDBASE) { _recs.Add(VAR_RECORDBASE); }
public override void METHOD_NAME() { if (this.Read(this.skipBuffer) != -LITERAL_INT || this.actualSize != this.expectedSize) { throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().packfileCorruptionDetected, JGitText.Get().wrongDecompressedLength)); } int VAR_INT = this._enclosing.bAvail - this.inf.RemainingInput; if (LITERAL_INT < VAR_INT) { this._enclosing.OnObjectData(this.src, this._enclosing.buf, this.p, VAR_INT); this._enclosing.Use(VAR_INT); } this.inf.Reset(); }
public virtual DescribeModelPackageResponse METHOD_NAME(DescribeModelPackageRequest VAR_DESCRIBEMODELPACKAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(VAR_DESCRIBEMODELPACKAGEREQUEST, VAR_VAR); }
public void METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE, RecordStream VAR_RECORDSTREAM, SharedValueManager VAR_SHAREDVALUEMANAGER) { if (VAR_CELLVALUERECORDINTERFACE is FormulaRecord) { FormulaRecord VAR_FORMULARECORD = (FormulaRecord)VAR_CELLVALUERECORDINTERFACE; StringRecord VAR_STRINGRECORD = LITERAL_NULL; Type VAR_TYPE = VAR_RECORDSTREAM.PeekNextClass(); if (VAR_TYPE == typeof(StringRecord)) { VAR_STRINGRECORD = (StringRecord)VAR_RECORDSTREAM.GetNext(); } else { VAR_STRINGRECORD = LITERAL_NULL; } InsertCell(new FormulaRecordAggregate(VAR_FORMULARECORD, VAR_STRINGRECORD, VAR_SHAREDVALUEMANAGER)); } else { InsertCell(VAR_CELLVALUERECORDINTERFACE); } }
public override object METHOD_NAME() { return new DeflateDecompressor(); }
public virtual UpdateS3ResourcesResponse METHOD_NAME(UpdateS3ResourcesRequest VAR_UPDATES3RESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(VAR_UPDATES3RESOURCESREQUEST, VAR_VAR); }
public GroupQueryNode(IQueryNode VAR_IQUERYNODE) { if (VAR_IQUERYNODE == LITERAL_NULL) { throw new QueryNodeError(new Message(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, LITERAL_STRING, LITERAL_STRING)); } Allocate(); IsLeaf = false; Add(VAR_IQUERYNODE); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(GetFirstPathElement()); foreach (QueryText pathelement in GetPathElements(LITERAL_INT)) { string VAR_STRING = VAR_IESCAPEQUERYSYNTAX.Escape(new StringCharSequence(pathelement.Value), CultureInfo.InvariantCulture, EscapeQuerySyntaxType.STRING).ToString(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); } return VAR_STRINGBUILDER.ToString(); }
public void METHOD_NAME() { HSSFComment VAR_HSSFCOMMENT = _sheet.FindCellComment(_record.Row, _record.Column); comment = LITERAL_NULL; if (LITERAL_NULL == VAR_HSSFCOMMENT) { return; } (_sheet.DrawingPatriarch as HSSFPatriarch).RemoveShape(VAR_HSSFCOMMENT); }
public void METHOD_NAME() { count = LITERAL_INT; Debug.Assert(forwardCount == LITERAL_INT, LITERAL_STRING + pos + LITERAL_STRING + forwardCount); }
public virtual ActivateUserResponse METHOD_NAME(ActivateUserRequest VAR_ACTIVATEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ActivateUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ActivateUserResponseUnmarshaller.Instance; return Invoke<ActivateUserResponse>(VAR_ACTIVATEUSERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { throw new System.NotSupportedException(); }
public virtual ModifySnapshotCopyRetentionPeriodResponse METHOD_NAME(ModifySnapshotCopyRetentionPeriodRequest VAR_MODIFYSNAPSHOTCOPYRETENTIONPERIODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySnapshotCopyRetentionPeriodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyRetentionPeriodResponse>(VAR_MODIFYSNAPSHOTCOPYRETENTIONPERIODREQUEST, VAR_VAR); }
public virtual DeleteClusterSubnetGroupResponse METHOD_NAME(DeleteClusterSubnetGroupRequest VAR_DELETECLUSTERSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(VAR_DELETECLUSTERSUBNETGROUPREQUEST, VAR_VAR); }
public static string METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public virtual int METHOD_NAME() { return -LITERAL_INT; }
public virtual StopTaskResponse METHOD_NAME(StopTaskRequest VAR_STOPTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(VAR_STOPTASKREQUEST, VAR_VAR); }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { if (!VAR_BYTESREF.Equals(term_Renamed)) { state.CopyFrom(VAR_TERMSTATE); term_Renamed = BytesRef.DeepCopyOf(VAR_BYTESREF); seekPending = true; } }
public SeriesToChartGroupRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_chartGroupIndex = VAR_RECORDINPUTSTREAM.ReadShort(); }
public static void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT, String VAR_STRING) { bool VAR_BOOL = HasMultibyte(VAR_STRING); VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_BOOL ? LITERAL_INT : LITERAL_INT); if (VAR_BOOL) { PutUnicodeLE(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } else { PutCompressedUnicode(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } }
public virtual AuthorizeSecurityGroupIngressResponse METHOD_NAME(AuthorizeSecurityGroupIngressRequest VAR_AUTHORIZESECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(VAR_AUTHORIZESECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING) { CheckFileNames(new[] { VAR_STRING }); setFiles.Add(VAR_STRING); }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { mWidth = VAR_INT; mHeight = VAR_INT; }
public void METHOD_NAME(bool VAR_BOOL) { if (VAR_BOOL) { this.reachesIntoOuterContext |= SUPPRESS_PRECEDENCE_FILTER; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public virtual IntervalSet METHOD_NAME(ATNState VAR_ATNSTATE, RuleContext VAR_RULECONTEXT) { return METHOD_NAME(VAR_ATNSTATE, LITERAL_NULL, VAR_RULECONTEXT); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(OptionFlags); VAR_ILITTLEENDIANOUTPUT.WriteShort(RowHeight); }
public Builder(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public Hashtable(int VAR_INT, float VAR_FLOAT) : this(capacity) { if (VAR_FLOAT <= LITERAL_INT || float.IsNaN(VAR_FLOAT)) { throw new System.ArgumentException(LITERAL_STRING + VAR_FLOAT); } }
public virtual object METHOD_NAME(string VAR_STRING) { int VAR_INT = normalCompletion.GetBucket(VAR_STRING); return VAR_INT == -LITERAL_INT ? (long? )LITERAL_NULL : VAR_INT; }
public virtual ListHyperParameterTuningJobsResponse METHOD_NAME(ListHyperParameterTuningJobsRequest VAR_LISTHYPERPARAMETERTUNINGJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(VAR_LISTHYPERPARAMETERTUNINGJOBSREQUEST, VAR_VAR); }
public virtual DeleteTableResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new DeleteTableRequest(); VAR_VAR.TableName = VAR_STRING; return METHOD_NAME(VAR_VAR); }
protected internal override bool METHOD_NAME(TextFragment VAR_TEXTFRAGMENT, TextFragment VAR_TEXTFRAGMENT) { if (VAR_TEXTFRAGMENT.Score == VAR_TEXTFRAGMENT.Score) return VAR_TEXTFRAGMENT.FragNum > VAR_TEXTFRAGMENT.FragNum; else return VAR_TEXTFRAGMENT.Score < VAR_TEXTFRAGMENT.Score; }
public void METHOD_NAME(int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT); Debug.Assert(VAR_INT <= nextPos); int VAR_INT = nextPos - VAR_INT; Debug.Assert(VAR_INT <= count, LITERAL_STRING + VAR_INT + LITERAL_STRING + count); Debug.Assert(VAR_INT <= buffer.Length, LITERAL_STRING + VAR_INT + LITERAL_STRING + buffer.Length); count = VAR_INT; }
public virtual UpdateHITTypeOfHITResponse METHOD_NAME(UpdateHITTypeOfHITRequest VAR_UPDATEHITTYPEOFHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(VAR_UPDATEHITTYPEOFHITREQUEST, VAR_VAR); }
public virtual UpdateRecommenderConfigurationResponse METHOD_NAME(UpdateRecommenderConfigurationRequest VAR_UPDATERECOMMENDERCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(VAR_UPDATERECOMMENDERCONFIGURATIONREQUEST, VAR_VAR); }
public int METHOD_NAME(object VAR_OBJECT) { BytesRef VAR_BYTESREF = VAR_OBJECT as BytesRef; Debug.Assert(VAR_BYTESREF != LITERAL_NULL); return utf8SortedAsUnicodeSortOrder.Compare(this, VAR_BYTESREF); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT > LITERAL_INT && VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } if (VAR_INT > LITERAL_INT && (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) && useNynorsk))) { return VAR_INT - LITERAL_INT; } if (VAR_INT > LITERAL_INT && (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) && useNynorsk))) { return VAR_INT - LITERAL_INT; } if (VAR_INT > LITERAL_INT) { switch (VAR_CHAR[][VAR_INT - LITERAL_INT]) { case LITERAL_CHAR: case LITERAL_CHAR: return VAR_INT - LITERAL_INT; } } return VAR_INT; }
public virtual DescribeDBSnapshotsResponse METHOD_NAME(DescribeDBSnapshotsRequest VAR_DESCRIBEDBSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(VAR_DESCRIBEDBSNAPSHOTSREQUEST, VAR_VAR); }
public SortedSetDocValuesFacetField(string VAR_STRING, string VAR_STRING) : base(LITERAL_STRING, TYPE) { FacetField.VerifyLabel(VAR_STRING); FacetField.VerifyLabel(VAR_STRING); this.Dim = VAR_STRING; this.Label = VAR_STRING; }
public virtual CreateDocumentationPartResponse METHOD_NAME(CreateDocumentationPartRequest VAR_CREATEDOCUMENTATIONPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(VAR_CREATEDOCUMENTATIONPARTREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return value; }
public override java.nio.ShortBuffer METHOD_NAME() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse METHOD_NAME(UpdateDataSourcePermissionsRequest VAR_UPDATEDATASOURCEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(VAR_UPDATEDATASOURCEPERMISSIONSREQUEST, VAR_VAR); }
public static Record METHOD_NAME(RecordInputStream VAR_RECORDINPUTSTREAM) { if (_recordCreatorsById.ContainsKey(VAR_RECORDINPUTSTREAM.Sid)) { I_RecordCreator VAR_I_RECORDCREATOR = _recordCreatorsById[VAR_RECORDINPUTSTREAM.Sid]; return VAR_I_RECORDCREATOR.Create(VAR_RECORDINPUTSTREAM); } else { return new UnknownRecord(VAR_RECORDINPUTSTREAM); } }
public override int METHOD_NAME() { return this._enclosing.mTabLayout.getChildCount(); }
public virtual DeleteApplicationReferenceDataSourceResponse METHOD_NAME(DeleteApplicationReferenceDataSourceRequest VAR_DELETEAPPLICATIONREFERENCEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(VAR_DELETEAPPLICATIONREFERENCEDATASOURCEREQUEST, VAR_VAR); }
public virtual CreateProjectVersionResponse METHOD_NAME(CreateProjectVersionRequest VAR_CREATEPROJECTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(VAR_CREATEPROJECTVERSIONREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position); }
public sealed override byte METHOD_NAME() { throw new System.NotImplementedException(); }
public override java.nio.LongBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_LONG; return this; }
public StoredField(string VAR_STRING, float VAR_FLOAT) : base(name, TYPE) { FieldsData = new Single(VAR_FLOAT); }
public virtual IntervalSet METHOD_NAME() { ATN VAR_ATN = Interpreter.atn; ATNState VAR_ATNSTATE = VAR_ATN.states[State]; return VAR_ATN.NextTokens(VAR_ATNSTATE); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ReadOnly == LITERAL_INT ? LITERAL_STRING : LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Password)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Username).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
protected internal SubmoduleInitCommand(Repository VAR_REPOSITORY) : base(repo) { paths = new AList<string>(); }
public virtual void METHOD_NAME(string VAR_STRING, AnyObjectId VAR_ANYOBJECTID) { if (!Repository.IsValidRefName(VAR_STRING)) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidRefName, VAR_STRING)); } if (include.ContainsKey(VAR_STRING)) { throw new InvalidOperationException(JGitText.Get().duplicateRef + VAR_STRING); } include.Put(VAR_STRING, VAR_ANYOBJECTID.ToObjectId()); }
public virtual EnableSnapshotCopyResponse METHOD_NAME(EnableSnapshotCopyRequest VAR_ENABLESNAPSHOTCOPYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableSnapshotCopyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableSnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(VAR_ENABLESNAPSHOTCOPYREQUEST, VAR_VAR); }
public virtual ValueFiller METHOD_NAME() { return new ValueFillerAnonymousInnerClassHelper(this); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Pane); VAR_ILITTLEENDIANOUTPUT.WriteShort(ActiveCellRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(ActiveCellCol); VAR_ILITTLEENDIANOUTPUT.WriteShort(ActiveCellRef); int VAR_INT = field_6_refs.Length; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int i = LITERAL_INT; i < field_6_refs.Length; i++) { field_6_refs[i].METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } }
public static Counter METHOD_NAME() { return METHOD_NAME(false); }
public virtual int METHOD_NAME(string VAR_STRING, int VAR_INT) { int[] VAR_INT[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_INT[] = (int[])VAR_OBJECT; return VAR_INT[][roundNumber % VAR_INT[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_INT.ToString(CultureInfo.InvariantCulture); } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return int.Parse(VAR_STRING, CultureInfo.InvariantCulture); } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_INT[] = PropToInt32Array(VAR_STRING); valByRound[VAR_STRING] = VAR_INT[]; return VAR_INT[][roundNumber % VAR_INT[].Length]; }
public void METHOD_NAME() { if (records.Tabpos > LITERAL_INT) { TabIdRecord VAR_TABIDRECORD = (TabIdRecord)records[(records.Tabpos)]; if (VAR_TABIDRECORD._tabids.Length < boundsheets.Count) { FixTabIdRecord(); } } }
public LimitTokenCountAnalyzer(Analyzer VAR_ANALYZER, int VAR_INT, bool VAR_BOOL) : base(@delegate.Strategy) { this.VAR_ANALYZER = VAR_ANALYZER; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public ExternalBookBlock(int VAR_INT) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)VAR_INT); _externalNameRecords = new ExternalNameRecord[LITERAL_INT]; _crnBlocks = new CRNBlock[LITERAL_INT]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Protect).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual NGit.Api.PushCommand METHOD_NAME(bool VAR_BOOL) { CheckCallable(); this.VAR_BOOL = VAR_BOOL; return this; }
public int METHOD_NAME(SearcherTracker VAR_SEARCHERTRACKER) { return VAR_SEARCHERTRACKER.RecordTimeSec.METHOD_NAME(RecordTimeSec); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ReverseStringFilter(m_luceneMatchVersion, VAR_TOKENSTREAM); }
public BlockList() { directory = NGit.Util.BlockList<T>.NewDirectory(LITERAL_INT); directory[LITERAL_INT] = NGit.Util.BlockList<T>.NewBlock(); tailBlock = directory[LITERAL_INT]; }
public QueryScorer(WeightedSpanTerm[] VAR_WEIGHTEDSPANTERM[]) { this.fieldWeightedSpanTerms = new JCG.Dictionary<string, WeightedSpanTerm>(VAR_WEIGHTEDSPANTERM[].Length); foreach (WeightedSpanTerm t in VAR_WEIGHTEDSPANTERM[]) { if (!fieldWeightedSpanTerms.TryGetValue(t.Term, out WeightedSpanTerm existingTerm) || (existingTerm == LITERAL_NULL) || (existingTerm.Weight < t.Weight)) { fieldWeightedSpanTerms[t.Term] = t; maxTermWeight = Math.Max(maxTermWeight, t.Weight); } } skipInitExtractor = true; }
public override bool METHOD_NAME(object VAR_OBJECT) { Debug.Assert(NeverEquals(VAR_OBJECT)); if (VAR_OBJECT is MergedGroup<T> otherMergedGroup) { if (groupValue == LITERAL_NULL) { return otherMergedGroup == LITERAL_NULL; } else { return groupValueIsValueType ? JCG.EqualityComparer<T>.Default.METHOD_NAME(groupValue, otherMergedGroup.groupValue) : J2N.Collections.StructuralEqualityComparer.Default.METHOD_NAME(groupValue, otherMergedGroup.groupValue); } } else { return false; } }
public java.nio.charset.Charset METHOD_NAME() { return cs; }
public virtual DescribeExperimentResponse METHOD_NAME(DescribeExperimentRequest VAR_DESCRIBEEXPERIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(VAR_DESCRIBEEXPERIMENTREQUEST, VAR_VAR); }
public EscherGraphics(HSSFShapeGroup VAR_HSSFSHAPEGROUP, HSSFWorkbook VAR_HSSFWORKBOOK, Color VAR_COLOR, float VAR_FLOAT) { this.VAR_HSSFSHAPEGROUP = VAR_HSSFSHAPEGROUP; this.VAR_HSSFWORKBOOK = VAR_HSSFWORKBOOK; this.VAR_FLOAT = VAR_FLOAT; this.verticalPixelsPerPoint = LITERAL_INT / VAR_FLOAT; this.font = new Font(LITERAL_STRING, LITERAL_INT); this.foreground = VAR_COLOR; }
public virtual string METHOD_NAME() { return patternText; }
public virtual DeleteRouteTableResponse METHOD_NAME(DeleteRouteTableRequest VAR_DELETEROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(VAR_DELETEROUTETABLEREQUEST, VAR_VAR); }
public virtual AssociateVPCWithHostedZoneResponse METHOD_NAME(AssociateVPCWithHostedZoneRequest VAR_ASSOCIATEVPCWITHHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(VAR_ASSOCIATEVPCWITHHOSTEDZONEREQUEST, VAR_VAR); }
public virtual PutIntegrationResponse METHOD_NAME(PutIntegrationRequest VAR_PUTINTEGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(VAR_PUTINTEGRATIONREQUEST, VAR_VAR); }
public SimpleEntry(K VAR_K, V VAR_V) { key = VAR_K; value = VAR_V; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public virtual DisassociateConnectionFromLagResponse METHOD_NAME(DisassociateConnectionFromLagRequest VAR_DISASSOCIATECONNECTIONFROMLAGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(VAR_DISASSOCIATECONNECTIONFROMLAGREQUEST, VAR_VAR); }
public virtual FileMode METHOD_NAME() { return oldMode; }
public override string METHOD_NAME() { return mapEntry.METHOD_NAME(); }
public virtual StopKeyPhrasesDetectionJobResponse METHOD_NAME(StopKeyPhrasesDetectionJobRequest VAR_STOPKEYPHRASESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(VAR_STOPKEYPHRASESDETECTIONJOBREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Row).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Column).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListDominantLanguageDetectionJobsResponse METHOD_NAME(ListDominantLanguageDetectionJobsRequest VAR_LISTDOMINANTLANGUAGEDETECTIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(VAR_LISTDOMINANTLANGUAGEDETECTIONJOBSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + Start + LITERAL_STRING + Length + LITERAL_STRING + ReaderIndex; }
public static int METHOD_NAME(byte VAR_BYTE) { sbyte VAR_SBYTE = digits16[VAR_BYTE]; if (VAR_SBYTE < LITERAL_INT) { throw new IndexOutOfRangeException(); } return VAR_SBYTE; }
public Attribute(string VAR_STRING, string VAR_STRING) { _name = VAR_STRING; _value = VAR_STRING; }
public virtual DescribeStackSetOperationResponse METHOD_NAME(DescribeStackSetOperationRequest VAR_DESCRIBESTACKSETOPERATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(VAR_DESCRIBESTACKSETOPERATIONREQUEST, VAR_VAR); }
public ICell METHOD_NAME(short VAR_SHORT) { int VAR_INT = VAR_SHORT & LITERAL_INT; return METHOD_NAME(VAR_INT); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { WriteContinueIfRequired(VAR_BYTE[].Length); _ulrOutput.METHOD_NAME(VAR_BYTE[]); }
public ResetImageAttributeRequest(string VAR_STRING, ResetImageAttributeName VAR_RESETIMAGEATTRIBUTENAME) { _imageId = VAR_STRING; _attribute = VAR_RESETIMAGEATTRIBUTENAME; }
public virtual void METHOD_NAME() { resultContents = LITERAL_NULL; }
public virtual ObjectId METHOD_NAME() { return GetLeaf().METHOD_NAME(); }
public virtual UndeprecateDomainResponse METHOD_NAME(UndeprecateDomainRequest VAR_UNDEPRECATEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance; return Invoke<UndeprecateDomainResponse>(VAR_UNDEPRECATEDOMAINREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_string.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(_is16bitUnicode ? LITERAL_INT : LITERAL_INT); if (_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(field_3_string, VAR_ILITTLEENDIANOUTPUT); } }
public virtual DeleteQueueResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new DeleteQueueRequest(); VAR_VAR.QueueUrl = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual void METHOD_NAME(bool VAR_BOOL) { checkEofAfterPackFooter = VAR_BOOL; }
public virtual void METHOD_NAME() { int VAR_INT = beginA; int VAR_INT = endA; beginA = beginB; endA = endB; beginB = VAR_INT; endB = VAR_INT; }
public virtual int METHOD_NAME() { return packedGitWindowSize; }
public virtual PutMetricDataResponse METHOD_NAME(PutMetricDataRequest VAR_PUTMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(VAR_PUTMETRICDATAREQUEST, VAR_VAR); }
public virtual GetCelebrityRecognitionResponse METHOD_NAME(GetCelebrityRecognitionRequest VAR_GETCELEBRITYRECOGNITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(VAR_GETCELEBRITYRECOGNITIONREQUEST, VAR_VAR); }
public CreateQueueRequest(string VAR_STRING) { _queueName = VAR_STRING; }
public Area3DPxg(int VAR_INT, SheetIdentifier VAR_SHEETIDENTIFIER, AreaReference VAR_AREAREFERENCE) : base(arearef) { this.VAR_INT = VAR_INT; this.firstSheetName = VAR_SHEETIDENTIFIER.SheetId.Name; if (VAR_SHEETIDENTIFIER is SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)VAR_SHEETIDENTIFIER).LastSheetIdentifier.Name; } else { this.lastSheetName = LITERAL_NULL; } }
public virtual void METHOD_NAME(long VAR_LONG) { t0 = VAR_LONG; timeout = t0 + ticksAllowed; }
public virtual MoveAddressToVpcResponse METHOD_NAME(MoveAddressToVpcRequest VAR_MOVEADDRESSTOVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(VAR_MOVEADDRESSTOVPCREQUEST, VAR_VAR); }
public override string METHOD_NAME() { string VAR_STRING = m_collectionModel.GetName(); if (VAR_STRING != LITERAL_NULL) { return string.Format(LITERAL_STRING, GetName(), VAR_STRING); } else { return string.Format(LITERAL_STRING, GetName()); } }
public virtual DescribeLagsResponse METHOD_NAME(DescribeLagsRequest VAR_DESCRIBELAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(VAR_DESCRIBELAGSREQUEST, VAR_VAR); }
public AreaEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (_refEval == LITERAL_NULL) { return _areaEval.METHOD_NAME(VAR_INT, VAR_INT, VAR_INT, VAR_INT); } return _refEval.METHOD_NAME(VAR_INT, VAR_INT, VAR_INT, VAR_INT); }
public override java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_SHORT[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_SHORT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public override void METHOD_NAME(String VAR_STRING) { this._cat = VAR_STRING; }
public override void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse METHOD_NAME(DescribeImportImageTasksRequest VAR_DESCRIBEIMPORTIMAGETASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(VAR_DESCRIBEIMPORTIMAGETASKSREQUEST, VAR_VAR); }
public ColumnInfoRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _first_col = VAR_RECORDINPUTSTREAM.ReadUShort(); _last_col = VAR_RECORDINPUTSTREAM.ReadUShort(); _col_width = VAR_RECORDINPUTSTREAM.ReadUShort(); _xf_index = VAR_RECORDINPUTSTREAM.ReadUShort(); _options = VAR_RECORDINPUTSTREAM.ReadUShort(); switch (VAR_RECORDINPUTSTREAM.Remaining) { case LITERAL_INT: field_6_reserved = VAR_RECORDINPUTSTREAM.ReadUShort(); break; case LITERAL_INT: field_6_reserved = VAR_RECORDINPUTSTREAM.ReadByte(); break; case LITERAL_INT: field_6_reserved = LITERAL_INT; break; default: throw new Exception(LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING); } }
public Status(IndexDiff VAR_INDEXDIFF) : base() { this.VAR_INDEXDIFF = VAR_INDEXDIFF; clean = VAR_INDEXDIFF.GetAdded().IsEmpty() && VAR_INDEXDIFF.GetChanged().IsEmpty() && VAR_INDEXDIFF.GetRemoved().IsEmpty() && VAR_INDEXDIFF.GetMissing().IsEmpty() && VAR_INDEXDIFF.GetModified().IsEmpty() && VAR_INDEXDIFF.GetUntracked().IsEmpty() && VAR_INDEXDIFF.GetConflicting().IsEmpty(); }
public virtual CreateExperimentResponse METHOD_NAME(CreateExperimentRequest VAR_CREATEEXPERIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(VAR_CREATEEXPERIMENTREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { return this; }
public override java.nio.FloatBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.FloatBuffer VAR_JAVA.NIO.FLOATBUFFER = new java.nio.FloatToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.FLOATBUFFER; }
public virtual DescribeSnapshotSchedulesResponse METHOD_NAME(DescribeSnapshotSchedulesRequest VAR_DESCRIBESNAPSHOTSCHEDULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(VAR_DESCRIBESNAPSHOTSCHEDULESREQUEST, VAR_VAR); }
public virtual ListImagesResponse METHOD_NAME(ListImagesRequest VAR_LISTIMAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListImagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(VAR_LISTIMAGESREQUEST, VAR_VAR); }
public Diff(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { INSERT = VAR_INT; DELETE = VAR_INT; REPLACE = VAR_INT; NOOP = VAR_INT; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public static void METHOD_NAME(String[] VAR_STRING[], ForkedEvaluator[] VAR_FORKEDEVALUATOR[]) { WorkbookEvaluator[] VAR_WORKBOOKEVALUATOR[] = new WorkbookEvaluator[VAR_FORKEDEVALUATOR[].Length]; for (int i = LITERAL_INT; i < VAR_WORKBOOKEVALUATOR[].Length; i++) { VAR_WORKBOOKEVALUATOR[][i] = VAR_FORKEDEVALUATOR[][i]._evaluator; } CollaboratingWorkbooksEnvironment.Setup(VAR_STRING[], VAR_WORKBOOKEVALUATOR[]); }
public ListPhotoTagsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public RandomSamplingFacetsCollector(int VAR_INT, long VAR_LONG) : base(false) { this.VAR_INT = VAR_INT; this.random = new XORShift64Random(VAR_LONG); this.sampledDocs = LITERAL_NULL; }
public virtual AllocateStaticIpResponse METHOD_NAME(AllocateStaticIpRequest VAR_ALLOCATESTATICIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(VAR_ALLOCATESTATICIPREQUEST, VAR_VAR); }
public FeatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { futureHeader = new FtrHeader(VAR_RECORDINPUTSTREAM); isf_sharedFeatureType = VAR_RECORDINPUTSTREAM.ReadShort(); reserved1 = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); reserved2 = VAR_RECORDINPUTSTREAM.ReadInt(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); cbFeatData = VAR_RECORDINPUTSTREAM.ReadInt(); reserved3 = VAR_RECORDINPUTSTREAM.ReadShort(); cellRefs = new CellRangeAddress[VAR_INT]; for (int i = LITERAL_INT; i < cellRefs.Length; i++) { cellRefs[i] = new CellRangeAddress(VAR_RECORDINPUTSTREAM); } switch (isf_sharedFeatureType) { case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION: sharedFeature = new FeatProtection(VAR_RECORDINPUTSTREAM); break; case FeatHdrRecord.SHAREDFEATURES_ISFFEC2: sharedFeature = new FeatFormulaErr2(VAR_RECORDINPUTSTREAM); break; case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID: sharedFeature = new FeatSmartTag(VAR_RECORDINPUTSTREAM); break; default: logger.Log(POILogger.ERROR, LITERAL_STRING + isf_sharedFeatureType + LITERAL_STRING); break; } }
public virtual RevCommit METHOD_NAME(RevCommit VAR_REVCOMMIT) { Ref VAR_REF = repo.GetRef(Constants.HEAD); if (VAR_REF == LITERAL_NULL || VAR_REF.GetObjectId() == LITERAL_NULL) { throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, Constants.HEAD)); } ObjectId VAR_OBJECTID = VAR_REF.GetObjectId(); if (VAR_OBJECTID == LITERAL_NULL) { throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, Constants.HEAD)); } RevCommit VAR_REVCOMMIT = walk.LookupCommit(VAR_OBJECTID); if (walk.IsMergedInto(VAR_REVCOMMIT, VAR_REVCOMMIT)) { return VAR_REVCOMMIT; } string VAR_STRING; if (VAR_REF.IsSymbolic()) { VAR_STRING = VAR_REF.GetTarget().GetName(); } else { VAR_STRING = LITERAL_STRING; } return METHOD_NAME(VAR_STRING, VAR_REVCOMMIT, VAR_REVCOMMIT); }
public virtual CreateSnapshotScheduleResponse METHOD_NAME(CreateSnapshotScheduleRequest VAR_CREATESNAPSHOTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(VAR_CREATESNAPSHOTSCHEDULEREQUEST, VAR_VAR); }
public Record METHOD_NAME() { if (_nextIndex >= _list.Count) { throw new Exception(LITERAL_STRING); } _countRead++; return (Record)_list[_nextIndex++]; }
public override string METHOD_NAME() { return RawParseUtils.Decode(buf.ToByteArray()); }
public ListTablesRequest(string VAR_STRING) { _exclusiveStartTableName = VAR_STRING; }
public virtual EnableAlarmActionsResponse METHOD_NAME(EnableAlarmActionsRequest VAR_ENABLEALARMACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(VAR_ENABLEALARMACTIONSREQUEST, VAR_VAR); }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { State VAR_STATE = (State)VAR_OBJECT; return is_final == VAR_STATE.is_final && Arrays.METHOD_NAME(this.labels, VAR_STATE.labels) && ReferenceEquals(this.states, VAR_STATE.states); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new EnglishPossessiveFilter(m_luceneMatchVersion, VAR_TOKENSTREAM); }
public void METHOD_NAME() { _string = CloneStringIfRequired(); _string.METHOD_NAME(); AddToSSTIfRequired(); }
public override int METHOD_NAME(int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); Debug.Assert(VAR_INT >= LITERAL_INT && VAR_INT < valueCount); VAR_INT = Math.Min(VAR_INT, valueCount - VAR_INT); Arrays.Fill(VAR_LONG[], VAR_INT, VAR_INT + VAR_INT, LITERAL_INT); return VAR_INT; }
public virtual DeleteRouteResponseResponse METHOD_NAME(DeleteRouteResponseRequest VAR_DELETEROUTERESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(VAR_DELETEROUTERESPONSEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse METHOD_NAME(CreatePresignedDomainUrlRequest VAR_CREATEPRESIGNEDDOMAINURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(VAR_CREATEPRESIGNEDDOMAINURLREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { doWrite(new char[] { (char)VAR_INT }, LITERAL_INT, LITERAL_INT); }
public SSTRecord METHOD_NAME() { return sstRecord; }
public override string METHOD_NAME() { return LITERAL_STRING + term + LITERAL_STRING + field + LITERAL_STRING + value; }
public override bool METHOD_NAME(FuzzySet VAR_FUZZYSET, FieldInfo VAR_FIELDINFO) { return VAR_FUZZYSET.GetSaturation() > LITERAL_FLOAT; }
public Builder(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public override string METHOD_NAME() { return GetType().Name + LITERAL_STRING + maxBasicQueries + LITERAL_STRING + queriesMade + LITERAL_STRING; }
public virtual DeleteDataSourceResponse METHOD_NAME(DeleteDataSourceRequest VAR_DELETEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(VAR_DELETEDATASOURCEREQUEST, VAR_VAR); }
public virtual RebootNodeResponse METHOD_NAME(RebootNodeRequest VAR_REBOOTNODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootNodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(VAR_REBOOTNODEREQUEST, VAR_VAR); }
public void METHOD_NAME() { ConvertRawBytesToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse METHOD_NAME(CreateOrUpdateTagsRequest VAR_CREATEORUPDATETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(VAR_CREATEORUPDATETAGSREQUEST, VAR_VAR); }
public FileSnapshot METHOD_NAME() { return snapShot; }
public Stream METHOD_NAME(string VAR_STRING) { Stream VAR_STREAM = this.clazz.GetTypeInfo().Assembly.FindAndGetManifestResourceStream(clazz, VAR_STRING); if (VAR_STREAM == LITERAL_NULL) { throw new IOException(LITERAL_STRING + VAR_STRING); } return VAR_STREAM; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_sid)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_data.Length); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_data)); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual int METHOD_NAME() { return index; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (IsDefaultField(this.m_field)) { return LITERAL_STRING + GetTermEscapeQuoted(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING; } else { return this.m_field + LITERAL_STRING + LITERAL_STRING + GetTermEscapeQuoted(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING; } }
public override Object METHOD_NAME() { CalcModeRecord VAR_CALCMODERECORD = new CalcModeRecord(); VAR_CALCMODERECORD.field_1_calcmode = field_1_calcmode; return VAR_CALCMODERECORD; }
public virtual bool METHOD_NAME() { return output; }
public virtual CreateNetworkInterfaceResponse METHOD_NAME(CreateNetworkInterfaceRequest VAR_CREATENETWORKINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(VAR_CREATENETWORKINTERFACEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse METHOD_NAME(StopDominantLanguageDetectionJobRequest VAR_STOPDOMINANTLANGUAGEDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(VAR_STOPDOMINANTLANGUAGEDETECTIONJOBREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { connectionTimeoutInMilliseconds = VAR_INT; }
public virtual GetGatewayGroupResponse METHOD_NAME(GetGatewayGroupRequest VAR_GETGATEWAYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(VAR_GETGATEWAYGROUPREQUEST, VAR_VAR); }
public override java.nio.FloatBuffer METHOD_NAME() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + _position); }
public static string METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>, string VAR_STRING, string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); int VAR_INT = LITERAL_INT; int VAR_INT = VAR_ICOLLECTION<STRING>.Count - LITERAL_INT; foreach (string part in VAR_ICOLLECTION<STRING>) { VAR_STRINGBUILDER.Append(part); if (VAR_INT == VAR_INT - LITERAL_INT) { VAR_STRINGBUILDER.Append(VAR_STRING); } else { if (VAR_INT != VAR_INT) { VAR_STRINGBUILDER.Append(VAR_STRING); } } VAR_INT++; } return VAR_STRINGBUILDER.ToString(); }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME() + LITERAL_STRING + b.METHOD_NAME() + LITERAL_STRING; }
public ListSubscriptionsByTopicRequest(string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _nextToken = VAR_STRING; }
public override byte METHOD_NAME() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse METHOD_NAME(TerminateClientVpnConnectionsRequest VAR_TERMINATECLIENTVPNCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(VAR_TERMINATECLIENTVPNCONNECTIONSREQUEST, VAR_VAR); }
public ReceiveMessageRequest(string VAR_STRING) { _queueUrl = VAR_STRING; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_barSpace); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_categorySpace); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_formatFlags); }
public override object METHOD_NAME(object VAR_OBJECT, object VAR_OBJECT) { return outputs.METHOD_NAME((T)VAR_OBJECT, (T)VAR_OBJECT); }
public virtual CreateVariableResponse METHOD_NAME(CreateVariableRequest VAR_CREATEVARIABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVariableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(VAR_CREATEVARIABLEREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, byte[] VAR_BYTE[]) { if (VAR_INT + VAR_BYTE[].Length > VAR_BYTE[].Length) { return -LITERAL_INT; } for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++, VAR_INT++) { if (VAR_BYTE[][VAR_INT] != VAR_BYTE[][i]) { return -LITERAL_INT; } } return VAR_INT; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; field_1_rectX1 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_2_rectY1 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_3_rectX2 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_4_rectY2 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; VAR_INT -= VAR_INT; if (VAR_INT != LITERAL_INT) throw new RecordFormatException(LITERAL_STRING + VAR_INT); return LITERAL_INT + VAR_INT + VAR_INT; }
public virtual CreateCloudFrontOriginAccessIdentityResponse METHOD_NAME(CreateCloudFrontOriginAccessIdentityRequest VAR_CREATECLOUDFRONTORIGINACCESSIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(VAR_CREATECLOUDFRONTORIGINACCESSIDENTITYREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return getFeature(org.xmlpull.v1.XmlPullParserClass.FEATURE_PROCESS_NAMESPACES); }
public virtual void METHOD_NAME(bool VAR_BOOL) { overridable = VAR_BOOL; }
return className;
public virtual DirectoryReader METHOD_NAME() { lock (this) { if (indexReader != LITERAL_NULL) { indexReader.IncRef(); } return indexReader; } }
public virtual int METHOD_NAME(int VAR_INT) { return binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); }
public BlankRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_row = VAR_RECORDINPUTSTREAM.ReadUShort(); field_2_col = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_xf = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override long METHOD_NAME() { return length_Renamed; }
public PasswordRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_password = VAR_RECORDINPUTSTREAM.ReadShort(); }
public HashMap(int VAR_INT, float VAR_FLOAT) : this(capacity) { if (VAR_FLOAT <= LITERAL_INT || float.IsNaN(VAR_FLOAT)) { throw new System.ArgumentException(LITERAL_STRING + VAR_FLOAT); } }
public override void METHOD_NAME() { long VAR_LONG = DateTime.UtcNow.Ticks * LITERAL_INT; while (!finish) { bool VAR_BOOL; lock (this) VAR_BOOL = waitingGen > searchingGen; long VAR_LONG = VAR_LONG + (VAR_BOOL ? targetMinStaleNS : targetMaxStaleNS); long VAR_LONG = VAR_LONG - Time.NanoTime(); if (VAR_LONG > LITERAL_INT) try { reopenCond.WaitOne(TimeSpan.FromMilliseconds(VAR_LONG / Time.MILLISECONDS_PER_NANOSECOND)); } catch (ThreadInterruptedException ie) { Thread.CurrentThread.Interrupt(); return; } if (finish) { break; } VAR_LONG = Time.NanoTime(); refreshStartGen = writer.GetAndIncrementGeneration(); try { manager.MaybeRefreshBlocking(); } catch (System.IO.IOException ioe) { throw new Exception(ioe.ToString(), ioe); } } RefreshDone(); }
public DeleteLoginProfileRequest(string VAR_STRING) { _userName = VAR_STRING; }
public virtual E METHOD_NAME() { return (_size == LITERAL_INT) ? default(E) : removeFirstImpl(); }
public CreatePhotoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { if (VAR_INT > VAR_STRINGBUILDER.Length || VAR_INT < LITERAL_INT) return VAR_INT; int VAR_INT, VAR_INT = m_maxScan; for (VAR_INT = VAR_INT; VAR_INT < VAR_STRINGBUILDER.Length && VAR_INT > LITERAL_INT; VAR_INT--) { if (m_boundaryChars.Contains(VAR_STRINGBUILDER[VAR_INT])) return VAR_INT; VAR_INT++; } return VAR_INT; }
public virtual void METHOD_NAME(ObjectChecker VAR_OBJECTCHECKER) { objCheck = VAR_OBJECTCHECKER; }
public BaseRef(AreaEval VAR_AREAEVAL) { _refEval = LITERAL_NULL; _areaEval = VAR_AREAEVAL; _firstRowIndex = VAR_AREAEVAL.FirstRow; _firstColumnIndex = VAR_AREAEVAL.FirstColumn; _height = VAR_AREAEVAL.LastRow - VAR_AREAEVAL.FirstRow + LITERAL_INT; _width = VAR_AREAEVAL.LastColumn - VAR_AREAEVAL.FirstColumn + LITERAL_INT; }
public virtual CreateVpcEndpointResponse METHOD_NAME(CreateVpcEndpointRequest VAR_CREATEVPCENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(VAR_CREATEVPCENDPOINTREQUEST, VAR_VAR); }
public virtual DeregisterWorkspaceDirectoryResponse METHOD_NAME(DeregisterWorkspaceDirectoryRequest VAR_DEREGISTERWORKSPACEDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(VAR_DEREGISTERWORKSPACEDIRECTORYREQUEST, VAR_VAR); }
public ChartFRTInfoRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rt = VAR_RECORDINPUTSTREAM.ReadShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadShort(); verOriginator = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); verWriter = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); rgCFRTID = new CFRTID[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { rgCFRTID[i] = new CFRTID(VAR_RECORDINPUTSTREAM); } }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY) { return new StrategyOneSided.OneSide(VAR_REPOSITORY, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse METHOD_NAME(CreateDataSourceFromRedshiftRequest VAR_CREATEDATASOURCEFROMREDSHIFTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(VAR_CREATEDATASOURCEFROMREDSHIFTREQUEST, VAR_VAR); }
public override void METHOD_NAME() { for (int d = LITERAL_INT; d < decisionToDFA.Length; d++) { decisionToDFA[d] = new DFA(atn.GetDecisionState(d), d); } }
public void METHOD_NAME(String VAR_STRING) { int VAR_INT = GetNameIndex(VAR_STRING); METHOD_NAME(VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(Margin).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override Object METHOD_NAME() { return new RefreshAllRecord(_options); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler VAR_QUERYCONFIGHANDLER) : base(queryConfig) { Add(new WildcardQueryNodeProcessor()); Add(new MultiFieldQueryNodeProcessor()); Add(new FuzzyQueryNodeProcessor()); Add(new MatchAllDocsQueryNodeProcessor()); Add(new OpenRangeQueryNodeProcessor()); Add(new NumericQueryNodeProcessor()); Add(new NumericRangeQueryNodeProcessor()); Add(new LowercaseExpandedTermsQueryNodeProcessor()); Add(new TermRangeQueryNodeProcessor()); Add(new AllowLeadingWildcardProcessor()); Add(new AnalyzerQueryNodeProcessor()); Add(new PhraseSlopQueryNodeProcessor()); Add(new BooleanQuery2ModifierNodeProcessor()); Add(new NoChildOptimizationQueryNodeProcessor()); Add(new RemoveDeletedQueryNodesProcessor()); Add(new RemoveEmptyNonLeafQueryNodeProcessor()); Add(new BooleanSingleChildOptimizationQueryNodeProcessor()); Add(new DefaultPhraseSlopQueryNodeProcessor()); Add(new BoostQueryNodeProcessor()); Add(new MultiTermRewriteMethodProcessor()); }
public String METHOD_NAME(String VAR_STRING, bool VAR_BOOL) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (VAR_STRING != LITERAL_NULL) { VAR_STRINGBUILDER.Append(SheetNameFormatter.Format(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING); } CellReference VAR_CELLREFERENCE = new CellReference(FirstRow, FirstColumn, VAR_BOOL, VAR_BOOL); CellReference VAR_CELLREFERENCE = new CellReference(LastRow, LastColumn, VAR_BOOL, VAR_BOOL); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.METHOD_NAME()); if (!VAR_CELLREFERENCE.Equals(VAR_CELLREFERENCE) || IsFullColumnRange || IsFullRowRange) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.METHOD_NAME()); } return VAR_STRINGBUILDER.ToString(); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, byte VAR_BYTE) { throw new System.NotImplementedException(); }
public virtual void METHOD_NAME(int VAR_INT) { _mode = VAR_INT; }
public override java.nio.ShortBuffer METHOD_NAME() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual void METHOD_NAME(int VAR_INT, long VAR_LONG) { if (count < VAR_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } else { if (count == VAR_INT) { Add(VAR_LONG); } else { entries[VAR_INT] = VAR_LONG; } } }
public override java.nio.ByteBuffer METHOD_NAME(float VAR_FLOAT) { throw new java.nio.ReadOnlyBufferException(); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = double.NegativeInfinity; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE = Math.METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE[][i]); } return VAR_DOUBLE; }
public UpdateRepoWebhookRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public DeleteAttributesRequest(string VAR_STRING, string VAR_STRING, List<Attribute> VAR_LIST<ATTRIBUTE>, UpdateCondition VAR_UPDATECONDITION) { _domainName = VAR_STRING; _itemName = VAR_STRING; _attributes = VAR_LIST<ATTRIBUTE>; _expected = VAR_UPDATECONDITION; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < _fieldInfos.Length; i++) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(i).Append(LITERAL_STRING); _fieldInfos[i].AppendDebugInfo(VAR_STRINGBUILDER); VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual bool METHOD_NAME() { if (mergeResult != LITERAL_NULL) { return mergeResult.GetMergeStatus().METHOD_NAME(); } else { if (rebaseResult != LITERAL_NULL) { return rebaseResult.GetStatus().METHOD_NAME(); } } return true; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(new BytesRef(VAR_BYTE[])); }
public virtual DescribeConnectionsResponse METHOD_NAME(DescribeConnectionsRequest VAR_DESCRIBECONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(VAR_DESCRIBECONNECTIONSREQUEST, VAR_VAR); }
public DeletePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public void METHOD_NAME(E VAR_E) { iterator.METHOD_NAME(VAR_E); subList.sizeChanged(true); end++; }
public static java.nio.ByteBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(VAR_INT); }
public virtual SrndQuery METHOD_NAME(int VAR_INT) { return m_queries[VAR_INT]; }
public override float METHOD_NAME(int VAR_INT, string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT, float VAR_FLOAT, float VAR_FLOAT) { if (VAR_INT == LITERAL_INT) { return VAR_FLOAT; } else { return Math.Min(VAR_FLOAT, VAR_FLOAT); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(Row)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(Column)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(XFIndex)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeLogPatternResponse METHOD_NAME(DescribeLogPatternRequest VAR_DESCRIBELOGPATTERNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(VAR_DESCRIBELOGPATTERNREQUEST, VAR_VAR); }
public virtual RegisterTransitGatewayMulticastGroupMembersResponse METHOD_NAME(RegisterTransitGatewayMulticastGroupMembersRequest VAR_REGISTERTRANSITGATEWAYMULTICASTGROUPMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupMembersResponse>(VAR_REGISTERTRANSITGATEWAYMULTICASTGROUPMEMBERSREQUEST, VAR_VAR); }
public virtual GetPhoneNumberSettingsResponse METHOD_NAME(GetPhoneNumberSettingsRequest VAR_GETPHONENUMBERSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(VAR_GETPHONENUMBERSETTINGSREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME() { return data; }
public override bool METHOD_NAME() { return false; }
public DeleteServerCertificateRequest(string VAR_STRING) { _serverCertificateName = VAR_STRING; }
public java.lang.StringBuffer METHOD_NAME(bool VAR_BOOL) { return METHOD_NAME(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); }
public virtual GetEvaluationResponse METHOD_NAME(GetEvaluationRequest VAR_GETEVALUATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(VAR_GETEVALUATIONREQUEST, VAR_VAR); }
public BRAIRecord METHOD_NAME() { return dataName; }
public bool METHOD_NAME(int VAR_INT) { findPos = VAR_INT; if (findPos < _regionStart) { findPos = _regionStart; } else { if (findPos >= _regionEnd) { matchFound = false; return false; } } matchFound = findImpl(address, input, findPos, matchOffsets); if (matchFound) { findPos = matchOffsets[LITERAL_INT]; } return matchFound; }
public virtual GetLifecyclePolicyPreviewResponse METHOD_NAME(GetLifecyclePolicyPreviewRequest VAR_GETLIFECYCLEPOLICYPREVIEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(VAR_GETLIFECYCLEPOLICYPREVIEWREQUEST, VAR_VAR); }
public SinglePositionTokenStream(string VAR_STRING) { termAtt = AddAttribute<ICharTermAttribute>(); posIncrAtt = AddAttribute<IPositionIncrementAttribute>(); this.VAR_STRING = VAR_STRING; returned = true; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_print_gridlines); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(Constants.TypeString(Type)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(Name); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(commitTime); VAR_STRINGBUILDER.Append(LITERAL_CHAR); AppendCoreFlags(VAR_STRINGBUILDER); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual NGit.Api.LsRemoteCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = FindStartOfRowOutlineGroup(VAR_INT); RowRecord VAR_ROWRECORD = GetRow(VAR_INT); int VAR_INT = WriteHidden(VAR_ROWRECORD, VAR_INT, true); if (GetRow(VAR_INT + LITERAL_INT) != LITERAL_NULL) { GetRow(VAR_INT + LITERAL_INT).Colapsed = (true); } else { RowRecord VAR_ROWRECORD = CreateRow(VAR_INT + LITERAL_INT); VAR_ROWRECORD.Colapsed = (true); InsertRow(VAR_ROWRECORD); } }
public virtual AssociateSkillGroupWithRoomResponse METHOD_NAME(AssociateSkillGroupWithRoomRequest VAR_ASSOCIATESKILLGROUPWITHROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(VAR_ASSOCIATESKILLGROUPWITHROOMREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(SeriesNumbers).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual QueryConfigHandler METHOD_NAME() { return this.queryConfig; }
if (LITERAL_NULL != originalArgs) { string VAR_STRING = originalArgs[CLASS_NAME]; if (LITERAL_NULL != VAR_STRING) { return VAR_STRING; } } return this.GetType().Name;
