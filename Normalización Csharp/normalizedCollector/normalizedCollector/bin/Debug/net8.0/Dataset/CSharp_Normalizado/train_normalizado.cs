public virtual ListSpeechSynthesisTasksResponse METHOD_NAME(ListSpeechSynthesisTasksRequest VAR_LISTSPEECHSYNTHESISTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSpeechSynthesisTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSpeechSynthesisTasksResponseUnmarshaller.Instance; return Invoke<ListSpeechSynthesisTasksResponse>(VAR_LISTSPEECHSYNTHESISTASKSREQUEST, VAR_VAR); }
public virtual UpdateJourneyStateResponse METHOD_NAME(UpdateJourneyStateRequest VAR_UPDATEJOURNEYSTATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateJourneyStateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateJourneyStateResponseUnmarshaller.Instance; return Invoke<UpdateJourneyStateResponse>(VAR_UPDATEJOURNEYSTATEREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_PRESFORMAT); }
public CellRangeAddressList(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) : this() { AddCellRangeAddress(VAR_INT, VAR_INT, VAR_INT, VAR_INT); }
public virtual void METHOD_NAME(int VAR_INT) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT >= LITERAL_INT) { if (mValues[VAR_INT] != DELETED) { mValues[VAR_INT] = DELETED; mGarbage = true; } } }
public virtual NGit.Api.CreateBranchCommand METHOD_NAME(RevCommit VAR_REVCOMMIT) { CheckCallable(); this.startCommit = VAR_REVCOMMIT; this.VAR_REVCOMMIT = LITERAL_NULL; return this; }
public int METHOD_NAME() { return (left + right) >> LITERAL_INT; }
public virtual ListPresetsResponse METHOD_NAME() { return METHOD_NAME(new ListPresetsRequest()); }
public virtual DeleteFolderContentsResponse METHOD_NAME(DeleteFolderContentsRequest VAR_DELETEFOLDERCONTENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFolderContentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFolderContentsResponseUnmarshaller.Instance; return Invoke<DeleteFolderContentsResponse>(VAR_DELETEFOLDERCONTENTSREQUEST, VAR_VAR); }
public virtual GetConsoleOutputResponse METHOD_NAME(GetConsoleOutputRequest VAR_GETCONSOLEOUTPUTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConsoleOutputRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConsoleOutputResponseUnmarshaller.Instance; return Invoke<GetConsoleOutputResponse>(VAR_GETCONSOLEOUTPUTREQUEST, VAR_VAR); }
public virtual PutMailboxPermissionsResponse METHOD_NAME(PutMailboxPermissionsRequest VAR_PUTMAILBOXPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutMailboxPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<PutMailboxPermissionsResponse>(VAR_PUTMAILBOXPERMISSIONSREQUEST, VAR_VAR); }
public virtual DisableSnapshotCopyResponse METHOD_NAME(DisableSnapshotCopyRequest VAR_DISABLESNAPSHOTCOPYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableSnapshotCopyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableSnapshotCopyResponseUnmarshaller.Instance; return Invoke<DisableSnapshotCopyResponse>(VAR_DISABLESNAPSHOTCOPYREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); if (VAR_INT != -LITERAL_INT) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT); } return VAR_STRING; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public int METHOD_NAME(int VAR_INT) { int VAR_INT = _limit - LITERAL_INT; for (; VAR_INT >= LITERAL_INT; VAR_INT--) { if (VAR_INT == _array[VAR_INT]) { break; } } return VAR_INT; }
public virtual void METHOD_NAME(int[] VAR_INT[], long VAR_LONG) { countsByTime = VAR_INT[]; countsByTimeStepMSec = VAR_LONG; }
public FeatHdrRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { futureHeader = new FtrHeader(VAR_RECORDINPUTSTREAM); isf_sharedFeatureType = VAR_RECORDINPUTSTREAM.ReadShort(); reserved = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); cbHdrData = VAR_RECORDINPUTSTREAM.ReadInt(); rgbHdrData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public CopyOnWriteArrayList() { elements = libcore.util.EmptyArray.OBJECT; }
public WriteRequest(DeleteRequest VAR_DELETEREQUEST) { _deleteRequest = VAR_DELETEREQUEST; }
public void METHOD_NAME(byte[] VAR_BYTE[]) { _in.METHOD_NAME(VAR_BYTE[]); }
public static ICell METHOD_NAME(IRow VAR_IROW, int VAR_INT) { ICell VAR_ICELL = VAR_IROW.METHOD_NAME(VAR_INT); if (VAR_ICELL == LITERAL_NULL) { VAR_ICELL = VAR_IROW.CreateCell(VAR_INT); } return VAR_ICELL; }
public virtual void METHOD_NAME(PackConfig VAR_PACKCONFIG) { this.packConfig = VAR_PACKCONFIG; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(IIntSet VAR_IINTSET) { Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = new Antlr4.Runtime.Misc.IntervalSet(); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.AddAll(this); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.AddAll(VAR_IINTSET); return VAR_ANTLR4.RUNTIME.MISC.INTERVALSET; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(value); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeVpcEndpointServicePermissionsResponse METHOD_NAME(DescribeVpcEndpointServicePermissionsRequest VAR_DESCRIBEVPCENDPOINTSERVICEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointServicePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointServicePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicePermissionsResponse>(VAR_DESCRIBEVPCENDPOINTSERVICEPERMISSIONSREQUEST, VAR_VAR); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_BYTE[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); byte[] VAR_BYTE[] = new byte[VAR_INT]; System.Array.Copy(VAR_BYTE[], VAR_INT, VAR_BYTE[], LITERAL_INT, VAR_INT); return VAR_BYTE[]; }
public ListTopicsRequest(string VAR_STRING) { _nextToken = VAR_STRING; }
public override void METHOD_NAME(FieldInfos VAR_FIELDINFOS, int VAR_INT) { if (!(pendingDocs.Count == LITERAL_INT)) { Flush(); } if (VAR_INT != this.VAR_INT) { throw new Exception(LITERAL_STRING + this.VAR_INT + LITERAL_STRING + VAR_INT); } indexWriter.METHOD_NAME(VAR_INT, vectorsStream.GetFilePointer()); CodecUtil.WriteFooter(vectorsStream); }
public override bool METHOD_NAME(BytesRef VAR_BYTESREF, TermStats VAR_TERMSTATS) { if (count >= interval) { count = LITERAL_INT; return true; } else { count++; return false; } }
public virtual AssociateDhcpOptionsResponse METHOD_NAME(AssociateDhcpOptionsRequest VAR_ASSOCIATEDHCPOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateDhcpOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateDhcpOptionsResponseUnmarshaller.Instance; return Invoke<AssociateDhcpOptionsResponse>(VAR_ASSOCIATEDHCPOPTIONSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_VALUEEVAL, DEFAULT_ARG3); }
public virtual void METHOD_NAME() { if (sock.IsConnected()) { sock.METHOD_NAME(); } }
public PredictionContext METHOD_NAME(PredictionContext VAR_PREDICTIONCONTEXT) { if (VAR_PREDICTIONCONTEXT == PredictionContext.EMPTY) return PredictionContext.EMPTY; PredictionContext VAR_PREDICTIONCONTEXT = cache.Get(VAR_PREDICTIONCONTEXT); if (VAR_PREDICTIONCONTEXT != LITERAL_NULL) { return VAR_PREDICTIONCONTEXT; } cache.Put(VAR_PREDICTIONCONTEXT, VAR_PREDICTIONCONTEXT); return VAR_PREDICTIONCONTEXT; }
public virtual UploadLayerPartResponse METHOD_NAME(UploadLayerPartRequest VAR_UPLOADLAYERPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UploadLayerPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UploadLayerPartResponseUnmarshaller.Instance; return Invoke<UploadLayerPartResponse>(VAR_UPLOADLAYERPARTREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return METHOD_NAME(LITERAL_NULL, LITERAL_NULL); }
public virtual DescribeClusterSubnetGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeClusterSubnetGroupsRequest()); }
public override char METHOD_NAME(int VAR_INT) { if (VAR_INT < BeginIndex || VAR_INT > EndIndex) throw new ArgumentException(LITERAL_STRING + VAR_INT); index = start + VAR_INT; return Current; }
public virtual GetPhoneNumberOrderResponse METHOD_NAME(GetPhoneNumberOrderRequest VAR_GETPHONENUMBERORDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPhoneNumberOrderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPhoneNumberOrderResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberOrderResponse>(VAR_GETPHONENUMBERORDERREQUEST, VAR_VAR); }
public EpsilonTransition(ATNState VAR_ATNSTATE, int VAR_INT) : base(target) { this.VAR_INT = VAR_INT; }
public virtual NGit.Api.DiffCommand METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; return this; }
public virtual RejectVpcPeeringConnectionResponse METHOD_NAME(RejectVpcPeeringConnectionRequest VAR_REJECTVPCPEERINGCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectVpcPeeringConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectVpcPeeringConnectionResponseUnmarshaller.Instance; return Invoke<RejectVpcPeeringConnectionResponse>(VAR_REJECTVPCPEERINGCONNECTIONREQUEST, VAR_VAR); }
public static bool METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[]) { if (VAR_INT[] == VAR_INT[]) { return true; } if (VAR_INT[] == LITERAL_NULL || VAR_INT[] == LITERAL_NULL || VAR_INT[].Length != VAR_INT[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_INT[].Length; i++) { if (VAR_INT[][i] != VAR_INT[][i]) { return false; } } } return true; }
public static void METHOD_NAME(string[] VAR_STRING[]) { if (VAR_STRING[].Length < LITERAL_INT) { throw new ArgumentException(); } QualityQueriesFinder VAR_QUALITYQUERIESFINDER = new QualityQueriesFinder(FSDirectory.Open(new DirectoryInfo(VAR_STRING[][LITERAL_INT]))); string[] VAR_STRING[] = VAR_QUALITYQUERIESFINDER.BestQueries(LITERAL_STRING, LITERAL_INT); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { Console.WriteLine(newline + FormatQueryAsTrecTopic(i, VAR_STRING[][i], LITERAL_NULL, LITERAL_NULL)); } }
public CharsRef(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { this.VAR_CHAR[] = VAR_CHAR[]; this.Offset = VAR_INT; this.Length = VAR_INT; Debug.Assert(IsValid()); }
public virtual UpdateIPSetResponse METHOD_NAME(UpdateIPSetRequest VAR_UPDATEIPSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateIPSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateIPSetResponseUnmarshaller.Instance; return Invoke<UpdateIPSetResponse>(VAR_UPDATEIPSETREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(object VAR_OBJECT) { METHOD_NAME(Sharpen.StringHelper.GetValueOf(VAR_OBJECT)); }
public override string METHOD_NAME() { return LITERAL_STRING + segmentsFileName + LITERAL_STRING; }
public virtual bool METHOD_NAME(long VAR_LONG, int VAR_INT) { long VAR_LONG = writer.Generation; if (VAR_LONG > VAR_LONG) { throw new System.ArgumentException(LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_LONG + LITERAL_STRING); } lock (this) if (VAR_LONG <= searchingGen) return true; else { waitingGen = Math.Max(waitingGen, VAR_LONG); reopenCond.Set(); available.Reset(); } long VAR_LONG = Time.NanoTime() / LITERAL_INT; while (VAR_LONG > Interlocked.Read(ref searchingGen)) { if (VAR_INT < LITERAL_INT) { available.WaitOne(); } else { long VAR_LONG = (VAR_LONG + VAR_INT) - (Time.NanoTime()) / LITERAL_INT; if (VAR_LONG <= LITERAL_INT) { return false; } else { available.WaitOne(TimeSpan.FromMilliseconds(VAR_LONG)); } } } return true; }
public java.lang.StringBuffer METHOD_NAME(bool VAR_BOOL) { return METHOD_NAME(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, byte VAR_BYTE) { throw new java.nio.ReadOnlyBufferException(); }
public virtual int METHOD_NAME() { return lineCount; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is DutchStemmer; }
public virtual CreateNotificationSubscriptionResponse METHOD_NAME(CreateNotificationSubscriptionRequest VAR_CREATENOTIFICATIONSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNotificationSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNotificationSubscriptionResponseUnmarshaller.Instance; return Invoke<CreateNotificationSubscriptionResponse>(VAR_CREATENOTIFICATIONSUBSCRIPTIONREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return snapshot.IsModified(GetFile()); }
public virtual DescribeVirtualInterfacesResponse METHOD_NAME() { return METHOD_NAME(new DescribeVirtualInterfacesRequest()); }
public override void METHOD_NAME() { this._enclosing.refreshExpGroupMetadataList(true, true); this._enclosing.notifyDataSetChanged(); }
public virtual DeleteEventTrackerResponse METHOD_NAME(DeleteEventTrackerRequest VAR_DELETEEVENTTRACKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventTrackerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventTrackerResponseUnmarshaller.Instance; return Invoke<DeleteEventTrackerResponse>(VAR_DELETEEVENTTRACKERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL is BlankEval) { switch (_operator.Code) { case CmpOp.NONE: case CmpOp.EQ: return _value.Length == LITERAL_INT; case CmpOp.NE: return _value.Length != LITERAL_INT; } return false; } if (!(VAR_VALUEEVAL is StringEval)) { return false; } String VAR_STRING = ((StringEval)VAR_VALUEEVAL).StringValue; if ((VAR_STRING.Length < LITERAL_INT && _value.Length < LITERAL_INT)) { switch (_operator.Code) { case CmpOp.NONE: return true; case CmpOp.EQ: return false; case CmpOp.NE: return true; } return false; } if (_pattern != LITERAL_NULL) { return Evaluate(_pattern.IsMatch(VAR_STRING)); } return Evaluate(string.Compare(VAR_STRING, _value, StringComparison.CurrentCultureIgnoreCase)); }
public virtual ListWebsiteAuthorizationProvidersResponse METHOD_NAME(ListWebsiteAuthorizationProvidersRequest VAR_LISTWEBSITEAUTHORIZATIONPROVIDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWebsiteAuthorizationProvidersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWebsiteAuthorizationProvidersResponseUnmarshaller.Instance; return Invoke<ListWebsiteAuthorizationProvidersResponse>(VAR_LISTWEBSITEAUTHORIZATIONPROVIDERSREQUEST, VAR_VAR); }
public override void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { doWrite(VAR_CHAR[], VAR_INT, VAR_INT); }
public String METHOD_NAME() { if (IsWholeColumnReference()) { returnCellReference.ConvertNumToColString(_firstCell.Col) + LITERAL_STRING + CellReference.ConvertNumToColString(_lastCell.Col); } StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(_firstCell.METHOD_NAME()); if (!_isSingleCell) { VAR_STRINGBUILDER.Append(CELL_DELIMITER); if (_lastCell.SheetName == LITERAL_NULL) { VAR_STRINGBUILDER.Append(_lastCell.METHOD_NAME()); } else { _lastCell.AppendCellReference(VAR_STRINGBUILDER); } } return VAR_STRINGBUILDER.ToString(); }
public EscherGraphics METHOD_NAME() { EscherGraphics VAR_ESCHERGRAPHICS = new EscherGraphics(escherGroup, workbook, foreground, font, verticalPointsPerPixel); return VAR_ESCHERGRAPHICS; }
public DoubleDocValues(ValueSource VAR_VALUESOURCE) { this.m_vs = VAR_VALUESOURCE; }
public static CharArraySet METHOD_NAME() { return DefaultSetHolder.DEFAULT_STOP_SET; }
public virtual DeleteLoadBalancerPolicyResponse METHOD_NAME(DeleteLoadBalancerPolicyRequest VAR_DELETELOADBALANCERPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLoadBalancerPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLoadBalancerPolicyResponseUnmarshaller.Instance; return Invoke<DeleteLoadBalancerPolicyResponse>(VAR_DELETELOADBALANCERPOLICYREQUEST, VAR_VAR); }
public virtual DecreaseReplicaCountResponse METHOD_NAME(DecreaseReplicaCountRequest VAR_DECREASEREPLICACOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DecreaseReplicaCountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DecreaseReplicaCountResponseUnmarshaller.Instance; return Invoke<DecreaseReplicaCountResponse>(VAR_DECREASEREPLICACOUNTREQUEST, VAR_VAR); }
public virtual RefUpdate.Result METHOD_NAME(RevWalk VAR_REVWALK) { RequireCanDoUpdate(); try { return result = UpdateImpl(VAR_REVWALK, new _Store_484(this)); } catch (IOException x) { result = RefUpdate.Result.IO_FAILURE; throw; } }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(diff.METHOD_NAME()); }
public static string METHOD_NAME(long VAR_LONG) { return METHOD_NAME(VAR_LONG, LITERAL_INT); }
public int METHOD_NAME() { return _offset++; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is java.util.MapClass.Entry<K, V>) { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = (java.util.MapClass.Entry<K, V>)VAR_OBJECT; return ((object)key == LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey() == LITERAL_NULL : key.METHOD_NAME(VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey())) && ((object)value == LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getValue() == LITERAL_NULL : value.METHOD_NAME(VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getValue())); } return false; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = Math.Log(VAR_DOUBLE); double VAR_DOUBLE = VAR_DOUBLE; if (VAR_DOUBLE == Math.E) { VAR_DOUBLE = VAR_DOUBLE; } else { VAR_DOUBLE = VAR_DOUBLE / Math.Log(VAR_DOUBLE); } NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public virtual DeleteFilterResponse METHOD_NAME(DeleteFilterRequest VAR_DELETEFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFilterResponseUnmarshaller.Instance; return Invoke<DeleteFilterResponse>(VAR_DELETEFILTERREQUEST, VAR_VAR); }
public virtual CreateInstanceSnapshotResponse METHOD_NAME(CreateInstanceSnapshotRequest VAR_CREATEINSTANCESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInstanceSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInstanceSnapshotResponseUnmarshaller.Instance; return Invoke<CreateInstanceSnapshotResponse>(VAR_CREATEINSTANCESNAPSHOTREQUEST, VAR_VAR); }
public virtual IList<IToken> METHOD_NAME(int VAR_INT, int VAR_INT) { return METHOD_NAME(VAR_INT, VAR_INT, LITERAL_NULL); }
public static TermGroupFacetCollector METHOD_NAME(string VAR_STRING, string VAR_STRING, bool VAR_BOOL, BytesRef VAR_BYTESREF, int VAR_INT) { if (VAR_BOOL) { return new MV(VAR_STRING, VAR_STRING, VAR_BYTESREF, VAR_INT); } else { return new SV(VAR_STRING, VAR_STRING, VAR_BYTESREF, VAR_INT); } }
public RenameAlbumRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return c.METHOD_NAME(VAR_OBJECT); } }
public override java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } System.Array.Copy(VAR_CHAR[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public LegendRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_xAxisUpperLeft = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_yAxisUpperLeft = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_xSize = VAR_RECORDINPUTSTREAM.ReadInt(); field_4_ySize = VAR_RECORDINPUTSTREAM.ReadInt(); field_5_type = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_6_spacing = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_7_options = VAR_RECORDINPUTSTREAM.ReadShort(); }
public static byte[] METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case OBJ_COMMIT: { return ENCODED_TYPE_COMMIT; } case OBJ_TREE: { return ENCODED_TYPE_TREE; } case OBJ_BLOB: { return ENCODED_TYPE_BLOB; } case OBJ_TAG: { return ENCODED_TYPE_TAG; } default: { throw new ArgumentException(MessageFormat.Format(JGitText.Get().badObjectType, Sharpen.Extensions.ValueOf(VAR_INT))); } } }
public virtual ObjectId METHOD_NAME() { return ObjectId.FromRaw(digest.Digest()); }
public DefaultRowHeightRecord() { field_1_option_flags = LITERAL_INT; field_2_row_height = DEFAULT_ROW_HEIGHT; }
public java.nio.ByteBuffer METHOD_NAME(java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER) { try { return newEncoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).METHOD_NAME(VAR_JAVA.NIO.CHARBUFFER); } catch (java.nio.charset.CharacterCodingException ex) { throw new System.Exception(ex.Message, ex); } }
public sealed override java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, VAR_FLOAT[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public virtual bool METHOD_NAME() { return this._nextEntry != LITERAL_NULL; }
public virtual DeleteNatGatewayResponse METHOD_NAME(DeleteNatGatewayRequest VAR_DELETENATGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNatGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNatGatewayResponseUnmarshaller.Instance; return Invoke<DeleteNatGatewayResponse>(VAR_DELETENATGATEWAYREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT, int VAR_INT) { return linkTable.METHOD_NAME(VAR_INT, VAR_INT, this); }
public virtual void METHOD_NAME(string[] VAR_STRING[]) { if (VAR_STRING[] == LITERAL_NULL) { VAR_STRING[] = new string[LITERAL_INT]; } QueryConfigHandler.Set(ConfigurationKeys.MULTI_FIELDS, VAR_STRING[]); }
public override bool METHOD_NAME() { Lock.Lock(); try { return pm.METHOD_NAME(); } finally { Lock.Unlock(); } }
public virtual RemoveTargetsResponse METHOD_NAME(RemoveTargetsRequest VAR_REMOVETARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTargetsResponseUnmarshaller.Instance; return Invoke<RemoveTargetsResponse>(VAR_REMOVETARGETSREQUEST, VAR_VAR); }
public FuzzyQuery(Term VAR_TERM, int VAR_INT, int VAR_INT, int VAR_INT, bool VAR_BOOL) : base(term.Field) { if (VAR_INT < LITERAL_INT || VAR_INT > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) { throw new System.ArgumentException(LITERAL_STRING + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE); } if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_TERM = VAR_TERM; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; this.VAR_INT = VAR_INT; MultiTermRewriteMethod = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(VAR_INT); }
public virtual CheckoutCommand METHOD_NAME() { return new CheckoutCommand(repo); }
public ValueEval METHOD_NAME(String VAR_STRING, int VAR_INT, int VAR_INT) { IEvaluationCell VAR_IEVALUATIONCELL = _sewb.GetEvaluationCell(VAR_STRING, VAR_INT, VAR_INT); switch (VAR_IEVALUATIONCELL.CellType) { case CellType.Boolean: return BoolEval.ValueOf(VAR_IEVALUATIONCELL.BooleanCellValue); case CellType.Error: return ErrorEval.ValueOf(VAR_IEVALUATIONCELL.ErrorCellValue); case CellType.Formula: return _evaluator.METHOD_NAME(VAR_IEVALUATIONCELL); case CellType.Numeric: return new NumberEval(VAR_IEVALUATIONCELL.NumericCellValue); case CellType.String: return new StringEval(VAR_IEVALUATIONCELL.StringCellValue); case CellType.Blank: return LITERAL_NULL; } throw new InvalidOperationException(LITERAL_STRING + VAR_IEVALUATIONCELL.CellType + LITERAL_STRING); }
public virtual PutFileSystemPolicyResponse METHOD_NAME(PutFileSystemPolicyRequest VAR_PUTFILESYSTEMPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutFileSystemPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutFileSystemPolicyResponseUnmarshaller.Instance; return Invoke<PutFileSystemPolicyResponse>(VAR_PUTFILESYSTEMPOLICYREQUEST, VAR_VAR); }
public override long METHOD_NAME(string VAR_STRING) { EnsureOpen(); if (this.writer != LITERAL_NULL) { return writer.METHOD_NAME(VAR_STRING); } FileEntry VAR_FILEENTRY = entries[IndexFileNames.StripSegmentName(VAR_STRING)]; if (VAR_FILEENTRY == LITERAL_NULL) { throw new FileNotFoundException(VAR_STRING); } return VAR_FILEENTRY.Length; }
public virtual DescribeCacheClustersResponse METHOD_NAME() { return METHOD_NAME(new DescribeCacheClustersRequest()); }
public virtual void METHOD_NAME(RevObject VAR_REVOBJECT) { METHOD_NAME(VAR_REVOBJECT, VAR_REVOBJECT.Type); }
public bool METHOD_NAME(int VAR_INT) { if (VAR_INT > records.Length - LITERAL_INT) return false; CellValueRecordInterface[] VAR_CELLVALUERECORDINTERFACE[] = records[VAR_INT]; if (VAR_CELLVALUERECORDINTERFACE[] == LITERAL_NULL) return false; for (int col = LITERAL_INT; col < VAR_CELLVALUERECORDINTERFACE[].Length; col++) { if (VAR_CELLVALUERECORDINTERFACE[][col] != LITERAL_NULL) return true; } return false; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new SpanishLightStemFilter(VAR_TOKENSTREAM); }
public StoredField(string VAR_STRING, int VAR_INT) : base(name, TYPE) { FieldsData = new Int32(VAR_INT); }
public virtual DescribePublicIpv4PoolsResponse METHOD_NAME(DescribePublicIpv4PoolsRequest VAR_DESCRIBEPUBLICIPV4POOLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePublicIpv4PoolsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePublicIpv4PoolsResponseUnmarshaller.Instance; return Invoke<DescribePublicIpv4PoolsResponse>(VAR_DESCRIBEPUBLICIPV4POOLSREQUEST, VAR_VAR); }
public IndexRevision(IndexWriter VAR_INDEXWRITER) { sdp = VAR_INDEXWRITER.Config.IndexDeletionPolicy as SnapshotDeletionPolicy; if (sdp == LITERAL_NULL) throw new ArgumentException(LITERAL_STRING, LITERAL_STRING); this.VAR_INDEXWRITER = VAR_INDEXWRITER; this.commit = sdp.Snapshot(); this.version = RevisionVersion(commit); this.sourceFiles = RevisionFiles(commit); }
public void METHOD_NAME(short[] VAR_SHORT[]) { _tabids = VAR_SHORT[]; }
public virtual UpdateObjectAttributesResponse METHOD_NAME(UpdateObjectAttributesRequest VAR_UPDATEOBJECTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateObjectAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateObjectAttributesResponseUnmarshaller.Instance; return Invoke<UpdateObjectAttributesResponse>(VAR_UPDATEOBJECTATTRIBUTESREQUEST, VAR_VAR); }
public virtual GetGameSessionLogUrlResponse METHOD_NAME(GetGameSessionLogUrlRequest VAR_GETGAMESESSIONLOGURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGameSessionLogUrlRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGameSessionLogUrlResponseUnmarshaller.Instance; return Invoke<GetGameSessionLogUrlResponse>(VAR_GETGAMESESSIONLOGURLREQUEST, VAR_VAR); }
public RefCount(T VAR_T) { this.m_object = VAR_T; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, byte VAR_BYTE) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_BYTE; return this; }
public virtual IntervalSet METHOD_NAME(ATNState VAR_ATNSTATE, ATNState VAR_ATNSTATE, RuleContext VAR_RULECONTEXT) { IntervalSet VAR_INTERVALSET = new IntervalSet(); bool VAR_BOOL = true; PredictionContext VAR_PREDICTIONCONTEXT = VAR_RULECONTEXT != LITERAL_NULL ? PredictionContext.FromRuleContext(VAR_ATNSTATE.atn, VAR_RULECONTEXT) : LITERAL_NULL; METHOD_NAME(VAR_ATNSTATE, VAR_ATNSTATE, VAR_PREDICTIONCONTEXT, VAR_INTERVALSET, new HashSet<ATNConfig>(), new BitSet(), VAR_BOOL, true); return VAR_INTERVALSET; }
public int METHOD_NAME() { return _validationType; }
public virtual DeleteTagCommand METHOD_NAME() { return new DeleteTagCommand(repo); }
public SortRescorer(Sort VAR_SORT) { this.VAR_SORT = VAR_SORT; }
public void METHOD_NAME(HSSFWorkbook VAR_HSSFWORKBOOK) { if (VAR_HSSFWORKBOOK.Workbook != _workbook) { throw new ArgumentException(LITERAL_STRING); } }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, object VAR_OBJECT) { return METHOD_NAME(VAR_INT, VAR_OBJECT == LITERAL_NULL ? LITERAL_STRING : VAR_OBJECT.ToString()); }
public override bool METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { if (VAR_ICHARSEQUENCE == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return false; }
public int METHOD_NAME(HSSFRichTextString VAR_HSSFRICHTEXTSTRING) { return _string.METHOD_NAME(VAR_HSSFRICHTEXTSTRING._string); }
public RequestSpotInstancesRequest(string VAR_STRING) { _spotPrice = VAR_STRING; }
public virtual ObjectId METHOD_NAME() { return newObjectId; }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public LengthFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { min = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MIN_KEY); max = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_KEY); enablePositionIncrements = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public TruncateTokenFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT) : base(input) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentOutOfRangeException(LITERAL_STRING + VAR_INT); } this.VAR_INT = VAR_INT; this.termAttribute = AddAttribute<ICharTermAttribute>(); this.keywordAttr = AddAttribute<IKeywordAttribute>(); }
public virtual ListDomainsResponse METHOD_NAME() { return METHOD_NAME(new ListDomainsRequest()); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ArabicStemFilter(VAR_TOKENSTREAM); }
public virtual NGit.Api.PushCommand METHOD_NAME(IList<RefSpec> VAR_ILIST<REFSPEC>) { CheckCallable(); this.refSpecs.Clear(); Sharpen.Collections.AddAll(this.refSpecs, VAR_ILIST<REFSPEC>); return this; }
public virtual NGit.Blame.BlameGenerator METHOD_NAME(DiffAlgorithm VAR_DIFFALGORITHM) { diffAlgorithm = VAR_DIFFALGORITHM; return this; }
public virtual GroupingSearch METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public override Field[] METHOD_NAME(IShape VAR_ISHAPE) { double VAR_DOUBLE = SpatialArgs.CalcDistanceFromErrPct(VAR_ISHAPE, m_distErrPct, m_ctx); return METHOD_NAME(VAR_ISHAPE, VAR_DOUBLE); }
public virtual PutMethodResponseResponse METHOD_NAME(PutMethodResponseRequest VAR_PUTMETHODRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutMethodResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutMethodResponseResponseUnmarshaller.Instance; return Invoke<PutMethodResponseResponse>(VAR_PUTMETHODRESPONSEREQUEST, VAR_VAR); }
public LegacyCredentials(Credential VAR_CREDENTIAL) { this.VAR_CREDENTIAL = VAR_CREDENTIAL; }
public virtual DescribeFeatureTransformationResponse METHOD_NAME(DescribeFeatureTransformationRequest VAR_DESCRIBEFEATURETRANSFORMATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFeatureTransformationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFeatureTransformationResponseUnmarshaller.Instance; return Invoke<DescribeFeatureTransformationResponse>(VAR_DESCRIBEFEATURETRANSFORMATIONREQUEST, VAR_VAR); }
public virtual DeleteRouteResponse METHOD_NAME(DeleteRouteRequest VAR_DELETEROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRouteResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponse>(VAR_DELETEROUTEREQUEST, VAR_VAR); }
public virtual AssociatePhoneNumbersWithVoiceConnectorResponse METHOD_NAME(AssociatePhoneNumbersWithVoiceConnectorRequest VAR_ASSOCIATEPHONENUMBERSWITHVOICECONNECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorResponseUnmarshaller.Instance; return Invoke<AssociatePhoneNumbersWithVoiceConnectorResponse>(VAR_ASSOCIATEPHONENUMBERSWITHVOICECONNECTORREQUEST, VAR_VAR); }
public long METHOD_NAME() { return ((blocks != LITERAL_NULL) ? (blockSize * blocks.Length) : LITERAL_INT); }
public short METHOD_NAME() { return _in.METHOD_NAME(); }
public virtual UpdatePipelineNotificationsResponse METHOD_NAME(UpdatePipelineNotificationsRequest VAR_UPDATEPIPELINENOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePipelineNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePipelineNotificationsResponseUnmarshaller.Instance; return Invoke<UpdatePipelineNotificationsResponse>(VAR_UPDATEPIPELINENOTIFICATIONSREQUEST, VAR_VAR); }
public override java.io.Writer METHOD_NAME(char VAR_CHAR) { write(VAR_CHAR); return this; }
public override java.util.Iterator<V> METHOD_NAME() { return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing); }
public UnitsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_units = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual bool METHOD_NAME() { return first; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual UpdateDomainNameResponse METHOD_NAME(UpdateDomainNameRequest VAR_UPDATEDOMAINNAMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainNameRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainNameResponseUnmarshaller.Instance; return Invoke<UpdateDomainNameResponse>(VAR_UPDATEDOMAINNAMEREQUEST, VAR_VAR); }
public DeleteSnapshotRequest(string VAR_STRING) { _snapshotId = VAR_STRING; }
public void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public SliceReader(Int32BlockPool VAR_INT32BLOCKPOOL) { this.VAR_INT32BLOCKPOOL = VAR_INT32BLOCKPOOL; }
public virtual void METHOD_NAME(long VAR_LONG) { deltaSearchMemoryLimit = VAR_LONG; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(SaveLinkValues)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeTransitGatewayAttachmentsResponse METHOD_NAME(DescribeTransitGatewayAttachmentsRequest VAR_DESCRIBETRANSITGATEWAYATTACHMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayAttachmentsResponse>(VAR_DESCRIBETRANSITGATEWAYATTACHMENTSREQUEST, VAR_VAR); }
public virtual CreateVpcResponse METHOD_NAME(CreateVpcRequest VAR_CREATEVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcResponseUnmarshaller.Instance; return Invoke<CreateVpcResponse>(VAR_CREATEVPCREQUEST, VAR_VAR); }
public virtual DescribeElasticGpusResponse METHOD_NAME(DescribeElasticGpusRequest VAR_DESCRIBEELASTICGPUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeElasticGpusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeElasticGpusResponseUnmarshaller.Instance; return Invoke<DescribeElasticGpusResponse>(VAR_DESCRIBEELASTICGPUSREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME(int VAR_INT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putInt(_position++ * libcore.io.SizeOf.INT, VAR_INT); return this; }
public virtual UpdateEndpointsBatchResponse METHOD_NAME(UpdateEndpointsBatchRequest VAR_UPDATEENDPOINTSBATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEndpointsBatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEndpointsBatchResponseUnmarshaller.Instance; return Invoke<UpdateEndpointsBatchResponse>(VAR_UPDATEENDPOINTSBATCHREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { w1 = NB.DecodeInt32(VAR_BYTE[], VAR_INT); w2 = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); w3 = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); w4 = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); w5 = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); }
public static NGit.Transport.OpenSshConfig METHOD_NAME(FS VAR_FS) { FilePath VAR_FILEPATH = VAR_FS.UserHome(); if (VAR_FILEPATH == LITERAL_NULL) { VAR_FILEPATH = new FilePath(LITERAL_STRING).GetAbsoluteFile(); } FilePath VAR_FILEPATH = new FilePath(new FilePath(VAR_FILEPATH, LITERAL_STRING), Constants.CONFIG); NGit.Transport.OpenSshConfig VAR_NGIT.TRANSPORT.OPENSSHCONFIG = new NGit.Transport.OpenSshConfig(VAR_FILEPATH, VAR_FILEPATH); VAR_NGIT.TRANSPORT.OPENSSHCONFIG.Refresh(); return VAR_NGIT.TRANSPORT.OPENSSHCONFIG; }
public VCenterRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_vcenter = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual Stream METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING) { lock (padlock) { EnsureOpen(); ReplicationSession VAR_REPLICATIONSESSION; if (sessions.TryGetValue(VAR_STRING, out VAR_REPLICATIONSESSION) && VAR_REPLICATIONSESSION != LITERAL_NULL && VAR_REPLICATIONSESSION.IsExpired(ExpirationThreshold)) { ReleaseSession(VAR_STRING); VAR_REPLICATIONSESSION = LITERAL_NULL; } if (VAR_REPLICATIONSESSION == LITERAL_NULL) { throw new SessionExpiredException(string.Format(LITERAL_STRING, VAR_STRING, VAR_STRING, VAR_STRING)); } sessions[VAR_STRING].MarkAccessed(); return VAR_REPLICATIONSESSION.Revision.Revision.Open(VAR_STRING, VAR_STRING); } }
public virtual DownloadDefaultKeyPairResponse METHOD_NAME(DownloadDefaultKeyPairRequest VAR_DOWNLOADDEFAULTKEYPAIRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DownloadDefaultKeyPairRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DownloadDefaultKeyPairResponseUnmarshaller.Instance; return Invoke<DownloadDefaultKeyPairResponse>(VAR_DOWNLOADDEFAULTKEYPAIRREQUEST, VAR_VAR); }
public virtual DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse METHOD_NAME(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest VAR_DESCRIBELOCALGATEWAYROUTETABLEVIRTUALINTERFACEGROUPASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse>(VAR_DESCRIBELOCALGATEWAYROUTETABLEVIRTUALINTERFACEGROUPASSOCIATIONSREQUEST, VAR_VAR); }
public virtual ResetEbsDefaultKmsKeyIdResponse METHOD_NAME(ResetEbsDefaultKmsKeyIdRequest VAR_RESETEBSDEFAULTKMSKEYIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetEbsDefaultKmsKeyIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetEbsDefaultKmsKeyIdResponseUnmarshaller.Instance; return Invoke<ResetEbsDefaultKmsKeyIdResponse>(VAR_RESETEBSDEFAULTKMSKEYIDREQUEST, VAR_VAR); }
public int METHOD_NAME() { return bigBlockSize / POIFSConstants.PROPERTY_SIZE; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { return this.METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, LITERAL_NULL); }
public virtual GetFindingsStatisticsResponse METHOD_NAME(GetFindingsStatisticsRequest VAR_GETFINDINGSSTATISTICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFindingsStatisticsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFindingsStatisticsResponseUnmarshaller.Instance; return Invoke<GetFindingsStatisticsResponse>(VAR_GETFINDINGSSTATISTICSREQUEST, VAR_VAR); }
public virtual ModifyDBClusterResponse METHOD_NAME(ModifyDBClusterRequest VAR_MODIFYDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBClusterResponseUnmarshaller.Instance; return Invoke<ModifyDBClusterResponse>(VAR_MODIFYDBCLUSTERREQUEST, VAR_VAR); }
public LimitTokenCountFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { maxTokenCount = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_TOKEN_COUNT_KEY); consumeAllTokens = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, CONSUME_ALL_TOKENS_KEY, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual Query METHOD_NAME(IQueryNode VAR_IQUERYNODE) { if (!(VAR_IQUERYNODE is MatchNoDocsQueryNode)) { throw new QueryNodeException(new Message(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, VAR_IQUERYNODE.ToQueryString(new EscapeQuerySyntax()), VAR_IQUERYNODE.GetType().Name)); } return new BooleanQuery(); }
public GetUserPolicyRequest(string VAR_STRING, string VAR_STRING) { _userName = VAR_STRING; _policyName = VAR_STRING; }
public virtual RotateEncryptionKeyResponse METHOD_NAME(RotateEncryptionKeyRequest VAR_ROTATEENCRYPTIONKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RotateEncryptionKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RotateEncryptionKeyResponseUnmarshaller.Instance; return Invoke<RotateEncryptionKeyResponse>(VAR_ROTATEENCRYPTIONKEYREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return nAdded; }
public virtual IList<IToken> METHOD_NAME(int VAR_INT, int VAR_INT) { LazyInit(); if (VAR_INT < LITERAL_INT || VAR_INT >= tokens.Count) { throw new ArgumentOutOfRangeException(VAR_INT + LITERAL_STRING + (tokens.Count - LITERAL_INT)); } if (VAR_INT == LITERAL_INT) { return LITERAL_NULL; } int VAR_INT = PreviousTokenOnChannel(VAR_INT - LITERAL_INT, Lexer.DefaultTokenChannel); if (VAR_INT == VAR_INT - LITERAL_INT) { return LITERAL_NULL; } int VAR_INT = VAR_INT + LITERAL_INT; int VAR_INT = VAR_INT - LITERAL_INT; return FilterForChannel(VAR_INT, VAR_INT, VAR_INT); }
public virtual DescribeValidDBInstanceModificationsResponse METHOD_NAME(DescribeValidDBInstanceModificationsRequest VAR_DESCRIBEVALIDDBINSTANCEMODIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeValidDBInstanceModificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeValidDBInstanceModificationsResponseUnmarshaller.Instance; return Invoke<DescribeValidDBInstanceModificationsResponse>(VAR_DESCRIBEVALIDDBINSTANCEMODIFICATIONSREQUEST, VAR_VAR); }
public void METHOD_NAME(RevFlag VAR_REVFLAG) { flags |= VAR_REVFLAG.mask; }
public virtual void METHOD_NAME() { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = iterator(); while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { VAR_JAVA.UTIL.ITERATOR<E>.next(); VAR_JAVA.UTIL.ITERATOR<E>.remove(); } }
public virtual RegisterImageResponse METHOD_NAME(RegisterImageRequest VAR_REGISTERIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterImageResponseUnmarshaller.Instance; return Invoke<RegisterImageResponse>(VAR_REGISTERIMAGEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is TermQuery)) { return false; } TermQuery VAR_TERMQUERY = (TermQuery)VAR_OBJECT; return (this.Boost == VAR_TERMQUERY.Boost) && this.term.METHOD_NAME(VAR_TERMQUERY.term); }
public URI(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { if (VAR_STRING != LITERAL_NULL && VAR_STRING != LITERAL_NULL && !string.IsNullOrEmpty(VAR_STRING) && VAR_STRING[LITERAL_INT] != LITERAL_CHAR) { throw new java.net.URISyntaxException(VAR_STRING, LITERAL_STRING); } java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); if (VAR_STRING != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(VAR_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); } if (VAR_STRING != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); AUTHORITY_ENCODER.appendEncoded(VAR_JAVA.LANG.STRINGBUILDER, VAR_STRING); } if (VAR_STRING != LITERAL_NULL) { PATH_ENCODER.appendEncoded(VAR_JAVA.LANG.STRINGBUILDER, VAR_STRING); } if (VAR_STRING != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); ALL_LEGAL_ENCODER.appendEncoded(VAR_JAVA.LANG.STRINGBUILDER, VAR_STRING); } if (VAR_STRING != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); ALL_LEGAL_ENCODER.appendEncoded(VAR_JAVA.LANG.STRINGBUILDER, VAR_STRING); } parseURI(VAR_JAVA.LANG.STRINGBUILDER.ToString(), false); }
public BlameGenerator(Repository VAR_REPOSITORY, string VAR_STRING) { this.VAR_REPOSITORY = VAR_REPOSITORY; this.resultPath = PathFilter.Create(VAR_STRING); idBuf = new MutableObjectId(); SetFollowFileRenames(true); InitRevPool(false); remaining = -LITERAL_INT; }
public virtual void METHOD_NAME(java.io.OutputStream VAR_JAVA.IO.OUTPUTSTREAM) { throw new System.NotImplementedException(); }
public DeletableItem(string VAR_STRING, List<Attribute> VAR_LIST<ATTRIBUTE>) { _name = VAR_STRING; _attributes = VAR_LIST<ATTRIBUTE>; }
public virtual DescribeGroupResponse METHOD_NAME(DescribeGroupRequest VAR_DESCRIBEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGroupResponseUnmarshaller.Instance; return Invoke<DescribeGroupResponse>(VAR_DESCRIBEGROUPREQUEST, VAR_VAR); }
public virtual EnableVpcClassicLinkResponse METHOD_NAME(EnableVpcClassicLinkRequest VAR_ENABLEVPCCLASSICLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableVpcClassicLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableVpcClassicLinkResponseUnmarshaller.Instance; return Invoke<EnableVpcClassicLinkResponse>(VAR_ENABLEVPCCLASSICLINKREQUEST, VAR_VAR); }
public virtual DescribeStacksResponse METHOD_NAME() { return METHOD_NAME(new DescribeStacksRequest()); }
public override java.nio.CharBuffer METHOD_NAME() { return copy(this); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = double.NaN; } else if (Sign(VAR_DOUBLE) == Sign(VAR_DOUBLE)) { VAR_DOUBLE = VAR_DOUBLE % VAR_DOUBLE; } else { VAR_DOUBLE = ((VAR_DOUBLE % VAR_DOUBLE) + VAR_DOUBLE) % VAR_DOUBLE; } return VAR_DOUBLE; }
public static string METHOD_NAME(string VAR_STRING, CultureInfo VAR_CULTUREINFO) { string VAR_STRING = GetResourceBundleObject(VAR_STRING, VAR_CULTUREINFO); if (VAR_STRING == LITERAL_NULL) { return LITERAL_STRING + VAR_STRING + LITERAL_STRING + VAR_CULTUREINFO + LITERAL_STRING; } return VAR_STRING; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (Child == LITERAL_NULL) return LITERAL_STRING; return Child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING + GetValueString(); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (GetChild() == LITERAL_NULL) return LITERAL_STRING; return LITERAL_STRING + GetChild().METHOD_NAME(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING; }
public virtual GetInvalidationResponse METHOD_NAME(GetInvalidationRequest VAR_GETINVALIDATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInvalidationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInvalidationResponseUnmarshaller.Instance; return Invoke<GetInvalidationResponse>(VAR_GETINVALIDATIONREQUEST, VAR_VAR); }
public String METHOD_NAME() { return METHOD_NAME(LITERAL_NULL, false); }
public int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT; VAR_INT = NB.CompareUInt32(w1, Mask(LITERAL_INT, NB.DecodeInt32(VAR_BYTE[], VAR_INT))); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, Mask(LITERAL_INT, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT))); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, Mask(LITERAL_INT, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT))); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, Mask(LITERAL_INT, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT))); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, Mask(LITERAL_INT, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT))); }
public virtual AddApplicationInputProcessingConfigurationResponse METHOD_NAME(AddApplicationInputProcessingConfigurationRequest VAR_ADDAPPLICATIONINPUTPROCESSINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationInputProcessingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationInputProcessingConfigurationResponseUnmarshaller.Instance; return Invoke<AddApplicationInputProcessingConfigurationResponse>(VAR_ADDAPPLICATIONINPUTPROCESSINGCONFIGURATIONREQUEST, VAR_VAR); }
public static TermRangeQuery METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING, bool VAR_BOOL, bool VAR_BOOL) { BytesRef VAR_BYTESREF = VAR_STRING == LITERAL_NULL ? LITERAL_NULL : new BytesRef(VAR_STRING); BytesRef VAR_BYTESREF = VAR_STRING == LITERAL_NULL ? LITERAL_NULL : new BytesRef(VAR_STRING); return new TermRangeQuery(VAR_STRING, VAR_BYTESREF, VAR_BYTESREF, VAR_BOOL, VAR_BOOL); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE, int VAR_INT) { double VAR_DOUBLE = -(VAR_DOUBLE * Math.Pow(LITERAL_INT + VAR_DOUBLE, VAR_INT) + VAR_DOUBLE * (LITERAL_INT + VAR_DOUBLE * VAR_INT) * (Math.Pow(LITERAL_INT + VAR_DOUBLE, VAR_INT) - LITERAL_INT) / VAR_DOUBLE); return VAR_DOUBLE; }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = -LITERAL_INT; for (int i = LITERAL_INT; i < _externalBookBlocks.Length; i++) { SupBookRecord VAR_SUPBOOKRECORD = _externalBookBlocks[i].GetExternalBookRecord(); if (VAR_SUPBOOKRECORD.IsInternalReferences) { VAR_INT = i; break; } } if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } int VAR_INT = _externSheetRecord.GetRefIxForSheet(VAR_INT, VAR_INT, VAR_INT); if (VAR_INT >= LITERAL_INT) { return VAR_INT; } return _externSheetRecord.AddRef(VAR_INT, VAR_INT, VAR_INT); }
public virtual DescribeSentimentDetectionJobResponse METHOD_NAME(DescribeSentimentDetectionJobRequest VAR_DESCRIBESENTIMENTDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSentimentDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeSentimentDetectionJobResponse>(VAR_DESCRIBESENTIMENTDETECTIONJOBREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Units)).Append(LITERAL_STRING).Append(Units).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K, bool VAR_BOOL) { java.util.TreeMap.Bound VAR_JAVA.UTIL.TREEMAP.BOUND = VAR_BOOL ? java.util.TreeMap.Bound.INCLUSIVE : java.util.TreeMap.Bound.EXCLUSIVE; return this.subMap(VAR_K, VAR_JAVA.UTIL.TREEMAP.BOUND, default(K), java.util.TreeMap.Bound.NO_BOUND); }
public static int METHOD_NAME(Ref VAR_REF, Ref VAR_REF) { return Sharpen.Runtime.CompareOrdinal(VAR_REF.GetName(), VAR_REF.GetName()); }
public virtual PutEventsConfigurationResponse METHOD_NAME(PutEventsConfigurationRequest VAR_PUTEVENTSCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEventsConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEventsConfigurationResponseUnmarshaller.Instance; return Invoke<PutEventsConfigurationResponse>(VAR_PUTEVENTSCONFIGURATIONREQUEST, VAR_VAR); }
public virtual DetachFromIndexResponse METHOD_NAME(DetachFromIndexRequest VAR_DETACHFROMINDEXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachFromIndexRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachFromIndexResponseUnmarshaller.Instance; return Invoke<DetachFromIndexResponse>(VAR_DETACHFROMINDEXREQUEST, VAR_VAR); }
public virtual RebaseCommand METHOD_NAME() { return new RebaseCommand(repo); }
public ISearchGroup<T> METHOD_NAME() { ISearchGroup<T> VAR_ISEARCHGROUP<T> = iter.Current; if (VAR_ISEARCHGROUP<T>.SortValues == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } return VAR_ISEARCHGROUP<T>; }
public virtual UpdateMLModelResponse METHOD_NAME(UpdateMLModelRequest VAR_UPDATEMLMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMLModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMLModelResponseUnmarshaller.Instance; return Invoke<UpdateMLModelResponse>(VAR_UPDATEMLMODELREQUEST, VAR_VAR); }
public virtual CreateIPSetResponse METHOD_NAME(CreateIPSetRequest VAR_CREATEIPSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIPSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIPSetResponseUnmarshaller.Instance; return Invoke<CreateIPSetResponse>(VAR_CREATEIPSETREQUEST, VAR_VAR); }
public FieldDateResolutionFCListener(QueryConfigHandler VAR_QUERYCONFIGHANDLER) { this.VAR_QUERYCONFIGHANDLER = VAR_QUERYCONFIGHANDLER; }
public override bool METHOD_NAME(object VAR_OBJECT) { java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = table; int VAR_INT = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length; if (VAR_OBJECT == LITERAL_NULL) { { for (int i = LITERAL_INT; i < VAR_INT; i++) { { for (java.util.HashMap.HashMapEntry<K, V> e = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][i]; e != LITERAL_NULL; e = e.next) { if (e.VAR_OBJECT == LITERAL_NULL) { return true; } } } } } return entryForNullKey != LITERAL_NULL && (object)entryForNullKey.VAR_OBJECT == LITERAL_NULL; } { for (int i_1 = LITERAL_INT; i_1 < VAR_INT; i_1++) { { for (java.util.HashMap.HashMapEntry<K, V> e = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][i_1]; e != LITERAL_NULL; e = e.next) { if (VAR_OBJECT.Equals(e.VAR_OBJECT)) { return true; } } } } } return entryForNullKey != LITERAL_NULL && VAR_OBJECT.Equals(entryForNullKey.VAR_OBJECT); }
public virtual DescribeWorkspaceBundlesResponse METHOD_NAME(DescribeWorkspaceBundlesRequest VAR_DESCRIBEWORKSPACEBUNDLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspaceBundlesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspaceBundlesResponseUnmarshaller.Instance; return Invoke<DescribeWorkspaceBundlesResponse>(VAR_DESCRIBEWORKSPACEBUNDLESREQUEST, VAR_VAR); }
public DocsEnum METHOD_NAME(int[] VAR_INT[]) { this.VAR_INT[] = VAR_INT[]; upto = -LITERAL_INT; return this; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(_reserved0); VAR_ILITTLEENDIANOUTPUT.WriteInt(_engineId); }
public static java.nio.CharBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteCharArrayBuffer(VAR_INT); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual DeletePipelineResponse METHOD_NAME(DeletePipelineRequest VAR_DELETEPIPELINEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePipelineRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePipelineResponseUnmarshaller.Instance; return Invoke<DeletePipelineResponse>(VAR_DELETEPIPELINEREQUEST, VAR_VAR); }
public InterfaceHdrRecord(int VAR_INT) { _codepage = VAR_INT; }
public virtual DescribeScalingParametersResponse METHOD_NAME(DescribeScalingParametersRequest VAR_DESCRIBESCALINGPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScalingParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScalingParametersResponseUnmarshaller.Instance; return Invoke<DescribeScalingParametersResponse>(VAR_DESCRIBESCALINGPARAMETERSREQUEST, VAR_VAR); }
public java.util.MapClass.Entry<K, V> METHOD_NAME(K VAR_K) { return this._enclosing.immutableCopy(this.findBounded(VAR_K, java.util.TreeMap.Relation.HIGHER)); }
public CreateSpotDatafeedSubscriptionRequest(string VAR_STRING) { _bucket = VAR_STRING; }
public virtual string METHOD_NAME() { return METHOD_NAME(CultureInfo.InvariantCulture); }
public UDFFinder METHOD_NAME() { return _uBook.METHOD_NAME(); }
public ExternalName METHOD_NAME(String VAR_STRING, String VAR_STRING, int VAR_INT) { throw new InvalidOperationException(LITERAL_STRING); }
public OldFormulaRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(ris, ris.Sid == biff2_sid) { ; if (IsBiff2) { field_4_value = VAR_RECORDINPUTSTREAM.ReadDouble(); } else { long VAR_LONG = VAR_RECORDINPUTSTREAM.ReadLong(); specialCachedValue = SpecialCachedValue.Create(VAR_LONG); if (specialCachedValue == LITERAL_NULL) { field_4_value = BitConverter.Int64BitsToDouble(VAR_LONG); } } if (IsBiff2) { field_5_options = (short)VAR_RECORDINPUTSTREAM.ReadUByte(); } else { field_5_options = VAR_RECORDINPUTSTREAM.ReadShort(); } int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.Available(); field_6_Parsed_expr = Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM, VAR_INT); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { Debug.Assert(VAR_CHAR[].Length >= VAR_INT + LITERAL_INT, LITERAL_STRING); VAR_INT = plural.Apply(VAR_CHAR[], VAR_INT); VAR_INT = unification.Apply(VAR_CHAR[], VAR_INT); VAR_INT = adverb.Apply(VAR_CHAR[], VAR_INT); int VAR_INT; do { VAR_INT = VAR_INT; VAR_INT = augmentative.Apply(VAR_CHAR[], VAR_INT); } while (VAR_INT != VAR_INT); VAR_INT = VAR_INT; VAR_INT = noun.Apply(VAR_CHAR[], VAR_INT); if (VAR_INT == VAR_INT) { VAR_INT = verb.Apply(VAR_CHAR[], VAR_INT); } VAR_INT = vowel.Apply(VAR_CHAR[], VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { switch (VAR_CHAR[][i]) { case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; } } return VAR_INT; }
public bool METHOD_NAME(FontRecord VAR_FONTRECORD) { returnfield_1_font_height == VAR_FONTRECORD.field_1_font_height && field_2_attributes == VAR_FONTRECORD.field_2_attributes && field_3_color_palette_index == VAR_FONTRECORD.field_3_color_palette_index && field_4_bold_weight == VAR_FONTRECORD.field_4_bold_weight && field_5_base_sub_script == VAR_FONTRECORD.field_5_base_sub_script && field_6_underline == VAR_FONTRECORD.field_6_underline && field_7_family == VAR_FONTRECORD.field_7_family && field_8_charset == VAR_FONTRECORD.field_8_charset && field_9_zero == VAR_FONTRECORD.field_9_zero && field_11_font_name.Equals(VAR_FONTRECORD.field_11_font_name); }
public override String METHOD_NAME() { return HSSFErrorConstants.GetText(HSSFErrorConstants.ERROR_REF); }
public virtual StartTextDetectionResponse METHOD_NAME(StartTextDetectionRequest VAR_STARTTEXTDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartTextDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartTextDetectionResponseUnmarshaller.Instance; return Invoke<StartTextDetectionResponse>(VAR_STARTTEXTDETECTIONREQUEST, VAR_VAR); }
public DeleteMessageBatchRequestEntry(string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _receiptHandle = VAR_STRING; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PatternCaptureGroupTokenFilter(VAR_TOKENSTREAM, preserveOriginal, pattern); }
public SigningCertificate(string VAR_STRING, string VAR_STRING, string VAR_STRING, StatusType VAR_STATUSTYPE) { _userName = VAR_STRING; _certificateId = VAR_STRING; _certificateBody = VAR_STRING; _status = VAR_STATUSTYPE; }
public DistributionConfig(string VAR_STRING, bool VAR_BOOL) { _callerReference = VAR_STRING; _enabled = VAR_BOOL; }
public FastCharStream(TextReader VAR_TEXTREADER) { input = VAR_TEXTREADER; }
public int METHOD_NAME(int VAR_INT) { ensureMatch(); return matchOffsets[(VAR_INT * LITERAL_INT) + LITERAL_INT]; }
public override java.util.MapClass.Entry<K, V> METHOD_NAME() { return this.nextEntry(); }
public virtual NGit.Api.BlameCommand METHOD_NAME(RawTextComparator VAR_RAWTEXTCOMPARATOR) { this.VAR_RAWTEXTCOMPARATOR = VAR_RAWTEXTCOMPARATOR; return this; }
public T METHOD_NAME() { if (size > LITERAL_INT) { T VAR_T = heap[LITERAL_INT]; heap[LITERAL_INT] = heap[size]; heap[size] = default(T); size--; DownHeap(); return VAR_T; } else { return default(T); } }
public override string METHOD_NAME() { return LITERAL_STRING + fstArc + LITERAL_STRING + fsaState; }
public static string METHOD_NAME(string VAR_STRING) { if (VAR_STRING.StartsWith(Constants.R_NOTES)) { return Sharpen.Runtime.Substring(VAR_STRING, Constants.R_NOTES.Length); } return VAR_STRING; }
public virtual DescribeDomainsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDomainsRequest()); }
public int METHOD_NAME() { return _le.METHOD_NAME(); }
public virtual GetContentModerationResponse METHOD_NAME(GetContentModerationRequest VAR_GETCONTENTMODERATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetContentModerationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetContentModerationResponseUnmarshaller.Instance; return Invoke<GetContentModerationResponse>(VAR_GETCONTENTMODERATIONREQUEST, VAR_VAR); }
public PrintStream(java.io.OutputStream VAR_JAVA.IO.OUTPUTSTREAM) : base(@out) { if (VAR_JAVA.IO.OUTPUTSTREAM == LITERAL_NULL) { throw new System.ArgumentNullException(); } }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (TermsReader r in fields.Values) { VAR_LONG += r.dict == LITERAL_NULL ? LITERAL_INT : r.dict.GetSizeInBytes(); } return VAR_LONG; }
public virtual GetIntegrationResponse METHOD_NAME(GetIntegrationRequest VAR_GETINTEGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIntegrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIntegrationResponseUnmarshaller.Instance; return Invoke<GetIntegrationResponse>(VAR_GETINTEGRATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { if (getVisibility() != VAR_INT) { base.METHOD_NAME(VAR_INT); if (mIndeterminate) { if (VAR_INT == GONE || VAR_INT == INVISIBLE) { stopAnimation(); } else { startAnimation(); } } } }
public override bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (!base.METHOD_NAME(VAR_CHAR[], VAR_INT)) { return false; } for (int i = LITERAL_INT; i < m_exceptions.Length; i++) { if (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, m_exceptions[i])) { return false; } } return true; }
public virtual DescribeFleetCapacityResponse METHOD_NAME(DescribeFleetCapacityRequest VAR_DESCRIBEFLEETCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetCapacityResponseUnmarshaller.Instance; return Invoke<DescribeFleetCapacityResponse>(VAR_DESCRIBEFLEETCAPACITYREQUEST, VAR_VAR); }
public UploadPackInternalServerErrorException(Exception VAR_EXCEPTION) { Sharpen.Extensions.InitCause(this, VAR_EXCEPTION); }
public virtual GetNetworkResponse METHOD_NAME(GetNetworkRequest VAR_GETNETWORKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetNetworkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetNetworkResponseUnmarshaller.Instance; return Invoke<GetNetworkResponse>(VAR_GETNETWORKREQUEST, VAR_VAR); }
public virtual AllocatePrivateVirtualInterfaceResponse METHOD_NAME(AllocatePrivateVirtualInterfaceRequest VAR_ALLOCATEPRIVATEVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocatePrivateVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocatePrivateVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<AllocatePrivateVirtualInterfaceResponse>(VAR_ALLOCATEPRIVATEVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual GetDeploymentResponse METHOD_NAME(GetDeploymentRequest VAR_GETDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentResponseUnmarshaller.Instance; return Invoke<GetDeploymentResponse>(VAR_GETDEPLOYMENTREQUEST, VAR_VAR); }
public UpdateRepoAuthorizationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (preserveOriginal) { state = CaptureState(); } int VAR_INT = LITERAL_INT * VAR_INT; if (output.Length < VAR_INT) { output = new char[ArrayUtil.Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_CHAR)]; } outputPos = METHOD_NAME(VAR_CHAR[], LITERAL_INT, output, LITERAL_INT, VAR_INT); }
public bool METHOD_NAME(String VAR_STRING) { if (excludes.Contains(VAR_STRING)) { return false; } return directory.METHOD_NAME(VAR_STRING); }
public virtual void METHOD_NAME(string VAR_STRING) { lockMessage = VAR_STRING; }
public virtual ReflogCommand METHOD_NAME() { return new ReflogCommand(repo); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstColumn); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastColumn); }
public static int METHOD_NAME(HttpURLConnection VAR_HTTPURLCONNECTION) { try { return VAR_HTTPURLCONNECTION.GetResponseCode(); } catch (ConnectException ce) { string VAR_STRING = VAR_HTTPURLCONNECTION.GetURL().GetHost(); if (LITERAL_STRING.Equals(ce.Message)) { throw new ConnectException(MessageFormat.Format(JGitText.Get().connectionTimeOut, VAR_STRING)); } throw new ConnectException(ce.Message + LITERAL_STRING + VAR_STRING); } }
public static void METHOD_NAME(long[] VAR_LONG[], long VAR_LONG) { { for (int i = LITERAL_INT; i < VAR_LONG[].Length; i++) { VAR_LONG[][i] = VAR_LONG; } } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(PositionOfBof); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_option_flags); String VAR_STRING = field_5_sheetname; VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_STRING.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_4_isMultibyteUnicode); if (IsMultibyte) { StringUtil.PutUnicodeLE(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } }
public static string METHOD_NAME(XmlElement VAR_XMLELEMENT) { string VAR_STRING = GetText(VAR_XMLELEMENT); if (LITERAL_NULL != VAR_STRING) VAR_STRING = VAR_STRING.Trim(); if (LITERAL_NULL == VAR_STRING || LITERAL_INT == VAR_STRING.Length) { throw new ParserException(VAR_XMLELEMENT.ToString() + LITERAL_STRING); } return VAR_STRING; }
public virtual void METHOD_NAME(FieldConfig VAR_FIELDCONFIG) { IDictionary<string, float?> VAR_IDICTIONARY<STRING, FLOAT?> = this.config.Get(ConfigurationKeys.FIELD_BOOST_MAP); if (VAR_IDICTIONARY<STRING, FLOAT?> != LITERAL_NULL) { float? VAR_FLOAT?; if (VAR_IDICTIONARY<STRING, FLOAT?>.TryGetValue(VAR_FIELDCONFIG.Field, out VAR_FLOAT?) && VAR_FLOAT? != LITERAL_NULL) { VAR_FIELDCONFIG.Set(ConfigurationKeys.BOOST, VAR_FLOAT?); } } }
public virtual PutLifecyclePolicyResponse METHOD_NAME(PutLifecyclePolicyRequest VAR_PUTLIFECYCLEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutLifecyclePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<PutLifecyclePolicyResponse>(VAR_PUTLIFECYCLEPOLICYREQUEST, VAR_VAR); }
public virtual java.util.SortedSet<E> METHOD_NAME(E VAR_E, E VAR_E) { return METHOD_NAME(VAR_E, true, VAR_E, false); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); if (VAR_STRING != LITERAL_NULL) { int VAR_INT; if (VAR_STRING.EndsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = LITERAL_INT; VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_STRING.Length - LITERAL_INT); } else if (VAR_STRING.EndsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = LITERAL_INT; VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_STRING.Length - LITERAL_INT); } else if (VAR_STRING.EndsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = LITERAL_INT; VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_STRING.Length - LITERAL_INT); } else { VAR_INT = LITERAL_INT; } waitTimeSec = double.Parse(VAR_STRING, CultureInfo.InvariantCulture) * VAR_INT; } else { throw new ArgumentException(LITERAL_STRING); } }
public PutAttributesRequest(string VAR_STRING, string VAR_STRING, List<ReplaceableAttribute> VAR_LIST<REPLACEABLEATTRIBUTE>, UpdateCondition VAR_UPDATECONDITION) { _domainName = VAR_STRING; _itemName = VAR_STRING; _attributes = VAR_LIST<REPLACEABLEATTRIBUTE>; _expected = VAR_UPDATECONDITION; }
public virtual DescribeStreamConsumerResponse METHOD_NAME(DescribeStreamConsumerRequest VAR_DESCRIBESTREAMCONSUMERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStreamConsumerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStreamConsumerResponseUnmarshaller.Instance; return Invoke<DescribeStreamConsumerResponse>(VAR_DESCRIBESTREAMCONSUMERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { this.frozen = true; }
public FuzzyLikeThisQueryBuilder(Analyzer VAR_ANALYZER) { this.VAR_ANALYZER = VAR_ANALYZER; }
public virtual CopyDBClusterSnapshotResponse METHOD_NAME(CopyDBClusterSnapshotRequest VAR_COPYDBCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyDBClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyDBClusterSnapshotResponseUnmarshaller.Instance; return Invoke<CopyDBClusterSnapshotResponse>(VAR_COPYDBCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public OutputStreamDataOutput(Stream VAR_STREAM) { this._writer = new BinaryWriter(VAR_STREAM); }
public virtual string METHOD_NAME(string VAR_STRING) { int VAR_INT = base.Find(VAR_STRING); if (VAR_INT >= LITERAL_INT) { return UnpackValues(VAR_INT); } return LITERAL_STRING; }
public static int METHOD_NAME(BytesRef VAR_BYTESREF, int VAR_INT) { return METHOD_NAME(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Length, VAR_INT); }
public virtual bool METHOD_NAME() { return overridable; }
public virtual UpdateMemberResponse METHOD_NAME(UpdateMemberRequest VAR_UPDATEMEMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMemberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMemberResponseUnmarshaller.Instance; return Invoke<UpdateMemberResponse>(VAR_UPDATEMEMBERREQUEST, VAR_VAR); }
public virtual CopyFpgaImageResponse METHOD_NAME(CopyFpgaImageRequest VAR_COPYFPGAIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyFpgaImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyFpgaImageResponseUnmarshaller.Instance; return Invoke<CopyFpgaImageResponse>(VAR_COPYFPGAIMAGEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { try { OpenNLPOpsFactory.GetPOSTaggerModel(posTaggerModelFile, VAR_IRESOURCELOADER); } catch (IOException e) { throw new ArgumentException(e.ToString(), e); } }
public CellRangeAddress(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) : base(firstRow, lastRow, firstCol, lastCol) { if (VAR_INT < VAR_INT || VAR_INT < VAR_INT) throw new ArgumentException(LITERAL_STRING); }
public override bool METHOD_NAME(ATNConfig VAR_ATNCONFIG, ATNConfig VAR_ATNCONFIG) { if (VAR_ATNCONFIG == VAR_ATNCONFIG) { return true; } if (VAR_ATNCONFIG == LITERAL_NULL || VAR_ATNCONFIG == LITERAL_NULL) { return false; } return VAR_ATNCONFIG.state.stateNumber == VAR_ATNCONFIG.state.stateNumber && VAR_ATNCONFIG.context.METHOD_NAME(VAR_ATNCONFIG.context); }
public virtual NGit.Api.PushCommand METHOD_NAME() { refSpecs.AddItem(NGit.Transport.Transport.REFSPEC_TAGS); return this; }
public virtual CreateEvaluationResponse METHOD_NAME(CreateEvaluationRequest VAR_CREATEEVALUATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEvaluationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEvaluationResponseUnmarshaller.Instance; return Invoke<CreateEvaluationResponse>(VAR_CREATEEVALUATIONREQUEST, VAR_VAR); }
public virtual DescribeOrderableDBInstanceOptionsResponse METHOD_NAME(DescribeOrderableDBInstanceOptionsRequest VAR_DESCRIBEORDERABLEDBINSTANCEOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOrderableDBInstanceOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOrderableDBInstanceOptionsResponseUnmarshaller.Instance; return Invoke<DescribeOrderableDBInstanceOptionsResponse>(VAR_DESCRIBEORDERABLEDBINSTANCEOPTIONSREQUEST, VAR_VAR); }
public long METHOD_NAME() { return (long)currentBlockIndex * outerInstance.blockSize + currentBlockUpto; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new FrenchLightStemFilter(VAR_TOKENSTREAM); }
public virtual AssignPrivateIpAddressesResponse METHOD_NAME(AssignPrivateIpAddressesRequest VAR_ASSIGNPRIVATEIPADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssignPrivateIpAddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssignPrivateIpAddressesResponseUnmarshaller.Instance; return Invoke<AssignPrivateIpAddressesResponse>(VAR_ASSIGNPRIVATEIPADDRESSESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(FilePath VAR_FILEPATH, bool VAR_BOOL) { return false; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); TwoDEval VAR_TWODEVAL = LookupUtils.ResolveTableArrayArg(VAR_VALUEEVAL); bool VAR_BOOL = LookupUtils.ResolveRangeLookupArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); int VAR_INT = LookupUtils.LookupIndexOfValue(VAR_VALUEEVAL, LookupUtils.CreateColumnVector(VAR_TWODEVAL, LITERAL_INT), VAR_BOOL); int VAR_INT = LookupUtils.ResolveRowOrColIndexArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); ValueVector VAR_VALUEVECTOR = CreateResultColumnVector(VAR_TWODEVAL, VAR_INT); return VAR_VALUEVECTOR.GetItem(VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public virtual CreateGameSessionResponse METHOD_NAME(CreateGameSessionRequest VAR_CREATEGAMESESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGameSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGameSessionResponseUnmarshaller.Instance; return Invoke<CreateGameSessionResponse>(VAR_CREATEGAMESESSIONREQUEST, VAR_VAR); }
public RowRecord METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } return (RowRecord)_rowRecords[VAR_INT]; }
public virtual DescribeClientPropertiesResponse METHOD_NAME(DescribeClientPropertiesRequest VAR_DESCRIBECLIENTPROPERTIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientPropertiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientPropertiesResponseUnmarshaller.Instance; return Invoke<DescribeClientPropertiesResponse>(VAR_DESCRIBECLIENTPROPERTIESREQUEST, VAR_VAR); }
public Builder(CompositeReader VAR_COMPOSITEREADER) { this.VAR_COMPOSITEREADER = VAR_COMPOSITEREADER; }
public override void METHOD_NAME(int VAR_INT) { lock (this) { @in.METHOD_NAME(VAR_INT); } }
public virtual void METHOD_NAME(int VAR_INT) { METHOD_NAME(VAR_INT.ToString()); }
public static NGit.ObjectId METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT); }
public override string METHOD_NAME() { return Slice.METHOD_NAME() + LITERAL_STRING + DocsEnum; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Mode); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public static int METHOD_NAME(object VAR_OBJECT) { return (VAR_OBJECT == LITERAL_NULL) ? LITERAL_INT : VAR_OBJECT.GetHashCode(); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, float VAR_FLOAT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual ListJournalS3ExportsForLedgerResponse METHOD_NAME(ListJournalS3ExportsForLedgerRequest VAR_LISTJOURNALS3EXPORTSFORLEDGERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJournalS3ExportsForLedgerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJournalS3ExportsForLedgerResponseUnmarshaller.Instance; return Invoke<ListJournalS3ExportsForLedgerResponse>(VAR_LISTJOURNALS3EXPORTSFORLEDGERREQUEST, VAR_VAR); }
public virtual DeleteMessageBatchResponse METHOD_NAME(DeleteMessageBatchRequest VAR_DELETEMESSAGEBATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMessageBatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMessageBatchResponseUnmarshaller.Instance; return Invoke<DeleteMessageBatchResponse>(VAR_DELETEMESSAGEBATCHREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Sid + PtgClass); WriteCoordinates(VAR_ILITTLEENDIANOUTPUT); }
public FSTCompletionBuilder(int VAR_INT, IBytesRefSorter VAR_IBYTESREFSORTER, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } if (VAR_IBYTESREFSORTER == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_IBYTESREFSORTER = VAR_IBYTESREFSORTER; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public virtual void METHOD_NAME() { refCount.IncrementAndGet(); }
public override bool METHOD_NAME(params CredentialItem[] VAR_CREDENTIALITEM[]) { foreach (CredentialItem i in VAR_CREDENTIALITEM[]) { if (i is CredentialItem.Username) { continue; } else { if (i is CredentialItem.Password) { continue; } else { return false; } } } return true; }
public DeleteVpnConnectionRequest(string VAR_STRING) { _vpnConnectionId = VAR_STRING; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { METHOD_NAME(VAR_DOUBLE.ToString()); }
public virtual UpdateUserProfileResponse METHOD_NAME(UpdateUserProfileRequest VAR_UPDATEUSERPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserProfileResponseUnmarshaller.Instance; return Invoke<UpdateUserProfileResponse>(VAR_UPDATEUSERPROFILEREQUEST, VAR_VAR); }
public override TreeFilter METHOD_NAME() { TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_TREEFILTER[].Length; i++) { VAR_TREEFILTER[][i] = subfilters[i].METHOD_NAME(); } return new AndTreeFilter.List(VAR_TREEFILTER[]); }
public GetFederationTokenRequest(string VAR_STRING) { _name = VAR_STRING; }
public static ICell METHOD_NAME(ICell VAR_ICELL) { String VAR_STRING = VAR_ICELL.RichStringCellValue.String; bool VAR_BOOL = false; String VAR_STRING = VAR_STRING.ToLower(); for (int i = LITERAL_INT; i < unicodeMappings.Length; i++) { UnicodeMapping VAR_UNICODEMAPPING = unicodeMappings[i]; String VAR_STRING = VAR_UNICODEMAPPING.entityName; if (VAR_STRING.IndexOf(VAR_STRING, StringComparison.Ordinal) != -LITERAL_INT) { VAR_STRING = VAR_STRING.Replace(VAR_STRING, VAR_UNICODEMAPPING.resolvedValue); VAR_BOOL = true; } } if (VAR_BOOL) { VAR_ICELL.SetCellValue(new HSSFRichTextString(VAR_STRING)); } return VAR_ICELL; }
public virtual CreateChangeSetResponse METHOD_NAME(CreateChangeSetRequest VAR_CREATECHANGESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateChangeSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateChangeSetResponseUnmarshaller.Instance; return Invoke<CreateChangeSetResponse>(VAR_CREATECHANGESETREQUEST, VAR_VAR); }
protected internal SubmoduleStatusCommand(Repository VAR_REPOSITORY) : base(repo) { paths = new AList<string>(); }
public virtual int METHOD_NAME() { return currentSource.regionList.resultStart; }
public static BigInteger METHOD_NAME(BigInteger VAR_BIGINTEGER, int VAR_INT) { if (VAR_INT < LITERAL_INT) { return VAR_BIGINTEGER; } return VAR_BIGINTEGER + (HALF_BITS[VAR_INT]); }
public static DateTime METHOD_NAME(DateTime VAR_DATETIME, Resolution VAR_RESOLUTION) { return new DateTime(METHOD_NAME(VAR_DATETIME.Ticks / TimeSpan.TicksPerMillisecond, VAR_RESOLUTION)); }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { if (VAR_CHAR[] == LITERAL_NULL) return LITERAL_INT; else if (VAR_CHAR[] == LITERAL_NULL) return (VAR_INT < VAR_CHAR[].Length) ? LITERAL_INT : LITERAL_INT; int VAR_INT = VAR_INT, VAR_INT = VAR_INT; while (VAR_INT < VAR_CHAR[].Length && VAR_INT < VAR_CHAR[].Length && VAR_CHAR[][VAR_INT] == VAR_CHAR[][VAR_INT]) { VAR_INT++; VAR_INT++; } if (VAR_INT == VAR_CHAR[].Length) { return LITERAL_INT; } else { if (VAR_INT == VAR_CHAR[].Length) return LITERAL_INT; else return (VAR_CHAR[][VAR_INT] > VAR_CHAR[][VAR_INT]) ? LITERAL_INT : -LITERAL_INT; } }
public virtual AttachInternetGatewayResponse METHOD_NAME(AttachInternetGatewayRequest VAR_ATTACHINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachInternetGatewayResponseUnmarshaller.Instance; return Invoke<AttachInternetGatewayResponse>(VAR_ATTACHINTERNETGATEWAYREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (this) { if (VAR_OBJECT == LITERAL_NULL) { throw new System.ArgumentNullException(); } java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = table; int VAR_INT = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length; { for (int i = LITERAL_INT; i < VAR_INT; i++) { { for (java.util.Hashtable.HashtableEntry<K, V> e = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][i]; e != LITERAL_NULL; e = e.next) { if (VAR_OBJECT.Equals(e.VAR_OBJECT)) { return true; } } } } } return false; } }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public override void METHOD_NAME(string VAR_STRING) { METHOD_NAME(VAR_STRING.ToCharArray()); }
public Sort(SortField VAR_SORTFIELD) { SetSort(VAR_SORTFIELD); }
public virtual DescribeEventCategoriesResponse METHOD_NAME(DescribeEventCategoriesRequest VAR_DESCRIBEEVENTCATEGORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventCategoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventCategoriesResponseUnmarshaller.Instance; return Invoke<DescribeEventCategoriesResponse>(VAR_DESCRIBEEVENTCATEGORIESREQUEST, VAR_VAR); }
public virtual UpdateDeviceResponse METHOD_NAME(UpdateDeviceRequest VAR_UPDATEDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDeviceResponseUnmarshaller.Instance; return Invoke<UpdateDeviceResponse>(VAR_UPDATEDEVICEREQUEST, VAR_VAR); }
public virtual CreateWorkerBlockResponse METHOD_NAME(CreateWorkerBlockRequest VAR_CREATEWORKERBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateWorkerBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateWorkerBlockResponseUnmarshaller.Instance; return Invoke<CreateWorkerBlockResponse>(VAR_CREATEWORKERBLOCKREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { lock (this) { throw new System.IO.IOException(); } }
public void METHOD_NAME(TextReader VAR_TEXTREADER) { if (VAR_TEXTREADER == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } else if (this.m_input != ILLEGAL_STATE_READER) { throw new InvalidOperationException(LITERAL_STRING); } this.inputPending = VAR_TEXTREADER; Debug.Assert(SetReaderTestPoint()); }
public virtual GetUsagePlanKeysResponse METHOD_NAME(GetUsagePlanKeysRequest VAR_GETUSAGEPLANKEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUsagePlanKeysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUsagePlanKeysResponseUnmarshaller.Instance; return Invoke<GetUsagePlanKeysResponse>(VAR_GETUSAGEPLANKEYSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (SubInfo si in subInfos) VAR_STRINGBUILDER.Append(si.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Number.METHOD_NAME(totalBoost)).Append(LITERAL_CHAR).Append(startOffset).Append(LITERAL_CHAR).Append(endOffset).Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new LimitTokenPositionFilter(VAR_TOKENSTREAM, maxTokenPosition, consumeAllTokens); }
public virtual DescribeFleetUtilizationResponse METHOD_NAME(DescribeFleetUtilizationRequest VAR_DESCRIBEFLEETUTILIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetUtilizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetUtilizationResponseUnmarshaller.Instance; return Invoke<DescribeFleetUtilizationResponse>(VAR_DESCRIBEFLEETUTILIZATIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { Stream VAR_STREAM = LITERAL_NULL; try { if (dictFile != LITERAL_NULL) { dictionary = GetWordSet(VAR_IRESOURCELOADER, dictFile, false); } VAR_STREAM = VAR_IRESOURCELOADER.OpenResource(hypFile); var VAR_VAR = string.IsNullOrEmpty(encoding) ? Encoding.UTF8 : Encoding.GetEncoding(encoding); hyphenator = HyphenationCompoundWordTokenFilter.GetHyphenationTree(VAR_STREAM, VAR_VAR); } finally { IOUtils.DisposeWhileHandlingException(VAR_STREAM); } }
public virtual DeclineInvitationsResponse METHOD_NAME(DeclineInvitationsRequest VAR_DECLINEINVITATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeclineInvitationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeclineInvitationsResponseUnmarshaller.Instance; return Invoke<DeclineInvitationsResponse>(VAR_DECLINEINVITATIONSREQUEST, VAR_VAR); }
public virtual DescribeAutoScalingGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeAutoScalingGroupsRequest()); }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, mode); }
public virtual NGit.Api.CreateBranchCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; this.startCommit = LITERAL_NULL; return this; }
public virtual StopDBInstanceResponse METHOD_NAME(StopDBInstanceRequest VAR_STOPDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopDBInstanceResponseUnmarshaller.Instance; return Invoke<StopDBInstanceResponse>(VAR_STOPDBINSTANCEREQUEST, VAR_VAR); }
public SuggestWordQueue(int VAR_INT, IComparer<SuggestWord> VAR_ICOMPARER<SUGGESTWORD>) : base(size) { this.VAR_ICOMPARER<SUGGESTWORD> = VAR_ICOMPARER<SUGGESTWORD>; }
public LBCookieStickinessPolicy(string VAR_STRING, long VAR_LONG) { _policyName = VAR_STRING; _cookieExpirationPeriod = VAR_LONG; }
public SheetRangeEvaluator(int VAR_INT, int VAR_INT, SheetRefEvaluator[] VAR_SHEETREFEVALUATOR[]) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } if (VAR_INT < VAR_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING); } _firstSheetIndex = VAR_INT; _lastSheetIndex = VAR_INT; _sheetEvaluators = VAR_SHEETREFEVALUATOR[]; }
public RevokeTokenRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { AreaEval VAR_AREAEVAL; double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); if (Double.IsNaN(VAR_DOUBLE) || Double.IsInfinity(VAR_DOUBLE)) { throw new EvaluationException(ErrorEval.NUM_ERROR); } VAR_AREAEVAL = ConvertRangeArg(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } return eval(VAR_INT, VAR_INT, VAR_DOUBLE, VAR_AREAEVAL, true); }
public override String METHOD_NAME() { return LITERAL_STRING; }
public sbyte METHOD_NAME()throws IOException { if (bufferPos ==bufferSize ) {refill(); } Debug.Assert(bufferPos == buffer.position(), LITERAL_STRING + bufferPos + LITERAL_STRING + buffer.position()); bufferPos++; return buffer.get(); }
public virtual ListTargetsByRuleResponse METHOD_NAME(ListTargetsByRuleRequest VAR_LISTTARGETSBYRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTargetsByRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTargetsByRuleResponseUnmarshaller.Instance; return Invoke<ListTargetsByRuleResponse>(VAR_LISTTARGETSBYRULEREQUEST, VAR_VAR); }
public virtual DisassociateQualificationFromWorkerResponse METHOD_NAME(DisassociateQualificationFromWorkerRequest VAR_DISASSOCIATEQUALIFICATIONFROMWORKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateQualificationFromWorkerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateQualificationFromWorkerResponseUnmarshaller.Instance; return Invoke<DisassociateQualificationFromWorkerResponse>(VAR_DISASSOCIATEQUALIFICATIONFROMWORKERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } CompiledAutomaton VAR_COMPILEDAUTOMATON = (CompiledAutomaton)VAR_OBJECT; if (Type != VAR_COMPILEDAUTOMATON.Type) { return false; } if (Type == AUTOMATON_TYPE.SINGLE || Type == AUTOMATON_TYPE.PREFIX) { if (!Term.METHOD_NAME(VAR_COMPILEDAUTOMATON.Term)) { return false; } } else if (Type == AUTOMATON_TYPE.NORMAL) { if (!RunAutomaton.METHOD_NAME(VAR_COMPILEDAUTOMATON.RunAutomaton)) { return false; } } return true; }
public static CharFilterFactory METHOD_NAME(string VAR_STRING, IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) { return loader.NewInstance(VAR_STRING, VAR_IDICTIONARY<STRING, STRING>); }
public override string METHOD_NAME() { string[] VAR_STRING[] = new string[] { LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING }; long VAR_LONG = GetIndexSize(); int VAR_INT = LITERAL_INT; while (LITERAL_INT <= VAR_LONG && VAR_INT < VAR_STRING[].Length - LITERAL_INT) { int VAR_INT = (int)(VAR_LONG % LITERAL_INT); VAR_LONG /= LITERAL_INT; if (VAR_INT != LITERAL_INT) { VAR_LONG++; } VAR_INT++; } return LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_STRING[][VAR_INT] + LITERAL_STRING; }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.IO.IOException(); }
public virtual void METHOD_NAME(int VAR_INT) { long VAR_LONG = clock.Get(); if (timeout < VAR_LONG) { if (greedy) { collector.METHOD_NAME(VAR_INT); } throw new TimeExceededException(timeout - t0, VAR_LONG - t0, docBase + VAR_INT); } collector.METHOD_NAME(VAR_INT); }
public LocalFile(FilePath VAR_FILEPATH, int VAR_INT) : base(inCoreLimit) { this.VAR_FILEPATH = VAR_FILEPATH; }
public override E METHOD_NAME(int VAR_INT) { object[] VAR_OBJECT[] = array; int VAR_INT = _size; if (VAR_INT >= VAR_INT) { throwIndexOutOfBoundsException(VAR_INT, VAR_INT); } E VAR_E = (E)VAR_OBJECT[][VAR_INT]; System.Array.Copy(VAR_OBJECT[], VAR_INT + LITERAL_INT, VAR_OBJECT[], VAR_INT, --VAR_INT - VAR_INT); VAR_OBJECT[][VAR_INT] = LITERAL_NULL; _size = VAR_INT; modCount++; return VAR_E; }
public virtual RequestUploadCredentialsResponse METHOD_NAME(RequestUploadCredentialsRequest VAR_REQUESTUPLOADCREDENTIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RequestUploadCredentialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RequestUploadCredentialsResponseUnmarshaller.Instance; return Invoke<RequestUploadCredentialsResponse>(VAR_REQUESTUPLOADCREDENTIALSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(OutputStream VAR_OUTPUTSTREAM) { if (IsLarge()) { ObjectStream VAR_OBJECTSTREAM = OpenStream(); try { long VAR_LONG = VAR_OBJECTSTREAM.GetSize(); byte[] VAR_BYTE[] = new byte[LITERAL_INT]; long VAR_LONG = LITERAL_INT; while (VAR_LONG < VAR_LONG) { int VAR_INT = VAR_OBJECTSTREAM.Read(VAR_BYTE[]); if (VAR_INT < LITERAL_INT) { throw new EOFException(); } VAR_OUTPUTSTREAM.Write(VAR_BYTE[], LITERAL_INT, VAR_INT); VAR_LONG += VAR_INT; } if (LITERAL_INT <= VAR_OBJECTSTREAM.Read()) { throw new EOFException(); } } finally { VAR_OBJECTSTREAM.Close(); } } else { VAR_OUTPUTSTREAM.Write(GetCachedBytes()); } }
public override V METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { return removeNullKey(); } int VAR_INT = secondaryHash(VAR_OBJECT.GetHashCode()); java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = table; int VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length - LITERAL_INT); { java.util.HashMap.HashMapEntry<K, V> VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][VAR_INT]; java.util.HashMap.HashMapEntry<K, V> VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> = LITERAL_NULL; for (; VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> != LITERAL_NULL; VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>, VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.next) { if (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.VAR_OBJECT)) { if (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> == LITERAL_NULL) { VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][VAR_INT] = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.next; } else { VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.next = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.next; } modCount++; _size--; postRemove(VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>); return VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.value; } } } return default(V); }
public override RevFilter METHOD_NAME() { return a; }
public virtual DescribeVpcsResponse METHOD_NAME(DescribeVpcsRequest VAR_DESCRIBEVPCSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcsResponseUnmarshaller.Instance; return Invoke<DescribeVpcsResponse>(VAR_DESCRIBEVPCSREQUEST, VAR_VAR); }
public virtual UpdateGameSessionQueueResponse METHOD_NAME(UpdateGameSessionQueueRequest VAR_UPDATEGAMESESSIONQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGameSessionQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGameSessionQueueResponseUnmarshaller.Instance; return Invoke<UpdateGameSessionQueueResponse>(VAR_UPDATEGAMESESSIONQUEUEREQUEST, VAR_VAR); }
public String METHOD_NAME() { return title; }
public void METHOD_NAME(IList<Head> VAR_ILIST<HEAD>) { if (this.VAR_ILIST<HEAD> != LITERAL_NULL) { throw new InvalidOperationException(JGitText.Get().propertyIsAlreadyNonNull); } this.VAR_ILIST<HEAD> = VAR_ILIST<HEAD>; }
public virtual ObjectId METHOD_NAME() { return expectedOldObjectId; }
public virtual GetRecordsResponse METHOD_NAME(GetRecordsRequest VAR_GETRECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRecordsResponseUnmarshaller.Instance; return Invoke<GetRecordsResponse>(VAR_GETRECORDSREQUEST, VAR_VAR); }
public Deleted3DPxg(int VAR_INT, String VAR_STRING) { this.VAR_INT = VAR_INT; this.VAR_STRING = VAR_STRING; }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.Skip(); }
public virtual DescribeScheduledInstancesResponse METHOD_NAME(DescribeScheduledInstancesRequest VAR_DESCRIBESCHEDULEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScheduledInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScheduledInstancesResponseUnmarshaller.Instance; return Invoke<DescribeScheduledInstancesResponse>(VAR_DESCRIBESCHEDULEDINSTANCESREQUEST, VAR_VAR); }
public MultiFields(Fields[] VAR_FIELDS[], ReaderSlice[] VAR_READERSLICE[]) { this.VAR_FIELDS[] = VAR_FIELDS[]; this.VAR_READERSLICE[] = VAR_READERSLICE[]; }
public int METHOD_NAME() { if (!HasNext()) { return -LITERAL_INT; } return ((Record)_list[_nextIndex]).Sid; }
public virtual ConfigureAgentResponse METHOD_NAME(ConfigureAgentRequest VAR_CONFIGUREAGENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfigureAgentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfigureAgentResponseUnmarshaller.Instance; return Invoke<ConfigureAgentResponse>(VAR_CONFIGUREAGENTREQUEST, VAR_VAR); }
public virtual GetStreamingDistributionResponse METHOD_NAME(GetStreamingDistributionRequest VAR_GETSTREAMINGDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStreamingDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStreamingDistributionResponseUnmarshaller.Instance; return Invoke<GetStreamingDistributionResponse>(VAR_GETSTREAMINGDISTRIBUTIONREQUEST, VAR_VAR); }
public virtual ListTrialComponentsResponse METHOD_NAME(ListTrialComponentsRequest VAR_LISTTRIALCOMPONENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrialComponentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrialComponentsResponseUnmarshaller.Instance; return Invoke<ListTrialComponentsResponse>(VAR_LISTTRIALCOMPONENTSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { throw new System.NotImplementedException(); }
public int METHOD_NAME(NormalisedDecimal VAR_NORMALISEDDECIMAL) { int VAR_INT = _relativeDecimalExponent - VAR_NORMALISEDDECIMAL._relativeDecimalExponent; if (VAR_INT != LITERAL_INT) { return VAR_INT; } if (_wholePart > VAR_NORMALISEDDECIMAL._wholePart) { return LITERAL_INT; } if (_wholePart < VAR_NORMALISEDDECIMAL._wholePart) { return -LITERAL_INT; } return _fractionalPart - VAR_NORMALISEDDECIMAL._fractionalPart; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new JapaneseKatakanaStemFilter(VAR_TOKENSTREAM, minimumLength); }
public virtual EnableAvailabilityZonesForLoadBalancerResponse METHOD_NAME(EnableAvailabilityZonesForLoadBalancerRequest VAR_ENABLEAVAILABILITYZONESFORLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableAvailabilityZonesForLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller.Instance; return Invoke<EnableAvailabilityZonesForLoadBalancerResponse>(VAR_ENABLEAVAILABILITYZONESFORLOADBALANCERREQUEST, VAR_VAR); }
public virtual UpdateEnvironmentResponse METHOD_NAME(UpdateEnvironmentRequest VAR_UPDATEENVIRONMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEnvironmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEnvironmentResponseUnmarshaller.Instance; return Invoke<UpdateEnvironmentResponse>(VAR_UPDATEENVIRONMENTREQUEST, VAR_VAR); }
public virtual ListTagsForDomainResponse METHOD_NAME(ListTagsForDomainRequest VAR_LISTTAGSFORDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForDomainResponseUnmarshaller.Instance; return Invoke<ListTagsForDomainResponse>(VAR_LISTTAGSFORDOMAINREQUEST, VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { return Math.METHOD_NAME(VAR_DOUBLE) / Math.METHOD_NAME(VAR_DOUBLE); }
public virtual void METHOD_NAME(bool VAR_BOOL) { throw new System.NotImplementedException(); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.ByteBuffer)) { return false; } java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = (java.nio.ByteBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.BYTEBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.BYTEBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { VAR_BOOL = get(VAR_INT++) == VAR_JAVA.NIO.BYTEBUFFER.get(VAR_INT++); } return VAR_BOOL; }
public virtual DescribeVirtualGatewaysResponse METHOD_NAME() { return METHOD_NAME(new DescribeVirtualGatewaysRequest()); }
public virtual FieldConfig METHOD_NAME(string VAR_STRING) { FieldConfig VAR_FIELDCONFIG = new FieldConfig(StringUtils.ToString(VAR_STRING)); foreach (IFieldConfigListener listener in this.listeners) { listener.BuildFieldConfig(VAR_FIELDCONFIG); } return VAR_FIELDCONFIG; }
public void METHOD_NAME(IRow VAR_IROW, int VAR_INT) { ICell VAR_ICELL = CellUtil.GetCell(VAR_IROW, VAR_INT); CellUtil.SetCellStyleProperty(VAR_ICELL, _workbook, _propertyName, _propertyValue); }
public virtual RebootInstancesResponse METHOD_NAME(RebootInstancesRequest VAR_REBOOTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootInstancesResponseUnmarshaller.Instance; return Invoke<RebootInstancesResponse>(VAR_REBOOTINSTANCESREQUEST, VAR_VAR); }
public Predicate(int VAR_INT, int VAR_INT, bool VAR_BOOL) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public void METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[], int VAR_INT) { int VAR_INT = FindBiggest(VAR_INT[]); int VAR_INT = FindBiggest(VAR_INT[]); int VAR_INT = FindSmallest(VAR_INT[]); int VAR_INT = FindSmallest(VAR_INT[]); HSSFPolygon VAR_HSSFPOLYGON = escherGroup.CreatePolygon(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT, VAR_INT)); VAR_HSSFPOLYGON.SetPolygonDrawArea(VAR_INT - VAR_INT, VAR_INT - VAR_INT); VAR_HSSFPOLYGON.SetPoints(AddToAll(VAR_INT[], -VAR_INT), AddToAll(VAR_INT[], -VAR_INT)); VAR_HSSFPOLYGON.SetLineStyleColor(foreground.R, foreground.G, foreground.B); VAR_HSSFPOLYGON.SetFillColor(foreground.R, foreground.G, foreground.B); }
public ListEventsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual ListIAMPolicyAssignmentsResponse METHOD_NAME(ListIAMPolicyAssignmentsRequest VAR_LISTIAMPOLICYASSIGNMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIAMPolicyAssignmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIAMPolicyAssignmentsResponseUnmarshaller.Instance; return Invoke<ListIAMPolicyAssignmentsResponse>(VAR_LISTIAMPOLICYASSIGNMENTSREQUEST, VAR_VAR); }
public CountingOutputStream(OutputStream VAR_OUTPUTSTREAM) { this.VAR_OUTPUTSTREAM = VAR_OUTPUTSTREAM; }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { if (!VAR_BYTESREF.Equals(term)) { state.CopyFrom(VAR_TERMSTATE); term = BytesRef.DeepCopyOf(VAR_BYTESREF); seekPending = true; } }
public void METHOD_NAME(long VAR_LONG)throws IOException { if (VAR_LONG !=FilePointer ) {long VAR_LONG = VAR_LONG & ALIGN_NOT_MASK; filePos = VAR_LONG bufferSize ; int VAR_INT = (int)(VAR_LONG - alignedPos); if (VAR_INT != 0 ) {refill(); buffer.position(VAR_INT) ; bufferPos = VAR_INT } else { bufferPos = bufferSize; } } }
public override void METHOD_NAME() { removeAllElements(); }
public QueryCustomerByPhoneRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { return this.METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, LITERAL_NULL); }
public virtual ListDashboardVersionsResponse METHOD_NAME(ListDashboardVersionsRequest VAR_LISTDASHBOARDVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDashboardVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDashboardVersionsResponseUnmarshaller.Instance; return Invoke<ListDashboardVersionsResponse>(VAR_LISTDASHBOARDVERSIONSREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME(int VAR_INT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_INT; return this; }
public virtual DeleteHostedZoneResponse METHOD_NAME(DeleteHostedZoneRequest VAR_DELETEHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHostedZoneResponseUnmarshaller.Instance; return Invoke<DeleteHostedZoneResponse>(VAR_DELETEHOSTEDZONEREQUEST, VAR_VAR); }
public virtual CreateReceiptRuleResponse METHOD_NAME(CreateReceiptRuleRequest VAR_CREATERECEIPTRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateReceiptRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateReceiptRuleResponseUnmarshaller.Instance; return Invoke<CreateReceiptRuleResponse>(VAR_CREATERECEIPTRULEREQUEST, VAR_VAR); }
public virtual RefUpdate.Result METHOD_NAME() { try { result = DoRename(); return result; } catch (IOException err) { result = RefUpdate.Result.IO_FAILURE; throw; } }
public virtual DescribeDBInstancesResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBInstancesRequest()); }
public override string METHOD_NAME() { return ruleName + LITERAL_STRING + bypassTokenType; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { return LITERAL_STRING; }
public virtual CreateAccountResponse METHOD_NAME(CreateAccountRequest VAR_CREATEACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAccountResponseUnmarshaller.Instance; return Invoke<CreateAccountResponse>(VAR_CREATEACCOUNTREQUEST, VAR_VAR); }
public override java.util.MapClass.Entry<K, V> METHOD_NAME() { return this.nextEntry(); }
public BaseRef(RefEval VAR_REFEVAL) { _refEval = VAR_REFEVAL; _areaEval = LITERAL_NULL; _firstRowIndex = VAR_REFEVAL.Row; _firstColumnIndex = VAR_REFEVAL.Column; _height = LITERAL_INT; _width = LITERAL_INT; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT; } } }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT) { _precedenceStack.RemoveAt(_precedenceStack.Count - LITERAL_INT); _ctx.Stop = _input.LT(-LITERAL_INT); ParserRuleContext VAR_PARSERRULECONTEXT = _ctx; if (_parseListeners != LITERAL_NULL) { while (_ctx != VAR_PARSERRULECONTEXT) { TriggerExitRuleEvent(); _ctx = (ParserRuleContext)_ctx.Parent; } } else { _ctx = VAR_PARSERRULECONTEXT; } VAR_PARSERRULECONTEXT.Parent = VAR_PARSERRULECONTEXT; if (_buildParseTrees && VAR_PARSERRULECONTEXT != LITERAL_NULL) { VAR_PARSERRULECONTEXT.AddChild(VAR_PARSERRULECONTEXT); } }
public CancelBundleTaskRequest(string VAR_STRING) { _bundleId = VAR_STRING; }
public virtual void METHOD_NAME(CharsRef VAR_CHARSREF, CharsRef VAR_CHARSREF, bool VAR_BOOL) { METHOD_NAME(VAR_CHARSREF, CountWords(VAR_CHARSREF), VAR_CHARSREF, CountWords(VAR_CHARSREF), VAR_BOOL); }
public virtual SetIdentityDkimEnabledResponse METHOD_NAME(SetIdentityDkimEnabledRequest VAR_SETIDENTITYDKIMENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityDkimEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityDkimEnabledResponseUnmarshaller.Instance; return Invoke<SetIdentityDkimEnabledResponse>(VAR_SETIDENTITYDKIMENABLEDREQUEST, VAR_VAR); }
public virtual GetResolverEndpointResponse METHOD_NAME(GetResolverEndpointRequest VAR_GETRESOLVERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResolverEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResolverEndpointResponseUnmarshaller.Instance; return Invoke<GetResolverEndpointResponse>(VAR_GETRESOLVERENDPOINTREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING) { @string = VAR_STRING; start = offset = LITERAL_INT; end = VAR_STRING.Length; }
public override string METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public void METHOD_NAME(int VAR_INT) { _firstSheetIndex += VAR_INT; _lastSheetIndex += VAR_INT; }
public GalicianStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual ListRepositoryAssociationsResponse METHOD_NAME(ListRepositoryAssociationsRequest VAR_LISTREPOSITORYASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRepositoryAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRepositoryAssociationsResponseUnmarshaller.Instance; return Invoke<ListRepositoryAssociationsResponse>(VAR_LISTREPOSITORYASSOCIATIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); maxNumSegments = (int)double.Parse(VAR_STRING, CultureInfo.InvariantCulture); }
public override char METHOD_NAME() { return (char)getShort(); }
public override void METHOD_NAME(int VAR_INT) { if (VAR_INT == LITERAL_INT) { prevPtr = currPtr; currPtr = nextPtr; if (!Eof) { ParseEntry(); } return; } int VAR_INT = raw.Length; int VAR_INT = nextPtr; while (--VAR_INT > LITERAL_INT && VAR_INT != VAR_INT) { prevPtr = VAR_INT; while (raw[VAR_INT] != LITERAL_INT) { VAR_INT++; } VAR_INT += Constants.OBJECT_ID_LENGTH + LITERAL_INT; } if (VAR_INT != LITERAL_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } currPtr = VAR_INT; if (!Eof) { ParseEntry(); } }
public virtual ReceiveCommand.Type METHOD_NAME() { return type; }
public override java.nio.CharBuffer METHOD_NAME() { return copy(this, _mark); }
public NGramFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { minGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE); maxGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, NGramTokenFilter.DEFAULT_MAX_NGRAM_SIZE); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual AddRoleToDBClusterResponse METHOD_NAME(AddRoleToDBClusterRequest VAR_ADDROLETODBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddRoleToDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddRoleToDBClusterResponseUnmarshaller.Instance; return Invoke<AddRoleToDBClusterResponse>(VAR_ADDROLETODBCLUSTERREQUEST, VAR_VAR); }
public virtual NGit.Blame.BlameGenerator METHOD_NAME(RawTextComparator VAR_RAWTEXTCOMPARATOR) { textComparator = VAR_RAWTEXTCOMPARATOR; return this; }
public PatternCaptureGroupFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { pattern = GetPattern(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); preserveOriginal = VAR_IDICTIONARY<STRING, STRING>.TryGetValue(LITERAL_STRING, out string value) ? bool.Parse(value) : true; }
public virtual CreateObjectResponse METHOD_NAME(CreateObjectRequest VAR_CREATEOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateObjectResponseUnmarshaller.Instance; return Invoke<CreateObjectResponse>(VAR_CREATEOBJECTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_NULL; }
public override void METHOD_NAME() { if (this._enclosing.isShowing()) { this._enclosing.show(); } }
public virtual CreateResourceGroupResponse METHOD_NAME(CreateResourceGroupRequest VAR_CREATERESOURCEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateResourceGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateResourceGroupResponseUnmarshaller.Instance; return Invoke<CreateResourceGroupResponse>(VAR_CREATERESOURCEGROUPREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(RevFlag VAR_REVFLAG) { RevFlagSet VAR_REVFLAGSET = new RevFlagSet(); VAR_REVFLAGSET.AddItem(VAR_REVFLAG); return new RevFlagFilter.HasAll(VAR_REVFLAGSET); }
public override int METHOD_NAME() { return this._enclosing._size; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_index_extern_sheet); VAR_ILITTLEENDIANOUTPUT.WriteInt(unused1); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_STRING + m_directory + LITERAL_STRING + LockFactory; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public virtual CancelDataRepositoryTaskResponse METHOD_NAME(CancelDataRepositoryTaskRequest VAR_CANCELDATAREPOSITORYTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelDataRepositoryTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelDataRepositoryTaskResponseUnmarshaller.Instance; return Invoke<CancelDataRepositoryTaskResponse>(VAR_CANCELDATAREPOSITORYTASKREQUEST, VAR_VAR); }
public DateFormatTokenizer(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public static int METHOD_NAME(long VAR_LONG) { return (int)((VAR_LONG & EXPONENT_MASK) >> EXPONENT_SHIFT); }
public override string METHOD_NAME() { return LITERAL_STRING + m_distribution.METHOD_NAME() + LITERAL_STRING + m_lambda.METHOD_NAME() + m_normalization.METHOD_NAME(); }
public string METHOD_NAME() { return name; }
public virtual bool METHOD_NAME(string VAR_STRING) { return false; }
public override string METHOD_NAME() { string VAR_STRING; if (Directory != LITERAL_NULL) { VAR_STRING = Directory.GetPath(); } else { VAR_STRING = GetType().Name + LITERAL_STRING + Runtime.IdentityHashCode(this); } return LITERAL_STRING + VAR_STRING + LITERAL_STRING; }
public int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_13_border_styles1); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_14_border_styles2); VAR_INT += LITERAL_INT; return LITERAL_INT; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public PipedWriter(java.io.PipedReader VAR_JAVA.IO.PIPEDREADER) : base(destination) { throw new System.NotImplementedException(); }
public override string METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { bool VAR_BOOL = false; byte[] VAR_BYTE[] = new byte[VAR_INT - VAR_INT]; int VAR_INT = LITERAL_INT; while (VAR_INT < VAR_INT) { byte VAR_BYTE = VAR_BYTE[][VAR_INT++]; switch (VAR_BYTE) { case (byte)(LITERAL_CHAR): { VAR_BOOL = !VAR_BOOL; continue; goto case (byte)(LITERAL_CHAR); } case (byte)(LITERAL_CHAR): { if (VAR_BOOL || VAR_INT == VAR_INT) { VAR_BYTE[][VAR_INT++] = VAR_BYTE; } else { VAR_BYTE[][VAR_INT++] = VAR_BYTE[][VAR_INT++]; } continue; goto default; } default: { VAR_BYTE[][VAR_INT++] = VAR_BYTE; continue; break; } } } return RawParseUtils.Decode(Constants.CHARSET, VAR_BYTE[], LITERAL_INT, VAR_INT); }
public virtual CheckoutResult.Status METHOD_NAME() { return myStatus; }
public DeltaRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_max_change = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Count); }
public ListPartsRequest(string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _uploadId = VAR_STRING; }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public virtual void METHOD_NAME(int VAR_INT) { runInBackground = true; this.VAR_INT = VAR_INT; }
public TeeInputStream(InputStream VAR_INPUTSTREAM, OutputStream VAR_OUTPUTSTREAM) { this.VAR_INPUTSTREAM = VAR_INPUTSTREAM; this.VAR_OUTPUTSTREAM = VAR_OUTPUTSTREAM; }
public void METHOD_NAME(Property VAR_PROPERTY) { String VAR_STRING = VAR_PROPERTY.Name; if (_children_names.Contains(VAR_STRING)) { throw new IOException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } _children_names.Add(VAR_STRING); _children.Add(VAR_PROPERTY); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { int VAR_INT; if (VAR_VALUEEVAL is AreaEval) { VAR_INT = ((AreaEval)VAR_VALUEEVAL).Width; } else if (VAR_VALUEEVAL is RefEval) { VAR_INT = LITERAL_INT; } else { return ErrorEval.VALUE_INVALID; } return new NumberEval(VAR_INT); }
public virtual ListModelsResponse METHOD_NAME(ListModelsRequest VAR_LISTMODELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListModelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListModelsResponseUnmarshaller.Instance; return Invoke<ListModelsResponse>(VAR_LISTMODELSREQUEST, VAR_VAR); }
public ExtensionQuery(Classic.QueryParser VAR_CLASSIC.QUERYPARSER, string VAR_STRING, string VAR_STRING) { this.Field = VAR_STRING; this.RawQueryString = VAR_STRING; this.TopLevelParser = VAR_CLASSIC.QUERYPARSER; }
public override string METHOD_NAME() { return resourceDescription; }
public virtual GetDeploymentInstanceResponse METHOD_NAME(GetDeploymentInstanceRequest VAR_GETDEPLOYMENTINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentInstanceResponseUnmarshaller.Instance; return Invoke<GetDeploymentInstanceResponse>(VAR_GETDEPLOYMENTINSTANCEREQUEST, VAR_VAR); }
public MappingCharFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { mapping = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual bool METHOD_NAME(string VAR_STRING) { CredentialItem.StringType VAR_CREDENTIALITEM.STRINGTYPE = NewPrompt(VAR_STRING); if (provider.Get(uri, VAR_CREDENTIALITEM.STRINGTYPE)) { passphrase = VAR_CREDENTIALITEM.STRINGTYPE.GetValue(); return true; } else { passphrase = LITERAL_NULL; return false; } }
public virtual DescribeReservedDBInstancesResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedDBInstancesRequest()); }
public virtual UnsubscribeFromDatasetResponse METHOD_NAME(UnsubscribeFromDatasetRequest VAR_UNSUBSCRIBEFROMDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnsubscribeFromDatasetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnsubscribeFromDatasetResponseUnmarshaller.Instance; return Invoke<UnsubscribeFromDatasetResponse>(VAR_UNSUBSCRIBEFROMDATASETREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (buf == LITERAL_NULL) { throw new System.IO.IOException(); } return buf.Length - pos + @in.METHOD_NAME(); }
public override V METHOD_NAME(object VAR_OBJECT) { return this.isInBounds(VAR_OBJECT) ? this._enclosing.METHOD_NAME(VAR_OBJECT) : default(V); }
public void METHOD_NAME() { sst = new SSTRecord(); records.Add(records.Count - LITERAL_INT, CreateExtendedSST()); records.Add(records.Count - LITERAL_INT, sst); }
public virtual AddApplicationCloudWatchLoggingOptionResponse METHOD_NAME(AddApplicationCloudWatchLoggingOptionRequest VAR_ADDAPPLICATIONCLOUDWATCHLOGGINGOPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationCloudWatchLoggingOptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationCloudWatchLoggingOptionResponseUnmarshaller.Instance; return Invoke<AddApplicationCloudWatchLoggingOptionResponse>(VAR_ADDAPPLICATIONCLOUDWATCHLOGGINGOPTIONREQUEST, VAR_VAR); }
public virtual ListCampaignsResponse METHOD_NAME(ListCampaignsRequest VAR_LISTCAMPAIGNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCampaignsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCampaignsResponseUnmarshaller.Instance; return Invoke<ListCampaignsResponse>(VAR_LISTCAMPAIGNSREQUEST, VAR_VAR); }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.More(); }
public SetFaceCoverRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual GetInstanceAccessResponse METHOD_NAME(GetInstanceAccessRequest VAR_GETINSTANCEACCESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceAccessRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceAccessResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessResponse>(VAR_GETINSTANCEACCESSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { value = LITERAL_NULL; }
public virtual GetFederationTokenResponse METHOD_NAME(GetFederationTokenRequest VAR_GETFEDERATIONTOKENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFederationTokenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFederationTokenResponseUnmarshaller.Instance; return Invoke<GetFederationTokenResponse>(VAR_GETFEDERATIONTOKENREQUEST, VAR_VAR); }
public override int METHOD_NAME() { currentSentence = LITERAL_INT; text.SetIndex(text.BeginIndex); return Current; }
public virtual QueryPhraseMap METHOD_NAME(string VAR_STRING, string VAR_STRING) { QueryPhraseMap VAR_QUERYPHRASEMAP = GetRootMap(VAR_STRING); if (VAR_QUERYPHRASEMAP == LITERAL_NULL) return LITERAL_NULL; VAR_QUERYPHRASEMAP.subMap.TryGetValue(VAR_STRING, out QueryPhraseMap result); return result; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual DeleteLexiconResponse METHOD_NAME(DeleteLexiconRequest VAR_DELETELEXICONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLexiconRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLexiconResponseUnmarshaller.Instance; return Invoke<DeleteLexiconResponse>(VAR_DELETELEXICONREQUEST, VAR_VAR); }
public virtual DomainMetadataResponse METHOD_NAME(DomainMetadataRequest VAR_DOMAINMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DomainMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DomainMetadataResponseUnmarshaller.Instance; return Invoke<DomainMetadataResponse>(VAR_DOMAINMETADATAREQUEST, VAR_VAR); }
public RevFlag METHOD_NAME() { return REINTERESTING; }
public static void METHOD_NAME(FileDescriptor VAR_FILEDESCRIPTOR, long VAR_LONG, long VAR_LONG, int VAR_INT)throws IOException {int VAR_INT = posix_fadvise(VAR_FILEDESCRIPTOR, VAR_LONG, VAR_LONG, VAR_INT); if (VAR_INT != 0 ) { throw new Exception(VAR_INT VAR_CODE); } }
public virtual DeleteSchemaResponse METHOD_NAME(DeleteSchemaRequest VAR_DELETESCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSchemaResponseUnmarshaller.Instance; return Invoke<DeleteSchemaResponse>(VAR_DELETESCHEMAREQUEST, VAR_VAR); }
public virtual CreateBatchInferenceJobResponse METHOD_NAME(CreateBatchInferenceJobRequest VAR_CREATEBATCHINFERENCEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBatchInferenceJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBatchInferenceJobResponseUnmarshaller.Instance; return Invoke<CreateBatchInferenceJobResponse>(VAR_CREATEBATCHINFERENCEJOBREQUEST, VAR_VAR); }
public BitField(int VAR_INT) { this._mask = VAR_INT; int VAR_INT = LITERAL_INT; int VAR_INT = VAR_INT; if (VAR_INT != LITERAL_INT) { while ((VAR_INT & LITERAL_INT) == LITERAL_INT) { VAR_INT++; VAR_INT = VAR_INT >> LITERAL_INT; } } this._shift_count = VAR_INT; }
public virtual bool METHOD_NAME() { return failingPaths.Count > LITERAL_INT; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < len; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(bytes[i].Value.ToBinaryString()); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME() { if (this._enclosing.modCount != this.expectedModCount) { throw new java.util.ConcurrentModificationException(); } if (this.lastReturned == LITERAL_NULL) { throw new System.InvalidOperationException(); } this._enclosing.METHOD_NAME(this.lastReturned.key); this.lastReturned = LITERAL_NULL; this.expectedModCount = this._enclosing.modCount; }
public override bool METHOD_NAME() { return path.METHOD_NAME() || ANY_DIFF.METHOD_NAME(); }
public DeleteQueueRequest(string VAR_STRING) { _queueUrl = VAR_STRING; }
public ExternalName METHOD_NAME(int VAR_INT, int VAR_INT) { String VAR_STRING = linkTable.ResolveNameXText(VAR_INT, VAR_INT, this); if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } int VAR_INT = linkTable.ResolveNameXIx(VAR_INT, VAR_INT); return new ExternalName(VAR_STRING, VAR_INT, VAR_INT); }
public virtual RegisterUserResponse METHOD_NAME(RegisterUserRequest VAR_REGISTERUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterUserResponseUnmarshaller.Instance; return Invoke<RegisterUserResponse>(VAR_REGISTERUSERREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { VAR_INT[][VAR_INT++] = VAR_BYTE[][VAR_INT++] & LITERAL_INT; } }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { return doFixed(VAR_VALUEEVAL, new NumberEval(LITERAL_INT), BoolEval.FALSE, VAR_INT, VAR_INT); }
public sealed override object METHOD_NAME() { return protectedArray(); }
public int METHOD_NAME() { int VAR_INT; try { VAR_INT = in1.ReadByte(); } catch (IOException e) { throw new RuntimeException(e); } CheckEOF(VAR_INT); return VAR_INT; }
public static AttrPtg METHOD_NAME(int VAR_INT) { return new AttrPtg(optiSkip.Set(LITERAL_INT), VAR_INT, LITERAL_NULL, -LITERAL_INT); }
public virtual DescribeUserHierarchyGroupResponse METHOD_NAME(DescribeUserHierarchyGroupRequest VAR_DESCRIBEUSERHIERARCHYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUserHierarchyGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUserHierarchyGroupResponseUnmarshaller.Instance; return Invoke<DescribeUserHierarchyGroupResponse>(VAR_DESCRIBEUSERHIERARCHYGROUPREQUEST, VAR_VAR); }
public User(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING, DateTime VAR_DATETIME) { _path = VAR_STRING; _userName = VAR_STRING; _userId = VAR_STRING; _arn = VAR_STRING; _createDate = VAR_DATETIME; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { try { NLPLemmatizerOp VAR_NLPLEMMATIZEROP = OpenNLPOpsFactory.GetLemmatizer(dictionaryFile, lemmatizerModelFile); return new OpenNLPLemmatizerFilter(VAR_TOKENSTREAM, VAR_NLPLEMMATIZEROP); } catch (IOException e) { throw new Exception(e.ToString(), e); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | VAR_LONG; } }
public RebootInstanceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual ListContainerInstancesResponse METHOD_NAME(ListContainerInstancesRequest VAR_LISTCONTAINERINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListContainerInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListContainerInstancesResponseUnmarshaller.Instance; return Invoke<ListContainerInstancesResponse>(VAR_LISTCONTAINERINSTANCESREQUEST, VAR_VAR); }
public virtual ListClustersResponse METHOD_NAME(ListClustersRequest VAR_LISTCLUSTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListClustersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListClustersResponseUnmarshaller.Instance; return Invoke<ListClustersResponse>(VAR_LISTCLUSTERSREQUEST, VAR_VAR); }
public static bool METHOD_NAME(bool[] VAR_BOOL[], bool[] VAR_BOOL[]) { if (VAR_BOOL[] == VAR_BOOL[]) { return true; } if (VAR_BOOL[] == LITERAL_NULL || VAR_BOOL[] == LITERAL_NULL || VAR_BOOL[].Length != VAR_BOOL[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_BOOL[].Length; i++) { if (VAR_BOOL[][i] != VAR_BOOL[][i]) { return false; } } } return true; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (int)((uint)VAR_INT >> LITERAL_INT); VAR_INT[][VAR_INT++] = ((int)((uint)VAR_INT >> LITERAL_INT)) & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); VAR_INT[][VAR_INT++] = ((int)((uint)VAR_INT >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_INT >> LITERAL_INT)) & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); VAR_INT[][VAR_INT++] = ((int)((uint)VAR_INT >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_INT & LITERAL_INT; } }
public virtual GetRelationalDatabaseSnapshotResponse METHOD_NAME(GetRelationalDatabaseSnapshotRequest VAR_GETRELATIONALDATABASESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseSnapshotResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseSnapshotResponse>(VAR_GETRELATIONALDATABASESNAPSHOTREQUEST, VAR_VAR); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; field_1_blipTypeWin32 = VAR_BYTE[][VAR_INT]; field_2_blipTypeMacOS = VAR_BYTE[][VAR_INT + LITERAL_INT]; field_3_uid = new byte[LITERAL_INT]; Array.Copy(VAR_BYTE[], VAR_INT + LITERAL_INT, field_3_uid, LITERAL_INT, LITERAL_INT); field_4_tag = LittleEndian.GetShort(VAR_BYTE[], VAR_INT + LITERAL_INT); field_5_size = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + LITERAL_INT); field_6_ref = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + LITERAL_INT); field_7_offset = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + LITERAL_INT); field_8_usage = VAR_BYTE[][VAR_INT + LITERAL_INT]; field_9_name = VAR_BYTE[][VAR_INT + LITERAL_INT]; field_10_unused2 = VAR_BYTE[][VAR_INT + LITERAL_INT]; field_11_unused3 = VAR_BYTE[][VAR_INT + LITERAL_INT]; VAR_INT -= LITERAL_INT; int VAR_INT = LITERAL_INT; if (VAR_INT > LITERAL_INT) { field_12_blipRecord = (EscherBlipRecord)VAR_IESCHERRECORDFACTORY.CreateRecord(VAR_BYTE[], VAR_INT + LITERAL_INT); VAR_INT = field_12_blipRecord.METHOD_NAME(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_IESCHERRECORDFACTORY); } VAR_INT += LITERAL_INT + VAR_INT; VAR_INT -= VAR_INT; _remainingData = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT, _remainingData, LITERAL_INT, VAR_INT); return VAR_INT + LITERAL_INT + LITERAL_INT + (field_12_blipRecord == LITERAL_NULL ? LITERAL_INT : field_12_blipRecord.RecordSize); }
public override int METHOD_NAME() { return a.Length; }
public virtual PhoneNumberValidateResponse METHOD_NAME(PhoneNumberValidateRequest VAR_PHONENUMBERVALIDATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PhoneNumberValidateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PhoneNumberValidateResponseUnmarshaller.Instance; return Invoke<PhoneNumberValidateResponse>(VAR_PHONENUMBERVALIDATEREQUEST, VAR_VAR); }
public virtual CreateTransformJobResponse METHOD_NAME(CreateTransformJobRequest VAR_CREATETRANSFORMJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransformJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransformJobResponseUnmarshaller.Instance; return Invoke<CreateTransformJobResponse>(VAR_CREATETRANSFORMJOBREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { lock (this) { object[] VAR_OBJECT[] = elementData; int VAR_INT = elementCount; if (VAR_OBJECT != LITERAL_NULL) { { for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_OBJECT.Equals(VAR_OBJECT[][i])) { return VAR_INT - i; } } } } else { { for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_OBJECT[][i] == LITERAL_NULL) { return VAR_INT - i; } } } } return -LITERAL_INT; } }
public DescribeCacheParametersRequest(string VAR_STRING) { _cacheParameterGroupName = VAR_STRING; }
public virtual void METHOD_NAME() { lock (mutex) { c.METHOD_NAME(); } }
public virtual bool METHOD_NAME(RevSort VAR_REVSORT) { return sorting.Contains(VAR_REVSORT); }
public virtual StashListCommand METHOD_NAME() { return new StashListCommand(repo); }
public PutGroupPolicyRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _policyName = VAR_STRING; _policyDocument = VAR_STRING; }
public override string METHOD_NAME() { return base.get() + LITERAL_STRING + value; }
public void METHOD_NAME(int VAR_INT) { CheckPosition(LITERAL_INT); _buf[_writeIndex++] = (byte)VAR_INT; }
public CountryRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_default_country = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_current_country = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual UpdateContainerAgentResponse METHOD_NAME(UpdateContainerAgentRequest VAR_UPDATECONTAINERAGENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateContainerAgentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateContainerAgentResponseUnmarshaller.Instance; return Invoke<UpdateContainerAgentResponse>(VAR_UPDATECONTAINERAGENTREQUEST, VAR_VAR); }
public virtual DescribeNodeConfigurationOptionsResponse METHOD_NAME(DescribeNodeConfigurationOptionsRequest VAR_DESCRIBENODECONFIGURATIONOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNodeConfigurationOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNodeConfigurationOptionsResponseUnmarshaller.Instance; return Invoke<DescribeNodeConfigurationOptionsResponse>(VAR_DESCRIBENODECONFIGURATIONOPTIONSREQUEST, VAR_VAR); }
public AddImageRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public BorderFormatting() { field_13_border_styles1 = (short)LITERAL_INT; field_14_border_styles2 = (short)LITERAL_INT; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual ListTagsForStreamResponse METHOD_NAME(ListTagsForStreamRequest VAR_LISTTAGSFORSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForStreamResponseUnmarshaller.Instance; return Invoke<ListTagsForStreamResponse>(VAR_LISTTAGSFORSTREAMREQUEST, VAR_VAR); }
public NPOI.SS.UserModel.IName METHOD_NAME() { NameRecord VAR_NAMERECORD = workbook.METHOD_NAME(); HSSFName VAR_HSSFNAME = new HSSFName(this, VAR_NAMERECORD); names.Add(VAR_HSSFNAME); return VAR_HSSFNAME; }
public virtual CreateLogPatternResponse METHOD_NAME(CreateLogPatternRequest VAR_CREATELOGPATTERNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLogPatternRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLogPatternResponseUnmarshaller.Instance; return Invoke<CreateLogPatternResponse>(VAR_CREATELOGPATTERNREQUEST, VAR_VAR); }
public virtual GetTransitGatewayRouteTablePropagationsResponse METHOD_NAME(GetTransitGatewayRouteTablePropagationsRequest VAR_GETTRANSITGATEWAYROUTETABLEPROPAGATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTransitGatewayRouteTablePropagationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTransitGatewayRouteTablePropagationsResponseUnmarshaller.Instance; return Invoke<GetTransitGatewayRouteTablePropagationsResponse>(VAR_GETTRANSITGATEWAYROUTETABLEPROPAGATIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { base.METHOD_NAME(); string VAR_STRING = RunData.Config.Get(ADDINDEXES_INPUT_DIR, LITERAL_NULL); if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING + ADDINDEXES_INPUT_DIR + LITERAL_STRING); } inputDir = FSDirectory.Open(new DirectoryInfo(VAR_STRING)); }
public virtual NGit.Api.StashDropCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual ListTrainingJobsForHyperParameterTuningJobResponse METHOD_NAME(ListTrainingJobsForHyperParameterTuningJobRequest VAR_LISTTRAININGJOBSFORHYPERPARAMETERTUNINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrainingJobsForHyperParameterTuningJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrainingJobsForHyperParameterTuningJobResponseUnmarshaller.Instance; return Invoke<ListTrainingJobsForHyperParameterTuningJobResponse>(VAR_LISTTRAININGJOBSFORHYPERPARAMETERTUNINGJOBREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, Succeeded ? LITERAL_STRING : LITERAL_STRING, Labels.Count); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public virtual AuthorizeCacheSecurityGroupIngressResponse METHOD_NAME(AuthorizeCacheSecurityGroupIngressRequest VAR_AUTHORIZECACHESECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeCacheSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeCacheSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeCacheSecurityGroupIngressResponse>(VAR_AUTHORIZECACHESECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual RevCommit METHOD_NAME() { return pending.METHOD_NAME(); }
public virtual BatchAssociateUserStackResponse METHOD_NAME(BatchAssociateUserStackRequest VAR_BATCHASSOCIATEUSERSTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchAssociateUserStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchAssociateUserStackResponseUnmarshaller.Instance; return Invoke<BatchAssociateUserStackResponse>(VAR_BATCHASSOCIATEUSERSTACKREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { ScenarioProtectRecord VAR_SCENARIOPROTECTRECORD = new ScenarioProtectRecord(); VAR_SCENARIOPROTECTRECORD.field_1_protect = field_1_protect; return VAR_SCENARIOPROTECTRECORD; }
public Type METHOD_NAME() { return bundleClass; }
public void METHOD_NAME() { if (LITERAL_INT + bufferUpto == buffers.Length) { int[][] VAR_INT[][] = new int[(int)(buffers.Length * LITERAL_INT)][]; Array.Copy(buffers, LITERAL_INT, VAR_INT[][], LITERAL_INT, buffers.Length); buffers = VAR_INT[][]; } buffer = buffers[LITERAL_INT + bufferUpto] = allocator.GetInt32Block(); bufferUpto++; Int32Upto = LITERAL_INT; Int32Offset += INT32_BLOCK_SIZE; }
public DeleteVpnGatewayRequest(string VAR_STRING) { _vpnGatewayId = VAR_STRING; }
public static IEncoder METHOD_NAME(Format VAR_FORMAT, int VAR_INT, int VAR_INT) { CheckVersion(VAR_INT); return BulkOperation.Of(VAR_FORMAT, VAR_INT); }
public ClassificationResult(T VAR_T, double VAR_DOUBLE) { _assignedClass = VAR_T; _score = VAR_DOUBLE; }
public virtual CreateRelationalDatabaseSnapshotResponse METHOD_NAME(CreateRelationalDatabaseSnapshotRequest VAR_CREATERELATIONALDATABASESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRelationalDatabaseSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRelationalDatabaseSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseSnapshotResponse>(VAR_CREATERELATIONALDATABASESNAPSHOTREQUEST, VAR_VAR); }
public NameRecord METHOD_NAME(NameRecord VAR_NAMERECORD) { OrCreateLinkTable.METHOD_NAME(VAR_NAMERECORD); return VAR_NAMERECORD; }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastRow); VAR_ILITTLEENDIANOUTPUT.WriteByte(FirstColumn); VAR_ILITTLEENDIANOUTPUT.WriteByte(LastColumn); }
public virtual string METHOD_NAME() { return key; }
public virtual GetBlockPublicAccessConfigurationResponse METHOD_NAME(GetBlockPublicAccessConfigurationRequest VAR_GETBLOCKPUBLICACCESSCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBlockPublicAccessConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBlockPublicAccessConfigurationResponseUnmarshaller.Instance; return Invoke<GetBlockPublicAccessConfigurationResponse>(VAR_GETBLOCKPUBLICACCESSCONFIGURATIONREQUEST, VAR_VAR); }
public static long METHOD_NAME(byte[] VAR_BYTE[]) { int VAR_INT = LITERAL_INT; int VAR_INT; do { VAR_INT = VAR_BYTE[][VAR_INT++] & unchecked((int)(LITERAL_INT)); } while ((VAR_INT & unchecked((int)(LITERAL_INT))) != LITERAL_INT); long VAR_LONG = LITERAL_INT; int VAR_INT = LITERAL_INT; do { VAR_INT = VAR_BYTE[][VAR_INT++] & unchecked((int)(LITERAL_INT)); VAR_LONG |= ((long)(VAR_INT & unchecked((int)(LITERAL_INT)))) << VAR_INT; VAR_INT += LITERAL_INT; } while ((VAR_INT & unchecked((int)(LITERAL_INT))) != LITERAL_INT); return VAR_LONG; }
public override long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT32); }
public NoteRecord() { field_6_author = LITERAL_STRING; field_3_flags = LITERAL_INT; field_7_padding = DEFAULT_PADDING; }
public CellReference[] METHOD_NAME() { if (_isSingleCell) { return new CellReference[] { _firstCell, }; } int VAR_INT = Math.Min(_firstCell.Row, _lastCell.Row); int VAR_INT = Math.Max(_firstCell.Row, _lastCell.Row); int VAR_INT = Math.Min(_firstCell.Col, _lastCell.Col); int VAR_INT = Math.Max(_firstCell.Col, _lastCell.Col); String VAR_STRING = _firstCell.SheetName; ArrayList VAR_ARRAYLIST = new ArrayList(); for (int row = VAR_INT; row <= VAR_INT; row++) { for (int col = VAR_INT; col <= VAR_INT; col++) { CellReference VAR_CELLREFERENCE = new CellReference(VAR_STRING, row, col, _firstCell.IsRowAbsolute, _firstCell.IsColAbsolute); VAR_ARRAYLIST.Add(VAR_CELLREFERENCE); } } return (CellReference[])VAR_ARRAYLIST.ToArray(typeof(CellReference)); }
public override string[] METHOD_NAME() { EnsureOpen(); string[] VAR_STRING[]; if (writer != LITERAL_NULL) { VAR_STRING[] = writer.METHOD_NAME(); } else { VAR_STRING[] = entries.Keys.ToArray(); string VAR_STRING = IndexFileNames.ParseSegmentName(fileName); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { VAR_STRING[][i] = VAR_STRING + VAR_STRING[][i]; } } return VAR_STRING[]; }
public virtual UpdateDataRetentionResponse METHOD_NAME(UpdateDataRetentionRequest VAR_UPDATEDATARETENTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDataRetentionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDataRetentionResponseUnmarshaller.Instance; return Invoke<UpdateDataRetentionResponse>(VAR_UPDATEDATARETENTIONREQUEST, VAR_VAR); }
public CreateDistributionRequest(DistributionConfig VAR_DISTRIBUTIONCONFIG) { _distributionConfig = VAR_DISTRIBUTIONCONFIG; }
public virtual DescribeBatchPredictionsResponse METHOD_NAME(DescribeBatchPredictionsRequest VAR_DESCRIBEBATCHPREDICTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBatchPredictionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBatchPredictionsResponseUnmarshaller.Instance; return Invoke<DescribeBatchPredictionsResponse>(VAR_DESCRIBEBATCHPREDICTIONSREQUEST, VAR_VAR); }
public virtual float METHOD_NAME(int VAR_INT) { return scores[VAR_INT]; }
public virtual BatchUpdatePhoneNumberResponse METHOD_NAME(BatchUpdatePhoneNumberRequest VAR_BATCHUPDATEPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchUpdatePhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchUpdatePhoneNumberResponseUnmarshaller.Instance; return Invoke<BatchUpdatePhoneNumberResponse>(VAR_BATCHUPDATEPHONENUMBERREQUEST, VAR_VAR); }
public LMSimilarity(ICollectionModel VAR_ICOLLECTIONMODEL) { this.m_collectionModel = VAR_ICOLLECTIONMODEL; }
public virtual GetGlobalSettingsResponse METHOD_NAME(GetGlobalSettingsRequest VAR_GETGLOBALSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGlobalSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGlobalSettingsResponseUnmarshaller.Instance; return Invoke<GetGlobalSettingsResponse>(VAR_GETGLOBALSETTINGSREQUEST, VAR_VAR); }
public virtual CreateHITTypeResponse METHOD_NAME(CreateHITTypeRequest VAR_CREATEHITTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHITTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHITTypeResponseUnmarshaller.Instance; return Invoke<CreateHITTypeResponse>(VAR_CREATEHITTYPEREQUEST, VAR_VAR); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public CharsRef(string VAR_STRING) { this.chars = VAR_STRING.ToCharArray(); this.Offset = LITERAL_INT; this.Length = chars.Length; }
public virtual ListFargateProfilesResponse METHOD_NAME(ListFargateProfilesRequest VAR_LISTFARGATEPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFargateProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFargateProfilesResponseUnmarshaller.Instance; return Invoke<ListFargateProfilesResponse>(VAR_LISTFARGATEPROFILESREQUEST, VAR_VAR); }
public java.util.MapClass.Entry<K, V> METHOD_NAME(K VAR_K) { return this._enclosing.immutableCopy(this.findBounded(VAR_K, java.util.TreeMap.Relation.FLOOR)); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is NorwegianStemmer; }
public virtual DeleteVaultNotificationsResponse METHOD_NAME(DeleteVaultNotificationsRequest VAR_DELETEVAULTNOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVaultNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVaultNotificationsResponseUnmarshaller.Instance; return Invoke<DeleteVaultNotificationsResponse>(VAR_DELETEVAULTNOTIFICATIONSREQUEST, VAR_VAR); }
public static bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, string VAR_STRING) { int VAR_INT = VAR_STRING.Length; if (VAR_INT > VAR_INT) { return false; } for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_CHAR[][VAR_INT - (VAR_INT - i)] != VAR_STRING[i]) { return false; } } return true; }
public virtual void METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { lock (this) { if (!fieldTypes.TryGetValue(VAR_STRING, out DimConfig fieldType)) { fieldTypes[VAR_STRING] = new DimConfig { RequireDimCount = VAR_BOOL }; } else { fieldType.RequireDimCount = VAR_BOOL; } } }
public NPOI.SS.UserModel.IName METHOD_NAME(String VAR_STRING) { int VAR_INT = GetNameIndex(VAR_STRING); if (VAR_INT < LITERAL_INT) { return LITERAL_NULL; } return (HSSFName)names[VAR_INT]; }
public ScriptBootstrapActionConfig(string VAR_STRING, List<string> VAR_LIST<STRING>) { _path = VAR_STRING; _args = VAR_LIST<STRING>; }
public virtual RegisterApplicationRevisionResponse METHOD_NAME(RegisterApplicationRevisionRequest VAR_REGISTERAPPLICATIONREVISIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterApplicationRevisionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterApplicationRevisionResponseUnmarshaller.Instance; return Invoke<RegisterApplicationRevisionResponse>(VAR_REGISTERAPPLICATIONREVISIONREQUEST, VAR_VAR); }
public virtual SendTestEventNotificationResponse METHOD_NAME(SendTestEventNotificationRequest VAR_SENDTESTEVENTNOTIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendTestEventNotificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendTestEventNotificationResponseUnmarshaller.Instance; return Invoke<SendTestEventNotificationResponse>(VAR_SENDTESTEVENTNOTIFICATIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(PersonIdent VAR_PERSONIDENT) { refLogIdent = VAR_PERSONIDENT; }
public virtual GetDomainDeliverabilityCampaignResponse METHOD_NAME(GetDomainDeliverabilityCampaignRequest VAR_GETDOMAINDELIVERABILITYCAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainDeliverabilityCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainDeliverabilityCampaignResponseUnmarshaller.Instance; return Invoke<GetDomainDeliverabilityCampaignResponse>(VAR_GETDOMAINDELIVERABILITYCAMPAIGNREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int y = LITERAL_INT; y < RowCount; y++) { if (y > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } for (int x = LITERAL_INT; x < ColumnCount; x++) { if (x > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } Object VAR_OBJECT = _arrayValues.GetValue(GetValueIndex(x, y)); VAR_STRINGBUILDER.Append(GetConstantText(VAR_OBJECT)); } } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.ToString(); }
public ShingleFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { maxShingleSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE); if (maxShingleSize < LITERAL_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING + maxShingleSize + LITERAL_STRING); } minShingleSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE); if (minShingleSize < LITERAL_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING + minShingleSize + LITERAL_STRING); } if (minShingleSize > maxShingleSize) { throw new ArgumentOutOfRangeException(LITERAL_STRING + minShingleSize + LITERAL_STRING + maxShingleSize + LITERAL_STRING); } outputUnigrams = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); outputUnigramsIfNoShingles = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); tokenSeparator = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, ShingleFilter.DEFAULT_TOKEN_SEPARATOR); fillerToken = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, ShingleFilter.DEFAULT_FILLER_TOKEN); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual UpdateRelationalDatabaseParametersResponse METHOD_NAME(UpdateRelationalDatabaseParametersRequest VAR_UPDATERELATIONALDATABASEPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRelationalDatabaseParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRelationalDatabaseParametersResponseUnmarshaller.Instance; return Invoke<UpdateRelationalDatabaseParametersResponse>(VAR_UPDATERELATIONALDATABASEPARAMETERSREQUEST, VAR_VAR); }
public static ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE, int VAR_INT) { return FindAllNodes(VAR_IPARSETREE, VAR_INT, false); }
public virtual int METHOD_NAME() { return entryCount; }
public ActionTransition(ATNState VAR_ATNSTATE, int VAR_INT, int VAR_INT, bool VAR_BOOL) : base(target) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / valuesPerBlock; long VAR_LONG = ((long)VAR_INT) << LITERAL_INT; try { @in.Seek(startPointer + VAR_LONG); long VAR_LONG = @in.ReadInt64(); int VAR_INT = VAR_INT % valuesPerBlock; return ((long)((ulong)VAR_LONG >> (VAR_INT * m_bitsPerValue))) & mask; } catch (System.IO.IOException e) { throw new InvalidOperationException(LITERAL_STRING, e); } }
public override string METHOD_NAME() { return LITERAL_STRING; }
public PipedOutputStream(java.io.PipedInputStream VAR_JAVA.IO.PIPEDINPUTSTREAM) { throw new System.NotImplementedException(); }
public virtual DeleteLedgerResponse METHOD_NAME(DeleteLedgerRequest VAR_DELETELEDGERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLedgerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLedgerResponseUnmarshaller.Instance; return Invoke<DeleteLedgerResponse>(VAR_DELETELEDGERREQUEST, VAR_VAR); }
public virtual GetCognitoEventsResponse METHOD_NAME(GetCognitoEventsRequest VAR_GETCOGNITOEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCognitoEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCognitoEventsResponseUnmarshaller.Instance; return Invoke<GetCognitoEventsResponse>(VAR_GETCOGNITOEVENTSREQUEST, VAR_VAR); }
public Ptg METHOD_NAME(String VAR_STRING, SheetIdentifier VAR_SHEETIDENTIFIER) { int VAR_INT = GetSheetExtIx(VAR_SHEETIDENTIFIER); return _iBook.METHOD_NAME(VAR_STRING, VAR_INT, _uBook.GetUDFFinder()); }
public virtual ListResolverEndpointsResponse METHOD_NAME(ListResolverEndpointsRequest VAR_LISTRESOLVERENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResolverEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResolverEndpointsResponseUnmarshaller.Instance; return Invoke<ListResolverEndpointsResponse>(VAR_LISTRESOLVERENDPOINTSREQUEST, VAR_VAR); }
public string METHOD_NAME() { try { return _reader.METHOD_NAME(); } catch (System.IO.IOException e) { throw new java.io.IOError(e); } }
public virtual int METHOD_NAME(char[] VAR_CHAR[]) { int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_CHAR[].Length; i++) { char VAR_CHAR = VAR_CHAR[][i]; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR & LITERAL_INT; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR >> LITERAL_INT; } return VAR_INT; }
public static long METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return ((VAR_INT & LITERAL_INT) << LITERAL_INT) + ((VAR_INT & LITERAL_INT) << LITERAL_INT) + ((VAR_INT & LITERAL_INT) << LITERAL_INT); }
public virtual CreateConfigurationProfileResponse METHOD_NAME(CreateConfigurationProfileRequest VAR_CREATECONFIGURATIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConfigurationProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<CreateConfigurationProfileResponse>(VAR_CREATECONFIGURATIONPROFILEREQUEST, VAR_VAR); }
public virtual StartMigrationResponse METHOD_NAME(StartMigrationRequest VAR_STARTMIGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMigrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMigrationResponseUnmarshaller.Instance; return Invoke<StartMigrationResponse>(VAR_STARTMIGRATIONREQUEST, VAR_VAR); }
public OffsetLimitTokenFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT) : base(input) { this.VAR_INT = VAR_INT; offsetAttrib = GetAttribute<IOffsetAttribute>(); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { while (LITERAL_INT < VAR_INT) { int VAR_INT = Math.Min(VAR_INT, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK); count += VAR_INT; if (checkCancelAt <= count) { if (writeMonitor.IsCancelled()) { throw new IOException(JGitText.Get().packingCancelledDuringObjectsWriting); } checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK; } @out.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); crc.Update(VAR_BYTE[], VAR_INT, VAR_INT); md.Update(VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; } }
public virtual Cell METHOD_NAME(Cell VAR_CELL, Cell VAR_CELL) { Cell VAR_CELL = new Cell(); if (VAR_CELL.skip != VAR_CELL.skip) { return LITERAL_NULL; } if (VAR_CELL.cmd >= LITERAL_INT) { if (VAR_CELL.cmd >= LITERAL_INT) { if (VAR_CELL.cmd == VAR_CELL.cmd) { VAR_CELL.cmd = VAR_CELL.cmd; } else { return LITERAL_NULL; } } else { VAR_CELL.cmd = VAR_CELL.cmd; } } else { VAR_CELL.cmd = VAR_CELL.cmd; } if (VAR_CELL.@ref >= LITERAL_INT) { if (VAR_CELL.@ref >= LITERAL_INT) { if (VAR_CELL.@ref == VAR_CELL.@ref) { if (VAR_CELL.skip == VAR_CELL.skip) { VAR_CELL.@ref = VAR_CELL.@ref; } else { return LITERAL_NULL; } } else { return LITERAL_NULL; } } else { VAR_CELL.@ref = VAR_CELL.@ref; } } else { VAR_CELL.@ref = VAR_CELL.@ref; } VAR_CELL.cnt = VAR_CELL.cnt + VAR_CELL.cnt; VAR_CELL.skip = VAR_CELL.skip; return VAR_CELL; }
public virtual GetCampaignActivitiesResponse METHOD_NAME(GetCampaignActivitiesRequest VAR_GETCAMPAIGNACTIVITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignActivitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignActivitiesResponseUnmarshaller.Instance; return Invoke<GetCampaignActivitiesResponse>(VAR_GETCAMPAIGNACTIVITIESREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return this.bytesUsed; }
public FunctionNameEval(String VAR_STRING) { _functionName = VAR_STRING; }
public float METHOD_NAME() { return _averageBytesPerChar; }
public CreateCacheSecurityGroupRequest(string VAR_STRING, string VAR_STRING) { _cacheSecurityGroupName = VAR_STRING; _description = VAR_STRING; }
public virtual void METHOD_NAME(int VAR_INT) { System.Array.Copy(mKeys, VAR_INT + LITERAL_INT, mKeys, VAR_INT, mSize - (VAR_INT + LITERAL_INT)); System.Array.Copy(mValues, VAR_INT + LITERAL_INT, mValues, VAR_INT, mSize - (VAR_INT + LITERAL_INT)); mSize--; }
public virtual DescribeIndexFieldsResponse METHOD_NAME(DescribeIndexFieldsRequest VAR_DESCRIBEINDEXFIELDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIndexFieldsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIndexFieldsResponseUnmarshaller.Instance; return Invoke<DescribeIndexFieldsResponse>(VAR_DESCRIBEINDEXFIELDSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { delete(VAR_INT); }
public override java.nio.ShortBuffer METHOD_NAME() { java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.ShortToByteBufferAdapter VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER = new java.nio.ShortToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._mark = _mark; return VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER; }
public void METHOD_NAME(int VAR_INT) { if (field_5_dbcells == LITERAL_NULL) { field_5_dbcells = new IntList(); } field_5_dbcells.Add(VAR_INT); }
public virtual DeleteSubnetResponse METHOD_NAME(DeleteSubnetRequest VAR_DELETESUBNETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSubnetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSubnetResponseUnmarshaller.Instance; return Invoke<DeleteSubnetResponse>(VAR_DELETESUBNETREQUEST, VAR_VAR); }
public IList METHOD_NAME() { List<HSSFPictureData> VAR_LIST<HSSFPICTUREDATA> = new List<HSSFPictureData>(); IEnumerator VAR_IENUMERATOR = workbook.Records.GetEnumerator(); while (VAR_IENUMERATOR.MoveNext()) { Object VAR_OBJECT = VAR_IENUMERATOR.Current; if (VAR_OBJECT is AbstractEscherHolderRecord) { ((AbstractEscherHolderRecord)VAR_OBJECT).Decode(); IList VAR_ILIST = ((AbstractEscherHolderRecord)VAR_OBJECT).EscherRecords; SearchForPictures(VAR_ILIST, VAR_LIST<HSSFPICTUREDATA>); } } return VAR_LIST<HSSFPICTUREDATA>; }
public virtual DescribeWorkspacesConnectionStatusResponse METHOD_NAME(DescribeWorkspacesConnectionStatusRequest VAR_DESCRIBEWORKSPACESCONNECTIONSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspacesConnectionStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspacesConnectionStatusResponseUnmarshaller.Instance; return Invoke<DescribeWorkspacesConnectionStatusResponse>(VAR_DESCRIBEWORKSPACESCONNECTIONSTATUSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return Slice.METHOD_NAME() + LITERAL_STRING + DocsEnum; }
public InvokeServiceAsyncRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public AuthorizeSecurityGroupIngressRequest(string VAR_STRING, List<IpPermission> VAR_LIST<IPPERMISSION>) { _groupName = VAR_STRING; _ipPermissions = VAR_LIST<IPPERMISSION>; }
public static byte[] METHOD_NAME(Stream VAR_STREAM, String VAR_STRING) { try { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); bool VAR_BOOL = false; int VAR_INT = VAR_STREAM.ReadByte(); while (VAR_INT != -LITERAL_INT) { switch (VAR_INT) { case LITERAL_CHAR: VAR_BOOL = true; break; case LITERAL_CHAR: case LITERAL_CHAR: VAR_BOOL = false; VAR_STRINGBUILDER = new StringBuilder(); break; case LITERAL_CHAR: VAR_BOOL = false; if (VAR_STRINGBUILDER.ToString().Equals(VAR_STRING)) { return METHOD_NAME(VAR_STREAM, LITERAL_CHAR); } VAR_STRINGBUILDER = new StringBuilder(); break; default: if (VAR_BOOL) VAR_STRINGBUILDER.Append((char)VAR_INT); break; } VAR_INT = VAR_STREAM.ReadByte(); } } finally { VAR_STREAM.Close(); } throw new IOException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { int VAR_INT; try { VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } if (VAR_INT < LITERAL_INT) { return ErrorEval.NUM_ERROR; } return new NumberEval(factorial(VAR_INT).LongValue()); }
public LexerActionExecutor METHOD_NAME() { return lexerActionExecutor; }
public virtual EnableUserResponse METHOD_NAME(EnableUserRequest VAR_ENABLEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableUserResponseUnmarshaller.Instance; return Invoke<EnableUserResponse>(VAR_ENABLEUSERREQUEST, VAR_VAR); }
public void METHOD_NAME(BytesRef VAR_BYTESREF, long VAR_LONG, int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT); Debug.Assert(VAR_INT <= blockSize + LITERAL_INT, LITERAL_STRING + VAR_INT); VAR_BYTESREF.Length = VAR_INT; if (VAR_INT == LITERAL_INT) { return; } var VAR_VAR = (int)(VAR_LONG >> blockBits); var VAR_VAR = (int)(VAR_LONG & blockMask); if (blockSize - VAR_VAR >= VAR_INT) { VAR_BYTESREF.Bytes = blocks[VAR_VAR]; VAR_BYTESREF.Offset = VAR_VAR; } else { VAR_BYTESREF.Bytes = new byte[VAR_INT]; VAR_BYTESREF.Offset = LITERAL_INT; Array.Copy(blocks[VAR_VAR], VAR_VAR, VAR_BYTESREF.Bytes, LITERAL_INT, blockSize - VAR_VAR); Array.Copy(blocks[LITERAL_INT + VAR_VAR], LITERAL_INT, VAR_BYTESREF.Bytes, blockSize - VAR_VAR, VAR_INT - (blockSize - VAR_VAR)); } }
public virtual DescribeJournalS3ExportResponse METHOD_NAME(DescribeJournalS3ExportRequest VAR_DESCRIBEJOURNALS3EXPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeJournalS3ExportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeJournalS3ExportResponseUnmarshaller.Instance; return Invoke<DescribeJournalS3ExportResponse>(VAR_DESCRIBEJOURNALS3EXPORTREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { _spgrRecord.RectY1 = (VAR_INT); _spgrRecord.RectY2 = (VAR_INT); _spgrRecord.RectX1 = (VAR_INT); _spgrRecord.RectX2 = (VAR_INT); }
public virtual DescribeTagsResponse METHOD_NAME(DescribeTagsRequest VAR_DESCRIBETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTagsResponseUnmarshaller.Instance; return Invoke<DescribeTagsResponse>(VAR_DESCRIBETAGSREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return LITERAL_INT; }
public virtual DeleteCustomerGatewayResponse METHOD_NAME(DeleteCustomerGatewayRequest VAR_DELETECUSTOMERGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCustomerGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCustomerGatewayResponseUnmarshaller.Instance; return Invoke<DeleteCustomerGatewayResponse>(VAR_DELETECUSTOMERGATEWAYREQUEST, VAR_VAR); }
public static IDictionary METHOD_NAME(IndexSearcher VAR_INDEXSEARCHER) { return new Hashtable(IdentityEqualityComparer<object>.Default) { [LITERAL_STRING] = VAR_INDEXSEARCHER }; }
public NameRecord METHOD_NAME(byte VAR_BYTE, int VAR_INT) { IEnumerator<NameRecord> VAR_IENUMERATOR<NAMERECORD> = _definedNames.GetEnumerator(); while (VAR_IENUMERATOR<NAMERECORD>.MoveNext()) { NameRecord VAR_NAMERECORD = VAR_IENUMERATOR<NAMERECORD>.Current; if (VAR_NAMERECORD.BuiltInName == VAR_BYTE && VAR_NAMERECORD.SheetNumber == VAR_INT) { return VAR_NAMERECORD; } } return LITERAL_NULL; }
public virtual double METHOD_NAME() { throw new System.NotImplementedException(); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PersianNormalizationFilter(VAR_TOKENSTREAM); }
public SpanishLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public SmallDocSet(int VAR_INT) { intSet = new SentinelInt32Set(VAR_INT, -LITERAL_INT); }
public RawCharSequence(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { buffer = VAR_BYTE[]; startPtr = VAR_INT; endPtr = VAR_INT; }
public virtual GetCustomVerificationEmailTemplateResponse METHOD_NAME(GetCustomVerificationEmailTemplateRequest VAR_GETCUSTOMVERIFICATIONEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCustomVerificationEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCustomVerificationEmailTemplateResponseUnmarshaller.Instance; return Invoke<GetCustomVerificationEmailTemplateResponse>(VAR_GETCUSTOMVERIFICATIONEMAILTEMPLATEREQUEST, VAR_VAR); }
public SendMessageBatchRequest(string VAR_STRING, List<SendMessageBatchRequestEntry> VAR_LIST<SENDMESSAGEBATCHREQUESTENTRY>) { _queueUrl = VAR_STRING; _entries = VAR_LIST<SENDMESSAGEBATCHREQUESTENTRY>; }
public void METHOD_NAME(int VAR_INT) { WriteContinueIfRequired(LITERAL_INT); _ulrOutput.METHOD_NAME(VAR_INT); }
public virtual DescribeDataSourcesResponse METHOD_NAME(DescribeDataSourcesRequest VAR_DESCRIBEDATASOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataSourcesResponseUnmarshaller.Instance; return Invoke<DescribeDataSourcesResponse>(VAR_DESCRIBEDATASOURCESREQUEST, VAR_VAR); }
public virtual ListRoomsResponse METHOD_NAME(ListRoomsRequest VAR_LISTROOMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRoomsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRoomsResponseUnmarshaller.Instance; return Invoke<ListRoomsResponse>(VAR_LISTROOMSREQUEST, VAR_VAR); }
public virtual char METHOD_NAME() { return c; }
public override bool METHOD_NAME(object VAR_OBJECT) { var VAR_VAR = (FieldAndTerm)VAR_OBJECT; return VAR_VAR.Field.METHOD_NAME(Field, StringComparison.Ordinal) && Term.BytesEquals(VAR_VAR.Term); }
public virtual CreateConfigurationSetEventDestinationResponse METHOD_NAME(CreateConfigurationSetEventDestinationRequest VAR_CREATECONFIGURATIONSETEVENTDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConfigurationSetEventDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConfigurationSetEventDestinationResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetEventDestinationResponse>(VAR_CREATECONFIGURATIONSETEVENTDESTINATIONREQUEST, VAR_VAR); }
public Ole10Native(String VAR_STRING, String VAR_STRING, String VAR_STRING, byte[] VAR_BYTE[]) { Label = (VAR_STRING); FileName = (VAR_STRING); Command = (VAR_STRING); DataBuffer = (VAR_BYTE[]); mode = EncodingMode.parsed; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (fetchResult != LITERAL_NULL) { VAR_STRINGBUILDER.Append(fetchResult.METHOD_NAME()); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); if (mergeResult != LITERAL_NULL) { VAR_STRINGBUILDER.Append(mergeResult.METHOD_NAME()); } else { if (rebaseResult != LITERAL_NULL) { VAR_STRINGBUILDER.Append(rebaseResult.METHOD_NAME()); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public static ICell METHOD_NAME(IRow VAR_IROW, int VAR_INT, String VAR_STRING) { return METHOD_NAME(VAR_IROW, VAR_INT, VAR_STRING, LITERAL_NULL); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HindiNormalizationFilter(VAR_TOKENSTREAM); }
public virtual DescribeAddressesResponse METHOD_NAME() { return METHOD_NAME(new DescribeAddressesRequest()); }
public SimpleQQParser(string[] VAR_STRING[], string VAR_STRING) { this.VAR_STRING[] = VAR_STRING[]; this.VAR_STRING = VAR_STRING; }
public override void METHOD_NAME(RefsChangedListener VAR_REFSCHANGEDLISTENER) { VAR_REFSCHANGEDLISTENER.OnRefsChanged(this); }
try { string VAR_STRING = typeof(SnowballProgram).Namespace + LITERAL_STRING + name + LITERAL_STRING + this.GetType().GetTypeInfo().Assembly.GetName().Name; Type VAR_TYPE = Type.GetType(VAR_STRING); stemmer = (SnowballProgram)Activator.CreateInstance(VAR_TYPE); } catch (Exception e) { }
public virtual UpgradeAppliedSchemaResponse METHOD_NAME(UpgradeAppliedSchemaRequest VAR_UPGRADEAPPLIEDSCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpgradeAppliedSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpgradeAppliedSchemaResponseUnmarshaller.Instance; return Invoke<UpgradeAppliedSchemaResponse>(VAR_UPGRADEAPPLIEDSCHEMAREQUEST, VAR_VAR); }
public string METHOD_NAME() { int VAR_INT = path.Length; int VAR_INT = LITERAL_INT; if (separatorChar == LITERAL_CHAR && VAR_INT > LITERAL_INT && path[LITERAL_INT] == LITERAL_CHAR) { VAR_INT = LITERAL_INT; } int VAR_INT = path.LastIndexOf(separatorChar); if (VAR_INT == -LITERAL_INT && VAR_INT > LITERAL_INT) { VAR_INT = LITERAL_INT; } if (VAR_INT == -LITERAL_INT || path[VAR_INT - LITERAL_INT] == separatorChar) { return LITERAL_NULL; } if (path.IndexOf(separatorChar) == VAR_INT && path[VAR_INT] == separatorChar) { return Sharpen.StringHelper.Substring(path, LITERAL_INT, VAR_INT + LITERAL_INT); } return Sharpen.StringHelper.Substring(path, LITERAL_INT, VAR_INT); }
public BufferedChecksumIndexInput(IndexInput VAR_INDEXINPUT) : base(LITERAL_STRING + main + LITERAL_STRING) { this.VAR_INDEXINPUT = VAR_INDEXINPUT; this.digest = new BufferedChecksum(new CRC32()); }
public void METHOD_NAME(RevFlagSet VAR_REVFLAGSET) { flags &= ~VAR_REVFLAGSET.mask; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } return true; }
public virtual GetFaceSearchResponse METHOD_NAME(GetFaceSearchRequest VAR_GETFACESEARCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFaceSearchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFaceSearchResponseUnmarshaller.Instance; return Invoke<GetFaceSearchResponse>(VAR_GETFACESEARCHREQUEST, VAR_VAR); }
public virtual DescribeUserStackAssociationsResponse METHOD_NAME(DescribeUserStackAssociationsRequest VAR_DESCRIBEUSERSTACKASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUserStackAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUserStackAssociationsResponseUnmarshaller.Instance; return Invoke<DescribeUserStackAssociationsResponse>(VAR_DESCRIBEUSERSTACKASSOCIATIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual CreateBranchCommand METHOD_NAME() { return new CreateBranchCommand(repo); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rt); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.WriteShort(wOffset); VAR_ILITTLEENDIANOUTPUT.WriteShort(at); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbit); if (unused != LITERAL_NULL) VAR_ILITTLEENDIANOUTPUT.WriteShort((short)unused); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, object VAR_OBJECT) { insert0(VAR_INT, VAR_OBJECT == LITERAL_NULL ? LITERAL_STRING : VAR_OBJECT.ToString()); return this; }
public virtual int METHOD_NAME() { int VAR_INT = child; if (child != TaxonomyReader.INVALID_ORDINAL) { child = siblings[child]; } return VAR_INT; }
public virtual DeleteStackResponse METHOD_NAME(DeleteStackRequest VAR_DELETESTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStackResponseUnmarshaller.Instance; return Invoke<DeleteStackResponse>(VAR_DELETESTACKREQUEST, VAR_VAR); }
public NorwegianMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_STRING == LITERAL_NULL || LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.BOKMAAL; } else if (LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.NYNORSK; } else if (LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.BOKMAAL | NorwegianStandard.NYNORSK; } else { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING); } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override string METHOD_NAME() { return LITERAL_STRING + z + LITERAL_STRING; }
public static Record METHOD_NAME(RecordInputStream VAR_RECORDINPUTSTREAM) { switch (VAR_RECORDINPUTSTREAM.Remaining) { case LITERAL_INT: return Instance; case LITERAL_INT: return new InterfaceHdrRecord(VAR_RECORDINPUTSTREAM); } throw new RecordFormatException(LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining); }
public virtual int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (Row row in rows) VAR_INT += row.METHOD_NAME(); return VAR_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerActionExecutor)) { return false; } } Antlr4.Runtime.Atn.LexerActionExecutor VAR_ANTLR4.RUNTIME.ATN.LEXERACTIONEXECUTOR = (Antlr4.Runtime.Atn.LexerActionExecutor)VAR_OBJECT; return hashCode == VAR_ANTLR4.RUNTIME.ATN.LEXERACTIONEXECUTOR.hashCode && Arrays.METHOD_NAME(lexerActions, VAR_ANTLR4.RUNTIME.ATN.LEXERACTIONEXECUTOR.lexerActions); }
Type VAR_TYPE = Type.GetType(className); try { return (Analyzer)Activator.CreateInstance(VAR_TYPE, LuceneVersion.LUCENE_CURRENT); } catch (MissingMethodException) { return (Analyzer)Activator.CreateInstance(VAR_TYPE); }
public virtual GetSegmentVersionsResponse METHOD_NAME(GetSegmentVersionsRequest VAR_GETSEGMENTVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentVersionsResponseUnmarshaller.Instance; return Invoke<GetSegmentVersionsResponse>(VAR_GETSEGMENTVERSIONSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return deltaBaseCacheLimit; }
public GroupMerger(Sort VAR_SORT) { groupComp = new GroupComparer<T>(VAR_SORT); queue = new JCG.SortedSet<MergedGroup<T>>(groupComp); groupsSeen = new JCG.Dictionary<T, MergedGroup<T>>(); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public FileIdCluster(int VAR_INT, int VAR_INT) { this.field_1_drawingGroupId = VAR_INT; this.field_2_numShapeIdsUsed = VAR_INT; }
public override object METHOD_NAME() { CharArrayIterator VAR_CHARARRAYITERATOR = new CharArrayIterator(); VAR_CHARARRAYITERATOR.SetText(array, start, length); VAR_CHARARRAYITERATOR.index = index; return VAR_CHARARRAYITERATOR; }
public virtual DescribeReservedNodesResponse METHOD_NAME(DescribeReservedNodesRequest VAR_DESCRIBERESERVEDNODESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedNodesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedNodesResponseUnmarshaller.Instance; return Invoke<DescribeReservedNodesResponse>(VAR_DESCRIBERESERVEDNODESREQUEST, VAR_VAR); }
public ObjectWalk(Repository VAR_REPOSITORY, int VAR_INT) : base(repo) { this.VAR_INT = VAR_INT; this.UNSHALLOW = NewFlag(LITERAL_STRING); this.REINTERESTING = NewFlag(LITERAL_STRING); }
public virtual bool METHOD_NAME() { return refLogMessage == LITERAL_NULL; }
public virtual SetLoadBalancerListenerSSLCertificateResponse METHOD_NAME(SetLoadBalancerListenerSSLCertificateRequest VAR_SETLOADBALANCERLISTENERSSLCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetLoadBalancerListenerSSLCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetLoadBalancerListenerSSLCertificateResponseUnmarshaller.Instance; return Invoke<SetLoadBalancerListenerSSLCertificateResponse>(VAR_SETLOADBALANCERLISTENERSSLCERTIFICATEREQUEST, VAR_VAR); }
public virtual DescribeRulesPackagesResponse METHOD_NAME(DescribeRulesPackagesRequest VAR_DESCRIBERULESPACKAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRulesPackagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRulesPackagesResponseUnmarshaller.Instance; return Invoke<DescribeRulesPackagesResponse>(VAR_DESCRIBERULESPACKAGESREQUEST, VAR_VAR); }
public virtual byte METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual string METHOD_NAME() { return s; }
public StandardSyntaxParserTokenManager(ICharStream VAR_ICHARSTREAM, int VAR_INT) : this(stream) { SwitchTo(VAR_INT); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new TurkishLowerCaseFilter(VAR_TOKENSTREAM); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, DEFAULT_ARG1); }
public override void METHOD_NAME(FieldInfo VAR_FIELDINFO, double VAR_DOUBLE) { doc.Add(new StoredField(VAR_FIELDINFO.Name, VAR_DOUBLE)); }
public GetDistributionConfigRequest(string VAR_STRING) { _id = VAR_STRING; }
public virtual DescribeCacheSecurityGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeCacheSecurityGroupsRequest()); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_DOUBLE == LITERAL_INT) { return NumberEval.ZERO; } return new NumberEval(VAR_DOUBLE / LITERAL_INT); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT < _firstColumnIndex) { return false; } if (VAR_INT > _lastColumnIndex) { return false; } if (VAR_INT < _firstRowIndex) { return false; } if (VAR_INT > _lastRowIndex) { return false; } return true; }
public virtual GetSegmentVersionResponse METHOD_NAME(GetSegmentVersionRequest VAR_GETSEGMENTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentVersionResponseUnmarshaller.Instance; return Invoke<GetSegmentVersionResponse>(VAR_GETSEGMENTVERSIONREQUEST, VAR_VAR); }
public sealed override java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT, VAR_INT[].Length); }
public SearchFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual TagStreamResponse METHOD_NAME(TagStreamRequest VAR_TAGSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagStreamResponseUnmarshaller.Instance; return Invoke<TagStreamResponse>(VAR_TAGSTREAMREQUEST, VAR_VAR); }
public string METHOD_NAME() { return AccessKeyId; }
public ET METHOD_NAME() { if (expectedModCount == list.modCount) { if (link != list.voidLink) { lastLink = link; link = link.METHOD_NAME; pos--; return lastLink.data; } throw new java.util.NoSuchElementException(); } throw new java.util.ConcurrentModificationException(); }
public virtual CreateLBCookieStickinessPolicyResponse METHOD_NAME(CreateLBCookieStickinessPolicyRequest VAR_CREATELBCOOKIESTICKINESSPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLBCookieStickinessPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLBCookieStickinessPolicyResponseUnmarshaller.Instance; return Invoke<CreateLBCookieStickinessPolicyResponse>(VAR_CREATELBCOOKIESTICKINESSPOLICYREQUEST, VAR_VAR); }
public virtual CreateDataSourceFromRDSResponse METHOD_NAME(CreateDataSourceFromRDSRequest VAR_CREATEDATASOURCEFROMRDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDataSourceFromRDSRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDataSourceFromRDSResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRDSResponse>(VAR_CREATEDATASOURCEFROMRDSREQUEST, VAR_VAR); }
public virtual CreateReceiptFilterResponse METHOD_NAME(CreateReceiptFilterRequest VAR_CREATERECEIPTFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateReceiptFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateReceiptFilterResponseUnmarshaller.Instance; return Invoke<CreateReceiptFilterResponse>(VAR_CREATERECEIPTFILTERREQUEST, VAR_VAR); }
public sealed override byte METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public virtual NGit.Api.CherryPickCommand METHOD_NAME(Ref VAR_REF) { CheckCallable(); commits.AddItem(VAR_REF); return this; }
public ATNDeserializationOptions() { this.verifyATN = true; this.generateRuleBypassTransitions = false; this.optimize = true; }
public virtual ListIdentityPoliciesResponse METHOD_NAME(ListIdentityPoliciesRequest VAR_LISTIDENTITYPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIdentityPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIdentityPoliciesResponseUnmarshaller.Instance; return Invoke<ListIdentityPoliciesResponse>(VAR_LISTIDENTITYPOLICIESREQUEST, VAR_VAR); }
public static bool METHOD_NAME(int VAR_INT) { foreach (FormulaError error in _values) { if (error.Code == VAR_INT) return true; if (error.LongCode == VAR_INT) return true; } return false; }
public RKRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { field_4_rk_number = VAR_RECORDINPUTSTREAM.ReadInt(); }
public virtual void METHOD_NAME(ByteBuffer VAR_BYTEBUFFER) { VAR_BYTEBUFFER.Put(ToHexByteArray()); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Options)).Append(LITERAL_STRING).Append(Options).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsHorizontalBorder()).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsVerticalBorder()).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsBorder()).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsShowSeriesKey()).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual UpdateDashboardResponse METHOD_NAME(UpdateDashboardRequest VAR_UPDATEDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDashboardResponseUnmarshaller.Instance; return Invoke<UpdateDashboardResponse>(VAR_UPDATEDASHBOARDREQUEST, VAR_VAR); }
public RegisterTagRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual NGit.Api.DiffCommand METHOD_NAME(TreeFilter VAR_TREEFILTER) { this.VAR_TREEFILTER = VAR_TREEFILTER; return this; }
public override bool METHOD_NAME() { return true; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(this.GetType().Name + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(maxThreadCount).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(maxMergeCount).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(mergeThreadPriority); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(string VAR_STRING) { lock (this) { print(VAR_STRING); newline(); } }
public virtual UpdateApiResponse METHOD_NAME(UpdateApiRequest VAR_UPDATEAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApiResponseUnmarshaller.Instance; return Invoke<UpdateApiResponse>(VAR_UPDATEAPIREQUEST, VAR_VAR); }
public virtual FlushStageAuthorizersCacheResponse METHOD_NAME(FlushStageAuthorizersCacheRequest VAR_FLUSHSTAGEAUTHORIZERSCACHEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = FlushStageAuthorizersCacheRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = FlushStageAuthorizersCacheResponseUnmarshaller.Instance; return Invoke<FlushStageAuthorizersCacheResponse>(VAR_FLUSHSTAGEAUTHORIZERSCACHEREQUEST, VAR_VAR); }
public BasicQueryFactory(int VAR_INT) { this.VAR_INT = VAR_INT; this.queriesMade = LITERAL_INT; }
public virtual TrackingRefUpdate METHOD_NAME(string VAR_STRING) { return updates.Get(VAR_STRING); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(wOffset)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(at)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbit)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex((short)unused)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual EnableDirectoryResponse METHOD_NAME(EnableDirectoryRequest VAR_ENABLEDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableDirectoryResponseUnmarshaller.Instance; return Invoke<EnableDirectoryResponse>(VAR_ENABLEDIRECTORYREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } System.Array.Copy(VAR_INT[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field_1_password)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeProjectVersionsResponse METHOD_NAME(DescribeProjectVersionsRequest VAR_DESCRIBEPROJECTVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeProjectVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeProjectVersionsResponseUnmarshaller.Instance; return Invoke<DescribeProjectVersionsResponse>(VAR_DESCRIBEPROJECTVERSIONSREQUEST, VAR_VAR); }
public virtual UpdateHostedZoneCommentResponse METHOD_NAME(UpdateHostedZoneCommentRequest VAR_UPDATEHOSTEDZONECOMMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateHostedZoneCommentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateHostedZoneCommentResponseUnmarshaller.Instance; return Invoke<UpdateHostedZoneCommentResponse>(VAR_UPDATEHOSTEDZONECOMMENTREQUEST, VAR_VAR); }
public virtual Rescorer METHOD_NAME(Bindings VAR_BINDINGS) { return new ExpressionRescorer(this, VAR_BINDINGS); }
public virtual java.util.SortedSet<E> METHOD_NAME(E VAR_E) { return METHOD_NAME(VAR_E, false); }
public IQueryNode METHOD_NAME(string VAR_STRING) { IQueryNode VAR_IQUERYNODE, VAR_IQUERYNODE; List<IQueryNode> VAR_LIST<IQUERYNODE> = LITERAL_NULL; VAR_IQUERYNODE = ConjQuery(VAR_STRING); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.OR: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_2_break; } Jj_consume_token(RegexpToken.OR); VAR_IQUERYNODE = ConjQuery(VAR_STRING); if (VAR_LIST<IQUERYNODE> == LITERAL_NULL) { VAR_LIST<IQUERYNODE> = new List<IQueryNode>(); VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } label_2_break: if (VAR_LIST<IQUERYNODE> != LITERAL_NULL) { { if (true) return new OrQueryNode(VAR_LIST<IQUERYNODE>); } } else { { if (true) return VAR_IQUERYNODE; } } throw new Exception(LITERAL_STRING); }
public IDataValidationConstraint METHOD_NAME(String[] VAR_STRING[]) { return DVConstraint.METHOD_NAME(VAR_STRING[]); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { String VAR_STRING; int VAR_INT; try { VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_INT = TextFunction.EvaluateIntArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } String VAR_STRING; if (_isLeft) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT, Math.Min(VAR_STRING.Length, VAR_INT)); } else { VAR_STRING = VAR_STRING.Substring(Math.Max(LITERAL_INT, VAR_STRING.Length - VAR_INT)); } return new StringEval(VAR_STRING); }
public virtual bool METHOD_NAME(E VAR_E) { return addLastImpl(VAR_E); }
public ListInvalidationsRequest(string VAR_STRING) { _distributionId = VAR_STRING; }
public TagPhotoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual CreateFleetResponse METHOD_NAME(CreateFleetRequest VAR_CREATEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFleetResponseUnmarshaller.Instance; return Invoke<CreateFleetResponse>(VAR_CREATEFLEETREQUEST, VAR_VAR); }
public virtual GetTransitGatewayAttachmentPropagationsResponse METHOD_NAME(GetTransitGatewayAttachmentPropagationsRequest VAR_GETTRANSITGATEWAYATTACHMENTPROPAGATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTransitGatewayAttachmentPropagationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTransitGatewayAttachmentPropagationsResponseUnmarshaller.Instance; return Invoke<GetTransitGatewayAttachmentPropagationsResponse>(VAR_GETTRANSITGATEWAYATTACHMENTPROPAGATIONSREQUEST, VAR_VAR); }
public virtual ListWorkteamsResponse METHOD_NAME(ListWorkteamsRequest VAR_LISTWORKTEAMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWorkteamsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWorkteamsResponseUnmarshaller.Instance; return Invoke<ListWorkteamsResponse>(VAR_LISTWORKTEAMSREQUEST, VAR_VAR); }
public virtual DetachVpnGatewayResponse METHOD_NAME(DetachVpnGatewayRequest VAR_DETACHVPNGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachVpnGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachVpnGatewayResponseUnmarshaller.Instance; return Invoke<DetachVpnGatewayResponse>(VAR_DETACHVPNGATEWAYREQUEST, VAR_VAR); }
public virtual ListGeoLocationsResponse METHOD_NAME() { return METHOD_NAME(new ListGeoLocationsRequest()); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(StringValue); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static double METHOD_NAME(int VAR_INT) { long VAR_LONG = VAR_INT; VAR_LONG = VAR_LONG >> LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; if ((VAR_INT & LITERAL_INT) == LITERAL_INT) { VAR_DOUBLE = (double)(VAR_LONG); } else { VAR_DOUBLE = BitConverter.Int64BitsToDouble(VAR_LONG << LITERAL_INT); } if ((VAR_INT & LITERAL_INT) == LITERAL_INT) { VAR_DOUBLE /= LITERAL_INT; } return VAR_DOUBLE; }
public override long METHOD_NAME(long VAR_LONG) { Debug.Assert(VAR_LONG >= LITERAL_INT && VAR_LONG < valueCount); int VAR_INT = (int)((long)((ulong)VAR_LONG >> blockShift)); int VAR_INT = (int)(VAR_LONG & blockMask); return (minValues == LITERAL_NULL ? LITERAL_INT : minValues[VAR_INT]) + subReaders[VAR_INT].METHOD_NAME(VAR_INT); }
public virtual UpdatePublishingDestinationResponse METHOD_NAME(UpdatePublishingDestinationRequest VAR_UPDATEPUBLISHINGDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePublishingDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePublishingDestinationResponseUnmarshaller.Instance; return Invoke<UpdatePublishingDestinationResponse>(VAR_UPDATEPUBLISHINGDESTINATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(IEvaluationCell VAR_IEVALUATIONCELL) { int VAR_INT = GetSheetIndex(VAR_IEVALUATIONCELL.Sheet); _cache.METHOD_NAME(_workbookIx, VAR_INT, VAR_IEVALUATIONCELL); }
public IRequest METHOD_NAME(GetPolicyRequest VAR_GETPOLICYREQUEST) { IRequest VAR_IREQUEST = new DefaultRequest(VAR_GETPOLICYREQUEST, LITERAL_STRING); VAR_IREQUEST.Headers[Amazon.Util.HeaderKeys.XAmzApiVersion] = LITERAL_STRING; VAR_IREQUEST.HttpMethod = LITERAL_STRING; if (!VAR_GETPOLICYREQUEST.IsSetFunctionName()) throw new AmazonLambdaException(LITERAL_STRING); VAR_IREQUEST.AddPathResource(LITERAL_STRING, StringUtils.FromString(VAR_GETPOLICYREQUEST.FunctionName)); if (VAR_GETPOLICYREQUEST.IsSetQualifier()) VAR_IREQUEST.Parameters.Add(LITERAL_STRING, StringUtils.FromString(VAR_GETPOLICYREQUEST.Qualifier)); VAR_IREQUEST.ResourcePath = LITERAL_STRING; VAR_IREQUEST.MarshallerVersion = LITERAL_INT; VAR_IREQUEST.UseQueryString = true; return VAR_IREQUEST; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return this.METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_VALUEEVAL, new StringEval(DEFAULT_SUFFIX)); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; field_1_numShapes = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_2_lastMSOSPID = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; return RecordSize; }
public java.nio.charset.CharsetEncoder METHOD_NAME() { status = INIT; implReset(); return this; }
public virtual void METHOD_NAME(IToken VAR_ITOKEN) { this._token = VAR_ITOKEN; }
public override AbstractTreeIterator METHOD_NAME(ObjectReader VAR_OBJECTREADER) { if (currentSubtree == LITERAL_NULL) { throw new IncorrectObjectTypeException(EntryObjectId, Constants.TYPE_TREE); } return new NGit.Dircache.DirCacheBuildIterator(this, currentSubtree); }
public GreekLowerCaseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public java.net.URI METHOD_NAME(java.net.URI VAR_JAVA.NET.URI) { if (VAR_JAVA.NET.URI.opaque || opaque) { return VAR_JAVA.NET.URI; } if (scheme == LITERAL_NULL ? VAR_JAVA.NET.URI.scheme != LITERAL_NULL : !scheme.Equals(VAR_JAVA.NET.URI.scheme)) { return VAR_JAVA.NET.URI; } if (authority == LITERAL_NULL ? VAR_JAVA.NET.URI.authority != LITERAL_NULL : !authority.Equals(VAR_JAVA.NET.URI.authority)) { return VAR_JAVA.NET.URI; } string VAR_STRING = normalize(path, false); string VAR_STRING = normalize(VAR_JAVA.NET.URI.path, false); if (!VAR_STRING.Equals(VAR_STRING)) { VAR_STRING = Sharpen.StringHelper.Substring(VAR_STRING, LITERAL_INT, VAR_STRING.LastIndexOf(LITERAL_CHAR) + LITERAL_INT); if (!VAR_STRING.StartsWith(VAR_STRING)) { return VAR_JAVA.NET.URI; } } java.net.URI VAR_JAVA.NET.URI = new java.net.URI(); VAR_JAVA.NET.URI.fragment = VAR_JAVA.NET.URI.fragment; VAR_JAVA.NET.URI.query = VAR_JAVA.NET.URI.query; VAR_JAVA.NET.URI.path = Sharpen.StringHelper.Substring(VAR_STRING, VAR_STRING.Length); VAR_JAVA.NET.URI.setSchemeSpecificPart(); return VAR_JAVA.NET.URI; }
public Reader METHOD_NAME(bool VAR_BOOL) { if (frozen) { throw new InvalidOperationException(LITERAL_STRING); } if (didSkipBytes) { throw new InvalidOperationException(LITERAL_STRING); } if (VAR_BOOL && upto < blockSize) { var VAR_VAR = new byte[upto]; Array.Copy(currentBlock, LITERAL_INT, VAR_VAR, LITERAL_INT, upto); currentBlock = VAR_VAR; } if (currentBlock == LITERAL_NULL) { currentBlock = EMPTY_BYTES; } blocks.Add(currentBlock); blockEnd.Add(upto); frozen = true; currentBlock = LITERAL_NULL; return new PagedBytes.Reader(this); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length == LITERAL_INT) { return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } if (VAR_VALUEEVAL[].Length == LITERAL_INT) { return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public virtual CreateClusterResponse METHOD_NAME(CreateClusterRequest VAR_CREATECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterResponseUnmarshaller.Instance; return Invoke<CreateClusterResponse>(VAR_CREATECLUSTERREQUEST, VAR_VAR); }
public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy VAR_INDEXDELETIONPOLICY, Directory VAR_DIRECTORY, OpenMode VAR_OPENMODE) : base(primary) { this.VAR_DIRECTORY = VAR_DIRECTORY; if (VAR_OPENMODE == OpenMode.CREATE) { ClearPriorSnapshots(); } LoadPriorSnapshots(); if (VAR_OPENMODE == OpenMode.APPEND && nextWriteGen == LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } }
public virtual string METHOD_NAME(RuleContext VAR_RULECONTEXT) { return METHOD_NAME(VAR_RULECONTEXT.SourceInterval); }
public sealed override float METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public virtual DeleteDataSetResponse METHOD_NAME(DeleteDataSetRequest VAR_DELETEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDataSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDataSetResponseUnmarshaller.Instance; return Invoke<DeleteDataSetResponse>(VAR_DELETEDATASETREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsKey(VAR_OBJECT); }
public override bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { return base.METHOD_NAME(VAR_CHAR[], VAR_INT) && !m_exceptions.Contains(VAR_CHAR[], LITERAL_INT, VAR_INT); }
public virtual int METHOD_NAME() { return deltaSearchWindowSize; }
public virtual GetDomainNameResponse METHOD_NAME(GetDomainNameRequest VAR_GETDOMAINNAMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainNameRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainNameResponseUnmarshaller.Instance; return Invoke<GetDomainNameResponse>(VAR_GETDOMAINNAMEREQUEST, VAR_VAR); }
public virtual DeleteAccessLogSettingsResponse METHOD_NAME(DeleteAccessLogSettingsRequest VAR_DELETEACCESSLOGSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAccessLogSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAccessLogSettingsResponseUnmarshaller.Instance; return Invoke<DeleteAccessLogSettingsResponse>(VAR_DELETEACCESSLOGSETTINGSREQUEST, VAR_VAR); }
public QueryValueSource(Query VAR_QUERY, float VAR_FLOAT) { this.VAR_QUERY = VAR_QUERY; this.VAR_FLOAT = VAR_FLOAT; }
public override object[] METHOD_NAME() { lock (this._enclosing) { return base.METHOD_NAME(); } }
public String METHOD_NAME() { if (s0 == LITERAL_NULL) return LITERAL_STRING; DFASerializer VAR_DFASERIALIZER = new LexerDFASerializer(this); return VAR_DFASERIALIZER.ToString(); }
public virtual void METHOD_NAME() { Fill(LITERAL_INT, Count, LITERAL_INT); }
public virtual GetStreamingDistributionConfigResponse METHOD_NAME(GetStreamingDistributionConfigRequest VAR_GETSTREAMINGDISTRIBUTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStreamingDistributionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStreamingDistributionConfigResponseUnmarshaller.Instance; return Invoke<GetStreamingDistributionConfigResponse>(VAR_GETSTREAMINGDISTRIBUTIONCONFIGREQUEST, VAR_VAR); }
public virtual UpdateDomainContactResponse METHOD_NAME(UpdateDomainContactRequest VAR_UPDATEDOMAINCONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainContactResponseUnmarshaller.Instance; return Invoke<UpdateDomainContactResponse>(VAR_UPDATEDOMAINCONTACTREQUEST, VAR_VAR); }
public override java.util.ListIterator<E> METHOD_NAME(int VAR_INT) { return new java.util.LinkedList.LinkIterator<E>(this, VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectKind)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectContext)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectInstance1)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectInstance2)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public override string METHOD_NAME(string VAR_STRING) { var VAR_VAR = new StringBuilder(); bool VAR_BOOL = (Boost != LITERAL_INT) || (LowFreqMinimumNumberShouldMatch > LITERAL_INT); if (VAR_BOOL) { VAR_VAR.Append(LITERAL_STRING); } for (int i = LITERAL_INT; i < m_terms.Count; i++) { Term VAR_TERM = m_terms[i]; VAR_VAR.Append(NewTermQuery(VAR_TERM, LITERAL_NULL).METHOD_NAME()); if (i != m_terms.Count - LITERAL_INT) { VAR_VAR.Append(LITERAL_STRING); } } if (VAR_BOOL) { VAR_VAR.Append(LITERAL_STRING); } if (LowFreqMinimumNumberShouldMatch > LITERAL_INT || HighFreqMinimumNumberShouldMatch > LITERAL_INT) { VAR_VAR.Append(LITERAL_CHAR); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.AppendFormat(CultureInfo.InvariantCulture, LITERAL_STRING, LowFreqMinimumNumberShouldMatch); VAR_VAR.AppendFormat(CultureInfo.InvariantCulture, LITERAL_STRING, HighFreqMinimumNumberShouldMatch); VAR_VAR.Append(LITERAL_STRING); } if (Boost != LITERAL_FLOAT) { VAR_VAR.Append(ToStringUtils.Boost(Boost)); } return VAR_VAR.METHOD_NAME(); }
public string[] METHOD_NAME(string VAR_STRING) { var VAR_VAR = stopWordsPerField[VAR_STRING]; return VAR_VAR != LITERAL_NULL ? VAR_VAR.ToArray() : new string[LITERAL_INT]; }
public virtual void METHOD_NAME(float VAR_FLOAT) { METHOD_NAME(VAR_FLOAT.ToString()); }
public MopenCreateGroupRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public SmallObject(int VAR_INT, byte[] VAR_BYTE[]) { this.VAR_INT = VAR_INT; this.VAR_BYTE[] = VAR_BYTE[]; }
public bool METHOD_NAME(char VAR_CHAR) { return System.Char.IsUpper(VAR_CHAR); }
public virtual StartNotebookInstanceResponse METHOD_NAME(StartNotebookInstanceRequest VAR_STARTNOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartNotebookInstanceResponseUnmarshaller.Instance; return Invoke<StartNotebookInstanceResponse>(VAR_STARTNOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public static void METHOD_NAME(String VAR_STRING, byte[] VAR_BYTE[], int VAR_INT) { byte[] VAR_BYTE[] = UTF16LE.GetBytes(VAR_STRING); Array.Copy(VAR_BYTE[], LITERAL_INT, VAR_BYTE[], VAR_INT, VAR_BYTE[].Length); }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = ReaderIndex(VAR_INT); ((FakeDeleteAtomicIndexReader)GetSequentialSubReaders()[VAR_INT]).METHOD_NAME(VAR_INT - ReaderBase(VAR_INT)); }
public virtual bool METHOD_NAME(string VAR_STRING, QualityQuery VAR_QUALITYQUERY) { QRelJudgement VAR_QRELJUDGEMENT; judgements.TryGetValue(VAR_QUALITYQUERY.QueryID, out VAR_QRELJUDGEMENT); return VAR_QRELJUDGEMENT != LITERAL_NULL && VAR_QRELJUDGEMENT.METHOD_NAME(VAR_STRING); }
public int METHOD_NAME() { return beginB; }
public virtual ModifySpotFleetRequestResponse METHOD_NAME(ModifySpotFleetRequestRequest VAR_MODIFYSPOTFLEETREQUESTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySpotFleetRequestRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySpotFleetRequestResponseUnmarshaller.Instance; return Invoke<ModifySpotFleetRequestResponse>(VAR_MODIFYSPOTFLEETREQUESTREQUEST, VAR_VAR); }
public UncalcedRecord() { _reserved = LITERAL_INT; }
public static PageOrder METHOD_NAME(int VAR_INT) { return _table[VAR_INT]; }
public static CellValue METHOD_NAME(bool VAR_BOOL) { return VAR_BOOL ? TRUE : FALSE; }
public override void METHOD_NAME(string VAR_STRING) { buf.append(VAR_STRING); }
public void METHOD_NAME(IHSSFListener VAR_IHSSFLISTENER, short VAR_SHORT) { IList VAR_ILIST = LITERAL_NULL; Object VAR_OBJECT = records[VAR_SHORT]; if (VAR_OBJECT != LITERAL_NULL) { VAR_ILIST = (IList)VAR_OBJECT; } else { VAR_ILIST = new ArrayList(LITERAL_INT); VAR_ILIST.Add(VAR_IHSSFLISTENER); records[VAR_SHORT] = VAR_ILIST; } }
public virtual GetMeetingResponse METHOD_NAME(GetMeetingRequest VAR_GETMEETINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMeetingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMeetingResponseUnmarshaller.Instance; return Invoke<GetMeetingResponse>(VAR_GETMEETINGREQUEST, VAR_VAR); }
public void METHOD_NAME() { stop = true; }
public virtual AttachLoadBalancerTargetGroupsResponse METHOD_NAME(AttachLoadBalancerTargetGroupsRequest VAR_ATTACHLOADBALANCERTARGETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachLoadBalancerTargetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachLoadBalancerTargetGroupsResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancerTargetGroupsResponse>(VAR_ATTACHLOADBALANCERTARGETGROUPSREQUEST, VAR_VAR); }
public virtual GetQueryLoggingConfigResponse METHOD_NAME(GetQueryLoggingConfigRequest VAR_GETQUERYLOGGINGCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQueryLoggingConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQueryLoggingConfigResponseUnmarshaller.Instance; return Invoke<GetQueryLoggingConfigResponse>(VAR_GETQUERYLOGGINGCONFIGREQUEST, VAR_VAR); }
public virtual java.util.ListIterator<E> METHOD_NAME() { object[] VAR_OBJECT[] = elements; return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public virtual CreateSnapshotResponse METHOD_NAME(CreateSnapshotRequest VAR_CREATESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSnapshotResponseUnmarshaller.Instance; return Invoke<CreateSnapshotResponse>(VAR_CREATESNAPSHOTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { try { return ObjectDatabase.Has(VAR_ANYOBJECTID); } catch (IOException) { return false; } }
public override sealed void METHOD_NAME(int VAR_INT, int VAR_INT) { CheckRange(VAR_INT, VAR_INT); MergeSort(VAR_INT, VAR_INT); }
public EscherRecord METHOD_NAME(short VAR_SHORT) { for (IEnumerator iterator = _childRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; if (VAR_ESCHERRECORD.RecordId == VAR_SHORT) return VAR_ESCHERRECORD; } return LITERAL_NULL; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_xBasis); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_yBasis); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_heightBasis); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_scale); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_5_indexToFontTable); }
public static string METHOD_NAME(int VAR_INT) { return METHOD_NAME((long)VAR_INT, LITERAL_INT); }
public static ICollection<Ref> METHOD_NAME(ICollection<Ref> VAR_ICOLLECTION<REF>) { IList<Ref> VAR_ILIST<REF> = new AList<Ref>(VAR_ICOLLECTION<REF>); VAR_ILIST<REF>.METHOD_NAME(INSTANCE); return VAR_ILIST<REF>; }
public virtual DescribeVpcsResponse METHOD_NAME() { return METHOD_NAME(new DescribeVpcsRequest()); }
public virtual ListProposalsResponse METHOD_NAME(ListProposalsRequest VAR_LISTPROPOSALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProposalsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProposalsResponseUnmarshaller.Instance; return Invoke<ListProposalsResponse>(VAR_LISTPROPOSALSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public T METHOD_NAME() { return m_object; }
public BundleInstanceRequest(string VAR_STRING, Storage VAR_STORAGE) { _instanceId = VAR_STRING; _storage = VAR_STORAGE; }
public override void METHOD_NAME(int VAR_INT) { if (VAR_INT == LITERAL_INT && LITERAL_INT <= prevPtr) { currPtr = prevPtr; prevPtr = -LITERAL_INT; if (!Eof) { ParseEntry(); } return; } else { if (VAR_INT <= LITERAL_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } } int[] VAR_INT[] = new int[VAR_INT + LITERAL_INT]; Arrays.Fill(VAR_INT[], -LITERAL_INT); int VAR_INT = LITERAL_INT; while (VAR_INT != currPtr) { System.Array.Copy(VAR_INT[], LITERAL_INT, VAR_INT[], LITERAL_INT, VAR_INT); VAR_INT[][VAR_INT] = VAR_INT; while (raw[VAR_INT] != LITERAL_INT) { VAR_INT++; } VAR_INT += Constants.OBJECT_ID_LENGTH + LITERAL_INT; } if (VAR_INT[][LITERAL_INT] == -LITERAL_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } prevPtr = VAR_INT[][LITERAL_INT]; currPtr = VAR_INT[][LITERAL_INT]; ParseEntry(); }
public override string METHOD_NAME() { return LITERAL_STRING + ruleIndex + LITERAL_STRING + predIndex; }
public PatternSyntaxException(string VAR_STRING, string VAR_STRING, int VAR_INT) { this.desc = VAR_STRING; this.VAR_STRING = VAR_STRING; this.VAR_INT = VAR_INT; }
public AlphaAnimation(float VAR_FLOAT, float VAR_FLOAT) { mFromAlpha = VAR_FLOAT; mToAlpha = VAR_FLOAT; }
public override int METHOD_NAME() { ITaxonomyWriter VAR_ITAXONOMYWRITER = RunData.TaxonomyWriter; if (VAR_ITAXONOMYWRITER != LITERAL_NULL) { VAR_ITAXONOMYWRITER.Commit(); } else { throw new InvalidOperationException(LITERAL_STRING); } return LITERAL_INT; }
public DeltaIndex(byte[] VAR_BYTE[]) { src = VAR_BYTE[]; DeltaIndexScanner VAR_DELTAINDEXSCANNER = new DeltaIndexScanner(src, src.Length); table = VAR_DELTAINDEXSCANNER.table; tableMask = VAR_DELTAINDEXSCANNER.tableMask; entries = new long[LITERAL_INT + CountEntries(VAR_DELTAINDEXSCANNER)]; CopyEntries(VAR_DELTAINDEXSCANNER); }
public int METHOD_NAME() { return pos; }
public override IQueryMaker METHOD_NAME() { return RunData.METHOD_NAME(this); }
public JapaneseTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { Enum.TryParse(Get(VAR_IDICTIONARY<STRING, STRING>, MODE, JapaneseTokenizer.DEFAULT_MODE.ToString()), true, out mode); userDictionaryPath = Get(VAR_IDICTIONARY<STRING, STRING>, USER_DICT_PATH); userDictionaryEncoding = Get(VAR_IDICTIONARY<STRING, STRING>, USER_DICT_ENCODING); discardPunctuation = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, DISCARD_PUNCTUATION, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public long? METHOD_NAME(string VAR_STRING) { if (LITERAL_NULL != DictionaryUtil.Get(ResponseDictionary, VAR_STRING)) { return long.Parse(DictionaryUtil.Get(ResponseDictionary, VAR_STRING)); } return LITERAL_NULL; }
public GetLibraryRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public short METHOD_NAME(int VAR_INT) { UnicodeString.FormatRun VAR_UNICODESTRING.FORMATRUN = _string.GetFormatRun(VAR_INT); return VAR_UNICODESTRING.FORMATRUN.FontIndex; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; field_1_shapeIdMax = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; int VAR_INT = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_3_numShapesSaved = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_4_drawingsSaved = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_5_fileIdClusters = new FileIdCluster[(VAR_INT - VAR_INT) / LITERAL_INT]; for (int i = LITERAL_INT; i < field_5_fileIdClusters.Length; i++) { field_5_fileIdClusters[i] = new FileIdCluster(LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT), LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT + LITERAL_INT)); maxDgId = Math.Max(maxDgId, field_5_fileIdClusters[i].DrawingGroupId); VAR_INT += LITERAL_INT; } VAR_INT -= VAR_INT; if (VAR_INT != LITERAL_INT) throw new RecordFormatException(LITERAL_STRING + VAR_INT + LITERAL_STRING); return LITERAL_INT + VAR_INT + VAR_INT; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = METHOD_NAME(VAR_LONG[], VAR_INT); VAR_INT += valueCount; VAR_INT = WriteInt64(VAR_LONG, VAR_BYTE[], VAR_INT); } }
public virtual GetTerminologyResponse METHOD_NAME(GetTerminologyRequest VAR_GETTERMINOLOGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTerminologyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTerminologyResponseUnmarshaller.Instance; return Invoke<GetTerminologyResponse>(VAR_GETTERMINOLOGYREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_character); VAR_ILITTLEENDIANOUTPUT.WriteShort(_fontIndex); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_options); }
public virtual SearchFacesResponse METHOD_NAME(SearchFacesRequest VAR_SEARCHFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchFacesResponseUnmarshaller.Instance; return Invoke<SearchFacesResponse>(VAR_SEARCHFACESREQUEST, VAR_VAR); }
public override int METHOD_NAME(string VAR_STRING) { return GetWrappedAnalyzer(VAR_STRING).METHOD_NAME(VAR_STRING); }
public virtual DescribeSchemaResponse METHOD_NAME(DescribeSchemaRequest VAR_DESCRIBESCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSchemaResponseUnmarshaller.Instance; return Invoke<DescribeSchemaResponse>(VAR_DESCRIBESCHEMAREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public virtual PackIndex.MutableEntry METHOD_NAME() { PackIndex.MutableEntry VAR_PACKINDEX.MUTABLEENTRY = new PackIndex.MutableEntry(); EnsureId(); VAR_PACKINDEX.MUTABLEENTRY.idBuffer.FromObjectId(idBuffer); VAR_PACKINDEX.MUTABLEENTRY.offset = offset; return VAR_PACKINDEX.MUTABLEENTRY; }
public OperateEquipmentRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual bool METHOD_NAME(E VAR_E) { lock (mutex) { return c.METHOD_NAME(VAR_E); } }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (!(VAR_OBJECT is EscherSimpleProperty)) return false; EscherSimpleProperty VAR_ESCHERSIMPLEPROPERTY = (EscherSimpleProperty)VAR_OBJECT; if (propertyValue != VAR_ESCHERSIMPLEPROPERTY.propertyValue) return false; if (Id != VAR_ESCHERSIMPLEPROPERTY.Id) return false; return true; }
public sealed override java.nio.FloatBuffer METHOD_NAME() { return java.nio.FloatToByteBufferAdapter.METHOD_NAME(this); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_THUMBNAIL); }
public static int METHOD_NAME(string VAR_STRING, string VAR_STRING) { for (int i = LITERAL_INT; i < VAR_STRING.Length && i < VAR_STRING.Length; i++) { int VAR_INT = ToLowerCase(VAR_STRING[i]) - ToLowerCase(VAR_STRING[i]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } } return VAR_STRING.Length - VAR_STRING.Length; }
public ViewDefinitionRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rwFirst = VAR_RECORDINPUTSTREAM.ReadUShort(); rwLast = VAR_RECORDINPUTSTREAM.ReadUShort(); colFirst = VAR_RECORDINPUTSTREAM.ReadUShort(); colLast = VAR_RECORDINPUTSTREAM.ReadUShort(); rwFirstHead = VAR_RECORDINPUTSTREAM.ReadUShort(); rwFirstData = VAR_RECORDINPUTSTREAM.ReadUShort(); colFirstData = VAR_RECORDINPUTSTREAM.ReadUShort(); iCache = VAR_RECORDINPUTSTREAM.ReadUShort(); reserved = VAR_RECORDINPUTSTREAM.ReadUShort(); sxaxis4Data = VAR_RECORDINPUTSTREAM.ReadUShort(); ipos4Data = VAR_RECORDINPUTSTREAM.ReadUShort(); cDim = VAR_RECORDINPUTSTREAM.ReadUShort(); cDimRw = VAR_RECORDINPUTSTREAM.ReadUShort(); cDimCol = VAR_RECORDINPUTSTREAM.ReadUShort(); cDimPg = VAR_RECORDINPUTSTREAM.ReadUShort(); cDimData = VAR_RECORDINPUTSTREAM.ReadUShort(); cRw = VAR_RECORDINPUTSTREAM.ReadUShort(); cCol = VAR_RECORDINPUTSTREAM.ReadUShort(); grbit = VAR_RECORDINPUTSTREAM.ReadUShort(); itblAutoFmt = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); name = StringUtil.ReadUnicodeString(VAR_RECORDINPUTSTREAM, VAR_INT); dataField = StringUtil.ReadUnicodeString(VAR_RECORDINPUTSTREAM, VAR_INT); }
public FormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_index_code = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_hasMultibyte = (VAR_RECORDINPUTSTREAM.ReadByte() & (byte)LITERAL_INT) != LITERAL_INT; if (field_3_hasMultibyte) { field_4_formatstring = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } else { field_4_formatstring = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); } }
public virtual DescribeBrokerResponse METHOD_NAME(DescribeBrokerRequest VAR_DESCRIBEBROKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBrokerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBrokerResponseUnmarshaller.Instance; return Invoke<DescribeBrokerResponse>(VAR_DESCRIBEBROKERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (((ITokenStream)InputStream) != LITERAL_NULL) { ((ITokenStream)InputStream).Seek(LITERAL_INT); } _errHandler.METHOD_NAME(this); _ctx = LITERAL_NULL; _syntaxErrors = LITERAL_INT; _precedenceStack.Clear(); _precedenceStack.Add(LITERAL_INT); ATNSimulator VAR_ATNSIMULATOR = Interpreter; if (VAR_ATNSIMULATOR != LITERAL_NULL) { VAR_ATNSIMULATOR.METHOD_NAME(); } }
public override bool METHOD_NAME(object VAR_OBJECT) { RevFlag VAR_REVFLAG = (RevFlag)VAR_OBJECT; if ((mask & VAR_REVFLAG.mask) == LITERAL_INT) { return false; } mask &= ~VAR_REVFLAG.mask; for (int i = LITERAL_INT; i < active.Count; i++) { if (active[i].mask == VAR_REVFLAG.mask) { active.METHOD_NAME(i); } } return true; }
public override object METHOD_NAME(Passage[] VAR_PASSAGE[], string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); int VAR_INT = LITERAL_INT; foreach (Passage passage in VAR_PASSAGE[]) { if (passage.startOffset > VAR_INT && VAR_INT > LITERAL_INT) { VAR_STRINGBUILDER.Append(m_ellipsis); } VAR_INT = passage.startOffset; for (int i = LITERAL_INT; i < passage.numMatches; i++) { int VAR_INT = passage.matchStarts[i]; int VAR_INT = passage.matchEnds[i]; if (VAR_INT > VAR_INT) { Append(VAR_STRINGBUILDER, VAR_STRING, VAR_INT, VAR_INT); } if (VAR_INT > VAR_INT) { VAR_STRINGBUILDER.Append(m_preTag); Append(VAR_STRINGBUILDER, VAR_STRING, Math.Max(VAR_INT, VAR_INT), VAR_INT); VAR_STRINGBUILDER.Append(m_postTag); VAR_INT = VAR_INT; } } Append(VAR_STRINGBUILDER, VAR_STRING, VAR_INT, Math.Max(VAR_INT, passage.endOffset)); VAR_INT = passage.endOffset; } return VAR_STRINGBUILDER.ToString(); }
public DrillSidewaysResult(Facets VAR_FACETS, TopDocs VAR_TOPDOCS) { this.Facets = VAR_FACETS; this.Hits = VAR_TOPDOCS; }
public virtual ListTrafficPolicyInstancesByPolicyResponse METHOD_NAME(ListTrafficPolicyInstancesByPolicyRequest VAR_LISTTRAFFICPOLICYINSTANCESBYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrafficPolicyInstancesByPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrafficPolicyInstancesByPolicyResponseUnmarshaller.Instance; return Invoke<ListTrafficPolicyInstancesByPolicyResponse>(VAR_LISTTRAFFICPOLICYINSTANCESBYPOLICYREQUEST, VAR_VAR); }
public ComplexPhraseQuery(string VAR_STRING, string VAR_STRING, int VAR_INT, bool VAR_BOOL) { this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (!m_term.Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_STRINGBUILDER.Append(m_term.Field); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(m_automaton.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override String METHOD_NAME() { return Name; }
public override Object METHOD_NAME() { AreaRecord VAR_AREARECORD = new AreaRecord(); VAR_AREARECORD.field_1_formatFlags = field_1_formatFlags; return VAR_AREARECORD; }
public override long METHOD_NAME() { return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms != LITERAL_NULL) ? simpleTextTerms.METHOD_NAME() : LITERAL_INT); }
public DeleteConfigurationTemplateRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _templateName = VAR_STRING; }
public virtual IList<IToken> METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { BitSet VAR_BITSET = new BitSet(VAR_INT); VAR_BITSET.Set(VAR_INT); return METHOD_NAME(VAR_INT, VAR_INT, VAR_BITSET); }
public virtual DescribeIamInstanceProfileAssociationsResponse METHOD_NAME(DescribeIamInstanceProfileAssociationsRequest VAR_DESCRIBEIAMINSTANCEPROFILEASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIamInstanceProfileAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIamInstanceProfileAssociationsResponseUnmarshaller.Instance; return Invoke<DescribeIamInstanceProfileAssociationsResponse>(VAR_DESCRIBEIAMINSTANCEPROFILEASSOCIATIONSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); if (VAR_STRING.Length == LITERAL_INT) { return ErrorEval.VALUE_INVALID; } int VAR_INT = (int)VAR_STRING[LITERAL_INT]; return new StringEval(VAR_INT.ToString()); }
public virtual AttachVpnGatewayResponse METHOD_NAME(AttachVpnGatewayRequest VAR_ATTACHVPNGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachVpnGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachVpnGatewayResponseUnmarshaller.Instance; return Invoke<AttachVpnGatewayResponse>(VAR_ATTACHVPNGATEWAYREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(java.nio.FloatBuffer VAR_JAVA.NIO.FLOATBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.FLOATBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.FLOATBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.FLOATBUFFER._position; float VAR_FLOAT; float VAR_FLOAT; while (VAR_INT > LITERAL_INT) { VAR_FLOAT = get(VAR_INT); VAR_FLOAT = VAR_JAVA.NIO.FLOATBUFFER.get(VAR_INT); if ((VAR_FLOAT != VAR_FLOAT) && ((VAR_FLOAT == VAR_FLOAT) || (VAR_FLOAT == VAR_FLOAT))) { return VAR_FLOAT < VAR_FLOAT ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.FLOATBUFFER.remaining(); }
public java.util.regex.Matcher METHOD_NAME(bool VAR_BOOL) { transparentBounds = VAR_BOOL; useTransparentBoundsImpl(address, VAR_BOOL); return this; }
public virtual void METHOD_NAME() { if (this.lastEntryReturned == LITERAL_NULL) { throw new System.InvalidOperationException(); } if (this._enclosing.modCount != this.expectedModCount) { throw new java.util.ConcurrentModificationException(); } this._enclosing.METHOD_NAME(this.lastEntryReturned.key); this.lastEntryReturned = LITERAL_NULL; this.expectedModCount = this._enclosing.modCount; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(externalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_CHAR); } if (sheetName != LITERAL_NULL) { VAR_STRINGBUILDER.Append(sheetName); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(ErrorConstants.GetText(ErrorConstants.ERROR_REF)); return VAR_STRINGBUILDER.ToString(); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME(Subs) + LITERAL_STRING; }
public virtual CreateVpnConnectionRouteResponse METHOD_NAME(CreateVpnConnectionRouteRequest VAR_CREATEVPNCONNECTIONROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpnConnectionRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpnConnectionRouteResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionRouteResponse>(VAR_CREATEVPNCONNECTIONROUTEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return this._next != LITERAL_NULL; }
public DeleteDBSecurityGroupRequest(string VAR_STRING) { _dbSecurityGroupName = VAR_STRING; }
public int METHOD_NAME(Property VAR_PROPERTY, Property VAR_PROPERTY) { String VAR_STRING = LITERAL_STRING; String VAR_STRING = ((Property)VAR_PROPERTY).Name; String VAR_STRING = ((Property)VAR_PROPERTY).Name; int VAR_INT = VAR_STRING.Length - VAR_STRING.Length; if (VAR_INT == LITERAL_INT) { if (VAR_STRING.Equals(VAR_STRING, StringComparison.CurrentCulture)) { VAR_INT = LITERAL_INT; } else if (VAR_STRING.Equals(VAR_STRING, StringComparison.CurrentCulture)) { VAR_INT = -LITERAL_INT; } else { if (VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal) && VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = String.METHOD_NAME(VAR_STRING, VAR_STRING, StringComparison.OrdinalIgnoreCase); } else if (VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = LITERAL_INT; } else if (VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_INT = -LITERAL_INT; } else { VAR_INT = String.METHOD_NAME(VAR_STRING, VAR_STRING, StringComparison.OrdinalIgnoreCase); } } } return VAR_INT; }
public virtual java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_DOUBLE[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_DOUBLE[][i] = METHOD_NAME(); } } return this; }
public override CharsRef METHOD_NAME(CharsRef VAR_CHARSREF, CharsRef VAR_CHARSREF) { Debug.Assert(VAR_CHARSREF != LITERAL_NULL); Debug.Assert(VAR_CHARSREF != LITERAL_NULL); if (VAR_CHARSREF == NO_OUTPUT) { return VAR_CHARSREF; } else if (VAR_CHARSREF == NO_OUTPUT) { return VAR_CHARSREF; } else { Debug.Assert(VAR_CHARSREF.Length > LITERAL_INT); Debug.Assert(VAR_CHARSREF.Length > LITERAL_INT); var VAR_VAR = new CharsRef(VAR_CHARSREF.Length + VAR_CHARSREF.Length); Array.Copy(VAR_CHARSREF.Chars, VAR_CHARSREF.Offset, VAR_VAR.Chars, LITERAL_INT, VAR_CHARSREF.Length); Array.Copy(VAR_CHARSREF.Chars, VAR_CHARSREF.Offset, VAR_VAR.Chars, VAR_CHARSREF.Length, VAR_CHARSREF.Length); VAR_VAR.Length = VAR_CHARSREF.Length + VAR_CHARSREF.Length; return VAR_VAR; } }
public virtual UpdateProfileResponse METHOD_NAME(UpdateProfileRequest VAR_UPDATEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateProfileResponseUnmarshaller.Instance; return Invoke<UpdateProfileResponse>(VAR_UPDATEPROFILEREQUEST, VAR_VAR); }
public LikeThisQueryBuilder(Analyzer VAR_ANALYZER, string[] VAR_STRING[]) { this.VAR_ANALYZER = VAR_ANALYZER; this.VAR_STRING[] = VAR_STRING[]; }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { return METHOD_NAME(VAR_INT, System.Convert.ToString(VAR_LONG)); }
public Field(string VAR_STRING, BytesRef VAR_BYTESREF, FieldType VAR_FIELDTYPE) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } if (VAR_FIELDTYPE == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } if (VAR_FIELDTYPE.IsIndexed) { throw new System.ArgumentException(LITERAL_STRING); } this.FieldsData = VAR_BYTESREF; this.m_type = VAR_FIELDTYPE; this.m_name = VAR_STRING; }
public virtual void METHOD_NAME() { mSize = LITERAL_INT; }
public virtual SrndQuery METHOD_NAME(string VAR_STRING) { ReInit(new FastCharStream(new StringReader(VAR_STRING))); try { return TopSrndQuery(); } catch (TokenMgrError tme) { throw new ParseException(tme.Message); } }
public override int METHOD_NAME() { return this._enclosing._size; }
public virtual DescribeConfigurationResponse METHOD_NAME(DescribeConfigurationRequest VAR_DESCRIBECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeConfigurationResponse>(VAR_DESCRIBECONFIGURATIONREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(int VAR_INT) { string VAR_STRING = GetErrorDisplay(VAR_INT); return LITERAL_STRING + VAR_STRING + LITERAL_STRING; }
public virtual DescribeHumanTaskUiResponse METHOD_NAME(DescribeHumanTaskUiRequest VAR_DESCRIBEHUMANTASKUIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHumanTaskUiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHumanTaskUiResponseUnmarshaller.Instance; return Invoke<DescribeHumanTaskUiResponse>(VAR_DESCRIBEHUMANTASKUIREQUEST, VAR_VAR); }
public override void METHOD_NAME() { try { int VAR_INT = task.RunAndMaybeStats(outerInstance.letChildReport); if (outerInstance.anyExhaustibleTasks) { outerInstance.UpdateExhausted(task); } count += VAR_INT; } catch (NoMoreDataException) { outerInstance.exhausted = true; } catch (Exception e) { throw new Exception(e.ToString(), e); } }
public virtual DescribeImagePermissionsResponse METHOD_NAME(DescribeImagePermissionsRequest VAR_DESCRIBEIMAGEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImagePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImagePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeImagePermissionsResponse>(VAR_DESCRIBEIMAGEPERMISSIONSREQUEST, VAR_VAR); }
public virtual object METHOD_NAME() { object VAR_OBJECT = LITERAL_NULL; try { VAR_OBJECT = base.MemberwiseClone(); } catch (Exception e) { throw new InvalidOperationException(e.Message, e); } return VAR_OBJECT; }
public override void METHOD_NAME(byte[][] VAR_BYTE[][], int VAR_INT, int VAR_INT) { int VAR_INT = Math.Min(maxBufferedBlocks - freeBlocks, VAR_INT - VAR_INT); int VAR_INT = freeBlocks + VAR_INT; if (VAR_INT >= freeByteBlocks.Length) { var VAR_VAR = new byte[ArrayUtil.Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][]; Array.Copy(freeByteBlocks, LITERAL_INT, VAR_VAR, LITERAL_INT, freeBlocks); freeByteBlocks = VAR_VAR; } int VAR_INT = VAR_INT + VAR_INT; for (int i = VAR_INT; i < VAR_INT; i++) { freeByteBlocks[freeBlocks++] = VAR_BYTE[][][i]; VAR_BYTE[][][i] = LITERAL_NULL; } for (int i = VAR_INT; i < VAR_INT; i++) { VAR_BYTE[][][i] = LITERAL_NULL; } bytesUsed.AddAndGet(-(VAR_INT - VAR_INT) * m_blockSize); Debug.Assert(bytesUsed.Get() >= LITERAL_INT); }
public GeohashPrefixTree(SpatialContext VAR_SPATIALCONTEXT, int VAR_INT) : base(ctx, maxLevels) { IRectangle VAR_IRECTANGLE = VAR_SPATIALCONTEXT.WorldBounds; if (VAR_IRECTANGLE.MinX != -LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IRECTANGLE); } int VAR_INT = MaxLevelsPossible; if (VAR_INT <= LITERAL_INT || VAR_INT > VAR_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT); } }
public void METHOD_NAME(int VAR_INT) { _definedNames.RemoveAt(VAR_INT); }
public virtual CancelSpotFleetRequestsResponse METHOD_NAME(CancelSpotFleetRequestsRequest VAR_CANCELSPOTFLEETREQUESTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelSpotFleetRequestsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<CancelSpotFleetRequestsResponse>(VAR_CANCELSPOTFLEETREQUESTSREQUEST, VAR_VAR); }
public GetIndustryInfoLineageListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_DOUBLE[].Length < VAR_INT) { double[] VAR_DOUBLE[] = new double[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_DOUBLE)]; Array.Copy(VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[].Length); return VAR_DOUBLE[]; } else { return VAR_DOUBLE[]; } }
public override void METHOD_NAME(RefUpdate.Result VAR_REFUPDATE.RESULT) { this._enclosing.result = VAR_REFUPDATE.RESULT; base.METHOD_NAME(VAR_REFUPDATE.RESULT); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { AreaEval VAR_AREAEVAL; double VAR_DOUBLE; bool VAR_BOOL = false; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); if (Double.IsNaN(VAR_DOUBLE) || Double.IsInfinity(VAR_DOUBLE)) { throw new EvaluationException(ErrorEval.NUM_ERROR); } VAR_AREAEVAL = ConvertRangeArg(VAR_VALUEEVAL); VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); int VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); if (VAR_INT == LITERAL_INT) { VAR_BOOL = true; } else if (VAR_INT == LITERAL_INT) { VAR_BOOL = false; } else throw new EvaluationException(ErrorEval.NUM_ERROR); } catch (EvaluationException e) { return e.GetErrorEval(); } return eval(VAR_INT, VAR_INT, VAR_DOUBLE, VAR_AREAEVAL, VAR_BOOL); }
public virtual DeleteEventBusResponse METHOD_NAME(DeleteEventBusRequest VAR_DELETEEVENTBUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventBusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventBusResponseUnmarshaller.Instance; return Invoke<DeleteEventBusResponse>(VAR_DELETEEVENTBUSREQUEST, VAR_VAR); }
public static java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = new java.nio.ReadWriteHeapByteBuffer(VAR_BYTE[]); VAR_JAVA.NIO.BYTEBUFFER._position = VAR_INT; VAR_JAVA.NIO.BYTEBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.BYTEBUFFER; }
public string ApiVersion { get; private set; }
public virtual SearchResponse METHOD_NAME(SearchRequest VAR_SEARCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchResponseUnmarshaller.Instance; return Invoke<SearchResponse>(VAR_SEARCHREQUEST, VAR_VAR); }
public virtual NGit.Api.PushCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual AcceptReservedInstancesExchangeQuoteResponse METHOD_NAME(AcceptReservedInstancesExchangeQuoteRequest VAR_ACCEPTRESERVEDINSTANCESEXCHANGEQUOTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptReservedInstancesExchangeQuoteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptReservedInstancesExchangeQuoteResponseUnmarshaller.Instance; return Invoke<AcceptReservedInstancesExchangeQuoteResponse>(VAR_ACCEPTRESERVEDINSTANCESEXCHANGEQUOTEREQUEST, VAR_VAR); }
public virtual GetAuthorizationTokenResponse METHOD_NAME(GetAuthorizationTokenRequest VAR_GETAUTHORIZATIONTOKENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAuthorizationTokenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAuthorizationTokenResponseUnmarshaller.Instance; return Invoke<GetAuthorizationTokenResponse>(VAR_GETAUTHORIZATIONTOKENREQUEST, VAR_VAR); }
public static InitCommand METHOD_NAME() { return new InitCommand(); }
public static RevFilter METHOD_NAME(ICollection<RevFilter> VAR_ICOLLECTION<REVFILTER>) { if (VAR_ICOLLECTION<REVFILTER>.Count < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } RevFilter[] VAR_REVFILTER[] = new RevFilter[VAR_ICOLLECTION<REVFILTER>.Count]; Sharpen.Collections.ToArray(VAR_ICOLLECTION<REVFILTER>, VAR_REVFILTER[]); if (VAR_REVFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_REVFILTER[][LITERAL_INT], VAR_REVFILTER[][LITERAL_INT]); } return new AndRevFilter.List(VAR_REVFILTER[]); }
public static PredictionContext METHOD_NAME(SingletonPredictionContext VAR_SINGLETONPREDICTIONCONTEXT, SingletonPredictionContext VAR_SINGLETONPREDICTIONCONTEXT, bool VAR_BOOL) { if (VAR_BOOL) { if (VAR_SINGLETONPREDICTIONCONTEXT == PredictionContext.EMPTY) return PredictionContext.EMPTY; if (VAR_SINGLETONPREDICTIONCONTEXT == PredictionContext.EMPTY) return PredictionContext.EMPTY; } else { if (VAR_SINGLETONPREDICTIONCONTEXT == EMPTY && VAR_SINGLETONPREDICTIONCONTEXT == EMPTY) return EMPTY; if (VAR_SINGLETONPREDICTIONCONTEXT == EMPTY) { int[] VAR_INT[] = { VAR_SINGLETONPREDICTIONCONTEXT.returnState, EMPTY_RETURN_STATE }; PredictionContext[] VAR_PREDICTIONCONTEXT[] = { VAR_SINGLETONPREDICTIONCONTEXT.parent, LITERAL_NULL }; PredictionContext VAR_PREDICTIONCONTEXT = new ArrayPredictionContext(VAR_PREDICTIONCONTEXT[], VAR_INT[]); return VAR_PREDICTIONCONTEXT; } if (VAR_SINGLETONPREDICTIONCONTEXT == EMPTY) { int[] VAR_INT[] = { VAR_SINGLETONPREDICTIONCONTEXT.returnState, EMPTY_RETURN_STATE }; PredictionContext[] VAR_PREDICTIONCONTEXT[] = { VAR_SINGLETONPREDICTIONCONTEXT.parent, LITERAL_NULL }; PredictionContext VAR_PREDICTIONCONTEXT = new ArrayPredictionContext(VAR_PREDICTIONCONTEXT[], VAR_INT[]); return VAR_PREDICTIONCONTEXT; } } return LITERAL_NULL; }
public virtual ListTerminologiesResponse METHOD_NAME(ListTerminologiesRequest VAR_LISTTERMINOLOGIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTerminologiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTerminologiesResponseUnmarshaller.Instance; return Invoke<ListTerminologiesResponse>(VAR_LISTTERMINOLOGIESREQUEST, VAR_VAR); }
public ModifyInstanceGroupsRequest(List<InstanceGroupModifyConfig> VAR_LIST<INSTANCEGROUPMODIFYCONFIG>) { _instanceGroups = VAR_LIST<INSTANCEGROUPMODIFYCONFIG>; }
public override string METHOD_NAME() { return LITERAL_STRING + Name + LITERAL_STRING; }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (TermsReader r in fields.Values) { if (r.index != LITERAL_NULL) { VAR_LONG += r.index.GetSizeInBytes(); VAR_LONG += RamUsageEstimator.SizeOf(r.metaBytesBlock); VAR_LONG += RamUsageEstimator.SizeOf(r.metaLongsBlock); VAR_LONG += RamUsageEstimator.SizeOf(r.skipInfo); VAR_LONG += RamUsageEstimator.SizeOf(r.statsBlock); } } return VAR_LONG; }
public static NGit.ObjectId METHOD_NAME(int[] VAR_INT[], int VAR_INT) { return new NGit.ObjectId(VAR_INT[][VAR_INT], VAR_INT[][VAR_INT + LITERAL_INT], VAR_INT[][VAR_INT + LITERAL_INT], VAR_INT[][VAR_INT + LITERAL_INT], VAR_INT[][VAR_INT + LITERAL_INT]); }
public virtual RemoveTagsFromStreamResponse METHOD_NAME(RemoveTagsFromStreamRequest VAR_REMOVETAGSFROMSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTagsFromStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTagsFromStreamResponseUnmarshaller.Instance; return Invoke<RemoveTagsFromStreamResponse>(VAR_REMOVETAGSFROMSTREAMREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); if (VAR_STRING != LITERAL_NULL) { commitUserData = VAR_STRING; } }
public virtual ModifyOptionGroupResponse METHOD_NAME(ModifyOptionGroupRequest VAR_MODIFYOPTIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyOptionGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyOptionGroupResponseUnmarshaller.Instance; return Invoke<ModifyOptionGroupResponse>(VAR_MODIFYOPTIONGROUPREQUEST, VAR_VAR); }
public virtual CreateCommentResponse METHOD_NAME(CreateCommentRequest VAR_CREATECOMMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCommentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCommentResponseUnmarshaller.Instance; return Invoke<CreateCommentResponse>(VAR_CREATECOMMENTREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); userData = VAR_STRING; }
public virtual SearchAvailablePhoneNumbersResponse METHOD_NAME(SearchAvailablePhoneNumbersRequest VAR_SEARCHAVAILABLEPHONENUMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchAvailablePhoneNumbersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchAvailablePhoneNumbersResponseUnmarshaller.Instance; return Invoke<SearchAvailablePhoneNumbersResponse>(VAR_SEARCHAVAILABLEPHONENUMBERSREQUEST, VAR_VAR); }
public SpanPositionCheckQuery(SpanQuery VAR_SPANQUERY) { this.m_match = VAR_SPANQUERY; }
public bool METHOD_NAME(EscherRecord VAR_ESCHERRECORD) { return _childRecords.Remove(VAR_ESCHERRECORD); }
public object METHOD_NAME() { return new BytesRef(bytes, Offset, Length); }
public override java.nio.ByteBuffer METHOD_NAME(long VAR_LONG) { throw new java.nio.ReadOnlyBufferException(); }
public virtual bool METHOD_NAME(E VAR_E) { lock (this) { object[] VAR_OBJECT[] = new object[elements.Length + LITERAL_INT]; System.Array.Copy(elements, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, elements.Length); VAR_OBJECT[][elements.Length] = VAR_E; elements = VAR_OBJECT[]; return true; } }
public virtual RevTree METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevTree VAR_REVTREE = (RevTree)objects.Get(VAR_ANYOBJECTID); if (VAR_REVTREE == LITERAL_NULL) { VAR_REVTREE = new RevTree(VAR_ANYOBJECTID); objects.Add(VAR_REVTREE); } return VAR_REVTREE; }
public override bool METHOD_NAME(object VAR_OBJECT) { var VAR_VAR = VAR_OBJECT as FunctionQuery; if (VAR_VAR == LITERAL_NULL) { return false; } return Boost == VAR_VAR.Boost && func.METHOD_NAME(VAR_VAR.func); }
public bool METHOD_NAME(String VAR_STRING, String VAR_STRING) { foreach (ExternalBookBlock ex in _externalBookBlocks) { SupBookRecord VAR_SUPBOOKRECORD = ex.GetExternalBookRecord(); if (VAR_SUPBOOKRECORD.IsExternalReferences && VAR_SUPBOOKRECORD.URL.Equals(VAR_STRING)) { VAR_SUPBOOKRECORD.URL = (VAR_STRING); return true; } } return false; }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_LASTPRINTED); }
public virtual MergeCommand METHOD_NAME() { return new MergeCommand(repo); }
public override string METHOD_NAME() { Edit.Type VAR_EDIT.TYPE = GetType(); return VAR_EDIT.TYPE + LITERAL_STRING + beginA + LITERAL_STRING + endA + LITERAL_STRING + beginB + LITERAL_STRING + endB + LITERAL_STRING; }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = _list.Count; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int k = LITERAL_INT; k < VAR_INT; k++) { CellRangeAddress VAR_CELLRANGEADDRESS = (CellRangeAddress)_list[k]; VAR_CELLRANGEADDRESS.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } }
public void METHOD_NAME() { throw new InvalidOperationException(LITERAL_STRING); }
public virtual NGit.Api.TagCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual DescribeReservedInstancesListingsResponse METHOD_NAME(DescribeReservedInstancesListingsRequest VAR_DESCRIBERESERVEDINSTANCESLISTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedInstancesListingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedInstancesListingsResponseUnmarshaller.Instance; return Invoke<DescribeReservedInstancesListingsResponse>(VAR_DESCRIBERESERVEDINSTANCESLISTINGSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return GetRef().METHOD_NAME(); }
public bool METHOD_NAME(int VAR_INT) { return ((VAR_INT & this._mask) == this._mask); }
public static int METHOD_NAME(String VAR_STRING) { int VAR_INT = LITERAL_INT + LITERAL_INT; VAR_INT += VAR_STRING.Length * (StringUtil.HasMultibyte(VAR_STRING) ? LITERAL_INT : LITERAL_INT); return VAR_INT; }
public IList<CharsRef> METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (dictionary.needsInputCleaning) { scratchSegment.Length = LITERAL_INT; scratchSegment.Append(VAR_CHAR[], LITERAL_INT, VAR_INT); string VAR_STRING = dictionary.CleanInput(scratchSegment.ToString(), segment); scratchBuffer = ArrayUtil.Grow(scratchBuffer, VAR_STRING.Length); VAR_INT = segment.Length; segment.CopyTo(LITERAL_INT, scratchBuffer, LITERAL_INT, VAR_INT); VAR_CHAR[] = scratchBuffer; } List<CharsRef> VAR_LIST<CHARSREF> = new List<CharsRef>(); Int32sRef VAR_INT32SREF = dictionary.LookupWord(VAR_CHAR[], LITERAL_INT, VAR_INT); if (VAR_INT32SREF != LITERAL_NULL) { for (int i = LITERAL_INT; i < VAR_INT32SREF.Length; i++) { VAR_LIST<CHARSREF>.Add(NewStem(VAR_CHAR[], VAR_INT)); } } VAR_LIST<CHARSREF>.AddRange(METHOD_NAME(VAR_CHAR[], VAR_INT, -LITERAL_INT, -LITERAL_INT, -LITERAL_INT, LITERAL_INT, true, true, false, false)); return VAR_LIST<CHARSREF>; }
public IConditionalFormattingRule METHOD_NAME(String VAR_STRING) { HSSFWorkbook VAR_HSSFWORKBOOK = (HSSFWorkbook)_sheet.Workbook; CFRuleRecord VAR_CFRULERECORD = CFRuleRecord.Create(_sheet, VAR_STRING); return new HSSFConditionalFormattingRule(VAR_HSSFWORKBOOK, VAR_CFRULERECORD); }
public Record METHOD_NAME(RecordInputStream VAR_RECORDINPUTSTREAM) { Object[] VAR_OBJECT[] = { VAR_RECORDINPUTSTREAM }; try { return (Record)_m.Invoke(LITERAL_NULL, VAR_OBJECT[]); } catch (Exception e) { throw new RecordFormatException(LITERAL_STRING, e.InnerException); } }
public virtual int METHOD_NAME(int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); Debug.Assert(VAR_INT >= LITERAL_INT && VAR_INT < Count); VAR_INT = Math.Min(VAR_INT, Count - VAR_INT); Debug.Assert(VAR_INT + VAR_INT <= VAR_LONG[].Length); for (int i = VAR_INT, o = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i, ++o) { METHOD_NAME(i, VAR_LONG[][o]); } return VAR_INT; }
public virtual long METHOD_NAME() { lock (this) return ordsCache.Sum(pair => pair.Value.METHOD_NAME()); }
public void METHOD_NAME(double VAR_DOUBLE) { WriteLong(BitConverter.DoubleToInt64Bits(VAR_DOUBLE)); }
public override string METHOD_NAME() { return LITERAL_STRING + activeBytes + LITERAL_STRING + flushBytes + LITERAL_STRING; }
public virtual ListSecurityConfigurationsResponse METHOD_NAME(ListSecurityConfigurationsRequest VAR_LISTSECURITYCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSecurityConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSecurityConfigurationsResponseUnmarshaller.Instance; return Invoke<ListSecurityConfigurationsResponse>(VAR_LISTSECURITYCONFIGURATIONSREQUEST, VAR_VAR); }
public virtual ListQualificationRequestsResponse METHOD_NAME(ListQualificationRequestsRequest VAR_LISTQUALIFICATIONREQUESTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQualificationRequestsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQualificationRequestsResponseUnmarshaller.Instance; return Invoke<ListQualificationRequestsResponse>(VAR_LISTQUALIFICATIONREQUESTSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[]) { METHOD_NAME(new string (VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length)); }
public virtual ReleaseAddressResponse METHOD_NAME(ReleaseAddressRequest VAR_RELEASEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReleaseAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReleaseAddressResponseUnmarshaller.Instance; return Invoke<ReleaseAddressResponse>(VAR_RELEASEADDRESSREQUEST, VAR_VAR); }
public static bool[] METHOD_NAME(bool[] VAR_BOOL[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_BOOL[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); bool[] VAR_BOOL[] = new bool[VAR_INT]; System.Array.Copy(VAR_BOOL[], VAR_INT, VAR_BOOL[], LITERAL_INT, VAR_INT); return VAR_BOOL[]; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = escherGroup.CreateShape(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT + VAR_INT, VAR_INT + VAR_INT)); VAR_HSSFSIMPLESHAPE.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_OVAL); VAR_HSSFSIMPLESHAPE.LineStyle = LineStyle.None; VAR_HSSFSIMPLESHAPE.SetFillColor(foreground.R, foreground.G, foreground.B); VAR_HSSFSIMPLESHAPE.SetLineStyleColor(foreground.R, foreground.G, foreground.B); VAR_HSSFSIMPLESHAPE.IsNoFill = (false); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { try { String VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); String VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); int VAR_INT = TextFunction.EvaluateIntArg(VAR_VALUEEVAL, VAR_INT, VAR_INT) - LITERAL_INT; if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return Eval(VAR_STRING, VAR_STRING, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public CreateInvalidationRequest(string VAR_STRING, InvalidationBatch VAR_INVALIDATIONBATCH) { _distributionId = VAR_STRING; _invalidationBatch = VAR_INVALIDATIONBATCH; }
public virtual CreateUsageReportSubscriptionResponse METHOD_NAME(CreateUsageReportSubscriptionRequest VAR_CREATEUSAGEREPORTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateUsageReportSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateUsageReportSubscriptionResponseUnmarshaller.Instance; return Invoke<CreateUsageReportSubscriptionResponse>(VAR_CREATEUSAGEREPORTSUBSCRIPTIONREQUEST, VAR_VAR); }
public static string METHOD_NAME(String VAR_STRING) { return VAR_STRING; }
public virtual GetDetectorsResponse METHOD_NAME(GetDetectorsRequest VAR_GETDETECTORSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDetectorsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDetectorsResponseUnmarshaller.Instance; return Invoke<GetDetectorsResponse>(VAR_GETDETECTORSREQUEST, VAR_VAR); }
public static string METHOD_NAME(double VAR_DOUBLE) { return VAR_DOUBLE.ToString(CultureInfo.InvariantCulture); }
public void METHOD_NAME(String VAR_STRING, String VAR_STRING) { FileSharingRecord VAR_FILESHARINGRECORD = FileSharing; WriteAccessRecord VAR_WRITEACCESSRECORD = WriteAccess; VAR_FILESHARINGRECORD.ReadOnly = ((short)LITERAL_INT); VAR_FILESHARINGRECORD.Password = (FileSharingRecord.HashPassword(VAR_STRING)); VAR_FILESHARINGRECORD.Username = (VAR_STRING); VAR_WRITEACCESSRECORD.Username = (VAR_STRING); }
public virtual SystemProcess METHOD_NAME(string VAR_STRING, int VAR_INT) { string VAR_STRING = SystemReader.GetInstance().Getenv(LITERAL_STRING); bool VAR_BOOL = VAR_STRING.ToLower().Contains(LITERAL_STRING); IList<string> VAR_ILIST<STRING> = new AList<string>(); VAR_ILIST<STRING>.AddItem(VAR_STRING); if (VAR_BOOL && !VAR_STRING.ToLower().Contains(LITERAL_STRING)) { VAR_ILIST<STRING>.AddItem(LITERAL_STRING); } if (LITERAL_INT < this._enclosing.GetURI().GetPort()) { VAR_ILIST<STRING>.AddItem(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); VAR_ILIST<STRING>.AddItem(this._enclosing.GetURI().GetPort().ToString()); } if (this._enclosing.GetURI().GetUser() != LITERAL_NULL) { VAR_ILIST<STRING>.AddItem(this._enclosing.GetURI().GetUser() + LITERAL_STRING + this._enclosing.GetURI().GetHost()); } else { VAR_ILIST<STRING>.AddItem(this._enclosing.GetURI().GetHost()); } VAR_ILIST<STRING>.AddItem(VAR_STRING); ProcessStartInfo VAR_PROCESSSTARTINFO = new ProcessStartInfo(); VAR_PROCESSSTARTINFO.SetCommand(VAR_ILIST<STRING>); if (this._enclosing.local.Directory != LITERAL_NULL) { VAR_PROCESSSTARTINFO.EnvironmentVariables.Put(Constants.GIT_DIR_KEY, this._enclosing.local.Directory.GetPath()); } try { return VAR_PROCESSSTARTINFO.Start(); } catch (IOException err) { throw new TransportException(err.Message, err); } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.Write(recordData); }
public virtual UpdateFleetCapacityResponse METHOD_NAME(UpdateFleetCapacityRequest VAR_UPDATEFLEETCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFleetCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFleetCapacityResponseUnmarshaller.Instance; return Invoke<UpdateFleetCapacityResponse>(VAR_UPDATEFLEETCAPACITYREQUEST, VAR_VAR); }
public virtual CreateDirectConnectGatewayAssociationResponse METHOD_NAME(CreateDirectConnectGatewayAssociationRequest VAR_CREATEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDirectConnectGatewayAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDirectConnectGatewayAssociationResponseUnmarshaller.Instance; return Invoke<CreateDirectConnectGatewayAssociationResponse>(VAR_CREATEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { if (words == LITERAL_NULL) { return VAR_TOKENSTREAM; } else { TokenStream VAR_TOKENSTREAM = new KeepWordFilter(m_luceneMatchVersion, enablePositionIncrements, VAR_TOKENSTREAM, words); return VAR_TOKENSTREAM; } }
public int METHOD_NAME() { return endA; }
public virtual string METHOD_NAME() { return strictHostKeyChecking; }
public Lift(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_precision); }
public virtual GetAuthorizerResponse METHOD_NAME(GetAuthorizerRequest VAR_GETAUTHORIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAuthorizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAuthorizerResponseUnmarshaller.Instance; return Invoke<GetAuthorizerResponse>(VAR_GETAUTHORIZERREQUEST, VAR_VAR); }
public StringCharacterIterator(string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT) { @string = VAR_STRING; if (VAR_INT < LITERAL_INT || VAR_INT > @string.Length || VAR_INT > VAR_INT || VAR_INT < VAR_INT || VAR_INT > VAR_INT) { throw new System.ArgumentException(); } this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; offset = VAR_INT; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Constants.TypeString(GetType())); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Name); if (WantWrite()) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (IsReuseAsIs()) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (IsDoNotDelta()) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (IsEdge()) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (GetDeltaDepth() > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING + GetDeltaDepth()); } if (IsDeltaRepresentation()) { if (GetDeltaBase() != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING + GetDeltaBase().Name); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING + GetDeltaBaseId().Name); } } if (IsWritten()) { VAR_STRINGBUILDER.Append(LITERAL_STRING + GetOffset()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual GetMailboxDetailsResponse METHOD_NAME(GetMailboxDetailsRequest VAR_GETMAILBOXDETAILSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMailboxDetailsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMailboxDetailsResponseUnmarshaller.Instance; return Invoke<GetMailboxDetailsResponse>(VAR_GETMAILBOXDETAILSREQUEST, VAR_VAR); }
public virtual java.nio.CharBuffer METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE != LITERAL_NULL) { return put(VAR_JAVA.LANG.CHARSEQUENCE.ToString()); } return put(LITERAL_STRING); }
public RegisterFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public static void METHOD_NAME(double VAR_DOUBLE) { if (Double.IsNaN(VAR_DOUBLE) || Double.IsInfinity(VAR_DOUBLE)) { throw new EvaluationException(ErrorEval.NUM_ERROR); } }
public virtual PutInvitationConfigurationResponse METHOD_NAME(PutInvitationConfigurationRequest VAR_PUTINVITATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutInvitationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutInvitationConfigurationResponseUnmarshaller.Instance; return Invoke<PutInvitationConfigurationResponse>(VAR_PUTINVITATIONCONFIGURATIONREQUEST, VAR_VAR); }
public override IQueryNode METHOD_NAME(IQueryNode VAR_IQUERYNODE) { Operator? VAR_OPERATOR? = GetQueryConfigHandler().Get(ConfigurationKeys.DEFAULT_OPERATOR); if (VAR_OPERATOR? == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } this.usingAnd = Operator.AND == VAR_OPERATOR?; return base.METHOD_NAME(VAR_IQUERYNODE); }
public virtual void METHOD_NAME(BytesRef VAR_BYTESREF, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= buckets) { throw new ArgumentException(LITERAL_STRING + buckets + LITERAL_STRING + VAR_INT); } if (scratch.Bytes.Length < VAR_BYTESREF.Length + LITERAL_INT) { scratch.Grow(VAR_BYTESREF.Length + LITERAL_INT); } scratch.Length = LITERAL_INT; scratch.Bytes[LITERAL_INT] = (byte)VAR_INT; scratch.Append(VAR_BYTESREF); sorter.METHOD_NAME(scratch); }
public virtual DescribeWorkspaceBundlesResponse METHOD_NAME() { var VAR_VAR = new DescribeWorkspaceBundlesRequest(); return METHOD_NAME(VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, false, java.nio.charset.Charsets.UTF_8); }
public virtual void METHOD_NAME(DateTime VAR_DATETIME) { this.VAR_DATETIME = VAR_DATETIME; expireAgeMillis = -LITERAL_INT; }
public int METHOD_NAME() { Debug.Assert(count > LITERAL_INT, Thread.CurrentThread.Name + LITERAL_STRING + fileName + LITERAL_STRING); return --count; }
public override IList<WeightedFragInfo> METHOD_NAME(IList<WeightedFragInfo> VAR_ILIST<WEIGHTEDFRAGINFO>) { return VAR_ILIST<WEIGHTEDFRAGINFO>; }
public virtual CreateInstancesFromSnapshotResponse METHOD_NAME(CreateInstancesFromSnapshotRequest VAR_CREATEINSTANCESFROMSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInstancesFromSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInstancesFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateInstancesFromSnapshotResponse>(VAR_CREATEINSTANCESFROMSNAPSHOTREQUEST, VAR_VAR); }
public virtual java.util.Comparator<E> METHOD_NAME() { return backingMap.METHOD_NAME(); }
public virtual bool METHOD_NAME() { return valueSecure; }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_SHORT[].Length < VAR_INT) { short[] VAR_SHORT[] = new short[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT16)]; Array.Copy(VAR_SHORT[], LITERAL_INT, VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); return VAR_SHORT[]; } else { return VAR_SHORT[]; } }
public override ObjectId METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { return Delegate().METHOD_NAME(VAR_INT, VAR_BYTE[]); }
public virtual CreateDomainNameResponse METHOD_NAME(CreateDomainNameRequest VAR_CREATEDOMAINNAMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDomainNameRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDomainNameResponseUnmarshaller.Instance; return Invoke<CreateDomainNameResponse>(VAR_CREATEDOMAINNAMEREQUEST, VAR_VAR); }
public virtual DeleteAddressBookResponse METHOD_NAME(DeleteAddressBookRequest VAR_DELETEADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAddressBookResponseUnmarshaller.Instance; return Invoke<DeleteAddressBookResponse>(VAR_DELETEADDRESSBOOKREQUEST, VAR_VAR); }
public void METHOD_NAME(UDFFinder VAR_UDFFINDER) { AggregatingUDFFinder VAR_AGGREGATINGUDFFINDER = (AggregatingUDFFinder)_udfFinder; VAR_AGGREGATINGUDFFINDER.Add(VAR_UDFFINDER); }
public virtual SearchUsersResponse METHOD_NAME(SearchUsersRequest VAR_SEARCHUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchUsersResponseUnmarshaller.Instance; return Invoke<SearchUsersResponse>(VAR_SEARCHUSERSREQUEST, VAR_VAR); }
public string METHOD_NAME() { return privateKeySecret; }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { if (mGarbage) { gc(); } mValues[VAR_INT] = VAR_E; }
public RefErrorPtg() { field_1_reserved = LITERAL_INT; }
public bool METHOD_NAME(int VAR_INT) { return ((flags & VAR_INT) != LITERAL_INT); }
public virtual UpdateAccountSendingEnabledResponse METHOD_NAME(UpdateAccountSendingEnabledRequest VAR_UPDATEACCOUNTSENDINGENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAccountSendingEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAccountSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateAccountSendingEnabledResponse>(VAR_UPDATEACCOUNTSENDINGENABLEDREQUEST, VAR_VAR); }
public AppCookieStickinessPolicy(string VAR_STRING, string VAR_STRING) { _policyName = VAR_STRING; _cookieName = VAR_STRING; }
public virtual GetAccountBalanceResponse METHOD_NAME(GetAccountBalanceRequest VAR_GETACCOUNTBALANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAccountBalanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAccountBalanceResponseUnmarshaller.Instance; return Invoke<GetAccountBalanceResponse>(VAR_GETACCOUNTBALANCEREQUEST, VAR_VAR); }
public virtual DescribeConversionTasksResponse METHOD_NAME(DescribeConversionTasksRequest VAR_DESCRIBECONVERSIONTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConversionTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConversionTasksResponseUnmarshaller.Instance; return Invoke<DescribeConversionTasksResponse>(VAR_DESCRIBECONVERSIONTASKSREQUEST, VAR_VAR); }
public virtual DescribeImagesResponse METHOD_NAME() { return METHOD_NAME(new DescribeImagesRequest()); }
public override void METHOD_NAME() { delegate1.METHOD_NAME(); }
public virtual ListSignalingChannelsResponse METHOD_NAME(ListSignalingChannelsRequest VAR_LISTSIGNALINGCHANNELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSignalingChannelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSignalingChannelsResponseUnmarshaller.Instance; return Invoke<ListSignalingChannelsResponse>(VAR_LISTSIGNALINGCHANNELSREQUEST, VAR_VAR); }
public MergeFacesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DetectTextResponse METHOD_NAME(DetectTextRequest VAR_DETECTTEXTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectTextRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectTextResponseUnmarshaller.Instance; return Invoke<DetectTextResponse>(VAR_DETECTTEXTREQUEST, VAR_VAR); }
public virtual java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[].Length); }
public virtual long METHOD_NAME() { return DecodeTS(P_CTIME); }
public override TreeFilter METHOD_NAME() { return new AndTreeFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public override java.nio.ByteBuffer METHOD_NAME(char VAR_CHAR) { int VAR_INT = _position + libcore.io.SizeOf.CHAR; if (VAR_INT > _limit) { throw new java.nio.BufferOverflowException(); } libcore.io.Memory.pokeShort(backingArray, offset + _position, (short)VAR_CHAR, _order); _position = VAR_INT; return this; }
public override string METHOD_NAME() { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(LITERAL_INT); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(left); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(top); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(right); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(bottom); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); return VAR_JAVA.LANG.STRINGBUILDER.METHOD_NAME(); }
public static java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[]) { return METHOD_NAME(VAR_LONG[], LITERAL_INT, VAR_LONG[].Length); }
public object METHOD_NAME() { return new CharsRef(chars, Offset, Length); }
public SpanNearClauseFactory(IndexReader VAR_INDEXREADER, string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { this.VAR_INDEXREADER = VAR_INDEXREADER; this.VAR_STRING = VAR_STRING; this.weightBySpanQuery = new JCG.Dictionary<SpanQuery, float>(); this.VAR_BASICQUERYFACTORY = VAR_BASICQUERYFACTORY; }
public override Object METHOD_NAME() { BeginRecord VAR_BEGINRECORD = new BeginRecord(); return VAR_BEGINRECORD; }
public int METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public virtual DescribeGameSessionQueuesResponse METHOD_NAME(DescribeGameSessionQueuesRequest VAR_DESCRIBEGAMESESSIONQUEUESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameSessionQueuesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameSessionQueuesResponseUnmarshaller.Instance; return Invoke<DescribeGameSessionQueuesResponse>(VAR_DESCRIBEGAMESESSIONQUEUESREQUEST, VAR_VAR); }
public virtual SubmitAttachmentStateChangesResponse METHOD_NAME(SubmitAttachmentStateChangesRequest VAR_SUBMITATTACHMENTSTATECHANGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SubmitAttachmentStateChangesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SubmitAttachmentStateChangesResponseUnmarshaller.Instance; return Invoke<SubmitAttachmentStateChangesResponse>(VAR_SUBMITATTACHMENTSTATECHANGESREQUEST, VAR_VAR); }
public UnicodeString METHOD_NAME(int VAR_INT) { return (UnicodeString)field_3_strings[VAR_INT]; }
public BigInteger METHOD_NAME() { return _significand; }
public void METHOD_NAME(AbstractEscherHolderRecord VAR_ABSTRACTESCHERHOLDERRECORD) { rawDataContainer.Concatenate(VAR_ABSTRACTESCHERHOLDERRECORD.RawData); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_BYTE[].Length < VAR_INT) { byte[] VAR_BYTE[] = new byte[Oversize(VAR_INT, LITERAL_INT)]; Array.Copy(VAR_BYTE[], LITERAL_INT, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); return VAR_BYTE[]; } else { return VAR_BYTE[]; } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } FlushInfo VAR_FLUSHINFO = (FlushInfo)VAR_OBJECT; if (EstimatedSegmentSize != VAR_FLUSHINFO.EstimatedSegmentSize) { return false; } if (NumDocs != VAR_FLUSHINFO.NumDocs) { return false; } return true; }
public virtual void METHOD_NAME(int[] VAR_INT[], int VAR_INT) { VAR_INT[][VAR_INT] = w1; VAR_INT[][VAR_INT + LITERAL_INT] = w2; VAR_INT[][VAR_INT + LITERAL_INT] = w3; VAR_INT[][VAR_INT + LITERAL_INT] = w4; VAR_INT[][VAR_INT + LITERAL_INT] = w5; }
public virtual ReadPipelineResponse METHOD_NAME(ReadPipelineRequest VAR_READPIPELINEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReadPipelineRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReadPipelineResponseUnmarshaller.Instance; return Invoke<ReadPipelineResponse>(VAR_READPIPELINEREQUEST, VAR_VAR); }
public BoostQueryNode(IQueryNode VAR_IQUERYNODE, float VAR_FLOAT) { if (VAR_IQUERYNODE == LITERAL_NULL) { throw new QueryNodeError(new Message(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, LITERAL_STRING, LITERAL_STRING)); } this.VAR_FLOAT = VAR_FLOAT; IsLeaf = false; Allocate(); Add(VAR_IQUERYNODE); }
public virtual void METHOD_NAME(DiffAlgorithm VAR_DIFFALGORITHM) { fallback = VAR_DIFFALGORITHM; }
public void METHOD_NAME(Transition VAR_TRANSITION) { Find(VAR_TRANSITION.min).starts.METHOD_NAME(VAR_TRANSITION); Find(LITERAL_INT + VAR_TRANSITION.max).ends.METHOD_NAME(VAR_TRANSITION); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.Type = type; }
public virtual UpgradePublishedSchemaResponse METHOD_NAME(UpgradePublishedSchemaRequest VAR_UPGRADEPUBLISHEDSCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpgradePublishedSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpgradePublishedSchemaResponseUnmarshaller.Instance; return Invoke<UpgradePublishedSchemaResponse>(VAR_UPGRADEPUBLISHEDSCHEMAREQUEST, VAR_VAR); }
public int METHOD_NAME() { int VAR_INT = _le.ReadUShort(); _rc4.SkipTwoBytes(); _rc4.StartRecord(VAR_INT); return VAR_INT; }
public virtual CreateImageBuilderStreamingURLResponse METHOD_NAME(CreateImageBuilderStreamingURLRequest VAR_CREATEIMAGEBUILDERSTREAMINGURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateImageBuilderStreamingURLRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateImageBuilderStreamingURLResponseUnmarshaller.Instance; return Invoke<CreateImageBuilderStreamingURLResponse>(VAR_CREATEIMAGEBUILDERSTREAMINGURLREQUEST, VAR_VAR); }
public SheetIdentifier(String VAR_STRING, NameIdentifier VAR_NAMEIDENTIFIER) { _bookName = VAR_STRING; _sheetIdentifier = VAR_NAMEIDENTIFIER; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is PortugueseStemmer; }
public override Object METHOD_NAME() { return new PasswordRecord(field_1_password); }
public DescribeTableRequest(string VAR_STRING) { _tableName = VAR_STRING; }
public virtual ModifyCacheParameterGroupResponse METHOD_NAME(ModifyCacheParameterGroupRequest VAR_MODIFYCACHEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyCacheParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyCacheParameterGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheParameterGroupResponse>(VAR_MODIFYCACHEPARAMETERGROUPREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT, E VAR_E) { java.util.ListIterator<E> VAR_JAVA.UTIL.LISTITERATOR<E> = listIterator(VAR_INT); if (!VAR_JAVA.UTIL.LISTITERATOR<E>.hasNext()) { throw new System.IndexOutOfRangeException(); } E VAR_E = VAR_JAVA.UTIL.LISTITERATOR<E>.next(); VAR_JAVA.UTIL.LISTITERATOR<E>.METHOD_NAME(VAR_E); return VAR_E; }
public override String METHOD_NAME() { return NumberToTextConverter.ToText(Value); }
public virtual ListBootstrapActionsResponse METHOD_NAME(ListBootstrapActionsRequest VAR_LISTBOOTSTRAPACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBootstrapActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBootstrapActionsResponseUnmarshaller.Instance; return Invoke<ListBootstrapActionsResponse>(VAR_LISTBOOTSTRAPACTIONSREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_wStyle); VAR_ILITTLEENDIANOUTPUT.WriteShort(_cLine); VAR_ILITTLEENDIANOUTPUT.WriteShort(_dxMin); StringUtil.WriteUnicodeString(VAR_ILITTLEENDIANOUTPUT, _str); VAR_ILITTLEENDIANOUTPUT.WriteByte(_unused); }
public SynonymFilter(TokenStream VAR_TOKENSTREAM, SynonymMap VAR_SYNONYMMAP, bool VAR_BOOL) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); posIncrAtt = AddAttribute<IPositionIncrementAttribute>(); posLenAtt = AddAttribute<IPositionLengthAttribute>(); typeAtt = AddAttribute<ITypeAttribute>(); offsetAtt = AddAttribute<IOffsetAttribute>(); this.VAR_SYNONYMMAP = VAR_SYNONYMMAP; this.VAR_BOOL = VAR_BOOL; this.fst = VAR_SYNONYMMAP.Fst; if (fst == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } this.fstReader = fst.GetBytesReader(); rollBufferSize = LITERAL_INT + VAR_SYNONYMMAP.MaxHorizontalContext; futureInputs = new PendingInput[rollBufferSize]; futureOutputs = new PendingOutputs[rollBufferSize]; for (int pos = LITERAL_INT; pos < rollBufferSize; pos++) { futureInputs[pos] = new PendingInput(); futureOutputs[pos] = new PendingOutputs(); } scratchArc = new FST.Arc<BytesRef>(); }
public virtual CreateApiResponse METHOD_NAME(CreateApiRequest VAR_CREATEAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateApiResponseUnmarshaller.Instance; return Invoke<CreateApiResponse>(VAR_CREATEAPIREQUEST, VAR_VAR); }
public IndexOutput METHOD_NAME(string VAR_STRING, IOContext VAR_IOCONTEXT)throws IOException { ensureOpen() ; if (VAR_IOCONTEXT.VAR_IOCONTEXT !=Context.MERGE ||VAR_IOCONTEXT.mergeInfo.estimatedMergeBytes<minBytesDirect ) { return @delegate.METHOD_NAME(VAR_STRING, VAR_IOCONTEXT) ; } else { ensureCanWrite(VAR_STRING); return new NativeUnixIndexOutput(new File(Directory, VAR_STRING), mergeBufferSize); } }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public virtual UpdateUserSettingsResponse METHOD_NAME(UpdateUserSettingsRequest VAR_UPDATEUSERSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserSettingsResponseUnmarshaller.Instance; return Invoke<UpdateUserSettingsResponse>(VAR_UPDATEUSERSETTINGSREQUEST, VAR_VAR); }
public virtual DeleteDiskSnapshotResponse METHOD_NAME(DeleteDiskSnapshotRequest VAR_DELETEDISKSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDiskSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDiskSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteDiskSnapshotResponse>(VAR_DELETEDISKSNAPSHOTREQUEST, VAR_VAR); }
public ColumnInfoRecord() { this.ColumnWidth = LITERAL_INT; _options = LITERAL_INT; _xf_index = LITERAL_INT; field_6_reserved = LITERAL_INT; }
public sealed override long METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT, libcore.io.SizeOf.LONG); return libcore.io.Memory.peekLong(backingArray, offset + VAR_INT, _order); }
public virtual DeleteKnownHostKeysResponse METHOD_NAME(DeleteKnownHostKeysRequest VAR_DELETEKNOWNHOSTKEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteKnownHostKeysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteKnownHostKeysResponseUnmarshaller.Instance; return Invoke<DeleteKnownHostKeysResponse>(VAR_DELETEKNOWNHOSTKEYSREQUEST, VAR_VAR); }
public DeleteSigningCertificateRequest(string VAR_STRING) { _certificateId = VAR_STRING; }
public virtual StopProcessingJobResponse METHOD_NAME(StopProcessingJobRequest VAR_STOPPROCESSINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopProcessingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopProcessingJobResponseUnmarshaller.Instance; return Invoke<StopProcessingJobResponse>(VAR_STOPPROCESSINGJOBREQUEST, VAR_VAR); }
public virtual TermsEnum METHOD_NAME(Terms VAR_TERMS) { switch (Type) { case Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.NONE: return TermsEnum.EMPTY; case Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.ALL: return VAR_TERMS.GetIterator(LITERAL_NULL); case Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.SINGLE: return new SingleTermsEnum(VAR_TERMS.GetIterator(LITERAL_NULL), Term); case Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.PREFIX: return new PrefixTermsEnum(VAR_TERMS.GetIterator(LITERAL_NULL), Term); case Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.NORMAL: return VAR_TERMS.Intersect(this, LITERAL_NULL); default: throw new Exception(LITERAL_STRING); } }
public void METHOD_NAME() { costs = ArrayUtil.METHOD_NAME(costs, LITERAL_INT + count); lastRightID = ArrayUtil.METHOD_NAME(lastRightID, LITERAL_INT + count); backPos = ArrayUtil.METHOD_NAME(backPos, LITERAL_INT + count); backIndex = ArrayUtil.METHOD_NAME(backIndex, LITERAL_INT + count); backID = ArrayUtil.METHOD_NAME(backID, LITERAL_INT + count); JapaneseTokenizerType[] VAR_JAPANESETOKENIZERTYPE[] = new JapaneseTokenizerType[backID.Length]; System.Array.Copy(backType, LITERAL_INT, VAR_JAPANESETOKENIZERTYPE[], LITERAL_INT, backType.Length); backType = VAR_JAPANESETOKENIZERTYPE[]; }
public int METHOD_NAME(int VAR_INT) { if (VAR_INT >= _limit) { throw new IndexOutOfRangeException(VAR_INT + LITERAL_STRING + _limit); } return _array[VAR_INT]; }
public override java.nio.LongBuffer METHOD_NAME() { return new java.nio.ReadWriteLongArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual ListProblemsResponse METHOD_NAME(ListProblemsRequest VAR_LISTPROBLEMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProblemsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProblemsResponseUnmarshaller.Instance; return Invoke<ListProblemsResponse>(VAR_LISTPROBLEMSREQUEST, VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, bool VAR_BOOL) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = -LITERAL_INT * (VAR_DOUBLE + VAR_DOUBLE) / VAR_DOUBLE; } else { double VAR_DOUBLE = VAR_DOUBLE + LITERAL_INT; VAR_DOUBLE = (VAR_DOUBLE + VAR_DOUBLE * Math.Pow(VAR_DOUBLE, VAR_DOUBLE)) * VAR_DOUBLE / ((VAR_BOOL ? VAR_DOUBLE : LITERAL_INT) * (LITERAL_INT - Math.Pow(VAR_DOUBLE, VAR_DOUBLE))); } return VAR_DOUBLE; }
public override Object METHOD_NAME() { PrintGridlinesRecord VAR_PRINTGRIDLINESRECORD = new PrintGridlinesRecord(); VAR_PRINTGRIDLINESRECORD.field_1_print_gridlines = field_1_print_gridlines; return VAR_PRINTGRIDLINESRECORD; }
public NPOI.SS.UserModel.ICellStyle METHOD_NAME(int VAR_INT) { short VAR_SHORT = _sheet.GetXFIndexForColAt((short)VAR_INT); if (VAR_SHORT == LITERAL_INT) { return LITERAL_NULL; } ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD = book.GetExFormatAt(VAR_SHORT); return new HSSFCellStyle(VAR_SHORT, VAR_EXTENDEDFORMATRECORD, book); }
public virtual Search.Query METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { Search.Query VAR_SEARCH.QUERY = MakeLuceneQueryFieldNoBoost(VAR_STRING, VAR_BASICQUERYFACTORY); if (IsWeighted) { VAR_SEARCH.QUERY.Boost = (Weight * VAR_SEARCH.QUERY.Boost); } return VAR_SEARCH.QUERY; }
public virtual double METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > MAX_POINTS) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + MAX_POINTS + LITERAL_STRING); } if (VAR_INT > numPoints) { return (numPoints * pAt[(int)numPoints]) / VAR_INT; } return pAt[VAR_INT]; }
public DescribeEngineDefaultParametersRequest(string VAR_STRING) { _dbParameterGroupFamily = VAR_STRING; }
public virtual DeleteClientCertificateResponse METHOD_NAME(DeleteClientCertificateRequest VAR_DELETECLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClientCertificateResponseUnmarshaller.Instance; return Invoke<DeleteClientCertificateResponse>(VAR_DELETECLIENTCERTIFICATEREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.CHARBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.CHARBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.CHARBUFFER._position; char VAR_CHAR; char VAR_CHAR; while (VAR_INT > LITERAL_INT) { VAR_CHAR = get(VAR_INT); VAR_CHAR = VAR_JAVA.NIO.CHARBUFFER.get(VAR_INT); if (VAR_CHAR != VAR_CHAR) { return VAR_CHAR < VAR_CHAR ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.CHARBUFFER.remaining(); }
public int METHOD_NAME() { return _in.METHOD_NAME(); }
public virtual SendBounceResponse METHOD_NAME(SendBounceRequest VAR_SENDBOUNCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendBounceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendBounceResponseUnmarshaller.Instance; return Invoke<SendBounceResponse>(VAR_SENDBOUNCEREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } if (VAR_DOUBLE < LITERAL_INT || VAR_DOUBLE > LITERAL_INT) { return ErrorEval.NUM_ERROR; } double VAR_DOUBLE; try { double[] VAR_DOUBLE[] = NPOI.SS.Formula.Functions.AggregateFunction.ValueCollector.CollectValues(VAR_VALUEEVAL); int VAR_INT = VAR_DOUBLE[].Length; if (VAR_INT == LITERAL_INT || VAR_INT > LITERAL_INT) { return ErrorEval.NUM_ERROR; } double VAR_DOUBLE = (VAR_INT - LITERAL_INT) * VAR_DOUBLE + LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = StatsLib.kthSmallest(VAR_DOUBLE[], LITERAL_INT); } else if (VAR_DOUBLE == VAR_INT) { VAR_DOUBLE = StatsLib.kthLargest(VAR_DOUBLE[], LITERAL_INT); } else { int VAR_INT = (int)VAR_DOUBLE; double VAR_DOUBLE = VAR_DOUBLE - VAR_INT; VAR_DOUBLE = StatsLib.kthSmallest(VAR_DOUBLE[], VAR_INT) + VAR_DOUBLE * (StatsLib.kthSmallest(VAR_DOUBLE[], VAR_INT + LITERAL_INT) - StatsLib.kthSmallest(VAR_DOUBLE[], VAR_INT)); } NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public int METHOD_NAME(int VAR_INT) { UnicodeString.FormatRun VAR_UNICODESTRING.FORMATRUN = _string.GetFormatRun(VAR_INT); return VAR_UNICODESTRING.FORMATRUN.CharacterPos; }
public virtual void METHOD_NAME(MutableObjectId VAR_MUTABLEOBJECTID) { VAR_MUTABLEOBJECTID.FromRaw(IdBuffer, IdOffset); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_FLOAT[].Length < VAR_INT) { float[] VAR_FLOAT[] = new float[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_SINGLE)]; Array.Copy(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); return VAR_FLOAT[]; } else { return VAR_FLOAT[]; } }
public virtual string METHOD_NAME(string VAR_STRING, string VAR_STRING) { string[] VAR_STRING[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_STRING[] = (string[])VAR_OBJECT; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_STRING; } if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return VAR_STRING; } else if (VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT || VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT) { return VAR_STRING; } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_STRING[] = PropToStringArray(VAR_STRING); valByRound[VAR_STRING] = VAR_STRING[]; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; }
public virtual GroupingSearch METHOD_NAME(int VAR_INT, bool VAR_BOOL) { this.VAR_INT = VAR_INT; this.maxCacheRAMMB = LITERAL_NULL; this.VAR_BOOL = VAR_BOOL; return this; }
public virtual bool METHOD_NAME(IList<TermInfo> VAR_ILIST<TERMINFO>) { if (!terminal) return false; if (VAR_ILIST<TERMINFO>.Count == LITERAL_INT) return true; int VAR_INT = VAR_ILIST<TERMINFO>[LITERAL_INT].Position; for (int i = LITERAL_INT; i < VAR_ILIST<TERMINFO>.Count; i++) { int VAR_INT = VAR_ILIST<TERMINFO>[i].Position; if (Math.Abs(VAR_INT - VAR_INT - LITERAL_INT) > slop) return false; VAR_INT = VAR_INT; } return true; }
public virtual StartWorkflowExecutionResponse METHOD_NAME(StartWorkflowExecutionRequest VAR_STARTWORKFLOWEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartWorkflowExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartWorkflowExecutionResponseUnmarshaller.Instance; return Invoke<StartWorkflowExecutionResponse>(VAR_STARTWORKFLOWEXECUTIONREQUEST, VAR_VAR); }
public virtual char[] METHOD_NAME() { GoNext(); return outerInstance.keys[lastPos]; }
public virtual ContainsResult METHOD_NAME(BytesRef VAR_BYTESREF) { var VAR_VAR = _hashFunction.Hash(VAR_BYTESREF); if (VAR_VAR < LITERAL_INT) { VAR_VAR = VAR_VAR * -LITERAL_INT; } return MayContainValue(VAR_VAR); }
public virtual GetMethodResponseResponse METHOD_NAME(GetMethodResponseRequest VAR_GETMETHODRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMethodResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMethodResponseResponseUnmarshaller.Instance; return Invoke<GetMethodResponseResponse>(VAR_GETMETHODRESPONSEREQUEST, VAR_VAR); }
public void METHOD_NAME(bool VAR_BOOL) { _value = VAR_BOOL ? LITERAL_INT : LITERAL_INT; _isError = false; }
public virtual E METHOD_NAME(int VAR_INT) { lock (this) { if (VAR_INT < elementCount) { return (E)elementData[VAR_INT]; } throw arrayIndexOutOfBoundsException(VAR_INT, elementCount); } }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override Object METHOD_NAME() { return new IterationRecord(Iteration); }
public override bool METHOD_NAME() { return a.METHOD_NAME(); }
public virtual UpdateTrafficPolicyCommentResponse METHOD_NAME(UpdateTrafficPolicyCommentRequest VAR_UPDATETRAFFICPOLICYCOMMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTrafficPolicyCommentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTrafficPolicyCommentResponseUnmarshaller.Instance; return Invoke<UpdateTrafficPolicyCommentResponse>(VAR_UPDATETRAFFICPOLICYCOMMENTREQUEST, VAR_VAR); }
public virtual UpdatePrimaryEmailAddressResponse METHOD_NAME(UpdatePrimaryEmailAddressRequest VAR_UPDATEPRIMARYEMAILADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePrimaryEmailAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePrimaryEmailAddressResponseUnmarshaller.Instance; return Invoke<UpdatePrimaryEmailAddressResponse>(VAR_UPDATEPRIMARYEMAILADDRESSREQUEST, VAR_VAR); }
public static java.util.regex.Pattern METHOD_NAME(string VAR_STRING) { return new java.util.regex.Pattern(VAR_STRING, LITERAL_INT); }
public static int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = unchecked((int)(LITERAL_INT)); int VAR_INT = unchecked((int)(LITERAL_INT)); int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; int VAR_INT = unchecked((int)(LITERAL_INT)); int VAR_INT = VAR_INT; VAR_INT = VAR_INT * VAR_INT; VAR_INT = (VAR_INT << VAR_INT) | ((int)(((uint)VAR_INT) >> (LITERAL_INT - VAR_INT))); VAR_INT = VAR_INT * VAR_INT; VAR_INT = VAR_INT ^ VAR_INT; VAR_INT = (VAR_INT << VAR_INT) | ((int)(((uint)VAR_INT) >> (LITERAL_INT - VAR_INT))); VAR_INT = VAR_INT * VAR_INT + VAR_INT; return VAR_INT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(HorizontalHold); VAR_ILITTLEENDIANOUTPUT.WriteShort(VerticalHold); VAR_ILITTLEENDIANOUTPUT.WriteShort(Width); VAR_ILITTLEENDIANOUTPUT.WriteShort(Height); VAR_ILITTLEENDIANOUTPUT.WriteShort(Options); VAR_ILITTLEENDIANOUTPUT.WriteShort(ActiveSheetIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstVisibleTab); VAR_ILITTLEENDIANOUTPUT.WriteShort(NumSelectedTabs); VAR_ILITTLEENDIANOUTPUT.WriteShort(TabWidthRatio); }
protected internal override bool METHOD_NAME(ShardRef VAR_SHARDREF, ShardRef VAR_SHARDREF) { Debug.Assert(VAR_SHARDREF != VAR_SHARDREF); FieldDoc VAR_FIELDDOC = (FieldDoc)shardHits[VAR_SHARDREF.ShardIndex][VAR_SHARDREF.HitIndex]; FieldDoc VAR_FIELDDOC = (FieldDoc)shardHits[VAR_SHARDREF.ShardIndex][VAR_SHARDREF.HitIndex]; for (int compIDX = LITERAL_INT; compIDX < comparers.Length; compIDX++) { FieldComparer VAR_FIELDCOMPARER = comparers[compIDX]; int VAR_INT = reverseMul[compIDX] * VAR_FIELDCOMPARER.CompareValues(VAR_FIELDDOC.Fields[compIDX], VAR_FIELDDOC.Fields[compIDX]); if (VAR_INT != LITERAL_INT) { return VAR_INT < LITERAL_INT; } } if (VAR_SHARDREF.ShardIndex < VAR_SHARDREF.ShardIndex) { return true; } else if (VAR_SHARDREF.ShardIndex > VAR_SHARDREF.ShardIndex) { return false; } else { Debug.Assert(VAR_SHARDREF.HitIndex != VAR_SHARDREF.HitIndex); return VAR_SHARDREF.HitIndex < VAR_SHARDREF.HitIndex; } }
public static void METHOD_NAME(BytesRef VAR_BYTESREF, CharsRef VAR_CHARSREF) { METHOD_NAME(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Length, VAR_CHARSREF); }
public override Trie METHOD_NAME(Trie VAR_TRIE) { IList<string> VAR_ILIST<STRING> = VAR_TRIE.cmds; IList<Row> VAR_ILIST<ROW> = new List<Row>(); IList<Row> VAR_ILIST<ROW> = VAR_TRIE.VAR_ILIST<ROW>; int[] VAR_INT[] = new int[VAR_ILIST<ROW>.Count]; Arrays.Fill(VAR_INT[], LITERAL_INT); for (int j = VAR_ILIST<ROW>.Count - LITERAL_INT; j >= LITERAL_INT; j--) { if (Eat(VAR_ILIST<ROW>[j], VAR_INT[])) { VAR_INT[][j] = LITERAL_INT; } } Arrays.Fill(VAR_INT[], -LITERAL_INT); VAR_ILIST<ROW> = RemoveGaps(VAR_TRIE.root, VAR_ILIST<ROW>, new List<Row>(), VAR_INT[]); return new Trie(VAR_TRIE.forward, VAR_INT[][VAR_TRIE.root], VAR_ILIST<STRING>, VAR_ILIST<ROW>); }
public IDataValidationConstraint METHOD_NAME(String VAR_STRING) { return DVConstraint.CreateCustomFormulaConstraint(VAR_STRING); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual DescribeLoadBalancerPolicyTypesResponse METHOD_NAME() { return METHOD_NAME(new DescribeLoadBalancerPolicyTypesRequest()); }
public override object METHOD_NAME() { NIOFSIndexInput VAR_NIOFSINDEXINPUT = (NIOFSIndexInput)base.METHOD_NAME(); VAR_NIOFSINDEXINPUT.isClone = true; return VAR_NIOFSINDEXINPUT; }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].SLL_ATNTransitions; } return VAR_LONG; }
public virtual UpdateEndpointResponse METHOD_NAME(UpdateEndpointRequest VAR_UPDATEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEndpointResponseUnmarshaller.Instance; return Invoke<UpdateEndpointResponse>(VAR_UPDATEENDPOINTREQUEST, VAR_VAR); }
public virtual GetEmailChannelResponse METHOD_NAME(GetEmailChannelRequest VAR_GETEMAILCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEmailChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEmailChannelResponseUnmarshaller.Instance; return Invoke<GetEmailChannelResponse>(VAR_GETEMAILCHANNELREQUEST, VAR_VAR); }
public virtual ListPhoneNumberOrdersResponse METHOD_NAME(ListPhoneNumberOrdersRequest VAR_LISTPHONENUMBERORDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPhoneNumberOrdersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPhoneNumberOrdersResponseUnmarshaller.Instance; return Invoke<ListPhoneNumberOrdersResponse>(VAR_LISTPHONENUMBERORDERSREQUEST, VAR_VAR); }
public virtual UpdateBuildResponse METHOD_NAME(UpdateBuildRequest VAR_UPDATEBUILDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBuildRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBuildResponseUnmarshaller.Instance; return Invoke<UpdateBuildResponse>(VAR_UPDATEBUILDREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_1_rectX1); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_2_rectY1); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_3_rectX2); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_4_rectY2); VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT + RecordSize, RecordId, VAR_INT + RecordSize, this); return LITERAL_INT + LITERAL_INT; }
public virtual NGit.Api.CleanCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual DescribeClusterVersionsResponse METHOD_NAME(DescribeClusterVersionsRequest VAR_DESCRIBECLUSTERVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterVersionsResponseUnmarshaller.Instance; return Invoke<DescribeClusterVersionsResponse>(VAR_DESCRIBECLUSTERVERSIONSREQUEST, VAR_VAR); }
public virtual DescribeWorkspacesResponse METHOD_NAME(DescribeWorkspacesRequest VAR_DESCRIBEWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspacesResponseUnmarshaller.Instance; return Invoke<DescribeWorkspacesResponse>(VAR_DESCRIBEWORKSPACESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { NB.EncodeInt32(VAR_BYTE[], VAR_INT, w1); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w2); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w3); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w4); NB.EncodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT, w5); }
public virtual SetStackPolicyResponse METHOD_NAME(SetStackPolicyRequest VAR_SETSTACKPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetStackPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetStackPolicyResponseUnmarshaller.Instance; return Invoke<SetStackPolicyResponse>(VAR_SETSTACKPOLICYREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(remoteName); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(localName); if (forceUpdate) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(oldObjectId == LITERAL_NULL ? string.Empty : oldObjectId.Abbreviate(LITERAL_INT).Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(newObjectId == LITERAL_NULL ? string.Empty : newObjectId.Abbreviate(LITERAL_INT).Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public short METHOD_NAME(int VAR_INT) { return field_3_rks[VAR_INT].xf; }
public virtual java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_BYTE[][i]); } } return this; }
public virtual ReceiveMessageResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new ReceiveMessageRequest(); VAR_VAR.QueueUrl = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public NativeUnixIndexInput(NativeUnixIndexInput VAR_NATIVEUNIXINDEXINPUT)throws IOException { base (VAR_NATIVEUNIXINDEXINPUT.ToString() ) ; this .fis = null ; channel = VAR_NATIVEUNIXINDEXINPUT.channel ; this .bufferSize = VAR_NATIVEUNIXINDEXINPUT.bufferSize ; buffer = ByteBuffer.allocateDirect(bufferSize) ; filePos = - bufferSize ; bufferPos = bufferSize ; isOpen = true ; isClone = true ; seek(other.FilePointer VAR_OTHER.FILEPOINTER); }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY, bool VAR_BOOL) { return new StrategyOneSided.OneSide(VAR_REPOSITORY, treeIndex); }
public override void METHOD_NAME() { lock (@lock) { if (@out != LITERAL_NULL) { try { @out.METHOD_NAME(); } catch (System.IO.IOException) { setError(); } } else { setError(); } } }
public virtual DisassociateIamInstanceProfileResponse METHOD_NAME(DisassociateIamInstanceProfileRequest VAR_DISASSOCIATEIAMINSTANCEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateIamInstanceProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateIamInstanceProfileResponseUnmarshaller.Instance; return Invoke<DisassociateIamInstanceProfileResponse>(VAR_DISASSOCIATEIAMINSTANCEPROFILEREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING, int VAR_INT) { if (!IsMainThread()) { throw new InvalidOperationException(); } pm.METHOD_NAME(VAR_STRING, VAR_INT); }
public override void METHOD_NAME() { try { count = task.RunAndMaybeStats(letChildReport); } catch (Exception e) { throw new Exception(e.ToString(), e); } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new EdgeNGramTokenFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, side, minGramSize, maxGramSize); }
public override string METHOD_NAME() { return LITERAL_STRING + remoteName + LITERAL_STRING + status + LITERAL_STRING + (expectedOldObjectId != LITERAL_NULL ? expectedOldObjectId.Name : LITERAL_STRING) + LITERAL_STRING + (newObjectId != LITERAL_NULL ? newObjectId.Name : LITERAL_STRING) + (fastForward ? LITERAL_STRING : string.Empty) + LITERAL_STRING + srcRef + (forceUpdate ? LITERAL_STRING : string.Empty) + LITERAL_STRING + (message != LITERAL_NULL ? LITERAL_STRING + message + LITERAL_STRING : LITERAL_STRING) + LITERAL_STRING; }
public virtual ListJournalS3ExportsResponse METHOD_NAME(ListJournalS3ExportsRequest VAR_LISTJOURNALS3EXPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJournalS3ExportsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJournalS3ExportsResponseUnmarshaller.Instance; return Invoke<ListJournalS3ExportsResponse>(VAR_LISTJOURNALS3EXPORTSREQUEST, VAR_VAR); }
public bool METHOD_NAME() { matchFound = lookingAtImpl(address, input, matchOffsets); if (matchFound) { findPos = matchOffsets[LITERAL_INT]; } return matchFound; }
public virtual DescribeIdentityUsageResponse METHOD_NAME(DescribeIdentityUsageRequest VAR_DESCRIBEIDENTITYUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityUsageResponseUnmarshaller.Instance; return Invoke<DescribeIdentityUsageResponse>(VAR_DESCRIBEIDENTITYUSAGEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RevFlag VAR_REVFLAG) { int VAR_INT = flags & VAR_REVFLAG.mask; if (VAR_INT != LITERAL_INT) { CarryFlags(this, VAR_INT); } }
public Count() { _predicate = defaultPredicate; }
public virtual ShowNoteCommand METHOD_NAME() { return new ShowNoteCommand(repo); }
public virtual ResolveRoomResponse METHOD_NAME(ResolveRoomRequest VAR_RESOLVEROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResolveRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResolveRoomResponseUnmarshaller.Instance; return Invoke<ResolveRoomResponse>(VAR_RESOLVEROOMREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(Area3DPxg VAR_AREA3DPXG) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = CreateExternSheetRefEvaluator(VAR_AREA3DPXG.SheetName, VAR_AREA3DPXG.LastSheetName, VAR_AREA3DPXG.ExternalWorkbookNumber); return new LazyAreaEval(VAR_AREA3DPXG.FirstRow, VAR_AREA3DPXG.FirstColumn, VAR_AREA3DPXG.LastRow, VAR_AREA3DPXG.LastColumn, VAR_SHEETRANGEEVALUATOR); }
public DoubleMetaphoneFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { inject = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, INJECT, true); maxCodeLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_CODE_LENGTH, DEFAULT_MAX_CODE_LENGTH); if (!(VAR_IDICTIONARY<STRING, STRING>.Count == LITERAL_INT)) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_red & LITERAL_INT).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_green & LITERAL_INT).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_blue & LITERAL_INT).Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public DocOffsetSorter(int VAR_INT) : base(maxDoc / LITERAL_INT) { this.tmpDocs = new int[VAR_INT / LITERAL_INT]; this.tmpOffsets = new long[VAR_INT / LITERAL_INT]; }
public virtual EnableInsightRulesResponse METHOD_NAME(EnableInsightRulesRequest VAR_ENABLEINSIGHTRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableInsightRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableInsightRulesResponseUnmarshaller.Instance; return Invoke<EnableInsightRulesResponse>(VAR_ENABLEINSIGHTRULESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!(VAR_OBJECT is SemanticContext.AND)) { return false; } SemanticContext.AND VAR_SEMANTICCONTEXT.AND = (SemanticContext.AND)VAR_OBJECT; return Arrays.METHOD_NAME(this.opnds, VAR_SEMANTICCONTEXT.AND.opnds); }
public static int METHOD_NAME(Ptg[] VAR_PTG[]) { int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { VAR_INT += VAR_PTG[][i].Size; } return VAR_INT; }
public IterationRecord(bool VAR_BOOL) { _flags = iterationOn.SetBoolean(LITERAL_INT, VAR_BOOL); }
public virtual UnlinkIdentityResponse METHOD_NAME(UnlinkIdentityRequest VAR_UNLINKIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnlinkIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnlinkIdentityResponseUnmarshaller.Instance; return Invoke<UnlinkIdentityResponse>(VAR_UNLINKIDENTITYREQUEST, VAR_VAR); }
public virtual CreateThreatIntelSetResponse METHOD_NAME(CreateThreatIntelSetRequest VAR_CREATETHREATINTELSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateThreatIntelSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateThreatIntelSetResponseUnmarshaller.Instance; return Invoke<CreateThreatIntelSetResponse>(VAR_CREATETHREATINTELSETREQUEST, VAR_VAR); }
public TokenizedPhraseQueryNode() { IsLeaf = false; Allocate(); }
public DataItemRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { isxvdData = VAR_RECORDINPUTSTREAM.ReadUShort(); iiftab = VAR_RECORDINPUTSTREAM.ReadUShort(); df = VAR_RECORDINPUTSTREAM.ReadUShort(); isxvd = VAR_RECORDINPUTSTREAM.ReadUShort(); isxvi = VAR_RECORDINPUTSTREAM.ReadUShort(); ifmt = VAR_RECORDINPUTSTREAM.ReadUShort(); name = VAR_RECORDINPUTSTREAM.ReadString(); }
public virtual DeleteDBParameterGroupResponse METHOD_NAME(DeleteDBParameterGroupRequest VAR_DELETEDBPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBParameterGroupResponseUnmarshaller.Instance; return Invoke<DeleteDBParameterGroupResponse>(VAR_DELETEDBPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual GetReservedNodeExchangeOfferingsResponse METHOD_NAME(GetReservedNodeExchangeOfferingsRequest VAR_GETRESERVEDNODEEXCHANGEOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetReservedNodeExchangeOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetReservedNodeExchangeOfferingsResponseUnmarshaller.Instance; return Invoke<GetReservedNodeExchangeOfferingsResponse>(VAR_GETRESERVEDNODEEXCHANGEOFFERINGSREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT) { VAR_INT--; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT++; return VAR_INT; }
public virtual RunInstancesResponse METHOD_NAME(RunInstancesRequest VAR_RUNINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RunInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RunInstancesResponseUnmarshaller.Instance; return Invoke<RunInstancesResponse>(VAR_RUNINSTANCESREQUEST, VAR_VAR); }
public virtual ChangeMessageVisibilityBatchResponse METHOD_NAME(string VAR_STRING, List<ChangeMessageVisibilityBatchRequestEntry> VAR_LIST<CHANGEMESSAGEVISIBILITYBATCHREQUESTENTRY>) { var VAR_VAR = new ChangeMessageVisibilityBatchRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.Entries = VAR_LIST<CHANGEMESSAGEVISIBILITYBATCHREQUESTENTRY>; return METHOD_NAME(VAR_VAR); }
public virtual DeleteRealtimeEndpointResponse METHOD_NAME(DeleteRealtimeEndpointRequest VAR_DELETEREALTIMEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRealtimeEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRealtimeEndpointResponseUnmarshaller.Instance; return Invoke<DeleteRealtimeEndpointResponse>(VAR_DELETEREALTIMEENDPOINTREQUEST, VAR_VAR); }
public virtual CreateDiskSnapshotResponse METHOD_NAME(CreateDiskSnapshotRequest VAR_CREATEDISKSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDiskSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDiskSnapshotResponseUnmarshaller.Instance; return Invoke<CreateDiskSnapshotResponse>(VAR_CREATEDISKSNAPSHOTREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } lock (@lock) { checkNotClosed(); markpos = pos; } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ICUNormalizer2Filter(VAR_TOKENSTREAM, normalizer); }
public virtual ModifyImageAttributeResponse METHOD_NAME(ModifyImageAttributeRequest VAR_MODIFYIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyImageAttributeResponseUnmarshaller.Instance; return Invoke<ModifyImageAttributeResponse>(VAR_MODIFYIMAGEATTRIBUTEREQUEST, VAR_VAR); }
public virtual DescribeClusterSubnetGroupsResponse METHOD_NAME(DescribeClusterSubnetGroupsRequest VAR_DESCRIBECLUSTERSUBNETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterSubnetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeClusterSubnetGroupsResponse>(VAR_DESCRIBECLUSTERSUBNETGROUPSREQUEST, VAR_VAR); }
public virtual StopQueryExecutionResponse METHOD_NAME(StopQueryExecutionRequest VAR_STOPQUERYEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopQueryExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopQueryExecutionResponseUnmarshaller.Instance; return Invoke<StopQueryExecutionResponse>(VAR_STOPQUERYEXECUTIONREQUEST, VAR_VAR); }
public UpdateUserInfoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public virtual DiscoverInputSchemaResponse METHOD_NAME(DiscoverInputSchemaRequest VAR_DISCOVERINPUTSCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DiscoverInputSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DiscoverInputSchemaResponseUnmarshaller.Instance; return Invoke<DiscoverInputSchemaResponse>(VAR_DISCOVERINPUTSCHEMAREQUEST, VAR_VAR); }
public virtual GetEnvironmentResponse METHOD_NAME(GetEnvironmentRequest VAR_GETENVIRONMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEnvironmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEnvironmentResponseUnmarshaller.Instance; return Invoke<GetEnvironmentResponse>(VAR_GETENVIRONMENTREQUEST, VAR_VAR); }
public UpdateCondition(string VAR_STRING, string VAR_STRING, bool VAR_BOOL) { _name = VAR_STRING; _value = VAR_STRING; _exists = VAR_BOOL; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(GetCalcMode()); }
public AmazonS3EncryptionClient(EncryptionMaterials VAR_ENCRYPTIONMATERIALS) : base() { this.EncryptionMaterials = VAR_ENCRYPTIONMATERIALS; S3CryptoConfig = new AmazonS3CryptoConfiguration(); }
public void METHOD_NAME(HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { cfAggregate.METHOD_NAME(VAR_HSSFCONDITIONALFORMATTINGRULE.CfRuleRecord); }
public virtual java.util.Iterator<E> METHOD_NAME() { return descendingSet().iterator(); }
public virtual DescribeSubnetGroupsResponse METHOD_NAME(DescribeSubnetGroupsRequest VAR_DESCRIBESUBNETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSubnetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeSubnetGroupsResponse>(VAR_DESCRIBESUBNETGROUPSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, RevTree VAR_REVTREE) { METHOD_NAME(VAR_STRING, FileMode.TREE, VAR_REVTREE); }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K, bool VAR_BOOL, K VAR_K, booltoInclusive VAR_BOOLTOINCLUSIVE) { java.util.TreeMap.Bound VAR_JAVA.UTIL.TREEMAP.BOUND = VAR_BOOL ? java.util.TreeMap.Bound.INCLUSIVE : java.util.TreeMap.Bound.EXCLUSIVE; java.util.TreeMap.Bound VAR_JAVA.UTIL.TREEMAP.BOUND = toInclusive ? java.util.TreeMap.Bound.INCLUSIVE : java.util.TreeMap.Bound.EXCLUSIVE; return this.METHOD_NAME(VAR_K, VAR_JAVA.UTIL.TREEMAP.BOUND, VAR_K, VAR_JAVA.UTIL.TREEMAP.BOUND); }
public virtual E METHOD_NAME() { if (this.expectedModCount == this._enclosing.modCount) { try { E VAR_E = this._enclosing.get(this.pos + LITERAL_INT); this.lastPosition = ++this.pos; return VAR_E; } catch (System.IndexOutOfRangeException) { throw new java.util.NoSuchElementException(); } } throw new java.util.ConcurrentModificationException(); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_INT, VAR_INT, VAR_DOUBLE, LITERAL_INT); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return dictionary == LITERAL_NULL ? VAR_TOKENSTREAM : new DictionaryCompoundWordTokenFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); FieldNamesToString(VAR_STRINGBUILDER); VAR_STRINGBUILDER.Append(q.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual AssociateDeviceWithRoomResponse METHOD_NAME(AssociateDeviceWithRoomRequest VAR_ASSOCIATEDEVICEWITHROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateDeviceWithRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateDeviceWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateDeviceWithRoomResponse>(VAR_ASSOCIATEDEVICEWITHROOMREQUEST, VAR_VAR); }
public DeleteRetentionPolicyRequest(string VAR_STRING) { _logGroupName = VAR_STRING; }
public TypeTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { stopTypesFiles = Require(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); enablePositionIncrements = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); useWhitelist = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public ServerCertificate(ServerCertificateMetadata VAR_SERVERCERTIFICATEMETADATA, string VAR_STRING) { _serverCertificateMetadata = VAR_SERVERCERTIFICATEMETADATA; _certificateBody = VAR_STRING; }
public void METHOD_NAME(RevCommit VAR_REVCOMMIT, RevFlag VAR_REVFLAG) { if (!VAR_REVCOMMIT.Has(VAR_REVFLAG)) { VAR_REVCOMMIT.METHOD_NAME(VAR_REVFLAG); METHOD_NAME(VAR_REVCOMMIT); } }
public virtual NGit.Api.BlameCommand METHOD_NAME(string VAR_STRING) { this.path = VAR_STRING; return this; }
public bool METHOD_NAME() { return traverseEmptyCells; }
public QueryCustomerByIdRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public OpenNLPPOSFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { posTaggerModelFile = Require(VAR_IDICTIONARY<STRING, STRING>, POS_TAGGER_MODEL); if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetLinkAttributesResponse METHOD_NAME(GetLinkAttributesRequest VAR_GETLINKATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLinkAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLinkAttributesResponseUnmarshaller.Instance; return Invoke<GetLinkAttributesResponse>(VAR_GETLINKATTRIBUTESREQUEST, VAR_VAR); }
public override byte[] METHOD_NAME() { bytesUsed.AddAndGet(m_blockSize); return new byte[m_blockSize]; }
public CanonicalTreeParser() { Reset(EMPTY); }
public OldLabelRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1, in1.Sid == biff2_sid) { if (IsBiff2) { field_4_string_len = (short)VAR_RECORDINPUTSTREAM.ReadUByte(); } else { field_4_string_len = VAR_RECORDINPUTSTREAM.ReadShort(); } field_5_bytes = new byte[field_4_string_len]; VAR_RECORDINPUTSTREAM.Read(field_5_bytes, LITERAL_INT, field_4_string_len); if (VAR_RECORDINPUTSTREAM.Remaining > LITERAL_INT) { logger.Log(POILogger.INFO, LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING + HexDump.ToHex(VAR_RECORDINPUTSTREAM.ReadRemainder())); } }
public override Object METHOD_NAME() { return this; }
public virtual GetCampaignResponse METHOD_NAME(GetCampaignRequest VAR_GETCAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignResponseUnmarshaller.Instance; return Invoke<GetCampaignResponse>(VAR_GETCAMPAIGNREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return backingMap.METHOD_NAME(); }
public override object METHOD_NAME(object VAR_OBJECT, object VAR_OBJECT) { return outputs.METHOD_NAME((T)VAR_OBJECT, (T)VAR_OBJECT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(FirstColumn).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LastColumn).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ColumnWidth).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(XFIndex).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Options).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsHidden).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(OutlineLevel).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsCollapsed).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual EditList METHOD_NAME() { EditList VAR_EDITLIST = new EditList(); foreach (HunkHeader hunk in hunks) { Sharpen.Collections.AddAll(VAR_EDITLIST, hunk.METHOD_NAME()); } return VAR_EDITLIST; }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); if (VAR_STRING != LITERAL_NULL) { string[] VAR_STRING[] = VAR_STRING.Split(LITERAL_CHAR).TrimEnd(); if (VAR_STRING[].Length > LITERAL_INT) { commitUserData = VAR_STRING[][LITERAL_INT]; } } }
public ICell METHOD_NAME(int VAR_INT, CellType VAR_CELLTYPE) { short VAR_SHORT = (short)VAR_INT; if (VAR_INT > LITERAL_INT) { VAR_SHORT = (short)(LITERAL_INT - VAR_INT); } ICell VAR_ICELL = new HSSFCell(book, sheet, RowNum, (short)VAR_INT, VAR_CELLTYPE); AddCell(VAR_ICELL); sheet.Sheet.AddValueRecord(RowNum, ((HSSFCell)VAR_ICELL).CellValueRecord); return VAR_ICELL; }
public virtual StemmerOverrideMap METHOD_NAME() { ByteSequenceOutputs VAR_BYTESEQUENCEOUTPUTS = ByteSequenceOutputs.Singleton; Builder<BytesRef> VAR_BUILDER<BYTESREF> = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE4, VAR_BYTESEQUENCEOUTPUTS); int[] VAR_INT[] = hash.Sort(BytesRef.UTF8SortedAsUnicodeComparer); Int32sRef VAR_INT32SREF = new Int32sRef(); int VAR_INT = hash.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT = VAR_INT[][i]; BytesRef VAR_BYTESREF = hash.Get(VAR_INT, spare); UnicodeUtil.UTF8toUTF32(VAR_BYTESREF, VAR_INT32SREF); VAR_BUILDER<BYTESREF>.Add(VAR_INT32SREF, new BytesRef(outputValues[VAR_INT])); } return new StemmerOverrideMap(VAR_BUILDER<BYTESREF>.Finish(), ignoreCase); }
public virtual ModifyInstanceEventStartTimeResponse METHOD_NAME(ModifyInstanceEventStartTimeRequest VAR_MODIFYINSTANCEEVENTSTARTTIMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceEventStartTimeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceEventStartTimeResponseUnmarshaller.Instance; return Invoke<ModifyInstanceEventStartTimeResponse>(VAR_MODIFYINSTANCEEVENTSTARTTIMEREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return false; }
public Analyzer METHOD_NAME() { return new AnalyzerAnonymousHelper(this); }
public static RevFilter METHOD_NAME(RevFilter[] VAR_REVFILTER[]) { if (VAR_REVFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_REVFILTER[][LITERAL_INT], VAR_REVFILTER[][LITERAL_INT]); } if (VAR_REVFILTER[].Length < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } RevFilter[] VAR_REVFILTER[] = new RevFilter[VAR_REVFILTER[].Length]; System.Array.Copy(VAR_REVFILTER[], LITERAL_INT, VAR_REVFILTER[], LITERAL_INT, VAR_REVFILTER[].Length); return new OrRevFilter.List(VAR_REVFILTER[]); }
public virtual DescribePrefixListsResponse METHOD_NAME(DescribePrefixListsRequest VAR_DESCRIBEPREFIXLISTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePrefixListsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePrefixListsResponseUnmarshaller.Instance; return Invoke<DescribePrefixListsResponse>(VAR_DESCRIBEPREFIXLISTSREQUEST, VAR_VAR); }
public virtual object METHOD_NAME() { CharVector VAR_CHARVECTOR = new CharVector((char[])array.METHOD_NAME(), blockSize); VAR_CHARVECTOR.n = this.n; return VAR_CHARVECTOR; }
public virtual CreateDatasetImportJobResponse METHOD_NAME(CreateDatasetImportJobRequest VAR_CREATEDATASETIMPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDatasetImportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDatasetImportJobResponseUnmarshaller.Instance; return Invoke<CreateDatasetImportJobResponse>(VAR_CREATEDATASETIMPORTJOBREQUEST, VAR_VAR); }
public virtual GetRecommenderConfigurationsResponse METHOD_NAME(GetRecommenderConfigurationsRequest VAR_GETRECOMMENDERCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRecommenderConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRecommenderConfigurationsResponseUnmarshaller.Instance; return Invoke<GetRecommenderConfigurationsResponse>(VAR_GETRECOMMENDERCONFIGURATIONSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { oldPrefix = VAR_STRING; }
public virtual DescribeAvailabilityZonesResponse METHOD_NAME() { return METHOD_NAME(new DescribeAvailabilityZonesRequest()); }
public bool METHOD_NAME(char VAR_CHAR) { return this.expectedCharacter == VAR_CHAR; }
public static void METHOD_NAME(String VAR_STRING, byte[] VAR_BYTE[], int VAR_INT) { byte[] VAR_BYTE[] = ISO_8859_1.GetBytes(VAR_STRING); Array.Copy(VAR_BYTE[], LITERAL_INT, VAR_BYTE[], VAR_INT, VAR_BYTE[].Length); }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT >= LITERAL_INT) { mValues[VAR_INT] = VAR_INT; } else { VAR_INT = ~VAR_INT; if (mSize >= mKeys.Length) { int VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(mSize + LITERAL_INT); int[] VAR_INT[] = new int[VAR_INT]; int[] VAR_INT[] = new int[VAR_INT]; System.Array.Copy(mKeys, LITERAL_INT, VAR_INT[], LITERAL_INT, mKeys.Length); System.Array.Copy(mValues, LITERAL_INT, VAR_INT[], LITERAL_INT, mValues.Length); mKeys = VAR_INT[]; mValues = VAR_INT[]; } if (mSize - VAR_INT != LITERAL_INT) { System.Array.Copy(mKeys, VAR_INT, mKeys, VAR_INT + LITERAL_INT, mSize - VAR_INT); System.Array.Copy(mValues, VAR_INT, mValues, VAR_INT + LITERAL_INT, mSize - VAR_INT); } mKeys[VAR_INT] = VAR_INT; mValues[VAR_INT] = VAR_INT; mSize++; } }
public void METHOD_NAME() { escherRecords.Clear(); }
public string METHOD_NAME() { return decode(schemeSpecificPart); }
public virtual DeleteSkillAuthorizationResponse METHOD_NAME(DeleteSkillAuthorizationRequest VAR_DELETESKILLAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSkillAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSkillAuthorizationResponseUnmarshaller.Instance; return Invoke<DeleteSkillAuthorizationResponse>(VAR_DELETESKILLAUTHORIZATIONREQUEST, VAR_VAR); }
public QuerySyncPicScheduleRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public SheetRecordCollectingListener(IHSSFListener VAR_IHSSFLISTENER) { this.VAR_IHSSFLISTENER = VAR_IHSSFLISTENER; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is RussianStemmer; }
public void METHOD_NAME() { List<HSSFShape> VAR_LIST<HSSFSHAPE> = new List<HSSFShape>(_shapes); foreach (HSSFShape shape in VAR_LIST<HSSFSHAPE>) { RemoveShape(shape); } }
public virtual AddTagsToVaultResponse METHOD_NAME(AddTagsToVaultRequest VAR_ADDTAGSTOVAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddTagsToVaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddTagsToVaultResponseUnmarshaller.Instance; return Invoke<AddTagsToVaultResponse>(VAR_ADDTAGSTOVAULTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_CHAR + GetHashCode().METHOD_NAME(LITERAL_STRING) + LITERAL_STRING + LockFactory; }
public sealed override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is java.nio.charset.Charset) { java.nio.charset.Charset VAR_JAVA.NIO.CHARSET.CHARSET = (java.nio.charset.Charset)VAR_OBJECT; return this.canonicalName.METHOD_NAME(VAR_JAVA.NIO.CHARSET.CHARSET.canonicalName); } return false; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); AppendCharString(min, VAR_STRINGBUILDER); if (min != max) { VAR_STRINGBUILDER.Append(LITERAL_STRING); AppendCharString(max, VAR_STRINGBUILDER); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(to.number); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DeleteDirectoryConfigResponse METHOD_NAME(DeleteDirectoryConfigRequest VAR_DELETEDIRECTORYCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDirectoryConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDirectoryConfigResponseUnmarshaller.Instance; return Invoke<DeleteDirectoryConfigResponse>(VAR_DELETEDIRECTORYCONFIGREQUEST, VAR_VAR); }
public static DVConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } OperatorType.ValidateSecondArg(VAR_INT, VAR_STRING); String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertTime(VAR_STRING) : Double.NaN; String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertTime(VAR_STRING) : Double.NaN; return new DVConstraint(ValidationType.TIME, VAR_INT, VAR_STRING, VAR_STRING, VAR_DOUBLE, VAR_DOUBLE, LITERAL_NULL); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public RestoreDBInstanceFromDBSnapshotRequest(string VAR_STRING, string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; _dbSnapshotIdentifier = VAR_STRING; }
public override string METHOD_NAME() { return seqName; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public override bool METHOD_NAME(char[] VAR_CHAR[]) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return false; }
public override String METHOD_NAME() { return LITERAL_STRING; }
public virtual GetWorkflowExecutionHistoryResponse METHOD_NAME(GetWorkflowExecutionHistoryRequest VAR_GETWORKFLOWEXECUTIONHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetWorkflowExecutionHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetWorkflowExecutionHistoryResponseUnmarshaller.Instance; return Invoke<GetWorkflowExecutionHistoryResponse>(VAR_GETWORKFLOWEXECUTIONHISTORYREQUEST, VAR_VAR); }
public virtual DeleteFileSystemPolicyResponse METHOD_NAME(DeleteFileSystemPolicyRequest VAR_DELETEFILESYSTEMPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFileSystemPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFileSystemPolicyResponseUnmarshaller.Instance; return Invoke<DeleteFileSystemPolicyResponse>(VAR_DELETEFILESYSTEMPOLICYREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return new NumberEval(VAR_INT + LITERAL_INT); } return ErrorEval.VALUE_INVALID; }
public String METHOD_NAME(short VAR_SHORT) { if (movedBuiltins) return (String)formats[VAR_SHORT]; if (VAR_SHORT == -LITERAL_INT) return LITERAL_NULL; String VAR_STRING = formats.Count > VAR_SHORT ? formats[VAR_SHORT] : LITERAL_NULL; if (builtinFormats.Count > VAR_SHORT && builtinFormats[VAR_SHORT] != LITERAL_NULL) { if (VAR_STRING != LITERAL_NULL) { return VAR_STRING; } else { return builtinFormats[VAR_SHORT]; } } return VAR_STRING; }
public override bool METHOD_NAME(RevWalk VAR_REVWALK, RevCommit VAR_REVCOMMIT) { count++; if (count > maxCount) { throw StopWalkException.INSTANCE; } return true; }
public java.nio.Buffer METHOD_NAME() { _mark = _position; return this; }
public virtual ModifyClientPropertiesResponse METHOD_NAME(ModifyClientPropertiesRequest VAR_MODIFYCLIENTPROPERTIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClientPropertiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClientPropertiesResponseUnmarshaller.Instance; return Invoke<ModifyClientPropertiesResponse>(VAR_MODIFYCLIENTPROPERTIESREQUEST, VAR_VAR); }
public override void METHOD_NAME() { if (parent != LITERAL_NULL) { parent.METHOD_NAME(); } }
public ObjectId METHOD_NAME() { return IsComplete ? new ObjectId(w1, w2, w3, w4, w5) : LITERAL_NULL; }
public virtual UpdateIntegrationResponse METHOD_NAME(UpdateIntegrationRequest VAR_UPDATEINTEGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateIntegrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateIntegrationResponseUnmarshaller.Instance; return Invoke<UpdateIntegrationResponse>(VAR_UPDATEINTEGRATIONREQUEST, VAR_VAR); }
public virtual PutDetectorResponse METHOD_NAME(PutDetectorRequest VAR_PUTDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutDetectorResponseUnmarshaller.Instance; return Invoke<PutDetectorResponse>(VAR_PUTDETECTORREQUEST, VAR_VAR); }
public virtual long METHOD_NAME(string VAR_STRING, string VAR_STRING, long VAR_LONG) { return METHOD_NAME(VAR_STRING, LITERAL_NULL, VAR_STRING, VAR_LONG); }
public void METHOD_NAME() { EscherSimpleProperty VAR_ESCHERSIMPLEPROPERTY = (EscherSimpleProperty)GetOptRecord().Lookup(EscherProperties.FILL__PATTERNTEXTURE); if (LITERAL_NULL != VAR_ESCHERSIMPLEPROPERTY) { EscherBSERecord VAR_ESCHERBSERECORD = ((HSSFWorkbook)((HSSFPatriarch)Patriarch).Sheet.Workbook).Workbook.GetBSERecord(VAR_ESCHERSIMPLEPROPERTY.PropertyValue); VAR_ESCHERBSERECORD.Ref = (VAR_ESCHERBSERECORD.Ref - LITERAL_INT); GetOptRecord().RemoveEscherProperty(EscherProperties.FILL__PATTERNTEXTURE); } SetPropertyValue(new EscherSimpleProperty(EscherProperties.FILL__FILLTYPE, false, false, FILL_TYPE_SOLID)); }
public void METHOD_NAME(DataInput VAR_DATAINPUT, long VAR_LONG) { this.VAR_DATAINPUT = VAR_DATAINPUT; Debug.Assert(VAR_LONG >= LITERAL_INT); this.VAR_LONG = VAR_LONG; off = blockSize; ord = LITERAL_INT; }
public virtual ResetSnapshotAttributeResponse METHOD_NAME(ResetSnapshotAttributeRequest VAR_RESETSNAPSHOTATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetSnapshotAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetSnapshotAttributeResponseUnmarshaller.Instance; return Invoke<ResetSnapshotAttributeResponse>(VAR_RESETSNAPSHOTATTRIBUTEREQUEST, VAR_VAR); }
public override MutableValue METHOD_NAME() { MutableValueStr VAR_MUTABLEVALUESTR = new MutableValueStr(); VAR_MUTABLEVALUESTR.Value.CopyBytes(Value); VAR_MUTABLEVALUESTR.Exists = this.Exists; return VAR_MUTABLEVALUESTR; }
public virtual int METHOD_NAME() { return column; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { if (pattern != LITERAL_NULL) { VAR_TOKENSTREAM = new PatternKeywordMarkerFilter(VAR_TOKENSTREAM, pattern); } if (protectedWords != LITERAL_NULL) { VAR_TOKENSTREAM = new SetKeywordMarkerFilter(VAR_TOKENSTREAM, protectedWords); } return VAR_TOKENSTREAM; }
public ElisionFilter(TokenStream VAR_TOKENSTREAM, CharArraySet VAR_CHARARRAYSET) : base(input) { this.VAR_CHARARRAYSET = VAR_CHARARRAYSET; termAtt = AddAttribute<ICharTermAttribute>(); }
public static int METHOD_NAME(string VAR_STRING, char[] VAR_CHAR[], int VAR_INT) { int VAR_INT, VAR_INT, VAR_INT = VAR_STRING.Length; for (VAR_INT = LITERAL_INT; VAR_INT < VAR_INT; VAR_INT++) { VAR_INT = (int)VAR_STRING[VAR_INT] - VAR_CHAR[][VAR_INT + VAR_INT]; if (VAR_INT != LITERAL_INT) { return VAR_INT; } if (VAR_CHAR[][VAR_INT + VAR_INT] == LITERAL_INT) { return VAR_INT; } } if (VAR_CHAR[][VAR_INT + VAR_INT] != LITERAL_INT) { return -VAR_CHAR[][VAR_INT + VAR_INT]; } return LITERAL_INT; }
public virtual java.util.NavigableSet<E> METHOD_NAME() { return (_descendingSet != LITERAL_NULL) ? _descendingSet : (_descendingSet = new java.util.TreeSet<E>(backingMap.descendingMap())); }
public DecisionInfo[] METHOD_NAME() { return decisions; }
public override PushConnection METHOD_NAME() { throw new NGit.Errors.NotSupportedException(JGitText.Get().pushIsNotSupportedForBundleTransport); }
public virtual PutRecordResponse METHOD_NAME(PutRecordRequest VAR_PUTRECORDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRecordRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRecordResponseUnmarshaller.Instance; return Invoke<PutRecordResponse>(VAR_PUTRECORDREQUEST, VAR_VAR); }
public virtual IList<IToken> METHOD_NAME() { IList<IToken> VAR_ILIST<ITOKEN> = new List<IToken>(); IToken VAR_ITOKEN = NextToken(); while (VAR_ITOKEN.Type != TokenConstants.EOF) { VAR_ILIST<ITOKEN>.Add(VAR_ITOKEN); VAR_ITOKEN = NextToken(); } return VAR_ILIST<ITOKEN>; }
public virtual ModifyInstanceCapacityReservationAttributesResponse METHOD_NAME(ModifyInstanceCapacityReservationAttributesRequest VAR_MODIFYINSTANCECAPACITYRESERVATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceCapacityReservationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceCapacityReservationAttributesResponseUnmarshaller.Instance; return Invoke<ModifyInstanceCapacityReservationAttributesResponse>(VAR_MODIFYINSTANCECAPACITYRESERVATIONATTRIBUTESREQUEST, VAR_VAR); }
public MoveFacePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual RequestSpotFleetResponse METHOD_NAME(RequestSpotFleetRequest VAR_REQUESTSPOTFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RequestSpotFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RequestSpotFleetResponseUnmarshaller.Instance; return Invoke<RequestSpotFleetResponse>(VAR_REQUESTSPOTFLEETREQUEST, VAR_VAR); }
public virtual ListApplicationSnapshotsResponse METHOD_NAME(ListApplicationSnapshotsRequest VAR_LISTAPPLICATIONSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListApplicationSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListApplicationSnapshotsResponseUnmarshaller.Instance; return Invoke<ListApplicationSnapshotsResponse>(VAR_LISTAPPLICATIONSNAPSHOTSREQUEST, VAR_VAR); }
public DefaultAcsClient(IClientProfile VAR_ICLIENTPROFILE, AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS) : this() { clientProfile = VAR_ICLIENTPROFILE; credentialsProvider = new StaticCredentialsProvider(VAR_ALIBABACLOUDCREDENTIALS); clientProfile.SetCredentialsProvider(credentialsProvider); }
public ConcurrentRefUpdateException(string VAR_STRING, Ref VAR_REF, RefUpdate.Result VAR_REFUPDATE.RESULT) : base((rc == LITERAL_NULL) ? message : message + LITERAL_STRING + MessageFormat.Format(JGitText.Get().refUpdateReturnCodeWas, rc)) { this.VAR_REFUPDATE.RESULT = VAR_REFUPDATE.RESULT; this.VAR_REF = VAR_REF; }
public virtual DeleteNetworkAclResponse METHOD_NAME(DeleteNetworkAclRequest VAR_DELETENETWORKACLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNetworkAclRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNetworkAclResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclResponse>(VAR_DELETENETWORKACLREQUEST, VAR_VAR); }
public virtual java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_SHORT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_SHORT[][i] = METHOD_NAME(); } } return this; }
public static SharedValueManager METHOD_NAME() { return new SharedValueManager(new SharedFormulaRecord[LITERAL_INT], new CellReference[LITERAL_INT], new List<ArrayRecord>(), new List<TableRecord>()); }
public virtual DeleteCacheSecurityGroupResponse METHOD_NAME(DeleteCacheSecurityGroupRequest VAR_DELETECACHESECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCacheSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCacheSecurityGroupResponseUnmarshaller.Instance; return Invoke<DeleteCacheSecurityGroupResponse>(VAR_DELETECACHESECURITYGROUPREQUEST, VAR_VAR); }
public CreateGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { parentIds = new ObjectId[] { VAR_ANYOBJECTID.Copy() }; }
public static bool METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { foreach (BitSet alts in VAR_IENUMERABLE<BITSET>) { if (alts.Cardinality() > LITERAL_INT) { return true; } } return false; }
public CommonRpcRequest(string VAR_STRING) : base(product) { AcceptFormat = FormatType.JSON; }
public override K METHOD_NAME() { return this.nextEntry().key; }
public virtual DeleteTransitGatewayMulticastDomainResponse METHOD_NAME(DeleteTransitGatewayMulticastDomainRequest VAR_DELETETRANSITGATEWAYMULTICASTDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayMulticastDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayMulticastDomainResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayMulticastDomainResponse>(VAR_DELETETRANSITGATEWAYMULTICASTDOMAINREQUEST, VAR_VAR); }
public virtual DescribeEventsResponse METHOD_NAME(DescribeEventsRequest VAR_DESCRIBEEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventsResponseUnmarshaller.Instance; return Invoke<DescribeEventsResponse>(VAR_DESCRIBEEVENTSREQUEST, VAR_VAR); }
public virtual DescribeFleetsResponse METHOD_NAME(DescribeFleetsRequest VAR_DESCRIBEFLEETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetsResponseUnmarshaller.Instance; return Invoke<DescribeFleetsResponse>(VAR_DESCRIBEFLEETSREQUEST, VAR_VAR); }
public virtual DescribeDataRepositoryTasksResponse METHOD_NAME(DescribeDataRepositoryTasksRequest VAR_DESCRIBEDATAREPOSITORYTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataRepositoryTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataRepositoryTasksResponseUnmarshaller.Instance; return Invoke<DescribeDataRepositoryTasksResponse>(VAR_DESCRIBEDATAREPOSITORYTASKSREQUEST, VAR_VAR); }
public virtual StartLabelDetectionResponse METHOD_NAME(StartLabelDetectionRequest VAR_STARTLABELDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartLabelDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartLabelDetectionResponseUnmarshaller.Instance; return Invoke<StartLabelDetectionResponse>(VAR_STARTLABELDETECTIONREQUEST, VAR_VAR); }
public static long METHOD_NAME(string[] VAR_STRING[]) { if (VAR_STRING[] == LITERAL_NULL) { return -LITERAL_INT; } long VAR_LONG = -LITERAL_INT; foreach (var file in VAR_STRING[]) { if (file.StartsWith(IndexFileNames.SEGMENTS, StringComparison.Ordinal) && !file.Equals(IndexFileNames.SEGMENTS_GEN, StringComparison.Ordinal)) { long VAR_LONG = GenerationFromSegmentsFileName(file); if (VAR_LONG > VAR_LONG) { VAR_LONG = VAR_LONG; } } } return VAR_LONG; }
public virtual EnableFastSnapshotRestoresResponse METHOD_NAME(EnableFastSnapshotRestoresRequest VAR_ENABLEFASTSNAPSHOTRESTORESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableFastSnapshotRestoresRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableFastSnapshotRestoresResponseUnmarshaller.Instance; return Invoke<EnableFastSnapshotRestoresResponse>(VAR_ENABLEFASTSNAPSHOTRESTORESREQUEST, VAR_VAR); }
public virtual ListVPCAssociationAuthorizationsResponse METHOD_NAME(ListVPCAssociationAuthorizationsRequest VAR_LISTVPCASSOCIATIONAUTHORIZATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVPCAssociationAuthorizationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVPCAssociationAuthorizationsResponseUnmarshaller.Instance; return Invoke<ListVPCAssociationAuthorizationsResponse>(VAR_LISTVPCASSOCIATIONAUTHORIZATIONSREQUEST, VAR_VAR); }
public Thumbnail(byte[] VAR_BYTE[]) { this.VAR_BYTE[] = VAR_BYTE[]; }
public override sealed Explanation METHOD_NAME(BasicStats VAR_BASICSTATS, float VAR_FLOAT) { Explanation VAR_EXPLANATION = new Explanation(); VAR_EXPLANATION.Description = this.GetType().Name + LITERAL_STRING; VAR_EXPLANATION.Value = Score(VAR_BASICSTATS, VAR_FLOAT); VAR_EXPLANATION.AddDetail(new Explanation(VAR_FLOAT, LITERAL_STRING)); return VAR_EXPLANATION; }
public static string[] METHOD_NAME(string VAR_STRING) { bool VAR_BOOL = false; List<string> VAR_LIST<STRING> = new List<string>(); int VAR_INT = LITERAL_INT; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR == QUOTE) { VAR_BOOL = !VAR_BOOL; VAR_INT++; } if (VAR_CHAR == COMMA && !VAR_BOOL) { string VAR_STRING = VAR_STRINGBUILDER.ToString(); VAR_STRING = UnQuoteUnEscape(VAR_STRING); VAR_LIST<STRING>.Add(VAR_STRING); VAR_STRINGBUILDER.Length = LITERAL_INT; continue; } VAR_STRINGBUILDER.Append(VAR_CHAR); } VAR_LIST<STRING>.Add(VAR_STRINGBUILDER.ToString()); if (VAR_INT % LITERAL_INT != LITERAL_INT) { return new string[LITERAL_INT]; } return VAR_LIST<STRING>.ToArray(); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(maskedQuery.METHOD_NAME(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(this.VAR_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static RevFilter METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().cannotMatchOnEmptyString); } if (SubStringRevFilter.Safe(VAR_STRING)) { return new AuthorRevFilter.SubStringSearch(VAR_STRING); } return new AuthorRevFilter.PatternSearch(VAR_STRING); }
public NotImplementedFunctionException(string VAR_STRING) : base(functionName) { this.VAR_STRING = VAR_STRING; }
public virtual DeleteResourceResponse METHOD_NAME(DeleteResourceRequest VAR_DELETERESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteResourceResponseUnmarshaller.Instance; return Invoke<DeleteResourceResponse>(VAR_DELETERESOURCEREQUEST, VAR_VAR); }
public PaletteRecord() { PColor[] VAR_PCOLOR[] = CreateDefaultPalette(); field_2_colors = new List<PColor>(VAR_PCOLOR[].Length); for (int i = LITERAL_INT; i < VAR_PCOLOR[].Length; i++) { field_2_colors.Add(VAR_PCOLOR[][i]); } }
public GetRepoBuildLogsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public override string METHOD_NAME() { return LITERAL_STRING + Dim + LITERAL_STRING + Label + LITERAL_STRING; }
public Break(int VAR_INT, int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); docSize = (int)float.Parse(VAR_STRING, CultureInfo.InvariantCulture); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, bool VAR_BOOL) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = -LITERAL_INT * ((VAR_DOUBLE * VAR_DOUBLE) + VAR_DOUBLE); } else { double VAR_DOUBLE = VAR_DOUBLE + LITERAL_INT; VAR_DOUBLE = (((LITERAL_INT - Math.Pow(VAR_DOUBLE, VAR_DOUBLE)) / VAR_DOUBLE) * (VAR_BOOL ? VAR_DOUBLE : LITERAL_INT) * VAR_DOUBLE - VAR_DOUBLE) / Math.Pow(VAR_DOUBLE, VAR_DOUBLE); } return VAR_DOUBLE; }
public int METHOD_NAME(java.io.File VAR_JAVA.IO.FILE) { return string.CompareOrdinal(this.getPath(), VAR_JAVA.IO.FILE.getPath()); }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Row).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Column).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public Credential() { RefreshDate = DateTime.UtcNow; }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K, K VAR_K) { return this.METHOD_NAME(VAR_K, java.util.TreeMap.Bound.INCLUSIVE, VAR_K, java.util.TreeMap.Bound.EXCLUSIVE); }
public virtual DescribeLedgerResponse METHOD_NAME(DescribeLedgerRequest VAR_DESCRIBELEDGERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLedgerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLedgerResponseUnmarshaller.Instance; return Invoke<DescribeLedgerResponse>(VAR_DESCRIBELEDGERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return noPrefix; }
public static Policy METHOD_NAME(string VAR_STRING) { return JsonPolicyReader.ReadJsonStringToPolicy(VAR_STRING); }
public virtual GetPhoneNumberResponse METHOD_NAME(GetPhoneNumberRequest VAR_GETPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPhoneNumberResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberResponse>(VAR_GETPHONENUMBERREQUEST, VAR_VAR); }
public static void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT, String VAR_STRING) { int VAR_INT = VAR_STRING.Length; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); bool VAR_BOOL = HasMultibyte(VAR_STRING); VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_BOOL ? LITERAL_INT : LITERAL_INT); if (VAR_BOOL) { PutUnicodeLE(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } else { PutCompressedUnicode(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } }
public virtual DescribeCoipPoolsResponse METHOD_NAME(DescribeCoipPoolsRequest VAR_DESCRIBECOIPPOOLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCoipPoolsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCoipPoolsResponseUnmarshaller.Instance; return Invoke<DescribeCoipPoolsResponse>(VAR_DESCRIBECOIPPOOLSREQUEST, VAR_VAR); }
public void METHOD_NAME(IRow VAR_IROW) { if (VAR_IROW.Sheet != this) { throw new ArgumentException(LITERAL_STRING); } foreach (ICell cell in VAR_IROW) { HSSFCell VAR_HSSFCELL = (HSSFCell)cell; if (VAR_HSSFCELL.IsPartOfArrayFormulaGroup) { String VAR_STRING = LITERAL_STRING + VAR_IROW.RowNum + LITERAL_STRING; VAR_HSSFCELL.NotifyArrayFormulaChanging(VAR_STRING); } } if (rows.Count > LITERAL_INT) { int VAR_INT = VAR_IROW.RowNum; HSSFRow VAR_HSSFROW = (HSSFRow)rows[VAR_INT]; rows.Remove(VAR_INT); if (VAR_HSSFROW != VAR_IROW) { if (VAR_HSSFROW != LITERAL_NULL) { rows[VAR_INT] = VAR_HSSFROW; } throw new InvalidOperationException(LITERAL_STRING); } if (VAR_IROW.RowNum == LastRowNum) { lastrow = FindLastRow(lastrow); } if (VAR_IROW.RowNum == FirstRowNum) { firstrow = FindFirstRow(firstrow); } CellValueRecordInterface[] VAR_CELLVALUERECORDINTERFACE[] = _sheet.GetValueRecords(); for (int i = LITERAL_INT; i < VAR_CELLVALUERECORDINTERFACE[].Length; i++) { if (VAR_CELLVALUERECORDINTERFACE[][i].Row == VAR_INT) { _sheet.RemoveValueRecord(VAR_INT, VAR_CELLVALUERECORDINTERFACE[][i]); } } _sheet.METHOD_NAME(((HSSFRow)VAR_IROW).RowRecord); } }
public static TreeFilter METHOD_NAME(ICollection<TreeFilter> VAR_ICOLLECTION<TREEFILTER>) { if (VAR_ICOLLECTION<TREEFILTER>.Count < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[VAR_ICOLLECTION<TREEFILTER>.Count]; Sharpen.Collections.ToArray(VAR_ICOLLECTION<TREEFILTER>, VAR_TREEFILTER[]); if (VAR_TREEFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_TREEFILTER[][LITERAL_INT], VAR_TREEFILTER[][LITERAL_INT]); } return new OrTreeFilter.List(VAR_TREEFILTER[]); }
public SpanOrTermsBuilder(Analyzer VAR_ANALYZER) { this.VAR_ANALYZER = VAR_ANALYZER; }
public override bool METHOD_NAME() { return byteBuffer.METHOD_NAME(); }
public void METHOD_NAME(CellRangeAddressBase VAR_CELLRANGEADDRESSBASE) { int VAR_INT = SetVerticalCellRange(dataValues, VAR_CELLRANGEADDRESSBASE); series.NumValues = (short)VAR_INT; }
public virtual ModifyGlobalReplicationGroupResponse METHOD_NAME(ModifyGlobalReplicationGroupRequest VAR_MODIFYGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<ModifyGlobalReplicationGroupResponse>(VAR_MODIFYGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public virtual CreateTrialResponse METHOD_NAME(CreateTrialRequest VAR_CREATETRIALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrialRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrialResponseUnmarshaller.Instance; return Invoke<CreateTrialResponse>(VAR_CREATETRIALREQUEST, VAR_VAR); }
public void METHOD_NAME() { List<Property> VAR_LIST<PROPERTY> = new List<Property>(_properties.Count); for (int i = LITERAL_INT; i < _properties.Count; i++) VAR_LIST<PROPERTY>.Add(_properties[i]); for (int k = LITERAL_INT; k < VAR_LIST<PROPERTY>.Count; k++) { VAR_LIST<PROPERTY>[k].Index = k; } _blocks = PropertyBlock.CreatePropertyBlockArray(_bigBigBlockSize, VAR_LIST<PROPERTY>); for (int k = LITERAL_INT; k < VAR_LIST<PROPERTY>.Count; k++) { VAR_LIST<PROPERTY>[k].METHOD_NAME(); } }
public virtual E METHOD_NAME() { return backingMap.firstKey(); }
public override int METHOD_NAME() { return data.Length - ptr; }
public virtual GetHostedZoneCountResponse METHOD_NAME(GetHostedZoneCountRequest VAR_GETHOSTEDZONECOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHostedZoneCountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHostedZoneCountResponseUnmarshaller.Instance; return Invoke<GetHostedZoneCountResponse>(VAR_GETHOSTEDZONECOUNTREQUEST, VAR_VAR); }
public LookupResult[] METHOD_NAME() { int VAR_INT = Count; var VAR_VAR = new LookupResult[VAR_INT]; for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { VAR_VAR[i] = Pop(); } return VAR_VAR; }
public void METHOD_NAME(Transition VAR_TRANSITION) { if (transitions.Length == count) { Transition[] VAR_TRANSITION[] = new Transition[ArrayUtil.Oversize(LITERAL_INT + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; Array.Copy(transitions, LITERAL_INT, VAR_TRANSITION[], LITERAL_INT, count); transitions = VAR_TRANSITION[]; } transitions[count++] = VAR_TRANSITION; }
public String METHOD_NAME(int VAR_INT) { String VAR_STRING = LITERAL_NULL; if (VAR_INT >= HSSFDataFormat.NumberOfBuiltinBuiltinFormats) { FormatRecord VAR_FORMATRECORD = (FormatRecord)customFormatRecords[VAR_INT]; if (VAR_FORMATRECORD == LITERAL_NULL) { logger.Log(POILogger.ERROR, LITERAL_STRING + VAR_INT + LITERAL_STRING); } else { VAR_STRING = VAR_FORMATRECORD.FormatString; } } else { VAR_STRING = HSSFDataFormat.GetBuiltinFormat((short)VAR_INT); } return VAR_STRING; }
public virtual DisassociateDelegateFromResourceResponse METHOD_NAME(DisassociateDelegateFromResourceRequest VAR_DISASSOCIATEDELEGATEFROMRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateDelegateFromResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateDelegateFromResourceResponseUnmarshaller.Instance; return Invoke<DisassociateDelegateFromResourceResponse>(VAR_DISASSOCIATEDELEGATEFROMRESOURCEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual StartDocumentClassificationJobResponse METHOD_NAME(StartDocumentClassificationJobRequest VAR_STARTDOCUMENTCLASSIFICATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDocumentClassificationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDocumentClassificationJobResponseUnmarshaller.Instance; return Invoke<StartDocumentClassificationJobResponse>(VAR_STARTDOCUMENTCLASSIFICATIONJOBREQUEST, VAR_VAR); }
public sealed override object METHOD_NAME() { return protectedArray(); }
public virtual void METHOD_NAME() { ObjectDirectory VAR_OBJECTDIRECTORY = ((ObjectDirectory)repo.ObjectDatabase); ICollection<PackFile> VAR_ICOLLECTION<PACKFILE> = VAR_OBJECTDIRECTORY.GetPacks(); FilePath VAR_FILEPATH = repo.ObjectsDirectory; string[] VAR_STRING[] = VAR_FILEPATH.List(); if (VAR_STRING[] != LITERAL_NULL && VAR_STRING[].Length > LITERAL_INT) { pm.BeginTask(JGitText.Get().pruneLoosePackedObjects, VAR_STRING[].Length); try { foreach (string d in VAR_STRING[]) { pm.Update(LITERAL_INT); if (d.Length != LITERAL_INT) { continue; } string[] VAR_STRING[] = new FilePath(VAR_FILEPATH, d).List(); if (VAR_STRING[] == LITERAL_NULL) { continue; } foreach (string e in VAR_STRING[]) { if (e.Length != Constants.OBJECT_ID_STRING_LENGTH - LITERAL_INT) { continue; } ObjectId VAR_OBJECTID; try { VAR_OBJECTID = ObjectId.FromString(d + e); } catch (ArgumentException) { continue; } bool VAR_BOOL = false; foreach (PackFile p in VAR_ICOLLECTION<PACKFILE>) { if (p.HasObject(VAR_OBJECTID)) { VAR_BOOL = true; break; } } if (VAR_BOOL) { FileUtils.Delete(VAR_OBJECTDIRECTORY.FileFor(VAR_OBJECTID), FileUtils.RETRY | FileUtils.SKIP_MISSING | FileUtils.IGNORE_ERRORS); } } } } finally { pm.EndTask(); } } }
public virtual ListJobsByPipelineResponse METHOD_NAME(ListJobsByPipelineRequest VAR_LISTJOBSBYPIPELINEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJobsByPipelineRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJobsByPipelineResponseUnmarshaller.Instance; return Invoke<ListJobsByPipelineResponse>(VAR_LISTJOBSBYPIPELINEREQUEST, VAR_VAR); }
public SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual DeleteDhcpOptionsResponse METHOD_NAME(DeleteDhcpOptionsRequest VAR_DELETEDHCPOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDhcpOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDhcpOptionsResponseUnmarshaller.Instance; return Invoke<DeleteDhcpOptionsResponse>(VAR_DELETEDHCPOPTIONSREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT) { return _iBook.FindSheetLastNameFromExternSheet(VAR_INT); }
public InMemorySorter(IComparer<BytesRef> VAR_ICOMPARER<BYTESREF>) { this.VAR_ICOMPARER<BYTESREF> = VAR_ICOMPARER<BYTESREF>; }
public virtual bool METHOD_NAME() { return true; }
public static ValueEval METHOD_NAME(AreaEval VAR_AREAEVAL, int VAR_INT, int VAR_INT) { ValueEval VAR_VALUEEVAL = ChooseSingleElementFromAreaInternal(VAR_AREAEVAL, VAR_INT, VAR_INT); if (VAR_VALUEEVAL is ErrorEval) { throw new EvaluationException((ErrorEval)VAR_VALUEEVAL); } return VAR_VALUEEVAL; }
public int METHOD_NAME(int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT); int VAR_INT; int VAR_INT; if (VAR_INT > freeBlocks) { VAR_INT = LITERAL_INT; VAR_INT = freeBlocks; } else { VAR_INT = freeBlocks - VAR_INT; VAR_INT = VAR_INT; } while (freeBlocks > VAR_INT) { freeByteBlocks[--freeBlocks] = LITERAL_NULL; } bytesUsed.AddAndGet(-VAR_INT * m_blockSize); Debug.Assert(bytesUsed.Get() >= LITERAL_INT); return VAR_INT; }
public static string METHOD_NAME(string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) { return string.Empty; } var VAR_VAR = new StringBuilder(VAR_STRING.Length); for (int index = LITERAL_INT; index < VAR_STRING.Length; index++) { char VAR_CHAR = VAR_STRING[index]; switch (VAR_CHAR) { case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; case LITERAL_CHAR: VAR_VAR.Append(LITERAL_STRING); break; default: if (VAR_CHAR < LITERAL_INT) { VAR_VAR.Append(VAR_CHAR); } else { VAR_VAR.Append(LITERAL_STRING).Append((int)VAR_CHAR).Append(LITERAL_STRING); } break; } } return VAR_VAR.ToString(); }
public virtual bool METHOD_NAME() { return reuseDeltas; }
public static int METHOD_NAME(string VAR_STRING) { return LITERAL_INT + VAR_STRING.Length; }
public virtual StartCelebrityRecognitionResponse METHOD_NAME(StartCelebrityRecognitionRequest VAR_STARTCELEBRITYRECOGNITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartCelebrityRecognitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<StartCelebrityRecognitionResponse>(VAR_STARTCELEBRITYRECOGNITIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { lock (this) { checkNotClosed(); if (VAR_BYTE[] == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } byte[] VAR_BYTE[] = buf; if (VAR_INT >= VAR_BYTE[].Length) { flushInternal(); @out.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); return; } java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); if (VAR_INT > (VAR_BYTE[].Length - count)) { flushInternal(); } System.Array.Copy(VAR_BYTE[], VAR_INT, VAR_BYTE[], count, VAR_INT); count += VAR_INT; } }
public int METHOD_NAME() { return _lei.ReadUShort(); }
public virtual ListProfileTimesResponse METHOD_NAME(ListProfileTimesRequest VAR_LISTPROFILETIMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProfileTimesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProfileTimesResponseUnmarshaller.Instance; return Invoke<ListProfileTimesResponse>(VAR_LISTPROFILETIMESREQUEST, VAR_VAR); }
public override TreeFilter METHOD_NAME() { TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_TREEFILTER[].Length; i++) { VAR_TREEFILTER[][i] = subfilters[i].METHOD_NAME(); } return new OrTreeFilter.List(VAR_TREEFILTER[]); }
public virtual ModifyClusterResponse METHOD_NAME(ModifyClusterRequest VAR_MODIFYCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterResponseUnmarshaller.Instance; return Invoke<ModifyClusterResponse>(VAR_MODIFYCLUSTERREQUEST, VAR_VAR); }
public virtual GetRouteResponsesResponse METHOD_NAME(GetRouteResponsesRequest VAR_GETROUTERESPONSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRouteResponsesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRouteResponsesResponseUnmarshaller.Instance; return Invoke<GetRouteResponsesResponse>(VAR_GETROUTERESPONSESREQUEST, VAR_VAR); }
public virtual IQueryMaker METHOD_NAME(ReadTask VAR_READTASK) { lock (this) { Type VAR_TYPE = VAR_READTASK.GetType(); IQueryMaker VAR_IQUERYMAKER; if (!readTaskQueryMaker.TryGetValue(VAR_TYPE, out VAR_IQUERYMAKER) || VAR_IQUERYMAKER == LITERAL_NULL) { try { VAR_IQUERYMAKER = (IQueryMaker)Activator.CreateInstance(qmkrClass); VAR_IQUERYMAKER.SetConfig(config); } catch (Exception e) { throw new Exception(e.ToString(), e); } readTaskQueryMaker[VAR_TYPE] = VAR_IQUERYMAKER; } return VAR_IQUERYMAKER; } }
public virtual bool METHOD_NAME(string VAR_STRING) { CredentialItem.YesNoType VAR_CREDENTIALITEM.YESNOTYPE = new CredentialItem.YesNoType(VAR_STRING); return provider.Get(uri, VAR_CREDENTIALITEM.YESNOTYPE) && VAR_CREDENTIALITEM.YESNOTYPE.GetValue(); }
public string METHOD_NAME() { CharsRef VAR_CHARSREF = new CharsRef(Length); UnicodeUtil.UTF8toUTF16(bytes, Offset, Length, VAR_CHARSREF); return VAR_CHARSREF.ToString(); }
public virtual ListCandidatesForAutoMLJobResponse METHOD_NAME(ListCandidatesForAutoMLJobRequest VAR_LISTCANDIDATESFORAUTOMLJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCandidatesForAutoMLJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCandidatesForAutoMLJobResponseUnmarshaller.Instance; return Invoke<ListCandidatesForAutoMLJobResponse>(VAR_LISTCANDIDATESFORAUTOMLJOBREQUEST, VAR_VAR); }
public String METHOD_NAME(IFormulaRenderingWorkbook VAR_IFORMULARENDERINGWORKBOOK) { return VAR_IFORMULARENDERINGWORKBOOK.ResolveNameXText(this); }
public virtual UpdateSkillGroupResponse METHOD_NAME(UpdateSkillGroupRequest VAR_UPDATESKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSkillGroupResponseUnmarshaller.Instance; return Invoke<UpdateSkillGroupResponse>(VAR_UPDATESKILLGROUPREQUEST, VAR_VAR); }
public string METHOD_NAME() { return RawParseUtils.Decode(enc, buffer, valStart, valEnd); }
public virtual ListAssociatedFleetsResponse METHOD_NAME(ListAssociatedFleetsRequest VAR_LISTASSOCIATEDFLEETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssociatedFleetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssociatedFleetsResponseUnmarshaller.Instance; return Invoke<ListAssociatedFleetsResponse>(VAR_LISTASSOCIATEDFLEETSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (children != LITERAL_NULL) { children.RemoveAt(children.Count - LITERAL_INT); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(MaxQueryTerms).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(MinWordLen).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(MaxWordLen).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); string VAR_STRING = LITERAL_STRING; foreach (string fieldName in FieldNames) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(fieldName); VAR_STRING = LITERAL_STRING; } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(ApplyBoost).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(MinTermFreq).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(MinDocFreq).Append(LITERAL_STRING); return VAR_STRINGBUILDER.ToString(); }
public virtual RunScheduledInstancesResponse METHOD_NAME(RunScheduledInstancesRequest VAR_RUNSCHEDULEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RunScheduledInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RunScheduledInstancesResponseUnmarshaller.Instance; return Invoke<RunScheduledInstancesResponse>(VAR_RUNSCHEDULEDINSTANCESREQUEST, VAR_VAR); }
public static bool METHOD_NAME(double VAR_DOUBLE) { return VAR_DOUBLE > -Double.Epsilon; }
public virtual NGit.Api.CreateBranchCommand METHOD_NAME(bool VAR_BOOL) { CheckCallable(); this.VAR_BOOL = VAR_BOOL; return this; }
public AbstractEscherHolderRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { escherRecords = new List<EscherRecord>(); if (!DESERIALISE) { rawDataContainer.Concatenate(VAR_RECORDINPUTSTREAM.ReadRemainder()); } else { byte[] VAR_BYTE[] = VAR_RECORDINPUTSTREAM.ReadAllContinuedRemainder(); ConvertToEscherRecords(LITERAL_INT, VAR_BYTE[].Length, VAR_BYTE[]); } }
public override int METHOD_NAME(int VAR_INT) { currentSentence += VAR_INT; if (VAR_INT < LITERAL_INT) { if (text.Index == text.EndIndex) { ++currentSentence; } if (currentSentence < LITERAL_INT) { currentSentence = LITERAL_INT; text.SetIndex(text.BeginIndex); return Done; } else { text.SetIndex(sentenceStarts[currentSentence]); } } else if (VAR_INT > LITERAL_INT) { if (currentSentence >= sentenceStarts.Length) { currentSentence = sentenceStarts.Length - LITERAL_INT; text.SetIndex(text.EndIndex); return Done; } else { text.SetIndex(sentenceStarts[currentSentence]); } } return Current; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } RunAutomaton VAR_RUNAUTOMATON = (RunAutomaton)VAR_OBJECT; if (m_initial != VAR_RUNAUTOMATON.m_initial) { return false; } if (_maxInterval != VAR_RUNAUTOMATON._maxInterval) { return false; } if (_size != VAR_RUNAUTOMATON._size) { return false; } if (!Arrays.METHOD_NAME(_points, VAR_RUNAUTOMATON._points)) { return false; } if (!Arrays.METHOD_NAME(m_accept, VAR_RUNAUTOMATON.m_accept)) { return false; } if (!Arrays.METHOD_NAME(m_transitions, VAR_RUNAUTOMATON.m_transitions)) { return false; } return true; }
public virtual void METHOD_NAME(long VAR_LONG) { this.VAR_LONG = VAR_LONG; }
public virtual DescribeKeyPairsResponse METHOD_NAME() { return METHOD_NAME(new DescribeKeyPairsRequest()); }
public virtual IParseTree METHOD_NAME(string VAR_STRING) { IList<IParseTree> VAR_ILIST<IPARSETREE> = labels.METHOD_NAME(VAR_STRING); if (VAR_ILIST<IPARSETREE> == LITERAL_NULL || VAR_ILIST<IPARSETREE>.Count == LITERAL_INT) { return LITERAL_NULL; } return VAR_ILIST<IPARSETREE>[VAR_ILIST<IPARSETREE>.Count - LITERAL_INT]; }
public virtual ListRecordsResponse METHOD_NAME(ListRecordsRequest VAR_LISTRECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRecordsResponseUnmarshaller.Instance; return Invoke<ListRecordsResponse>(VAR_LISTRECORDSREQUEST, VAR_VAR); }
public virtual DetectStackResourceDriftResponse METHOD_NAME(DetectStackResourceDriftRequest VAR_DETECTSTACKRESOURCEDRIFTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectStackResourceDriftRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectStackResourceDriftResponseUnmarshaller.Instance; return Invoke<DetectStackResourceDriftResponse>(VAR_DETECTSTACKRESOURCEDRIFTREQUEST, VAR_VAR); }
public string METHOD_NAME(string VAR_STRING) { return HtmlEncode(VAR_STRING); }
public override ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE) { if (invert) { return new List<IParseTree>(); } return Trees.Descendants(VAR_IPARSETREE); }
public virtual DeleteUsagePlanKeyResponse METHOD_NAME(DeleteUsagePlanKeyRequest VAR_DELETEUSAGEPLANKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUsagePlanKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUsagePlanKeyResponseUnmarshaller.Instance; return Invoke<DeleteUsagePlanKeyResponse>(VAR_DELETEUSAGEPLANKEYREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return localName; }
public virtual DeleteDocumentResponse METHOD_NAME(DeleteDocumentRequest VAR_DELETEDOCUMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDocumentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDocumentResponseUnmarshaller.Instance; return Invoke<DeleteDocumentResponse>(VAR_DELETEDOCUMENTREQUEST, VAR_VAR); }
public int METHOD_NAME(String VAR_STRING) { int VAR_INT = _uBook.GetSheetIndex(VAR_STRING); return _iBook.CheckExternSheet(VAR_INT); }
public IdentityEncoder(Encoding VAR_ENCODING) { this.m_charset = VAR_ENCODING; }
public static SupBookRecord METHOD_NAME(short VAR_SHORT) { return new SupBookRecord(false, VAR_SHORT); }
public virtual CreateDBInstanceReadReplicaResponse METHOD_NAME(CreateDBInstanceReadReplicaRequest VAR_CREATEDBINSTANCEREADREPLICAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBInstanceReadReplicaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBInstanceReadReplicaResponseUnmarshaller.Instance; return Invoke<CreateDBInstanceReadReplicaResponse>(VAR_CREATEDBINSTANCEREADREPLICAREQUEST, VAR_VAR); }
public virtual DescribePartnerEventSourceResponse METHOD_NAME(DescribePartnerEventSourceRequest VAR_DESCRIBEPARTNEREVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePartnerEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePartnerEventSourceResponseUnmarshaller.Instance; return Invoke<DescribePartnerEventSourceResponse>(VAR_DESCRIBEPARTNEREVENTSOURCEREQUEST, VAR_VAR); }
public virtual EnterStandbyResponse METHOD_NAME(EnterStandbyRequest VAR_ENTERSTANDBYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnterStandbyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnterStandbyResponseUnmarshaller.Instance; return Invoke<EnterStandbyResponse>(VAR_ENTERSTANDBYREQUEST, VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public CreateCloudFrontOriginAccessIdentityRequest(CloudFrontOriginAccessIdentityConfig VAR_CLOUDFRONTORIGINACCESSIDENTITYCONFIG) { _cloudFrontOriginAccessIdentityConfig = VAR_CLOUDFRONTORIGINACCESSIDENTITYCONFIG; }
public virtual ResetFpgaImageAttributeResponse METHOD_NAME(ResetFpgaImageAttributeRequest VAR_RESETFPGAIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetFpgaImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetFpgaImageAttributeResponseUnmarshaller.Instance; return Invoke<ResetFpgaImageAttributeResponse>(VAR_RESETFPGAIMAGEATTRIBUTEREQUEST, VAR_VAR); }
public void METHOD_NAME(ContinuableRecordOutput VAR_CONTINUABLERECORDOUTPUT) { VAR_CONTINUABLERECORDOUTPUT.WriteInt(_numStrings); VAR_CONTINUABLERECORDOUTPUT.WriteInt(_numUniqueStrings); for (int k = LITERAL_INT; k < strings.Size; k++) { if (k % ExtSSTRecord.DEFAULT_BUCKET_SIZE == LITERAL_INT) { int VAR_INT = VAR_CONTINUABLERECORDOUTPUT.TotalSize; int VAR_INT = k / ExtSSTRecord.DEFAULT_BUCKET_SIZE; if (VAR_INT < ExtSSTRecord.MAX_BUCKETS) { bucketAbsoluteOffsets[VAR_INT] = VAR_INT; bucketRelativeOffsets[VAR_INT] = VAR_INT; } } UnicodeString VAR_UNICODESTRING = GetUnicodeString(k); VAR_UNICODESTRING.METHOD_NAME(VAR_CONTINUABLERECORDOUTPUT); } }
public virtual DeleteGroupMembershipResponse METHOD_NAME(DeleteGroupMembershipRequest VAR_DELETEGROUPMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGroupMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGroupMembershipResponseUnmarshaller.Instance; return Invoke<DeleteGroupMembershipResponse>(VAR_DELETEGROUPMEMBERSHIPREQUEST, VAR_VAR); }
public virtual GetHostedZoneCountResponse METHOD_NAME() { return METHOD_NAME(new GetHostedZoneCountRequest()); }
public NameXPtg METHOD_NAME(String VAR_STRING, int VAR_INT) { for (int i = LITERAL_INT; i < _externalBookBlocks.Length; i++) { int VAR_INT = _externalBookBlocks[i].GetIndexOfName(VAR_STRING); if (VAR_INT < LITERAL_INT) { continue; } int VAR_INT = FindRefIndexFromExtBookIndex(i); if (VAR_INT >= LITERAL_INT) { if (VAR_INT == -LITERAL_INT || VAR_INT == VAR_INT) { return new NameXPtg(VAR_INT, VAR_INT); } } } return LITERAL_NULL; }
public virtual E METHOD_NAME() { return removeFirstImpl(); }
public void METHOD_NAME(ET VAR_ET) { if (expectedModCount == list.modCount) { if (lastLink != LITERAL_NULL) { lastLink.data = VAR_ET; } else { throw new System.InvalidOperationException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public ElisionFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { articlesFile = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override int[] METHOD_NAME() { int[] VAR_INT[] = base.METHOD_NAME(); if (start.Length < VAR_INT[].Length) { start = ArrayUtil.METHOD_NAME(start, VAR_INT[].Length); end = ArrayUtil.METHOD_NAME(end, VAR_INT[].Length); freq = ArrayUtil.METHOD_NAME(freq, VAR_INT[].Length); } Debug.Assert(start.Length >= VAR_INT[].Length); Debug.Assert(end.Length >= VAR_INT[].Length); Debug.Assert(freq.Length >= VAR_INT[].Length); return VAR_INT[]; }
public virtual GetPersonalizedRankingResponse METHOD_NAME(GetPersonalizedRankingRequest VAR_GETPERSONALIZEDRANKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPersonalizedRankingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPersonalizedRankingResponseUnmarshaller.Instance; return Invoke<GetPersonalizedRankingResponse>(VAR_GETPERSONALIZEDRANKINGREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME() { return ObjectId.FromRaw(IdBuffer, IdOffset); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(FirstRow); VAR_ILITTLEENDIANOUTPUT.WriteInt(LastRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstCol); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastCol); VAR_ILITTLEENDIANOUTPUT.WriteShort((short)LITERAL_INT); }
protected internal RmCommand(Repository VAR_REPOSITORY) : base(repo) { filepatterns = new List<string>(); }
public override void METHOD_NAME(Parser VAR_PARSER, RecognitionException VAR_RECOGNITIONEXCEPTION) { for (ParserRuleContext context = VAR_PARSER.Context; context != LITERAL_NULL; context = ((ParserRuleContext)context.Parent)) { context.exception = VAR_RECOGNITIONEXCEPTION; } throw new ParseCanceledException(VAR_RECOGNITIONEXCEPTION); }
public static BATBlock METHOD_NAME(POIFSBigBlockSize VAR_POIFSBIGBLOCKSIZE, ByteBuffer VAR_BYTEBUFFER) { BATBlock VAR_BATBLOCK = new BATBlock(VAR_POIFSBIGBLOCKSIZE); byte[] VAR_BYTE[] = new byte[LittleEndianConsts.INT_SIZE]; for (int i = LITERAL_INT; i < VAR_BATBLOCK._values.Length; i++) { VAR_BYTEBUFFER.Read(VAR_BYTE[]); VAR_BATBLOCK._values[i] = LittleEndian.GetInt(VAR_BYTE[]); } VAR_BATBLOCK.RecomputeFree(); return VAR_BATBLOCK; }
public virtual byte[] METHOD_NAME() { long VAR_LONG = Length(); if (int.MaxValue < VAR_LONG) { throw new OutOfMemoryException(JGitText.Get().lengthExceedsMaximumArraySize); } byte[] VAR_BYTE[] = new byte[(int)VAR_LONG]; int VAR_INT = LITERAL_INT; foreach (TemporaryBuffer.Block b in blocks) { System.Array.Copy(b.buffer, LITERAL_INT, VAR_BYTE[], VAR_INT, b.count); VAR_INT += b.count; } return VAR_BYTE[]; }
public short METHOD_NAME(short VAR_SHORT) { return (short)this.Clear(VAR_SHORT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); String VAR_STRING = RecordName; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(Row)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(Column)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(XFIndex)).Append(LITERAL_STRING); AppendValueText(VAR_STRINGBUILDER); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public IllegalFormatCodePointException(int VAR_INT) { this.VAR_INT = VAR_INT; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { return LITERAL_STRING + this.schema + LITERAL_STRING + this.value + LITERAL_STRING; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL[][LITERAL_INT], VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex); int VAR_INT = (int)NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL[][LITERAL_INT], VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex); if (VAR_DOUBLE >= LITERAL_INT && VAR_DOUBLE < LITERAL_INT) { VAR_DOUBLE = LITERAL_INT; } DateTime VAR_DATETIME = DateUtil.GetJavaDate(VAR_DOUBLE, false); DateTime VAR_DATETIME = VAR_DATETIME.AddMonths(VAR_INT); VAR_DATETIME = VAR_DATETIME.AddMonths(LITERAL_INT); VAR_DATETIME = new DateTime(VAR_DATETIME.Year, VAR_DATETIME.Month, LITERAL_INT); VAR_DATETIME = VAR_DATETIME.AddDays(-LITERAL_INT); return new NumberEval(DateUtil.GetExcelDate(VAR_DATETIME)); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public UnicodeString METHOD_NAME(int VAR_INT) { if (sst == LITERAL_NULL) { InsertSST(); } UnicodeString VAR_UNICODESTRING = sst.GetString(VAR_INT); return VAR_UNICODESTRING; }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR); int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; for (; VAR_INT < VAR_STRING.Length; VAR_INT++) { switch (VAR_STRING[VAR_INT]) { case LITERAL_CHAR: case LITERAL_CHAR: { VAR_STRINGBUILDER.AppendRange(VAR_STRING, VAR_INT, VAR_INT); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_STRING[VAR_INT]); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_INT = VAR_INT + LITERAL_INT; break; } } } VAR_STRINGBUILDER.AppendRange(VAR_STRING, VAR_INT, VAR_INT); VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.ToString(); }
public void METHOD_NAME() { lastElement = LITERAL_INT; currentOffset = LITERAL_INT; Array.METHOD_NAME(offsets, LITERAL_INT, offsets.Length); pool.Reset(false, true); }
public ReplaceableItem(string VAR_STRING, List<ReplaceableAttribute> VAR_LIST<REPLACEABLEATTRIBUTE>) { _name = VAR_STRING; _attributes = VAR_LIST<REPLACEABLEATTRIBUTE>; }
public virtual int METHOD_NAME() { return score; }
public IrishLowerCaseFilter(TokenStream VAR_TOKENSTREAM) : base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual void METHOD_NAME(int VAR_INT) { lock (this) { if (mIndeterminate) { return; } if (VAR_INT < LITERAL_INT) { VAR_INT = LITERAL_INT; } if (VAR_INT > mMax) { VAR_INT = mMax; } if (VAR_INT != mSecondaryProgress) { mSecondaryProgress = VAR_INT; refreshProgress(android.@internal.R.id.VAR_INT, mSecondaryProgress, false); } } }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public virtual IList<IToken> METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, -LITERAL_INT); }
public DataValidityTable() { _headerRec = new DVALRecord(); _validationList = new ArrayList(); }
public EvaluationException(ErrorEval VAR_ERROREVAL) { _errorEval = VAR_ERROREVAL; }
public UpdateConfigurationTemplateRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _templateName = VAR_STRING; }
public virtual DescribeAvailabilityZonesResponse METHOD_NAME(DescribeAvailabilityZonesRequest VAR_DESCRIBEAVAILABILITYZONESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAvailabilityZonesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAvailabilityZonesResponseUnmarshaller.Instance; return Invoke<DescribeAvailabilityZonesResponse>(VAR_DESCRIBEAVAILABILITYZONESREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public NumericPayloadTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { payload = RequireSingle(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); typeMatch = Require(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { VAR_LONG[][VAR_INT++] = VAR_BYTE[][VAR_INT++] & LITERAL_INT; } }
public virtual DescribeResourcePermissionsResponse METHOD_NAME(DescribeResourcePermissionsRequest VAR_DESCRIBERESOURCEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeResourcePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeResourcePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeResourcePermissionsResponse>(VAR_DESCRIBERESOURCEPERMISSIONSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return delegator.METHOD_NAME(VAR_TOKENSTREAM); }
public virtual IList<string> METHOD_NAME() { return METHOD_NAME(_ctx); }
public virtual void METHOD_NAME(char VAR_CHAR) { if (m_len >= m_buf.Length) { Resize(m_len + LITERAL_INT); } UnsafeWrite(VAR_CHAR); }
public virtual void METHOD_NAME() { map.METHOD_NAME(); }
public virtual DeleteWorkteamResponse METHOD_NAME(DeleteWorkteamRequest VAR_DELETEWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteWorkteamResponseUnmarshaller.Instance; return Invoke<DeleteWorkteamResponse>(VAR_DELETEWORKTEAMREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME() + LITERAL_STRING + b.METHOD_NAME() + LITERAL_STRING; }
public override TreeFilter METHOD_NAME() { TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_TREEFILTER[].Length; i++) { VAR_TREEFILTER[][i] = subfilters[i].METHOD_NAME(); } return new AndTreeFilter.List(VAR_TREEFILTER[]); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(changeType); VAR_STRINGBUILDER.Append(LITERAL_STRING); switch (changeType) { case DiffEntry.ChangeType.ADD: { VAR_STRINGBUILDER.Append(newPath); break; } case DiffEntry.ChangeType.COPY: { VAR_STRINGBUILDER.Append(oldPath + LITERAL_STRING + newPath); break; } case DiffEntry.ChangeType.DELETE: { VAR_STRINGBUILDER.Append(oldPath); break; } case DiffEntry.ChangeType.MODIFY: { VAR_STRINGBUILDER.Append(oldPath); break; } case DiffEntry.ChangeType.RENAME: { VAR_STRINGBUILDER.Append(oldPath + LITERAL_STRING + newPath); break; } } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateRepositoryResponse METHOD_NAME(CreateRepositoryRequest VAR_CREATEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRepositoryResponseUnmarshaller.Instance; return Invoke<CreateRepositoryResponse>(VAR_CREATEREPOSITORYREQUEST, VAR_VAR); }
public static string METHOD_NAME(int VAR_INT) { return METHOD_NAME((long)VAR_INT, LITERAL_INT); }
public LineFormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_lineColor = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_linePattern = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_weight = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_format = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_colourPaletteIndex = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual DescribeClusterResponse METHOD_NAME(DescribeClusterRequest VAR_DESCRIBECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterResponseUnmarshaller.Instance; return Invoke<DescribeClusterResponse>(VAR_DESCRIBECLUSTERREQUEST, VAR_VAR); }
public UserAgent METHOD_NAME() { return userAgentConfig; }
public virtual float METHOD_NAME() { string VAR_STRING = termAtt.ToString(); WeightedTerm VAR_WEIGHTEDTERM; if (!termsToFind.TryGetValue(VAR_STRING, out VAR_WEIGHTEDTERM) || VAR_WEIGHTEDTERM == LITERAL_NULL) { return LITERAL_INT; } if (!uniqueTermsInFragment.Contains(VAR_STRING)) { totalScore += VAR_WEIGHTEDTERM.Weight; uniqueTermsInFragment.Add(VAR_STRING); } return VAR_WEIGHTEDTERM.Weight; }
public void METHOD_NAME() { arrays.METHOD_NAME(); }
public virtual DescribeEndpointsResponse METHOD_NAME(DescribeEndpointsRequest VAR_DESCRIBEENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEndpointsResponseUnmarshaller.Instance; return Invoke<DescribeEndpointsResponse>(VAR_DESCRIBEENDPOINTSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + pathStr + LITERAL_STRING; }
public DictionaryCompoundWordTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); dictFile = Require(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); minWordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE); minSubwordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE); maxSubwordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE); onlyLongestMatch = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual void METHOD_NAME(float VAR_FLOAT) { throw new System.NotImplementedException(); }
public virtual char[] METHOD_NAME() { char[] VAR_CHAR[] = new char[Length]; System.Array.Copy(m_buf, LITERAL_INT, VAR_CHAR[], LITERAL_INT, Length); return VAR_CHAR[]; }
public virtual IntervalSet METHOD_NAME() { if (recognizer != LITERAL_NULL) { return recognizer.Atn.METHOD_NAME(offendingState, ctx); } return LITERAL_NULL; }
public HindiNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual UpdateUserIdentityInfoResponse METHOD_NAME(UpdateUserIdentityInfoRequest VAR_UPDATEUSERIDENTITYINFOREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserIdentityInfoRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserIdentityInfoResponseUnmarshaller.Instance; return Invoke<UpdateUserIdentityInfoResponse>(VAR_UPDATEUSERIDENTITYINFOREQUEST, VAR_VAR); }
public Allocator(int VAR_INT) { this.m_blockSize = VAR_INT; }
public NoteMapMerger(Repository VAR_REPOSITORY, NoteMerger VAR_NOTEMERGER, MergeStrategy VAR_MERGESTRATEGY) { this.VAR_REPOSITORY = VAR_REPOSITORY; this.reader = VAR_REPOSITORY.NewObjectReader(); this.inserter = VAR_REPOSITORY.NewObjectInserter(); this.VAR_NOTEMERGER = VAR_NOTEMERGER; this.VAR_MERGESTRATEGY = VAR_MERGESTRATEGY; this.objectIdPrefix = new MutableObjectId(); }
public virtual ListAliasesResponse METHOD_NAME(ListAliasesRequest VAR_LISTALIASESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAliasesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAliasesResponseUnmarshaller.Instance; return Invoke<ListAliasesResponse>(VAR_LISTALIASESREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public IntList(int VAR_INT) { entries = new int[VAR_INT]; }
public virtual ReceiveCommand.Result METHOD_NAME() { return status; }
public virtual int METHOD_NAME() { return count; }
public virtual DescribeAccountAttributesResponse METHOD_NAME() { return METHOD_NAME(new DescribeAccountAttributesRequest()); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public StoredField(string VAR_STRING, long VAR_LONG) : base(name, TYPE) { FieldsData = new Int64(VAR_LONG); }
public GroupedFacetResult(int VAR_INT, int VAR_INT, bool VAR_BOOL, int VAR_INT, int VAR_INT) { this.facetEntries = new JCG.SortedSet<FacetEntry>(VAR_BOOL ? orderByCountAndValue : orderByValue); this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; maxSize = VAR_INT; currentMin = VAR_INT; }
public virtual FieldInfo METHOD_NAME(string VAR_STRING) { FieldInfo VAR_FIELDINFO; byName.TryGetValue(VAR_STRING, out VAR_FIELDINFO); return VAR_FIELDINFO; }
public int METHOD_NAME() { return _regionStart; }
public virtual int METHOD_NAME() { return port; }
public InterruptTimer(string VAR_STRING) { state = new InterruptTimer.AlarmState(); autoKiller = new InterruptTimer.AutoKiller(state); thread = new InterruptTimer.AlarmThread(VAR_STRING, state); thread.Start(); }
public HighFrequencyDictionary(IndexReader VAR_INDEXREADER, string VAR_STRING, float VAR_FLOAT) { this.VAR_INDEXREADER = VAR_INDEXREADER; this.VAR_STRING = VAR_STRING; this.VAR_FLOAT = VAR_FLOAT; }
public virtual ModifyDBProxyTargetGroupResponse METHOD_NAME(ModifyDBProxyTargetGroupRequest VAR_MODIFYDBPROXYTARGETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBProxyTargetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBProxyTargetGroupResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyTargetGroupResponse>(VAR_MODIFYDBPROXYTARGETGROUPREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public void METHOD_NAME() { arriving = LITERAL_NULL; leaving = LITERAL_NULL; }
public SetLoadBalancerListenerSSLCertificateRequest(string VAR_STRING, int VAR_INT, string VAR_STRING) { _loadBalancerName = VAR_STRING; _loadBalancerPort = VAR_INT; _sslCertificateId = VAR_STRING; }
public SpanTermQuery(Term VAR_TERM) { this.m_term = VAR_TERM; }
public override long METHOD_NAME() { long VAR_LONG = ((postingsReader != LITERAL_NULL) ? postingsReader.METHOD_NAME() : LITERAL_INT); foreach (FieldReader reader in fields.Values) { VAR_LONG += reader.METHOD_NAME(); } return VAR_LONG; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this.GetType() != VAR_OBJECT.GetType()) { return false; } var VAR_VAR = (DocFreqValueSource)VAR_OBJECT; return this.m_indexedField.METHOD_NAME(VAR_VAR.m_indexedField, StringComparison.Ordinal) && this.m_indexedBytes.METHOD_NAME(VAR_VAR.m_indexedBytes); }
public virtual Term METHOD_NAME(string VAR_STRING) { return new Term(VAR_STRING, Prefix); }
public override ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE) { return Trees.FindAllTokenNodes(VAR_IPARSETREE, tokenType); }
public static Signer METHOD_NAME(AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS) { if (VAR_ALIBABACLOUDCREDENTIALS is BearerTokenCredential) { return bearerTokenSigner; } return VAR_ALIBABACLOUDCREDENTIALS is KeyPairCredentials ? sha256withRSASigner : hmacSHA1Signer; }
public virtual PutAccountSendingAttributesResponse METHOD_NAME(PutAccountSendingAttributesRequest VAR_PUTACCOUNTSENDINGATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccountSendingAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccountSendingAttributesResponseUnmarshaller.Instance; return Invoke<PutAccountSendingAttributesResponse>(VAR_PUTACCOUNTSENDINGATTRIBUTESREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); if (VAR_INT == -LITERAL_INT) { return LITERAL_NULL; } else { return VAR_STRING.Substring(VAR_INT + LITERAL_INT, VAR_STRING.Length - (VAR_INT + LITERAL_INT)); } }
public virtual RunJobFlowResponse METHOD_NAME(RunJobFlowRequest VAR_RUNJOBFLOWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RunJobFlowRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RunJobFlowResponseUnmarshaller.Instance; return Invoke<RunJobFlowResponse>(VAR_RUNJOBFLOWREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return lastLength; }
public virtual ListStreamConsumersResponse METHOD_NAME(ListStreamConsumersRequest VAR_LISTSTREAMCONSUMERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStreamConsumersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStreamConsumersResponseUnmarshaller.Instance; return Invoke<ListStreamConsumersResponse>(VAR_LISTSTREAMCONSUMERSREQUEST, VAR_VAR); }
public static SimpleFraction METHOD_NAME(double VAR_DOUBLE, int VAR_INT) { return METHOD_NAME(VAR_DOUBLE, LITERAL_INT, VAR_INT, LITERAL_INT); }
public virtual void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { if (!METHOD_NAME(VAR_BYTESREF)) { throw new System.ArgumentException(LITERAL_STRING + VAR_BYTESREF + LITERAL_STRING); } }
public virtual NGit.Api.LsRemoteCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { String VAR_STRING; if (VAR_VALUEEVAL is RefEval) { RefEval VAR_REFEVAL = (RefEval)VAR_VALUEEVAL; VAR_STRING = OperandResolver.CoerceValueToString(VAR_REFEVAL.GetInnerValueEval(VAR_REFEVAL.FirstSheetIndex)); } else { VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); } try { return new NumberEval(BaseNumberUtils.ConvertToDecimal(VAR_STRING, HEXADECIMAL_BASE, MAX_NUMBER_OF_PLACES)); } catch (ArgumentException) { return ErrorEval.NUM_ERROR; } }
public virtual DescribeInstancesResponse METHOD_NAME() { return METHOD_NAME(new DescribeInstancesRequest()); }
public override ICollection<RevCommit> METHOD_NAME() { CheckCallable(); try { if (repo.GetRef(Constants.R_STASH) == LITERAL_NULL) { return Sharpen.Collections.EmptyList<RevCommit>(); } } catch (IOException e) { throw new InvalidRefNameException(MessageFormat.Format(JGitText.Get().cannotRead, Constants.R_STASH), e); } ReflogCommand VAR_REFLOGCOMMAND = new ReflogCommand(repo); VAR_REFLOGCOMMAND.SetRef(Constants.R_STASH); ICollection<ReflogEntry> VAR_ICOLLECTION<REFLOGENTRY> = VAR_REFLOGCOMMAND.METHOD_NAME(); if (VAR_ICOLLECTION<REFLOGENTRY>.IsEmpty()) { return Sharpen.Collections.EmptyList<RevCommit>(); } IList<RevCommit> VAR_ILIST<REVCOMMIT> = new AList<RevCommit>(VAR_ICOLLECTION<REFLOGENTRY>.Count); RevWalk VAR_REVWALK = new RevWalk(repo); VAR_REVWALK.SetRetainBody(true); try { foreach (ReflogEntry entry in VAR_ICOLLECTION<REFLOGENTRY>) { try { VAR_ILIST<REVCOMMIT>.AddItem(VAR_REVWALK.ParseCommit(entry.GetNewId())); } catch (IOException e) { throw new JGitInternalException(MessageFormat.Format(JGitText.Get().cannotReadCommit, entry.GetNewId()), e); } } } finally { VAR_REVWALK.Dispose(); } return VAR_ILIST<REVCOMMIT>; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteByte((byte)field_1_error_code); }
public virtual PutAccountSettingResponse METHOD_NAME(PutAccountSettingRequest VAR_PUTACCOUNTSETTINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccountSettingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccountSettingResponseUnmarshaller.Instance; return Invoke<PutAccountSettingResponse>(VAR_PUTACCOUNTSETTINGREQUEST, VAR_VAR); }
public static CharacterBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } return new CharacterBuffer(new char[VAR_INT], LITERAL_INT, LITERAL_INT); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } int VAR_INT = GeohashUtils.LookupHashLenForWidthHeight(VAR_DOUBLE, VAR_DOUBLE); return Math.Max(Math.Min(VAR_INT, m_maxLevels), LITERAL_INT); }
public override Search.Query METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { return MakeLuceneQueryNoBoost(VAR_BASICQUERYFACTORY); }
public virtual ListDedicatedIpPoolsResponse METHOD_NAME(ListDedicatedIpPoolsRequest VAR_LISTDEDICATEDIPPOOLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDedicatedIpPoolsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDedicatedIpPoolsResponseUnmarshaller.Instance; return Invoke<ListDedicatedIpPoolsResponse>(VAR_LISTDEDICATEDIPPOOLSREQUEST, VAR_VAR); }
public static ValueVector METHOD_NAME(RefEval VAR_REFEVAL) { return new SheetVector(VAR_REFEVAL); }
public virtual NGit.Api.RemoveNoteCommand METHOD_NAME(RevObject VAR_REVOBJECT) { CheckCallable(); this.VAR_REVOBJECT = VAR_REVOBJECT; return this; }
public int METHOD_NAME(String VAR_STRING) { return _uBook.METHOD_NAME(VAR_STRING); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_chartGroupIndex); }
public FontFormatting() : this(new byte[RAW_DATA_SIZE]) { FontHeight = -LITERAL_INT; IsItalic = false; IsFontWeightModified = false; IsOutlineOn = false; IsShadowOn = false; IsStruckout = false; EscapementType = (FontSuperScript)LITERAL_INT; UnderlineType = (FontUnderlineType)LITERAL_INT; FontColorIndex = (short)-LITERAL_INT; IsFontStyleModified = false; IsFontOutlineModified = false; IsFontShadowModified = false; IsFontCancellationModified = false; IsEscapementTypeModified = false; IsUnderlineTypeModified = false; SetShort(OFFSET_FONT_NAME, LITERAL_INT); SetInt(OFFSET_NOT_USED1, LITERAL_INT); SetInt(OFFSET_NOT_USED2, LITERAL_INT); SetInt(OFFSET_NOT_USED3, LITERAL_INT); SetShort(OFFSET_FONT_FORMATING_END, LITERAL_INT); }
public virtual GetFacetResponse METHOD_NAME(GetFacetRequest VAR_GETFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFacetResponseUnmarshaller.Instance; return Invoke<GetFacetResponse>(VAR_GETFACETREQUEST, VAR_VAR); }
public override object METHOD_NAME() { return (IndexInput)base.METHOD_NAME(); }
public override String METHOD_NAME() { throw new RecordFormatException(LITERAL_STRING); }
public virtual StartFleetResponse METHOD_NAME(StartFleetRequest VAR_STARTFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartFleetResponseUnmarshaller.Instance; return Invoke<StartFleetResponse>(VAR_STARTFLEETREQUEST, VAR_VAR); }
public static FontFamily METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case LITERAL_INT: return NOT_APPLICABLE; case LITERAL_INT: return ROMAN; case LITERAL_INT: return SWISS; case LITERAL_INT: return MODERN; case LITERAL_INT: return SCRIPT; case LITERAL_INT: return DECORATIVE; } return NOT_APPLICABLE; }
public override bool METHOD_NAME() { lock (this) { return _size == LITERAL_INT; } }
public static string METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public virtual DescribeBackupsResponse METHOD_NAME(DescribeBackupsRequest VAR_DESCRIBEBACKUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBackupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBackupsResponseUnmarshaller.Instance; return Invoke<DescribeBackupsResponse>(VAR_DESCRIBEBACKUPSREQUEST, VAR_VAR); }
public ReflectionMethodRecordCreator(MethodInfo VAR_METHODINFO) { _m = VAR_METHODINFO; }
public static int METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { return GetSingleViableAlt(VAR_IENUMERABLE<BITSET>); }
public virtual GetGatewayResponse METHOD_NAME(GetGatewayRequest VAR_GETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGatewayResponseUnmarshaller.Instance; return Invoke<GetGatewayResponse>(VAR_GETGATEWAYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { updateDropDownForFilter(VAR_INT); }
public override bool METHOD_NAME() { return true; }
public FreeRefFunction METHOD_NAME(String VAR_STRING) { return _bookEvaluator.METHOD_NAME(VAR_STRING); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is SemanticContext.PrecedencePredicate)) { return false; } if (this == VAR_OBJECT) { return true; } SemanticContext.PrecedencePredicate VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE = (SemanticContext.PrecedencePredicate)VAR_OBJECT; return this.precedence == VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE.precedence; }
public int METHOD_NAME(String VAR_STRING) { int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { VAR_INT += GetCharWidth(VAR_STRING[i]); } return VAR_INT; }
public ByteVector(byte[] VAR_BYTE[]) { blockSize = DEFAULT_BLOCK_SIZE; array = VAR_BYTE[]; n = LITERAL_INT; }
public virtual DeleteVerifiedEmailAddressResponse METHOD_NAME(DeleteVerifiedEmailAddressRequest VAR_DELETEVERIFIEDEMAILADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVerifiedEmailAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVerifiedEmailAddressResponseUnmarshaller.Instance; return Invoke<DeleteVerifiedEmailAddressResponse>(VAR_DELETEVERIFIEDEMAILADDRESSREQUEST, VAR_VAR); }
public virtual DescribeScalingActivitiesResponse METHOD_NAME(DescribeScalingActivitiesRequest VAR_DESCRIBESCALINGACTIVITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScalingActivitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScalingActivitiesResponseUnmarshaller.Instance; return Invoke<DescribeScalingActivitiesResponse>(VAR_DESCRIBESCALINGACTIVITIESREQUEST, VAR_VAR); }
public SimpleQueryParser(Analyzer VAR_ANALYZER, string VAR_STRING) : this(analyzer, new JCG.Dictionary<string, float>() { { field, LITERAL_FLOAT } });
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<SrndQuery> VAR_ILIST<SRNDQUERY> = LITERAL_NULL; Token VAR_TOKEN = LITERAL_NULL; VAR_SRNDQUERY = NotQuery(); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.AND: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_3; } VAR_TOKEN = Jj_consume_token(RegexpToken.AND); if (VAR_ILIST<SRNDQUERY> == LITERAL_NULL) { VAR_ILIST<SRNDQUERY> = new List<SrndQuery>(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); } VAR_SRNDQUERY = NotQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); } label_3: { if (true) return (VAR_ILIST<SRNDQUERY> == LITERAL_NULL) ? VAR_SRNDQUERY : GetAndQuery(VAR_ILIST<SRNDQUERY>, true, VAR_TOKEN); } throw new Exception(LITERAL_STRING); }
public sealed override int METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public AddJobFlowStepsRequest(string VAR_STRING, List<StepConfig> VAR_LIST<STEPCONFIG>) { _jobFlowId = VAR_STRING; _steps = VAR_LIST<STEPCONFIG>; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public static string METHOD_NAME(short VAR_SHORT) { return METHOD_NAME((long)VAR_SHORT, LITERAL_INT); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = IndexOfSegmentName(VAR_STRING); if (VAR_INT != -LITERAL_INT) { VAR_STRING = VAR_STRING.Substring(VAR_INT); } return VAR_STRING; }
public InvalidMarkException(string VAR_STRING) : base(detailMessage) { throw new System.NotImplementedException(); }
public V METHOD_NAME() { return this.nextEntryNotFailFast().value; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is NGit.PersonIdent) { NGit.PersonIdent VAR_NGIT.PERSONIDENT = (NGit.PersonIdent)VAR_OBJECT; return GetName().METHOD_NAME(VAR_NGIT.PERSONIDENT.GetName()) && GetEmailAddress().METHOD_NAME(VAR_NGIT.PERSONIDENT.GetEmailAddress()) && when / LITERAL_INT == VAR_NGIT.PERSONIDENT.when / LITERAL_INT; } return false; }
public virtual DetectKeyPhrasesResponse METHOD_NAME(DetectKeyPhrasesRequest VAR_DETECTKEYPHRASESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectKeyPhrasesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectKeyPhrasesResponseUnmarshaller.Instance; return Invoke<DetectKeyPhrasesResponse>(VAR_DETECTKEYPHRASESREQUEST, VAR_VAR); }
public override long METHOD_NAME(long VAR_LONG) { throw new System.NotImplementedException(); }
public virtual java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public void METHOD_NAME(short VAR_SHORT) { field_1_hide_obj = VAR_SHORT; }
public void METHOD_NAME(short VAR_SHORT) { field_4_last_column = VAR_SHORT; }
public static PrintCellComments METHOD_NAME(int VAR_INT) { return _table[VAR_INT]; }
public virtual DeleteDBInstanceResponse METHOD_NAME(DeleteDBInstanceRequest VAR_DELETEDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBInstanceResponseUnmarshaller.Instance; return Invoke<DeleteDBInstanceResponse>(VAR_DELETEDBINSTANCEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>, string VAR_STRING) { string VAR_STRING; if (!VAR_IDICTIONARY<STRING, STRING>.TryGetValue(VAR_STRING, out VAR_STRING)) { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } VAR_IDICTIONARY<STRING, STRING>.Remove(VAR_STRING); return VAR_STRING; }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public GetImageLayerRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public ParameterNameValue(string VAR_STRING) { _parameterName = VAR_STRING; }
public virtual CreateDirectConnectGatewayAssociationProposalResponse METHOD_NAME(CreateDirectConnectGatewayAssociationProposalRequest VAR_CREATEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDirectConnectGatewayAssociationProposalRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDirectConnectGatewayAssociationProposalResponseUnmarshaller.Instance; return Invoke<CreateDirectConnectGatewayAssociationProposalResponse>(VAR_CREATEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST, VAR_VAR); }
public virtual ListResourceDelegatesResponse METHOD_NAME(ListResourceDelegatesRequest VAR_LISTRESOURCEDELEGATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResourceDelegatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResourceDelegatesResponseUnmarshaller.Instance; return Invoke<ListResourceDelegatesResponse>(VAR_LISTRESOURCEDELEGATESREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); Double VAR_DOUBLE = OperandResolver.ParseDouble(VAR_STRING); if (double.IsNaN(VAR_DOUBLE)) { return ErrorEval.VALUE_INVALID; } if (VAR_DOUBLE < MinValue || VAR_DOUBLE > MaxValue) { return ErrorEval.NUM_ERROR; } int VAR_INT; if (VAR_DOUBLE < LITERAL_INT || VAR_VALUEEVAL == LITERAL_NULL) { VAR_INT = DEFAULT_PLACES_VALUE; } else { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); Double VAR_DOUBLE = OperandResolver.ParseDouble(VAR_STRING); if (double.IsNaN(VAR_DOUBLE)) { return ErrorEval.VALUE_INVALID; } VAR_INT = (int)Math.Floor(VAR_DOUBLE); if (VAR_INT < LITERAL_INT || VAR_INT == LITERAL_INT) { return ErrorEval.NUM_ERROR; } } String VAR_STRING = Convert.ToString((int)Math.Floor(VAR_DOUBLE), LITERAL_INT); if (VAR_STRING.Length > DEFAULT_PLACES_VALUE) { VAR_STRING = VAR_STRING.Substring(VAR_STRING.Length - DEFAULT_PLACES_VALUE); } if (VAR_STRING.Length > VAR_INT) { return ErrorEval.NUM_ERROR; } return new StringEval(VAR_STRING); }
public static int METHOD_NAME(DataInput VAR_DATAINPUT, string VAR_STRING, int VAR_INT, int VAR_INT) { string VAR_STRING = VAR_DATAINPUT.ReadString(); if (!VAR_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { throw new System.IO.IOException(LITERAL_STRING + VAR_STRING + LITERAL_STRING + VAR_STRING + LITERAL_STRING + VAR_DATAINPUT + LITERAL_STRING); } int VAR_INT = VAR_DATAINPUT.ReadInt32(); if (VAR_INT < VAR_INT) { throw new System.IO.IOException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING); } if (VAR_INT > VAR_INT) { throw new System.IO.IOException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING); } return VAR_INT; }
public virtual DescribeDefaultParametersResponse METHOD_NAME(DescribeDefaultParametersRequest VAR_DESCRIBEDEFAULTPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDefaultParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDefaultParametersResponseUnmarshaller.Instance; return Invoke<DescribeDefaultParametersResponse>(VAR_DESCRIBEDEFAULTPARAMETERSREQUEST, VAR_VAR); }
public SimpleSpanFragmenter(QueryScorer VAR_QUERYSCORER, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_QUERYSCORER = VAR_QUERYSCORER; }
public virtual CreateApplicationResponse METHOD_NAME(CreateApplicationRequest VAR_CREATEAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateApplicationResponseUnmarshaller.Instance; return Invoke<CreateApplicationResponse>(VAR_CREATEAPPLICATIONREQUEST, VAR_VAR); }
public virtual URIish METHOD_NAME() { return uri; }
public virtual DeleteConferenceProviderResponse METHOD_NAME(DeleteConferenceProviderRequest VAR_DELETECONFERENCEPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConferenceProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConferenceProviderResponseUnmarshaller.Instance; return Invoke<DeleteConferenceProviderResponse>(VAR_DELETECONFERENCEPROVIDERREQUEST, VAR_VAR); }
public byte METHOD_NAME(byte VAR_BYTE) { return (byte)this.Set(VAR_BYTE); }
public PipedInputStream(java.io.PipedOutputStream VAR_JAVA.IO.PIPEDOUTPUTSTREAM) { throw new System.NotImplementedException(); }
public override java.nio.IntBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.INT); byteBuffer.position(_position * libcore.io.SizeOf.INT); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.IntBuffer VAR_JAVA.NIO.INTBUFFER = new java.nio.IntToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.INTBUFFER; }
public virtual CreateDeploymentConfigResponse METHOD_NAME(CreateDeploymentConfigRequest VAR_CREATEDEPLOYMENTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeploymentConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeploymentConfigResponseUnmarshaller.Instance; return Invoke<CreateDeploymentConfigResponse>(VAR_CREATEDEPLOYMENTCONFIGREQUEST, VAR_VAR); }
public HSSFColor METHOD_NAME(byte VAR_BYTE, byte VAR_BYTE, byte VAR_BYTE) { byte[] VAR_BYTE[] = palette.GetColor(PaletteRecord.FIRST_COLOR_INDEX); for (short i = (short)PaletteRecord.FIRST_COLOR_INDEX; VAR_BYTE[] != LITERAL_NULL; VAR_BYTE[] = palette.GetColor(++i)) { if (VAR_BYTE[][LITERAL_INT] == VAR_BYTE && VAR_BYTE[][LITERAL_INT] == VAR_BYTE && VAR_BYTE[][LITERAL_INT] == VAR_BYTE) { return new CustomColor(i, VAR_BYTE[]); } } return LITERAL_NULL; }
public virtual bool METHOD_NAME(char VAR_CHAR) { return implCanEncode(java.nio.CharBuffer.wrap(new char[] { VAR_CHAR })); }
public NetworkInterface(string VAR_STRING) { _mac = VAR_STRING; _path = string.Format(CultureInfo.InvariantCulture, LITERAL_STRING, _mac); }
public bool METHOD_NAME(int VAR_INT) { return m_accept[VAR_INT]; }
public virtual string METHOD_NAME() { return METHOD_NAME((IList<string>)LITERAL_NULL); }
public TermRangeQuery(string VAR_STRING, BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF, bool VAR_BOOL, bool VAR_BOOL) : base(field) { this.VAR_BYTESREF = VAR_BYTESREF; this.VAR_BYTESREF = VAR_BYTESREF; this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; }
public virtual ScanResponse METHOD_NAME(string VAR_STRING, List<string> VAR_LIST<STRING>) { var VAR_VAR = new ScanRequest(); VAR_VAR.TableName = VAR_STRING; VAR_VAR.AttributesToGet = VAR_LIST<STRING>; return METHOD_NAME(VAR_VAR); }
public virtual StopLabelingJobResponse METHOD_NAME(StopLabelingJobRequest VAR_STOPLABELINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopLabelingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopLabelingJobResponseUnmarshaller.Instance; return Invoke<StopLabelingJobResponse>(VAR_STOPLABELINGJOBREQUEST, VAR_VAR); }
public virtual PublishSchemaResponse METHOD_NAME(PublishSchemaRequest VAR_PUBLISHSCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PublishSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PublishSchemaResponseUnmarshaller.Instance; return Invoke<PublishSchemaResponse>(VAR_PUBLISHSCHEMAREQUEST, VAR_VAR); }
public DeleteAttributesRequest(string VAR_STRING, string VAR_STRING, List<Attribute> VAR_LIST<ATTRIBUTE>) { _domainName = VAR_STRING; _itemName = VAR_STRING; _attributes = VAR_LIST<ATTRIBUTE>; }
public override NGit.ObjectId METHOD_NAME() { return this; }
public virtual java.util.ListIterator<E> METHOD_NAME() { object[] VAR_OBJECT[] = elements; return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public ExternalBookBlock() { _externalBookRecord = SupBookRecord.CreateAddInFunctions(); _externalNameRecords = new ExternalNameRecord[LITERAL_INT]; _crnBlocks = new CRNBlock[LITERAL_INT]; }
public string METHOD_NAME() { return decode(fragment); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME(Subs) + LITERAL_STRING; }
public override java.nio.ByteBuffer METHOD_NAME(double VAR_DOUBLE) { throw new java.nio.ReadOnlyBufferException(); }
public static InternalWorkbook METHOD_NAME(ExternSheetRecord[] VAR_EXTERNSHEETRECORD[], BoundSheetRecord[] VAR_BOUNDSHEETRECORD[]) { return METHOD_NAME(VAR_EXTERNSHEETRECORD[], VAR_BOUNDSHEETRECORD[], LITERAL_NULL); }
public virtual IndexDocumentsResponse METHOD_NAME(IndexDocumentsRequest VAR_INDEXDOCUMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IndexDocumentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IndexDocumentsResponseUnmarshaller.Instance; return Invoke<IndexDocumentsResponse>(VAR_INDEXDOCUMENTSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(Parser VAR_PARSER) { return Trees.METHOD_NAME(this, VAR_PARSER); }
public override FieldsConsumer METHOD_NAME(SegmentWriteState VAR_SEGMENTWRITESTATE) { if (_delegatePostingsFormat == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } return new BloomFilteredFieldsConsumer(this, _delegatePostingsFormat.METHOD_NAME(VAR_SEGMENTWRITESTATE), VAR_SEGMENTWRITESTATE); }
public override string METHOD_NAME() { return base.METHOD_NAME() + LITERAL_STRING + pattern.Pattern() + LITERAL_STRING; }
public static string METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { return METHOD_NAME(VAR_STRINGBUILDER.ToString(VAR_INT, VAR_STRINGBUILDER.Length - VAR_INT), LITERAL_INT); }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { return new JapaneseIterationMarkCharFilter(VAR_TEXTREADER, normalizeKanji, normalizeKana); }
public virtual int METHOD_NAME() { return mKeyProgressIncrement; }
public void METHOD_NAME(StandardSyntaxParserTokenManager VAR_STANDARDSYNTAXPARSERTOKENMANAGER) { TokenSource = VAR_STANDARDSYNTAXPARSERTOKENMANAGER; Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public long METHOD_NAME(BytesRef VAR_BYTESREF) { if (VAR_BYTESREF.Length >= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_BYTESREF.Length + LITERAL_STRING); } if (upto + VAR_BYTESREF.Length + LITERAL_INT > blockSize) { if (VAR_BYTESREF.Length + LITERAL_INT > blockSize) { throw new System.ArgumentException(LITERAL_STRING + blockSize + LITERAL_STRING + VAR_BYTESREF.Length + LITERAL_STRING); } if (currentBlock != LITERAL_NULL) { blocks.Add(currentBlock); blockEnd.Add(upto); } currentBlock = new byte[blockSize]; upto = LITERAL_INT; } long VAR_LONG = GetPointer(); if (VAR_BYTESREF.Length < LITERAL_INT) { currentBlock[upto++] = (byte)VAR_BYTESREF.Length; } else { currentBlock[upto++] = unchecked((byte)(LITERAL_INT | (VAR_BYTESREF.Length >> LITERAL_INT))); currentBlock[upto++] = unchecked((byte)(VAR_BYTESREF.Length & LITERAL_INT)); } Array.Copy(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, currentBlock, upto, VAR_BYTESREF.Length); upto += VAR_BYTESREF.Length; return VAR_LONG; }
public HighFreqTerm(int[] VAR_INT[], int[] VAR_INT[], int[][] VAR_INT[][], byte[][][] VAR_BYTE[][][], long VAR_LONG) { this.VAR_INT[] = VAR_INT[]; this.VAR_INT[] = VAR_INT[]; this.VAR_INT[][] = VAR_INT[][]; this.VAR_BYTE[][][] = VAR_BYTE[][][]; this.VAR_LONG = VAR_LONG; }
public virtual TermQuery METHOD_NAME(Term VAR_TERM) { CheckMax(); return new TermQuery(VAR_TERM); }
public HindiStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public DecisionInfo[] METHOD_NAME() { return atnSimulator.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING + this.field + LITERAL_STRING + this.text + LITERAL_STRING; }
public virtual CreateStackSetResponse METHOD_NAME(CreateStackSetRequest VAR_CREATESTACKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStackSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStackSetResponseUnmarshaller.Instance; return Invoke<CreateStackSetResponse>(VAR_CREATESTACKSETREQUEST, VAR_VAR); }
public virtual SendMessagesResponse METHOD_NAME(SendMessagesRequest VAR_SENDMESSAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendMessagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendMessagesResponseUnmarshaller.Instance; return Invoke<SendMessagesResponse>(VAR_SENDMESSAGESREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, char VAR_CHAR) { lock (this) { base.METHOD_NAME(VAR_INT, VAR_CHAR); } }
public virtual CreateIntegrationResponse METHOD_NAME(CreateIntegrationRequest VAR_CREATEINTEGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIntegrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIntegrationResponseUnmarshaller.Instance; return Invoke<CreateIntegrationResponse>(VAR_CREATEINTEGRATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.Mode(mode); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public void METHOD_NAME() { EnsureOpen(); int VAR_INT = refCount.DecrementAndGet(); if (VAR_INT == LITERAL_INT) { bool VAR_BOOL = false; try { DoClose(); closed = true; VAR_BOOL = true; } finally { if (!VAR_BOOL) { refCount.IncrementAndGet(); } } } else if (VAR_INT < LITERAL_INT) { throw new ThreadStateException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } }
public override string METHOD_NAME() { if (dfa.s0 == LITERAL_NULL) { return LITERAL_NULL; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (dfa.states != LITERAL_NULL) { List<DFAState> VAR_LIST<DFASTATE> = new List<DFAState>(dfa.states.Values); VAR_LIST<DFASTATE>.Sort((x, y) => x.stateNumber - y.stateNumber); foreach (DFAState s in VAR_LIST<DFASTATE>) { int VAR_INT = s.edges != LITERAL_NULL ? s.edges.Length : LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; i++) { DFAState VAR_DFASTATE = s.edges[i]; if (VAR_DFASTATE != LITERAL_NULL && VAR_DFASTATE.stateNumber != int.MaxValue) { VAR_STRINGBUILDER.Append(GetStateString(s)); String VAR_STRING = GetEdgeLabel(i); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetStateString(VAR_DFASTATE)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); } } } } string VAR_STRING = VAR_STRINGBUILDER.METHOD_NAME(); if (VAR_STRING.Length == LITERAL_INT) { return LITERAL_NULL; } return VAR_STRING; }
public static void METHOD_NAME(Repository VAR_REPOSITORY) { if (VAR_REPOSITORY.Directory != LITERAL_NULL) { RepositoryCache.FileKey VAR_REPOSITORYCACHE.FILEKEY = RepositoryCache.FileKey.Exact(VAR_REPOSITORY.Directory, VAR_REPOSITORY.FileSystem); cache.RegisterRepository(VAR_REPOSITORYCACHE.FILEKEY, VAR_REPOSITORY); } }
public virtual GetConfigurationSetEventDestinationsResponse METHOD_NAME(GetConfigurationSetEventDestinationsRequest VAR_GETCONFIGURATIONSETEVENTDESTINATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConfigurationSetEventDestinationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConfigurationSetEventDestinationsResponseUnmarshaller.Instance; return Invoke<GetConfigurationSetEventDestinationsResponse>(VAR_GETCONFIGURATIONSETEVENTDESTINATIONSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(byte VAR_BYTE) { throw new System.NotImplementedException(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { AreaEval VAR_AREAEVAL; AreaEval VAR_AREAEVAL; try { VAR_AREAEVAL = ConvertRangeArg(VAR_VALUEEVAL); VAR_AREAEVAL = CreateSumRange(VAR_VALUEEVAL, VAR_AREAEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } return Eval(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_AREAEVAL, VAR_AREAEVAL); }
public MoPenAddGroupMemberRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual DeleteAssessmentTargetResponse METHOD_NAME(DeleteAssessmentTargetRequest VAR_DELETEASSESSMENTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAssessmentTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAssessmentTargetResponseUnmarshaller.Instance; return Invoke<DeleteAssessmentTargetResponse>(VAR_DELETEASSESSMENTTARGETREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(isxvdData)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iiftab)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(df)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(isxvd)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(isxvi)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(ifmt)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual DescribeReservedInstancesOfferingsResponse METHOD_NAME(DescribeReservedInstancesOfferingsRequest VAR_DESCRIBERESERVEDINSTANCESOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedInstancesOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedInstancesOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeReservedInstancesOfferingsResponse>(VAR_DESCRIBERESERVEDINSTANCESOFFERINGSREQUEST, VAR_VAR); }
public override void METHOD_NAME(TermsEnum VAR_TERMSENUM) { this.VAR_TERMSENUM = VAR_TERMSENUM; this.boostAtt = VAR_TERMSENUM.Attributes.AddAttribute<IBoostAttribute>(); }
public override RevFilter METHOD_NAME() { return new MessageRevFilter.PatternSearch(Pattern()); }
public virtual GetRouteResponseResponse METHOD_NAME(GetRouteResponseRequest VAR_GETROUTERESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRouteResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRouteResponseResponseUnmarshaller.Instance; return Invoke<GetRouteResponseResponse>(VAR_GETROUTERESPONSEREQUEST, VAR_VAR); }
public virtual UpdateLagResponse METHOD_NAME(UpdateLagRequest VAR_UPDATELAGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateLagRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateLagResponseUnmarshaller.Instance; return Invoke<UpdateLagResponse>(VAR_UPDATELAGREQUEST, VAR_VAR); }
public virtual DescribeEndpointResponse METHOD_NAME(DescribeEndpointRequest VAR_DESCRIBEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEndpointResponseUnmarshaller.Instance; return Invoke<DescribeEndpointResponse>(VAR_DESCRIBEENDPOINTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(IList<PositionSpan> VAR_ILIST<POSITIONSPAN>) { this._positionSpans.AddRange(VAR_ILIST<POSITIONSPAN>); }
public override bool METHOD_NAME(object VAR_OBJECT) { return backingMap.METHOD_NAME(VAR_OBJECT) != LITERAL_NULL; }
public virtual ListPartsResponse METHOD_NAME(ListPartsRequest VAR_LISTPARTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPartsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPartsResponseUnmarshaller.Instance; return Invoke<ListPartsResponse>(VAR_LISTPARTSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(bool VAR_BOOL) { force = VAR_BOOL; }
public void METHOD_NAME() { if (SectionCount >= LITERAL_INT) { } }
public int METHOD_NAME() { return _lei.METHOD_NAME(); }
public virtual GetInstanceResponse METHOD_NAME(GetInstanceRequest VAR_GETINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceResponseUnmarshaller.Instance; return Invoke<GetInstanceResponse>(VAR_GETINSTANCEREQUEST, VAR_VAR); }
public virtual UpdateSmsChannelResponse METHOD_NAME(UpdateSmsChannelRequest VAR_UPDATESMSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSmsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSmsChannelResponseUnmarshaller.Instance; return Invoke<UpdateSmsChannelResponse>(VAR_UPDATESMSCHANNELREQUEST, VAR_VAR); }
public virtual CreateEgressOnlyInternetGatewayResponse METHOD_NAME(CreateEgressOnlyInternetGatewayRequest VAR_CREATEEGRESSONLYINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEgressOnlyInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEgressOnlyInternetGatewayResponseUnmarshaller.Instance; return Invoke<CreateEgressOnlyInternetGatewayResponse>(VAR_CREATEEGRESSONLYINTERNETGATEWAYREQUEST, VAR_VAR); }
public virtual GetResourcesResponse METHOD_NAME(GetResourcesRequest VAR_GETRESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResourcesResponseUnmarshaller.Instance; return Invoke<GetResourcesResponse>(VAR_GETRESOURCESREQUEST, VAR_VAR); }
public ByteBlockPool(Allocator VAR_ALLOCATOR) { ByteUpto = BYTE_BLOCK_SIZE; ByteOffset = -BYTE_BLOCK_SIZE; this.VAR_ALLOCATOR = VAR_ALLOCATOR; }
public virtual ListStepsResponse METHOD_NAME(ListStepsRequest VAR_LISTSTEPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStepsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStepsResponseUnmarshaller.Instance; return Invoke<ListStepsResponse>(VAR_LISTSTEPSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { throw new System.NotImplementedException(); }
public PutLogEventsRequest(string VAR_STRING, string VAR_STRING, List<InputLogEvent> VAR_LIST<INPUTLOGEVENT>) { _logGroupName = VAR_STRING; _logStreamName = VAR_STRING; _logEvents = VAR_LIST<INPUTLOGEVENT>; }
public virtual void METHOD_NAME(int VAR_INT) { this.offset = VAR_INT; }
public virtual GetAttendeeResponse METHOD_NAME(GetAttendeeRequest VAR_GETATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAttendeeResponseUnmarshaller.Instance; return Invoke<GetAttendeeResponse>(VAR_GETATTENDEEREQUEST, VAR_VAR); }
public override long METHOD_NAME() { return pointer + pos; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Id); int VAR_INT = _complexData.Length; if (!sizeIncludesHeaderSize) { VAR_INT -= LITERAL_INT; } LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); return LITERAL_INT; }
public virtual NGit.Api.CherryPickCommand METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return METHOD_NAME(VAR_ANYOBJECTID.GetName(), VAR_ANYOBJECTID); }
public int METHOD_NAME() { int VAR_INT = _le.ReadUShort(); _rc4.SkipTwoBytes(); return VAR_INT; }
public RemoveUserFromGroupRequest(string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _userName = VAR_STRING; }
public virtual PutImageResponse METHOD_NAME(PutImageRequest VAR_PUTIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutImageResponseUnmarshaller.Instance; return Invoke<PutImageResponse>(VAR_PUTIMAGEREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { int VAR_INT; int VAR_INT; int VAR_INT; m_limit_backward = m_cursor; m_cursor = m_limit; VAR_INT = m_limit - m_cursor; do { if (!r_endings()) { goto lab0; } } while (false); lab0: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_undouble()) { goto lab1; } } while (false); lab1: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_respell()) { goto lab2; } } while (false); lab2: m_cursor = m_limit - VAR_INT; m_cursor = m_limit_backward; return true; }
public virtual IntervalSet[] METHOD_NAME(ATNState VAR_ATNSTATE) { if (VAR_ATNSTATE == LITERAL_NULL) { return LITERAL_NULL; } IntervalSet[] VAR_INTERVALSET[] = new IntervalSet[VAR_ATNSTATE.NumberOfTransitions]; for (int alt = LITERAL_INT; alt < VAR_ATNSTATE.NumberOfTransitions; alt++) { VAR_INTERVALSET[][alt] = new IntervalSet(); HashSet<ATNConfig> VAR_HASHSET<ATNCONFIG> = new HashSet<ATNConfig>(); bool VAR_BOOL = false; Look(VAR_ATNSTATE.Transition(alt).target, LITERAL_NULL, PredictionContext.EMPTY, VAR_INTERVALSET[][alt], VAR_HASHSET<ATNCONFIG>, new BitSet(), VAR_BOOL, false); if (VAR_INTERVALSET[][alt].Count == LITERAL_INT || VAR_INTERVALSET[][alt].Contains(HitPred)) { VAR_INTERVALSET[][alt] = LITERAL_NULL; } } return VAR_INTERVALSET[]; }
public static Ptg METHOD_NAME(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { byte VAR_BYTE = (byte)VAR_ILITTLEENDIANINPUT.ReadByte(); if (VAR_BYTE < LITERAL_INT) { return CreateBasePtg(VAR_BYTE, VAR_ILITTLEENDIANINPUT); } Ptg VAR_PTG = CreateClassifiedPtg(VAR_BYTE, VAR_ILITTLEENDIANINPUT); if (VAR_BYTE >= LITERAL_INT) { VAR_PTG.PtgClass = CLASS_ARRAY; } else if (VAR_BYTE >= LITERAL_INT) { VAR_PTG.PtgClass = CLASS_VALUE; } else { VAR_PTG.PtgClass = CLASS_REF; } return VAR_PTG; }
public virtual ListEntitiesDetectionJobsResponse METHOD_NAME(ListEntitiesDetectionJobsRequest VAR_LISTENTITIESDETECTIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEntitiesDetectionJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEntitiesDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListEntitiesDetectionJobsResponse>(VAR_LISTENTITIESDETECTIONJOBSREQUEST, VAR_VAR); }
public virtual ListReviewableHITsResponse METHOD_NAME(ListReviewableHITsRequest VAR_LISTREVIEWABLEHITSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListReviewableHITsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListReviewableHITsResponseUnmarshaller.Instance; return Invoke<ListReviewableHITsResponse>(VAR_LISTREVIEWABLEHITSREQUEST, VAR_VAR); }
public OperationEvaluationContext(WorkbookEvaluator VAR_WORKBOOKEVALUATOR, IEvaluationWorkbook VAR_IEVALUATIONWORKBOOK, int VAR_INT, int VAR_INT, int VAR_INT, EvaluationTracker VAR_EVALUATIONTRACKER) { _bookEvaluator = VAR_WORKBOOKEVALUATOR; _workbook = VAR_IEVALUATIONWORKBOOK; _sheetIndex = VAR_INT; _rowIndex = VAR_INT; _columnIndex = VAR_INT; _tracker = VAR_EVALUATIONTRACKER; }
public void METHOD_NAME(int VAR_INT) { this.MaxDocFreq = VAR_INT * ir.NumDocs / LITERAL_INT; }
public void METHOD_NAME(V VAR_V) { value = VAR_V; }
public virtual UpdateVpcLinkResponse METHOD_NAME(UpdateVpcLinkRequest VAR_UPDATEVPCLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVpcLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVpcLinkResponseUnmarshaller.Instance; return Invoke<UpdateVpcLinkResponse>(VAR_UPDATEVPCLINKREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_NOTECOUNT); }
public virtual Ref METHOD_NAME(Ref VAR_REF) { Ref VAR_REF = this._enclosing.Put(this.Key, VAR_REF); this.@ref = VAR_REF; return VAR_REF; }
public virtual RevCommit METHOD_NAME(int VAR_INT) { return sourceCommits[VAR_INT]; }
public ClassicTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); maxTokenLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetDistributionResponse METHOD_NAME(GetDistributionRequest VAR_GETDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDistributionResponseUnmarshaller.Instance; return Invoke<GetDistributionResponse>(VAR_GETDISTRIBUTIONREQUEST, VAR_VAR); }
public override long METHOD_NAME(long VAR_LONG) { int VAR_INT = (int)(VAR_LONG / outerInstance.totalIndexInterval); Debug.Assert(VAR_INT < fieldIndex.numIndexTerms); long VAR_LONG = fieldIndex.termOffsets.Get(VAR_INT); int VAR_INT = (int)(fieldIndex.termOffsets.Get(LITERAL_INT + VAR_INT) - VAR_LONG); outerInstance.termBytesReader.FillSlice(term, fieldIndex.termBytesStart + VAR_LONG, VAR_INT); this.VAR_LONG = VAR_INT * outerInstance.totalIndexInterval; return fieldIndex.termsStart + fieldIndex.termsDictOffsets.Get(VAR_INT); }
public virtual DescribeInterconnectsResponse METHOD_NAME(DescribeInterconnectsRequest VAR_DESCRIBEINTERCONNECTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInterconnectsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInterconnectsResponseUnmarshaller.Instance; return Invoke<DescribeInterconnectsResponse>(VAR_DESCRIBEINTERCONNECTSREQUEST, VAR_VAR); }
public static EvaluationException METHOD_NAME() { return new EvaluationException(ErrorEval.VALUE_INVALID); }
public static string METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); foreach (char c in VAR_STRING.ToCharArray()) { if (c == LITERAL_CHAR && VAR_BOOL) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } else { if (c == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } else { if (c == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } else { if (c == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(c); } } } } } return VAR_STRINGBUILDER.ToString(); }
public virtual DescribeOrderableClusterOptionsResponse METHOD_NAME(DescribeOrderableClusterOptionsRequest VAR_DESCRIBEORDERABLECLUSTEROPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOrderableClusterOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOrderableClusterOptionsResponseUnmarshaller.Instance; return Invoke<DescribeOrderableClusterOptionsResponse>(VAR_DESCRIBEORDERABLECLUSTEROPTIONSREQUEST, VAR_VAR); }
public DeleteArchiveRequest(string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _archiveId = VAR_STRING; }
public virtual DescribeSnapshotsResponse METHOD_NAME(DescribeSnapshotsRequest VAR_DESCRIBESNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotsResponse>(VAR_DESCRIBESNAPSHOTSREQUEST, VAR_VAR); }
public virtual BatchDeleteClusterSnapshotsResponse METHOD_NAME(BatchDeleteClusterSnapshotsRequest VAR_BATCHDELETECLUSTERSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDeleteClusterSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDeleteClusterSnapshotsResponseUnmarshaller.Instance; return Invoke<BatchDeleteClusterSnapshotsResponse>(VAR_BATCHDELETECLUSTERSNAPSHOTSREQUEST, VAR_VAR); }
public virtual DescribeClientVpnRoutesResponse METHOD_NAME(DescribeClientVpnRoutesRequest VAR_DESCRIBECLIENTVPNROUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientVpnRoutesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientVpnRoutesResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnRoutesResponse>(VAR_DESCRIBECLIENTVPNROUTESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { string VAR_STRING = GetPadding(); StringBuilder VAR_STRINGBUILDER = new StringBuilder(base.METHOD_NAME()); VAR_STRINGBUILDER.Append(parallel ? LITERAL_STRING : LITERAL_STRING); VAR_STRINGBUILDER.Append(NEW_LINE); foreach (PerfTask task in tasks) { VAR_STRINGBUILDER.Append(task.METHOD_NAME()); VAR_STRINGBUILDER.Append(NEW_LINE); } VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(!letChildReport ? LITERAL_STRING : (parallel ? LITERAL_STRING : LITERAL_STRING)); if (fixedTime) { VAR_STRINGBUILDER.AppendFormat(CultureInfo.InvariantCulture, LITERAL_STRING, runTimeSec); } else if (repetitions > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING + repetitions); } else if (repetitions == REPEAT_EXHAUST) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (rate > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING + rate + LITERAL_STRING + (perMin ? LITERAL_STRING : LITERAL_STRING)); } if (RunInBackground) { VAR_STRINGBUILDER.Append(LITERAL_STRING); int VAR_INT = BackgroundDeltaPriority; if (VAR_INT != LITERAL_INT) { VAR_STRINGBUILDER.Append(VAR_INT); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_1_minimumAxisValue); VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_2_maximumAxisValue); VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_3_majorIncrement); VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_4_minorIncrement); VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_5_categoryAxisCross); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_options); }
public void METHOD_NAME() { readOnly = true; }
public virtual DescribeDirectConnectGatewaysResponse METHOD_NAME(DescribeDirectConnectGatewaysRequest VAR_DESCRIBEDIRECTCONNECTGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDirectConnectGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDirectConnectGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeDirectConnectGatewaysResponse>(VAR_DESCRIBEDIRECTCONNECTGATEWAYSREQUEST, VAR_VAR); }
public virtual GetUsagePlanKeyResponse METHOD_NAME(GetUsagePlanKeyRequest VAR_GETUSAGEPLANKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUsagePlanKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUsagePlanKeyResponseUnmarshaller.Instance; return Invoke<GetUsagePlanKeyResponse>(VAR_GETUSAGEPLANKEYREQUEST, VAR_VAR); }
public virtual DescribeVpcEndpointConnectionNotificationsResponse METHOD_NAME(DescribeVpcEndpointConnectionNotificationsRequest VAR_DESCRIBEVPCENDPOINTCONNECTIONNOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointConnectionNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointConnectionNotificationsResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointConnectionNotificationsResponse>(VAR_DESCRIBEVPCENDPOINTCONNECTIONNOTIFICATIONSREQUEST, VAR_VAR); }
public virtual UpdateGatewayGroupResponse METHOD_NAME(UpdateGatewayGroupRequest VAR_UPDATEGATEWAYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGatewayGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGatewayGroupResponseUnmarshaller.Instance; return Invoke<UpdateGatewayGroupResponse>(VAR_UPDATEGATEWAYGROUPREQUEST, VAR_VAR); }
public virtual DetachClassicLinkVpcResponse METHOD_NAME(DetachClassicLinkVpcRequest VAR_DETACHCLASSICLINKVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachClassicLinkVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachClassicLinkVpcResponseUnmarshaller.Instance; return Invoke<DetachClassicLinkVpcResponse>(VAR_DETACHCLASSICLINKVPCREQUEST, VAR_VAR); }
public virtual ListOperationsResponse METHOD_NAME() { return METHOD_NAME(new ListOperationsRequest()); }
public virtual BatchDeletePhoneNumberResponse METHOD_NAME(BatchDeletePhoneNumberRequest VAR_BATCHDELETEPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDeletePhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDeletePhoneNumberResponseUnmarshaller.Instance; return Invoke<BatchDeletePhoneNumberResponse>(VAR_BATCHDELETEPHONENUMBERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(long VAR_LONG) { this.VAR_LONG = VAR_LONG; expire = LITERAL_NULL; }
public virtual DeactivateEventSourceResponse METHOD_NAME(DeactivateEventSourceRequest VAR_DEACTIVATEEVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeactivateEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeactivateEventSourceResponseUnmarshaller.Instance; return Invoke<DeactivateEventSourceResponse>(VAR_DEACTIVATEEVENTSOURCEREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Array.Copy(bytes, pos, VAR_BYTE[], VAR_INT, VAR_INT); pos += VAR_INT; }
public override java.nio.IntBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual SendUsersMessagesResponse METHOD_NAME(SendUsersMessagesRequest VAR_SENDUSERSMESSAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendUsersMessagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendUsersMessagesResponseUnmarshaller.Instance; return Invoke<SendUsersMessagesResponse>(VAR_SENDUSERSMESSAGESREQUEST, VAR_VAR); }
public MissingFormatWidthException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; }
public DescribeVolumesRequest(List<string> VAR_LIST<STRING>) { _volumeIds = VAR_LIST<STRING>; }
public SubmitCutoutTaskRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override java.nio.DoubleBuffer METHOD_NAME() { return duplicate(); }
public override int METHOD_NAME() { return this._enclosing._size; }
public virtual CreateLabelsResponse METHOD_NAME(CreateLabelsRequest VAR_CREATELABELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLabelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLabelsResponseUnmarshaller.Instance; return Invoke<CreateLabelsResponse>(VAR_CREATELABELSREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return size == LITERAL_INT; }
public virtual int METHOD_NAME() { return currentSource.renameScore; }
public SeriesTextRecord() { field_4_text = LITERAL_STRING; is16bit = false; }
public override char METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return sequence[_position++]; }
public static double METHOD_NAME(double[] VAR_DOUBLE[], double VAR_DOUBLE) { int VAR_INT = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = VAR_DOUBLE; double VAR_DOUBLE; int VAR_INT = LITERAL_INT; while (VAR_INT < VAR_INT) { double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; for (int k = LITERAL_INT; k < VAR_DOUBLE[].Length; k++) { VAR_DOUBLE += VAR_DOUBLE[][k] / Math.Pow(LITERAL_INT + VAR_DOUBLE, k); VAR_DOUBLE += -k * VAR_DOUBLE[][k] / Math.Pow(LITERAL_INT + VAR_DOUBLE, k + LITERAL_INT); } VAR_DOUBLE = VAR_DOUBLE - VAR_DOUBLE / VAR_DOUBLE; if (Math.Abs(VAR_DOUBLE - VAR_DOUBLE) <= VAR_DOUBLE) { return VAR_DOUBLE; } VAR_DOUBLE = VAR_DOUBLE; ++VAR_INT; } return Double.NaN; }
public static string METHOD_NAME(short VAR_SHORT) { return METHOD_NAME((long)VAR_SHORT, LITERAL_INT); }
public virtual void METHOD_NAME() { _type = TokenTypes.METHOD_NAME; }
public IClientAnchor METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public virtual void METHOD_NAME(int[] VAR_INT[]) { METHOD_NAME(VAR_INT[], LITERAL_INT); }
public virtual ModifyClusterParameterGroupResponse METHOD_NAME(ModifyClusterParameterGroupRequest VAR_MODIFYCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<ModifyClusterParameterGroupResponse>(VAR_MODIFYCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(URIish VAR_URIISH, IList<CredentialItem> VAR_ILIST<CREDENTIALITEM>) { return METHOD_NAME(VAR_URIISH, Sharpen.Collections.ToArray(VAR_ILIST<CREDENTIALITEM>, new CredentialItem[VAR_ILIST<CREDENTIALITEM>.Count])); }
public FormatType METHOD_NAME() { return acceptFormat; }
public virtual ListTypesResponse METHOD_NAME(ListTypesRequest VAR_LISTTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTypesResponseUnmarshaller.Instance; return Invoke<ListTypesResponse>(VAR_LISTTYPESREQUEST, VAR_VAR); }
public override K METHOD_NAME() { return this.nextEntry().key; }
public virtual StartAssessmentRunResponse METHOD_NAME(StartAssessmentRunRequest VAR_STARTASSESSMENTRUNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartAssessmentRunRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartAssessmentRunResponseUnmarshaller.Instance; return Invoke<StartAssessmentRunResponse>(VAR_STARTASSESSMENTRUNREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!(VAR_OBJECT is SemanticContext.OR)) { return false; } SemanticContext.OR VAR_SEMANTICCONTEXT.OR = (SemanticContext.OR)VAR_OBJECT; return Arrays.METHOD_NAME(this.opnds, VAR_SEMANTICCONTEXT.OR.opnds); }
public override bool METHOD_NAME(object VAR_OBJECT) { return ((PointTransitions)VAR_OBJECT).point == point; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { throw new Exception(LITERAL_STRING + LITERAL_STRING); }
public virtual DescribeClusterParametersResponse METHOD_NAME(DescribeClusterParametersRequest VAR_DESCRIBECLUSTERPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterParametersResponseUnmarshaller.Instance; return Invoke<DescribeClusterParametersResponse>(VAR_DESCRIBECLUSTERPARAMETERSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return _typeName; }
public virtual CreateModelPackageResponse METHOD_NAME(CreateModelPackageRequest VAR_CREATEMODELPACKAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateModelPackageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateModelPackageResponseUnmarshaller.Instance; return Invoke<CreateModelPackageResponse>(VAR_CREATEMODELPACKAGEREQUEST, VAR_VAR); }
public long METHOD_NAME() { long VAR_LONG = RamUsageEstimator.ShallowSizeOf(this) + RamUsageEstimator.SizeOf(Offsets); if (Offsets != Ordinals) { VAR_LONG += RamUsageEstimator.SizeOf(Ordinals); } return VAR_LONG; }
public sealed override int METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public virtual State METHOD_NAME() { State VAR_STATE = this.GetCurrentState(); return (VAR_STATE == LITERAL_NULL) ? LITERAL_NULL : (State)VAR_STATE.Clone(); }
public override String METHOD_NAME() { CellReference VAR_CELLREFERENCE = new CellReference(Row, Column); StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_evaluator.SheetNameRange); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override java.nio.CharBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public virtual DetectCustomLabelsResponse METHOD_NAME(DetectCustomLabelsRequest VAR_DETECTCUSTOMLABELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectCustomLabelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectCustomLabelsResponseUnmarshaller.Instance; return Invoke<DetectCustomLabelsResponse>(VAR_DETECTCUSTOMLABELSREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { int VAR_INT = LITERAL_INT; for (; VAR_INT < _limit; VAR_INT++) { if (VAR_INT == _array[VAR_INT]) { break; } } if (VAR_INT == _limit) { VAR_INT = -LITERAL_INT; } return VAR_INT; }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return VAR_INT >= VAR_INT && VAR_INT <= VAR_INT; }
public override int METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT != LITERAL_NULL) { { for (int i = LITERAL_INT; i < a.Length; i++) { if (VAR_OBJECT.Equals(a[i])) { return i; } } } } else { { for (int i = LITERAL_INT; i < a.Length; i++) { if ((object)a[i] == LITERAL_NULL) { return i; } } } } return -LITERAL_INT; }
public virtual void METHOD_NAME(bool VAR_BOOL) { SetObjectChecker(VAR_BOOL ? new ObjectChecker() : LITERAL_NULL); }
public virtual ModifyVpcEndpointResponse METHOD_NAME(ModifyVpcEndpointRequest VAR_MODIFYVPCENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcEndpointResponseUnmarshaller.Instance; return Invoke<ModifyVpcEndpointResponse>(VAR_MODIFYVPCENDPOINTREQUEST, VAR_VAR); }
public virtual DeleteMethodResponseResponse METHOD_NAME(DeleteMethodResponseRequest VAR_DELETEMETHODRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMethodResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMethodResponseResponseUnmarshaller.Instance; return Invoke<DeleteMethodResponseResponse>(VAR_DELETEMETHODRESPONSEREQUEST, VAR_VAR); }
public StringRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); _is16bitUnicode = VAR_RECORDINPUTSTREAM.ReadByte() != LITERAL_INT; if (_is16bitUnicode) { _text = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } else { _text = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); } }
public DrawingRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { recordData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public virtual GetProfileResponse METHOD_NAME(GetProfileRequest VAR_GETPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetProfileResponseUnmarshaller.Instance; return Invoke<GetProfileResponse>(VAR_GETPROFILEREQUEST, VAR_VAR); }
public virtual DescribeTableResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new DescribeTableRequest(); VAR_VAR.TableName = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual GetSegmentResponse METHOD_NAME(GetSegmentRequest VAR_GETSEGMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentResponseUnmarshaller.Instance; return Invoke<GetSegmentResponse>(VAR_GETSEGMENTREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME() { return copy(this, _mark); }
public virtual PutAlarmResponse METHOD_NAME(PutAlarmRequest VAR_PUTALARMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAlarmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAlarmResponseUnmarshaller.Instance; return Invoke<PutAlarmResponse>(VAR_PUTALARMREQUEST, VAR_VAR); }
public override bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { int VAR_INT; if (VAR_VALUEEVAL is StringEval) { if (true) { return false; } StringEval VAR_STRINGEVAL = (StringEval)VAR_VALUEEVAL; Boolean? VAR_BOOLEAN? = ParseBoolean(VAR_STRINGEVAL.StringValue); if (VAR_BOOLEAN? == LITERAL_NULL) { return false; } VAR_INT = BoolToInt(VAR_BOOLEAN?.Value); } else if ((VAR_VALUEEVAL is BoolEval)) { BoolEval VAR_BOOLEVAL = (BoolEval)VAR_VALUEEVAL; VAR_INT = BoolToInt(VAR_BOOLEVAL.BooleanValue); } else if ((VAR_VALUEEVAL is BlankEval)) { switch (Code) { case CmpOp.NE: return true; default: return false; } } else if ((VAR_VALUEEVAL is NumberEval)) { switch (Code) { case CmpOp.NE: return true; default: return false; } } else { return false; } return Evaluate(VAR_INT - _value); }
public virtual DeleteTrialResponse METHOD_NAME(DeleteTrialRequest VAR_DELETETRIALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrialRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrialResponseUnmarshaller.Instance; return Invoke<DeleteTrialResponse>(VAR_DELETETRIALREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return set.METHOD_NAME(); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (!Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_STRINGBUILDER.Append(Field); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(includeLower ? LITERAL_CHAR : LITERAL_CHAR); VAR_STRINGBUILDER.Append(lowerTerm != LITERAL_NULL ? (LITERAL_STRING.Equals(Term.METHOD_NAME(lowerTerm), StringComparison.Ordinal) ? LITERAL_STRING : Term.METHOD_NAME(lowerTerm)) : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(upperTerm != LITERAL_NULL ? (LITERAL_STRING.Equals(Term.METHOD_NAME(upperTerm), StringComparison.Ordinal) ? LITERAL_STRING : Term.METHOD_NAME(upperTerm)) : LITERAL_STRING); VAR_STRINGBUILDER.Append(includeUpper ? LITERAL_CHAR : LITERAL_CHAR); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME() { arriving = LITERAL_NULL; leaving = LITERAL_NULL; }
public override int[] METHOD_NAME() { return bytesStart = new int[ArrayUtil.Oversize(m_initSize, RamUsageEstimator.NUM_BYTES_INT32)]; }
public virtual int METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > count) { throw indexAndLength(VAR_INT); } return Sharpen.CharHelper.CodePointBefore(value, VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + treeIdx + LITERAL_STRING; }
public virtual GetLifecyclePoliciesResponse METHOD_NAME(GetLifecyclePoliciesRequest VAR_GETLIFECYCLEPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLifecyclePoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLifecyclePoliciesResponseUnmarshaller.Instance; return Invoke<GetLifecyclePoliciesResponse>(VAR_GETLIFECYCLEPOLICIESREQUEST, VAR_VAR); }
public NRTCachingDirectory(Directory VAR_DIRECTORY, double VAR_DOUBLE, double VAR_DOUBLE) { this.VAR_DIRECTORY = VAR_DIRECTORY; maxMergeSizeBytes = (long)(VAR_DOUBLE * LITERAL_INT * LITERAL_INT); maxCachedBytes = (long)(VAR_DOUBLE * LITERAL_INT * LITERAL_INT); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { VisitIfPresent(_protectRecord, VAR_RECORDVISITOR); VisitIfPresent(_objectProtectRecord, VAR_RECORDVISITOR); VisitIfPresent(_scenarioProtectRecord, VAR_RECORDVISITOR); VisitIfPresent(_passwordRecord, VAR_RECORDVISITOR); }
public RefSubRecord(int VAR_INT, int VAR_INT, int VAR_INT) { _extBookIndex = VAR_INT; _firstSheetIndex = VAR_INT; _lastSheetIndex = VAR_INT; }
public virtual long METHOD_NAME() { return Current().GetLength(); }
public override string METHOD_NAME() { return GetType().Name + LITERAL_STRING + m_maxLevels + LITERAL_STRING + m_ctx + LITERAL_STRING; }
public BooleanQueryBuilder(IQueryBuilder VAR_IQUERYBUILDER) { this.VAR_IQUERYBUILDER = VAR_IQUERYBUILDER; }
public HSSFShape(EscherContainerRecord VAR_ESCHERCONTAINERRECORD, ObjRecord VAR_OBJRECORD) { this._escherContainer = VAR_ESCHERCONTAINERRECORD; this._objRecord = VAR_OBJRECORD; this._optRecord = (EscherOptRecord)VAR_ESCHERCONTAINERRECORD.GetChildById(EscherOptRecord.RECORD_ID); this.anchor = HSSFAnchor.CreateAnchorFromEscher(VAR_ESCHERCONTAINERRECORD); }
public virtual ListUpdatesResponse METHOD_NAME(ListUpdatesRequest VAR_LISTUPDATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListUpdatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListUpdatesResponseUnmarshaller.Instance; return Invoke<ListUpdatesResponse>(VAR_LISTUPDATESREQUEST, VAR_VAR); }
public virtual IncreaseStreamRetentionPeriodResponse METHOD_NAME(IncreaseStreamRetentionPeriodRequest VAR_INCREASESTREAMRETENTIONPERIODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IncreaseStreamRetentionPeriodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IncreaseStreamRetentionPeriodResponseUnmarshaller.Instance; return Invoke<IncreaseStreamRetentionPeriodResponse>(VAR_INCREASESTREAMRETENTIONPERIODREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(float VAR_FLOAT) { throw new System.NotImplementedException(); }
protected internal override ICollection<Cell> METHOD_NAME() { string[] VAR_STRING[] = GeohashUtils.GetSubGeohashes(Geohash); IList<Cell> VAR_ILIST<CELL> = new List<Cell>(VAR_STRING[].Length); foreach (string hash in VAR_STRING[]) { VAR_ILIST<CELL>.Add(new GhCell((GeohashPrefixTree)m_outerInstance, hash)); } return VAR_ILIST<CELL>; }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, char[] VAR_CHAR[]) { insert0(VAR_INT, VAR_CHAR[]); return this; }
public static ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE, int VAR_INT) { return FindAllNodes(VAR_IPARSETREE, VAR_INT, true); }
public NameIdentifier(String VAR_STRING, bool VAR_BOOL) { _name = VAR_STRING; _isQuoted = VAR_BOOL; }
public ObjectLoader METHOD_NAME(DiffEntry.Side VAR_DIFFENTRY.SIDE, DiffEntry VAR_DIFFENTRY) { switch (VAR_DIFFENTRY.SIDE) { case DiffEntry.Side.OLD: { return oldSource.METHOD_NAME(VAR_DIFFENTRY.oldPath, VAR_DIFFENTRY.oldId.ToObjectId()); } case DiffEntry.Side.NEW: { return newSource.METHOD_NAME(VAR_DIFFENTRY.newPath, VAR_DIFFENTRY.newId.ToObjectId()); } default: { throw new ArgumentException(); } } }
public virtual CreateDBClusterSnapshotResponse METHOD_NAME(CreateDBClusterSnapshotRequest VAR_CREATEDBCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBClusterSnapshotResponseUnmarshaller.Instance; return Invoke<CreateDBClusterSnapshotResponse>(VAR_CREATEDBCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public ExternalBookBlock(String VAR_STRING, String[] VAR_STRING[]) { _externalBookRecord = SupBookRecord.CreateExternalReferences(VAR_STRING, VAR_STRING[]); _crnBlocks = new CRNBlock[LITERAL_INT]; }
public static int METHOD_NAME(string VAR_STRING, string VAR_STRING) { for (int i = LITERAL_INT; i < VAR_STRING.Length && i < VAR_STRING.Length; i++) { int VAR_INT = VAR_STRING[i] - VAR_STRING[i]; if (VAR_INT != LITERAL_INT) { return VAR_INT; } } return VAR_STRING.Length - VAR_STRING.Length; }
public virtual RecallPoint[] METHOD_NAME() { return recallPoints.ToArray(); }
public RemoveFacePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public static Int32sRef METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, Int32sRef VAR_INT32SREF) { int VAR_INT = VAR_INT; int VAR_INT = LITERAL_INT; int VAR_INT = VAR_INT + VAR_INT; while (VAR_INT < VAR_INT) { VAR_INT32SREF.Grow(VAR_INT + LITERAL_INT); int VAR_INT = Character.CodePointAt(VAR_CHAR[], VAR_INT, VAR_INT); VAR_INT32SREF.Int32s[VAR_INT] = VAR_INT; VAR_INT += Character.CharCount(VAR_INT); VAR_INT++; } VAR_INT32SREF.Length = VAR_INT; return VAR_INT32SREF; }
public override void METHOD_NAME(int VAR_INT) { pos -= VAR_INT; }
public void METHOD_NAME(DVRecord VAR_DVRECORD) { _validationList.Add(VAR_DVRECORD); _headerRec.DVRecNo = (_validationList.Count); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { if (!(FieldsData is Double)) { throw new System.ArgumentException(LITERAL_STRING + FieldsData.GetType().Name + LITERAL_STRING); } FieldsData = new Double(VAR_DOUBLE); }
public DeleteRepoAuthorizationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public virtual void METHOD_NAME(object VAR_OBJECT) { throw new System.NotImplementedException(); }
public override string METHOD_NAME() { byte[] VAR_BYTE[] = ToByteArray(); CanonicalTreeParser VAR_CANONICALTREEPARSER = new CanonicalTreeParser(); VAR_CANONICALTREEPARSER.Reset(VAR_BYTE[]); StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (!VAR_CANONICALTREEPARSER.Eof) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); try { new ObjectChecker().CheckTree(VAR_BYTE[]); } catch (CorruptObjectException error) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(error.Message).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_CHAR); } } while (!VAR_CANONICALTREEPARSER.Eof) { FileMode VAR_FILEMODE = VAR_CANONICALTREEPARSER.EntryFileMode; VAR_STRINGBUILDER.Append(VAR_FILEMODE); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(Constants.TypeString(VAR_FILEMODE.GetObjectType())); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CANONICALTREEPARSER.EntryObjectId.Name); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CANONICALTREEPARSER.EntryPathString); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_CANONICALTREEPARSER.Next(); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override char METHOD_NAME(int VAR_INT) { return (char)getShort(VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(LeftRowGutter)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(TopColGutter)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(RowLevelMax)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(ColLevelMax)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual IParseTree METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public virtual ListInvalidationsResponse METHOD_NAME(ListInvalidationsRequest VAR_LISTINVALIDATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListInvalidationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListInvalidationsResponseUnmarshaller.Instance; return Invoke<ListInvalidationsResponse>(VAR_LISTINVALIDATIONSREQUEST, VAR_VAR); }
public SinkTokenStream METHOD_NAME() { return METHOD_NAME(ACCEPT_ALL_FILTER); }
public PrecedencePredicate(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual ReadPresetResponse METHOD_NAME(ReadPresetRequest VAR_READPRESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReadPresetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReadPresetResponseUnmarshaller.Instance; return Invoke<ReadPresetResponse>(VAR_READPRESETREQUEST, VAR_VAR); }
public virtual FilePath METHOD_NAME() { if (IsBare) { throw new NoWorkTreeException(); } return indexFile; }
public virtual ListApplicationsResponse METHOD_NAME(ListApplicationsRequest VAR_LISTAPPLICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListApplicationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListApplicationsResponseUnmarshaller.Instance; return Invoke<ListApplicationsResponse>(VAR_LISTAPPLICATIONSREQUEST, VAR_VAR); }
public IDataValidationConstraint METHOD_NAME(int VAR_INT, int VAR_INT, String VAR_STRING, String VAR_STRING) { return DVConstraint.METHOD_NAME(VAR_INT, VAR_INT, VAR_STRING, VAR_STRING); }
public virtual int METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public override String METHOD_NAME() { return field_1_value ? LITERAL_STRING : LITERAL_STRING; }
public override void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); if (VAR_INT == LITERAL_INT) { return; } buf.append(VAR_CHAR[], VAR_INT, VAR_INT); }
public override void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { TokenSource.METHOD_NAME(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public RevokeDBSecurityGroupIngressRequest(string VAR_STRING) { _dbSecurityGroupName = VAR_STRING; }
public virtual InitiateDocumentVersionUploadResponse METHOD_NAME(InitiateDocumentVersionUploadRequest VAR_INITIATEDOCUMENTVERSIONUPLOADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InitiateDocumentVersionUploadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InitiateDocumentVersionUploadResponseUnmarshaller.Instance; return Invoke<InitiateDocumentVersionUploadResponse>(VAR_INITIATEDOCUMENTVERSIONUPLOADREQUEST, VAR_VAR); }
public MemAreaPtg(int VAR_INT) { field_1_reserved = LITERAL_INT; field_2_subex_len = VAR_INT; }
public FtrHeader() { reserved = new byte[LITERAL_INT]; }
public override java.nio.IntBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.INT); byteBuffer.position(_position * libcore.io.SizeOf.INT); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public string METHOD_NAME() { return authority; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if ((VAR_INT < LITERAL_INT) || (VAR_INT > VAR_BYTE[].Length) || (VAR_INT < LITERAL_INT) || ((VAR_INT + VAR_INT) > VAR_BYTE[].Length) || ((VAR_INT + VAR_INT) < LITERAL_INT)) { throw new IndexOutOfRangeException(); } else if (VAR_INT == LITERAL_INT) { return; } do { CreateBlockIfNeeded(); int VAR_INT = Math.Min(buffer.Remaining(), VAR_INT); buffer.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; } while (VAR_INT > LITERAL_INT); }
public static void METHOD_NAME(string VAR_STRING, string VAR_STRING) { { for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (!((VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || (VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || (VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || VAR_STRING.IndexOf(VAR_CHAR) > -LITERAL_INT)) { throw new java.net.URISyntaxException(VAR_STRING, LITERAL_STRING, i); } } } }
public static String METHOD_NAME(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { int VAR_INT = VAR_ILITTLEENDIANINPUT.ReadUShort(); byte VAR_BYTE = (byte)VAR_ILITTLEENDIANINPUT.ReadByte(); if ((VAR_BYTE & LITERAL_INT) == LITERAL_INT) { return ReadCompressedUnicode(VAR_ILITTLEENDIANINPUT, VAR_INT); } return ReadUnicodeLE(VAR_ILITTLEENDIANINPUT, VAR_INT); }
public DocValuesOrdinalsReader(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public virtual AdvertiseByoipCidrResponse METHOD_NAME(AdvertiseByoipCidrRequest VAR_ADVERTISEBYOIPCIDRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AdvertiseByoipCidrRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AdvertiseByoipCidrResponseUnmarshaller.Instance; return Invoke<AdvertiseByoipCidrResponse>(VAR_ADVERTISEBYOIPCIDRREQUEST, VAR_VAR); }
public virtual DescribeAlarmsResponse METHOD_NAME() { return METHOD_NAME(new DescribeAlarmsRequest()); }
public virtual DescribeCrossAccountAccessRoleResponse METHOD_NAME(DescribeCrossAccountAccessRoleRequest VAR_DESCRIBECROSSACCOUNTACCESSROLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCrossAccountAccessRoleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCrossAccountAccessRoleResponseUnmarshaller.Instance; return Invoke<DescribeCrossAccountAccessRoleResponse>(VAR_DESCRIBECROSSACCOUNTACCESSROLEREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME() { reverse0(); return this; }
public virtual DescribeImagesResponse METHOD_NAME(DescribeImagesRequest VAR_DESCRIBEIMAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImagesResponseUnmarshaller.Instance; return Invoke<DescribeImagesResponse>(VAR_DESCRIBEIMAGESREQUEST, VAR_VAR); }
public CreateDhcpOptionsRequest(List<DhcpConfiguration> VAR_LIST<DHCPCONFIGURATION>) { _dhcpConfigurations = VAR_LIST<DHCPCONFIGURATION>; }
public virtual StartChatContactResponse METHOD_NAME(StartChatContactRequest VAR_STARTCHATCONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartChatContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartChatContactResponseUnmarshaller.Instance; return Invoke<StartChatContactResponse>(VAR_STARTCHATCONTACTREQUEST, VAR_VAR); }
public virtual GetCampaignsResponse METHOD_NAME(GetCampaignsRequest VAR_GETCAMPAIGNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignsResponseUnmarshaller.Instance; return Invoke<GetCampaignsResponse>(VAR_GETCAMPAIGNSREQUEST, VAR_VAR); }
public virtual GetAssessmentReportResponse METHOD_NAME(GetAssessmentReportRequest VAR_GETASSESSMENTREPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAssessmentReportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAssessmentReportResponseUnmarshaller.Instance; return Invoke<GetAssessmentReportResponse>(VAR_GETASSESSMENTREPORTREQUEST, VAR_VAR); }
public override void METHOD_NAME(Parser VAR_PARSER, DFA VAR_DFA, int VAR_INT, int VAR_INT, bool VAR_BOOL, BitSet VAR_BITSET, ATNConfigSet VAR_ATNCONFIGSET) { if (exactOnly && !VAR_BOOL) { return; } string VAR_STRING = LITERAL_STRING; string VAR_STRING = GetDecisionDescription(VAR_PARSER, VAR_DFA); BitSet VAR_BITSET = GetConflictingAlts(VAR_BITSET, VAR_ATNCONFIGSET); string VAR_STRING = ((ITokenStream)VAR_PARSER.InputStream).GetText(Interval.Of(VAR_INT, VAR_INT)); string VAR_STRING = string.Format(VAR_STRING, VAR_STRING, VAR_BITSET, VAR_STRING); VAR_PARSER.NotifyErrorListeners(VAR_STRING); }
public override object[] METHOD_NAME() { lock (this._enclosing) { return base.METHOD_NAME(); } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is RevFlag) { return (mask & ((RevFlag)VAR_OBJECT).mask) != LITERAL_INT; } return false; }
public virtual DisableAlarmActionsResponse METHOD_NAME(DisableAlarmActionsRequest VAR_DISABLEALARMACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableAlarmActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableAlarmActionsResponseUnmarshaller.Instance; return Invoke<DisableAlarmActionsResponse>(VAR_DISABLEALARMACTIONSREQUEST, VAR_VAR); }
public virtual RegisterDBProxyTargetsResponse METHOD_NAME(RegisterDBProxyTargetsRequest VAR_REGISTERDBPROXYTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterDBProxyTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterDBProxyTargetsResponseUnmarshaller.Instance; return Invoke<RegisterDBProxyTargetsResponse>(VAR_REGISTERDBPROXYTARGETSREQUEST, VAR_VAR); }
public static void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT, byte VAR_BYTE) { java.util.Arrays.checkStartAndEnd(VAR_BYTE[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_BYTE[][i] = VAR_BYTE; } } }
public bool METHOD_NAME(int VAR_INT) { return _first_col <= VAR_INT && VAR_INT <= _last_col; }
public Hashtable() { table = (java.util.Hashtable.HashtableEntry<K, V>[])EMPTY_TABLE; threshold = -LITERAL_INT; }
public AttributeFactory METHOD_NAME() { return this.factory; }
public override void METHOD_NAME(bool VAR_BOOL) { this._enclosing.onContentChanged(); }
public virtual ListObjectAttributesResponse METHOD_NAME(ListObjectAttributesRequest VAR_LISTOBJECTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListObjectAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListObjectAttributesResponseUnmarshaller.Instance; return Invoke<ListObjectAttributesResponse>(VAR_LISTOBJECTATTRIBUTESREQUEST, VAR_VAR); }
public virtual GetDeploymentsResponse METHOD_NAME(GetDeploymentsRequest VAR_GETDEPLOYMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentsResponseUnmarshaller.Instance; return Invoke<GetDeploymentsResponse>(VAR_GETDEPLOYMENTSREQUEST, VAR_VAR); }
public virtual ListWorkGroupsResponse METHOD_NAME(ListWorkGroupsRequest VAR_LISTWORKGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWorkGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWorkGroupsResponseUnmarshaller.Instance; return Invoke<ListWorkGroupsResponse>(VAR_LISTWORKGROUPSREQUEST, VAR_VAR); }
public CreatePhotoStoreRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual PutMethodResponse METHOD_NAME(PutMethodRequest VAR_PUTMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutMethodResponseUnmarshaller.Instance; return Invoke<PutMethodResponse>(VAR_PUTMETHODREQUEST, VAR_VAR); }
public virtual DescribeServiceAccessPoliciesResponse METHOD_NAME(DescribeServiceAccessPoliciesRequest VAR_DESCRIBESERVICEACCESSPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeServiceAccessPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeServiceAccessPoliciesResponseUnmarshaller.Instance; return Invoke<DescribeServiceAccessPoliciesResponse>(VAR_DESCRIBESERVICEACCESSPOLICIESREQUEST, VAR_VAR); }
public virtual DescribeCacheParameterGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeCacheParameterGroupsRequest()); }
public virtual float? METHOD_NAME(string VAR_STRING) { string VAR_STRING = culture.TextInfo.ToLower(VAR_STRING.Trim()); TSTNode VAR_TSTNODE = GetNode(VAR_STRING); if (VAR_TSTNODE == LITERAL_NULL) { return LITERAL_NULL; } float? VAR_FLOAT? = (float? )(VAR_TSTNODE.data); if (VAR_FLOAT? == LITERAL_NULL) { VAR_FLOAT? = new float? (LITERAL_INT); } else { VAR_FLOAT? = new float? ((int)VAR_FLOAT? + LITERAL_INT); } Put(VAR_STRING, VAR_FLOAT?); return VAR_FLOAT?; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Protect).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual RetrieveDomainAuthCodeResponse METHOD_NAME(RetrieveDomainAuthCodeRequest VAR_RETRIEVEDOMAINAUTHCODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RetrieveDomainAuthCodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RetrieveDomainAuthCodeResponseUnmarshaller.Instance; return Invoke<RetrieveDomainAuthCodeResponse>(VAR_RETRIEVEDOMAINAUTHCODEREQUEST, VAR_VAR); }
public virtual GetRelationalDatabaseMetricDataResponse METHOD_NAME(GetRelationalDatabaseMetricDataRequest VAR_GETRELATIONALDATABASEMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseMetricDataResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseMetricDataResponse>(VAR_GETRELATIONALDATABASEMETRICDATAREQUEST, VAR_VAR); }
public java.util.MapClass.Entry<K, V> METHOD_NAME() { java.util.TreeMap.Node<K, V> VAR_JAVA.UTIL.TREEMAP.NODE<K, V> = this.endpoint(true); if (VAR_JAVA.UTIL.TREEMAP.NODE<K, V> != LITERAL_NULL) { this._enclosing.removeInternal(VAR_JAVA.UTIL.TREEMAP.NODE<K, V>); } return this._enclosing.immutableCopy(VAR_JAVA.UTIL.TREEMAP.NODE<K, V>); }
public LimitTokenPositionFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT, bool VAR_BOOL) : base(@in) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; posIncAtt = AddAttribute<IPositionIncrementAttribute>(); }
public ViewFieldsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { sxaxis = VAR_RECORDINPUTSTREAM.ReadShort(); cSub = VAR_RECORDINPUTSTREAM.ReadShort(); grbitSub = VAR_RECORDINPUTSTREAM.ReadShort(); cItm = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); if (VAR_INT != STRING_NOT_PRESENT_LEN) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadByte(); if ((VAR_INT & LITERAL_INT) != LITERAL_INT) { _name = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } else { _name = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); } } }
public static DefaultProfile METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING) { var VAR_VAR = new Credential(VAR_STRING, VAR_STRING); _profile = new DefaultProfile(VAR_STRING, VAR_VAR); return _profile; }
public virtual int METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, LITERAL_INT); }
public virtual ListAppsResponse METHOD_NAME(ListAppsRequest VAR_LISTAPPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAppsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAppsResponseUnmarshaller.Instance; return Invoke<ListAppsResponse>(VAR_LISTAPPSREQUEST, VAR_VAR); }
public virtual ListAttachedIndicesResponse METHOD_NAME(ListAttachedIndicesRequest VAR_LISTATTACHEDINDICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAttachedIndicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAttachedIndicesResponseUnmarshaller.Instance; return Invoke<ListAttachedIndicesResponse>(VAR_LISTATTACHEDINDICESREQUEST, VAR_VAR); }
public void METHOD_NAME(HSSFShape VAR_HSSFSHAPE) { VAR_HSSFSHAPE.Patriarch = this; _shapes.Add(VAR_HSSFSHAPE); }
public virtual CreateNatGatewayResponse METHOD_NAME(CreateNatGatewayRequest VAR_CREATENATGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNatGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNatGatewayResponseUnmarshaller.Instance; return Invoke<CreateNatGatewayResponse>(VAR_CREATENATGATEWAYREQUEST, VAR_VAR); }
public virtual GetApnsVoipChannelResponse METHOD_NAME(GetApnsVoipChannelRequest VAR_GETAPNSVOIPCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApnsVoipChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<GetApnsVoipChannelResponse>(VAR_GETAPNSVOIPCHANNELREQUEST, VAR_VAR); }
public virtual ReplaceTransitGatewayRouteResponse METHOD_NAME(ReplaceTransitGatewayRouteRequest VAR_REPLACETRANSITGATEWAYROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReplaceTransitGatewayRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReplaceTransitGatewayRouteResponseUnmarshaller.Instance; return Invoke<ReplaceTransitGatewayRouteResponse>(VAR_REPLACETRANSITGATEWAYROUTEREQUEST, VAR_VAR); }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF + LITERAL_INT * RamUsageEstimator.NUM_BYTES_INT32) + RamUsageEstimator.SizeOf(data) + positions.METHOD_NAME() + wordNums.METHOD_NAME(); }
public virtual ParseTreePattern METHOD_NAME(string VAR_STRING, int VAR_INT) { IList<IToken> VAR_ILIST<ITOKEN> = Tokenize(VAR_STRING); ListTokenSource VAR_LISTTOKENSOURCE = new ListTokenSource(VAR_ILIST<ITOKEN>); CommonTokenStream VAR_COMMONTOKENSTREAM = new CommonTokenStream(VAR_LISTTOKENSOURCE); ParserInterpreter VAR_PARSERINTERPRETER = new ParserInterpreter(parser.GrammarFileName, parser.Vocabulary, Arrays.AsList(parser.RuleNames), parser.GetATNWithBypassAlts(), VAR_COMMONTOKENSTREAM); IParseTree VAR_IPARSETREE = LITERAL_NULL; try { VAR_PARSERINTERPRETER.ErrorHandler = new BailErrorStrategy(); VAR_IPARSETREE = VAR_PARSERINTERPRETER.Parse(VAR_INT); } catch (ParseCanceledException e) { throw (RecognitionException)e.InnerException; } catch (RecognitionException) { throw; } catch (Exception e) { throw new ParseTreePatternMatcher.CannotInvokeStartRule(e); } if (VAR_COMMONTOKENSTREAM.LA(LITERAL_INT) != TokenConstants.EOF) { throw new ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern(); } return new ParseTreePattern(this, VAR_STRING, VAR_INT, VAR_IPARSETREE); }
public virtual GetRelationalDatabaseLogEventsResponse METHOD_NAME(GetRelationalDatabaseLogEventsRequest VAR_GETRELATIONALDATABASELOGEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseLogEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseLogEventsResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseLogEventsResponse>(VAR_GETRELATIONALDATABASELOGEVENTSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new BeiderMorseFilter(VAR_TOKENSTREAM, engine, languageSet); }
public override java.nio.FloatBuffer METHOD_NAME() { return copy(this, _mark); }
public ClasspathResourceLoader(Type VAR_TYPE) { this.VAR_TYPE = VAR_TYPE; }
public virtual DescribeRouteTablesResponse METHOD_NAME(DescribeRouteTablesRequest VAR_DESCRIBEROUTETABLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRouteTablesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRouteTablesResponseUnmarshaller.Instance; return Invoke<DescribeRouteTablesResponse>(VAR_DESCRIBEROUTETABLESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RenameCallback VAR_RENAMECALLBACK) { renameCallback = VAR_RENAMECALLBACK; }
public DimensionsRecord METHOD_NAME() { DimensionsRecord VAR_DIMENSIONSRECORD = new DimensionsRecord(); VAR_DIMENSIONSRECORD.FirstRow = (firstrow); VAR_DIMENSIONSRECORD.LastRow = (lastrow); VAR_DIMENSIONSRECORD.FirstCol = _valuesAgg.FirstCellNum; VAR_DIMENSIONSRECORD.LastCol = _valuesAgg.LastCellNum; return VAR_DIMENSIONSRECORD; }
public virtual StopTransformJobResponse METHOD_NAME(StopTransformJobRequest VAR_STOPTRANSFORMJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTransformJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTransformJobResponseUnmarshaller.Instance; return Invoke<StopTransformJobResponse>(VAR_STOPTRANSFORMJOBREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(this.StringValue); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public QueryAuthenticationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual java.io.PrintStream METHOD_NAME(char VAR_CHAR) { print(VAR_CHAR); return this; }
public virtual StartKeyPhrasesDetectionJobResponse METHOD_NAME(StartKeyPhrasesDetectionJobRequest VAR_STARTKEYPHRASESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartKeyPhrasesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StartKeyPhrasesDetectionJobResponse>(VAR_STARTKEYPHRASESDETECTIONJOBREQUEST, VAR_VAR); }
public virtual QueryPhraseMap METHOD_NAME(IList<TermInfo> VAR_ILIST<TERMINFO>) { QueryPhraseMap VAR_QUERYPHRASEMAP = this; foreach (TermInfo ti in VAR_ILIST<TERMINFO>) { VAR_QUERYPHRASEMAP.subMap.TryGetValue(ti.Text, out VAR_QUERYPHRASEMAP); if (VAR_QUERYPHRASEMAP == LITERAL_NULL) return LITERAL_NULL; } return VAR_QUERYPHRASEMAP.IsValidTermOrPhrase(VAR_ILIST<TERMINFO>) ? VAR_QUERYPHRASEMAP : LITERAL_NULL; }
public virtual void METHOD_NAME(Term VAR_TERM) { if (VAR_TERM == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } this.m_terms.METHOD_NAME(VAR_TERM); }
public virtual ListEmailIdentitiesResponse METHOD_NAME(ListEmailIdentitiesRequest VAR_LISTEMAILIDENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEmailIdentitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEmailIdentitiesResponseUnmarshaller.Instance; return Invoke<ListEmailIdentitiesResponse>(VAR_LISTEMAILIDENTITIESREQUEST, VAR_VAR); }
public MutableFPNumber(BigInteger VAR_BIGINTEGER, int VAR_INT) { _significand = VAR_BIGINTEGER; _binaryExponent = VAR_INT; }
public virtual CreateNetworkProfileResponse METHOD_NAME(CreateNetworkProfileRequest VAR_CREATENETWORKPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkProfileResponseUnmarshaller.Instance; return Invoke<CreateNetworkProfileResponse>(VAR_CREATENETWORKPROFILEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { transitions.RemoveAt(VAR_INT); }
public override int METHOD_NAME() { PerfRunData VAR_PERFRUNDATA = RunData; IndexWriter VAR_INDEXWRITER = VAR_PERFRUNDATA.IndexWriter; if (VAR_INDEXWRITER == LITERAL_NULL) { throw new Exception(LITERAL_STRING); } if (VAR_PERFRUNDATA.GetIndexReader() != LITERAL_NULL) { throw new Exception(LITERAL_STRING); } long VAR_LONG = J2N.Time.CurrentTimeMilliseconds(); DirectoryReader VAR_DIRECTORYREADER = DirectoryReader.Open(VAR_INDEXWRITER, true); VAR_PERFRUNDATA.SetIndexReader(VAR_DIRECTORYREADER); VAR_DIRECTORYREADER.DecRef(); reopenCount = LITERAL_INT; while (!Stop) { long VAR_LONG = (pauseMSec - (J2N.Time.CurrentTimeMilliseconds() - VAR_LONG)); if (VAR_LONG > LITERAL_INT) { Thread.Sleep((int)VAR_LONG); } VAR_LONG = J2N.Time.CurrentTimeMilliseconds(); DirectoryReader VAR_DIRECTORYREADER = DirectoryReader.OpenIfChanged(VAR_DIRECTORYREADER); if (VAR_DIRECTORYREADER != LITERAL_NULL) { int VAR_INT = (int)(J2N.Time.CurrentTimeMilliseconds() - VAR_LONG); if (reopenTimes.Length == reopenCount) { reopenTimes = ArrayUtil.Grow(reopenTimes, LITERAL_INT + reopenCount); } reopenTimes[reopenCount++] = VAR_INT; VAR_PERFRUNDATA.SetIndexReader(VAR_DIRECTORYREADER); VAR_DIRECTORYREADER.DecRef(); VAR_DIRECTORYREADER = VAR_DIRECTORYREADER; } } Stop = false; return reopenCount; }
public virtual PutAttributesResponse METHOD_NAME(PutAttributesRequest VAR_PUTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAttributesResponseUnmarshaller.Instance; return Invoke<PutAttributesResponse>(VAR_PUTATTRIBUTESREQUEST, VAR_VAR); }
public virtual DeleteLocalGatewayRouteTableVpcAssociationResponse METHOD_NAME(DeleteLocalGatewayRouteTableVpcAssociationRequest VAR_DELETELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLocalGatewayRouteTableVpcAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLocalGatewayRouteTableVpcAssociationResponseUnmarshaller.Instance; return Invoke<DeleteLocalGatewayRouteTableVpcAssociationResponse>(VAR_DELETELOCALGATEWAYROUTETABLEVPCASSOCIATIONREQUEST, VAR_VAR); }
public override RevFilter METHOD_NAME() { return this; }
public static TreeFilter METHOD_NAME(TreeFilter[] VAR_TREEFILTER[]) { if (VAR_TREEFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_TREEFILTER[][LITERAL_INT], VAR_TREEFILTER[][LITERAL_INT]); } if (VAR_TREEFILTER[].Length < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[VAR_TREEFILTER[].Length]; System.Array.Copy(VAR_TREEFILTER[], LITERAL_INT, VAR_TREEFILTER[], LITERAL_INT, VAR_TREEFILTER[].Length); return new AndTreeFilter.List(VAR_TREEFILTER[]); }
public override void METHOD_NAME(int VAR_INT) { while (--VAR_INT >= LITERAL_INT) { if (currentSubtree != LITERAL_NULL) { nextSubtreePos--; } ptr--; ParseEntry(); if (currentSubtree != LITERAL_NULL) { ptr -= currentSubtree.GetEntrySpan() - LITERAL_INT; } } }
public override IDictionary<string, SubmoduleStatus> METHOD_NAME() { CheckCallable(); try { SubmoduleWalk VAR_SUBMODULEWALK = SubmoduleWalk.ForIndex(repo); if (!paths.IsEmpty()) { VAR_SUBMODULEWALK.SetFilter(PathFilterGroup.CreateFromStrings(paths)); } IDictionary<string, SubmoduleStatus> VAR_IDICTIONARY<STRING, SUBMODULESTATUS> = new Dictionary<string, SubmoduleStatus>(); while (VAR_SUBMODULEWALK.Next()) { SubmoduleStatus VAR_SUBMODULESTATUS = GetStatus(VAR_SUBMODULEWALK); VAR_IDICTIONARY<STRING, SUBMODULESTATUS>.Put(VAR_SUBMODULESTATUS.GetPath(), VAR_SUBMODULESTATUS); } return VAR_IDICTIONARY<STRING, SUBMODULESTATUS>; } catch (IOException e) { throw new JGitInternalException(e.Message, e); } catch (ConfigInvalidException e) { throw new JGitInternalException(e.Message, e); } }
public override int METHOD_NAME() { lock (this) { return count - pos; } }
public SmallStream(int VAR_INT, byte[] VAR_BYTE[]) { this.VAR_INT = VAR_INT; this.VAR_BYTE[] = VAR_BYTE[]; }
public virtual string METHOD_NAME(string VAR_STRING) { return QueryParserBase.Escape(VAR_STRING); }
public QueryScorer(Query VAR_QUERY) { Init(VAR_QUERY, LITERAL_NULL, LITERAL_NULL, true); }
public int METHOD_NAME() { return _highIx; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VCenter).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public int METHOD_NAME() { return _limit; }
public PredictCategoryRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual DeleteLagResponse METHOD_NAME(DeleteLagRequest VAR_DELETELAGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLagRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLagResponseUnmarshaller.Instance; return Invoke<DeleteLagResponse>(VAR_DELETELAGREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.LongBuffer)) { return false; } java.nio.LongBuffer VAR_JAVA.NIO.LONGBUFFER = (java.nio.LongBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.LONGBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.LONGBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { VAR_BOOL = get(VAR_INT++) == VAR_JAVA.NIO.LONGBUFFER.get(VAR_INT++); } return VAR_BOOL; }
public void METHOD_NAME() { state.METHOD_NAME(); }
public BooleanMatcher(bool VAR_BOOL, CmpOp VAR_CMPOP) : base(optr) { _value = BoolToInt(VAR_BOOL); }
public SheetVector(RefEval VAR_REFEVAL) { _size = VAR_REFEVAL.NumberOfSheets; _re = VAR_REFEVAL; }
public virtual UpdateGameSessionResponse METHOD_NAME(UpdateGameSessionRequest VAR_UPDATEGAMESESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGameSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGameSessionResponseUnmarshaller.Instance; return Invoke<UpdateGameSessionResponse>(VAR_UPDATEGAMESESSIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + Number.ToString(Mu) + LITERAL_STRING; }
public override void METHOD_NAME(DataInput VAR_DATAINPUT, int VAR_INT, int VAR_INT, int VAR_INT, BytesRef VAR_BYTESREF) { Debug.Assert(VAR_INT + VAR_INT <= VAR_INT); if (VAR_INT == LITERAL_INT) { VAR_BYTESREF.Length = LITERAL_INT; return; } byte[] VAR_BYTE[] = new byte[VAR_DATAINPUT.ReadVInt32()]; VAR_DATAINPUT.ReadBytes(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); byte[] VAR_BYTE[] = LITERAL_NULL; using (MemoryStream decompressedStream = new MemoryStream()) { using (MemoryStream compressedStream = new MemoryStream(VAR_BYTE[])) { using (DeflateStream dStream = new DeflateStream(compressedStream, System.IO.Compression.CompressionMode.METHOD_NAME)) { dStream.CopyTo(decompressedStream); } } VAR_BYTE[] = decompressedStream.ToArray(); } if (VAR_BYTE[].Length != VAR_INT) { throw new CorruptIndexException(LITERAL_STRING + VAR_BYTE[].Length + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_DATAINPUT + LITERAL_STRING); } VAR_BYTESREF.Bytes = VAR_BYTE[]; VAR_BYTESREF.Offset = VAR_INT; VAR_BYTESREF.Length = VAR_INT; }
public virtual Tuple<string, string> METHOD_NAME(string VAR_STRING, string VAR_STRING) { int VAR_INT = VAR_STRING.IndexOf(this.extensionFieldDelimiter); if (VAR_INT < LITERAL_INT) return new Tuple<string, string>(VAR_STRING, LITERAL_NULL); string VAR_STRING = VAR_INT == LITERAL_INT ? VAR_STRING : VAR_STRING.Substring(LITERAL_INT, VAR_INT); string VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); return new Tuple<string, string>(VAR_STRING, VAR_STRING); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(BorderType)).Append(LITERAL_STRING).Append(BorderType).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Options)).Append(LITERAL_STRING).Append(Options).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsAutoSize).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsAutoPosition).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual PauseClusterResponse METHOD_NAME(PauseClusterRequest VAR_PAUSECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PauseClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PauseClusterResponseUnmarshaller.Instance; return Invoke<PauseClusterResponse>(VAR_PAUSECLUSTERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { value = VAR_STRING; }
public virtual AllocateAddressResponse METHOD_NAME(AllocateAddressRequest VAR_ALLOCATEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateAddressResponseUnmarshaller.Instance; return Invoke<AllocateAddressResponse>(VAR_ALLOCATEADDRESSREQUEST, VAR_VAR); }
public virtual GetNetworkProfileResponse METHOD_NAME(GetNetworkProfileRequest VAR_GETNETWORKPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetNetworkProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetNetworkProfileResponseUnmarshaller.Instance; return Invoke<GetNetworkProfileResponse>(VAR_GETNETWORKPROFILEREQUEST, VAR_VAR); }
public static void METHOD_NAME(Exception VAR_EXCEPTION) { if (VAR_EXCEPTION != LITERAL_NULL) { if (VAR_EXCEPTION is System.IO.IOException) { throw VAR_EXCEPTION; } ReThrowUnchecked(VAR_EXCEPTION); } }
public void METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE) { if (VAR_CELLVALUERECORDINTERFACE is FormulaRecordAggregate) { ((FormulaRecordAggregate)VAR_CELLVALUERECORDINTERFACE).NotifyFormulaChanging(); } _valuesAgg.METHOD_NAME(VAR_CELLVALUERECORDINTERFACE); }
public virtual CreateSnapshotResponse METHOD_NAME(CreateSnapshotRequest VAR_CREATESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSnapshotResponseUnmarshaller.Instance; return Invoke<CreateSnapshotResponse>(VAR_CREATESNAPSHOTREQUEST, VAR_VAR); }
public virtual IToken METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= tokens.Count) { throw new ArgumentOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (tokens.Count - LITERAL_INT)); } return tokens[VAR_INT]; }
public virtual DescribeAlarmsResponse METHOD_NAME(DescribeAlarmsRequest VAR_DESCRIBEALARMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAlarmsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAlarmsResponseUnmarshaller.Instance; return Invoke<DescribeAlarmsResponse>(VAR_DESCRIBEALARMSREQUEST, VAR_VAR); }
public static long[] METHOD_NAME(long[] VAR_LONG[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_LONG[].Length < VAR_INT) { long[] VAR_LONG[] = new long[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT64)]; Array.Copy(VAR_LONG[], LITERAL_INT, VAR_LONG[], LITERAL_INT, VAR_LONG[].Length); return VAR_LONG[]; } else { return VAR_LONG[]; } }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_1_shapeId); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, field_2_flags); VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT + RecordSize, RecordId, RecordSize, this); return LITERAL_INT + LITERAL_INT; }
public virtual NGit.Api.LsRemoteCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public ASCIIFoldingFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { preserveOriginal = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override string METHOD_NAME() { return LITERAL_STRING + Input + LITERAL_STRING + Cost; }
public virtual NGit.Api.ListNotesCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(sxaxis)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(cSub)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitSub)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(cItm)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_name).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override V METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return default(V); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_1_record_type)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_2_frt_cell_ref_flag)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_3_reserved).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_6_name_text.Length).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_7_comment_text.Length).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_6_name_text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_7_comment_text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public CodepointCountFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { min = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MIN_KEY); max = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_KEY); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public java.util.MapClass.Entry<K, V> METHOD_NAME(K VAR_K) { return this._enclosing.immutableCopy(this.findBounded(VAR_K, java.util.TreeMap.Relation.CEILING)); }
public virtual long METHOD_NAME() { startTimeMillis = J2N.Time.CurrentTimeMilliseconds(); return startTimeMillis; }
public virtual ListProfilingGroupsResponse METHOD_NAME(ListProfilingGroupsRequest VAR_LISTPROFILINGGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProfilingGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProfilingGroupsResponseUnmarshaller.Instance; return Invoke<ListProfilingGroupsResponse>(VAR_LISTPROFILINGGROUPSREQUEST, VAR_VAR); }
public static PersonIdent METHOD_NAME(string VAR_STRING) { return METHOD_NAME(Constants.Encode(VAR_STRING), LITERAL_INT); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_numerator); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_denominator); }
public virtual NGit.Api.AddCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_INT[], LITERAL_INT, VAR_INT); }
public void METHOD_NAME(int VAR_INT) { WriteContinueIfRequired(LITERAL_INT); _ulrOutput.METHOD_NAME(VAR_INT); }
public DeleteDBInstanceRequest(string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; }
public virtual void METHOD_NAME() { previousValue = value = minValue; }
public virtual void METHOD_NAME(long VAR_LONG) { METHOD_NAME((int)VAR_LONG); }
public static string METHOD_NAME(IndexCommit VAR_INDEXCOMMIT, IndexCommit VAR_INDEXCOMMIT) { return string.Format(LITERAL_STRING, VAR_INDEXCOMMIT.Generation, VAR_INDEXCOMMIT.Generation); }
public virtual string METHOD_NAME() { return needleString; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(NumStrings)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(NumUniqueStrings)).Append(LITERAL_STRING); for (int k = LITERAL_INT; k < field_3_strings.Size; k++) { UnicodeString VAR_UNICODESTRING = (UnicodeString)field_3_strings[k]; VAR_STRINGBUILDER.Append(LITERAL_STRING + k + LITERAL_STRING).Append(VAR_UNICODESTRING.GetDebugInfo()).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); string VAR_STRING = LITERAL_STRING; foreach (var child in VAR_VAR) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX)); VAR_STRING = LITERAL_STRING; } if ((Parent != LITERAL_NULL && Parent is GroupQueryNode) || IsRoot) return VAR_STRINGBUILDER.ToString(); else return LITERAL_STRING + VAR_STRINGBUILDER.ToString() + LITERAL_STRING; }
public virtual NGit.Api.PushCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual DeleteImagePermissionsResponse METHOD_NAME(DeleteImagePermissionsRequest VAR_DELETEIMAGEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteImagePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteImagePermissionsResponseUnmarshaller.Instance; return Invoke<DeleteImagePermissionsResponse>(VAR_DELETEIMAGEPERMISSIONSREQUEST, VAR_VAR); }
public static Ptg[] METHOD_NAME(Formula VAR_FORMULA) { if (VAR_FORMULA == LITERAL_NULL) { return LITERAL_NULL; } return VAR_FORMULA.Tokens; }
public void METHOD_NAME() { remainingBits = LITERAL_INT; }
public virtual GetJourneyExecutionActivityMetricsResponse METHOD_NAME(GetJourneyExecutionActivityMetricsRequest VAR_GETJOURNEYEXECUTIONACTIVITYMETRICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJourneyExecutionActivityMetricsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJourneyExecutionActivityMetricsResponseUnmarshaller.Instance; return Invoke<GetJourneyExecutionActivityMetricsResponse>(VAR_GETJOURNEYEXECUTIONACTIVITYMETRICSREQUEST, VAR_VAR); }
public virtual DeregisterContainerInstanceResponse METHOD_NAME(DeregisterContainerInstanceRequest VAR_DEREGISTERCONTAINERINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterContainerInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterContainerInstanceResponseUnmarshaller.Instance; return Invoke<DeregisterContainerInstanceResponse>(VAR_DEREGISTERCONTAINERINSTANCEREQUEST, VAR_VAR); }
public virtual DeleteEntityRecognizerResponse METHOD_NAME(DeleteEntityRecognizerRequest VAR_DELETEENTITYRECOGNIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEntityRecognizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEntityRecognizerResponseUnmarshaller.Instance; return Invoke<DeleteEntityRecognizerResponse>(VAR_DELETEENTITYRECOGNIZERREQUEST, VAR_VAR); }
public virtual DescribeGameSessionsResponse METHOD_NAME(DescribeGameSessionsRequest VAR_DESCRIBEGAMESESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameSessionsResponseUnmarshaller.Instance; return Invoke<DescribeGameSessionsResponse>(VAR_DESCRIBEGAMESESSIONSREQUEST, VAR_VAR); }
public SegToken(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, WordType VAR_WORDTYPE, int VAR_INT) { this.CharArray = VAR_CHAR[]; this.StartOffset = VAR_INT; this.EndOffset = VAR_INT; this.WordType = VAR_WORDTYPE; this.Weight = VAR_INT; }
public virtual int METHOD_NAME(TermInfo VAR_TERMINFO) { return (this.position - VAR_TERMINFO.position); }
public virtual TagMeetingResponse METHOD_NAME(TagMeetingRequest VAR_TAGMEETINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagMeetingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagMeetingResponseUnmarshaller.Instance; return Invoke<TagMeetingResponse>(VAR_TAGMEETINGREQUEST, VAR_VAR); }
public java.nio.Buffer METHOD_NAME(int VAR_INT) { limitImpl(VAR_INT); return this; }
public ValueSource METHOD_NAME(IShape VAR_ISHAPE) { IRectangle VAR_IRECTANGLE = VAR_ISHAPE.BoundingBox; double VAR_DOUBLE = m_ctx.DistCalc.Distance(m_ctx.MakePoint(VAR_IRECTANGLE.MinX, VAR_IRECTANGLE.MinY), VAR_IRECTANGLE.MaxX, VAR_IRECTANGLE.MaxY); double VAR_DOUBLE = VAR_DOUBLE * LITERAL_INT; float VAR_FLOAT = (float)VAR_DOUBLE * LITERAL_FLOAT; return new ReciprocalSingleFunction(MakeDistanceValueSource(VAR_ISHAPE.Center, LITERAL_INT), LITERAL_FLOAT, VAR_FLOAT, VAR_FLOAT); }
public GetLoginProfileRequest(string VAR_STRING) { _userName = VAR_STRING; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { return LITERAL_INT; }
public DBCellRecord(int VAR_INT, short[] VAR_SHORT[]) { field_1_row_offset = VAR_INT; field_2_cell_offsets = VAR_SHORT[]; }
public StoredField(string VAR_STRING, int VAR_INT) : base(name, TYPE) { FieldsData = new Int32(VAR_INT); }
public CultureInfo METHOD_NAME() { return locale; }
public SpanNotBuilder(ISpanQueryBuilder VAR_ISPANQUERYBUILDER) { this.VAR_ISPANQUERYBUILDER = VAR_ISPANQUERYBUILDER; }
public override string METHOD_NAME() { return METHOD_NAME(Info.Dir, LITERAL_INT); }
public int METHOD_NAME(ExtRst VAR_EXTRST) { int VAR_INT; VAR_INT = reserved - VAR_EXTRST.reserved; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = formattingFontIndex - VAR_EXTRST.formattingFontIndex; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = formattingOptions - VAR_EXTRST.formattingOptions; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = numberOfRuns - VAR_EXTRST.numberOfRuns; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = string.Compare(phoneticText, VAR_EXTRST.phoneticText, StringComparison.CurrentCulture); if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = phRuns.Length - VAR_EXTRST.phRuns.Length; if (VAR_INT != LITERAL_INT) return VAR_INT; for (int i = LITERAL_INT; i < phRuns.Length; i++) { VAR_INT = phRuns[i].phoneticTextFirstCharacterOffset - VAR_EXTRST.phRuns[i].phoneticTextFirstCharacterOffset; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = phRuns[i].realTextFirstCharacterOffset - VAR_EXTRST.phRuns[i].realTextFirstCharacterOffset; if (VAR_INT != LITERAL_INT) return VAR_INT; VAR_INT = phRuns[i].realTextLength - VAR_EXTRST.phRuns[i].realTextLength; if (VAR_INT != LITERAL_INT) return VAR_INT; } VAR_INT = Arrays.HashCode(extraData) - Arrays.HashCode(VAR_EXTRST.extraData); return VAR_INT; }
public virtual GetInstanceSnapshotsResponse METHOD_NAME(GetInstanceSnapshotsRequest VAR_GETINSTANCESNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceSnapshotsResponseUnmarshaller.Instance; return Invoke<GetInstanceSnapshotsResponse>(VAR_GETINSTANCESNAPSHOTSREQUEST, VAR_VAR); }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public virtual TranslateTextResponse METHOD_NAME(TranslateTextRequest VAR_TRANSLATETEXTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TranslateTextRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TranslateTextResponseUnmarshaller.Instance; return Invoke<TranslateTextResponse>(VAR_TRANSLATETEXTREQUEST, VAR_VAR); }
public DimensionsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_first_row = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_last_row = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_first_col = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_last_col = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_zero = VAR_RECORDINPUTSTREAM.ReadShort(); }
public int METHOD_NAME() { return _flags; }
public Vector(int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } elementData = new object[VAR_INT]; elementCount = LITERAL_INT; this.VAR_INT = VAR_INT; }
public DeleteLogGroupRequest(string VAR_STRING) { _logGroupName = VAR_STRING; }
public virtual RemoveManagedScalingPolicyResponse METHOD_NAME(RemoveManagedScalingPolicyRequest VAR_REMOVEMANAGEDSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveManagedScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveManagedScalingPolicyResponseUnmarshaller.Instance; return Invoke<RemoveManagedScalingPolicyResponse>(VAR_REMOVEMANAGEDSCALINGPOLICYREQUEST, VAR_VAR); }
public virtual GetDataRetrievalPolicyResponse METHOD_NAME(GetDataRetrievalPolicyRequest VAR_GETDATARETRIEVALPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDataRetrievalPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDataRetrievalPolicyResponseUnmarshaller.Instance; return Invoke<GetDataRetrievalPolicyResponse>(VAR_GETDATARETRIEVALPOLICYREQUEST, VAR_VAR); }
public virtual DescribeExportImageTasksResponse METHOD_NAME(DescribeExportImageTasksRequest VAR_DESCRIBEEXPORTIMAGETASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeExportImageTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeExportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeExportImageTasksResponse>(VAR_DESCRIBEEXPORTIMAGETASKSREQUEST, VAR_VAR); }
public DefaultICUTokenizerConfig(bool VAR_BOOL, bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; }
public virtual DisableAvailabilityZonesForLoadBalancerResponse METHOD_NAME(DisableAvailabilityZonesForLoadBalancerRequest VAR_DISABLEAVAILABILITYZONESFORLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableAvailabilityZonesForLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller.Instance; return Invoke<DisableAvailabilityZonesForLoadBalancerResponse>(VAR_DISABLEAVAILABILITYZONESFORLOADBALANCERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING) { lock (this) { if (!fieldTypes.TryGetValue(VAR_STRING, out DimConfig fieldType)) { fieldTypes[VAR_STRING] = new DimConfig { IndexFieldName = VAR_STRING }; } else { fieldType.IndexFieldName = VAR_STRING; } } }
public override BytesRef METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { int VAR_INT = ArrayUtil.ParseInt32(VAR_CHAR[], VAR_INT, VAR_INT); byte[] VAR_BYTE[] = PayloadHelper.EncodeInt32(VAR_INT); BytesRef VAR_BYTESREF = new BytesRef(VAR_BYTE[]); return VAR_BYTESREF; }
public HideObjRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_hide_obj = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override String METHOD_NAME() { if (IsEmpty) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < returnStates.Length; i++) { if (i > LITERAL_INT) VAR_STRINGBUILDER.Append(LITERAL_STRING); if (returnStates[i] == EMPTY_RETURN_STATE) { VAR_STRINGBUILDER.Append(LITERAL_STRING); continue; } VAR_STRINGBUILDER.Append(returnStates[i]); if (parents[i] != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(parents[i].METHOD_NAME()); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING); } } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual int METHOD_NAME() { lock (this) { return mIndeterminate ? LITERAL_INT : mSecondaryProgress; } }
public virtual DeleteContactMethodResponse METHOD_NAME(DeleteContactMethodRequest VAR_DELETECONTACTMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteContactMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteContactMethodResponseUnmarshaller.Instance; return Invoke<DeleteContactMethodResponse>(VAR_DELETECONTACTMETHODREQUEST, VAR_VAR); }
public virtual java.util.List<E> METHOD_NAME(int VAR_INT, int VAR_INT) { lock (mutex) { return new java.util.Collections.SynchronizedList<E>(list.METHOD_NAME(VAR_INT, VAR_INT), mutex); } }
public override bool METHOD_NAME(object VAR_OBJECT) { return mapEntry.METHOD_NAME(VAR_OBJECT); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); if (VAR_INT < LITERAL_INT) { return LITERAL_NULL; } { for (int i = LITERAL_INT; i < VAR_INT; i++) { char VAR_CHAR = VAR_STRING[i]; if (!isValidSchemeChar(i, VAR_CHAR)) { return LITERAL_NULL; } } } return Sharpen.StringHelper.Substring(VAR_STRING, LITERAL_INT, VAR_INT).ToLower(System.Globalization.CultureInfo.InvariantCulture); }
public override java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual CreateServiceResponse METHOD_NAME(CreateServiceRequest VAR_CREATESERVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateServiceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateServiceResponseUnmarshaller.Instance; return Invoke<CreateServiceResponse>(VAR_CREATESERVICEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = _numberOfRegions; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int i = LITERAL_INT; i < _numberOfRegions; i++) { _regions[_startIndex + i].METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, char VAR_CHAR) { insert0(VAR_INT, VAR_CHAR); return this; }
public LabelSSTRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { field_4_sst_index = VAR_RECORDINPUTSTREAM.ReadInt(); }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { if (objectId == LITERAL_NULL) { objectId = VAR_ANYOBJECTID.Copy(); } }
public int METHOD_NAME(CFRecordsAggregate VAR_CFRECORDSAGGREGATE) { _cfHeaders.METHOD_NAME(VAR_CFRECORDSAGGREGATE); return _cfHeaders.Count - LITERAL_INT; }
public TermVectorsPostingsArray(int VAR_INT) : base(size) { freqs = new int[VAR_INT]; lastOffsets = new int[VAR_INT]; lastPositions = new int[VAR_INT]; }
public FieldsQuery(SrndQuery VAR_SRNDQUERY, IList<string> VAR_ILIST<STRING>, char VAR_CHAR) { this.VAR_SRNDQUERY = VAR_SRNDQUERY; this.VAR_ILIST<STRING> = VAR_ILIST<STRING>; this.VAR_CHAR = VAR_CHAR; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GreekLowerCaseFilter(m_luceneMatchVersion, VAR_TOKENSTREAM); }
public ECSMetadataServiceCredentialsFetcher() { connectionTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MILLISECONDS; }
public static IDecoder METHOD_NAME(Format VAR_FORMAT, int VAR_INT, int VAR_INT) { CheckVersion(VAR_INT); return BulkOperation.Of(VAR_FORMAT, VAR_INT); }
public virtual void METHOD_NAME() { lock (this) { nameFinder.clearAdaptiveData(); } }
public virtual string METHOD_NAME() { return new string (NextKey()); }
public virtual DescribeEventsResponse METHOD_NAME() { return METHOD_NAME(new DescribeEventsRequest()); }
public virtual UpdateNodeResponse METHOD_NAME(UpdateNodeRequest VAR_UPDATENODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNodeResponseUnmarshaller.Instance; return Invoke<UpdateNodeResponse>(VAR_UPDATENODEREQUEST, VAR_VAR); }
public GetJobOutputRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _jobId = VAR_STRING; _range = VAR_STRING; }
public static string METHOD_NAME(string VAR_STRING, int VAR_INT) { if (VAR_INT > LITERAL_INT) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT); } return Regex.Replace(VAR_STRING, LITERAL_STRING, LITERAL_STRING); }
public virtual DescribeLaunchTemplatesResponse METHOD_NAME(DescribeLaunchTemplatesRequest VAR_DESCRIBELAUNCHTEMPLATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLaunchTemplatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLaunchTemplatesResponseUnmarshaller.Instance; return Invoke<DescribeLaunchTemplatesResponse>(VAR_DESCRIBELAUNCHTEMPLATESREQUEST, VAR_VAR); }
public SynonymFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (m_luceneMatchVersion.OnOrAfter(Lucene.Net.Util.LuceneVersion.LUCENE_34)) { delegator = new FSTSynonymFilterFactory(new Dictionary<string, string>(OriginalArgs)); } else { if (VAR_IDICTIONARY<STRING, STRING>.TryGetValue(LITERAL_STRING, out string value) && !value.Equals(LITERAL_STRING, StringComparison.Ordinal)) { throw new System.ArgumentException(LITERAL_STRING); } delegator = new SlowSynonymFilterFactory(new Dictionary<string, string>(OriginalArgs)); } }
public void METHOD_NAME(int VAR_INT) { Workbook.RemoveBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, VAR_INT + LITERAL_INT); }
public virtual ModifyTrafficMirrorFilterNetworkServicesResponse METHOD_NAME(ModifyTrafficMirrorFilterNetworkServicesRequest VAR_MODIFYTRAFFICMIRRORFILTERNETWORKSERVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyTrafficMirrorFilterNetworkServicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyTrafficMirrorFilterNetworkServicesResponseUnmarshaller.Instance; return Invoke<ModifyTrafficMirrorFilterNetworkServicesResponse>(VAR_MODIFYTRAFFICMIRRORFILTERNETWORKSERVICESREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length == LITERAL_INT) { return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public DeltaRecord(double VAR_DOUBLE) { field_1_max_change = VAR_DOUBLE; }
public virtual UpdateDomainEntryResponse METHOD_NAME(UpdateDomainEntryRequest VAR_UPDATEDOMAINENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainEntryResponseUnmarshaller.Instance; return Invoke<UpdateDomainEntryResponse>(VAR_UPDATEDOMAINENTRYREQUEST, VAR_VAR); }
public virtual object METHOD_NAME() { SegmentCommitInfo VAR_SEGMENTCOMMITINFO = new SegmentCommitInfo(Info, delCount, delGen, fieldInfosGen); VAR_SEGMENTCOMMITINFO.nextWriteDelGen = nextWriteDelGen; VAR_SEGMENTCOMMITINFO.nextWriteFieldInfosGen = nextWriteFieldInfosGen; foreach (KeyValuePair<long, ISet<string>> e in genUpdatesFiles) { VAR_SEGMENTCOMMITINFO.genUpdatesFiles[e.Key] = new JCG.HashSet<string>(e.Value); } return VAR_SEGMENTCOMMITINFO; }
public string METHOD_NAME(string VAR_STRING, string VAR_STRING) { if (attributes == LITERAL_NULL) { attributes = new Dictionary<string, string>(); } return attributes[VAR_STRING] = VAR_STRING; }
public override void METHOD_NAME(int VAR_INT) { buf.append((char)VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public IEvaluationSheet METHOD_NAME(int VAR_INT) { return new HSSFEvaluationSheet((HSSFSheet)_uBook.GetSheetAt(VAR_INT)); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_SLIDECOUNT); }
public virtual DescribeFlowDefinitionResponse METHOD_NAME(DescribeFlowDefinitionRequest VAR_DESCRIBEFLOWDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFlowDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFlowDefinitionResponseUnmarshaller.Instance; return Invoke<DescribeFlowDefinitionResponse>(VAR_DESCRIBEFLOWDEFINITIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { intSet.Put(VAR_INT); if (VAR_INT > maxInt) { maxInt = VAR_INT; } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { return false; } if (VAR_OBJECT is CharsRef) { return this.CharsEquals(((CharsRef)VAR_OBJECT)); } return false; }
public StopFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); stopWordFiles = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); format = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, (LITERAL_NULL == stopWordFiles ? LITERAL_NULL : FORMAT_WORDSET)); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); enablePositionIncrements = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual void METHOD_NAME(ATNState VAR_ATNSTATE) { if (VAR_ATNSTATE != LITERAL_NULL) { VAR_ATNSTATE.atn = this; VAR_ATNSTATE.stateNumber = states.Count; } states.Add(VAR_ATNSTATE); }
public string BatchUrl { get; set; }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public override java.util.Iterator<K> METHOD_NAME() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public DoubleList() { _array = new double[LITERAL_INT]; _Count = LITERAL_INT; }
public virtual NGit.Api.AddNoteCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public SerializationHandleMap() { this.size = LITERAL_INT; this.threshold = LITERAL_INT; int VAR_INT = (int)(((long)threshold * LITERAL_INT) / LOAD_FACTOR); resizeArrays(VAR_INT); }
public PagedBytes(int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT && VAR_INT <= LITERAL_INT, VAR_INT.ToString()); this.blockSize = LITERAL_INT << VAR_INT; this.VAR_INT = VAR_INT; blockMask = blockSize - LITERAL_INT; upto = blockSize; bytesUsedPerBlock = blockSize + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_OBJECT_REF; }
public virtual IncreaseReplicationFactorResponse METHOD_NAME(IncreaseReplicationFactorRequest VAR_INCREASEREPLICATIONFACTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IncreaseReplicationFactorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IncreaseReplicationFactorResponseUnmarshaller.Instance; return Invoke<IncreaseReplicationFactorResponse>(VAR_INCREASEREPLICATIONFACTORREQUEST, VAR_VAR); }
public virtual UpdateRuntimeConfigurationResponse METHOD_NAME(UpdateRuntimeConfigurationRequest VAR_UPDATERUNTIMECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRuntimeConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRuntimeConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRuntimeConfigurationResponse>(VAR_UPDATERUNTIMECONFIGURATIONREQUEST, VAR_VAR); }
public virtual char METHOD_NAME(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>, string VAR_STRING, char VAR_CHAR) { string VAR_STRING; if (VAR_IDICTIONARY<STRING, STRING>.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_IDICTIONARY<STRING, STRING>.Remove(VAR_STRING); if (VAR_STRING.Length != LITERAL_INT) { throw new System.ArgumentException(VAR_STRING + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } else { return VAR_STRING[LITERAL_INT]; } } return VAR_CHAR; }
public virtual void METHOD_NAME(LexerNoViableAltException VAR_LEXERNOVIABLEALTEXCEPTION) { string VAR_STRING = _input.GetText(Interval.Of(_tokenStartCharIndex, _input.Index)); string VAR_STRING = LITERAL_STRING + GetErrorDisplay(VAR_STRING) + LITERAL_STRING; IAntlrErrorListener<int> VAR_IANTLRERRORLISTENER<INT> = ErrorListenerDispatch; VAR_IANTLRERRORLISTENER<INT>.SyntaxError(ErrorOutput, this, LITERAL_INT, _tokenStartLine, _tokenStartColumn, VAR_STRING, VAR_LEXERNOVIABLEALTEXCEPTION); }
public void METHOD_NAME(long VAR_LONG) { _out.METHOD_NAME(VAR_LONG); _size += LITERAL_INT; }
public ChangeMessageVisibilityBatchRequest(string VAR_STRING, List<ChangeMessageVisibilityBatchRequestEntry> VAR_LIST<CHANGEMESSAGEVISIBILITYBATCHREQUESTENTRY>) { _queueUrl = VAR_STRING; _entries = VAR_LIST<CHANGEMESSAGEVISIBILITYBATCHREQUESTENTRY>; }
public virtual GetExportJobResponse METHOD_NAME(GetExportJobRequest VAR_GETEXPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExportJobResponseUnmarshaller.Instance; return Invoke<GetExportJobResponse>(VAR_GETEXPORTJOBREQUEST, VAR_VAR); }
public virtual AddRoleToDBInstanceResponse METHOD_NAME(AddRoleToDBInstanceRequest VAR_ADDROLETODBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddRoleToDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddRoleToDBInstanceResponseUnmarshaller.Instance; return Invoke<AddRoleToDBInstanceResponse>(VAR_ADDROLETODBINSTANCEREQUEST, VAR_VAR); }
public virtual DeregisterInstancesFromLoadBalancerResponse METHOD_NAME(DeregisterInstancesFromLoadBalancerRequest VAR_DEREGISTERINSTANCESFROMLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterInstancesFromLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterInstancesFromLoadBalancerResponseUnmarshaller.Instance; return Invoke<DeregisterInstancesFromLoadBalancerResponse>(VAR_DEREGISTERINSTANCESFROMLOADBALANCERREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { lock (this) { insert0(VAR_INT, VAR_CHAR); return this; } }
public virtual DownloadDBLogFilePortionResponse METHOD_NAME(DownloadDBLogFilePortionRequest VAR_DOWNLOADDBLOGFILEPORTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DownloadDBLogFilePortionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DownloadDBLogFilePortionResponseUnmarshaller.Instance; return Invoke<DownloadDBLogFilePortionResponse>(VAR_DOWNLOADDBLOGFILEPORTIONREQUEST, VAR_VAR); }
public virtual GetStaticIpResponse METHOD_NAME(GetStaticIpRequest VAR_GETSTATICIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStaticIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStaticIpResponseUnmarshaller.Instance; return Invoke<GetStaticIpResponse>(VAR_GETSTATICIPREQUEST, VAR_VAR); }
public virtual CreateUsagePlanResponse METHOD_NAME(CreateUsagePlanRequest VAR_CREATEUSAGEPLANREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateUsagePlanRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateUsagePlanResponseUnmarshaller.Instance; return Invoke<CreateUsagePlanResponse>(VAR_CREATEUSAGEPLANREQUEST, VAR_VAR); }
public override BlameResult METHOD_NAME() { CheckCallable(); BlameGenerator VAR_BLAMEGENERATOR = new BlameGenerator(repo, path); try { if (diffAlgorithm != LITERAL_NULL) { VAR_BLAMEGENERATOR.SetDiffAlgorithm(diffAlgorithm); } if (textComparator != LITERAL_NULL) { VAR_BLAMEGENERATOR.SetTextComparator(textComparator); } if (followFileRenames != LITERAL_NULL) { VAR_BLAMEGENERATOR.SetFollowFileRenames(followFileRenames); } if (reverseEndCommits != LITERAL_NULL) { VAR_BLAMEGENERATOR.Reverse(startCommit, reverseEndCommits); } else { if (startCommit != LITERAL_NULL) { VAR_BLAMEGENERATOR.Push(LITERAL_NULL, startCommit); } else { VAR_BLAMEGENERATOR.Push(LITERAL_NULL, repo.Resolve(Constants.HEAD)); if (!repo.IsBare) { DirCache VAR_DIRCACHE = repo.ReadDirCache(); int VAR_INT = VAR_DIRCACHE.FindEntry(path); if (LITERAL_INT <= VAR_INT) { VAR_BLAMEGENERATOR.Push(LITERAL_NULL, VAR_DIRCACHE.GetEntry(VAR_INT).GetObjectId()); } FilePath VAR_FILEPATH = new FilePath(repo.WorkTree, path); if (VAR_FILEPATH.IsFile()) { VAR_BLAMEGENERATOR.Push(LITERAL_NULL, new RawText(VAR_FILEPATH)); } } } } return VAR_BLAMEGENERATOR.ComputeBlameResult(); } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_BLAMEGENERATOR.Release(); } }
public virtual SearchTransitGatewayMulticastGroupsResponse METHOD_NAME(SearchTransitGatewayMulticastGroupsRequest VAR_SEARCHTRANSITGATEWAYMULTICASTGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchTransitGatewayMulticastGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchTransitGatewayMulticastGroupsResponseUnmarshaller.Instance; return Invoke<SearchTransitGatewayMulticastGroupsResponse>(VAR_SEARCHTRANSITGATEWAYMULTICASTGROUPSREQUEST, VAR_VAR); }
public LinearOffsetRange METHOD_NAME(int VAR_INT) { if (_Length > LITERAL_INT) { if (VAR_INT == LITERAL_INT) { return this; } return new LinearOffsetRange(VAR_INT + _offset, _Length); } return new LinearOffsetRange(VAR_INT + _offset + _Length + LITERAL_INT, -_Length); }
public bool METHOD_NAME(char VAR_CHAR) { return invokeMap[characterCategoryMap[VAR_CHAR]]; }
public virtual int METHOD_NAME() { return size; }
public override int METHOD_NAME() { if (buf == LITERAL_NULL) { throw new System.IO.IOException(); } if (pos < buf.Length) { return (buf[pos++] & unchecked((int)(LITERAL_INT))); } return @in.METHOD_NAME(); }
public virtual int METHOD_NAME() { return LITERAL_INT; }
public SearchPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override void METHOD_NAME(TermState VAR_TERMSTATE) { Debug.Assert(VAR_TERMSTATE is OrdTermState, LITERAL_STRING + VAR_TERMSTATE.GetType().Name); this.Ord = ((OrdTermState)VAR_TERMSTATE).Ord; }
public virtual AnalyzeDocumentResponse METHOD_NAME(AnalyzeDocumentRequest VAR_ANALYZEDOCUMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AnalyzeDocumentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AnalyzeDocumentResponseUnmarshaller.Instance; return Invoke<AnalyzeDocumentResponse>(VAR_ANALYZEDOCUMENTREQUEST, VAR_VAR); }
public int METHOD_NAME() { return ExtSSTRecord.GetRecordSizeForStrings(field_3_strings.Size); }
public static FormulaShifter METHOD_NAME(int VAR_INT, int VAR_INT) { return new FormulaShifter(VAR_INT, VAR_INT); }
public void METHOD_NAME(int VAR_INT, HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { cfAggregate.METHOD_NAME(VAR_INT, VAR_HSSFCONDITIONALFORMATTINGRULE.CfRuleRecord); }
public SelectionRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_pane = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_2_row_active_cell = VAR_RECORDINPUTSTREAM.ReadUShort(); field_3_col_active_cell = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_ref_active_cell = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); field_6_refs = new CellRangeAddress8Bit[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { field_6_refs[i] = new CellRangeAddress8Bit(VAR_RECORDINPUTSTREAM); } }
if (VAR_BOOL) { newObjectIds = new ObjectIdSubclassMap<ObjectId>(); } else { newObjectIds = LITERAL_NULL; }
public virtual GetResolverRulePolicyResponse METHOD_NAME(GetResolverRulePolicyRequest VAR_GETRESOLVERRULEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResolverRulePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResolverRulePolicyResponseUnmarshaller.Instance; return Invoke<GetResolverRulePolicyResponse>(VAR_GETRESOLVERRULEPOLICYREQUEST, VAR_VAR); }
public static java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[].Length); }
public override Object METHOD_NAME() { UnitsRecord VAR_UNITSRECORD = new UnitsRecord(); VAR_UNITSRECORD.field_1_units = field_1_units; return VAR_UNITSRECORD; }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT + VAR_INT; for (int i = VAR_INT; i < VAR_INT; i++) { byte VAR_BYTE; try { VAR_BYTE = (byte)in1.ReadByte(); } catch (IOException e) { throw new RuntimeException(e); } CheckEOF(VAR_BYTE); VAR_BYTE[][i] = VAR_BYTE; } }
public virtual DescribeInterconnectLoaResponse METHOD_NAME(DescribeInterconnectLoaRequest VAR_DESCRIBEINTERCONNECTLOAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInterconnectLoaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInterconnectLoaResponseUnmarshaller.Instance; return Invoke<DescribeInterconnectLoaResponse>(VAR_DESCRIBEINTERCONNECTLOAREQUEST, VAR_VAR); }
public static java.nio.ByteOrder METHOD_NAME() { return NATIVE_ORDER; }
public CalcModeRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_calcmode = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { if (parentIds.Length == LITERAL_INT) { SetParentId(VAR_ANYOBJECTID); } else { ObjectId[] VAR_OBJECTID[] = new ObjectId[parentIds.Length + LITERAL_INT]; System.Array.Copy(parentIds, LITERAL_INT, VAR_OBJECTID[], LITERAL_INT, parentIds.Length); VAR_OBJECTID[][parentIds.Length] = VAR_ANYOBJECTID.Copy(); parentIds = VAR_OBJECTID[]; } }
public virtual CreateAccessPointResponse METHOD_NAME(CreateAccessPointRequest VAR_CREATEACCESSPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAccessPointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAccessPointResponseUnmarshaller.Instance; return Invoke<CreateAccessPointResponse>(VAR_CREATEACCESSPOINTREQUEST, VAR_VAR); }
public virtual DeleteLoadBalancerListenersResponse METHOD_NAME(DeleteLoadBalancerListenersRequest VAR_DELETELOADBALANCERLISTENERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLoadBalancerListenersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLoadBalancerListenersResponseUnmarshaller.Instance; return Invoke<DeleteLoadBalancerListenersResponse>(VAR_DELETELOADBALANCERLISTENERSREQUEST, VAR_VAR); }
public virtual DescribeOrderableClusterOptionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeOrderableClusterOptionsRequest()); }
public virtual void METHOD_NAME(bool VAR_BOOL) { derefTags = VAR_BOOL; }
public DeactivateMFADeviceRequest(string VAR_STRING, string VAR_STRING) { _userName = VAR_STRING; _serialNumber = VAR_STRING; }
public override bool METHOD_NAME() { lock (@lock) { return @in.METHOD_NAME(); } }
public static void METHOD_NAME(FilePath VAR_FILEPATH) { if (!VAR_FILEPATH.METHOD_NAME()) { throw new IOException(MessageFormat.Format(JGitText.Get().createNewFileFailed, VAR_FILEPATH)); } }
public virtual string METHOD_NAME() { if (this.field == LITERAL_NULL) return LITERAL_NULL; else return this.field.ToString(); }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { string[] VAR_STRING[] = dictionaryFiles.Split(LITERAL_CHAR).TrimEnd(); Stream VAR_STREAM = LITERAL_NULL; IList<Stream> VAR_ILIST<STREAM> = new List<Stream>(); try { VAR_ILIST<STREAM> = new List<Stream>(); foreach (string file in VAR_STRING[]) { VAR_ILIST<STREAM>.Add(VAR_IRESOURCELOADER.OpenResource(file)); } VAR_STREAM = VAR_IRESOURCELOADER.OpenResource(affixFile); this.dictionary = new Dictionary(VAR_STREAM, VAR_ILIST<STREAM>, ignoreCase); } catch (Exception e) { throw new IOException(LITERAL_STRING + VAR_ILIST<STREAM> + LITERAL_STRING + affixFile + LITERAL_STRING, e); } finally { IOUtils.DisposeWhileHandlingException(VAR_STREAM); IOUtils.DisposeWhileHandlingException(VAR_ILIST<STREAM>); } }
public virtual DetectDocumentTextResponse METHOD_NAME(DetectDocumentTextRequest VAR_DETECTDOCUMENTTEXTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectDocumentTextRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectDocumentTextResponseUnmarshaller.Instance; return Invoke<DetectDocumentTextResponse>(VAR_DETECTDOCUMENTTEXTREQUEST, VAR_VAR); }
public virtual DescribeCertificatesResponse METHOD_NAME(DescribeCertificatesRequest VAR_DESCRIBECERTIFICATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCertificatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCertificatesResponseUnmarshaller.Instance; return Invoke<DescribeCertificatesResponse>(VAR_DESCRIBECERTIFICATESREQUEST, VAR_VAR); }
public int METHOD_NAME() { return m_formats.Count; }
public virtual GetOutcomesResponse METHOD_NAME(GetOutcomesRequest VAR_GETOUTCOMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOutcomesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOutcomesResponseUnmarshaller.Instance; return Invoke<GetOutcomesResponse>(VAR_GETOUTCOMESREQUEST, VAR_VAR); }
public virtual ICollection<TransportProtocol.URIishField> METHOD_NAME() { return Sharpen.Collections.EmptySet<TransportProtocol.URIishField>(); }
public BasicStats(string VAR_STRING, float VAR_FLOAT) { this.VAR_STRING = VAR_STRING; this.m_queryBoost = VAR_FLOAT; this.m_totalBoost = VAR_FLOAT; }
public virtual UpdateSecurityGroupRuleDescriptionsIngressResponse METHOD_NAME(UpdateSecurityGroupRuleDescriptionsIngressRequest VAR_UPDATESECURITYGROUPRULEDESCRIPTIONSINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSecurityGroupRuleDescriptionsIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSecurityGroupRuleDescriptionsIngressResponseUnmarshaller.Instance; return Invoke<UpdateSecurityGroupRuleDescriptionsIngressResponse>(VAR_UPDATESECURITYGROUPRULEDESCRIPTIONSINGRESSREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return position; }
public virtual ICollection<Ref> METHOD_NAME() { return Sharpen.Collections.UnmodifiableCollection(advertisedRefs.Values); }
public QueryParser(QueryParserTokenManager VAR_QUERYPARSERTOKENMANAGER) { TokenSource = VAR_QUERYPARSERTOKENMANAGER; Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public override void METHOD_NAME(CharacterIterator VAR_CHARACTERITERATOR) { start = VAR_CHARACTERITERATOR.BeginIndex; end = VAR_CHARACTERITERATOR.EndIndex; text = VAR_CHARACTERITERATOR; current = start; }
public virtual PutOutcomeResponse METHOD_NAME(PutOutcomeRequest VAR_PUTOUTCOMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutOutcomeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutOutcomeResponseUnmarshaller.Instance; return Invoke<PutOutcomeResponse>(VAR_PUTOUTCOMEREQUEST, VAR_VAR); }
public UnescapedCharSequence(ICharSequence VAR_ICHARSEQUENCE) { this.chars = new char[VAR_ICHARSEQUENCE.Length]; this.wasEscaped = new bool[VAR_ICHARSEQUENCE.Length]; for (int i = LITERAL_INT; i < VAR_ICHARSEQUENCE.Length; i++) { this.chars[i] = VAR_ICHARSEQUENCE[i]; this.wasEscaped[i] = false; } }
public override java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.DOUBLE); byteBuffer.position(_position * libcore.io.SizeOf.DOUBLE); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_DOUBLE[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_DOUBLE[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual void METHOD_NAME() { throw new System.NotSupportedException(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_recs).Append(LITERAL_STRING); int VAR_INT; CTFormat VAR_CTFORMAT; for (VAR_INT = LITERAL_INT; VAR_INT < m_formats.Count; VAR_INT++) { VAR_CTFORMAT = (CTFormat)m_formats[VAR_INT]; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CTFORMAT.Offset); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CTFORMAT.FontIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual StartDominantLanguageDetectionJobResponse METHOD_NAME(StartDominantLanguageDetectionJobRequest VAR_STARTDOMINANTLANGUAGEDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDominantLanguageDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StartDominantLanguageDetectionJobResponse>(VAR_STARTDOMINANTLANGUAGEDETECTIONJOBREQUEST, VAR_VAR); }
public static bool METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { foreach (BitSet alts in VAR_IENUMERABLE<BITSET>) { if (alts.Cardinality() == LITERAL_INT) { return true; } } return false; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { return putShort(VAR_INT, (short)VAR_CHAR); }
public IDataValidationConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING) { return DVConstraint.CreateNumericConstraint(ValidationType.TEXT_LENGTH, VAR_INT, VAR_STRING, VAR_STRING); }
public void METHOD_NAME(int VAR_INT) { _out.METHOD_NAME(VAR_INT); _size += LITERAL_INT; }
public sealed override short METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT, libcore.io.SizeOf.SHORT); return libcore.io.Memory.peekShort(backingArray, offset + VAR_INT, _order); }
public static FuncPtg METHOD_NAME(int VAR_INT) { FunctionMetadata VAR_FUNCTIONMETADATA = FunctionMetadataRegistry.GetFunctionByIndex(VAR_INT); if (VAR_FUNCTIONMETADATA == LITERAL_NULL) { throw new Exception(LITERAL_STRING + VAR_INT + LITERAL_STRING); } return new FuncPtg(VAR_INT, VAR_FUNCTIONMETADATA); }
public override string METHOD_NAME() { return LITERAL_STRING + ruleIndex + LITERAL_STRING + predIndex + LITERAL_STRING; }
public virtual ListDashboardsResponse METHOD_NAME(ListDashboardsRequest VAR_LISTDASHBOARDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDashboardsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDashboardsResponseUnmarshaller.Instance; return Invoke<ListDashboardsResponse>(VAR_LISTDASHBOARDSREQUEST, VAR_VAR); }
public virtual DeleteVoiceTemplateResponse METHOD_NAME(DeleteVoiceTemplateRequest VAR_DELETEVOICETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceTemplateResponseUnmarshaller.Instance; return Invoke<DeleteVoiceTemplateResponse>(VAR_DELETEVOICETEMPLATEREQUEST, VAR_VAR); }
public void METHOD_NAME(IHSSFListener VAR_IHSSFLISTENER) { short[] VAR_SHORT[] = RecordFactory.GetAllKnownRecordSIDs(); for (int k = LITERAL_INT; k < VAR_SHORT[].Length; k++) { AddListener(VAR_IHSSFLISTENER, VAR_SHORT[][k]); } }
public virtual DescribeLocalGatewayRouteTablesResponse METHOD_NAME(DescribeLocalGatewayRouteTablesRequest VAR_DESCRIBELOCALGATEWAYROUTETABLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewayRouteTablesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewayRouteTablesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayRouteTablesResponse>(VAR_DESCRIBELOCALGATEWAYROUTETABLESREQUEST, VAR_VAR); }
public virtual EnableDomainAutoRenewResponse METHOD_NAME(EnableDomainAutoRenewRequest VAR_ENABLEDOMAINAUTORENEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableDomainAutoRenewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableDomainAutoRenewResponseUnmarshaller.Instance; return Invoke<EnableDomainAutoRenewResponse>(VAR_ENABLEDOMAINAUTORENEWREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(m_type.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(m_name); VAR_STRINGBUILDER.Append(LITERAL_CHAR); if (FieldsData != LITERAL_NULL) { VAR_STRINGBUILDER.Append(FieldsData); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeConversionTasksResponse METHOD_NAME() { return METHOD_NAME(new DescribeConversionTasksRequest()); }
public virtual GetFieldLevelEncryptionProfileConfigResponse METHOD_NAME(GetFieldLevelEncryptionProfileConfigRequest VAR_GETFIELDLEVELENCRYPTIONPROFILECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFieldLevelEncryptionProfileConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFieldLevelEncryptionProfileConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionProfileConfigResponse>(VAR_GETFIELDLEVELENCRYPTIONPROFILECONFIGREQUEST, VAR_VAR); }
public virtual ListInstancesResponse METHOD_NAME(ListInstancesRequest VAR_LISTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListInstancesResponseUnmarshaller.Instance; return Invoke<ListInstancesResponse>(VAR_LISTINSTANCESREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { try { int VAR_INT = LITERAL_INT; while (VAR_INT < VAR_INT) { int VAR_INT = this.inf.Inflate(VAR_BYTE[], VAR_INT + VAR_INT, VAR_INT - VAR_INT); if (VAR_INT == LITERAL_INT) { if (this.inf.IsFinished) { break; } if (this.inf.IsNeedingInput) { this._enclosing.OnObjectData(this.src, this._enclosing.buf, this.p, this._enclosing.bAvail); this._enclosing.Use(this._enclosing.bAvail); this.p = this._enclosing.Fill(this.src, LITERAL_INT); this.inf.SetInput(this._enclosing.buf, this.p, this._enclosing.bAvail); } else { throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().packfileCorruptionDetected, JGitText.Get().unknownZlibError)); } } else { VAR_INT += VAR_INT; } } this.actualSize += VAR_INT; return LITERAL_INT < VAR_INT ? VAR_INT : -LITERAL_INT; } catch (SharpZipBaseException dfe) { throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().packfileCorruptionDetected, dfe.Message)); } }
public virtual CountClosedWorkflowExecutionsResponse METHOD_NAME(CountClosedWorkflowExecutionsRequest VAR_COUNTCLOSEDWORKFLOWEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CountClosedWorkflowExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CountClosedWorkflowExecutionsResponseUnmarshaller.Instance; return Invoke<CountClosedWorkflowExecutionsResponse>(VAR_COUNTCLOSEDWORKFLOWEXECUTIONSREQUEST, VAR_VAR); }
public virtual E METHOD_NAME() { return removeFirstImpl(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { String VAR_STRING; if (VAR_VALUEEVAL is RefEval) { RefEval VAR_REFEVAL = (RefEval)VAR_VALUEEVAL; VAR_STRING = OperandResolver.CoerceValueToString(VAR_REFEVAL.GetInnerValueEval(VAR_REFEVAL.FirstSheetIndex)); } else { VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); } if (VAR_STRING.Length > LITERAL_INT) { return ErrorEval.NUM_ERROR; } String VAR_STRING; bool VAR_BOOL; if (VAR_STRING.Length < LITERAL_INT) { VAR_STRING = VAR_STRING; VAR_BOOL = true; } else { VAR_STRING = VAR_STRING.Substring(LITERAL_INT); VAR_BOOL = VAR_STRING.StartsWith(LITERAL_STRING); } String VAR_STRING; try { if (VAR_BOOL) { int VAR_INT = getDecimalValue(VAR_STRING); VAR_STRING = VAR_INT.ToString(); } else { String VAR_STRING = toggleBits(VAR_STRING); int VAR_INT = getDecimalValue(VAR_STRING); VAR_INT++; VAR_STRING = LITERAL_STRING + VAR_INT.ToString(); } } catch (FormatException) { return ErrorEval.NUM_ERROR; } return new NumberEval(long.Parse(VAR_STRING)); }
public virtual ObjectId METHOD_NAME() { return oldId; }
public FeatProtection(RecordInputStream VAR_RECORDINPUTSTREAM) { fSD = VAR_RECORDINPUTSTREAM.ReadInt(); passwordVerifier = VAR_RECORDINPUTSTREAM.ReadInt(); title = StringUtil.ReadUnicodeString(VAR_RECORDINPUTSTREAM); securityDescriptor = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public virtual UpdateContactAttributesResponse METHOD_NAME(UpdateContactAttributesRequest VAR_UPDATECONTACTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateContactAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateContactAttributesResponseUnmarshaller.Instance; return Invoke<UpdateContactAttributesResponse>(VAR_UPDATECONTACTATTRIBUTESREQUEST, VAR_VAR); }
public virtual DescribeClientVpnEndpointsResponse METHOD_NAME(DescribeClientVpnEndpointsRequest VAR_DESCRIBECLIENTVPNENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientVpnEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientVpnEndpointsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnEndpointsResponse>(VAR_DESCRIBECLIENTVPNENDPOINTSREQUEST, VAR_VAR); }
public virtual DescribeCacheSecurityGroupsResponse METHOD_NAME(DescribeCacheSecurityGroupsRequest VAR_DESCRIBECACHESECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCacheSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCacheSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSecurityGroupsResponse>(VAR_DESCRIBECACHESECURITYGROUPSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { return base.METHOD_NAME(VAR_OBJECT); } }
public static IList<TransportProtocol> METHOD_NAME() { int VAR_INT = protocols.Count; IList<TransportProtocol> VAR_ILIST<TRANSPORTPROTOCOL> = new AList<TransportProtocol>(VAR_INT); foreach (JavaWeakReference<TransportProtocol> @ref in protocols) { TransportProtocol VAR_TRANSPORTPROTOCOL = @ref.Get(); if (VAR_TRANSPORTPROTOCOL != LITERAL_NULL) { VAR_ILIST<TRANSPORTPROTOCOL>.AddItem(VAR_TRANSPORTPROTOCOL); } else { protocols.Remove(@ref); } } return Sharpen.Collections.UnmodifiableList(VAR_ILIST<TRANSPORTPROTOCOL>); }
public SrndTermQuery(string VAR_STRING, bool VAR_BOOL) : base(quoted) { this.VAR_STRING = VAR_STRING; }
public virtual CreateEmailTemplateResponse METHOD_NAME(CreateEmailTemplateRequest VAR_CREATEEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEmailTemplateResponseUnmarshaller.Instance; return Invoke<CreateEmailTemplateResponse>(VAR_CREATEEMAILTEMPLATEREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(char VAR_CHAR) { return putShort((short)VAR_CHAR); }
public static string METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, CultureInfo.InvariantCulture); }
public virtual DeleteSnapshotResponse METHOD_NAME(DeleteSnapshotRequest VAR_DELETESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteSnapshotResponse>(VAR_DELETESNAPSHOTREQUEST, VAR_VAR); }
public virtual ListMemberAccountsResponse METHOD_NAME(ListMemberAccountsRequest VAR_LISTMEMBERACCOUNTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMemberAccountsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMemberAccountsResponseUnmarshaller.Instance; return Invoke<ListMemberAccountsResponse>(VAR_LISTMEMBERACCOUNTSREQUEST, VAR_VAR); }
public bool METHOD_NAME() { var VAR_VAR = DateTime.UtcNow.Ticks; return VAR_VAR - lastFailedRefreshTime > refreshIntervalInMillSeconds; }
public virtual void METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { if (VAR_STRING == LITERAL_NULL && !VAR_BOOL) { DisableRefLog(); } else { if (VAR_STRING == LITERAL_NULL && VAR_BOOL) { refLogMessage = string.Empty; refLogIncludeResult = true; } else { refLogMessage = VAR_STRING; refLogIncludeResult = VAR_BOOL; } } }
public virtual RemoteRefUpdate.Status METHOD_NAME() { return status; }
public virtual GetDeploymentStrategyResponse METHOD_NAME(GetDeploymentStrategyRequest VAR_GETDEPLOYMENTSTRATEGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentStrategyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentStrategyResponseUnmarshaller.Instance; return Invoke<GetDeploymentStrategyResponse>(VAR_GETDEPLOYMENTSTRATEGYREQUEST, VAR_VAR); }
public virtual DeleteEventResponse METHOD_NAME(DeleteEventRequest VAR_DELETEEVENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventResponseUnmarshaller.Instance; return Invoke<DeleteEventResponse>(VAR_DELETEEVENTREQUEST, VAR_VAR); }
public virtual ListQueryLoggingConfigsResponse METHOD_NAME(ListQueryLoggingConfigsRequest VAR_LISTQUERYLOGGINGCONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQueryLoggingConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQueryLoggingConfigsResponseUnmarshaller.Instance; return Invoke<ListQueryLoggingConfigsResponse>(VAR_LISTQUERYLOGGINGCONFIGSREQUEST, VAR_VAR); }
public virtual BatchGetDeploymentTargetsResponse METHOD_NAME(BatchGetDeploymentTargetsRequest VAR_BATCHGETDEPLOYMENTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetDeploymentTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetDeploymentTargetsResponseUnmarshaller.Instance; return Invoke<BatchGetDeploymentTargetsResponse>(VAR_BATCHGETDEPLOYMENTTARGETSREQUEST, VAR_VAR); }
public virtual GetRulesResponse METHOD_NAME(GetRulesRequest VAR_GETRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRulesResponseUnmarshaller.Instance; return Invoke<GetRulesResponse>(VAR_GETRULESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { message = VAR_STRING; }
public override string METHOD_NAME(string VAR_STRING) { return LITERAL_NULL; }
public virtual CompleteMigrationResponse METHOD_NAME(CompleteMigrationRequest VAR_COMPLETEMIGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CompleteMigrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CompleteMigrationResponseUnmarshaller.Instance; return Invoke<CompleteMigrationResponse>(VAR_COMPLETEMIGRATIONREQUEST, VAR_VAR); }
public SupBookRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining; field_1_number_of_sheets = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_INT > SMALL_RECORD_SIZE) { _isAddInFunctions = false; field_2_encoded_url = VAR_RECORDINPUTSTREAM.ReadString(); String[] VAR_STRING[] = new String[field_1_number_of_sheets]; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { VAR_STRING[][i] = VAR_RECORDINPUTSTREAM.ReadString(); } field_3_sheet_names = VAR_STRING[]; return; } field_2_encoded_url = LITERAL_NULL; field_3_sheet_names = LITERAL_NULL; short VAR_SHORT = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_SHORT == TAG_INTERNAL_REFERENCES) { _isAddInFunctions = false; } else if (VAR_SHORT == TAG_ADD_IN_FUNCTIONS) { _isAddInFunctions = true; if (field_1_number_of_sheets != LITERAL_INT) { throw new Exception(LITERAL_STRING + field_1_number_of_sheets + LITERAL_STRING); } } else { throw new Exception(LITERAL_STRING + StringUtil.ToHexString(VAR_SHORT) + LITERAL_STRING); } }
public virtual GetEmailTemplateResponse METHOD_NAME(GetEmailTemplateRequest VAR_GETEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEmailTemplateResponseUnmarshaller.Instance; return Invoke<GetEmailTemplateResponse>(VAR_GETEMAILTEMPLATEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { switch (VAR_INT >> LITERAL_INT) { case LITERAL_INT: { w1 = Set(w1, VAR_INT & LITERAL_INT, VAR_INT); break; } case LITERAL_INT: { w2 = Set(w2, VAR_INT & LITERAL_INT, VAR_INT); break; } case LITERAL_INT: { w3 = Set(w3, VAR_INT & LITERAL_INT, VAR_INT); break; } case LITERAL_INT: { w4 = Set(w4, VAR_INT & LITERAL_INT, VAR_INT); break; } case LITERAL_INT: { w5 = Set(w5, VAR_INT & LITERAL_INT, VAR_INT); break; } default: { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } } }
public override java.nio.LongBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { throw new java.nio.ReadOnlyBufferException(); }
public SumTotalTermFreqValueSource(string VAR_STRING) { this.m_indexedField = VAR_STRING; }
public virtual java.util.NavigableSet<E> METHOD_NAME(E VAR_E, bool VAR_BOOL) { java.util.Comparator<E> VAR_JAVA.UTIL.COMPARATOR<E> = backingMap.comparator(); if (VAR_JAVA.UTIL.COMPARATOR<E> == LITERAL_NULL) { ((java.lang.Comparable<E>)VAR_E).compareTo(VAR_E); } else { VAR_JAVA.UTIL.COMPARATOR<E>.compare(VAR_E, VAR_E); } return new java.util.TreeSet<E>(backingMap.tailMap(VAR_E, VAR_BOOL)); }
public virtual ReadJobResponse METHOD_NAME(ReadJobRequest VAR_READJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReadJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReadJobResponseUnmarshaller.Instance; return Invoke<ReadJobResponse>(VAR_READJOBREQUEST, VAR_VAR); }
public virtual GetSignalingChannelEndpointResponse METHOD_NAME(GetSignalingChannelEndpointRequest VAR_GETSIGNALINGCHANNELENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSignalingChannelEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSignalingChannelEndpointResponseUnmarshaller.Instance; return Invoke<GetSignalingChannelEndpointResponse>(VAR_GETSIGNALINGCHANNELENDPOINTREQUEST, VAR_VAR); }
public VariableGapTermsIndexWriter(SegmentWriteState VAR_SEGMENTWRITESTATE, IndexTermSelector VAR_INDEXTERMSELECTOR) { string VAR_STRING = IndexFileNames.SegmentFileName(VAR_SEGMENTWRITESTATE.SegmentInfo.Name, VAR_SEGMENTWRITESTATE.SegmentSuffix, TERMS_INDEX_EXTENSION); m_output = VAR_SEGMENTWRITESTATE.Directory.CreateOutput(VAR_STRING, VAR_SEGMENTWRITESTATE.Context); bool VAR_BOOL = false; try { fieldInfos = VAR_SEGMENTWRITESTATE.FieldInfos; this.VAR_INDEXTERMSELECTOR = VAR_INDEXTERMSELECTOR; WriteHeader(m_output); VAR_BOOL = true; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(m_output); } } }
public override bool METHOD_NAME(E VAR_E) { object[] VAR_OBJECT[] = array; int VAR_INT = _size; if (VAR_INT == VAR_OBJECT[].Length) { object[] VAR_OBJECT[] = new object[VAR_INT + (VAR_INT < (java.util.ArrayList.MIN_CAPACITY_INCREMENT / LITERAL_INT) ? java.util.ArrayList.MIN_CAPACITY_INCREMENT : VAR_INT >> LITERAL_INT)]; System.Array.Copy(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[], LITERAL_INT, VAR_INT); array = VAR_OBJECT[] = VAR_OBJECT[]; } VAR_OBJECT[][VAR_INT] = VAR_E; _size = VAR_INT + LITERAL_INT; modCount++; return true; }
public virtual HashSet<int> METHOD_NAME() { HashSet<int> VAR_HASHSET<INT> = new HashSet<int>(); foreach (Interval I in intervals) { int VAR_INT = I.a; int VAR_INT = I.b; for (int v = VAR_INT; v <= VAR_INT; v++) { VAR_HASHSET<INT>.Add(v); } } return VAR_HASHSET<INT>; }
public virtual void METHOD_NAME(bool VAR_BOOL) { throw new System.NotImplementedException(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { throw new RecordFormatException(LITERAL_STRING); }
public override T METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || size <= VAR_INT) { throw new IndexOutOfRangeException(VAR_INT.ToString()); } return directory[ToDirectoryIndex(VAR_INT)][ToBlockIndex(VAR_INT)]; }
public virtual DeleteSnapshotCopyGrantResponse METHOD_NAME(DeleteSnapshotCopyGrantRequest VAR_DELETESNAPSHOTCOPYGRANTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSnapshotCopyGrantRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSnapshotCopyGrantResponseUnmarshaller.Instance; return Invoke<DeleteSnapshotCopyGrantResponse>(VAR_DELETESNAPSHOTCOPYGRANTREQUEST, VAR_VAR); }
public void METHOD_NAME() { SetFontStyle(false, false); }
public static int METHOD_NAME(int VAR_INT) { return LITERAL_INT + CellRangeAddress.METHOD_NAME(VAR_INT); }
public ListJobsRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public DeletePlacementGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual void METHOD_NAME() { LazyInit(); int VAR_INT = LITERAL_INT; while (true) { int VAR_INT = Fetch(VAR_INT); if (VAR_INT < VAR_INT) { return; } } }
public virtual DescribeGlobalClustersResponse METHOD_NAME(DescribeGlobalClustersRequest VAR_DESCRIBEGLOBALCLUSTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGlobalClustersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGlobalClustersResponseUnmarshaller.Instance; return Invoke<DescribeGlobalClustersResponse>(VAR_DESCRIBEGLOBALCLUSTERSREQUEST, VAR_VAR); }
public virtual PutVoiceConnectorTerminationResponse METHOD_NAME(PutVoiceConnectorTerminationRequest VAR_PUTVOICECONNECTORTERMINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorTerminationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorTerminationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorTerminationResponse>(VAR_PUTVOICECONNECTORTERMINATIONREQUEST, VAR_VAR); }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { for (; VAR_CHAR[][VAR_INT] == VAR_CHAR[][VAR_INT]; VAR_INT++, VAR_INT++) { if (VAR_CHAR[][VAR_INT] == LITERAL_INT) { return LITERAL_INT; } } return VAR_CHAR[][VAR_INT] - VAR_CHAR[][VAR_INT]; }
public virtual StartSentimentDetectionJobResponse METHOD_NAME(StartSentimentDetectionJobRequest VAR_STARTSENTIMENTDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartSentimentDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StartSentimentDetectionJobResponse>(VAR_STARTSENTIMENTDETECTIONJOBREQUEST, VAR_VAR); }
public ICell METHOD_NAME(int VAR_INT) { return this.METHOD_NAME(VAR_INT, CellType.Blank); }
public RecalcIdRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { VAR_RECORDINPUTSTREAM.ReadUShort(); _reserved0 = VAR_RECORDINPUTSTREAM.ReadUShort(); _engineId = VAR_RECORDINPUTSTREAM.ReadInt(); }
public static int METHOD_NAME(Ptg[] VAR_PTG[]) { int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { Ptg VAR_PTG = VAR_PTG[][i]; if (VAR_PTG is ArrayPtg) { VAR_INT += ArrayPtg.PLAIN_TOKEN_SIZE; } else { VAR_INT += VAR_PTG.Size; } } return VAR_INT; }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { double VAR_DOUBLE; if ((VAR_DOUBLE < LITERAL_INT && VAR_DOUBLE > LITERAL_INT) || (VAR_DOUBLE > LITERAL_INT && VAR_DOUBLE < LITERAL_INT)) { VAR_DOUBLE = double.NaN; } else { VAR_DOUBLE = (VAR_DOUBLE == LITERAL_INT || VAR_DOUBLE == LITERAL_INT) ? LITERAL_INT : Math.METHOD_NAME(VAR_DOUBLE / VAR_DOUBLE) * VAR_DOUBLE; } return VAR_DOUBLE; }
public virtual ListResolverRulesResponse METHOD_NAME(ListResolverRulesRequest VAR_LISTRESOLVERRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResolverRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResolverRulesResponseUnmarshaller.Instance; return Invoke<ListResolverRulesResponse>(VAR_LISTRESOLVERRULESREQUEST, VAR_VAR); }
public virtual ListBusinessReportSchedulesResponse METHOD_NAME(ListBusinessReportSchedulesRequest VAR_LISTBUSINESSREPORTSCHEDULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBusinessReportSchedulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBusinessReportSchedulesResponseUnmarshaller.Instance; return Invoke<ListBusinessReportSchedulesResponse>(VAR_LISTBUSINESSREPORTSCHEDULESREQUEST, VAR_VAR); }
public virtual EscherDgRecord METHOD_NAME() { EscherDgRecord VAR_ESCHERDGRECORD = new EscherDgRecord(); VAR_ESCHERDGRECORD.RecordId = EscherDgRecord.RECORD_ID; short VAR_SHORT = FindNewDrawingGroupId(); VAR_ESCHERDGRECORD.Options = (short)(VAR_SHORT << LITERAL_INT); VAR_ESCHERDGRECORD.NumShapes = LITERAL_INT; VAR_ESCHERDGRECORD.LastMSOSPID = (-LITERAL_INT); drawingGroups.Add(VAR_ESCHERDGRECORD); dgg.AddCluster(VAR_SHORT, LITERAL_INT); dgg.DrawingsSaved = dgg.DrawingsSaved + LITERAL_INT; return VAR_ESCHERDGRECORD; }
public virtual NGit.Transport.Transport METHOD_NAME(URIish VAR_URIISH) { throw new NotSupportedException(JGitText.Get().transportNeedsRepository); }
public virtual int METHOD_NAME(Ref VAR_REF, Ref VAR_REF) { return CompareTo(VAR_REF, VAR_REF); }
public OrdRange(int VAR_INT, int VAR_INT) { this.Start = VAR_INT; this.End = VAR_INT; }
public override bool METHOD_NAME(E VAR_E) { return backingMap.put(VAR_E, this) == LITERAL_NULL; }
public virtual void METHOD_NAME(int VAR_INT) { METHOD_NAME((char)VAR_INT); }
public override long METHOD_NAME(long VAR_LONG) { try { BeginRead(); return base.METHOD_NAME(VAR_LONG); } catch (ThreadInterruptedException) { throw ReadTimedOut(); } finally { EndRead(); } }
public StepDetail(StepConfig VAR_STEPCONFIG, StepExecutionStatusDetail VAR_STEPEXECUTIONSTATUSDETAIL) { _stepConfig = VAR_STEPCONFIG; _executionStatusDetail = VAR_STEPEXECUTIONSTATUSDETAIL; }
public Token METHOD_NAME(int VAR_INT) { Token VAR_TOKEN = Token; for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_TOKEN.Next != LITERAL_NULL) VAR_TOKEN = VAR_TOKEN.Next; else VAR_TOKEN = VAR_TOKEN.Next = TokenSource.GetNextToken(); } return VAR_TOKEN; }
public virtual object[] METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public virtual CreateDBParameterGroupResponse METHOD_NAME(CreateDBParameterGroupRequest VAR_CREATEDBPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBParameterGroupResponse>(VAR_CREATEDBPARAMETERGROUPREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(bool VAR_BOOL) { append0(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); return this; }
public virtual void METHOD_NAME(Lexer VAR_LEXER, ICharStream VAR_ICHARSTREAM, int VAR_INT) { bool VAR_BOOL = false; int VAR_INT = VAR_ICHARSTREAM.Index; try { foreach (ILexerAction lexerAction in lexerActions) { ILexerAction VAR_ILEXERACTION = lexerAction; if (VAR_ILEXERACTION is LexerIndexedCustomAction) { int VAR_INT = ((LexerIndexedCustomAction)VAR_ILEXERACTION).Offset; VAR_ICHARSTREAM.Seek(VAR_INT + VAR_INT); VAR_ILEXERACTION = ((LexerIndexedCustomAction)VAR_ILEXERACTION).Action; VAR_BOOL = (VAR_INT + VAR_INT) != VAR_INT; } else { if (VAR_ILEXERACTION.IsPositionDependent) { VAR_ICHARSTREAM.Seek(VAR_INT); VAR_BOOL = false; } } VAR_ILEXERACTION.METHOD_NAME(VAR_LEXER); } } finally { if (VAR_BOOL) { VAR_ICHARSTREAM.Seek(VAR_INT); } } }
public virtual ListMailboxPermissionsResponse METHOD_NAME(ListMailboxPermissionsRequest VAR_LISTMAILBOXPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMailboxPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<ListMailboxPermissionsResponse>(VAR_LISTMAILBOXPERMISSIONSREQUEST, VAR_VAR); }
public ConditionalFormattingTable(RecordStream VAR_RECORDSTREAM) { IList VAR_ILIST = new ArrayList(); while (VAR_RECORDSTREAM.PeekNextClass() == typeof(CFHeaderRecord)) { VAR_ILIST.Add(CFRecordsAggregate.CreateCFAggregate(VAR_RECORDSTREAM)); } _cfHeaders = VAR_ILIST; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public virtual IDictionary<string, Ref> METHOD_NAME() { try { return RefDatabase.GetRefs(Constants.R_TAGS); } catch (IOException) { return new Dictionary<string, Ref>(); } }
public ComposedQuery(IList<SrndQuery> VAR_ILIST<SRNDQUERY>, bool VAR_BOOL, string VAR_STRING) { Recompose(VAR_ILIST<SRNDQUERY>); this.VAR_BOOL = VAR_BOOL; this.m_opName = VAR_STRING; }
public virtual TestRoleResponse METHOD_NAME(TestRoleRequest VAR_TESTROLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestRoleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestRoleResponseUnmarshaller.Instance; return Invoke<TestRoleResponse>(VAR_TESTROLEREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subfilters.Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(subfilters[i].METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ModifyVpcAttributeResponse METHOD_NAME(ModifyVpcAttributeRequest VAR_MODIFYVPCATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcAttributeResponseUnmarshaller.Instance; return Invoke<ModifyVpcAttributeResponse>(VAR_MODIFYVPCATTRIBUTEREQUEST, VAR_VAR); }
public override void METHOD_NAME(long VAR_LONG) { throw new System.NotSupportedException(); }
public ArabicNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override bool METHOD_NAME(Object VAR_OBJECT) { BookSheetKey VAR_BOOKSHEETKEY = (BookSheetKey)VAR_OBJECT; return _bookIndex == VAR_BOOKSHEETKEY._bookIndex && _sheetIndex == VAR_BOOKSHEETKEY._sheetIndex; }
public TermQuery(Term VAR_TERM, TermContext VAR_TERMCONTEXT) { Debug.Assert(VAR_TERMCONTEXT != LITERAL_NULL); term = VAR_TERM; docFreq = VAR_TERMCONTEXT.DocFreq; perReaderTermState = VAR_TERMCONTEXT; }
public virtual GetClusterCredentialsResponse METHOD_NAME(GetClusterCredentialsRequest VAR_GETCLUSTERCREDENTIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetClusterCredentialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetClusterCredentialsResponseUnmarshaller.Instance; return Invoke<GetClusterCredentialsResponse>(VAR_GETCLUSTERCREDENTIALSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return (this.GetType() == VAR_OBJECT.GetType()) && this.EqualsSameType(VAR_OBJECT); }
public object METHOD_NAME() { return new Item(parent, child); }
public virtual UpdateClusterResponse METHOD_NAME(UpdateClusterRequest VAR_UPDATECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateClusterResponseUnmarshaller.Instance; return Invoke<UpdateClusterResponse>(VAR_UPDATECLUSTERREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public virtual NGit.Api.LogCommand METHOD_NAME(int VAR_INT) { CheckCallable(); this.VAR_INT = VAR_INT; return this; }
public virtual GetInsightRuleReportResponse METHOD_NAME(GetInsightRuleReportRequest VAR_GETINSIGHTRULEREPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInsightRuleReportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInsightRuleReportResponseUnmarshaller.Instance; return Invoke<GetInsightRuleReportResponse>(VAR_GETINSIGHTRULEREPORTREQUEST, VAR_VAR); }
public CommonToken(IToken VAR_ITOKEN) { _type = VAR_ITOKEN.Type; _line = VAR_ITOKEN.Line; index = VAR_ITOKEN.TokenIndex; charPositionInLine = VAR_ITOKEN.Column; _channel = VAR_ITOKEN.Channel; start = VAR_ITOKEN.StartIndex; stop = VAR_ITOKEN.StopIndex; if (VAR_ITOKEN is Antlr4.Runtime.CommonToken) { _text = ((Antlr4.Runtime.CommonToken)VAR_ITOKEN)._text; source = ((Antlr4.Runtime.CommonToken)VAR_ITOKEN).source; } else { _text = VAR_ITOKEN.Text; source = Tuple.Create(VAR_ITOKEN.TokenSource, VAR_ITOKEN.InputStream); } }
public virtual ListSolutionsResponse METHOD_NAME(ListSolutionsRequest VAR_LISTSOLUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSolutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSolutionsResponseUnmarshaller.Instance; return Invoke<ListSolutionsResponse>(VAR_LISTSOLUTIONSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return index > from; }
public override void METHOD_NAME() { if (finalState != LITERAL_NULL) { RestoreState(finalState); } }
public override java.nio.DoubleBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_DOUBLE; return this; }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY) { return new ResolveMerger(VAR_REPOSITORY, false); }
public static long METHOD_NAME(long[] VAR_LONG[], long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG += (VAR_LONG[][i] | VAR_LONG[][i]).PopCount(); } return VAR_LONG; }
public override java.nio.LongBuffer METHOD_NAME(long VAR_LONG) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_LONG; return this; }
public ConstValueSource(float VAR_FLOAT) { this.VAR_FLOAT = VAR_FLOAT; this.dv = VAR_FLOAT; }
public bool METHOD_NAME(char VAR_CHAR) { return punctCharacters.IndexOf(VAR_CHAR) != -LITERAL_INT; }
public FlushInfo(int VAR_INT, long VAR_LONG) { this.NumDocs = VAR_INT; this.EstimatedSegmentSize = VAR_LONG; }
public virtual void METHOD_NAME(char[] VAR_CHAR[]) { METHOD_NAME(new string (VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length)); }
public virtual E METHOD_NAME() { return getFirstImpl(); }
public virtual ListNodegroupsResponse METHOD_NAME(ListNodegroupsRequest VAR_LISTNODEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNodegroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNodegroupsResponseUnmarshaller.Instance; return Invoke<ListNodegroupsResponse>(VAR_LISTNODEGROUPSREQUEST, VAR_VAR); }
public virtual PutSkillAuthorizationResponse METHOD_NAME(PutSkillAuthorizationRequest VAR_PUTSKILLAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutSkillAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutSkillAuthorizationResponseUnmarshaller.Instance; return Invoke<PutSkillAuthorizationResponse>(VAR_PUTSKILLAUTHORIZATIONREQUEST, VAR_VAR); }
public virtual DescribeSourceRegionsResponse METHOD_NAME(DescribeSourceRegionsRequest VAR_DESCRIBESOURCEREGIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSourceRegionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSourceRegionsResponseUnmarshaller.Instance; return Invoke<DescribeSourceRegionsResponse>(VAR_DESCRIBESOURCEREGIONSREQUEST, VAR_VAR); }
public virtual SplitShardResponse METHOD_NAME(SplitShardRequest VAR_SPLITSHARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SplitShardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SplitShardResponseUnmarshaller.Instance; return Invoke<SplitShardResponse>(VAR_SPLITSHARDREQUEST, VAR_VAR); }
public CreateTableRequest(string VAR_STRING, List<KeySchemaElement> VAR_LIST<KEYSCHEMAELEMENT>) { _tableName = VAR_STRING; _keySchema = VAR_LIST<KEYSCHEMAELEMENT>; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_id); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_4_text.Length); if (is16bit) { VAR_ILITTLEENDIANOUTPUT.WriteByte(LITERAL_INT); StringUtil.PutUnicodeLE(field_4_text, VAR_ILITTLEENDIANOUTPUT); } else { VAR_ILITTLEENDIANOUTPUT.WriteByte(LITERAL_INT); StringUtil.PutCompressedUnicode(field_4_text, VAR_ILITTLEENDIANOUTPUT); } }
public virtual UpdateVoiceTemplateResponse METHOD_NAME(UpdateVoiceTemplateRequest VAR_UPDATEVOICETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVoiceTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVoiceTemplateResponseUnmarshaller.Instance; return Invoke<UpdateVoiceTemplateResponse>(VAR_UPDATEVOICETEMPLATEREQUEST, VAR_VAR); }
public BookBoolRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_save_link_values = VAR_RECORDINPUTSTREAM.ReadShort(); }
public java.nio.Buffer METHOD_NAME() { _limit = _position; _position = LITERAL_INT; _mark = UNSET_MARK; return this; }
public virtual java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_INT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_INT[][i] = METHOD_NAME(); } } return this; }
public virtual GroupingSearch METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; return this; }
public Builder() { InitializeInstanceFields(); }
public virtual string METHOD_NAME() { return command; }
public int METHOD_NAME(int VAR_INT) { if (VAR_INT >= _externSheetRecord.NumOfRefs || VAR_INT < LITERAL_INT) { return -LITERAL_INT; } return _externSheetRecord.GetFirstSheetIndexFromRefIndex(VAR_INT); }
public bool METHOD_NAME() { if (LITERAL_NULL == ExpiredDate) { return false; } return !(ExpiredDate < DateTime.UtcNow); }
public virtual ListPolicyAttachmentsResponse METHOD_NAME(ListPolicyAttachmentsRequest VAR_LISTPOLICYATTACHMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPolicyAttachmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPolicyAttachmentsResponseUnmarshaller.Instance; return Invoke<ListPolicyAttachmentsResponse>(VAR_LISTPOLICYATTACHMENTSREQUEST, VAR_VAR); }
public double METHOD_NAME() { return BitConverter.Int64BitsToDouble(ReadLong()); }
public UpdateLoginProfileRequest(string VAR_STRING) { _userName = VAR_STRING; }
public virtual string METHOD_NAME() { return resultPath; }
public DescribeInstanceAttributeRequest(string VAR_STRING, InstanceAttributeName VAR_INSTANCEATTRIBUTENAME) { _instanceId = VAR_STRING; _attribute = VAR_INSTANCEATTRIBUTENAME; }
public virtual int METHOD_NAME() { return index - LITERAL_INT; }
public static RevFilter METHOD_NAME(RevFilter[] VAR_REVFILTER[]) { if (VAR_REVFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_REVFILTER[][LITERAL_INT], VAR_REVFILTER[][LITERAL_INT]); } if (VAR_REVFILTER[].Length < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } RevFilter[] VAR_REVFILTER[] = new RevFilter[VAR_REVFILTER[].Length]; System.Array.Copy(VAR_REVFILTER[], LITERAL_INT, VAR_REVFILTER[], LITERAL_INT, VAR_REVFILTER[].Length); return new AndRevFilter.List(VAR_REVFILTER[]); }
public virtual void METHOD_NAME() { Seek(LITERAL_INT); }
public ListResourceRecordSetsRequest(string VAR_STRING) { _hostedZoneId = VAR_STRING; }
public EventBasedExcelExtractor(POIFSFileSystem VAR_POIFSFILESYSTEM) : base(LITERAL_NULL) { this.VAR_POIFSFILESYSTEM = VAR_POIFSFILESYSTEM; }
public virtual ListClustersResponse METHOD_NAME() { return METHOD_NAME(new ListClustersRequest()); }
public virtual CreateAddressResponse METHOD_NAME(CreateAddressRequest VAR_CREATEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAddressResponseUnmarshaller.Instance; return Invoke<CreateAddressResponse>(VAR_CREATEADDRESSREQUEST, VAR_VAR); }
public ListFacePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual string METHOD_NAME() { return Format(true, true); }
public virtual BatchGetNamedQueryResponse METHOD_NAME(BatchGetNamedQueryRequest VAR_BATCHGETNAMEDQUERYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetNamedQueryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetNamedQueryResponseUnmarshaller.Instance; return Invoke<BatchGetNamedQueryResponse>(VAR_BATCHGETNAMEDQUERYREQUEST, VAR_VAR); }
public virtual CreateProfilingGroupResponse METHOD_NAME(CreateProfilingGroupRequest VAR_CREATEPROFILINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProfilingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProfilingGroupResponseUnmarshaller.Instance; return Invoke<CreateProfilingGroupResponse>(VAR_CREATEPROFILINGGROUPREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return java.util.Arrays.toString(elements); }
public override string METHOD_NAME() { string VAR_STRING = GetPadding(); StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING); if (disableCounting) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(GetName()); if (RunInBackground) { VAR_STRINGBUILDER.Append(LITERAL_STRING); int VAR_INT = BackgroundDeltaPriority; if (VAR_INT != LITERAL_INT) { VAR_STRINGBUILDER.Append(VAR_INT); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override Counter METHOD_NAME() { return bytesUsed; }
public virtual ListStreamingDistributionsResponse METHOD_NAME(ListStreamingDistributionsRequest VAR_LISTSTREAMINGDISTRIBUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStreamingDistributionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStreamingDistributionsResponseUnmarshaller.Instance; return Invoke<ListStreamingDistributionsResponse>(VAR_LISTSTREAMINGDISTRIBUTIONSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public static ExpandedDouble METHOD_NAME(long VAR_LONG, int VAR_INT) { return new ExpandedDouble(GetFrac(VAR_LONG), VAR_INT); }
public virtual bool METHOD_NAME(E VAR_E) { return addFirstImpl(VAR_E); }
public BlockTermsWriter(TermsIndexWriterBase VAR_TERMSINDEXWRITERBASE, SegmentWriteState VAR_SEGMENTWRITESTATE, PostingsWriterBase VAR_POSTINGSWRITERBASE) { string VAR_STRING = IndexFileNames.SegmentFileName(VAR_SEGMENTWRITESTATE.SegmentInfo.Name, VAR_SEGMENTWRITESTATE.SegmentSuffix, TERMS_EXTENSION); this.VAR_TERMSINDEXWRITERBASE = VAR_TERMSINDEXWRITERBASE; m_output = VAR_SEGMENTWRITESTATE.Directory.CreateOutput(VAR_STRING, VAR_SEGMENTWRITESTATE.Context); bool VAR_BOOL = false; try { fieldInfos = VAR_SEGMENTWRITESTATE.FieldInfos; WriteHeader(m_output); currentField = LITERAL_NULL; this.VAR_POSTINGSWRITERBASE = VAR_POSTINGSWRITERBASE; VAR_POSTINGSWRITERBASE.Init(m_output); VAR_BOOL = true; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(m_output); } } }
public InstanceGroupModifyConfig(string VAR_STRING, int VAR_INT) { _instanceGroupId = VAR_STRING; _instanceCount = VAR_INT; }
public virtual void METHOD_NAME(int VAR_INT) { totalHits++; }
public void METHOD_NAME(int VAR_INT) { try { out1.METHOD_NAME((byte)VAR_INT); } catch (IOException e) { throw new RuntimeException(e); } }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { Array.Copy(_complexData, LITERAL_INT, VAR_BYTE[], VAR_INT, _complexData.Length); return _complexData.Length; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public DecisionInfo(int VAR_INT) { this.VAR_INT = VAR_INT; }
public CFRuleRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_condition_type = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_2_comparison_operator = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); field_5_options = VAR_RECORDINPUTSTREAM.ReadInt(); field_6_not_used = VAR_RECORDINPUTSTREAM.ReadShort(); if (ContainsFontFormattingBlock) { _fontFormatting = new FontFormatting(VAR_RECORDINPUTSTREAM); } if (ContainsBorderFormattingBlock) { _borderFormatting = new BorderFormatting(VAR_RECORDINPUTSTREAM); } if (ContainsPatternFormattingBlock) { _patternFormatting = new PatternFormatting(VAR_RECORDINPUTSTREAM); } field_17_formula1 = FR.Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM); field_18_formula2 = FR.Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM); }
public GroupMarkerSubRecord() { reserved = EMPTY_BYTE_ARRAY; }
public virtual SegToken METHOD_NAME(SegToken VAR_SEGTOKEN) { switch (VAR_SEGTOKEN.WordType) { case WordType.FULLWIDTH_NUMBER: case WordType.FULLWIDTH_STRING: for (int i = LITERAL_INT; i < VAR_SEGTOKEN.CharArray.Length; i++) { if (VAR_SEGTOKEN.CharArray[i] >= LITERAL_INT) { VAR_SEGTOKEN.CharArray[i] = (char)(VAR_SEGTOKEN.CharArray[i] - LITERAL_INT); } if (VAR_SEGTOKEN.CharArray[i] >= LITERAL_INT && VAR_SEGTOKEN.CharArray[i] <= LITERAL_INT) { VAR_SEGTOKEN.CharArray[i] = (char)(VAR_SEGTOKEN.CharArray[i] + LITERAL_INT); } } break; case WordType.STRING: for (int i = LITERAL_INT; i < VAR_SEGTOKEN.CharArray.Length; i++) { if (VAR_SEGTOKEN.CharArray[i] >= LITERAL_INT && VAR_SEGTOKEN.CharArray[i] <= LITERAL_INT) { VAR_SEGTOKEN.CharArray[i] = (char)(VAR_SEGTOKEN.CharArray[i] + LITERAL_INT); } } break; case WordType.DELIMITER: VAR_SEGTOKEN.CharArray = Utility.COMMON_DELIMITER; break; default: break; } return VAR_SEGTOKEN; }
public BarRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_barSpace = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_categorySpace = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_formatFlags = VAR_RECORDINPUTSTREAM.ReadShort(); }
public bool METHOD_NAME() { int VAR_INT; while ((VAR_INT = refCount) > LITERAL_INT) { if (refCount.CompareAndSet(VAR_INT, VAR_INT + LITERAL_INT)) { return true; } } return false; }
public virtual GetStackPolicyResponse METHOD_NAME(GetStackPolicyRequest VAR_GETSTACKPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStackPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStackPolicyResponseUnmarshaller.Instance; return Invoke<GetStackPolicyResponse>(VAR_GETSTACKPOLICYREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_KEYWORDS); }
public virtual bool METHOD_NAME(TextFragment VAR_TEXTFRAGMENT) { return TextStartPos == VAR_TEXTFRAGMENT.TextEndPos; }
public virtual DescribeHyperParameterTuningJobResponse METHOD_NAME(DescribeHyperParameterTuningJobRequest VAR_DESCRIBEHYPERPARAMETERTUNINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHyperParameterTuningJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHyperParameterTuningJobResponseUnmarshaller.Instance; return Invoke<DescribeHyperParameterTuningJobResponse>(VAR_DESCRIBEHYPERPARAMETERTUNINGJOBREQUEST, VAR_VAR); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); string VAR_STRING = LITERAL_STRING; foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX)); VAR_STRING = LITERAL_STRING; } if ((Parent != LITERAL_NULL && Parent is GroupQueryNode) || IsRoot) return VAR_STRINGBUILDER.ToString(); else return LITERAL_STRING + VAR_STRINGBUILDER.ToString() + LITERAL_STRING; }
public override string METHOD_NAME() { return LITERAL_STRING + this.phase + LITERAL_STRING + this.bytesUsed + LITERAL_STRING; }
public DataFormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_pointNumber = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_seriesIndex = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_seriesNumber = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_formatFlags = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual ModifyVpcEndpointServiceConfigurationResponse METHOD_NAME(ModifyVpcEndpointServiceConfigurationRequest VAR_MODIFYVPCENDPOINTSERVICECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcEndpointServiceConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcEndpointServiceConfigurationResponseUnmarshaller.Instance; return Invoke<ModifyVpcEndpointServiceConfigurationResponse>(VAR_MODIFYVPCENDPOINTSERVICECONFIGURATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_encodedTokenLen); VAR_ILITTLEENDIANOUTPUT.Write(_byteEncoding); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { AreaEval VAR_AREAEVAL; try { VAR_AREAEVAL = ConvertRangeArg(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } return Eval(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_AREAEVAL, VAR_AREAEVAL); }
public RecognizeLabelRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual ListStackSetsResponse METHOD_NAME(ListStackSetsRequest VAR_LISTSTACKSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStackSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStackSetsResponseUnmarshaller.Instance; return Invoke<ListStackSetsResponse>(VAR_LISTSTACKSETSREQUEST, VAR_VAR); }
public virtual ModifyNetworkInterfaceAttributeResponse METHOD_NAME(ModifyNetworkInterfaceAttributeRequest VAR_MODIFYNETWORKINTERFACEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyNetworkInterfaceAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyNetworkInterfaceAttributeResponseUnmarshaller.Instance; return Invoke<ModifyNetworkInterfaceAttributeResponse>(VAR_MODIFYNETWORKINTERFACEATTRIBUTEREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(RevFilter VAR_REVFILTER) { return new NGit.Revwalk.Filter.NotRevFilter(VAR_REVFILTER); }
public override string METHOD_NAME() { string VAR_STRING = parent != LITERAL_NULL ? parent.METHOD_NAME() : LITERAL_STRING; if (VAR_STRING.Length == LITERAL_INT) { if (returnState == EMPTY_RETURN_STATE) { return LITERAL_STRING; } return returnState.METHOD_NAME(); } return returnState.METHOD_NAME() + LITERAL_STRING + VAR_STRING; }
public ToParentBlockJoinQuery(Query VAR_QUERY, Filter VAR_FILTER, ScoreMode VAR_SCOREMODE) : base() { _origChildQuery = VAR_QUERY; _childQuery = VAR_QUERY; _parentsFilter = VAR_FILTER; _scoreMode = VAR_SCOREMODE; }
public int METHOD_NAME() { int VAR_INT = iterator.METHOD_NAME(); if (VAR_INT >= start) { return VAR_INT - start; } return -LITERAL_INT; }
public virtual string METHOD_NAME(int VAR_INT) { return sourcePaths[VAR_INT]; }
public override java.nio.DoubleBuffer METHOD_NAME() { return new java.nio.ReadWriteDoubleArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual DescribeEvaluationsResponse METHOD_NAME(DescribeEvaluationsRequest VAR_DESCRIBEEVALUATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEvaluationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEvaluationsResponseUnmarshaller.Instance; return Invoke<DescribeEvaluationsResponse>(VAR_DESCRIBEEVALUATIONSREQUEST, VAR_VAR); }
public int METHOD_NAME() { return bigBlockSize; }
public static ValueVector METHOD_NAME(TwoDEval VAR_TWODEVAL, int VAR_INT) { return new RowVector((AreaEval)VAR_TWODEVAL, VAR_INT); }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { field_5_dbcells.Set(VAR_INT, VAR_INT); }
public virtual int METHOD_NAME(MutableValue VAR_MUTABLEVALUE) { Type VAR_TYPE = this.GetType(); Type VAR_TYPE = VAR_MUTABLEVALUE.GetType(); if (VAR_TYPE != VAR_TYPE) { int VAR_INT = VAR_TYPE.GetHashCode() - VAR_TYPE.GetHashCode(); if (VAR_INT == LITERAL_INT) { VAR_INT = VAR_TYPE.FullName.CompareToOrdinal(VAR_TYPE.FullName); } return VAR_INT; } return CompareSameType(VAR_MUTABLEVALUE); }
public virtual StartSpeechSynthesisTaskResponse METHOD_NAME(StartSpeechSynthesisTaskRequest VAR_STARTSPEECHSYNTHESISTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartSpeechSynthesisTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartSpeechSynthesisTaskResponseUnmarshaller.Instance; return Invoke<StartSpeechSynthesisTaskResponse>(VAR_STARTSPEECHSYNTHESISTASKREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { _parseListeners = LITERAL_NULL; }
public virtual ListIdentityPoolsResponse METHOD_NAME(ListIdentityPoolsRequest VAR_LISTIDENTITYPOOLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIdentityPoolsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIdentityPoolsResponseUnmarshaller.Instance; return Invoke<ListIdentityPoolsResponse>(VAR_LISTIDENTITYPOOLSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(text).Append(LITERAL_CHAR).Append(startOffset).Append(LITERAL_CHAR).Append(endOffset).Append(LITERAL_CHAR).Append(position).Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.wrapToCaching = VAR_BOOL; }
public override void METHOD_NAME(bool VAR_BOOL) { this._enclosing.onContentChanged(); }
public virtual DeleteRuleResponse METHOD_NAME(DeleteRuleRequest VAR_DELETERULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRuleResponseUnmarshaller.Instance; return Invoke<DeleteRuleResponse>(VAR_DELETERULEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(AddMenuCount); VAR_ILITTLEENDIANOUTPUT.WriteByte(DelMenuCount); }
public virtual string METHOD_NAME() { return pattern; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(Margin).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(ICharTermAttribute VAR_ICHARTERMATTRIBUTE) { VAR_ICHARTERMATTRIBUTE.CopyBuffer(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead); }
public LinkedList() { voidLink = new java.util.LinkedList.Link<E>(default(E), LITERAL_NULL, LITERAL_NULL); voidLink.previous = voidLink; voidLink.next = voidLink; }
public virtual CreateSnapshotCopyGrantResponse METHOD_NAME(CreateSnapshotCopyGrantRequest VAR_CREATESNAPSHOTCOPYGRANTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSnapshotCopyGrantRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSnapshotCopyGrantResponseUnmarshaller.Instance; return Invoke<CreateSnapshotCopyGrantResponse>(VAR_CREATESNAPSHOTCOPYGRANTREQUEST, VAR_VAR); }
public static int METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { BitSet VAR_BITSET = new BitSet(); foreach (BitSet alts in VAR_IENUMERABLE<BITSET>) { int VAR_INT = alts.NextSetBit(LITERAL_INT); VAR_BITSET.Set(VAR_INT); if (VAR_BITSET.Cardinality() > LITERAL_INT) { return ATN.INVALID_ALT_NUMBER; } } return VAR_BITSET.NextSetBit(LITERAL_INT); }
public Builder() { InitializeInstanceFields(); }
public virtual IList<Ref> METHOD_NAME() { return revertedRefs; }
public virtual DetachPolicyResponse METHOD_NAME(DetachPolicyRequest VAR_DETACHPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachPolicyResponseUnmarshaller.Instance; return Invoke<DetachPolicyResponse>(VAR_DETACHPOLICYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual DeleteBusinessReportScheduleResponse METHOD_NAME(DeleteBusinessReportScheduleRequest VAR_DELETEBUSINESSREPORTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBusinessReportScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBusinessReportScheduleResponseUnmarshaller.Instance; return Invoke<DeleteBusinessReportScheduleResponse>(VAR_DELETEBUSINESSREPORTSCHEDULEREQUEST, VAR_VAR); }
public JapanesePartOfSpeechStopFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { stopTagFiles = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); enablePositionIncrements = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual SetVaultNotificationsResponse METHOD_NAME(SetVaultNotificationsRequest VAR_SETVAULTNOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetVaultNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetVaultNotificationsResponseUnmarshaller.Instance; return Invoke<SetVaultNotificationsResponse>(VAR_SETVAULTNOTIFICATIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Debug.Assert(pos + VAR_INT <= limit); System.Buffer.BlockCopy(VAR_BYTE[], VAR_INT, bytes, pos, VAR_INT); pos += VAR_INT; }
public virtual UpdateLedgerResponse METHOD_NAME(UpdateLedgerRequest VAR_UPDATELEDGERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateLedgerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateLedgerResponseUnmarshaller.Instance; return Invoke<UpdateLedgerResponse>(VAR_UPDATELEDGERREQUEST, VAR_VAR); }
public virtual BatchDetectDominantLanguageResponse METHOD_NAME(BatchDetectDominantLanguageRequest VAR_BATCHDETECTDOMINANTLANGUAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDetectDominantLanguageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDetectDominantLanguageResponseUnmarshaller.Instance; return Invoke<BatchDetectDominantLanguageResponse>(VAR_BATCHDETECTDOMINANTLANGUAGEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { DoUpdates(); }
public virtual int METHOD_NAME() { return Atn.ATN.INVALID_ALT_NUMBER; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual int METHOD_NAME() { return timeout; }
public virtual bool METHOD_NAME(IndexInput VAR_INDEXINPUT) { return VAR_INDEXINPUT == _inStart; }
public DescribeMetricFiltersRequest(string VAR_STRING) { _logGroupName = VAR_STRING; }
public virtual void METHOD_NAME(char VAR_CHAR) { if (m_len >= m_buf.Length) { Resize(m_len + LITERAL_INT); } UnsafeWrite(VAR_CHAR); }
public virtual void METHOD_NAME() { if (count < value.Length) { char[] VAR_CHAR[] = new char[count]; System.Array.Copy(value, LITERAL_INT, VAR_CHAR[], LITERAL_INT, count); value = VAR_CHAR[]; shared = false; } }
public virtual ListTransformJobsResponse METHOD_NAME(ListTransformJobsRequest VAR_LISTTRANSFORMJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTransformJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTransformJobsResponseUnmarshaller.Instance; return Invoke<ListTransformJobsResponse>(VAR_LISTTRANSFORMJOBSREQUEST, VAR_VAR); }
public IEvaluationName METHOD_NAME(NamePtg VAR_NAMEPTG) { int VAR_INT = VAR_NAMEPTG.Index; return new Name(_iBook.GetNameRecord(VAR_INT), VAR_INT); }
public virtual NGit.Api.StashCreateCommand METHOD_NAME(string VAR_STRING) { indexMessage = VAR_STRING; return this; }
public HSSFPalette METHOD_NAME() { return new HSSFPalette(workbook.CustomPalette); }
public virtual DeregisterTaskDefinitionResponse METHOD_NAME(DeregisterTaskDefinitionRequest VAR_DEREGISTERTASKDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterTaskDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterTaskDefinitionResponseUnmarshaller.Instance; return Invoke<DeregisterTaskDefinitionResponse>(VAR_DEREGISTERTASKDEFINITIONREQUEST, VAR_VAR); }
public string METHOD_NAME() { return _pattern; }
public virtual void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual void METHOD_NAME(BaseReceivePack VAR_BASERECEIVEPACK) { try { RefUpdate VAR_REFUPDATE = VAR_BASERECEIVEPACK.GetRepository().UpdateRef(GetRefName()); VAR_REFUPDATE.SetRefLogIdent(VAR_BASERECEIVEPACK.GetRefLogIdent()); switch (GetType()) { case ReceiveCommand.Type.DELETE: { if (!ObjectId.ZeroId.Equals(GetOldId())) { VAR_REFUPDATE.SetExpectedOldObjectId(GetOldId()); } VAR_REFUPDATE.SetForceUpdate(true); SetResult(VAR_REFUPDATE.Delete(VAR_BASERECEIVEPACK.GetRevWalk())); break; } case ReceiveCommand.Type.CREATE: case ReceiveCommand.Type.UPDATE: case ReceiveCommand.Type.UPDATE_NONFASTFORWARD: { VAR_REFUPDATE.SetForceUpdate(VAR_BASERECEIVEPACK.IsAllowNonFastForwards()); VAR_REFUPDATE.SetExpectedOldObjectId(GetOldId()); VAR_REFUPDATE.SetNewObjectId(GetNewId()); VAR_REFUPDATE.SetRefLogMessage(LITERAL_STRING, true); SetResult(VAR_REFUPDATE.Update(VAR_BASERECEIVEPACK.GetRevWalk())); break; } } } catch (IOException err) { Reject(err); } }
public virtual GetEbsDefaultKmsKeyIdResponse METHOD_NAME(GetEbsDefaultKmsKeyIdRequest VAR_GETEBSDEFAULTKMSKEYIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEbsDefaultKmsKeyIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEbsDefaultKmsKeyIdResponseUnmarshaller.Instance; return Invoke<GetEbsDefaultKmsKeyIdResponse>(VAR_GETEBSDEFAULTKMSKEYIDREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return Slice.METHOD_NAME() + LITERAL_STRING + DocsAndPositionsEnum; }
public DeleteCacheParameterGroupRequest(string VAR_STRING) { _cacheParameterGroupName = VAR_STRING; }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K, bool VAR_BOOL) { java.util.TreeMap.Bound VAR_JAVA.UTIL.TREEMAP.BOUND = VAR_BOOL ? java.util.TreeMap.Bound.INCLUSIVE : java.util.TreeMap.Bound.EXCLUSIVE; return this.subMap(default(K), java.util.TreeMap.Bound.NO_BOUND, VAR_K, VAR_JAVA.UTIL.TREEMAP.BOUND); }
public virtual OutputStream METHOD_NAME() { return rawOut; }
public bool? METHOD_NAME(string VAR_STRING) { if (LITERAL_NULL != DictionaryUtil.Get(ResponseDictionary, VAR_STRING)) { return bool.Parse(DictionaryUtil.Get(ResponseDictionary, VAR_STRING)); } return LITERAL_NULL; }
public virtual ATN METHOD_NAME() { string VAR_STRING = SerializedAtn; if (VAR_STRING == LITERAL_NULL) { throw new NotSupportedException(LITERAL_STRING); } lock (bypassAltsAtnCache) { ATN VAR_ATN = bypassAltsAtnCache.Get(VAR_STRING); if (VAR_ATN == LITERAL_NULL) { ATNDeserializationOptions VAR_ATNDESERIALIZATIONOPTIONS = new ATNDeserializationOptions(); VAR_ATNDESERIALIZATIONOPTIONS.GenerateRuleBypassTransitions = true; VAR_ATN = new ATNDeserializer(VAR_ATNDESERIALIZATIONOPTIONS).Deserialize(VAR_STRING.ToCharArray()); bypassAltsAtnCache.Put(VAR_STRING, VAR_ATN); } return VAR_ATN; } }
public GetDownloadUrlRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual int METHOD_NAME() { return crc; }
public bool METHOD_NAME(EscherRecord VAR_ESCHERRECORD) { escherRecords.Add(VAR_ESCHERRECORD); return true; }
public override java.nio.CharBuffer METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual ModifyWorkspaceStateResponse METHOD_NAME(ModifyWorkspaceStateRequest VAR_MODIFYWORKSPACESTATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyWorkspaceStateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyWorkspaceStateResponseUnmarshaller.Instance; return Invoke<ModifyWorkspaceStateResponse>(VAR_MODIFYWORKSPACESTATEREQUEST, VAR_VAR); }
public ICUTransformFilter(TokenStream VAR_TOKENSTREAM, Transliterator VAR_TRANSLITERATOR) : base(input) { this.VAR_TRANSLITERATOR = VAR_TRANSLITERATOR; this.termAtt = AddAttribute<ICharTermAttribute>(); if (VAR_TRANSLITERATOR.Filter == LITERAL_NULL && VAR_TRANSLITERATOR is RuleBasedTransliterator) { UnicodeSet VAR_UNICODESET = VAR_TRANSLITERATOR.GetSourceSet(); if (VAR_UNICODESET != LITERAL_NULL && VAR_UNICODESET.Any()) VAR_TRANSLITERATOR.Filter = VAR_UNICODESET; } }
public virtual StopGameSessionPlacementResponse METHOD_NAME(StopGameSessionPlacementRequest VAR_STOPGAMESESSIONPLACEMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopGameSessionPlacementRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopGameSessionPlacementResponseUnmarshaller.Instance; return Invoke<StopGameSessionPlacementResponse>(VAR_STOPGAMESESSIONPLACEMENTREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME() { return LITERAL_NULL; }
public override Object METHOD_NAME() { RefModeRecord VAR_REFMODERECORD = new RefModeRecord(); VAR_REFMODERECORD.field_1_mode = field_1_mode; return VAR_REFMODERECORD; }
public virtual bool METHOD_NAME(URIish VAR_URIISH) { if (uris.Contains(VAR_URIISH)) { return false; } return uris.AddItem(VAR_URIISH); }
public override FileMode METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public virtual ICollection<RemoteRefUpdate> METHOD_NAME() { return Sharpen.Collections.UnmodifiableCollection(remoteUpdates.Values); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); String VAR_STRING = _wholePart.METHOD_NAME(CultureInfo.InvariantCulture); VAR_STRINGBUILDER.Append(VAR_STRING[LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_STRING.Substring(LITERAL_INT)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(GetFractionalDigits()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetDecimalExponent()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateCollectionResponse METHOD_NAME(CreateCollectionRequest VAR_CREATECOLLECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCollectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCollectionResponseUnmarshaller.Instance; return Invoke<CreateCollectionResponse>(VAR_CREATECOLLECTIONREQUEST, VAR_VAR); }
public virtual ChangeMessageVisibilityBatchResponse METHOD_NAME(ChangeMessageVisibilityBatchRequest VAR_CHANGEMESSAGEVISIBILITYBATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ChangeMessageVisibilityBatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ChangeMessageVisibilityBatchResponseUnmarshaller.Instance; return Invoke<ChangeMessageVisibilityBatchResponse>(VAR_CHANGEMESSAGEVISIBILITYBATCHREQUEST, VAR_VAR); }
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_INT[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); int[] VAR_INT[] = new int[VAR_INT]; System.Array.Copy(VAR_INT[], VAR_INT, VAR_INT[], LITERAL_INT, VAR_INT); return VAR_INT[]; }
public static void METHOD_NAME(SshSessionFactory VAR_SSHSESSIONFACTORY) { if (VAR_SSHSESSIONFACTORY != LITERAL_NULL) { INSTANCE = VAR_SSHSESSIONFACTORY; } else { INSTANCE = new DefaultSshSessionFactory(); } }
public GetRepoSyncTaskListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public RunInstancesRequest(string VAR_STRING, int VAR_INT, int VAR_INT) { _imageId = VAR_STRING; _minCount = VAR_INT; _maxCount = VAR_INT; }
public virtual DeleteCodeRepositoryResponse METHOD_NAME(DeleteCodeRepositoryRequest VAR_DELETECODEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCodeRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DeleteCodeRepositoryResponse>(VAR_DELETECODEREPOSITORYREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, int VAR_INT, long VAR_LONG) { Debug.Assert(VAR_INT >= LITERAL_INT); Debug.Assert(VAR_INT <= VAR_INT); Debug.Assert(PackedInt32s.BitsRequired(VAR_LONG) <= m_bitsPerValue); int VAR_INT = LITERAL_INT / m_bitsPerValue; if (VAR_INT - VAR_INT <= VAR_INT << LITERAL_INT) { base.METHOD_NAME(VAR_INT, VAR_INT, VAR_LONG); return; } int VAR_INT = VAR_INT % VAR_INT; if (VAR_INT != LITERAL_INT) { for (int i = VAR_INT; i < VAR_INT; ++i) { Set(VAR_INT++, VAR_LONG); } Debug.Assert(VAR_INT % VAR_INT == LITERAL_INT); } int VAR_INT = VAR_INT / VAR_INT; int VAR_INT = VAR_INT / VAR_INT; Debug.Assert(VAR_INT * VAR_INT == VAR_INT); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; ++i) { VAR_LONG = VAR_LONG | (VAR_LONG << (i * m_bitsPerValue)); } Arrays.METHOD_NAME(blocks, VAR_INT, VAR_INT, VAR_LONG); for (int i = VAR_INT * VAR_INT; i < VAR_INT; ++i) { Set(i, VAR_LONG); } }
public override void METHOD_NAME() { str = LITERAL_NULL; }
public virtual ListDomainNamesResponse METHOD_NAME() { return METHOD_NAME(new ListDomainNamesRequest()); }
public AbortMultipartUploadRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _uploadId = VAR_STRING; }
public virtual RevCommit METHOD_NAME() { return newHead; }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual UpdateContainerInstancesStateResponse METHOD_NAME(UpdateContainerInstancesStateRequest VAR_UPDATECONTAINERINSTANCESSTATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateContainerInstancesStateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateContainerInstancesStateResponseUnmarshaller.Instance; return Invoke<UpdateContainerInstancesStateResponse>(VAR_UPDATECONTAINERINSTANCESSTATEREQUEST, VAR_VAR); }
public virtual GetExternalModelsResponse METHOD_NAME(GetExternalModelsRequest VAR_GETEXTERNALMODELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExternalModelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExternalModelsResponseUnmarshaller.Instance; return Invoke<GetExternalModelsResponse>(VAR_GETEXTERNALMODELSREQUEST, VAR_VAR); }
public virtual GetFaceDetectionResponse METHOD_NAME(GetFaceDetectionRequest VAR_GETFACEDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFaceDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFaceDetectionResponseUnmarshaller.Instance; return Invoke<GetFaceDetectionResponse>(VAR_GETFACEDETECTIONREQUEST, VAR_VAR); }
public override void METHOD_NAME() { lock (outerInstance) { if (!outerInstance.m_refCounts.ContainsKey(m_cp.Generation)) { m_cp.METHOD_NAME(); } } }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_INT[][VAR_INT++] = (int)(((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT); } } }
public virtual java.util.Iterator<E> METHOD_NAME() { return new java.util.LinkedList<E>.ReverseLinkIterator<E>(this, this); }
public CredentialsBackupCompatibilityAdaptor(AlibabaCloudCredentialsProvider VAR_ALIBABACLOUDCREDENTIALSPROVIDER) { this.VAR_ALIBABACLOUDCREDENTIALSPROVIDER = VAR_ALIBABACLOUDCREDENTIALSPROVIDER; }
public virtual DescribeDBClusterSnapshotsResponse METHOD_NAME(DescribeDBClusterSnapshotsRequest VAR_DESCRIBEDBCLUSTERSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBClusterSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBClusterSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBClusterSnapshotsResponse>(VAR_DESCRIBEDBCLUSTERSNAPSHOTSREQUEST, VAR_VAR); }
public FontRecord METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT; if (VAR_INT > LITERAL_INT) { VAR_INT -= LITERAL_INT; } if (VAR_INT > (numfonts - LITERAL_INT)) { throw new IndexOutOfRangeException(LITERAL_STRING + numfonts + LITERAL_STRING + VAR_INT); } FontRecord VAR_FONTRECORD = (FontRecord)records[(records.Fontpos - (numfonts - LITERAL_INT) + VAR_INT)]; return VAR_FONTRECORD; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); }
public virtual DescribeCustomerGatewaysResponse METHOD_NAME() { return METHOD_NAME(new DescribeCustomerGatewaysRequest()); }
public CreateSubnetRequest(string VAR_STRING, string VAR_STRING) { _vpcId = VAR_STRING; _cidrBlock = VAR_STRING; }
public StempelStemmer(Trie VAR_TRIE) { this.VAR_TRIE = VAR_TRIE; }
public NLPNERTaggerOp(TokenNameFinderModel VAR_TOKENNAMEFINDERMODEL) { this.nameFinder = new NameFinderME(VAR_TOKENNAMEFINDERMODEL); }
public override TreeFilter METHOD_NAME() { return new NGit.Revwalk.FollowFilter(((PathFilter)path.METHOD_NAME())); }
public QueryAddUserInfoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { DirCacheIterator VAR_DIRCACHEITERATOR = VAR_TREEWALK.GetTree<DirCacheIterator>(treeIdx); if (VAR_DIRCACHEITERATOR == LITERAL_NULL) { return true; } DirCacheEntry VAR_DIRCACHEENTRY = VAR_DIRCACHEITERATOR.GetDirCacheEntry(); return VAR_DIRCACHEENTRY == LITERAL_NULL || !VAR_DIRCACHEENTRY.IsSkipWorkTree; }
public CompareResult METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL == LITERAL_NULL) { throw new Exception(LITERAL_STRING); } if (_targetType != VAR_VALUEEVAL.GetType()) { return CompareResult.TypeMismatch; } return CompareSameType(VAR_VALUEEVAL); }
public SegmentReadState(SegmentReadState VAR_SEGMENTREADSTATE, string VAR_STRING) { this.Directory = VAR_SEGMENTREADSTATE.Directory; this.SegmentInfo = VAR_SEGMENTREADSTATE.SegmentInfo; this.FieldInfos = VAR_SEGMENTREADSTATE.FieldInfos; this.Context = VAR_SEGMENTREADSTATE.Context; this.TermsIndexDivisor = VAR_SEGMENTREADSTATE.TermsIndexDivisor; this.SegmentSuffix = VAR_STRING; }
public virtual void METHOD_NAME(object VAR_OBJECT) { METHOD_NAME(Sharpen.StringHelper.GetValueOf(VAR_OBJECT)); }
public virtual DeleteModelResponse METHOD_NAME(DeleteModelRequest VAR_DELETEMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteModelResponseUnmarshaller.Instance; return Invoke<DeleteModelResponse>(VAR_DELETEMODELREQUEST, VAR_VAR); }
public void METHOD_NAME(ISet<string> VAR_ISET<STRING>) { CheckFileNames(VAR_ISET<STRING>); setFiles = VAR_ISET<STRING>; }
public virtual void METHOD_NAME() { reader.METHOD_NAME(); }
public override java.nio.FloatBuffer METHOD_NAME() { return duplicate(); }
public virtual int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT < LITERAL_INT) { return VAR_INT; } else { return mValues[VAR_INT]; } }
public virtual java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public static string METHOD_NAME(byte VAR_BYTE) { return METHOD_NAME((long)VAR_BYTE, LITERAL_INT); }
public String METHOD_NAME(NameXPtg VAR_NAMEXPTG) { return _iBook.METHOD_NAME(VAR_NAMEXPTG.SheetRefIndex, VAR_NAMEXPTG.NameIndex); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_representation).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual PutEmailIdentityMailFromAttributesResponse METHOD_NAME(PutEmailIdentityMailFromAttributesRequest VAR_PUTEMAILIDENTITYMAILFROMATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEmailIdentityMailFromAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEmailIdentityMailFromAttributesResponseUnmarshaller.Instance; return Invoke<PutEmailIdentityMailFromAttributesResponse>(VAR_PUTEMAILIDENTITYMAILFROMATTRIBUTESREQUEST, VAR_VAR); }
public RemoveAlbumPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteAttributesResponse METHOD_NAME(DeleteAttributesRequest VAR_DELETEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAttributesResponseUnmarshaller.Instance; return Invoke<DeleteAttributesResponse>(VAR_DELETEATTRIBUTESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { destination.SetRefLogMessage(string.Empty, false); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GermanLightStemFilter(VAR_TOKENSTREAM); }
public virtual E METHOD_NAME() { return removeLastImpl(); }
public virtual UpdateDomainMetadataResponse METHOD_NAME(UpdateDomainMetadataRequest VAR_UPDATEDOMAINMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainMetadataResponseUnmarshaller.Instance; return Invoke<UpdateDomainMetadataResponse>(VAR_UPDATEDOMAINMETADATAREQUEST, VAR_VAR); }
public short METHOD_NAME() { short VAR_SHORT = LITERAL_INT; while (DrawingGroupExists(VAR_SHORT)) VAR_SHORT++; return VAR_SHORT; }
public override string METHOD_NAME() { return LITERAL_STRING + LITERAL_STRING + value.Utf8ToString() + LITERAL_STRING + count + LITERAL_CHAR; }
public SharedFormulaRecord METHOD_NAME(CellReference VAR_CELLREFERENCE, FormulaRecordAggregate VAR_FORMULARECORDAGGREGATE) { SharedFormulaGroup VAR_SHAREDFORMULAGROUP = FindFormulaGroupForCell(VAR_CELLREFERENCE); if (LITERAL_NULL == VAR_SHAREDFORMULAGROUP) { throw new RuntimeException(LITERAL_STRING); } VAR_SHAREDFORMULAGROUP.Add(VAR_FORMULARECORDAGGREGATE); return VAR_SHAREDFORMULAGROUP.SFR; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_label_index); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_zero); }
public virtual OpenStringBuilder METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, LITERAL_INT, VAR_STRING.Length); }
public static BigInteger METHOD_NAME(int VAR_INT) { if (VAR_INT == LITERAL_INT || VAR_INT < LITERAL_INT) { return BigInteger.One; } if (cache.ContainsKey(VAR_INT)) { return cache[(VAR_INT)]; } BigInteger VAR_BIGINTEGER = BigInteger.ValueOf(VAR_INT).Multiply(METHOD_NAME(VAR_INT - LITERAL_INT)); cache.Add(VAR_INT, VAR_BIGINTEGER); return VAR_BIGINTEGER; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new DelimitedPayloadTokenFilter(VAR_TOKENSTREAM, delimiter, encoder); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual GetAlarmsResponse METHOD_NAME(GetAlarmsRequest VAR_GETALARMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAlarmsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAlarmsResponseUnmarshaller.Instance; return Invoke<GetAlarmsResponse>(VAR_GETALARMSREQUEST, VAR_VAR); }
public virtual DeleteDetectorVersionResponse METHOD_NAME(DeleteDetectorVersionRequest VAR_DELETEDETECTORVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDetectorVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDetectorVersionResponseUnmarshaller.Instance; return Invoke<DeleteDetectorVersionResponse>(VAR_DELETEDETECTORVERSIONREQUEST, VAR_VAR); }
public ExpandedDouble METHOD_NAME() { return new ExpandedDouble(_significand, _binaryExponent); }
public override java.nio.CharBuffer METHOD_NAME() { java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.CharToByteBufferAdapter VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER = new java.nio.CharToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER._mark = _mark; return VAR_JAVA.NIO.CHARTOBYTEBUFFERADAPTER; }
public override int METHOD_NAME() { return this._enclosing._size; }
public ResetInstanceAttributeRequest(string VAR_STRING, InstanceAttributeName VAR_INSTANCEATTRIBUTENAME) { _instanceId = VAR_STRING; _attribute = VAR_INSTANCEATTRIBUTENAME; }
public IList<FooterLine> METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = VAR_BYTE[].Length - LITERAL_INT; while (VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { VAR_INT--; } int VAR_INT = RawParseUtils.CommitMessage(VAR_BYTE[], LITERAL_INT); AList<FooterLine> VAR_ALIST<FOOTERLINE> = new AList<FooterLine>(LITERAL_INT); System.Text.Encoding VAR_SYSTEM.TEXT.ENCODING = Encoding; for (;;) { VAR_INT = RawParseUtils.PrevLF(VAR_BYTE[], VAR_INT); if (VAR_INT <= VAR_INT) { break; } int VAR_INT = VAR_INT + LITERAL_INT; if (VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { break; } int VAR_INT = RawParseUtils.EndOfFooterLineKey(VAR_BYTE[], VAR_INT); if (VAR_INT < LITERAL_INT) { continue; } int VAR_INT = VAR_INT + LITERAL_INT; while (VAR_INT < VAR_BYTE[].Length && VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { VAR_INT++; } int VAR_INT = RawParseUtils.NextLF(VAR_BYTE[], VAR_INT); if (VAR_BYTE[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } VAR_ALIST<FOOTERLINE>.AddItem(new FooterLine(VAR_BYTE[], VAR_SYSTEM.TEXT.ENCODING, VAR_INT, VAR_INT, VAR_INT, VAR_INT)); } Sharpen.Collections.Reverse(VAR_ALIST<FOOTERLINE>); return VAR_ALIST<FOOTERLINE>; }
public SupBookRecord METHOD_NAME() { return _externalBookRecord; }
public Builder() { InitializeInstanceFields(); }
public virtual ApplySecurityGroupsToLoadBalancerResponse METHOD_NAME(ApplySecurityGroupsToLoadBalancerRequest VAR_APPLYSECURITYGROUPSTOLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ApplySecurityGroupsToLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ApplySecurityGroupsToLoadBalancerResponseUnmarshaller.Instance; return Invoke<ApplySecurityGroupsToLoadBalancerResponse>(VAR_APPLYSECURITYGROUPSTOLOADBALANCERREQUEST, VAR_VAR); }
public virtual DeleteDedicatedIpPoolResponse METHOD_NAME(DeleteDedicatedIpPoolRequest VAR_DELETEDEDICATEDIPPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDedicatedIpPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<DeleteDedicatedIpPoolResponse>(VAR_DELETEDEDICATEDIPPOOLREQUEST, VAR_VAR); }
public virtual DescribeStackInstanceResponse METHOD_NAME(DescribeStackInstanceRequest VAR_DESCRIBESTACKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackInstanceResponseUnmarshaller.Instance; return Invoke<DescribeStackInstanceResponse>(VAR_DESCRIBESTACKINSTANCEREQUEST, VAR_VAR); }
public HSSFChildAnchor(EscherChildAnchorRecord VAR_ESCHERCHILDANCHORRECORD) { this._escherChildAnchor = VAR_ESCHERCHILDANCHORRECORD; }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { if (_currentRowIndex == -LITERAL_INT) { _currentRowIndex = VAR_INT; _firstColumnIndex = VAR_INT; _lastColumnIndex = VAR_INT; } else { if (_currentRowIndex == VAR_INT && _lastColumnIndex + LITERAL_INT == VAR_INT) { _lastColumnIndex = VAR_INT; } else { if (_currentRectangleGroup == LITERAL_NULL) { _currentRectangleGroup = new BlankCellRectangleGroup(_currentRowIndex, _firstColumnIndex, _lastColumnIndex); } else { if (!_currentRectangleGroup.AcceptRow(_currentRowIndex, _firstColumnIndex, _lastColumnIndex)) { _rectangleGroups.Add(_currentRectangleGroup); _currentRectangleGroup = new BlankCellRectangleGroup(_currentRowIndex, _firstColumnIndex, _lastColumnIndex); } } _currentRowIndex = VAR_INT; _firstColumnIndex = VAR_INT; _lastColumnIndex = VAR_INT; } } }
public override string METHOD_NAME() { return LITERAL_STRING + Prefix.Utf8ToString(); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public override void METHOD_NAME() { if (value != LITERAL_NULL) { Arrays.Fill(value, (char)LITERAL_INT); value = LITERAL_NULL; } }
public virtual DescribeDirectConnectGatewayAssociationsResponse METHOD_NAME(DescribeDirectConnectGatewayAssociationsRequest VAR_DESCRIBEDIRECTCONNECTGATEWAYASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDirectConnectGatewayAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDirectConnectGatewayAssociationsResponseUnmarshaller.Instance; return Invoke<DescribeDirectConnectGatewayAssociationsResponse>(VAR_DESCRIBEDIRECTCONNECTGATEWAYASSOCIATIONSREQUEST, VAR_VAR); }
public virtual GetRestApiResponse METHOD_NAME(GetRestApiRequest VAR_GETRESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRestApiResponseUnmarshaller.Instance; return Invoke<GetRestApiResponse>(VAR_GETRESTAPIREQUEST, VAR_VAR); }
public virtual CreateLaunchTemplateVersionResponse METHOD_NAME(CreateLaunchTemplateVersionRequest VAR_CREATELAUNCHTEMPLATEVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLaunchTemplateVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLaunchTemplateVersionResponseUnmarshaller.Instance; return Invoke<CreateLaunchTemplateVersionResponse>(VAR_CREATELAUNCHTEMPLATEVERSIONREQUEST, VAR_VAR); }
public virtual SetLoadBalancerPoliciesOfListenerResponse METHOD_NAME(SetLoadBalancerPoliciesOfListenerRequest VAR_SETLOADBALANCERPOLICIESOFLISTENERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetLoadBalancerPoliciesOfListenerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetLoadBalancerPoliciesOfListenerResponseUnmarshaller.Instance; return Invoke<SetLoadBalancerPoliciesOfListenerResponse>(VAR_SETLOADBALANCERPOLICIESOFLISTENERREQUEST, VAR_VAR); }
public SoraniNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual UpdateTerminationProtectionResponse METHOD_NAME(UpdateTerminationProtectionRequest VAR_UPDATETERMINATIONPROTECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTerminationProtectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTerminationProtectionResponseUnmarshaller.Instance; return Invoke<UpdateTerminationProtectionResponse>(VAR_UPDATETERMINATIONPROTECTIONREQUEST, VAR_VAR); }
public void METHOD_NAME(EscherRecord VAR_ESCHERRECORD) { this._childRecords.Add(VAR_ESCHERRECORD); }
public virtual SetIdentityMailFromDomainResponse METHOD_NAME(SetIdentityMailFromDomainRequest VAR_SETIDENTITYMAILFROMDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityMailFromDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityMailFromDomainResponseUnmarshaller.Instance; return Invoke<SetIdentityMailFromDomainResponse>(VAR_SETIDENTITYMAILFROMDOMAINREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT && VAR_INT < _size) { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink; if (VAR_INT < (_size / LITERAL_INT)) { { for (int i = LITERAL_INT; i <= VAR_INT; i++) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } } else { { for (int i = _size; i > VAR_INT; i--) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } } java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>; VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>; _size--; modCount++; return VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data; } throw new System.IndexOutOfRangeException(); }
public virtual UpdateJobResponse METHOD_NAME(UpdateJobRequest VAR_UPDATEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateJobResponseUnmarshaller.Instance; return Invoke<UpdateJobResponse>(VAR_UPDATEJOBREQUEST, VAR_VAR); }
public virtual NGit.Api.AddNoteCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual ListInvitationsResponse METHOD_NAME(ListInvitationsRequest VAR_LISTINVITATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListInvitationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListInvitationsResponseUnmarshaller.Instance; return Invoke<ListInvitationsResponse>(VAR_LISTINVITATIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (!(VAR_OBJECT is ExtRst)) { return false; } ExtRst VAR_EXTRST = (ExtRst)VAR_OBJECT; return (CompareTo(VAR_EXTRST) == LITERAL_INT); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual ListTrialsResponse METHOD_NAME(ListTrialsRequest VAR_LISTTRIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrialsResponseUnmarshaller.Instance; return Invoke<ListTrialsResponse>(VAR_LISTTRIALSREQUEST, VAR_VAR); }
public virtual CreateDocumentClassifierResponse METHOD_NAME(CreateDocumentClassifierRequest VAR_CREATEDOCUMENTCLASSIFIERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDocumentClassifierRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDocumentClassifierResponseUnmarshaller.Instance; return Invoke<CreateDocumentClassifierResponse>(VAR_CREATEDOCUMENTCLASSIFIERREQUEST, VAR_VAR); }
public virtual GetPasswordDataResponse METHOD_NAME(GetPasswordDataRequest VAR_GETPASSWORDDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPasswordDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPasswordDataResponseUnmarshaller.Instance; return Invoke<GetPasswordDataResponse>(VAR_GETPASSWORDDATAREQUEST, VAR_VAR); }
public string METHOD_NAME() { return ToString(Bytes); }
public HSSFPicture(HSSFShape VAR_HSSFSHAPE, HSSFAnchor VAR_HSSFANCHOR) : base(parent, anchor) { base.ShapeType = (OBJECT_TYPE_PICTURE); CommonObjectDataSubRecord VAR_COMMONOBJECTDATASUBRECORD = (CommonObjectDataSubRecord)GetObjRecord().SubRecords[LITERAL_INT]; VAR_COMMONOBJECTDATASUBRECORD.ObjectType = CommonObjectType.Picture; }
public CharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { return new NGit.Util.RawCharSequence(buffer, startPtr + VAR_INT, startPtr + VAR_INT); }
public virtual DeleteAccessPointResponse METHOD_NAME(DeleteAccessPointRequest VAR_DELETEACCESSPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAccessPointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAccessPointResponseUnmarshaller.Instance; return Invoke<DeleteAccessPointResponse>(VAR_DELETEACCESSPOINTREQUEST, VAR_VAR); }
public virtual DescribeSubnetsResponse METHOD_NAME() { return METHOD_NAME(new DescribeSubnetsRequest()); }
public virtual AddTagsToOnPremisesInstancesResponse METHOD_NAME(AddTagsToOnPremisesInstancesRequest VAR_ADDTAGSTOONPREMISESINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddTagsToOnPremisesInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddTagsToOnPremisesInstancesResponseUnmarshaller.Instance; return Invoke<AddTagsToOnPremisesInstancesResponse>(VAR_ADDTAGSTOONPREMISESINSTANCESREQUEST, VAR_VAR); }
public static String METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL is StringValueEval) { StringValueEval VAR_STRINGVALUEEVAL = (StringValueEval)VAR_VALUEEVAL; return VAR_STRINGVALUEEVAL.StringValue; } if (VAR_VALUEEVAL is BlankEval) { return LITERAL_STRING; } }
public virtual CreateVpcLinkResponse METHOD_NAME(CreateVpcLinkRequest VAR_CREATEVPCLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcLinkResponseUnmarshaller.Instance; return Invoke<CreateVpcLinkResponse>(VAR_CREATEVPCLINKREQUEST, VAR_VAR); }
public virtual DescribeTrafficMirrorTargetsResponse METHOD_NAME(DescribeTrafficMirrorTargetsRequest VAR_DESCRIBETRAFFICMIRRORTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTrafficMirrorTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTrafficMirrorTargetsResponseUnmarshaller.Instance; return Invoke<DescribeTrafficMirrorTargetsResponse>(VAR_DESCRIBETRAFFICMIRRORTARGETSREQUEST, VAR_VAR); }
public virtual SetRepositoryPolicyResponse METHOD_NAME(SetRepositoryPolicyRequest VAR_SETREPOSITORYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetRepositoryPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetRepositoryPolicyResponseUnmarshaller.Instance; return Invoke<SetRepositoryPolicyResponse>(VAR_SETREPOSITORYPOLICYREQUEST, VAR_VAR); }
public override String METHOD_NAME() { return LITERAL_STRING; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public ProtectionRev4Record(bool VAR_BOOL) : this(LITERAL_INT) { Protect = VAR_BOOL; }
public virtual UpdateAuditStreamConfigurationResponse METHOD_NAME(UpdateAuditStreamConfigurationRequest VAR_UPDATEAUDITSTREAMCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAuditStreamConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAuditStreamConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateAuditStreamConfigurationResponse>(VAR_UPDATEAUDITSTREAMCONFIGURATIONREQUEST, VAR_VAR); }
public ISheet METHOD_NAME() { ISheet VAR_ISHEET = (sheetName == LITERAL_NULL) ? workbook.CreateSheet() : workbook.CreateSheet(sheetName); IRow VAR_IROW = LITERAL_NULL; ICell VAR_ICELL = LITERAL_NULL; for (int rowIndex = LITERAL_INT; rowIndex < cells.Length; ++rowIndex) { Object[] VAR_OBJECT[] = cells[rowIndex]; VAR_IROW = VAR_ISHEET.CreateRow(rowIndex); for (int cellIndex = LITERAL_INT; cellIndex < VAR_OBJECT[].Length; ++cellIndex) { Object VAR_OBJECT = VAR_OBJECT[][cellIndex]; if (VAR_OBJECT != LITERAL_NULL || shouldCreateEmptyCells) { VAR_ICELL = VAR_IROW.CreateCell(cellIndex); SetCellValue(VAR_ICELL, VAR_OBJECT); } } } return VAR_ISHEET; }
public CharArrayWriter(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } buf = new char[VAR_INT]; @lock = buf; }
public AtomicReference(V VAR_V) { value = VAR_V; }
public static ISignatureComposer METHOD_NAME() { if (LITERAL_NULL == composer) { composer = new RpcSignatureComposer(); } return composer; }
public virtual ListHITsForQualificationTypeResponse METHOD_NAME(ListHITsForQualificationTypeRequest VAR_LISTHITSFORQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHITsForQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHITsForQualificationTypeResponseUnmarshaller.Instance; return Invoke<ListHITsForQualificationTypeResponse>(VAR_LISTHITSFORQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public virtual AddTagsToStreamResponse METHOD_NAME(AddTagsToStreamRequest VAR_ADDTAGSTOSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddTagsToStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddTagsToStreamResponseUnmarshaller.Instance; return Invoke<AddTagsToStreamResponse>(VAR_ADDTAGSTOSTREAMREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); String VAR_STRING = Environment.NewLine; VAR_STRINGBUILDER.Append(LITERAL_CHAR + RecordName + LITERAL_CHAR + VAR_STRING); if (escherRecords.Count == LITERAL_INT) VAR_STRINGBUILDER.Append(LITERAL_STRING + VAR_STRING); foreach (EscherRecord r in escherRecords) { VAR_STRINGBUILDER.Append(r.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING + RecordName + LITERAL_CHAR + VAR_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public WSBoolRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { byte[] VAR_BYTE[] = VAR_RECORDINPUTSTREAM.ReadRemainder(); field_1_wsbool = VAR_BYTE[][LITERAL_INT]; field_2_wsbool = VAR_BYTE[][LITERAL_INT]; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new BrazilianStemFilter(VAR_TOKENSTREAM); }
public virtual NGit.Api.ResetCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public virtual EnableOrganizationAdminAccountResponse METHOD_NAME(EnableOrganizationAdminAccountRequest VAR_ENABLEORGANIZATIONADMINACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableOrganizationAdminAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<EnableOrganizationAdminAccountResponse>(VAR_ENABLEORGANIZATIONADMINACCOUNTREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT) { return _evaluator.GetEvalForCell(VAR_INT, Row, Column); }
public virtual DeleteRecommenderConfigurationResponse METHOD_NAME(DeleteRecommenderConfigurationRequest VAR_DELETERECOMMENDERCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRecommenderConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteRecommenderConfigurationResponse>(VAR_DELETERECOMMENDERCONFIGURATIONREQUEST, VAR_VAR); }
public virtual UpdateIntegrationResponseResponse METHOD_NAME(UpdateIntegrationResponseRequest VAR_UPDATEINTEGRATIONRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateIntegrationResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateIntegrationResponseResponseUnmarshaller.Instance; return Invoke<UpdateIntegrationResponseResponse>(VAR_UPDATEINTEGRATIONRESPONSEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(_codepage)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME(BytesRef VAR_BYTESREF) { return VAR_BYTESREF.ToString(); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Dim); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Arrays.METHOD_NAME(Path)); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (TypeOfValue == typeof(int)) { VAR_STRINGBUILDER.AppendFormat(CultureInfo.InvariantCulture, LITERAL_STRING, Value); } else { VAR_STRINGBUILDER.AppendFormat(CultureInfo.InvariantCulture, LITERAL_STRING, Value); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ChildCount); VAR_STRINGBUILDER.Append(LITERAL_CHAR); foreach (LabelAndValue labelValue in LabelValues) { VAR_STRINGBUILDER.Append(LITERAL_STRING + labelValue + LITERAL_STRING); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual AcceptVpcEndpointConnectionsResponse METHOD_NAME(AcceptVpcEndpointConnectionsRequest VAR_ACCEPTVPCENDPOINTCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptVpcEndpointConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptVpcEndpointConnectionsResponseUnmarshaller.Instance; return Invoke<AcceptVpcEndpointConnectionsResponse>(VAR_ACCEPTVPCENDPOINTCONNECTIONSREQUEST, VAR_VAR); }
public virtual DescribeIdentityProviderConfigurationResponse METHOD_NAME(DescribeIdentityProviderConfigurationRequest VAR_DESCRIBEIDENTITYPROVIDERCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityProviderConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityProviderConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeIdentityProviderConfigurationResponse>(VAR_DESCRIBEIDENTITYPROVIDERCONFIGURATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME() { head = LITERAL_NULL; free.METHOD_NAME(); }
public override string METHOD_NAME() { return GetType().Name + LITERAL_STRING + GetFile().GetPath() + LITERAL_STRING; }
public virtual GetRelationalDatabaseBlueprintsResponse METHOD_NAME(GetRelationalDatabaseBlueprintsRequest VAR_GETRELATIONALDATABASEBLUEPRINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseBlueprintsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseBlueprintsResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseBlueprintsResponse>(VAR_GETRELATIONALDATABASEBLUEPRINTSREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { if (VAR_BYTE[] == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } arrays.Add(VAR_BYTE[]); }
public sealed override java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { checkGetBounds(LITERAL_INT, VAR_BYTE[].Length, VAR_INT, VAR_INT); System.Array.Copy(backingArray, offset + _position, VAR_BYTE[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public virtual DescribeAutoScalingNotificationTypesResponse METHOD_NAME() { return METHOD_NAME(new DescribeAutoScalingNotificationTypesRequest()); }
public int METHOD_NAME(LookupResult VAR_LOOKUPRESULT) { return CHARSEQUENCE_COMPARER.Compare(Key, VAR_LOOKUPRESULT.Key); }
public virtual UpdateVariableResponse METHOD_NAME(UpdateVariableRequest VAR_UPDATEVARIABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVariableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVariableResponseUnmarshaller.Instance; return Invoke<UpdateVariableResponse>(VAR_UPDATEVARIABLEREQUEST, VAR_VAR); }
public TranslateTextRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override E METHOD_NAME(int VAR_INT, E VAR_E) { E VAR_E = a[VAR_INT]; a[VAR_INT] = VAR_E; return VAR_E; }
public static XmlDocument METHOD_NAME(XmlReader VAR_XMLREADER) { XmlDocument VAR_XMLDOCUMENT = new XmlDocument(); try { VAR_XMLDOCUMENT.Load(VAR_XMLREADER); } catch (Exception se) { throw new Exception(LITERAL_STRING + se, se); } return VAR_XMLDOCUMENT; }
public virtual void METHOD_NAME(TokenStream VAR_TOKENSTREAM) { if (!m_type.IsIndexed || !m_type.IsTokenized) { throw new System.ArgumentException(LITERAL_STRING); } if (m_type.NumericType != Documents.NumericType.NONE) { throw new System.ArgumentException(LITERAL_STRING); } this.m_tokenStream = VAR_TOKENSTREAM; }
public ValueEval METHOD_NAME(Area3DPtg VAR_AREA3DPTG) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = CreateExternSheetRefEvaluator(VAR_AREA3DPTG.ExternSheetIndex); return new LazyAreaEval(VAR_AREA3DPTG.FirstRow, VAR_AREA3DPTG.FirstColumn, VAR_AREA3DPTG.LastRow, VAR_AREA3DPTG.LastColumn, VAR_SHEETRANGEEVALUATOR); }
public MulBlankRecord(int VAR_INT, int VAR_INT, short[] VAR_SHORT[]) { _row = VAR_INT; _first_col = VAR_INT; _xfs = VAR_SHORT[]; _last_col = VAR_INT + VAR_SHORT[].Length - LITERAL_INT; }
public virtual DescribeEngineDefaultParametersResponse METHOD_NAME(DescribeEngineDefaultParametersRequest VAR_DESCRIBEENGINEDEFAULTPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEngineDefaultParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEngineDefaultParametersResponseUnmarshaller.Instance; return Invoke<DescribeEngineDefaultParametersResponse>(VAR_DESCRIBEENGINEDEFAULTPARAMETERSREQUEST, VAR_VAR); }
public virtual AttachVolumeResponse METHOD_NAME(AttachVolumeRequest VAR_ATTACHVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachVolumeResponseUnmarshaller.Instance; return Invoke<AttachVolumeResponse>(VAR_ATTACHVOLUMEREQUEST, VAR_VAR); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (FieldIndexData entry in fields.Values) { VAR_LONG += entry.METHOD_NAME(); } return VAR_LONG; }
public virtual DeleteWorkerBlockResponse METHOD_NAME(DeleteWorkerBlockRequest VAR_DELETEWORKERBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteWorkerBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteWorkerBlockResponseUnmarshaller.Instance; return Invoke<DeleteWorkerBlockResponse>(VAR_DELETEWORKERBLOCKREQUEST, VAR_VAR); }
public static void METHOD_NAME(TransportProtocol VAR_TRANSPORTPROTOCOL) { foreach (JavaWeakReference<TransportProtocol> @ref in protocols) { TransportProtocol VAR_TRANSPORTPROTOCOL = @ref.Get(); if (VAR_TRANSPORTPROTOCOL == LITERAL_NULL || VAR_TRANSPORTPROTOCOL == VAR_TRANSPORTPROTOCOL) { protocols.Remove(@ref); } } }
public virtual CreateNetworkInterfacePermissionResponse METHOD_NAME(CreateNetworkInterfacePermissionRequest VAR_CREATENETWORKINTERFACEPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkInterfacePermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkInterfacePermissionResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfacePermissionResponse>(VAR_CREATENETWORKINTERFACEPERMISSIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(DocData VAR_DOCDATA, string VAR_STRING) { string[] VAR_STRING[] = new Regex(LITERAL_STRING).Split(VAR_STRING, LITERAL_INT); VAR_DOCDATA.ID = Convert.ToInt32(VAR_STRING[][LITERAL_INT], CultureInfo.InvariantCulture); VAR_DOCDATA.Name = VAR_STRING[][LITERAL_INT]; string VAR_STRING = VAR_STRING[][LITERAL_INT]; string VAR_STRING = VAR_STRING[][LITERAL_INT]; VAR_DOCDATA.Body = LITERAL_STRING + VAR_STRING + LITERAL_STRING + VAR_STRING + LITERAL_STRING; }
public DeleteArchiveRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _archiveId = VAR_STRING; }
public static void METHOD_NAME(Repository VAR_REPOSITORY) { if (VAR_REPOSITORY.Directory != LITERAL_NULL) { RepositoryCache.FileKey VAR_REPOSITORYCACHE.FILEKEY = RepositoryCache.FileKey.Exact(VAR_REPOSITORY.Directory, VAR_REPOSITORY.FileSystem); cache.UnregisterRepository(VAR_REPOSITORYCACHE.FILEKEY); } }
public OrQueryNode(IList<IQueryNode> VAR_ILIST<IQUERYNODE>) : base(clauses) { if ((VAR_ILIST<IQUERYNODE> == LITERAL_NULL) || (VAR_ILIST<IQUERYNODE>.Count == LITERAL_INT)) { throw new ArgumentException(LITERAL_STRING); } }
public virtual CreateReplicationGroupResponse METHOD_NAME(CreateReplicationGroupRequest VAR_CREATEREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateReplicationGroupResponseUnmarshaller.Instance; return Invoke<CreateReplicationGroupResponse>(VAR_CREATEREPLICATIONGROUPREQUEST, VAR_VAR); }
public virtual ListCollectionsResponse METHOD_NAME(ListCollectionsRequest VAR_LISTCOLLECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCollectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCollectionsResponseUnmarshaller.Instance; return Invoke<ListCollectionsResponse>(VAR_LISTCOLLECTIONSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID, AnyObjectId VAR_ANYOBJECTID) { parentIds = new ObjectId[] { VAR_ANYOBJECTID.Copy(), VAR_ANYOBJECTID.Copy() }; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new TokenOffsetPayloadTokenFilter(VAR_TOKENSTREAM); }
public virtual CreateDataSourceResponse METHOD_NAME(CreateDataSourceRequest VAR_CREATEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDataSourceResponseUnmarshaller.Instance; return Invoke<CreateDataSourceResponse>(VAR_CREATEDATASOURCEREQUEST, VAR_VAR); }
public virtual NGit.Api.DeleteBranchCommand METHOD_NAME(params string[] VAR_STRING[]) { CheckCallable(); this.branchNames.Clear(); foreach (string branch in VAR_STRING[]) { this.branchNames.AddItem(branch); } return this; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { _spgrRecord.RectX1 = (VAR_INT); _spgrRecord.RectX2 = (VAR_INT); _spgrRecord.RectY1 = (VAR_INT); _spgrRecord.RectY2 = (VAR_INT); }
public virtual DescribeNotificationConfigurationsResponse METHOD_NAME() { return METHOD_NAME(new DescribeNotificationConfigurationsRequest()); }
public virtual GetStatusResponse METHOD_NAME(GetStatusRequest VAR_GETSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStatusResponseUnmarshaller.Instance; return Invoke<GetStatusResponse>(VAR_GETSTATUSREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public ExternalSheet METHOD_NAME(int VAR_INT) { String[] VAR_STRING[] = linkTable.GetExternalBookAndSheetName(VAR_INT); if (VAR_STRING[] == LITERAL_NULL) { return LITERAL_NULL; } if (VAR_STRING[].Length == LITERAL_INT) { return new ExternalSheet(VAR_STRING[][LITERAL_INT], VAR_STRING[][LITERAL_INT]); } else { return new ExternalSheetRange(VAR_STRING[][LITERAL_INT], VAR_STRING[][LITERAL_INT], VAR_STRING[][LITERAL_INT]); } }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT < VAR_INT); if (VAR_INT < VAR_INT - LITERAL_INT) { Array.Copy(VAR_CHAR[], VAR_INT + LITERAL_INT, VAR_CHAR[], VAR_INT, VAR_INT - VAR_INT - LITERAL_INT); } return VAR_INT - LITERAL_INT; }
public IConditionalFormatting METHOD_NAME(int VAR_INT) { CFRecordsAggregate VAR_CFRECORDSAGGREGATE = _conditionalFormattingTable.Get(VAR_INT); if (VAR_CFRECORDSAGGREGATE == LITERAL_NULL) { return LITERAL_NULL; } return new HSSFConditionalFormatting((HSSFWorkbook)_sheet.Workbook, VAR_CFRECORDSAGGREGATE); }
public static ICell METHOD_NAME(IRow VAR_IROW, int VAR_INT, String VAR_STRING, HSSFCellStyle VAR_HSSFCELLSTYLE) { ICell VAR_ICELL = GetCell(VAR_IROW, VAR_INT); VAR_ICELL.SetCellValue(new HSSFRichTextString(VAR_STRING)); if (VAR_HSSFCELLSTYLE != LITERAL_NULL) { VAR_ICELL.CellStyle = (VAR_HSSFCELLSTYLE); } return VAR_ICELL; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { int VAR_INT = ((VAR_INT) << LITERAL_INT) | ((VAR_INT) << LITERAL_INT) | VAR_INT; SetPropertyValue(new EscherRGBProperty(EscherProperties.FILL__FILLCOLOR, VAR_INT)); }
public virtual IPolicyOperations Policy { get; private set; }
public override void METHOD_NAME(int VAR_INT) { try { BeginWrite(); dst.METHOD_NAME(VAR_INT); } catch (ThreadInterruptedException) { throw WriteTimedOut(); } finally { EndWrite(); } }
public virtual void METHOD_NAME(string VAR_STRING, ParserExtension VAR_PARSEREXTENSION) { this.extensions[VAR_STRING] = VAR_PARSEREXTENSION; }
public virtual SignOutUserResponse METHOD_NAME(SignOutUserRequest VAR_SIGNOUTUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SignOutUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SignOutUserResponseUnmarshaller.Instance; return Invoke<SignOutUserResponse>(VAR_SIGNOUTUSERREQUEST, VAR_VAR); }
public virtual PutImageTagMutabilityResponse METHOD_NAME(PutImageTagMutabilityRequest VAR_PUTIMAGETAGMUTABILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutImageTagMutabilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutImageTagMutabilityResponseUnmarshaller.Instance; return Invoke<PutImageTagMutabilityResponse>(VAR_PUTIMAGETAGMUTABILITYREQUEST, VAR_VAR); }
public virtual CreateIAMPolicyAssignmentResponse METHOD_NAME(CreateIAMPolicyAssignmentRequest VAR_CREATEIAMPOLICYASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIAMPolicyAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIAMPolicyAssignmentResponseUnmarshaller.Instance; return Invoke<CreateIAMPolicyAssignmentResponse>(VAR_CREATEIAMPOLICYASSIGNMENTREQUEST, VAR_VAR); }
public virtual GetRoomResponse METHOD_NAME(GetRoomRequest VAR_GETROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRoomResponseUnmarshaller.Instance; return Invoke<GetRoomResponse>(VAR_GETROOMREQUEST, VAR_VAR); }
public virtual DescribeLaunchConfigurationsResponse METHOD_NAME() { return METHOD_NAME(new DescribeLaunchConfigurationsRequest()); }
public virtual UpdateTaskSetResponse METHOD_NAME(UpdateTaskSetRequest VAR_UPDATETASKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTaskSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTaskSetResponseUnmarshaller.Instance; return Invoke<UpdateTaskSetResponse>(VAR_UPDATETASKSETREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) return true; if (!(VAR_OBJECT is TermData)) return false; var VAR_VAR = (TermData)VAR_OBJECT; return StatsEqual(this, VAR_VAR) && Int64sEqual(this, VAR_VAR) && BytesEqual(this, VAR_VAR); }
public virtual int METHOD_NAME() { return sequenceIndex; }
public virtual DeleteAutoScalingGroupResponse METHOD_NAME(DeleteAutoScalingGroupRequest VAR_DELETEAUTOSCALINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAutoScalingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAutoScalingGroupResponseUnmarshaller.Instance; return Invoke<DeleteAutoScalingGroupResponse>(VAR_DELETEAUTOSCALINGGROUPREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (idx >= size) { offset = -LITERAL_INT; return doc = DocIdSetIterator.NO_MORE_DOCS; } doc = (int)docs.Get(idx); ++idx; while (idx < size && docs.Get(idx) == doc) { ++idx; } long VAR_LONG = idx - LITERAL_INT; if (!docsWithField.Get((int)VAR_LONG)) { offset = -LITERAL_INT; } else { offset = (int)offsets.Get(VAR_LONG); length = (int)lengths.Get(VAR_LONG); } return doc; }
public override ICollection<ChildScorer> METHOD_NAME() { return new List<ChildScorer> { new ChildScorer(_parentScorer, LITERAL_STRING) }; }
public override void METHOD_NAME() { if (!IsMainThread()) { throw new InvalidOperationException(); } pm.METHOD_NAME(); }
public virtual UpdateConfigurationSetEventDestinationResponse METHOD_NAME(UpdateConfigurationSetEventDestinationRequest VAR_UPDATECONFIGURATIONSETEVENTDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationSetEventDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationSetEventDestinationResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetEventDestinationResponse>(VAR_UPDATECONFIGURATIONSETEVENTDESTINATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Backup); }
public virtual DescribeBundleTasksResponse METHOD_NAME(DescribeBundleTasksRequest VAR_DESCRIBEBUNDLETASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBundleTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBundleTasksResponseUnmarshaller.Instance; return Invoke<DescribeBundleTasksResponse>(VAR_DESCRIBEBUNDLETASKSREQUEST, VAR_VAR); }
public virtual Explanation METHOD_NAME(CollectionStatistics VAR_COLLECTIONSTATISTICS, TermStatistics VAR_TERMSTATISTICS) { long VAR_LONG = VAR_TERMSTATISTICS.DocFreq; long VAR_LONG = VAR_COLLECTIONSTATISTICS.MaxDoc; float VAR_FLOAT = Idf(VAR_LONG, VAR_LONG); return new Explanation(VAR_FLOAT, LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_LONG + LITERAL_STRING); }
public virtual DescribeFleetEventsResponse METHOD_NAME(DescribeFleetEventsRequest VAR_DESCRIBEFLEETEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetEventsResponseUnmarshaller.Instance; return Invoke<DescribeFleetEventsResponse>(VAR_DESCRIBEFLEETEVENTSREQUEST, VAR_VAR); }
public BasicCredentials(string VAR_STRING, string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } if (VAR_STRING == LITERAL_NULL) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; }
public virtual string METHOD_NAME() { return oldPath; }
public int METHOD_NAME() { return iterator.METHOD_NAME() - start; }
public virtual DeleteClusterSnapshotResponse METHOD_NAME(DeleteClusterSnapshotRequest VAR_DELETECLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteClusterSnapshotResponse>(VAR_DELETECLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { if (colForValByRound.Count == LITERAL_INT) { return LITERAL_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); foreach (string name in colForValByRound.Keys) { string VAR_STRING = colForValByRound[name]; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING); } return VAR_STRINGBUILDER.ToString(); }
public virtual DeprecateActivityTypeResponse METHOD_NAME(DeprecateActivityTypeRequest VAR_DEPRECATEACTIVITYTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeprecateActivityTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeprecateActivityTypeResponseUnmarshaller.Instance; return Invoke<DeprecateActivityTypeResponse>(VAR_DEPRECATEACTIVITYTYPEREQUEST, VAR_VAR); }
public PartETag(int VAR_INT, string VAR_STRING) { this.VAR_INT = VAR_INT; this.VAR_STRING = VAR_STRING; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual ListAccessControlRulesResponse METHOD_NAME(ListAccessControlRulesRequest VAR_LISTACCESSCONTROLRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAccessControlRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAccessControlRulesResponseUnmarshaller.Instance; return Invoke<ListAccessControlRulesResponse>(VAR_LISTACCESSCONTROLRULESREQUEST, VAR_VAR); }
public sealed override java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, VAR_CHAR[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public virtual DescribeDBClusterBacktracksResponse METHOD_NAME(DescribeDBClusterBacktracksRequest VAR_DESCRIBEDBCLUSTERBACKTRACKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBClusterBacktracksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBClusterBacktracksResponseUnmarshaller.Instance; return Invoke<DescribeDBClusterBacktracksResponse>(VAR_DESCRIBEDBCLUSTERBACKTRACKSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(ATNConfig VAR_ATNCONFIG) { if (this == VAR_ATNCONFIG) { return true; } else if (VAR_ATNCONFIG == LITERAL_NULL) { return false; } return this.state.stateNumber == VAR_ATNCONFIG.state.stateNumber && this.alt == VAR_ATNCONFIG.alt && (this.context == VAR_ATNCONFIG.context || (this.context != LITERAL_NULL && this.context.METHOD_NAME(VAR_ATNCONFIG.context))) && this.semanticContext.METHOD_NAME(VAR_ATNCONFIG.semanticContext) && this.IsPrecedenceFilterSuppressed == VAR_ATNCONFIG.IsPrecedenceFilterSuppressed; }
public virtual AbbreviatedObjectId METHOD_NAME(DiffEntry.Side VAR_DIFFENTRY.SIDE) { return VAR_DIFFENTRY.SIDE == DiffEntry.Side.OLD ? GetOldId() : GetNewId(); }
public CatLabRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rt = VAR_RECORDINPUTSTREAM.ReadShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadShort(); wOffset = VAR_RECORDINPUTSTREAM.ReadShort(); at = VAR_RECORDINPUTSTREAM.ReadShort(); grbit = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_RECORDINPUTSTREAM.Available() == LITERAL_INT) { unused = LITERAL_NULL; } else { unused = VAR_RECORDINPUTSTREAM.ReadShort(); } }
public virtual string METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT >= LITERAL_INT && VAR_INT <= VAR_INT && VAR_INT <= count) { if (VAR_INT == VAR_INT) { return string.Empty; } return new string (value, VAR_INT, VAR_INT - VAR_INT); } throw startEndAndLength(VAR_INT, VAR_INT); }
public int METHOD_NAME(int VAR_INT) { if (VAR_INT >= _limit) { throw new IndexOutOfRangeException(); } int VAR_INT = _array[VAR_INT]; Array.Copy(_array, VAR_INT + LITERAL_INT, _array, VAR_INT, _limit - VAR_INT); _limit--; return VAR_INT; }
public K METHOD_NAME() { return base.get(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteInt(unused1); VAR_ILITTLEENDIANOUTPUT.WriteInt(unused2); }
public virtual void METHOD_NAME(int VAR_INT) { deltaCacheLimit = VAR_INT; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public Dictionary<string, string> METHOD_NAME(string VAR_STRING, string VAR_STRING) { return METHOD_NAME(VAR_STRING.GetEnumerator(), VAR_STRING); }
public virtual DeleteMessageResponse METHOD_NAME(DeleteMessageRequest VAR_DELETEMESSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMessageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMessageResponseUnmarshaller.Instance; return Invoke<DeleteMessageResponse>(VAR_DELETEMESSAGEREQUEST, VAR_VAR); }
public SearchFind(bool VAR_BOOL) { _isCaseSensitive = VAR_BOOL; }
public void METHOD_NAME(string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentNullException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; SetCredentialUrl(); }
public virtual AllocatePublicVirtualInterfaceResponse METHOD_NAME(AllocatePublicVirtualInterfaceRequest VAR_ALLOCATEPUBLICVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocatePublicVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocatePublicVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<AllocatePublicVirtualInterfaceResponse>(VAR_ALLOCATEPUBLICVIRTUALINTERFACEREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public DeleteLoadBalancerRequest(string VAR_STRING) { _loadBalancerName = VAR_STRING; }
public virtual PutDeliverabilityDashboardOptionResponse METHOD_NAME(PutDeliverabilityDashboardOptionRequest VAR_PUTDELIVERABILITYDASHBOARDOPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutDeliverabilityDashboardOptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutDeliverabilityDashboardOptionResponseUnmarshaller.Instance; return Invoke<PutDeliverabilityDashboardOptionResponse>(VAR_PUTDELIVERABILITYDASHBOARDOPTIONREQUEST, VAR_VAR); }
public XPathRuleElement(string VAR_STRING, int VAR_INT) : base(ruleName) { this.VAR_INT = VAR_INT; }
public virtual NGit.Api.PullCommand METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; return this; }
public static RevFilter METHOD_NAME(long VAR_LONG) { return new CommitTimeRevFilterAfter(VAR_LONG); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(this.GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(field_2_subex_len); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DeleteRoomResponse METHOD_NAME(DeleteRoomRequest VAR_DELETEROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRoomResponseUnmarshaller.Instance; return Invoke<DeleteRoomResponse>(VAR_DELETEROOMREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ScandinavianNormalizationFilter(VAR_TOKENSTREAM); }
public virtual ValidateTemplateResponse METHOD_NAME(ValidateTemplateRequest VAR_VALIDATETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ValidateTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ValidateTemplateResponseUnmarshaller.Instance; return Invoke<ValidateTemplateResponse>(VAR_VALIDATETEMPLATEREQUEST, VAR_VAR); }
public virtual ListBranchCommand METHOD_NAME() { return new ListBranchCommand(repo); }
public override string METHOD_NAME() { return GetType().Name + LITERAL_STRING + EntryPathString + LITERAL_STRING; }
public NGit.Diff.Edit METHOD_NAME(NGit.Diff.Edit VAR_NGIT.DIFF.EDIT) { return new NGit.Diff.Edit(beginA, VAR_NGIT.DIFF.EDIT.beginA, beginB, VAR_NGIT.DIFF.EDIT.beginB); }
public override string METHOD_NAME() { if (Symbol != LITERAL_NULL) { if (Symbol.Type == TokenConstants.EOF) { return LITERAL_STRING; } return Symbol.Text; } else { return LITERAL_STRING; } }
public virtual DeleteDeploymentStrategyResponse METHOD_NAME(DeleteDeploymentStrategyRequest VAR_DELETEDEPLOYMENTSTRATEGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeploymentStrategyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeploymentStrategyResponseUnmarshaller.Instance; return Invoke<DeleteDeploymentStrategyResponse>(VAR_DELETEDEPLOYMENTSTRATEGYREQUEST, VAR_VAR); }
public virtual GetModelResponse METHOD_NAME(GetModelRequest VAR_GETMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetModelResponseUnmarshaller.Instance; return Invoke<GetModelResponse>(VAR_GETMODELREQUEST, VAR_VAR); }
public virtual DescribeUserResponse METHOD_NAME(DescribeUserRequest VAR_DESCRIBEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUserResponseUnmarshaller.Instance; return Invoke<DescribeUserResponse>(VAR_DESCRIBEUSERREQUEST, VAR_VAR); }
public virtual ListSnapshotBlocksResponse METHOD_NAME(ListSnapshotBlocksRequest VAR_LISTSNAPSHOTBLOCKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSnapshotBlocksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSnapshotBlocksResponseUnmarshaller.Instance; return Invoke<ListSnapshotBlocksResponse>(VAR_LISTSNAPSHOTBLOCKSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { checkIndex(VAR_INT, libcore.io.SizeOf.SHORT); libcore.io.Memory.pokeShort(backingArray, offset + VAR_INT, VAR_SHORT, _order); return this; }
public virtual ResetCommand METHOD_NAME() { return new ResetCommand(repo); }
public virtual CreateClusterSnapshotResponse METHOD_NAME(CreateClusterSnapshotRequest VAR_CREATECLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterSnapshotResponseUnmarshaller.Instance; return Invoke<CreateClusterSnapshotResponse>(VAR_CREATECLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public void METHOD_NAME() { specialCachedValue = SpecialCachedValue.CreateCachedEmptyValue(); }
public virtual DeleteIdentityPolicyResponse METHOD_NAME(DeleteIdentityPolicyRequest VAR_DELETEIDENTITYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIdentityPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIdentityPolicyResponseUnmarshaller.Instance; return Invoke<DeleteIdentityPolicyResponse>(VAR_DELETEIDENTITYPOLICYREQUEST, VAR_VAR); }
public int METHOD_NAME() { if (!initDone) { initDone = true; } else { Debug.Assert(count > LITERAL_INT, Thread.CurrentThread.Name + LITERAL_STRING + fileName + LITERAL_STRING); } return ++count; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT); }
public override Object METHOD_NAME() { LeftMarginRecord VAR_LEFTMARGINRECORD = new LeftMarginRecord(); VAR_LEFTMARGINRECORD.field_1_margin = this.field_1_margin; return VAR_LEFTMARGINRECORD; }
public FailedPredicateException(Parser VAR_PARSER, string VAR_STRING, string VAR_STRING) : base(FormatMessage(predicate, message), recognizer, ((ITokenStream)recognizer.InputStream), recognizer.RuleContext) { ATNState VAR_ATNSTATE = VAR_PARSER.Interpreter.atn.states[VAR_PARSER.State]; AbstractPredicateTransition VAR_ABSTRACTPREDICATETRANSITION = (AbstractPredicateTransition)VAR_ATNSTATE.Transition(LITERAL_INT); if (VAR_ABSTRACTPREDICATETRANSITION is PredicateTransition) { this.ruleIndex = ((PredicateTransition)VAR_ABSTRACTPREDICATETRANSITION).ruleIndex; this.predicateIndex = ((PredicateTransition)VAR_ABSTRACTPREDICATETRANSITION).predIndex; } else { this.ruleIndex = LITERAL_INT; this.predicateIndex = LITERAL_INT; } this.VAR_STRING = VAR_STRING; this.OffendingToken = VAR_PARSER.CurrentToken; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; i++) { switch (VAR_CHAR[][i]) { case ALEF_MADDA: case ALEF_HAMZA_ABOVE: case ALEF_HAMZA_BELOW: VAR_CHAR[][i] = ALEF; break; case DOTLESS_YEH: VAR_CHAR[][i] = YEH; break; case TEH_MARBUTA: VAR_CHAR[][i] = HEH; break; case TATWEEL: case KASRATAN: case DAMMATAN: case FATHATAN: case FATHA: case DAMMA: case KASRA: case SHADDA: case SUKUN: VAR_INT = StemmerUtil.Delete(VAR_CHAR[], i, VAR_INT); i--; break; default: break; } } return VAR_INT; }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID, int VAR_INT) { @object = VAR_ANYOBJECTID.Copy(); type = VAR_INT; }
public ValueEval METHOD_NAME(int VAR_INT) { if (VAR_INT != LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } return _value; }
public AND(SemanticContext VAR_SEMANTICCONTEXT, SemanticContext VAR_SEMANTICCONTEXT) { HashSet<SemanticContext> VAR_HASHSET<SEMANTICCONTEXT> = new HashSet<SemanticContext>(); if (VAR_SEMANTICCONTEXT is SemanticContext.AND) { VAR_HASHSET<SEMANTICCONTEXT>.UnionWith(((AND)VAR_SEMANTICCONTEXT).opnds); } else { VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT); } if (VAR_SEMANTICCONTEXT is SemanticContext.AND) { VAR_HASHSET<SEMANTICCONTEXT>.UnionWith(((AND)VAR_SEMANTICCONTEXT).opnds); } else { VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT); } IList<SemanticContext.PrecedencePredicate> VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE> = FilterPrecedencePredicates(VAR_HASHSET<SEMANTICCONTEXT>); if (VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE>.Count > LITERAL_INT) { SemanticContext.PrecedencePredicate VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE = VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE>.Min(); VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE); } opnds = VAR_HASHSET<SEMANTICCONTEXT>.ToArray(); }
public virtual GetCampaignVersionResponse METHOD_NAME(GetCampaignVersionRequest VAR_GETCAMPAIGNVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignVersionResponseUnmarshaller.Instance; return Invoke<GetCampaignVersionResponse>(VAR_GETCAMPAIGNVERSIONREQUEST, VAR_VAR); }
public SeriesTextRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_id = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); is16bit = (VAR_RECORDINPUTSTREAM.ReadUByte() & LITERAL_INT) != LITERAL_INT; if (is16bit) { field_4_text = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } else { field_4_text = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); } }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual DeleteCacheSubnetGroupResponse METHOD_NAME(DeleteCacheSubnetGroupRequest VAR_DELETECACHESUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCacheSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteCacheSubnetGroupResponse>(VAR_DELETECACHESUBNETGROUPREQUEST, VAR_VAR); }
public override object METHOD_NAME(int VAR_INT) { return ((android.widget.@internal.ScrollingTabContainerView.TabView)this._enclosing.mTabLayout.getChildAt(VAR_INT)).getTab(); }
public int METHOD_NAME(String VAR_STRING) { maxformatid = maxformatid >= (short)LITERAL_INT ? (short)(maxformatid + LITERAL_INT) : (short)LITERAL_INT; FormatRecord VAR_FORMATRECORD = new FormatRecord(maxformatid, VAR_STRING); int VAR_INT = LITERAL_INT; while (VAR_INT < records.Count && records[VAR_INT].Sid != FormatRecord.sid) VAR_INT++; VAR_INT += formats.Count; formats.Add(VAR_FORMATRECORD); records.Add(VAR_INT, VAR_FORMATRECORD); return maxformatid; }
public virtual ListDeploymentStrategiesResponse METHOD_NAME(ListDeploymentStrategiesRequest VAR_LISTDEPLOYMENTSTRATEGIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentStrategiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentStrategiesResponseUnmarshaller.Instance; return Invoke<ListDeploymentStrategiesResponse>(VAR_LISTDEPLOYMENTSTRATEGIESREQUEST, VAR_VAR); }
public CreateLoginProfileRequest(string VAR_STRING, string VAR_STRING) { _userName = VAR_STRING; _password = VAR_STRING; }
public string METHOD_NAME() { var VAR_VAR = new HttpRequest(credentialUrl); VAR_VAR.Method = MethodType.GET; VAR_VAR.SetConnectTimeoutInMilliSeconds(connectionTimeoutInMilliseconds); HttpResponse VAR_HTTPRESPONSE; try { VAR_HTTPRESPONSE = GetResponse(VAR_VAR); } catch (WebException e) { throw new ClientException(LITERAL_STRING + e); } if (VAR_HTTPRESPONSE.Status != LITERAL_INT) { throw new ClientException(ECS_METADAT_FETCH_ERROR_MSG + LITERAL_STRING + VAR_HTTPRESPONSE.Status); } return Encoding.UTF8.GetString(VAR_HTTPRESPONSE.Content); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(JGitText.Get().abbreviationLengthMustBeNonNegative); } abbreviationLength = VAR_INT; }
public virtual SearchFacesByImageResponse METHOD_NAME(SearchFacesByImageRequest VAR_SEARCHFACESBYIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchFacesByImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchFacesByImageResponseUnmarshaller.Instance; return Invoke<SearchFacesByImageResponse>(VAR_SEARCHFACESBYIMAGEREQUEST, VAR_VAR); }
public virtual ListMonitoringSchedulesResponse METHOD_NAME(ListMonitoringSchedulesRequest VAR_LISTMONITORINGSCHEDULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMonitoringSchedulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMonitoringSchedulesResponseUnmarshaller.Instance; return Invoke<ListMonitoringSchedulesResponse>(VAR_LISTMONITORINGSCHEDULESREQUEST, VAR_VAR); }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT + VAR_DOUBLE[].Length); }
public virtual E METHOD_NAME() { if (index < to) { return (E)snapshot[index++]; } else { throw new java.util.NoSuchElementException(); } }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); System.Text.RegularExpressions.Match VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH = Imaginary.COMPLEX_NUMBER_PATTERN.Match(VAR_STRING); bool VAR_BOOL = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Success && !string.IsNullOrEmpty(VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[LITERAL_INT].Value); String VAR_STRING = LITERAL_STRING; if (VAR_BOOL == true) { String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[(LITERAL_INT)].Value; bool VAR_BOOL = VAR_STRING.Length != LITERAL_INT; if (VAR_STRING.Length == LITERAL_INT) { return new StringEval(Convert.ToString(LITERAL_INT)); } if (VAR_BOOL) { String VAR_STRING = LITERAL_STRING; String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[(Imaginary.GROUP1_REAL_SIGN)].Value; if (VAR_STRING.Length != LITERAL_INT && !(VAR_STRING.Equals(LITERAL_STRING))) { VAR_STRING = VAR_STRING; } String VAR_STRING = VAR_SYSTEM.TEXT.REGULAREXPRESSIONS.MATCH.Groups[(Imaginary.GROUP2_IMAGINARY_INTEGER_OR_DOUBLE)].Value; if (VAR_STRING.Length != LITERAL_INT) { VAR_STRING = VAR_STRING + VAR_STRING; } else { VAR_STRING = VAR_STRING + LITERAL_STRING; } } } else { return ErrorEval.NUM_ERROR; } return new StringEval(VAR_STRING); }
public PlacementType(string VAR_STRING) { _availabilityZone = VAR_STRING; }
public virtual UpdateDomainResponse METHOD_NAME(UpdateDomainRequest VAR_UPDATEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainResponseUnmarshaller.Instance; return Invoke<UpdateDomainResponse>(VAR_UPDATEDOMAINREQUEST, VAR_VAR); }
public byte[] METHOD_NAME() { byte[] VAR_BYTE[] = new byte[RecordSize]; int VAR_INT = METHOD_NAME(LITERAL_INT, VAR_BYTE[]); return VAR_BYTE[]; }
public virtual GetLoadBalancerResponse METHOD_NAME(GetLoadBalancerRequest VAR_GETLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLoadBalancerResponseUnmarshaller.Instance; return Invoke<GetLoadBalancerResponse>(VAR_GETLOADBALANCERREQUEST, VAR_VAR); }
public virtual ModifyTrafficMirrorFilterRuleResponse METHOD_NAME(ModifyTrafficMirrorFilterRuleRequest VAR_MODIFYTRAFFICMIRRORFILTERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyTrafficMirrorFilterRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyTrafficMirrorFilterRuleResponseUnmarshaller.Instance; return Invoke<ModifyTrafficMirrorFilterRuleResponse>(VAR_MODIFYTRAFFICMIRRORFILTERRULEREQUEST, VAR_VAR); }
public void METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { HSSFClientAnchor VAR_HSSFCLIENTANCHOR = (HSSFClientAnchor)ClientAnchor; VAR_HSSFCLIENTANCHOR.AnchorType = AnchorType.MoveDontResize; HSSFClientAnchor VAR_HSSFCLIENTANCHOR = GetPreferredSize(VAR_DOUBLE, VAR_DOUBLE) as HSSFClientAnchor; int VAR_INT = VAR_HSSFCLIENTANCHOR.Row1 + (VAR_HSSFCLIENTANCHOR.Row2 - VAR_HSSFCLIENTANCHOR.Row1); int VAR_INT = VAR_HSSFCLIENTANCHOR.Col1 + (VAR_HSSFCLIENTANCHOR.Col2 - VAR_HSSFCLIENTANCHOR.Col1); VAR_HSSFCLIENTANCHOR.Col2 = ((short)VAR_INT); VAR_HSSFCLIENTANCHOR.Dx2 = (VAR_HSSFCLIENTANCHOR.Dx2); VAR_HSSFCLIENTANCHOR.Row2 = (VAR_INT); VAR_HSSFCLIENTANCHOR.Dy2 = (VAR_HSSFCLIENTANCHOR.Dy2); }
public override void METHOD_NAME() { throw new System.IO.IOException(LITERAL_STRING); }
public Body(Content VAR_CONTENT) { _text = VAR_CONTENT; }
public StaticCredentialsProvider(IClientProfile VAR_ICLIENTPROFILE) { this.VAR_ICLIENTPROFILE = VAR_ICLIENTPROFILE; var VAR_VAR = this.VAR_ICLIENTPROFILE.GetCredential(); if (LITERAL_NULL != VAR_VAR.SecurityToken) { credentials = new BasicSessionCredentials(VAR_VAR.AccessKeyId, VAR_VAR.AccessSecret, VAR_VAR.SecurityToken); } else { credentials = new LegacyCredentials(VAR_VAR); } }
public override V METHOD_NAME(object VAR_OBJECT) { lock (this) { int VAR_INT = VAR_OBJECT.GetHashCode(); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = table; { for (java.util.Hashtable.HashtableEntry<K, V> e = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT & (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length - LITERAL_INT)]; e != LITERAL_NULL; e = e.next) { K VAR_K = e.VAR_OBJECT; if (Sharpen.Util.Equals(VAR_K, VAR_OBJECT) || (e.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_K))) { return e.value; } } } return default(V); } }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { BeforeAdd(cache.GetEntry(VAR_INT)); FastKeep(VAR_INT, VAR_INT); }
public TableStylesRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rt = VAR_RECORDINPUTSTREAM.ReadUShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadUShort(); VAR_RECORDINPUTSTREAM.ReadFully(unused); cts = VAR_RECORDINPUTSTREAM.ReadInt(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); rgchDefListStyle = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); rgchDefPivotStyle = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); }
public virtual AddAttributesToFindingsResponse METHOD_NAME(AddAttributesToFindingsRequest VAR_ADDATTRIBUTESTOFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddAttributesToFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddAttributesToFindingsResponseUnmarshaller.Instance; return Invoke<AddAttributesToFindingsResponse>(VAR_ADDATTRIBUTESTOFINDINGSREQUEST, VAR_VAR); }
public CellElapsedFormatter(String VAR_STRING) : base(pattern) { specs = new List<TimeSpec>(); StringBuilder VAR_STRINGBUILDER = CellFormatPart.ParseFormat(VAR_STRING, CellFormatType.ELAPSED, new ElapsedPartHandler(this)); for (int i = specs.Count - LITERAL_INT; i >= LITERAL_INT; i--) { TimeSpec VAR_TIMESPEC = specs[i]; VAR_STRINGBUILDER.Remove(VAR_TIMESPEC.pos, VAR_TIMESPEC.len); VAR_STRINGBUILDER.Insert(VAR_TIMESPEC.pos, LITERAL_STRING + VAR_TIMESPEC.len); if (VAR_TIMESPEC.type != topmost.type) { VAR_TIMESPEC.modBy = modFor(VAR_TIMESPEC.type, VAR_TIMESPEC.len); } } printfFmt = VAR_STRINGBUILDER.ToString(); }
public int METHOD_NAME() { return _capacity; }
public bool METHOD_NAME(char VAR_CHAR) { return char.IsWhiteSpace(VAR_CHAR); }
public BytesRef METHOD_NAME(int VAR_INT, BytesRef VAR_BYTESREF) { Debug.Assert(bytesStart != LITERAL_NULL, LITERAL_STRING); Debug.Assert(VAR_INT < bytesStart.Length, LITERAL_STRING + bytesStart.Length); pool.SetBytesRef(VAR_BYTESREF, bytesStart[VAR_INT]); return VAR_BYTESREF; }
public virtual void METHOD_NAME() { display = true; }
public virtual UpdateMatchmakingConfigurationResponse METHOD_NAME(UpdateMatchmakingConfigurationRequest VAR_UPDATEMATCHMAKINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMatchmakingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMatchmakingConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateMatchmakingConfigurationResponse>(VAR_UPDATEMATCHMAKINGCONFIGURATIONREQUEST, VAR_VAR); }
public bool METHOD_NAME(char VAR_CHAR) { return groupMap[characterCategoryMap[VAR_CHAR]]; }
public void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual ListPresetsResponse METHOD_NAME(ListPresetsRequest VAR_LISTPRESETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPresetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPresetsResponseUnmarshaller.Instance; return Invoke<ListPresetsResponse>(VAR_LISTPRESETSREQUEST, VAR_VAR); }
public override java.util.Set<K> METHOD_NAME() { java.util.Set<K> VAR_JAVA.UTIL.SET<K> = _keySet; return (VAR_JAVA.UTIL.SET<K> != LITERAL_NULL) ? VAR_JAVA.UTIL.SET<K> : (_keySet = new java.util.HashMap<K, V>.KeySet(this)); }
public virtual void METHOD_NAME(Ref VAR_REF) { METHOD_NAME(VAR_REF.GetName(), VAR_REF.GetObjectId()); if (VAR_REF.GetPeeledObjectId() != LITERAL_NULL) { tagTargets.AddItem(VAR_REF.GetPeeledObjectId()); } else { if (VAR_REF.GetObjectId() != LITERAL_NULL && VAR_REF.GetName().StartsWith(Constants.R_HEADS)) { tagTargets.AddItem(VAR_REF.GetObjectId()); } } }
public override java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public override BytesRef METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { Debug.Assert(VAR_BYTESREF != LITERAL_NULL); Debug.Assert(VAR_BYTESREF != LITERAL_NULL); if (VAR_BYTESREF == NO_OUTPUT) { return VAR_BYTESREF; } else if (VAR_BYTESREF.Length == VAR_BYTESREF.Length) { return NO_OUTPUT; } else { Debug.Assert(VAR_BYTESREF.Length < VAR_BYTESREF.Length, LITERAL_STRING + VAR_BYTESREF.Length + LITERAL_STRING + VAR_BYTESREF.Length); Debug.Assert(VAR_BYTESREF.Length > LITERAL_INT); return new BytesRef(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset + VAR_BYTESREF.Length, VAR_BYTESREF.Length - VAR_BYTESREF.Length); } }
public bool METHOD_NAME(char VAR_CHAR) { byte VAR_BYTE = characterCategoryMap[VAR_CHAR]; return VAR_BYTE == KANJI || VAR_BYTE == KANJINUMERIC; }
public override int METHOD_NAME() { return type; }
public ValueEval METHOD_NAME(int VAR_INT) { if (VAR_INT > _size) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (_size - LITERAL_INT) + LITERAL_STRING); } return _tableArray.GetRelativeValue(VAR_INT, _columnIndex); }
public void METHOD_NAME(double VAR_DOUBLE) { _out.METHOD_NAME(VAR_DOUBLE); _size += LITERAL_INT; }
public IQueryNode METHOD_NAME(string VAR_STRING) { IQueryNode VAR_IQUERYNODE, VAR_IQUERYNODE; List<IQueryNode> VAR_LIST<IQUERYNODE> = LITERAL_NULL; VAR_IQUERYNODE = ModClause(VAR_STRING); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.AND: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_3_break; } Jj_consume_token(RegexpToken.AND); VAR_IQUERYNODE = ModClause(VAR_STRING); if (VAR_LIST<IQUERYNODE> == LITERAL_NULL) { VAR_LIST<IQUERYNODE> = new List<IQueryNode>(); VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } label_3_break: if (VAR_LIST<IQUERYNODE> != LITERAL_NULL) { { if (true) return new AndQueryNode(VAR_LIST<IQUERYNODE>); } } else { { if (true) return VAR_IQUERYNODE; } } throw new Exception(LITERAL_STRING); }
public virtual void METHOD_NAME(RevFilter VAR_REVFILTER) { AssertNotStarted(); filter = VAR_REVFILTER != LITERAL_NULL ? VAR_REVFILTER : RevFilter.ALL; }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { this.VAR_CHAR[] = VAR_CHAR[]; this.VAR_INT = VAR_INT; this.index = VAR_INT; this.VAR_INT = VAR_INT; this.limit = VAR_INT + VAR_INT; }
public virtual GetVoiceChannelResponse METHOD_NAME(GetVoiceChannelRequest VAR_GETVOICECHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceChannelResponseUnmarshaller.Instance; return Invoke<GetVoiceChannelResponse>(VAR_GETVOICECHANNELREQUEST, VAR_VAR); }
public virtual RevokeSecurityGroupIngressResponse METHOD_NAME(RevokeSecurityGroupIngressRequest VAR_REVOKESECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<RevokeSecurityGroupIngressResponse>(VAR_REVOKESECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public override java.nio.DoubleBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.DOUBLE); byteBuffer.position(_position * libcore.io.SizeOf.DOUBLE); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.DoubleBuffer VAR_JAVA.NIO.DOUBLEBUFFER = new java.nio.DoubleToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.DOUBLEBUFFER; }
public override ValueSource METHOD_NAME(IPoint VAR_IPOINT, double VAR_DOUBLE) { return new DistanceValueSource(this, VAR_IPOINT, VAR_DOUBLE); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); SimpleDateFormat VAR_SIMPLEDATEFORMAT; VAR_SIMPLEDATEFORMAT = new SimpleDateFormat(LITERAL_STRING, CultureInfo.InvariantCulture); VAR_SIMPLEDATEFORMAT.SetTimeZone(GetTimeZone()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetName()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetEmailAddress()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_SIMPLEDATEFORMAT.Format(Sharpen.Extensions.ValueOf(when))); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public ArabicStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME() { return offset; }
public virtual ListVoiceConnectorsResponse METHOD_NAME(ListVoiceConnectorsRequest VAR_LISTVOICECONNECTORSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVoiceConnectorsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVoiceConnectorsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorsResponse>(VAR_LISTVOICECONNECTORSREQUEST, VAR_VAR); }
public virtual GetOperationResponse METHOD_NAME(GetOperationRequest VAR_GETOPERATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOperationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOperationResponseUnmarshaller.Instance; return Invoke<GetOperationResponse>(VAR_GETOPERATIONREQUEST, VAR_VAR); }
public Item(string VAR_STRING, List<Attribute> VAR_LIST<ATTRIBUTE>) { _name = VAR_STRING; _attributes = VAR_LIST<ATTRIBUTE>; }
public virtual SetIdentityHeadersInNotificationsEnabledResponse METHOD_NAME(SetIdentityHeadersInNotificationsEnabledRequest VAR_SETIDENTITYHEADERSINNOTIFICATIONSENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityHeadersInNotificationsEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityHeadersInNotificationsEnabledResponseUnmarshaller.Instance; return Invoke<SetIdentityHeadersInNotificationsEnabledResponse>(VAR_SETIDENTITYHEADERSINNOTIFICATIONSENABLEDREQUEST, VAR_VAR); }
public void METHOD_NAME(CellCacheEntry[] VAR_CELLCACHEENTRY[]) { ChangeConsumingCells(VAR_CELLCACHEENTRY[] == LITERAL_NULL ? CellCacheEntry.EMPTY_ARRAY : VAR_CELLCACHEENTRY[]); _sensitiveInputCells = VAR_CELLCACHEENTRY[]; }
public virtual bool METHOD_NAME(E VAR_E) { lock (this) { object[] VAR_OBJECT[] = new object[elements.Length + LITERAL_INT]; System.Array.Copy(elements, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, elements.Length); VAR_OBJECT[][elements.Length] = VAR_E; elements = VAR_OBJECT[]; return true; } }
public java.lang.StringBuilder METHOD_NAME(bool VAR_BOOL) { append0(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); return this; }
public virtual DeleteHsmClientCertificateResponse METHOD_NAME(DeleteHsmClientCertificateRequest VAR_DELETEHSMCLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHsmClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHsmClientCertificateResponseUnmarshaller.Instance; return Invoke<DeleteHsmClientCertificateResponse>(VAR_DELETEHSMCLIENTCERTIFICATEREQUEST, VAR_VAR); }
public virtual CreateAssessmentTargetResponse METHOD_NAME(CreateAssessmentTargetRequest VAR_CREATEASSESSMENTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAssessmentTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<CreateAssessmentTargetResponse>(VAR_CREATEASSESSMENTTARGETREQUEST, VAR_VAR); }
public virtual DescribeGlobalReplicationGroupsResponse METHOD_NAME(DescribeGlobalReplicationGroupsRequest VAR_DESCRIBEGLOBALREPLICATIONGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGlobalReplicationGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGlobalReplicationGroupsResponseUnmarshaller.Instance; return Invoke<DescribeGlobalReplicationGroupsResponse>(VAR_DESCRIBEGLOBALREPLICATIONGROUPSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(_sheetRefIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(_nameNumber); VAR_ILITTLEENDIANOUTPUT.WriteShort(_reserved); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = IndexOfSegmentName(VAR_STRING); if (VAR_INT != -LITERAL_INT) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT); } return VAR_STRING; }
public virtual string METHOD_NAME() { return refLogMessage; }
public virtual ObjectId METHOD_NAME() { return missing; }
public virtual void METHOD_NAME(long VAR_LONG) { packedGitLimit = VAR_LONG; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override void METHOD_NAME() { if (_size > LITERAL_INT) { _size = LITERAL_INT; voidLink.next = voidLink; voidLink.previous = voidLink; modCount++; } }
public override IList<Note> METHOD_NAME() { CheckCallable(); IList<Note> VAR_ILIST<NOTE> = new AList<Note>(); RevWalk VAR_REVWALK = new RevWalk(repo); NoteMap VAR_NOTEMAP = NoteMap.NewEmptyMap(); try { Ref VAR_REF = repo.GetRef(notesRef); if (VAR_REF != LITERAL_NULL) { RevCommit VAR_REVCOMMIT = VAR_REVWALK.ParseCommit(VAR_REF.GetObjectId()); VAR_NOTEMAP = NoteMap.Read(VAR_REVWALK.GetObjectReader(), VAR_REVCOMMIT); } Iterator<Note> VAR_ITERATOR<NOTE> = VAR_NOTEMAP.Iterator(); while (VAR_ITERATOR<NOTE>.HasNext()) { VAR_ILIST<NOTE>.AddItem(VAR_ITERATOR<NOTE>.Next()); } } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_REVWALK.Release(); } return VAR_ILIST<NOTE>; }
public virtual ListOrganizationsResponse METHOD_NAME(ListOrganizationsRequest VAR_LISTORGANIZATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOrganizationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOrganizationsResponseUnmarshaller.Instance; return Invoke<ListOrganizationsResponse>(VAR_LISTORGANIZATIONSREQUEST, VAR_VAR); }
public virtual ParseTreeMatch METHOD_NAME(IParseTree VAR_IPARSETREE, string VAR_STRING, int VAR_INT) { ParseTreePattern VAR_PARSETREEPATTERN = Compile(VAR_STRING, VAR_INT); return METHOD_NAME(VAR_IPARSETREE, VAR_PARSETREEPATTERN); }
public GridsetRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_gridset_flag = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override object METHOD_NAME() { PagedBytesDataInput VAR_PAGEDBYTESDATAINPUT = outerInstance.GetDataInput(); VAR_PAGEDBYTESDATAINPUT.SetPosition(GetPosition()); return VAR_PAGEDBYTESDATAINPUT; }
public MissingObjectException(AbbreviatedObjectId VAR_ABBREVIATEDOBJECTID, int VAR_INT) : base(MessageFormat.Format(JGitText.Get().missingObject, Constants.TypeString(type), id.Name)) { missing = LITERAL_NULL; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { System.Array.Copy(path, pathOffset, VAR_BYTE[], VAR_INT, pathLen - pathOffset); }
public override IList<HunkHeader> METHOD_NAME() { return base.METHOD_NAME(); }
public long METHOD_NAME() { if (currentBlock == LITERAL_NULL) { return LITERAL_INT; } else { return (blocks.Count * ((long)blockSize)) + upto; } }
public virtual CountPendingDecisionTasksResponse METHOD_NAME(CountPendingDecisionTasksRequest VAR_COUNTPENDINGDECISIONTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CountPendingDecisionTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CountPendingDecisionTasksResponseUnmarshaller.Instance; return Invoke<CountPendingDecisionTasksResponse>(VAR_COUNTPENDINGDECISIONTASKSREQUEST, VAR_VAR); }
public virtual ListStackResourcesResponse METHOD_NAME(ListStackResourcesRequest VAR_LISTSTACKRESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStackResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStackResourcesResponseUnmarshaller.Instance; return Invoke<ListStackResourcesResponse>(VAR_LISTSTACKRESOURCESREQUEST, VAR_VAR); }
public Credential(string VAR_STRING, string VAR_STRING, string VAR_STRING, int VAR_INT) { AccessKeyId = VAR_STRING; AccessSecret = VAR_STRING; SecurityToken = VAR_STRING; RefreshDate = new DateTime(); SetExpiredDate(VAR_INT); }
public virtual void METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual ReceiveCommand.Result METHOD_NAME() { return status; }
public virtual AssignIpv6AddressesResponse METHOD_NAME(AssignIpv6AddressesRequest VAR_ASSIGNIPV6ADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssignIpv6AddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssignIpv6AddressesResponseUnmarshaller.Instance; return Invoke<AssignIpv6AddressesResponse>(VAR_ASSIGNIPV6ADDRESSESREQUEST, VAR_VAR); }
public virtual ModifyDBInstanceResponse METHOD_NAME(ModifyDBInstanceRequest VAR_MODIFYDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBInstanceResponseUnmarshaller.Instance; return Invoke<ModifyDBInstanceResponse>(VAR_MODIFYDBINSTANCEREQUEST, VAR_VAR); }
public virtual RemoveAttributesFromFindingsResponse METHOD_NAME(RemoveAttributesFromFindingsRequest VAR_REMOVEATTRIBUTESFROMFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveAttributesFromFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveAttributesFromFindingsResponseUnmarshaller.Instance; return Invoke<RemoveAttributesFromFindingsResponse>(VAR_REMOVEATTRIBUTESFROMFINDINGSREQUEST, VAR_VAR); }
public JoinDocFreqValueSource(string VAR_STRING, string VAR_STRING) : base(field) { this.m_qfield = VAR_STRING; }
public virtual double METHOD_NAME() { return delegate1.METHOD_NAME(); }
public virtual DescribeDirectoryConfigsResponse METHOD_NAME(DescribeDirectoryConfigsRequest VAR_DESCRIBEDIRECTORYCONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDirectoryConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDirectoryConfigsResponseUnmarshaller.Instance; return Invoke<DescribeDirectoryConfigsResponse>(VAR_DESCRIBEDIRECTORYCONFIGSREQUEST, VAR_VAR); }
public virtual GetAccountResponse METHOD_NAME(GetAccountRequest VAR_GETACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAccountResponseUnmarshaller.Instance; return Invoke<GetAccountResponse>(VAR_GETACCOUNTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(PositionOfBof)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_2_visibility)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_3_type)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Sheetname).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public short METHOD_NAME(short VAR_SHORT) { return (short)this.GetRawValue(VAR_SHORT); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(GetYear(VAR_DOUBLE), (int)VAR_DOUBLE, (int)VAR_DOUBLE); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public virtual GetPublicKeyConfigResponse METHOD_NAME(GetPublicKeyConfigRequest VAR_GETPUBLICKEYCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPublicKeyConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPublicKeyConfigResponseUnmarshaller.Instance; return Invoke<GetPublicKeyConfigResponse>(VAR_GETPUBLICKEYCONFIGREQUEST, VAR_VAR); }
public virtual NGit.Transport.URIish METHOD_NAME(string VAR_STRING) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.user = VAR_STRING; return VAR_NGIT.TRANSPORT.URIISH; }
public EscherArrayProperty(short VAR_SHORT, byte[] VAR_BYTE[]) : base(id, CheckComplexData(complexData)) { emptyComplexPart = VAR_BYTE[].Length == LITERAL_INT; }
public virtual string METHOD_NAME() { return Format(false, true); }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT; } } }
public virtual GetContactResponse METHOD_NAME(GetContactRequest VAR_GETCONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(VAR_GETCONTACTREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_HIDDENCOUNT); }
public virtual GetRestApisResponse METHOD_NAME(GetRestApisRequest VAR_GETRESTAPISREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRestApisRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRestApisResponseUnmarshaller.Instance; return Invoke<GetRestApisResponse>(VAR_GETRESTAPISREQUEST, VAR_VAR); }
public ArrayPredictionContext(PredictionContext[] VAR_PREDICTIONCONTEXT[], int[] VAR_INT[]) : base(CalculateHashCode(parents, returnStates)) { this.VAR_PREDICTIONCONTEXT[] = VAR_PREDICTIONCONTEXT[]; this.VAR_INT[] = VAR_INT[]; }
public override java.nio.CharBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual DeleteStageResponse METHOD_NAME(DeleteStageRequest VAR_DELETESTAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStageResponseUnmarshaller.Instance; return Invoke<DeleteStageResponse>(VAR_DELETESTAGEREQUEST, VAR_VAR); }
public virtual object[] METHOD_NAME() { return (object[])elements.Clone(); }
public override void METHOD_NAME(int VAR_INT) { delegate1.METHOD_NAME(VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME(); }
public virtual void METHOD_NAME(bool VAR_BOOL) { expectDataAfterPackFooter = VAR_BOOL; }
public IRequest METHOD_NAME(DeletePublicAccessBlockRequest VAR_DELETEPUBLICACCESSBLOCKREQUEST) { IRequest VAR_IREQUEST = new DefaultRequest(VAR_DELETEPUBLICACCESSBLOCKREQUEST, LITERAL_STRING); VAR_IREQUEST.HttpMethod = LITERAL_STRING; if (string.IsNullOrEmpty(VAR_DELETEPUBLICACCESSBLOCKREQUEST.BucketName)) throw new System.ArgumentException(LITERAL_STRING, LITERAL_STRING); VAR_IREQUEST.MarshallerVersion = LITERAL_INT; VAR_IREQUEST.ResourcePath = string.Concat(LITERAL_STRING, S3Transforms.ToStringValue(VAR_DELETEPUBLICACCESSBLOCKREQUEST.BucketName)); VAR_IREQUEST.AddSubResource(LITERAL_STRING); VAR_IREQUEST.UseQueryString = true; return VAR_IREQUEST; }
public virtual FetchResult METHOD_NAME() { return this.fetchResult; }
public virtual GetJourneyExecutionMetricsResponse METHOD_NAME(GetJourneyExecutionMetricsRequest VAR_GETJOURNEYEXECUTIONMETRICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJourneyExecutionMetricsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJourneyExecutionMetricsResponseUnmarshaller.Instance; return Invoke<GetJourneyExecutionMetricsResponse>(VAR_GETJOURNEYEXECUTIONMETRICSREQUEST, VAR_VAR); }
public static int[] METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT + VAR_INT[].Length); }
public override string METHOD_NAME() { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); VAR_JAVA.LANG.STRINGBUILDER.append(GetType().FullName); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(_capacity); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(_position); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(_limit); return VAR_JAVA.LANG.STRINGBUILDER.METHOD_NAME(); }
public virtual UpdateStreamingDistributionResponse METHOD_NAME(UpdateStreamingDistributionRequest VAR_UPDATESTREAMINGDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStreamingDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<UpdateStreamingDistributionResponse>(VAR_UPDATESTREAMINGDISTRIBUTIONREQUEST, VAR_VAR); }
public DeleteVaultNotificationsRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public virtual AttachNetworkInterfaceResponse METHOD_NAME(AttachNetworkInterfaceRequest VAR_ATTACHNETWORKINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachNetworkInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<AttachNetworkInterfaceResponse>(VAR_ATTACHNETWORKINTERFACEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is HungarianStemmer; }
public virtual DescribeDatasetResponse METHOD_NAME(DescribeDatasetRequest VAR_DESCRIBEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDatasetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDatasetResponseUnmarshaller.Instance; return Invoke<DescribeDatasetResponse>(VAR_DESCRIBEDATASETREQUEST, VAR_VAR); }
public virtual UpdateShardCountResponse METHOD_NAME(UpdateShardCountRequest VAR_UPDATESHARDCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateShardCountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateShardCountResponseUnmarshaller.Instance; return Invoke<UpdateShardCountResponse>(VAR_UPDATESHARDCOUNTREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { Fill(); return METHOD_NAME(Interval.Of(LITERAL_INT, Size - LITERAL_INT)); }
public BoundSheetRecord[] METHOD_NAME() { return (BoundSheetRecord[])boundSheetRecords.ToArray(typeof(BoundSheetRecord)); }
public bool METHOD_NAME(FooterKey VAR_FOOTERKEY) { byte[] VAR_BYTE[] = VAR_FOOTERKEY.raw; int VAR_INT = VAR_BYTE[].Length; int VAR_INT = keyStart; if (keyEnd - VAR_INT != VAR_INT) { return false; } for (int kPtr = LITERAL_INT; kPtr < VAR_INT;) { byte VAR_BYTE = buffer[VAR_INT++]; if (LITERAL_CHAR <= VAR_BYTE && ((sbyte)VAR_BYTE) <= LITERAL_CHAR) { VAR_BYTE += (byte)(LITERAL_CHAR) - (byte)(LITERAL_CHAR); } if (VAR_BYTE != VAR_BYTE[][kPtr++]) { return false; } } return true; }
public virtual CreateUserResponse METHOD_NAME(CreateUserRequest VAR_CREATEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateUserResponseUnmarshaller.Instance; return Invoke<CreateUserResponse>(VAR_CREATEUSERREQUEST, VAR_VAR); }
public S3Origin(string VAR_STRING, string VAR_STRING) { _domainName = VAR_STRING; _originAccessIdentity = VAR_STRING; }
public virtual StartTopicsDetectionJobResponse METHOD_NAME(StartTopicsDetectionJobRequest VAR_STARTTOPICSDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartTopicsDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<StartTopicsDetectionJobResponse>(VAR_STARTTOPICSDETECTIONJOBREQUEST, VAR_VAR); }
public virtual RevokeClusterSecurityGroupIngressResponse METHOD_NAME(RevokeClusterSecurityGroupIngressRequest VAR_REVOKECLUSTERSECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeClusterSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeClusterSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<RevokeClusterSecurityGroupIngressResponse>(VAR_REVOKECLUSTERSECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT, int VAR_INT) { State = VAR_INT; _ctx = VAR_PARSERRULECONTEXT; _ctx.Start = _input.LT(LITERAL_INT); if (_buildParseTrees) { AddContextToParseTree(); } if (_parseListeners != LITERAL_NULL) { TriggerEnterRuleEvent(); } }
public override ObjectReader METHOD_NAME() { return new NGit.Storage.File.WindowCursor(db); }
public override int METHOD_NAME() { return this._enclosing._size; }
public static string METHOD_NAME(string[] VAR_STRING[], int VAR_INT) { if (VAR_INT == LITERAL_INT) { return LITERAL_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < VAR_INT; i++) { string VAR_STRING = VAR_STRING[][i]; if (VAR_STRING.Length == LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } int VAR_INT = VAR_STRING.Length; for (int j = LITERAL_INT; j < VAR_INT; j++) { char VAR_CHAR = VAR_STRING[j]; if (VAR_CHAR == DELIM_CHAR || VAR_CHAR == ESCAPE_CHAR) { VAR_STRINGBUILDER.Append(ESCAPE_CHAR); } VAR_STRINGBUILDER.Append(VAR_CHAR); } VAR_STRINGBUILDER.Append(DELIM_CHAR); } VAR_STRINGBUILDER.Length = VAR_STRINGBUILDER.Length - LITERAL_INT; return VAR_STRINGBUILDER.ToString(); }
public CancelSpotInstanceRequestsRequest(List<string> VAR_LIST<STRING>) { _spotInstanceRequestIds = VAR_LIST<STRING>; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subfilters.Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(subfilters[i].METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetConnectionResponse METHOD_NAME(GetConnectionRequest VAR_GETCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConnectionResponseUnmarshaller.Instance; return Invoke<GetConnectionResponse>(VAR_GETCONNECTIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return a + LITERAL_STRING + b; }
public virtual AddNoteCommand METHOD_NAME() { return new AddNoteCommand(repo); }
public static void METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT, short VAR_SHORT) { java.util.Arrays.checkStartAndEnd(VAR_SHORT[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_SHORT[][i] = VAR_SHORT; } } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerIndexedCustomAction)) { return false; } } Antlr4.Runtime.Atn.LexerIndexedCustomAction VAR_ANTLR4.RUNTIME.ATN.LEXERINDEXEDCUSTOMACTION = (Antlr4.Runtime.Atn.LexerIndexedCustomAction)VAR_OBJECT; return offset == VAR_ANTLR4.RUNTIME.ATN.LEXERINDEXEDCUSTOMACTION.offset && action.METHOD_NAME(VAR_ANTLR4.RUNTIME.ATN.LEXERINDEXEDCUSTOMACTION.action); }
public DeleteNamespaceAuthorizationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_BYTE[].Length; if (VAR_INT == LITERAL_INT) { VAR_INT += LITERAL_INT; } while (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { VAR_INT += LITERAL_INT; } return Match(VAR_BYTE[], VAR_INT, ObjectChecker.author); }
public virtual DescribeHostsResponse METHOD_NAME(DescribeHostsRequest VAR_DESCRIBEHOSTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHostsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHostsResponseUnmarshaller.Instance; return Invoke<DescribeHostsResponse>(VAR_DESCRIBEHOSTSREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public OpenNLPChunkerFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { chunkerModelFile = Get(VAR_IDICTIONARY<STRING, STRING>, CHUNKER_MODEL); if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetName()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(ObjectId.METHOD_NAME(GetObjectId())); VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual StartStreamEncryptionResponse METHOD_NAME(StartStreamEncryptionRequest VAR_STARTSTREAMENCRYPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartStreamEncryptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartStreamEncryptionResponseUnmarshaller.Instance; return Invoke<StartStreamEncryptionResponse>(VAR_STARTSTREAMENCRYPTIONREQUEST, VAR_VAR); }
public DeleteCloudFrontOriginAccessIdentityRequest(string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _ifMatch = VAR_STRING; }
public virtual int METHOD_NAME() { return mBitmap.METHOD_NAME(); }
public virtual IList<string> METHOD_NAME() { List<string> VAR_LIST<STRING> = new List<string>(untrackedFolders); if (!untrackedParentFolders.IsEmpty()) { string VAR_STRING = untrackedParentFolders.GetLast(); while (!VAR_LIST<STRING>.IsEmpty() && VAR_LIST<STRING>.GetLast().StartsWith(VAR_STRING)) { VAR_LIST<STRING>.RemoveLast(); } VAR_LIST<STRING>.AddLast(VAR_STRING); } return VAR_LIST<STRING>; }
public CredentialsProviderUserInfo(Session VAR_SESSION, CredentialsProvider VAR_CREDENTIALSPROVIDER) { this.uri = CreateURI(VAR_SESSION); this.provider = VAR_CREDENTIALSPROVIDER; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Pane)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(ActiveCellRow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(ActiveCellCol)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(ActiveCellRef)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field_6_refs.Length)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static bool METHOD_NAME(ICell VAR_ICELL) { if (VAR_ICELL == LITERAL_NULL) return false; bool VAR_BOOL = false; double VAR_DOUBLE = VAR_ICELL.NumericCellValue; if (DateUtil.IsValidExcelDate(VAR_DOUBLE)) { ICellStyle VAR_ICELLSTYLE = VAR_ICELL.CellStyle; int VAR_INT = VAR_ICELLSTYLE.DataFormat; VAR_BOOL = IsInternalDateFormat(VAR_INT); } return VAR_BOOL; }
public static string METHOD_NAME(IList<string> VAR_ILIST<STRING>, bool VAR_BOOL) { if (!VAR_ILIST<STRING>.Any()) { if (VAR_BOOL) return LITERAL_NULL; throw new InvalidOperationException(LITERAL_STRING); } string VAR_STRING = VAR_ILIST<STRING>.Last(); VAR_ILIST<STRING>.RemoveAt(VAR_ILIST<STRING>.Count - LITERAL_INT); if (!VAR_STRING.StartsWith(IndexFileNames.SEGMENTS, StringComparison.Ordinal) || VAR_STRING.Equals(IndexFileNames.SEGMENTS_GEN, StringComparison.Ordinal)) { throw new InvalidOperationException(string.Format(LITERAL_STRING, VAR_STRING)); } return VAR_STRING; }
public static bool METHOD_NAME(String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) return false; for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR > LITERAL_INT) return true; } return false; }
public static NGit.ObjectId METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length != Constants.OBJECT_ID_STRING_LENGTH) { throw new ArgumentException(LITERAL_STRING + VAR_STRING); } return FromHexString(Constants.EncodeASCII(VAR_STRING), LITERAL_INT); }
public override void METHOD_NAME() { throw new System.IO.IOException(); }
public virtual GetReservedInstancesExchangeQuoteResponse METHOD_NAME(GetReservedInstancesExchangeQuoteRequest VAR_GETRESERVEDINSTANCESEXCHANGEQUOTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetReservedInstancesExchangeQuoteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetReservedInstancesExchangeQuoteResponseUnmarshaller.Instance; return Invoke<GetReservedInstancesExchangeQuoteResponse>(VAR_GETRESERVEDINSTANCESEXCHANGEQUOTEREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME(int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual GetFolderPathResponse METHOD_NAME(GetFolderPathRequest VAR_GETFOLDERPATHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFolderPathRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFolderPathResponseUnmarshaller.Instance; return Invoke<GetFolderPathResponse>(VAR_GETFOLDERPATHREQUEST, VAR_VAR); }
public virtual DeleteDirectConnectGatewayAssociationResponse METHOD_NAME(DeleteDirectConnectGatewayAssociationRequest VAR_DELETEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDirectConnectGatewayAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDirectConnectGatewayAssociationResponseUnmarshaller.Instance; return Invoke<DeleteDirectConnectGatewayAssociationResponse>(VAR_DELETEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(double VAR_DOUBLE) { return putLong(Sharpen.Util.DoubleToRawLongBits(VAR_DOUBLE)); }
public virtual SearchContactsResponse METHOD_NAME(SearchContactsRequest VAR_SEARCHCONTACTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchContactsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchContactsResponseUnmarshaller.Instance; return Invoke<SearchContactsResponse>(VAR_SEARCHCONTACTSREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return _size == LITERAL_INT; }
public virtual CreatePartnerEventSourceResponse METHOD_NAME(CreatePartnerEventSourceRequest VAR_CREATEPARTNEREVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePartnerEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePartnerEventSourceResponseUnmarshaller.Instance; return Invoke<CreatePartnerEventSourceResponse>(VAR_CREATEPARTNEREVENTSOURCEREQUEST, VAR_VAR); }
public CreateNamespaceAuthorizationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual NGit.Transport.URIish METHOD_NAME(string VAR_STRING) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.pass = VAR_STRING; return VAR_NGIT.TRANSPORT.URIISH; }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.PushMode(mode); }
public virtual CreateModelVersionResponse METHOD_NAME(CreateModelVersionRequest VAR_CREATEMODELVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateModelVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateModelVersionResponseUnmarshaller.Instance; return Invoke<CreateModelVersionResponse>(VAR_CREATEMODELVERSIONREQUEST, VAR_VAR); }
public virtual UpdateServicePrimaryTaskSetResponse METHOD_NAME(UpdateServicePrimaryTaskSetRequest VAR_UPDATESERVICEPRIMARYTASKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateServicePrimaryTaskSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateServicePrimaryTaskSetResponseUnmarshaller.Instance; return Invoke<UpdateServicePrimaryTaskSetResponse>(VAR_UPDATESERVICEPRIMARYTASKSETREQUEST, VAR_VAR); }
public LinearRegressionFunction(FUNCTION VAR_FUNCTION) { this.VAR_FUNCTION = VAR_FUNCTION; }
public ATNConfig(ATNConfig VAR_ATNCONFIG) { this.state = VAR_ATNCONFIG.state; this.alt = VAR_ATNCONFIG.alt; this.context = VAR_ATNCONFIG.context; this.semanticContext = VAR_ATNCONFIG.semanticContext; this.reachesIntoOuterContext = VAR_ATNCONFIG.reachesIntoOuterContext; }
public virtual DescribeEntitiesDetectionJobResponse METHOD_NAME(DescribeEntitiesDetectionJobRequest VAR_DESCRIBEENTITIESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEntitiesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEntitiesDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeEntitiesDetectionJobResponse>(VAR_DESCRIBEENTITIESDETECTIONJOBREQUEST, VAR_VAR); }
public AssociateDhcpOptionsRequest(string VAR_STRING) { _vpcId = VAR_STRING; }
public virtual ListChangedBlocksResponse METHOD_NAME(ListChangedBlocksRequest VAR_LISTCHANGEDBLOCKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListChangedBlocksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListChangedBlocksResponseUnmarshaller.Instance; return Invoke<ListChangedBlocksResponse>(VAR_LISTCHANGEDBLOCKSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return removeFirstOccurrenceImpl(VAR_OBJECT); }
public virtual IList<PerfTask> METHOD_NAME() { List<PerfTask> VAR_LIST<PERFTASK> = new List<PerfTask>(); METHOD_NAME(VAR_LIST<PERFTASK>, sequence); return VAR_LIST<PERFTASK>; }
public FacetsCollector(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual UpdateNodegroupVersionResponse METHOD_NAME(UpdateNodegroupVersionRequest VAR_UPDATENODEGROUPVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNodegroupVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNodegroupVersionResponseUnmarshaller.Instance; return Invoke<UpdateNodegroupVersionResponse>(VAR_UPDATENODEGROUPVERSIONREQUEST, VAR_VAR); }
public DeleteAttributesRequest(string VAR_STRING, string VAR_STRING) { _domainName = VAR_STRING; _itemName = VAR_STRING; }
public virtual void METHOD_NAME() { throw new Exception(LITERAL_STRING); }
public override Field[] METHOD_NAME(IShape VAR_ISHAPE) { var VAR_VAR = VAR_ISHAPE as IPoint; if (VAR_VAR != LITERAL_NULL) return METHOD_NAME(VAR_VAR); throw new NotSupportedException(LITERAL_STRING + VAR_ISHAPE); }
public virtual UntagResourceResponse METHOD_NAME(UntagResourceRequest VAR_UNTAGRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagResourceResponseUnmarshaller.Instance; return Invoke<UntagResourceResponse>(VAR_UNTAGRESOURCEREQUEST, VAR_VAR); }
public virtual CreateDBSecurityGroupResponse METHOD_NAME(CreateDBSecurityGroupRequest VAR_CREATEDBSECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBSecurityGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSecurityGroupResponse>(VAR_CREATEDBSECURITYGROUPREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (GetType() != VAR_OBJECT.GetType()) { return false; } ExpressionValueSource VAR_EXPRESSIONVALUESOURCE = (ExpressionValueSource)VAR_OBJECT; if (expression == LITERAL_NULL) { if (VAR_EXPRESSIONVALUESOURCE.expression != LITERAL_NULL) { return false; } } else { if (!expression.METHOD_NAME(VAR_EXPRESSIONVALUESOURCE.expression)) { return false; } } if (needsScores != VAR_EXPRESSIONVALUESOURCE.needsScores) { return false; } if (!Arrays.METHOD_NAME(variables, VAR_EXPRESSIONVALUESOURCE.variables)) { return false; } return true; }
public static String METHOD_NAME() { return ISO_8859_1.WebName; }
public virtual IndexSearcher METHOD_NAME() { lock (this) { if (indexReader != LITERAL_NULL) { indexReader.IncRef(); } return indexSearcher; } }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is German2Stemmer; }
public FacetLabel(params string[] VAR_STRING[]) { this.Components = VAR_STRING[]; Length = VAR_STRING[].Length; CheckComponents(); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { if (_recs.Count == LITERAL_INT) { return; } VAR_RECORDVISITOR.VisitRecord(_begin); for (int i = LITERAL_INT; i < _recs.Count; i++) { RecordBase VAR_RECORDBASE = _recs[i]; if (VAR_RECORDBASE is RecordAggregate) { ((RecordAggregate)VAR_RECORDBASE).METHOD_NAME(VAR_RECORDVISITOR); } else { VAR_RECORDVISITOR.VisitRecord((Record)VAR_RECORDBASE); } } VAR_RECORDVISITOR.VisitRecord(_end); }
public virtual void METHOD_NAME(DirCache VAR_DIRCACHE) { this.dircache = VAR_DIRCACHE; }
public override long METHOD_NAME(BytesRef VAR_BYTESREF) { int VAR_INT = LITERAL_INT; int VAR_INT = fieldIndex.numIndexTerms - LITERAL_INT; Debug.Assert(outerInstance.totalIndexInterval > LITERAL_INT, LITERAL_STRING + outerInstance.totalIndexInterval); while (VAR_INT >= VAR_INT) { int VAR_INT = (int)(((uint)(VAR_INT + VAR_INT)) >> LITERAL_INT); long VAR_LONG = fieldIndex.termOffsets.Get(VAR_INT); int VAR_INT = (int)(fieldIndex.termOffsets.Get(LITERAL_INT + VAR_INT) - VAR_LONG); outerInstance.termBytesReader.FillSlice(term, fieldIndex.termBytesStart + VAR_LONG, VAR_INT); int VAR_INT = outerInstance.termComp.Compare(VAR_BYTESREF, term); if (VAR_INT < LITERAL_INT) { VAR_INT = VAR_INT - LITERAL_INT; } else if (VAR_INT > LITERAL_INT) { VAR_INT = VAR_INT + LITERAL_INT; } else { Debug.Assert(VAR_INT >= LITERAL_INT); ord = VAR_INT * outerInstance.totalIndexInterval; return fieldIndex.termsStart + fieldIndex.termsDictOffsets.Get(VAR_INT); } } if (VAR_INT < LITERAL_INT) { Debug.Assert(VAR_INT == -LITERAL_INT); VAR_INT = LITERAL_INT; } long VAR_LONG = fieldIndex.termOffsets.Get(VAR_INT); int VAR_INT = (int)(fieldIndex.termOffsets.Get(LITERAL_INT + VAR_INT) - VAR_LONG); outerInstance.termBytesReader.FillSlice(term, fieldIndex.termBytesStart + VAR_LONG, VAR_INT); ord = VAR_INT * outerInstance.totalIndexInterval; return fieldIndex.termsStart + fieldIndex.termsDictOffsets.Get(VAR_INT); }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { int VAR_INT = LITERAL_INT; while (true) { int VAR_INT = Math.Min(VAR_INT - VAR_INT, _ulrOutput.AvailableSpace / LITERAL_INT); for (; VAR_INT > LITERAL_INT; VAR_INT--) { _ulrOutput.WriteByte(VAR_BYTE[][VAR_INT + VAR_INT++]); } if (VAR_INT >= VAR_INT) { break; } WriteContinue(); } }
public FormatFlagsConversionMismatchException(string VAR_STRING, char VAR_CHAR) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; this.VAR_CHAR = VAR_CHAR; }
public IList<Head> METHOD_NAME(char VAR_CHAR) { return FileNameMatcher.EMPTY_HEAD_LIST; }
public virtual void METHOD_NAME(string VAR_STRING, IQueryBuilder VAR_IQUERYBUILDER) { m_queryFactory.AddBuilder(VAR_STRING, VAR_IQUERYBUILDER); }
public virtual int METHOD_NAME(DecisionState VAR_DECISIONSTATE) { decisionToState.Add(VAR_DECISIONSTATE); VAR_DECISIONSTATE.decision = decisionToState.Count - LITERAL_INT; decisionToDFA = Arrays.CopyOf(decisionToDFA, decisionToState.Count); decisionToDFA[decisionToDFA.Length - LITERAL_INT] = new DFA(VAR_DECISIONSTATE, VAR_DECISIONSTATE.decision); return VAR_DECISIONSTATE.decision; }
public virtual void METHOD_NAME(bool VAR_BOOL) { outerInstance.RefreshDone(); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, char VAR_CHAR) { if (VAR_INT == VAR_BYTE[].Length) { --VAR_INT; } while (VAR_INT >= LITERAL_INT) { byte VAR_BYTE = VAR_BYTE[][VAR_INT--]; if (VAR_BYTE == VAR_CHAR || VAR_BYTE == LITERAL_CHAR) { return VAR_INT; } } return VAR_INT; }
public ConsumeContentSourceTask(PerfRunData VAR_PERFRUNDATA) : base(runData) { source = VAR_PERFRUNDATA.ContentSource; }
public virtual DescribeInstanceTypeOfferingsResponse METHOD_NAME(DescribeInstanceTypeOfferingsRequest VAR_DESCRIBEINSTANCETYPEOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstanceTypeOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstanceTypeOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeInstanceTypeOfferingsResponse>(VAR_DESCRIBEINSTANCETYPEOFFERINGSREQUEST, VAR_VAR); }
public void METHOD_NAME() { drawingGroups.Clear(); }
public virtual string METHOD_NAME(PersonIdent VAR_PERSONIDENT) { TimeZoneInfo VAR_TIMEZONEINFO; switch (format) { case GitDateFormatter.Format.RAW: { int VAR_INT = VAR_PERSONIDENT.GetTimeZoneOffset(); string VAR_STRING = VAR_INT < LITERAL_INT ? LITERAL_STRING : LITERAL_STRING; int VAR_INT; if (VAR_INT < LITERAL_INT) { VAR_INT = -VAR_INT; } else { VAR_INT = VAR_INT; } int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; return string.Format(LITERAL_STRING, VAR_PERSONIDENT.GetWhen().GetTime() / LITERAL_INT, VAR_STRING, VAR_INT, VAR_INT); } case GitDateFormatter.Format.RELATIVE: { return RelativeDateFormatter.Format(VAR_PERSONIDENT.GetWhen()); } case GitDateFormatter.Format.LOCALELOCAL: case GitDateFormatter.Format.LOCAL: { dateTimeInstance.SetTimeZone(SystemReader.GetInstance().GetTimeZone()); return dateTimeInstance.Format(VAR_PERSONIDENT.GetWhen()); } case GitDateFormatter.Format.LOCALE: { VAR_TIMEZONEINFO = VAR_PERSONIDENT.GetTimeZone(); if (VAR_TIMEZONEINFO == LITERAL_NULL) { VAR_TIMEZONEINFO = SystemReader.GetInstance().GetTimeZone(); } dateTimeInstance.SetTimeZone(VAR_TIMEZONEINFO); dateTimeInstance2.SetTimeZone(VAR_TIMEZONEINFO); return dateTimeInstance.Format(VAR_PERSONIDENT.GetWhen()) + LITERAL_STRING + dateTimeInstance2.Format(VAR_PERSONIDENT.GetWhen()); } default: { VAR_TIMEZONEINFO = VAR_PERSONIDENT.GetTimeZone(); if (VAR_TIMEZONEINFO == LITERAL_NULL) { VAR_TIMEZONEINFO = SystemReader.GetInstance().GetTimeZone(); } dateTimeInstance.SetTimeZone(VAR_PERSONIDENT.GetTimeZone()); return dateTimeInstance.Format(VAR_PERSONIDENT.GetWhen()); break; } } }
public virtual DeregisterStreamConsumerResponse METHOD_NAME(DeregisterStreamConsumerRequest VAR_DEREGISTERSTREAMCONSUMERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterStreamConsumerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterStreamConsumerResponseUnmarshaller.Instance; return Invoke<DeregisterStreamConsumerResponse>(VAR_DEREGISTERSTREAMCONSUMERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (object.ReferenceEquals(VAR_OBJECT, this)) { return true; } if (object.ReferenceEquals(LITERAL_NULL, VAR_OBJECT)) { return object.ReferenceEquals(LITERAL_NULL, this); } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } return true; }
public override java.nio.ByteBuffer METHOD_NAME() { return java.nio.ReadOnlyHeapByteBuffer.copy(this, _mark); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (FieldIndexData entry in fields.Values) { VAR_LONG += entry.METHOD_NAME(); } return VAR_LONG; }
public virtual CreateTransitGatewayRouteTableResponse METHOD_NAME(CreateTransitGatewayRouteTableRequest VAR_CREATETRANSITGATEWAYROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayRouteTableResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayRouteTableResponse>(VAR_CREATETRANSITGATEWAYROUTETABLEREQUEST, VAR_VAR); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; field_1_color1 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_2_color2 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_3_color3 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; field_4_color4 = LittleEndian.GetInt(VAR_BYTE[], VAR_INT + VAR_INT); VAR_INT += LITERAL_INT; VAR_INT -= VAR_INT; if (VAR_INT != LITERAL_INT) throw new RecordFormatException(LITERAL_STRING + VAR_INT + LITERAL_STRING); return LITERAL_INT + VAR_INT + VAR_INT; }
public virtual string[] METHOD_NAME() { return QueryConfigHandler.Get(ConfigurationKeys.MULTI_FIELDS); }
public override bool METHOD_NAME() { return this.returnedNumber < this._enclosing.GetObjectCount(); }
public override string METHOD_NAME() { return SpatialArgsParser.WriteSpatialArgs(this); }
public static RowRecord METHOD_NAME(int VAR_INT) { return new RowRecord(VAR_INT); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(field_1_last_column_index); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_2_first_column_index); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_row_index); ConstantValueParser.Encode(VAR_ILITTLEENDIANOUTPUT, field_4_constant_values); }
public virtual DescribeHostReservationOfferingsResponse METHOD_NAME(DescribeHostReservationOfferingsRequest VAR_DESCRIBEHOSTRESERVATIONOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHostReservationOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHostReservationOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeHostReservationOfferingsResponse>(VAR_DESCRIBEHOSTRESERVATIONOFFERINGSREQUEST, VAR_VAR); }
public void METHOD_NAME() { field_2_first_col = LITERAL_INT; field_3_last_col = LITERAL_INT; }
public virtual CancelBundleTaskResponse METHOD_NAME(CancelBundleTaskRequest VAR_CANCELBUNDLETASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelBundleTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelBundleTaskResponseUnmarshaller.Instance; return Invoke<CancelBundleTaskResponse>(VAR_CANCELBUNDLETASKREQUEST, VAR_VAR); }
public ShingleFilter(TokenStream VAR_TOKENSTREAM, string VAR_STRING) : this(input, DEFAULT_MIN_SHINGLE_SIZE, DEFAULT_MAX_SHINGLE_SIZE) { SetTokenType(VAR_STRING); }
public MergeException(string VAR_STRING, Directory VAR_DIRECTORY) : base(message) { this.VAR_DIRECTORY = VAR_DIRECTORY; }
public virtual TestDNSAnswerResponse METHOD_NAME(TestDNSAnswerRequest VAR_TESTDNSANSWERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestDNSAnswerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestDNSAnswerResponseUnmarshaller.Instance; return Invoke<TestDNSAnswerResponse>(VAR_TESTDNSANSWERREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return field.ToString(); }
public virtual GetMasterAccountResponse METHOD_NAME(GetMasterAccountRequest VAR_GETMASTERACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMasterAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMasterAccountResponseUnmarshaller.Instance; return Invoke<GetMasterAccountResponse>(VAR_GETMASTERACCOUNTREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return indexVersion; }
public virtual GetAdmChannelResponse METHOD_NAME(GetAdmChannelRequest VAR_GETADMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAdmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAdmChannelResponseUnmarshaller.Instance; return Invoke<GetAdmChannelResponse>(VAR_GETADMCHANNELREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is BasicQueryFactory)) return false; BasicQueryFactory VAR_BASICQUERYFACTORY = (BasicQueryFactory)VAR_OBJECT; return AtMax == VAR_BASICQUERYFACTORY.AtMax; }
public int METHOD_NAME() { return (byte)ReadUByte(); }
public virtual DeletePolicyResponse METHOD_NAME(DeletePolicyRequest VAR_DELETEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePolicyResponseUnmarshaller.Instance; return Invoke<DeletePolicyResponse>(VAR_DELETEPOLICYREQUEST, VAR_VAR); }
public Object METHOD_NAME(long VAR_LONG) { return this[VAR_LONG]; }
public virtual void METHOD_NAME(IMessage VAR_IMESSAGE) { this.m_message = VAR_IMESSAGE; }
public virtual DescribeClusterVersionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeClusterVersionsRequest()); }
public override void METHOD_NAME(ReceivePack VAR_RECEIVEPACK, ICollection<ReceiveCommand> VAR_ICOLLECTION<RECEIVECOMMAND>) { for (int i = LITERAL_INT; i < count; i++) { hooks[i].METHOD_NAME(VAR_RECEIVEPACK, VAR_ICOLLECTION<RECEIVECOMMAND>); } }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { return VAR_INT; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR && VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_CHAR[][VAR_INT - LITERAL_INT] = LITERAL_CHAR; } return VAR_INT - LITERAL_INT; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == VAR_CHAR[][VAR_INT - LITERAL_INT]) { VAR_INT--; } return VAR_INT; }
public static RkRec[] METHOD_NAME(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = (VAR_RECORDINPUTSTREAM.Remaining - LITERAL_INT) / ENCODED_SIZE; RkRec[] VAR_RKREC[] = new RkRec[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_RKREC[][i] = new RkRec(VAR_RECORDINPUTSTREAM); } return VAR_RKREC[]; }
public override bool METHOD_NAME() { return true; }
public virtual CreateWorkteamResponse METHOD_NAME(CreateWorkteamRequest VAR_CREATEWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateWorkteamResponseUnmarshaller.Instance; return Invoke<CreateWorkteamResponse>(VAR_CREATEWORKTEAMREQUEST, VAR_VAR); }
public ProfilingATNSimulator(Parser VAR_PARSER) : base(parser, parser.Interpreter.atn, parser.Interpreter.decisionToDFA, parser.Interpreter.getSharedContextCache()) { numDecisions = atn.decisionToState.Count; decisions = new DecisionInfo[numDecisions]; for (int i = LITERAL_INT; i < numDecisions; i++) { decisions[i] = new DecisionInfo(i); } }
public virtual DescribeDeliveryStreamResponse METHOD_NAME(DescribeDeliveryStreamRequest VAR_DESCRIBEDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDeliveryStreamResponseUnmarshaller.Instance; return Invoke<DescribeDeliveryStreamResponse>(VAR_DESCRIBEDELIVERYSTREAMREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return link.next != list.voidLink; }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length > LITERAL_INT) { VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE *= VAR_DOUBLE[][i]; } } return VAR_DOUBLE; }
public virtual NGit.Api.RebaseCommand METHOD_NAME(string VAR_STRING) { try { ObjectId VAR_OBJECTID = repo.Resolve(VAR_STRING); if (VAR_OBJECTID == LITERAL_NULL) { throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, VAR_STRING)); } upstreamCommit = walk.ParseCommit(repo.Resolve(VAR_STRING)); upstreamCommitName = VAR_STRING; return this; } catch (IOException ioe) { throw new JGitInternalException(ioe.Message, ioe); } }
public ATN(ATNType VAR_ATNTYPE, int VAR_INT) { this.VAR_ATNTYPE = VAR_ATNTYPE; this.VAR_INT = VAR_INT; }
public HyphenatedWordsFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetBlueprintsResponse METHOD_NAME(GetBlueprintsRequest VAR_GETBLUEPRINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBlueprintsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBlueprintsResponseUnmarshaller.Instance; return Invoke<GetBlueprintsResponse>(VAR_GETBLUEPRINTSREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(string VAR_STRING) { lock (this) { append0(VAR_STRING); return this; } }
public virtual DescribeEngineDefaultClusterParametersResponse METHOD_NAME(DescribeEngineDefaultClusterParametersRequest VAR_DESCRIBEENGINEDEFAULTCLUSTERPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEngineDefaultClusterParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEngineDefaultClusterParametersResponseUnmarshaller.Instance; return Invoke<DescribeEngineDefaultClusterParametersResponse>(VAR_DESCRIBEENGINEDEFAULTCLUSTERPARAMETERSREQUEST, VAR_VAR); }
public virtual DeleteLaunchTemplateResponse METHOD_NAME(DeleteLaunchTemplateRequest VAR_DELETELAUNCHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLaunchTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLaunchTemplateResponseUnmarshaller.Instance; return Invoke<DeleteLaunchTemplateResponse>(VAR_DELETELAUNCHTEMPLATEREQUEST, VAR_VAR); }
public override object METHOD_NAME() { return Exists ? (object)Value : LITERAL_NULL; }
public virtual ObjectReader METHOD_NAME() { return ObjectDatabase.NewReader(); }
public override String METHOD_NAME() { String VAR_STRING = Environment.NewLine; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(RecordName).Append(LITERAL_CHAR + VAR_STRING); for (IEnumerator iterator = EscherRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_STRINGBUILDER.Append(VAR_ESCHERRECORD.METHOD_NAME() + VAR_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(RecordName).Append(LITERAL_CHAR + VAR_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetSnapshotBlockResponse METHOD_NAME(GetSnapshotBlockRequest VAR_GETSNAPSHOTBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSnapshotBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSnapshotBlockResponseUnmarshaller.Instance; return Invoke<GetSnapshotBlockResponse>(VAR_GETSNAPSHOTBLOCKREQUEST, VAR_VAR); }
public HSSFComment METHOD_NAME(HSSFAnchor VAR_HSSFANCHOR) { HSSFComment VAR_HSSFCOMMENT = new HSSFComment(LITERAL_NULL, VAR_HSSFANCHOR); AddShape(VAR_HSSFCOMMENT); OnCreate(VAR_HSSFCOMMENT); return VAR_HSSFCOMMENT; }
public virtual CopySnapshotResponse METHOD_NAME(CopySnapshotRequest VAR_COPYSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopySnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopySnapshotResponseUnmarshaller.Instance; return Invoke<CopySnapshotResponse>(VAR_COPYSNAPSHOTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.m_begin + LITERAL_STRING + this.m_end + LITERAL_STRING + this.m_field + LITERAL_STRING + this.m_text + LITERAL_STRING; }
public override void METHOD_NAME(int VAR_INT) { throw new InvalidOperationException(JGitText.Get().writingNotPermitted); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { try { String VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); String VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); return Eval(VAR_STRING, VAR_STRING, LITERAL_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public NumberMatcher(double VAR_DOUBLE, CmpOp VAR_CMPOP) : base(optr) { _value = VAR_DOUBLE; }
public virtual GroupingSearch METHOD_NAME(double VAR_DOUBLE, bool VAR_BOOL) { this.VAR_DOUBLE = VAR_DOUBLE; this.maxDocsToCache = LITERAL_NULL; this.VAR_BOOL = VAR_BOOL; return this; }
public virtual DescribeRegionsResponse METHOD_NAME(DescribeRegionsRequest VAR_DESCRIBEREGIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRegionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRegionsResponseUnmarshaller.Instance; return Invoke<DescribeRegionsResponse>(VAR_DESCRIBEREGIONSREQUEST, VAR_VAR); }
public virtual ListApplicationRevisionsResponse METHOD_NAME(ListApplicationRevisionsRequest VAR_LISTAPPLICATIONREVISIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListApplicationRevisionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListApplicationRevisionsResponseUnmarshaller.Instance; return Invoke<ListApplicationRevisionsResponse>(VAR_LISTAPPLICATIONREVISIONSREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG |= VAR_LONG[][i]; } EnsureCapacity(VAR_LONG); return current.METHOD_NAME(VAR_INT, VAR_LONG[], VAR_INT, VAR_INT); }
public override MutableValue METHOD_NAME() { MutableValueDate VAR_MUTABLEVALUEDATE = new MutableValueDate(); VAR_MUTABLEVALUEDATE.Value = this.Value; VAR_MUTABLEVALUEDATE.Exists = this.Exists; return VAR_MUTABLEVALUEDATE; }
public virtual DeleteUserResponse METHOD_NAME(DeleteUserRequest VAR_DELETEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUserResponseUnmarshaller.Instance; return Invoke<DeleteUserResponse>(VAR_DELETEUSERREQUEST, VAR_VAR); }
public string METHOD_NAME() { return path; }
public virtual ListVerifiedEmailAddressesResponse METHOD_NAME() { return METHOD_NAME(new ListVerifiedEmailAddressesRequest()); }
public virtual DescribeStackResourceResponse METHOD_NAME(DescribeStackResourceRequest VAR_DESCRIBESTACKRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackResourceResponseUnmarshaller.Instance; return Invoke<DescribeStackResourceResponse>(VAR_DESCRIBESTACKRESOURCEREQUEST, VAR_VAR); }
public MetricsTagPredicate(Tag VAR_TAG) { this.VAR_TAG = VAR_TAG; }
public virtual void METHOD_NAME() { if (this.last == LITERAL_NULL) { throw new System.InvalidOperationException(); } this._enclosing.removeInternal(this.last); this.expectedModCount = this._enclosing.modCount; this.last = LITERAL_NULL; }
public virtual void METHOD_NAME(Executor VAR_EXECUTOR) { this.VAR_EXECUTOR = VAR_EXECUTOR; }
public bool METHOD_NAME() { EmbeddedObjectRefSubRecord VAR_EMBEDDEDOBJECTREFSUBRECORD = FindObjectRecord(); int? VAR_INT? = VAR_EMBEDDEDOBJECTREFSUBRECORD.StreamId; return VAR_INT? != LITERAL_NULL && VAR_INT? != LITERAL_INT; }
public K METHOD_NAME(K VAR_K) { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.findBounded(VAR_K, java.util.TreeMap.Relation.HIGHER); return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> != LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey() : default(K); }
public virtual void METHOD_NAME() { _ctx.Stop = _input.LT(-LITERAL_INT); if (_parseListeners != LITERAL_NULL) { TriggerExitRuleEvent(); } State = _ctx.invokingState; _ctx = (ParserRuleContext)_ctx.Parent; }
public virtual DeleteTrafficPolicyInstanceResponse METHOD_NAME(DeleteTrafficPolicyInstanceRequest VAR_DELETETRAFFICPOLICYINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficPolicyInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<DeleteTrafficPolicyInstanceResponse>(VAR_DELETETRAFFICPOLICYINSTANCEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(int VAR_INT) { int VAR_INT; try { var VAR_VAR = WARN.ToString(CultureInfo.InvariantCulture); VAR_INT = int.Parse(VAR_VAR, CultureInfo.InvariantCulture); } catch (Exception) { VAR_INT = POILogger.DEBUG; } if (VAR_INT >= VAR_INT) { return true; } return false; }
public override java.nio.ShortBuffer METHOD_NAME(short VAR_SHORT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_SHORT; return this; }
public virtual DeletePublicKeyResponse METHOD_NAME(DeletePublicKeyRequest VAR_DELETEPUBLICKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePublicKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePublicKeyResponseUnmarshaller.Instance; return Invoke<DeletePublicKeyResponse>(VAR_DELETEPUBLICKEYREQUEST, VAR_VAR); }
public override ObjectId METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { return Delegate().METHOD_NAME(VAR_INT, VAR_BYTE[]); }
public virtual DeleteDBProxyResponse METHOD_NAME(DeleteDBProxyRequest VAR_DELETEDBPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBProxyResponseUnmarshaller.Instance; return Invoke<DeleteDBProxyResponse>(VAR_DELETEDBPROXYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { if (count == entries.Length) { Grow(); } entries[count++] = VAR_INT; }
public PortugueseStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DisconnectParticipantResponse METHOD_NAME(DisconnectParticipantRequest VAR_DISCONNECTPARTICIPANTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisconnectParticipantRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisconnectParticipantResponseUnmarshaller.Instance; return Invoke<DisconnectParticipantResponse>(VAR_DISCONNECTPARTICIPANTREQUEST, VAR_VAR); }
public override ObjectId METHOD_NAME() { return LITERAL_NULL; }
public virtual DeleteParameterGroupResponse METHOD_NAME(DeleteParameterGroupRequest VAR_DELETEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteParameterGroupResponseUnmarshaller.Instance; return Invoke<DeleteParameterGroupResponse>(VAR_DELETEPARAMETERGROUPREQUEST, VAR_VAR); }
public TextRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_horizontalAlignment = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_2_verticalAlignment = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_3_DisplayMode = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_rgbColor = VAR_RECORDINPUTSTREAM.ReadInt(); field_5_x = VAR_RECORDINPUTSTREAM.ReadInt(); field_6_y = VAR_RECORDINPUTSTREAM.ReadInt(); field_7_width = VAR_RECORDINPUTSTREAM.ReadInt(); field_8_height = VAR_RECORDINPUTSTREAM.ReadInt(); field_9_options1 = VAR_RECORDINPUTSTREAM.ReadShort(); field_10_IndexOfColorValue = VAR_RECORDINPUTSTREAM.ReadShort(); field_11_options2 = VAR_RECORDINPUTSTREAM.ReadShort(); field_12_textRotation = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual NGit.Api.ReflogCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT != LITERAL_NULL) { foreach (E element in a) { if (VAR_OBJECT.Equals(element)) { return true; } } } else { foreach (E element in a) { if ((object)element == LITERAL_NULL) { return true; } } } return false; }
public virtual CreateFpgaImageResponse METHOD_NAME(CreateFpgaImageRequest VAR_CREATEFPGAIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFpgaImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFpgaImageResponseUnmarshaller.Instance; return Invoke<CreateFpgaImageResponse>(VAR_CREATEFPGAIMAGEREQUEST, VAR_VAR); }
public virtual DescribeAggregateIdFormatResponse METHOD_NAME(DescribeAggregateIdFormatRequest VAR_DESCRIBEAGGREGATEIDFORMATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAggregateIdFormatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAggregateIdFormatResponseUnmarshaller.Instance; return Invoke<DescribeAggregateIdFormatResponse>(VAR_DESCRIBEAGGREGATEIDFORMATREQUEST, VAR_VAR); }
public ListMultipartUploadsRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public DeleteRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public static BOFRecord METHOD_NAME() { return new BOFRecord(BOFRecordType.Worksheet); }
public override java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_FLOAT[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_FLOAT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.PopMode(); }
public DeleteImageRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { if (this.GetType().GetProperty(LITERAL_STRING) != LITERAL_NULL && this.GetType().GetProperty(LITERAL_STRING) != LITERAL_NULL) { this.GetType().GetProperty(LITERAL_STRING).SetValue(this, Endpoint.endpointMap, LITERAL_NULL); this.GetType().GetProperty(LITERAL_STRING).SetValue(this, Endpoint.endpointRegionalType, LITERAL_NULL); } }
public virtual CreateImageBuilderResponse METHOD_NAME(CreateImageBuilderRequest VAR_CREATEIMAGEBUILDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateImageBuilderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateImageBuilderResponseUnmarshaller.Instance; return Invoke<CreateImageBuilderResponse>(VAR_CREATEIMAGEBUILDERREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Row); VAR_ILITTLEENDIANOUTPUT.WriteShort(Column); VAR_ILITTLEENDIANOUTPUT.WriteShort(XFIndex); }
public virtual UpdateSegmentResponse METHOD_NAME(UpdateSegmentRequest VAR_UPDATESEGMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSegmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSegmentResponseUnmarshaller.Instance; return Invoke<UpdateSegmentResponse>(VAR_UPDATESEGMENTREQUEST, VAR_VAR); }
public virtual DescribeSnapshotsResponse METHOD_NAME() { return METHOD_NAME(new DescribeSnapshotsRequest()); }
public virtual NGit.Api.AddNoteCommand METHOD_NAME(RevObject VAR_REVOBJECT) { CheckCallable(); this.VAR_REVOBJECT = VAR_REVOBJECT; return this; }
public override string METHOD_NAME() { return path; }
public virtual GetMetricStatisticsResponse METHOD_NAME(GetMetricStatisticsRequest VAR_GETMETRICSTATISTICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMetricStatisticsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMetricStatisticsResponseUnmarshaller.Instance; return Invoke<GetMetricStatisticsResponse>(VAR_GETMETRICSTATISTICSREQUEST, VAR_VAR); }
public virtual DescribeAutoScalingInstancesResponse METHOD_NAME(DescribeAutoScalingInstancesRequest VAR_DESCRIBEAUTOSCALINGINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAutoScalingInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAutoScalingInstancesResponseUnmarshaller.Instance; return Invoke<DescribeAutoScalingInstancesResponse>(VAR_DESCRIBEAUTOSCALINGINSTANCESREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new KStemFilter(VAR_TOKENSTREAM); }
public CreateEnvironmentRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _environmentName = VAR_STRING; }
public static java.nio.LongBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteLongArrayBuffer(VAR_INT); }
public virtual GetIdentityMailFromDomainAttributesResponse METHOD_NAME(GetIdentityMailFromDomainAttributesRequest VAR_GETIDENTITYMAILFROMDOMAINATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityMailFromDomainAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityMailFromDomainAttributesResponseUnmarshaller.Instance; return Invoke<GetIdentityMailFromDomainAttributesResponse>(VAR_GETIDENTITYMAILFROMDOMAINATTRIBUTESREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return force; }
public virtual DescribeImageScanFindingsResponse METHOD_NAME(DescribeImageScanFindingsRequest VAR_DESCRIBEIMAGESCANFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImageScanFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImageScanFindingsResponseUnmarshaller.Instance; return Invoke<DescribeImageScanFindingsResponse>(VAR_DESCRIBEIMAGESCANFINDINGSREQUEST, VAR_VAR); }
public virtual SendContactMethodVerificationResponse METHOD_NAME(SendContactMethodVerificationRequest VAR_SENDCONTACTMETHODVERIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendContactMethodVerificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendContactMethodVerificationResponseUnmarshaller.Instance; return Invoke<SendContactMethodVerificationResponse>(VAR_SENDCONTACTMETHODVERIFICATIONREQUEST, VAR_VAR); }
public virtual DeleteReceiptFilterResponse METHOD_NAME(DeleteReceiptFilterRequest VAR_DELETERECEIPTFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteReceiptFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteReceiptFilterResponseUnmarshaller.Instance; return Invoke<DeleteReceiptFilterResponse>(VAR_DELETERECEIPTFILTERREQUEST, VAR_VAR); }
public void METHOD_NAME(ValueEval VAR_VALUEEVAL, CellCacheEntry[] VAR_CELLCACHEENTRY[], FormulaUsedBlankCellSet VAR_FORMULAUSEDBLANKCELLSET) { UpdateValue(VAR_VALUEEVAL); SetSensitiveInputCells(VAR_CELLCACHEENTRY[]); _usedBlankCellGroup = VAR_FORMULAUSEDBLANKCELLSET; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subfilters.Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(subfilters[i].METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is FrenchStemmer; }
public MergedCellsTable() { _mergedRegions = new List<CellRangeAddress>(); }
public PrecedencePredicateTransition(ATNState VAR_ATNSTATE, int VAR_INT) : base(target) { this.VAR_INT = VAR_INT; }
public override String METHOD_NAME() { throw new RecordFormatException(LITERAL_STRING); }
public override IParseTree METHOD_NAME(int VAR_INT) { return children != LITERAL_NULL && VAR_INT >= LITERAL_INT && VAR_INT < children.Count ? children[VAR_INT] : LITERAL_NULL; }
public virtual java.util.ListIterator<E> METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public virtual java.lang.StringBuffer METHOD_NAME() { return buf; }
public BytesRefHash(ByteBlockPool VAR_BYTEBLOCKPOOL, int VAR_INT, BytesStartArray VAR_BYTESSTARTARRAY) { hashSize = VAR_INT; hashHalfSize = hashSize >> LITERAL_INT; hashMask = hashSize - LITERAL_INT; this.VAR_BYTEBLOCKPOOL = VAR_BYTEBLOCKPOOL; ids = new int[hashSize]; Arrays.Fill(ids, -LITERAL_INT); this.VAR_BYTESSTARTARRAY = VAR_BYTESSTARTARRAY; bytesStart = VAR_BYTESSTARTARRAY.Init(); bytesUsed = VAR_BYTESSTARTARRAY.BytesUsed() == LITERAL_NULL ? Counter.NewCounter() : VAR_BYTESSTARTARRAY.BytesUsed(); bytesUsed.AddAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT32); }
public virtual GetIdentityDkimAttributesResponse METHOD_NAME(GetIdentityDkimAttributesRequest VAR_GETIDENTITYDKIMATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityDkimAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityDkimAttributesResponseUnmarshaller.Instance; return Invoke<GetIdentityDkimAttributesResponse>(VAR_GETIDENTITYDKIMATTRIBUTESREQUEST, VAR_VAR); }
public virtual DescribeSubnetsResponse METHOD_NAME(DescribeSubnetsRequest VAR_DESCRIBESUBNETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSubnetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSubnetsResponseUnmarshaller.Instance; return Invoke<DescribeSubnetsResponse>(VAR_DESCRIBESUBNETSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { if (TextLength > LITERAL_INT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(TextLength); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_2_hasMultibyte ? LITERAL_INT : LITERAL_INT); if (field_2_hasMultibyte) { StringUtil.PutUnicodeLE(field_3_text, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(field_3_text, VAR_ILITTLEENDIANOUTPUT); } } }
public DeleteMessageRequest(string VAR_STRING, string VAR_STRING) { _queueUrl = VAR_STRING; _receiptHandle = VAR_STRING; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { int VAR_INT; char VAR_CHAR = m_root; int VAR_INT = VAR_INT; char VAR_CHAR; while (VAR_CHAR != LITERAL_INT) { if (m_sc[VAR_CHAR] == LITERAL_INT) { if (StrCmp(VAR_CHAR[], VAR_INT, m_kv.Array, m_lo[VAR_CHAR]) == LITERAL_INT) { return m_eq[VAR_CHAR]; } else { return -LITERAL_INT; } } VAR_CHAR = VAR_CHAR[][VAR_INT]; VAR_INT = VAR_CHAR - m_sc[VAR_CHAR]; if (VAR_INT == LITERAL_INT) { if (VAR_CHAR == LITERAL_INT) { return m_eq[VAR_CHAR]; } VAR_INT++; VAR_CHAR = m_eq[VAR_CHAR]; } else if (VAR_INT < LITERAL_INT) { VAR_CHAR = m_lo[VAR_CHAR]; } else { VAR_CHAR = m_hi[VAR_CHAR]; } } return -LITERAL_INT; }
public virtual DescribeIdFormatResponse METHOD_NAME(DescribeIdFormatRequest VAR_DESCRIBEIDFORMATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdFormatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdFormatResponseUnmarshaller.Instance; return Invoke<DescribeIdFormatResponse>(VAR_DESCRIBEIDFORMATREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT, char VAR_CHAR) { if (VAR_INT < LITERAL_INT || VAR_INT >= count) { throw indexAndLength(VAR_INT); } if (shared) { value = (char[])value.Clone(); shared = false; } value[VAR_INT] = VAR_CHAR; }
public virtual FieldFragList METHOD_NAME(FieldPhraseList VAR_FIELDPHRASELIST, int VAR_INT) { FieldFragList VAR_FIELDFRAGLIST = new SimpleFieldFragList(VAR_INT); List<WeightedPhraseInfo> VAR_LIST<WEIGHTEDPHRASEINFO> = new List<WeightedPhraseInfo>(); using (IEnumerator<WeightedPhraseInfo> ite = VAR_FIELDPHRASELIST.PhraseList.GetEnumerator()) { WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO = LITERAL_NULL; while (true) { if (!ite.MoveNext()) break; VAR_WEIGHTEDPHRASEINFO = ite.Current; if (VAR_WEIGHTEDPHRASEINFO == LITERAL_NULL) break; VAR_LIST<WEIGHTEDPHRASEINFO>.Add(VAR_WEIGHTEDPHRASEINFO); } if (VAR_LIST<WEIGHTEDPHRASEINFO>.Count > LITERAL_INT) VAR_FIELDFRAGLIST.Add(LITERAL_INT, int.MaxValue, VAR_LIST<WEIGHTEDPHRASEINFO>); return VAR_FIELDFRAGLIST; } }
public virtual IList<string> METHOD_NAME() { return modifiedList; }
public virtual int METHOD_NAME() { lock (this) { return elementData.Length; } }
public GermanLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public void METHOD_NAME(short VAR_SHORT, int VAR_INT, int VAR_INT, int VAR_INT, short VAR_SHORT, int VAR_INT, int VAR_INT, int VAR_INT) { CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_SHORT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_SHORT, LITERAL_INT, LITERAL_INT, LITERAL_STRING); CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT * LITERAL_INT, LITERAL_STRING); CheckRange(VAR_INT, LITERAL_INT, LITERAL_INT * LITERAL_INT, LITERAL_STRING); this.Col1 = VAR_SHORT; this.Row1 = VAR_INT; this.Dx1 = VAR_INT; this.Dy1 = VAR_INT; this.Col2 = VAR_SHORT; this.Row2 = VAR_INT; this.Dx2 = VAR_INT; this.Dy2 = VAR_INT; }
public static ErrorEval METHOD_NAME(int VAR_INT) { FormulaError VAR_FORMULAERROR = FormulaError.ForInt(VAR_INT); if (evals.ContainsKey(VAR_FORMULAERROR)) return evals[VAR_FORMULAERROR]; throw new RuntimeException(LITERAL_STRING + VAR_INT); }
public static long METHOD_NAME(byte[] VAR_BYTE[]) { CRC32 VAR_CRC32 = new CRC32(); return (long)VAR_CRC32.ByteCRC(ref VAR_BYTE[]); }
public virtual RevCommit METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevCommit VAR_REVCOMMIT = (RevCommit)objects.Get(VAR_ANYOBJECTID); if (VAR_REVCOMMIT == LITERAL_NULL) { VAR_REVCOMMIT = CreateCommit(VAR_ANYOBJECTID); objects.Add(VAR_REVCOMMIT); } return VAR_REVCOMMIT; }
public override string METHOD_NAME() { QueryText VAR_QUERYTEXT = this.values[LITERAL_INT]; return LITERAL_STRING + VAR_QUERYTEXT.Begin + LITERAL_STRING + VAR_QUERYTEXT.End + LITERAL_STRING + GetPathString() + LITERAL_STRING; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { StopFilter VAR_STOPFILTER = new StopFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, stopWords); VAR_STOPFILTER.SetEnablePositionIncrements(enablePositionIncrements); return VAR_STOPFILTER; }
public virtual DeleteStreamProcessorResponse METHOD_NAME(DeleteStreamProcessorRequest VAR_DELETESTREAMPROCESSORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStreamProcessorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStreamProcessorResponseUnmarshaller.Instance; return Invoke<DeleteStreamProcessorResponse>(VAR_DELETESTREAMPROCESSORREQUEST, VAR_VAR); }
public RuleWithSetExceptions(string VAR_STRING, int VAR_INT, string VAR_STRING, string[] VAR_STRING[]) : base(suffix, min, replacement) { for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (!VAR_STRING[][i].EndsWith(VAR_STRING, StringComparison.Ordinal)) { throw new Exception(LITERAL_STRING + VAR_STRING[][i] + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } } this.m_exceptions = new CharArraySet(LuceneVersion.LUCENE_CURRENT, VAR_STRING[], false); }
public virtual CreateClientVpnRouteResponse METHOD_NAME(CreateClientVpnRouteRequest VAR_CREATECLIENTVPNROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClientVpnRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClientVpnRouteResponseUnmarshaller.Instance; return Invoke<CreateClientVpnRouteResponse>(VAR_CREATECLIENTVPNROUTEREQUEST, VAR_VAR); }
public RangeTransition(ATNState VAR_ATNSTATE, int VAR_INT, int VAR_INT) : base(target) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public TypeAsPayloadTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual void METHOD_NAME(int[] VAR_INT[], int VAR_INT) { w1 = VAR_INT[][VAR_INT]; w2 = VAR_INT[][VAR_INT + LITERAL_INT]; w3 = VAR_INT[][VAR_INT + LITERAL_INT]; w4 = VAR_INT[][VAR_INT + LITERAL_INT]; w5 = VAR_INT[][VAR_INT + LITERAL_INT]; }
public ICUNormalizer2Filter(TokenStream VAR_TOKENSTREAM, Normalizer2 VAR_NORMALIZER2) : base(input) { this.VAR_NORMALIZER2 = VAR_NORMALIZER2; this.termAtt = AddAttribute<ICharTermAttribute>(); }
public static TreeFilter METHOD_NAME(TreeFilter VAR_TREEFILTER) { return new NGit.Treewalk.Filter.NotTreeFilter(VAR_TREEFILTER); }
public virtual bool METHOD_NAME() { return this.type == TYPE_MALFORMED_INPUT; }
public override void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT, int VAR_INT, int VAR_INT) { _parentContextStack.Push(Tuple.Create(RuleContext, VAR_PARSERRULECONTEXT.invokingState)); base.METHOD_NAME(VAR_PARSERRULECONTEXT, VAR_INT, VAR_INT, VAR_INT); }
public virtual DescribeAddressesResponse METHOD_NAME(DescribeAddressesRequest VAR_DESCRIBEADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAddressesResponseUnmarshaller.Instance; return Invoke<DescribeAddressesResponse>(VAR_DESCRIBEADDRESSESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return GetEstimatedNumberUniqueValuesAllowingForCollisions(_bloomSize, _filter.Cardinality()); }
public virtual DescribeTransformJobResponse METHOD_NAME(DescribeTransformJobRequest VAR_DESCRIBETRANSFORMJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransformJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransformJobResponseUnmarshaller.Instance; return Invoke<DescribeTransformJobResponse>(VAR_DESCRIBETRANSFORMJOBREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; VAR_LONG[][VAR_INT++] = (long)((ulong)VAR_LONG >> LITERAL_INT); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; long VAR_LONG = VAR_LONG[][VAR_INT++]; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; long VAR_LONG = VAR_LONG[][VAR_INT++]; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = VAR_LONG & LITERAL_INT; } }
public virtual FieldInfo METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } Index.FieldInfo VAR_INDEX.FIELDINFO; byNumber.TryGetValue(VAR_INT, out VAR_INDEX.FIELDINFO); return VAR_INDEX.FIELDINFO; }
public virtual DescribeIdentityPoolResponse METHOD_NAME(DescribeIdentityPoolRequest VAR_DESCRIBEIDENTITYPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityPoolResponseUnmarshaller.Instance; return Invoke<DescribeIdentityPoolResponse>(VAR_DESCRIBEIDENTITYPOOLREQUEST, VAR_VAR); }
public static string METHOD_NAME(XmlNode VAR_XMLNODE) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); GetTextBuffer(VAR_XMLNODE, VAR_STRINGBUILDER); return VAR_STRINGBUILDER.ToString(); }
public virtual void METHOD_NAME(int VAR_INT) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT >= LITERAL_INT) { removeAt(VAR_INT); } }
public virtual GetCurrentMetricDataResponse METHOD_NAME(GetCurrentMetricDataRequest VAR_GETCURRENTMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCurrentMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCurrentMetricDataResponseUnmarshaller.Instance; return Invoke<GetCurrentMetricDataResponse>(VAR_GETCURRENTMETRICDATAREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, FileMode VAR_FILEMODE, AnyObjectId VAR_ANYOBJECTID) { METHOD_NAME(Constants.Encode(VAR_STRING), VAR_FILEMODE, VAR_ANYOBJECTID); }
public string METHOD_NAME() { return replacementChars; }
public WindowProtectRecord(bool VAR_BOOL) : this(LITERAL_INT) { Protect = (VAR_BOOL); }
public static bool METHOD_NAME(long[] VAR_LONG[], long[] VAR_LONG[]) { if (VAR_LONG[] == VAR_LONG[]) { return true; } if (VAR_LONG[] == LITERAL_NULL || VAR_LONG[] == LITERAL_NULL || VAR_LONG[].Length != VAR_LONG[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_LONG[].Length; i++) { if (VAR_LONG[][i] != VAR_LONG[][i]) { return false; } } } return true; }
public override PredictionContext METHOD_NAME(int VAR_INT) { System.Diagnostics.Debug.Assert(VAR_INT == LITERAL_INT); return parent; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { return LITERAL_STRING; }
public override SeekStatus METHOD_NAME(BytesRef VAR_BYTESREF) { throw new System.NotSupportedException(this.GetType().Name + LITERAL_STRING); }
public BindInstance2VpcRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual UpdateTableResponse METHOD_NAME(string VAR_STRING, ProvisionedThroughput VAR_PROVISIONEDTHROUGHPUT) { var VAR_VAR = new UpdateTableRequest(); VAR_VAR.TableName = VAR_STRING; VAR_VAR.ProvisionedThroughput = VAR_PROVISIONEDTHROUGHPUT; return METHOD_NAME(VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { return @in.METHOD_NAME(docMap.NewToOld(VAR_INT)); }
public virtual GetQueueAttributesResponse METHOD_NAME(GetQueueAttributesRequest VAR_GETQUEUEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQueueAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQueueAttributesResponseUnmarshaller.Instance; return Invoke<GetQueueAttributesResponse>(VAR_GETQUEUEATTRIBUTESREQUEST, VAR_VAR); }
public virtual UpdateUserRoutingProfileResponse METHOD_NAME(UpdateUserRoutingProfileRequest VAR_UPDATEUSERROUTINGPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserRoutingProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserRoutingProfileResponseUnmarshaller.Instance; return Invoke<UpdateUserRoutingProfileResponse>(VAR_UPDATEUSERROUTINGPROFILEREQUEST, VAR_VAR); }
public int METHOD_NAME() { int VAR_INT = _highIx - _lowIx; if (VAR_INT < LITERAL_INT) { return -LITERAL_INT; } return _lowIx + (VAR_INT / LITERAL_INT); }
public virtual MergeCommandResult METHOD_NAME() { return this.mergeResult; }
public void METHOD_NAME() { int VAR_INT = _record.Row; int VAR_INT = _record.Column; this._sheet.Sheet.SetActiveCell(VAR_INT, VAR_INT); }
public virtual InviteMembersResponse METHOD_NAME(InviteMembersRequest VAR_INVITEMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InviteMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InviteMembersResponseUnmarshaller.Instance; return Invoke<InviteMembersResponse>(VAR_INVITEMEMBERSREQUEST, VAR_VAR); }
public FormatTrackingHSSFListener(IHSSFListener VAR_IHSSFLISTENER) { this.VAR_IHSSFLISTENER = VAR_IHSSFLISTENER; }
public UpdateDistributionRequest(string VAR_STRING, string VAR_STRING, DistributionConfig VAR_DISTRIBUTIONCONFIG) { _id = VAR_STRING; _ifMatch = VAR_STRING; _distributionConfig = VAR_DISTRIBUTIONCONFIG; }
public GetLogEventsRequest(string VAR_STRING, string VAR_STRING) { _logGroupName = VAR_STRING; _logStreamName = VAR_STRING; }
public override string METHOD_NAME() { return LITERAL_STRING + NumDocs + LITERAL_STRING + EstimatedSegmentSize + LITERAL_STRING; }
public virtual GrowableWriter METHOD_NAME(int VAR_INT) { GrowableWriter VAR_GROWABLEWRITER = new GrowableWriter(BitsPerValue, VAR_INT, acceptableOverheadRatio); int VAR_INT = Math.Min(Count, VAR_INT); PackedInt32s.Copy(current, LITERAL_INT, VAR_GROWABLEWRITER, LITERAL_INT, VAR_INT, PackedInt32s.DEFAULT_BUFFER_SIZE); return VAR_GROWABLEWRITER; }
public Analyzer(ReuseStrategy VAR_REUSESTRATEGY) { this.VAR_REUSESTRATEGY = VAR_REUSESTRATEGY; }
public void METHOD_NAME() { index = -LITERAL_INT; line = LITERAL_INT; charPos = -LITERAL_INT; dfaState = LITERAL_NULL; }
field_2_unknownFormulaData = new byte[] { LITERAL_INT, LITERAL_INT, LITERAL_INT, LITERAL_INT, LITERAL_INT, }; field_6_unknown = EMPTY_BYTE_ARRAY; field_4_ole_classname = LITERAL_NULL; field_4_unknownByte = LITERAL_NULL;
public override string METHOD_NAME() { return LITERAL_STRING + Doc + LITERAL_STRING + Score + LITERAL_STRING + ShardIndex; }
public static double METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT) { double VAR_DOUBLE = double.NaN; VAR_INT--; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length > VAR_INT && VAR_INT >= LITERAL_INT) { Array.Sort(VAR_DOUBLE[]); VAR_DOUBLE = VAR_DOUBLE[][VAR_DOUBLE[].Length - VAR_INT - LITERAL_INT]; } return VAR_DOUBLE; }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { return costs[VAR_INT][VAR_INT]; }
public virtual void METHOD_NAME() { Arrays.METHOD_NAME(entries, LITERAL_INT, count); }
public virtual StemmerOverrideMap METHOD_NAME() { ByteSequenceOutputs VAR_BYTESEQUENCEOUTPUTS = ByteSequenceOutputs.Singleton; Builder<BytesRef> VAR_BUILDER<BYTESREF> = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE4, VAR_BYTESEQUENCEOUTPUTS); int[] VAR_INT[] = hash.Sort(BytesRef.UTF8SortedAsUnicodeComparer); Int32sRef VAR_INT32SREF = new Int32sRef(); int VAR_INT = hash.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT = VAR_INT[][i]; BytesRef VAR_BYTESREF = hash.Get(VAR_INT, spare); UnicodeUtil.UTF8toUTF32(VAR_BYTESREF, VAR_INT32SREF); VAR_BUILDER<BYTESREF>.Add(VAR_INT32SREF, new BytesRef(outputValues[VAR_INT])); } return new StemmerOverrideMap(VAR_BUILDER<BYTESREF>.Finish(), ignoreCase); }
public LexerCustomAction(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public virtual DescribeDevicePolicyConfigurationResponse METHOD_NAME(DescribeDevicePolicyConfigurationRequest VAR_DESCRIBEDEVICEPOLICYCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDevicePolicyConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDevicePolicyConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeDevicePolicyConfigurationResponse>(VAR_DESCRIBEDEVICEPOLICYCONFIGURATIONREQUEST, VAR_VAR); }
public CreateLBCookieStickinessPolicyRequest(string VAR_STRING, string VAR_STRING) { _loadBalancerName = VAR_STRING; _policyName = VAR_STRING; }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public static AttrPtg METHOD_NAME(SpaceType VAR_SPACETYPE, int VAR_INT) { int VAR_INT = ((int)VAR_SPACETYPE) & LITERAL_INT | (VAR_INT << LITERAL_INT) & LITERAL_INT; return new AttrPtg(space.Set(LITERAL_INT), VAR_INT, LITERAL_NULL, -LITERAL_INT); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) return true; return false; }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual DescribeAccountResponse METHOD_NAME(DescribeAccountRequest VAR_DESCRIBEACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAccountResponseUnmarshaller.Instance; return Invoke<DescribeAccountResponse>(VAR_DESCRIBEACCOUNTREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (Row row in rows) VAR_INT += row.METHOD_NAME(); return VAR_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { MutableValueBool VAR_MUTABLEVALUEBOOL = (MutableValueBool)VAR_OBJECT; return Value == VAR_MUTABLEVALUEBOOL.Value && Exists == VAR_MUTABLEVALUEBOOL.Exists; }
public override K METHOD_NAME() { return this.nextEntry().key; }
public virtual CreateDBClusterResponse METHOD_NAME(CreateDBClusterRequest VAR_CREATEDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBClusterResponseUnmarshaller.Instance; return Invoke<CreateDBClusterResponse>(VAR_CREATEDBCLUSTERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (!(VAR_OBJECT is FormatRun)) { return false; } FormatRun VAR_FORMATRUN = (FormatRun)VAR_OBJECT; return _character == VAR_FORMATRUN._character && _fontIndex == VAR_FORMATRUN._fontIndex; }
public static ValueEval METHOD_NAME(ValueEval VAR_VALUEEVAL, int VAR_INT, int VAR_INT) { ValueEval VAR_VALUEEVAL; if (VAR_VALUEEVAL is RefEval) { VAR_VALUEEVAL = ChooseSingleElementFromRef((RefEval)VAR_VALUEEVAL); } else if (VAR_VALUEEVAL is AreaEval) { VAR_VALUEEVAL = ChooseSingleElementFromArea((AreaEval)VAR_VALUEEVAL, VAR_INT, VAR_INT); } else { VAR_VALUEEVAL = VAR_VALUEEVAL; } if (VAR_VALUEEVAL is ErrorEval) { throw new EvaluationException((ErrorEval)VAR_VALUEEVAL); } return VAR_VALUEEVAL; }
public GermanStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual ModifyClusterSubnetGroupResponse METHOD_NAME(ModifyClusterSubnetGroupRequest VAR_MODIFYCLUSTERSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyClusterSubnetGroupResponse>(VAR_MODIFYCLUSTERSUBNETGROUPREQUEST, VAR_VAR); }
public virtual FacetLabel METHOD_NAME(int VAR_INT) { if (VAR_INT >= this.Length || VAR_INT < LITERAL_INT) { return this; } else { return new FacetLabel(this, VAR_INT); } }
public IDataValidationConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING) { return DVConstraint.CreateNumericConstraint(ValidationType.DECIMAL, VAR_INT, VAR_STRING, VAR_STRING); }
public override java.nio.ByteBuffer METHOD_NAME(byte VAR_BYTE) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_BYTE; return this; }
public virtual DescribeUserProfileResponse METHOD_NAME(DescribeUserProfileRequest VAR_DESCRIBEUSERPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUserProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUserProfileResponseUnmarshaller.Instance; return Invoke<DescribeUserProfileResponse>(VAR_DESCRIBEUSERPROFILEREQUEST, VAR_VAR); }
public K METHOD_NAME() { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.endpoint(true); if (VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> == LITERAL_NULL) { throw new java.util.NoSuchElementException(); } return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey(); }
public virtual DescribeAutoScalingGroupsResponse METHOD_NAME(DescribeAutoScalingGroupsRequest VAR_DESCRIBEAUTOSCALINGGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAutoScalingGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAutoScalingGroupsResponseUnmarshaller.Instance; return Invoke<DescribeAutoScalingGroupsResponse>(VAR_DESCRIBEAUTOSCALINGGROUPSREQUEST, VAR_VAR); }
public override Type METHOD_NAME() { return typeof(RefsChangedListener); }
public int METHOD_NAME(int VAR_INT) { return WORD_COST; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(field_1_horizontalAlignment); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_2_verticalAlignment); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_DisplayMode); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_rgbColor); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_5_x); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_6_y); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_7_width); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_8_height); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_9_options1); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_10_IndexOfColorValue); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_11_options2); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_12_textRotation); }
public BRAIRecord METHOD_NAME() { return dataCategoryLabels; }
public override void METHOD_NAME(string VAR_STRING) { key = collator.GetRawCollationKey(VAR_STRING, key); bytes.Bytes = key.Bytes; bytes.Offset = LITERAL_INT; bytes.Length = key.Length; }
public override string METHOD_NAME() { return LITERAL_STRING + Dim + LITERAL_STRING + Arrays.METHOD_NAME(Path) + LITERAL_STRING; }
public static long METHOD_NAME(long VAR_LONG, long VAR_LONG) { VAR_LONG = VAR_LONG < LITERAL_INT ? -VAR_LONG : VAR_LONG; VAR_LONG = VAR_LONG < LITERAL_INT ? -VAR_LONG : VAR_LONG; if (VAR_LONG == LITERAL_INT) { return VAR_LONG; } else if (VAR_LONG == LITERAL_INT) { return VAR_LONG; } int VAR_INT = (VAR_LONG | VAR_LONG).TrailingZeroCount(); VAR_LONG = (long)((ulong)VAR_LONG >> VAR_LONG.TrailingZeroCount()); while (true) { VAR_LONG = (long)((ulong)VAR_LONG >> VAR_LONG.TrailingZeroCount()); if (VAR_LONG == VAR_LONG) { break; } else if (VAR_LONG > VAR_LONG || VAR_LONG == long.MinValue) { long VAR_LONG = VAR_LONG; VAR_LONG = VAR_LONG; VAR_LONG = VAR_LONG; } if (VAR_LONG == LITERAL_INT) { break; } VAR_LONG -= VAR_LONG; } return VAR_LONG << VAR_INT; }
public virtual NGit.BatchRefUpdate METHOD_NAME() { refLogMessage = LITERAL_NULL; refLogIncludeResult = false; return this; }
public static int METHOD_NAME(Ref VAR_REF, string VAR_STRING) { return Sharpen.Runtime.CompareOrdinal(VAR_REF.GetName(), VAR_STRING); }
public virtual CreateLoadBalancerTlsCertificateResponse METHOD_NAME(CreateLoadBalancerTlsCertificateRequest VAR_CREATELOADBALANCERTLSCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLoadBalancerTlsCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLoadBalancerTlsCertificateResponseUnmarshaller.Instance; return Invoke<CreateLoadBalancerTlsCertificateResponse>(VAR_CREATELOADBALANCERTLSCERTIFICATEREQUEST, VAR_VAR); }
public virtual GetDocumentationPartsResponse METHOD_NAME(GetDocumentationPartsRequest VAR_GETDOCUMENTATIONPARTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentationPartsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentationPartsResponseUnmarshaller.Instance; return Invoke<GetDocumentationPartsResponse>(VAR_GETDOCUMENTATIONPARTSREQUEST, VAR_VAR); }
public override Sharpen.Iterator<RevFlag> METHOD_NAME() { Sharpen.Iterator<RevFlag> VAR_SHARPEN.ITERATOR<REVFLAG> = active.METHOD_NAME(); return new _Iterator_132(this, VAR_SHARPEN.ITERATOR<REVFLAG>); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!(VAR_OBJECT is Sort)) { return false; } Sort VAR_SORT = (Sort)VAR_OBJECT; return Arrays.METHOD_NAME(this.fields, VAR_SORT.fields); }
public override bool METHOD_NAME(object VAR_OBJECT) { bool VAR_BOOL = false; if ((VAR_OBJECT != LITERAL_NULL) && (VAR_OBJECT.GetType() == this.GetType())) { if (this == VAR_OBJECT) { VAR_BOOL = true; } else { POIFSDocumentPath VAR_POIFSDOCUMENTPATH = (POIFSDocumentPath)VAR_OBJECT; if (VAR_POIFSDOCUMENTPATH.components.Length == this.components.Length) { VAR_BOOL = true; for (int i = LITERAL_INT; i < this.components.Length; i++) { if (!VAR_POIFSDOCUMENTPATH.components[i].METHOD_NAME(this.components[i])) { VAR_BOOL = false; break; } } } } } return VAR_BOOL; }
public SearchImageRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public RevFlagSet() { active = new AList<RevFlag>(); }
public virtual BatchDisassociateUserStackResponse METHOD_NAME(BatchDisassociateUserStackRequest VAR_BATCHDISASSOCIATEUSERSTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDisassociateUserStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDisassociateUserStackResponseUnmarshaller.Instance; return Invoke<BatchDisassociateUserStackResponse>(VAR_BATCHDISASSOCIATEUSERSTACKREQUEST, VAR_VAR); }
public virtual java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public InputStreamDataInput(Stream VAR_STREAM) { this._reader = new BinaryReader(VAR_STREAM); }
public static char[] METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT + VAR_CHAR[].Length); }
public virtual void METHOD_NAME(string VAR_STRING) { provider.Get(uri, new CredentialItem.InformationalMessage(VAR_STRING)); }
public virtual DeregisterTypeResponse METHOD_NAME(DeregisterTypeRequest VAR_DEREGISTERTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterTypeResponseUnmarshaller.Instance; return Invoke<DeregisterTypeResponse>(VAR_DEREGISTERTYPEREQUEST, VAR_VAR); }
public void METHOD_NAME(RevFlag VAR_REVFLAG) { flags |= VAR_REVFLAG.mask; }
public IntList(IntList VAR_INTLIST) : this(list._array.Length) { Array.Copy(VAR_INTLIST._array, LITERAL_INT, _array, LITERAL_INT, _array.Length); _limit = VAR_INTLIST._limit; }
public int METHOD_NAME(int VAR_INT) { return _iBook.GetFirstSheetIndexFromExternSheetIndex(VAR_INT); }
public ExternalSheet METHOD_NAME(String VAR_STRING, string VAR_STRING, int VAR_INT) { throw new InvalidOperationException(LITERAL_STRING); }
public CellRangeAddress8Bit METHOD_NAME() { return new CellRangeAddress8Bit(FirstRow, LastRow, FirstColumn, LastColumn); }
public override bool METHOD_NAME(object VAR_OBJECT) { var VAR_VAR = VAR_OBJECT as Document; if (VAR_VAR == LITERAL_NULL) return false; if (Keys.Count != VAR_VAR.Keys.Count) return false; foreach (var key in Keys) { if (!VAR_VAR.ContainsKey(key)) return false; var VAR_VAR = this[key]; var VAR_VAR = VAR_VAR[key]; if (!VAR_VAR.METHOD_NAME(VAR_VAR)) return false; } return true; }
public virtual ListMembersResponse METHOD_NAME(ListMembersRequest VAR_LISTMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMembersResponseUnmarshaller.Instance; return Invoke<ListMembersResponse>(VAR_LISTMEMBERSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (BlockRevQueue.Block q = head; q != LITERAL_NULL; q = q.next) { for (int i = q.headIndex; i < q.tailIndex; i++) { Describe(VAR_STRINGBUILDER, q.commits[i]); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME() { if (!deleted) { deleted = true; commitsToDelete.Add(this); } }
public virtual bool METHOD_NAME() { return GetOffset() != LITERAL_INT; }
public static ICell METHOD_NAME(ICell VAR_ICELL) { String VAR_STRING = VAR_ICELL.RichStringCellValue.String; bool VAR_BOOL = false; String VAR_STRING = VAR_STRING.ToLower(); for (int i = LITERAL_INT; i < unicodeMappings.Length; i++) { UnicodeMapping VAR_UNICODEMAPPING = unicodeMappings[i]; String VAR_STRING = VAR_UNICODEMAPPING.entityName; if (VAR_STRING.IndexOf(VAR_STRING, StringComparison.Ordinal) != -LITERAL_INT) { VAR_STRING = VAR_STRING.Replace(VAR_STRING, VAR_UNICODEMAPPING.resolvedValue); VAR_BOOL = true; } } if (VAR_BOOL) { VAR_ICELL.SetCellValue(VAR_ICELL.Row.Sheet.Workbook.GetCreationHelper().CreateRichTextString(VAR_STRING)); } return VAR_ICELL; }
public virtual DeleteCampaignResponse METHOD_NAME(DeleteCampaignRequest VAR_DELETECAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCampaignResponseUnmarshaller.Instance; return Invoke<DeleteCampaignResponse>(VAR_DELETECAMPAIGNREQUEST, VAR_VAR); }
public override String METHOD_NAME() { return FormatReferenceAsString(); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { TwoDEval VAR_TWODEVAL = ConvertFirstArg(VAR_VALUEEVAL); try { int VAR_INT = ResolveIndexArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); int VAR_INT = ResolveIndexArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); return GetValueFromArea(VAR_TWODEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public URISyntaxException(string VAR_STRING, string VAR_STRING) : base(reason) { if (VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; index = -LITERAL_INT; }
public int METHOD_NAME(BytesRef VAR_BYTESREF) { if (lastElement >= offsets.Length) { int VAR_INT = offsets.Length; offsets = ArrayUtil.Grow(offsets, offsets.Length + LITERAL_INT); bytesUsed.AddAndGet((offsets.Length - VAR_INT) * RamUsageEstimator.NUM_BYTES_INT32); } pool.METHOD_NAME(VAR_BYTESREF); offsets[lastElement++] = currentOffset; currentOffset += VAR_BYTESREF.Length; return lastElement - LITERAL_INT; }
public EscherAggregate(bool VAR_BOOL) { if (VAR_BOOL) { BuildBaseTree(); } }
public NumericDocValuesField(string VAR_STRING, long VAR_LONG) : base(name, TYPE) { FieldsData = new Int64(VAR_LONG); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_index); }
public virtual AssociateDeviceWithNetworkProfileResponse METHOD_NAME(AssociateDeviceWithNetworkProfileRequest VAR_ASSOCIATEDEVICEWITHNETWORKPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateDeviceWithNetworkProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateDeviceWithNetworkProfileResponseUnmarshaller.Instance; return Invoke<AssociateDeviceWithNetworkProfileResponse>(VAR_ASSOCIATEDEVICEWITHNETWORKPROFILEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(DirCacheEntry VAR_DIRCACHEENTRY) { if (VAR_DIRCACHEENTRY.RawMode == LITERAL_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().fileModeNotSetForPath, VAR_DIRCACHEENTRY.PathString)); } BeforeAdd(VAR_DIRCACHEENTRY); FastAdd(VAR_DIRCACHEENTRY); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return _bookEvaluator.EvaluateReference(this.Sheet, _sheetIndex, VAR_INT, VAR_INT, _tracker); }
public static RevFilter METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().cannotMatchOnEmptyString); } if (SubStringRevFilter.Safe(VAR_STRING)) { return new MessageRevFilter.SubStringSearch(VAR_STRING); } return new MessageRevFilter.PatternSearch(VAR_STRING); }
public override ObjectId METHOD_NAME() { return sourceTrees[treeIndex]; }
public MoPenQueryCanvasRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual DescribeTrialResponse METHOD_NAME(DescribeTrialRequest VAR_DESCRIBETRIALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTrialRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTrialResponseUnmarshaller.Instance; return Invoke<DescribeTrialResponse>(VAR_DESCRIBETRIALREQUEST, VAR_VAR); }
public virtual DeleteCommentResponse METHOD_NAME(DeleteCommentRequest VAR_DELETECOMMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCommentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCommentResponseUnmarshaller.Instance; return Invoke<DeleteCommentResponse>(VAR_DELETECOMMENTREQUEST, VAR_VAR); }
public DeleteCacheSecurityGroupRequest(string VAR_STRING) { _cacheSecurityGroupName = VAR_STRING; }
public ParseTreePattern(ParseTreePatternMatcher VAR_PARSETREEPATTERNMATCHER, string VAR_STRING, int VAR_INT, IParseTree VAR_IPARSETREE) { this.VAR_PARSETREEPATTERNMATCHER = VAR_PARSETREEPATTERNMATCHER; this.VAR_INT = VAR_INT; this.VAR_STRING = VAR_STRING; this.VAR_IPARSETREE = VAR_IPARSETREE; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(PERCENT); return VAR_STRINGBUILDER.ToString(); }
public virtual GetVaultLockResponse METHOD_NAME(GetVaultLockRequest VAR_GETVAULTLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVaultLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVaultLockResponseUnmarshaller.Instance; return Invoke<GetVaultLockResponse>(VAR_GETVAULTLOCKREQUEST, VAR_VAR); }
public virtual DecreaseStreamRetentionPeriodResponse METHOD_NAME(DecreaseStreamRetentionPeriodRequest VAR_DECREASESTREAMRETENTIONPERIODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DecreaseStreamRetentionPeriodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DecreaseStreamRetentionPeriodResponseUnmarshaller.Instance; return Invoke<DecreaseStreamRetentionPeriodResponse>(VAR_DECREASESTREAMRETENTIONPERIODREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, RevTree VAR_REVTREE) { METHOD_NAME(VAR_STRING, FileMode.TREE, VAR_REVTREE); }
public string METHOD_NAME() { return sessionToken; }
public virtual java.util.ListIterator<E> METHOD_NAME(int VAR_INT) { object[] VAR_OBJECT[] = elements; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_OBJECT[].Length) { throw new System.IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_OBJECT[].Length); } java.util.concurrent.CopyOnWriteArrayList.CowIterator<E> VAR_JAVA.UTIL.CONCURRENT.COPYONWRITEARRAYLIST.COWITERATOR<E> = new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); VAR_JAVA.UTIL.CONCURRENT.COPYONWRITEARRAYLIST.COWITERATOR<E>.VAR_INT = VAR_INT; return VAR_JAVA.UTIL.CONCURRENT.COPYONWRITEARRAYLIST.COWITERATOR<E>; }
public virtual Span[] METHOD_NAME(string VAR_STRING) { lock (this) { if (tokenizer == LITERAL_NULL) { Span[] VAR_SPAN[] = new Span[LITERAL_INT]; VAR_SPAN[][LITERAL_INT] = new Span(LITERAL_INT, VAR_STRING.Length); return VAR_SPAN[]; } return tokenizer.tokenizePos(VAR_STRING); } }
public virtual DeleteRelationalDatabaseSnapshotResponse METHOD_NAME(DeleteRelationalDatabaseSnapshotRequest VAR_DELETERELATIONALDATABASESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRelationalDatabaseSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRelationalDatabaseSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteRelationalDatabaseSnapshotResponse>(VAR_DELETERELATIONALDATABASESNAPSHOTREQUEST, VAR_VAR); }
public virtual CheckDomainAvailabilityResponse METHOD_NAME(CheckDomainAvailabilityRequest VAR_CHECKDOMAINAVAILABILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CheckDomainAvailabilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CheckDomainAvailabilityResponseUnmarshaller.Instance; return Invoke<CheckDomainAvailabilityResponse>(VAR_CHECKDOMAINAVAILABILITYREQUEST, VAR_VAR); }
public DeleteVaultRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public virtual InputStream METHOD_NAME() { return rawIn; }
public byte[] METHOD_NAME(int VAR_INT) { byte[] VAR_BYTE[] = GetCachedBytes(VAR_INT); try { return CloneArray(VAR_BYTE[]); } catch (OutOfMemoryException tooBig) { throw new LargeObjectException.OutOfMemory(tooBig); } }
public HSSFSimpleShape METHOD_NAME(HSSFClientAnchor VAR_HSSFCLIENTANCHOR) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = new HSSFSimpleShape(LITERAL_NULL, VAR_HSSFCLIENTANCHOR); AddShape(VAR_HSSFSIMPLESHAPE); OnCreate(VAR_HSSFSIMPLESHAPE); return VAR_HSSFSIMPLESHAPE; }
public override V METHOD_NAME(object VAR_OBJECT) { lock (this) { int VAR_INT = secondaryHash(VAR_OBJECT.GetHashCode()); java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = table; int VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length - LITERAL_INT); { java.util.Hashtable.HashtableEntry<K, V> VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT]; java.util.Hashtable.HashtableEntry<K, V> VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = LITERAL_NULL; for (; VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> != LITERAL_NULL; VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>, VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.next) { if (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.VAR_OBJECT)) { if (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> == LITERAL_NULL) { VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT] = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.next; } else { VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.next = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.next; } modCount++; _size--; return VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>.value; } } } return default(V); } }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return GetRelativeValue(VAR_INT, VAR_INT, VAR_INT); }
public virtual SetIdentityNotificationTopicResponse METHOD_NAME(SetIdentityNotificationTopicRequest VAR_SETIDENTITYNOTIFICATIONTOPICREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityNotificationTopicRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityNotificationTopicResponseUnmarshaller.Instance; return Invoke<SetIdentityNotificationTopicResponse>(VAR_SETIDENTITYNOTIFICATIONTOPICREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.Write(_rawData); }
public BlockJoinWeight(Query VAR_QUERY, Weight VAR_WEIGHT, Filter VAR_FILTER, ScoreMode VAR_SCOREMODE) : base() { this.VAR_QUERY = VAR_QUERY; this.VAR_WEIGHT = VAR_WEIGHT; this.VAR_FILTER = VAR_FILTER; this.VAR_SCOREMODE = VAR_SCOREMODE; }
public Builder() { data = new GrowableByteArrayDataOutput(LITERAL_INT); bufferSize = LITERAL_INT; previousDoc = -LITERAL_INT; indexInterval = LITERAL_INT; cardinality = LITERAL_INT; numBlocks = LITERAL_INT; }
public virtual CreateGameSessionQueueResponse METHOD_NAME(CreateGameSessionQueueRequest VAR_CREATEGAMESESSIONQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGameSessionQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGameSessionQueueResponseUnmarshaller.Instance; return Invoke<CreateGameSessionQueueResponse>(VAR_CREATEGAMESESSIONQUEUEREQUEST, VAR_VAR); }
public virtual DescribeMetricCollectionTypesResponse METHOD_NAME() { return METHOD_NAME(new DescribeMetricCollectionTypesRequest()); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual int METHOD_NAME(FacetLabel VAR_FACETLABEL) { lock (this) { int VAR_INT; if (!cache.TryGetValue(VAR_FACETLABEL, out VAR_INT)) { return -LITERAL_INT; } return VAR_INT; } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { return entryForNullKey != LITERAL_NULL; } int VAR_INT = VAR_OBJECT.GetHashCode(); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = table; { for (java.util.HashMap.HashMapEntry<K, V> e = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][VAR_INT & (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length - LITERAL_INT)]; e != LITERAL_NULL; e = e.next) { K VAR_K = e.VAR_OBJECT; if (Sharpen.Util.Equals(VAR_K, VAR_OBJECT) || (e.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_K))) { return true; } } } return false; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is android.graphics.Point) { android.graphics.Point VAR_ANDROID.GRAPHICS.POINT = (android.graphics.Point)VAR_OBJECT; return this.x == VAR_ANDROID.GRAPHICS.POINT.x && this.y == VAR_ANDROID.GRAPHICS.POINT.y; } return false; }
public override void METHOD_NAME(string VAR_STRING, string VAR_STRING) { Debug.Assert(false, LITERAL_STRING); }
public virtual ListWorkerBlocksResponse METHOD_NAME(ListWorkerBlocksRequest VAR_LISTWORKERBLOCKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWorkerBlocksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWorkerBlocksResponseUnmarshaller.Instance; return Invoke<ListWorkerBlocksResponse>(VAR_LISTWORKERBLOCKSREQUEST, VAR_VAR); }
public virtual ListProvisionedCapacityResponse METHOD_NAME(ListProvisionedCapacityRequest VAR_LISTPROVISIONEDCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProvisionedCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProvisionedCapacityResponseUnmarshaller.Instance; return Invoke<ListProvisionedCapacityResponse>(VAR_LISTPROVISIONEDCAPACITYREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsValue(VAR_OBJECT); }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT) { if (VAR_PARSERRULECONTEXT.children is List<IParseTree>) { ((List<IParseTree>)VAR_PARSERRULECONTEXT.children).TrimExcess(); } }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (!characterDefinition.IsGroup(VAR_CHAR[][VAR_INT])) { return LITERAL_INT; } byte VAR_BYTE = characterDefinition.GetCharacterClass(VAR_CHAR[][VAR_INT]); int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_BYTE == characterDefinition.GetCharacterClass(VAR_CHAR[][VAR_INT + i])) { VAR_INT++; } else { break; } } return VAR_INT; }
public virtual GetJobOutputResponse METHOD_NAME(GetJobOutputRequest VAR_GETJOBOUTPUTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJobOutputRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJobOutputResponseUnmarshaller.Instance; return Invoke<GetJobOutputResponse>(VAR_GETJOBOUTPUTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { EnsureCapacity(VAR_INT); UnsafeWrite(VAR_CHAR[], VAR_INT, VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + outerInstance + LITERAL_STRING; }
public override int[] METHOD_NAME() { ParallelPostingsArray VAR_PARALLELPOSTINGSARRAY = perField.postingsArray; int VAR_INT = perField.VAR_PARALLELPOSTINGSARRAY.size; VAR_PARALLELPOSTINGSARRAY = perField.VAR_PARALLELPOSTINGSARRAY = VAR_PARALLELPOSTINGSARRAY.METHOD_NAME(); bytesUsed.AddAndGet((VAR_PARALLELPOSTINGSARRAY.BytesPerPosting() * (VAR_PARALLELPOSTINGSARRAY.size - VAR_INT))); return VAR_PARALLELPOSTINGSARRAY.textStarts; }
public override string METHOD_NAME() { return ruleName + LITERAL_STRING + bypassTokenType; }
public virtual bool METHOD_NAME() { ListIterator<Head> VAR_LISTITERATOR<HEAD> = heads.ListIterator(heads.Count); while (VAR_LISTITERATOR<HEAD>.HasPrevious()) { Head VAR_HEAD = VAR_LISTITERATOR<HEAD>.Previous(); if (VAR_HEAD == LastHead.INSTANCE) { return true; } } return false; }
public CRNRecord[] METHOD_NAME() { return (CRNRecord[])_crns.Clone(); }
public override string METHOD_NAME() { return LITERAL_STRING + Slot + LITERAL_STRING + base.METHOD_NAME(); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < m_min) { return VAR_INT; } if (m_suffixes != LITERAL_NULL) { bool VAR_BOOL = false; for (int i = LITERAL_INT; i < m_suffixes.Length; i++) { if (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, m_suffixes[i])) { VAR_BOOL = true; break; } } if (!VAR_BOOL) { return VAR_INT; } } for (int i = LITERAL_INT; i < m_rules.Length; i++) { if (m_rules[i].Matches(VAR_CHAR[], VAR_INT)) { return m_rules[i].Replace(VAR_CHAR[], VAR_INT); } } return VAR_INT; }
public ModifyInstanceAttributeRequest(string VAR_STRING, InstanceAttributeName VAR_INSTANCEATTRIBUTENAME) { _instanceId = VAR_STRING; _attribute = VAR_INSTANCEATTRIBUTENAME; }
public virtual ListEventTrackersResponse METHOD_NAME(ListEventTrackersRequest VAR_LISTEVENTTRACKERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEventTrackersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEventTrackersResponseUnmarshaller.Instance; return Invoke<ListEventTrackersResponse>(VAR_LISTEVENTTRACKERSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { bool VAR_BOOL = offsetAtt.EndOffset >= (FragmentSize * currentNumFrags); if (VAR_BOOL) { currentNumFrags++; } return VAR_BOOL; }
public virtual BatchGetQueryExecutionResponse METHOD_NAME(BatchGetQueryExecutionRequest VAR_BATCHGETQUERYEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetQueryExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetQueryExecutionResponseUnmarshaller.Instance; return Invoke<BatchGetQueryExecutionResponse>(VAR_BATCHGETQUERYEXECUTIONREQUEST, VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE < LITERAL_INT) { VAR_DOUBLE = -VAR_DOUBLE; } if (VAR_DOUBLE > SIN_COS_MAX_VALUE_FOR_INT_MODULO) { return Math.METHOD_NAME(VAR_DOUBLE); } int VAR_INT = (int)(VAR_DOUBLE * SIN_COS_INDEXER + LITERAL_INT); double VAR_DOUBLE = (VAR_DOUBLE - VAR_INT * SIN_COS_DELTA_HI) - VAR_INT * SIN_COS_DELTA_LO; VAR_INT &= (SIN_COS_TABS_SIZE - LITERAL_INT); double VAR_DOUBLE = cosTab[VAR_INT]; double VAR_DOUBLE = sinTab[VAR_INT]; return VAR_DOUBLE + VAR_DOUBLE * (-VAR_DOUBLE + VAR_DOUBLE * (-VAR_DOUBLE * ONE_DIV_F2 + VAR_DOUBLE * (VAR_DOUBLE * ONE_DIV_F3 + VAR_DOUBLE * VAR_DOUBLE * ONE_DIV_F4))); }
public override java.nio.ByteBuffer METHOD_NAME(long VAR_LONG) { throw new System.NotImplementedException(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternSheetIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatReferenceAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public STSAssumeRoleSessionCredentialsProvider(AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS, string VAR_STRING, IClientProfile VAR_ICLIENTPROFILE) { AlibabaCloudCredentialsProvider VAR_ALIBABACLOUDCREDENTIALSPROVIDER = new StaticCredentialsProvider(VAR_ALIBABACLOUDCREDENTIALS); this.VAR_STRING = VAR_STRING; roleSessionName = GetNewRoleSessionName(); stsClient = new DefaultAcsClient(VAR_ICLIENTPROFILE, VAR_ALIBABACLOUDCREDENTIALSPROVIDER); }
public SessionToken(string VAR_STRING, IRevision VAR_IREVISION) { Id = VAR_STRING; Version = VAR_IREVISION.Version; SourceFiles = VAR_IREVISION.SourceFiles; }
public override ICollection<string> METHOD_NAME() { CheckCallable(); try { SubmoduleWalk VAR_SUBMODULEWALK = SubmoduleWalk.ForIndex(repo); if (!paths.IsEmpty()) { VAR_SUBMODULEWALK.SetFilter(PathFilterGroup.CreateFromStrings(paths)); } StoredConfig VAR_STOREDCONFIG = repo.GetConfig(); IList<string> VAR_ILIST<STRING> = new AList<string>(); while (VAR_SUBMODULEWALK.Next()) { if (VAR_SUBMODULEWALK.GetConfigUrl() != LITERAL_NULL) { continue; } string VAR_STRING = VAR_SUBMODULEWALK.GetPath(); string VAR_STRING = VAR_SUBMODULEWALK.GetRemoteUrl(); string VAR_STRING = VAR_SUBMODULEWALK.GetModulesUpdate(); if (VAR_STRING != LITERAL_NULL) { VAR_STOREDCONFIG.SetString(ConfigConstants.CONFIG_SUBMODULE_SECTION, VAR_STRING, ConfigConstants.CONFIG_KEY_URL, VAR_STRING); } if (VAR_STRING != LITERAL_NULL) { VAR_STOREDCONFIG.SetString(ConfigConstants.CONFIG_SUBMODULE_SECTION, VAR_STRING, ConfigConstants.CONFIG_KEY_UPDATE, VAR_STRING); } if (VAR_STRING != LITERAL_NULL || VAR_STRING != LITERAL_NULL) { VAR_ILIST<STRING>.AddItem(VAR_STRING); } } if (!VAR_ILIST<STRING>.IsEmpty()) { VAR_STOREDCONFIG.Save(); } return VAR_ILIST<STRING>; } catch (IOException e) { throw new JGitInternalException(e.Message, e); } catch (ConfigInvalidException e) { throw new JGitInternalException(e.Message, e); } }
public CreateVaultRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public BooleanQueryNode(IList<IQueryNode> VAR_ILIST<IQUERYNODE>) { IsLeaf = false; Allocate(); Set(VAR_ILIST<IQUERYNODE>); }
public DVALRecord() { field_cbo_id = unchecked((int)LITERAL_INT); field_5_dv_no = LITERAL_INT; }
public virtual ListConfigurationsResponse METHOD_NAME(ListConfigurationsRequest VAR_LISTCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListConfigurationsResponseUnmarshaller.Instance; return Invoke<ListConfigurationsResponse>(VAR_LISTCONFIGURATIONSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { throw new Exception(LITERAL_STRING); }
public virtual int METHOD_NAME(int VAR_INT) { return LT(VAR_INT).Type; }
public void METHOD_NAME(bool VAR_BOOL) { int VAR_INT = _record.Row; int VAR_INT = _record.Column; short VAR_SHORT = _record.XFIndex; switch (cellType) { case CellType.Boolean: ((BoolErrRecord)_record).SetValue(VAR_BOOL); break; case CellType.Formula: ((FormulaRecordAggregate)_record).SetCachedBooleanResult(VAR_BOOL); break; default: SetCellType(CellType.Boolean, false, VAR_INT, VAR_INT, VAR_SHORT); ((BoolErrRecord)_record).SetValue(VAR_BOOL); break; } }
public virtual UntagDeliveryStreamResponse METHOD_NAME(UntagDeliveryStreamRequest VAR_UNTAGDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagDeliveryStreamResponseUnmarshaller.Instance; return Invoke<UntagDeliveryStreamResponse>(VAR_UNTAGDELIVERYSTREAMREQUEST, VAR_VAR); }
public CJKBigramFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { CJKScript VAR_CJKSCRIPT = LITERAL_INT; if (GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true)) { VAR_CJKSCRIPT |= CJKScript.HAN; } if (GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true)) { VAR_CJKSCRIPT |= CJKScript.HIRAGANA; } if (GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true)) { VAR_CJKSCRIPT |= CJKScript.KATAKANA; } if (GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true)) { VAR_CJKSCRIPT |= CJKScript.HANGUL; } this.VAR_CJKSCRIPT = VAR_CJKSCRIPT; this.outputUnigrams = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; ++i) { VAR_INT += Character.METHOD_NAME(VAR_INT[][VAR_INT + i], VAR_CHAR[], VAR_INT + VAR_INT); } return VAR_INT; }
public StoredField(string VAR_STRING, float VAR_FLOAT) : base(name, TYPE) { FieldsData = new Single(VAR_FLOAT); }
public static CFRuleRecord METHOD_NAME(HSSFSheet VAR_HSSFSHEET, byte VAR_BYTE, String VAR_STRING, String VAR_STRING) { Ptg[] VAR_PTG[] = ParseFormula(VAR_STRING, VAR_HSSFSHEET); Ptg[] VAR_PTG[] = ParseFormula(VAR_STRING, VAR_HSSFSHEET); return new CFRuleRecord(CONDITION_TYPE_CELL_VALUE_IS, (ComparisonOperator)VAR_BYTE, VAR_PTG[], VAR_PTG[]); }
public int METHOD_NAME(int VAR_INT) { if (ByteUpto > BYTE_BLOCK_SIZE - VAR_INT) { NextBuffer(); } int VAR_INT = ByteUpto; ByteUpto += VAR_INT; buffer[ByteUpto - LITERAL_INT] = LITERAL_INT; return VAR_INT; }
public virtual DescribeWorkspaceDirectoriesResponse METHOD_NAME() { var VAR_VAR = new DescribeWorkspaceDirectoriesRequest(); return METHOD_NAME(VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_functionName); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT + VAR_INT; for (int i = VAR_INT; i < VAR_INT; i++) { WriteByte(VAR_INT, VAR_BYTE[][i]); } }
public virtual GetExportSnapshotRecordsResponse METHOD_NAME(GetExportSnapshotRecordsRequest VAR_GETEXPORTSNAPSHOTRECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExportSnapshotRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExportSnapshotRecordsResponseUnmarshaller.Instance; return Invoke<GetExportSnapshotRecordsResponse>(VAR_GETEXPORTSNAPSHOTRECORDSREQUEST, VAR_VAR); }
public virtual DeleteMessageResponse METHOD_NAME(string VAR_STRING, string VAR_STRING) { var VAR_VAR = new DeleteMessageRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.ReceiptHandle = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual ModifyInstanceAttributeResponse METHOD_NAME(ModifyInstanceAttributeRequest VAR_MODIFYINSTANCEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceAttributeResponseUnmarshaller.Instance; return Invoke<ModifyInstanceAttributeResponse>(VAR_MODIFYINSTANCEATTRIBUTEREQUEST, VAR_VAR); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_FLOAT[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); float[] VAR_FLOAT[] = new float[VAR_INT]; System.Array.Copy(VAR_FLOAT[], VAR_INT, VAR_FLOAT[], LITERAL_INT, VAR_INT); return VAR_FLOAT[]; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { SnowballProgram VAR_SNOWBALLPROGRAM; try { VAR_SNOWBALLPROGRAM = (SnowballProgram)Activator.CreateInstance(stemClass); } catch (Exception e) { } }
public GetPhotosByMd5sRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual StartOutboundVoiceContactResponse METHOD_NAME(StartOutboundVoiceContactRequest VAR_STARTOUTBOUNDVOICECONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartOutboundVoiceContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartOutboundVoiceContactResponseUnmarshaller.Instance; return Invoke<StartOutboundVoiceContactResponse>(VAR_STARTOUTBOUNDVOICECONTACTREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_x); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_2_y); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_3_width); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_height); }
public virtual string METHOD_NAME() { return emailAddress; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { int VAR_INT = (VAR_INT + FirstRow); int VAR_INT = (VAR_INT + FirstColumn); return _evaluator.GetEvalForCell(VAR_INT, VAR_INT, VAR_INT); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subfilters.Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(subfilters[i].METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME() { base.METHOD_NAME(); if (runningParallelTasks != LITERAL_NULL) { foreach (ParallelTask t in runningParallelTasks) { if (t != LITERAL_NULL) { t.Task.METHOD_NAME(); } } } }
public virtual UpdateLogPatternResponse METHOD_NAME(UpdateLogPatternRequest VAR_UPDATELOGPATTERNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateLogPatternRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateLogPatternResponseUnmarshaller.Instance; return Invoke<UpdateLogPatternResponse>(VAR_UPDATELOGPATTERNREQUEST, VAR_VAR); }
public override FileMode METHOD_NAME() { return mode; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return GetSheetEvaluator(VAR_INT).METHOD_NAME(VAR_INT, VAR_INT); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (Type clazz = this.GetType(); clazz != LITERAL_NULL; clazz = clazz.GetTypeInfo().BaseType) { if (clazz.Name != LITERAL_NULL) { VAR_STRINGBUILDER.Append(clazz.Name); break; } } VAR_STRINGBUILDER.Append(LITERAL_CHAR); var VAR_VAR = GetSequentialSubReaders(); Debug.Assert(VAR_VAR != LITERAL_NULL); if (VAR_VAR.Count > LITERAL_INT) { VAR_STRINGBUILDER.Append(VAR_VAR[LITERAL_INT]); for (int i = LITERAL_INT, c = VAR_VAR.Count; i < c; ++i) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_VAR[i]); } } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateTypedLinkFacetResponse METHOD_NAME(CreateTypedLinkFacetRequest VAR_CREATETYPEDLINKFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTypedLinkFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTypedLinkFacetResponseUnmarshaller.Instance; return Invoke<CreateTypedLinkFacetResponse>(VAR_CREATETYPEDLINKFACETREQUEST, VAR_VAR); }
public virtual PutResolverRulePolicyResponse METHOD_NAME(PutResolverRulePolicyRequest VAR_PUTRESOLVERRULEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutResolverRulePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutResolverRulePolicyResponseUnmarshaller.Instance; return Invoke<PutResolverRulePolicyResponse>(VAR_PUTRESOLVERRULEPOLICYREQUEST, VAR_VAR); }
public virtual ConfirmPublicVirtualInterfaceResponse METHOD_NAME(ConfirmPublicVirtualInterfaceRequest VAR_CONFIRMPUBLICVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfirmPublicVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfirmPublicVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<ConfirmPublicVirtualInterfaceResponse>(VAR_CONFIRMPUBLICVIRTUALINTERFACEREQUEST, VAR_VAR); }
public FieldInfo METHOD_NAME(FieldInfo VAR_FIELDINFO) { return AddOrUpdateInternal(VAR_FIELDINFO.Name, VAR_FIELDINFO.Number, VAR_FIELDINFO.IsIndexed, VAR_FIELDINFO.HasVectors, VAR_FIELDINFO.OmitsNorms, VAR_FIELDINFO.HasPayloads, VAR_FIELDINFO.IndexOptions, VAR_FIELDINFO.DocValuesType, VAR_FIELDINFO.NormType); }
public virtual AssociateFleetResponse METHOD_NAME(AssociateFleetRequest VAR_ASSOCIATEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateFleetResponseUnmarshaller.Instance; return Invoke<AssociateFleetResponse>(VAR_ASSOCIATEFLEETREQUEST, VAR_VAR); }
public override void METHOD_NAME() { wc.Release(); }
public InclusiveRange(long VAR_LONG, long VAR_LONG) { Debug.Assert(VAR_LONG >= VAR_LONG); this.Start = VAR_LONG; this.End = VAR_LONG; }
public virtual UpdateProfilingGroupResponse METHOD_NAME(UpdateProfilingGroupRequest VAR_UPDATEPROFILINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateProfilingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateProfilingGroupResponseUnmarshaller.Instance; return Invoke<UpdateProfilingGroupResponse>(VAR_UPDATEPROFILINGGROUPREQUEST, VAR_VAR); }
public override void METHOD_NAME(long VAR_LONG) { throw new System.NotSupportedException(this.GetType().Name + LITERAL_STRING); }
public virtual DetectStackSetDriftResponse METHOD_NAME(DetectStackSetDriftRequest VAR_DETECTSTACKSETDRIFTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectStackSetDriftRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectStackSetDriftResponseUnmarshaller.Instance; return Invoke<DetectStackSetDriftResponse>(VAR_DETECTSTACKSETDRIFTREQUEST, VAR_VAR); }
public virtual ListConfigurationProfilesResponse METHOD_NAME(ListConfigurationProfilesRequest VAR_LISTCONFIGURATIONPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListConfigurationProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListConfigurationProfilesResponseUnmarshaller.Instance; return Invoke<ListConfigurationProfilesResponse>(VAR_LISTCONFIGURATIONPROFILESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return FORMAT_OTHER; }
public K METHOD_NAME() { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.endpoint(false); if (VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> == LITERAL_NULL) { throw new java.util.NoSuchElementException(); } return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey(); }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual UpdateFleetPortSettingsResponse METHOD_NAME(UpdateFleetPortSettingsRequest VAR_UPDATEFLEETPORTSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFleetPortSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFleetPortSettingsResponseUnmarshaller.Instance; return Invoke<UpdateFleetPortSettingsResponse>(VAR_UPDATEFLEETPORTSETTINGSREQUEST, VAR_VAR); }
public RuleTransition(RuleStartState VAR_RULESTARTSTATE, int VAR_INT, int VAR_INT, ATNState VAR_ATNSTATE) : base(ruleStart) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_ATNSTATE = VAR_ATNSTATE; }
public virtual GetConferenceProviderResponse METHOD_NAME(GetConferenceProviderRequest VAR_GETCONFERENCEPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConferenceProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConferenceProviderResponseUnmarshaller.Instance; return Invoke<GetConferenceProviderResponse>(VAR_GETCONFERENCEPROVIDERREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = ReadInt64(VAR_BYTE[], VAR_INT); VAR_INT += LITERAL_INT; VAR_INT = METHOD_NAME(VAR_LONG, VAR_LONG[], VAR_INT); } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.Write(field_1_data); }
public void METHOD_NAME() { if (!DirectoryReader.IndexExists(dir)) { throw new IndexNotFoundException(dir.ToString()); } if (!deletePriorCommits) { ICollection<IndexCommit> VAR_ICOLLECTION<INDEXCOMMIT> = DirectoryReader.ListCommits(dir); if (VAR_ICOLLECTION<INDEXCOMMIT>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_ICOLLECTION<INDEXCOMMIT>); } } IndexWriterConfig VAR_INDEXWRITERCONFIG = (IndexWriterConfig)iwc.Clone(); VAR_INDEXWRITERCONFIG.MergePolicy = new UpgradeIndexMergePolicy(VAR_INDEXWRITERCONFIG.MergePolicy); VAR_INDEXWRITERCONFIG.IndexDeletionPolicy = new KeepOnlyLastCommitDeletionPolicy(); IndexWriter VAR_INDEXWRITER = new IndexWriter(dir, VAR_INDEXWRITERCONFIG); try { InfoStream VAR_INFOSTREAM = VAR_INDEXWRITERCONFIG.InfoStream; if (VAR_INFOSTREAM.IsEnabled(LITERAL_STRING)) { VAR_INFOSTREAM.Message(LITERAL_STRING, LITERAL_STRING + Constants.LUCENE_MAIN_VERSION + LITERAL_STRING + dir + LITERAL_STRING + Constants.LUCENE_MAIN_VERSION + LITERAL_STRING); } VAR_INDEXWRITER.ForceMerge(LITERAL_INT); if (VAR_INFOSTREAM.IsEnabled(LITERAL_STRING)) { VAR_INFOSTREAM.Message(LITERAL_STRING, LITERAL_STRING + Constants.LUCENE_MAIN_VERSION); } } finally { VAR_INDEXWRITER.Dispose(); } }
public byte[] METHOD_NAME() { if (!(ClipboardFormatTag == CFTAG_WINDOWS)) throw new HPSFException(LITERAL_STRING + LITERAL_STRING); if (!(GetClipboardFormat() == CF_METAFILEPICT)) throw new HPSFException(LITERAL_STRING + LITERAL_STRING); else { byte[] VAR_BYTE[] = this.ThumbnailData; int VAR_INT = VAR_BYTE[].Length - OFFSet_WMFDATA; byte[] VAR_BYTE[] = new byte[VAR_INT]; System.Array.Copy(VAR_BYTE[], OFFSet_WMFDATA, VAR_BYTE[], LITERAL_INT, VAR_INT); return VAR_BYTE[]; } }
public virtual DescribeKeyPhrasesDetectionJobResponse METHOD_NAME(DescribeKeyPhrasesDetectionJobRequest VAR_DESCRIBEKEYPHRASESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeKeyPhrasesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeKeyPhrasesDetectionJobResponse>(VAR_DESCRIBEKEYPHRASESDETECTIONJOBREQUEST, VAR_VAR); }
public LabelAndValue(string VAR_STRING, int VAR_INT) { this.Label = VAR_STRING; this.Value = VAR_INT; this.TypeOfValue = typeof(int); }
public virtual NGit.Api.RebaseCommand METHOD_NAME(string VAR_STRING) { if (upstreamCommit == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } this.upstreamCommitName = VAR_STRING; return this; }
public virtual SearchDashboardsResponse METHOD_NAME(SearchDashboardsRequest VAR_SEARCHDASHBOARDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchDashboardsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchDashboardsResponseUnmarshaller.Instance; return Invoke<SearchDashboardsResponse>(VAR_SEARCHDASHBOARDSREQUEST, VAR_VAR); }
public virtual CreateClusterSubnetGroupResponse METHOD_NAME(CreateClusterSubnetGroupRequest VAR_CREATECLUSTERSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateClusterSubnetGroupResponse>(VAR_CREATECLUSTERSUBNETGROUPREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { try { for (;;) { byte VAR_BYTE = VAR_BYTE[][VAR_INT]; if (footerLineKeyChars[VAR_BYTE] == LITERAL_INT) { if (VAR_BYTE == LITERAL_CHAR) { return VAR_INT; } return -LITERAL_INT; } VAR_INT++; } } catch (IndexOutOfRangeException) { return -LITERAL_INT; } }
public char[] METHOD_NAME(int VAR_INT) { char[] VAR_CHAR[] = new char[VAR_INT]; System.Array.Copy(buffer, bufferPosition - VAR_INT, VAR_CHAR[], LITERAL_INT, VAR_INT); return VAR_CHAR[]; }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (VAR_OBJECT is CustomProperty) { return base.METHOD_NAME(VAR_OBJECT); } else { foreach (object cp in base.Values) { if ((cp as CustomProperty).Value == VAR_OBJECT) { return true; } } } return false; }
public RecordInputStream METHOD_NAME(Stream VAR_STREAM) { FilePassRecord VAR_FILEPASSRECORD = _filePassRec; String VAR_STRING = Biff8EncryptionKey.CurrentUserPassword; Biff8EncryptionKey VAR_BIFF8ENCRYPTIONKEY; if (VAR_STRING == LITERAL_NULL) { VAR_BIFF8ENCRYPTIONKEY = Biff8EncryptionKey.Create(VAR_FILEPASSRECORD.DocId); } else { VAR_BIFF8ENCRYPTIONKEY = Biff8EncryptionKey.Create(VAR_STRING, VAR_FILEPASSRECORD.DocId); } if (!VAR_BIFF8ENCRYPTIONKEY.Validate(VAR_FILEPASSRECORD.SaltData, VAR_FILEPASSRECORD.SaltHash)) { throw new EncryptedDocumentException((VAR_STRING == LITERAL_NULL ? LITERAL_STRING : LITERAL_STRING) + LITERAL_STRING); } return new RecordInputStream(VAR_STREAM, VAR_BIFF8ENCRYPTIONKEY, _InitialRecordsSize); }
public virtual UpdateComponentConfigurationResponse METHOD_NAME(UpdateComponentConfigurationRequest VAR_UPDATECOMPONENTCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateComponentConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateComponentConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateComponentConfigurationResponse>(VAR_UPDATECOMPONENTCONFIGURATIONREQUEST, VAR_VAR); }
public override String METHOD_NAME() { CellReference VAR_CELLREFERENCE = new CellReference(FirstRow, FirstColumn); CellReference VAR_CELLREFERENCE = new CellReference(LastRow, LastColumn); StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_evaluator.SheetNameRange); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual SetDesiredCapacityResponse METHOD_NAME(SetDesiredCapacityRequest VAR_SETDESIREDCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetDesiredCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetDesiredCapacityResponseUnmarshaller.Instance; return Invoke<SetDesiredCapacityResponse>(VAR_SETDESIREDCAPACITYREQUEST, VAR_VAR); }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].LL_ATNTransitions; } return VAR_LONG; }
public virtual ListQueuesResponse METHOD_NAME(ListQueuesRequest VAR_LISTQUEUESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQueuesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQueuesResponseUnmarshaller.Instance; return Invoke<ListQueuesResponse>(VAR_LISTQUEUESREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (VAR_LONG << LITERAL_INT) | (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | (VAR_LONG << LITERAL_INT) | VAR_LONG; } }
public virtual EnableVolumeIOResponse METHOD_NAME(EnableVolumeIORequest VAR_ENABLEVOLUMEIOREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableVolumeIORequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableVolumeIOResponseUnmarshaller.Instance; return Invoke<EnableVolumeIOResponse>(VAR_ENABLEVOLUMEIOREQUEST, VAR_VAR); }
public override long METHOD_NAME(BytesRef VAR_BYTESREF) { current = fstEnum.SeekFloor(VAR_BYTESREF); if (current.Output.HasValue) { return current.Output.Value; } else { throw new NullReferenceException(LITERAL_STRING); } }
public GetStreamingDistributionConfigRequest(string VAR_STRING) { _id = VAR_STRING; }
public WordnetSynonymParser(bool VAR_BOOL, bool VAR_BOOL, Analyzer VAR_ANALYZER) : base(dedup, analyzer) { this.VAR_BOOL = VAR_BOOL; }
public virtual DescribeProblemResponse METHOD_NAME(DescribeProblemRequest VAR_DESCRIBEPROBLEMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeProblemRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeProblemResponseUnmarshaller.Instance; return Invoke<DescribeProblemResponse>(VAR_DESCRIBEPROBLEMREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(E VAR_E) { return backingMap.floorKey(VAR_E); }
public IrishLowerCaseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public EnableAvailabilityZonesForLoadBalancerRequest(string VAR_STRING, List<string> VAR_LIST<STRING>) { _loadBalancerName = VAR_STRING; _availabilityZones = VAR_LIST<STRING>; }
public virtual DescribeLoadBalancerTargetGroupsResponse METHOD_NAME(DescribeLoadBalancerTargetGroupsRequest VAR_DESCRIBELOADBALANCERTARGETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoadBalancerTargetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoadBalancerTargetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeLoadBalancerTargetGroupsResponse>(VAR_DESCRIBELOADBALANCERTARGETGROUPSREQUEST, VAR_VAR); }
public virtual CopySnapshotResponse METHOD_NAME(CopySnapshotRequest VAR_COPYSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopySnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopySnapshotResponseUnmarshaller.Instance; return Invoke<CopySnapshotResponse>(VAR_COPYSNAPSHOTREQUEST, VAR_VAR); }
public Dictionary<string, string> METHOD_NAME(string VAR_STRING, string VAR_STRING) { return METHOD_NAME(VAR_STRING.GetEnumerator(), VAR_STRING); }
public LbsDropData(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { _wStyle = VAR_ILITTLEENDIANINPUT.ReadUShort(); _cLine = VAR_ILITTLEENDIANINPUT.ReadUShort(); _dxMin = VAR_ILITTLEENDIANINPUT.ReadUShort(); _str = StringUtil.ReadUnicodeString(VAR_ILITTLEENDIANINPUT); if (StringUtil.GetEncodedSize(_str) % LITERAL_INT != LITERAL_INT) { _unused = (byte)VAR_ILITTLEENDIANINPUT.ReadByte(); } }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT; } } }
public override int METHOD_NAME() { string VAR_STRING = doc.Get(DocMaker.ID_FIELD); if (VAR_STRING == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } IndexWriter VAR_INDEXWRITER = RunData.IndexWriter; VAR_INDEXWRITER.UpdateDocument(new Term(DocMaker.ID_FIELD, VAR_STRING), doc); return LITERAL_INT; }
public virtual ListInstanceFleetsResponse METHOD_NAME(ListInstanceFleetsRequest VAR_LISTINSTANCEFLEETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListInstanceFleetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListInstanceFleetsResponseUnmarshaller.Instance; return Invoke<ListInstanceFleetsResponse>(VAR_LISTINSTANCEFLEETSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return func.METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_VALUEEVAL); }
public virtual DescribeDBParametersResponse METHOD_NAME(DescribeDBParametersRequest VAR_DESCRIBEDBPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBParametersResponseUnmarshaller.Instance; return Invoke<DescribeDBParametersResponse>(VAR_DESCRIBEDBPARAMETERSREQUEST, VAR_VAR); }
public virtual CreateFargateProfileResponse METHOD_NAME(CreateFargateProfileRequest VAR_CREATEFARGATEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFargateProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFargateProfileResponseUnmarshaller.Instance; return Invoke<CreateFargateProfileResponse>(VAR_CREATEFARGATEPROFILEREQUEST, VAR_VAR); }
public char METHOD_NAME() { if (offset == start) { return java.text.CharacterIteratorClass.DONE; } return @string[--offset]; }
public override IList<string> METHOD_NAME() { CheckCallable(); IList<string> VAR_ILIST<STRING> = new AList<string>(); if (tags.IsEmpty()) { return VAR_ILIST<STRING>; } try { SetCallable(false); foreach (string tagName in tags) { if (tagName == LITERAL_NULL) { continue; } Ref VAR_REF = repo.GetRef(tagName); if (VAR_REF == LITERAL_NULL) { continue; } string VAR_STRING = VAR_REF.GetName(); RefUpdate VAR_REFUPDATE = repo.UpdateRef(VAR_STRING); VAR_REFUPDATE.SetForceUpdate(true); RefUpdate.Result VAR_REFUPDATE.RESULT = VAR_REFUPDATE.Delete(); bool VAR_BOOL = true; switch (VAR_REFUPDATE.RESULT) { case RefUpdate.Result.IO_FAILURE: case RefUpdate.Result.LOCK_FAILURE: case RefUpdate.Result.REJECTED: { VAR_BOOL = false; break; } default: { break; break; } } if (VAR_BOOL) { VAR_ILIST<STRING>.AddItem(VAR_STRING); } else { throw new JGitInternalException(MessageFormat.Format(JGitText.Get().deleteTagUnexpectedResult, VAR_REFUPDATE.RESULT.ToString())); } } return VAR_ILIST<STRING>; } catch (IOException ioe) { throw new JGitInternalException(ioe.Message, ioe); } }
public static void METHOD_NAME(byte[] VAR_BYTE[], byte VAR_BYTE) { { for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { VAR_BYTE[][i] = VAR_BYTE; } } }
public virtual CreateSampleFindingsResponse METHOD_NAME(CreateSampleFindingsRequest VAR_CREATESAMPLEFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSampleFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSampleFindingsResponseUnmarshaller.Instance; return Invoke<CreateSampleFindingsResponse>(VAR_CREATESAMPLEFINDINGSREQUEST, VAR_VAR); }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public virtual bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { int VAR_INT = m_initial; int VAR_INT = VAR_INT + VAR_INT; for (int i = VAR_INT, cp = LITERAL_INT; i < VAR_INT; i += Character.CharCount(cp)) { VAR_INT = Step(VAR_INT, cp = Character.CodePointAt(VAR_CHAR[], i, VAR_INT)); if (VAR_INT == -LITERAL_INT) return false; } return m_accept[VAR_INT]; }
public override String METHOD_NAME() { return LITERAL_STRING; }
public override void METHOD_NAME() { lock (@lock) { if (@out != LITERAL_NULL) { try { @out.METHOD_NAME(); } catch (System.IO.IOException) { setError(); } @out = LITERAL_NULL; } } }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); short VAR_SHORT = ReadInstance(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; EscherPropertyFactory VAR_ESCHERPROPERTYFACTORY = new EscherPropertyFactory(); properties = VAR_ESCHERPROPERTYFACTORY.CreateProperties(VAR_BYTE[], VAR_INT, VAR_SHORT); return VAR_INT + LITERAL_INT; }
public EveryNOrDocFreqTermSelector(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; count = VAR_INT; }
public virtual UpdateAvailabilityOptionsResponse METHOD_NAME(UpdateAvailabilityOptionsRequest VAR_UPDATEAVAILABILITYOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAvailabilityOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAvailabilityOptionsResponseUnmarshaller.Instance; return Invoke<UpdateAvailabilityOptionsResponse>(VAR_UPDATEAVAILABILITYOPTIONSREQUEST, VAR_VAR); }
public virtual AddInstanceFleetResponse METHOD_NAME(AddInstanceFleetRequest VAR_ADDINSTANCEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddInstanceFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddInstanceFleetResponseUnmarshaller.Instance; return Invoke<AddInstanceFleetResponse>(VAR_ADDINSTANCEFLEETREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { lock (this) { base.METHOD_NAME(VAR_INT); if ((mKeyProgressIncrement == LITERAL_INT) || (getMax() / mKeyProgressIncrement > LITERAL_INT)) { setKeyProgressIncrement(System.Math.Max(LITERAL_INT, Sharpen.Util.Round((float)getMax() / LITERAL_INT))); } } }
public override TwoDEval METHOD_NAME(int VAR_INT) { if (VAR_INT >= Height) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + Height + LITERAL_STRING); } int VAR_INT = FirstRow + VAR_INT; return new LazyAreaEval(VAR_INT, FirstColumn, VAR_INT, LastColumn, _evaluator); }
public virtual IntervalSet METHOD_NAME(int VAR_INT, RuleContext VAR_RULECONTEXT) { if (VAR_INT < LITERAL_INT || VAR_INT >= states.Count) { throw new ArgumentException(LITERAL_STRING); } RuleContext VAR_RULECONTEXT = VAR_RULECONTEXT; ATNState VAR_ATNSTATE = states[VAR_INT]; IntervalSet VAR_INTERVALSET = NextTokens(VAR_ATNSTATE); if (!VAR_INTERVALSET.Contains(TokenConstants.EPSILON)) { return VAR_INTERVALSET; } IntervalSet VAR_INTERVALSET = new IntervalSet(); VAR_INTERVALSET.AddAll(VAR_INTERVALSET); VAR_INTERVALSET.Remove(TokenConstants.EPSILON); while (VAR_RULECONTEXT != LITERAL_NULL && VAR_RULECONTEXT.invokingState >= LITERAL_INT && VAR_INTERVALSET.Contains(TokenConstants.EPSILON)) { ATNState VAR_ATNSTATE = states[VAR_RULECONTEXT.invokingState]; RuleTransition VAR_RULETRANSITION = (RuleTransition)VAR_ATNSTATE.Transition(LITERAL_INT); VAR_INTERVALSET = NextTokens(VAR_RULETRANSITION.followState); VAR_INTERVALSET.AddAll(VAR_INTERVALSET); VAR_INTERVALSET.Remove(TokenConstants.EPSILON); VAR_RULECONTEXT = VAR_RULECONTEXT.Parent; } if (VAR_INTERVALSET.Contains(TokenConstants.EPSILON)) { VAR_INTERVALSET.Add(TokenConstants.EOF); } return VAR_INTERVALSET; }
public virtual UntagResourceResponse METHOD_NAME(UntagResourceRequest VAR_UNTAGRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagResourceResponseUnmarshaller.Instance; return Invoke<UntagResourceResponse>(VAR_UNTAGRESOURCEREQUEST, VAR_VAR); }
public override string METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public Ref3DPxg(int VAR_INT, SheetIdentifier VAR_SHEETIDENTIFIER, CellReference VAR_CELLREFERENCE) : base(c) { this.VAR_INT = VAR_INT; this.firstSheetName = VAR_SHEETIDENTIFIER.SheetId.Name; if (VAR_SHEETIDENTIFIER is SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)VAR_SHEETIDENTIFIER).LastSheetIdentifier.Name; } else { this.lastSheetName = LITERAL_NULL; } }
public ModifyJumpserverPasswordRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual SearchLocalGatewayRoutesResponse METHOD_NAME(SearchLocalGatewayRoutesRequest VAR_SEARCHLOCALGATEWAYROUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchLocalGatewayRoutesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchLocalGatewayRoutesResponseUnmarshaller.Instance; return Invoke<SearchLocalGatewayRoutesResponse>(VAR_SEARCHLOCALGATEWAYROUTESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public ExtendedPivotTableViewFieldsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { grbit1 = VAR_RECORDINPUTSTREAM.ReadInt(); grbit2 = VAR_RECORDINPUTSTREAM.ReadUByte(); citmShow = VAR_RECORDINPUTSTREAM.ReadUByte(); isxdiSort = VAR_RECORDINPUTSTREAM.ReadUShort(); isxdiShow = VAR_RECORDINPUTSTREAM.ReadUShort(); switch (VAR_RECORDINPUTSTREAM.Remaining) { case LITERAL_INT: reserved1 = LITERAL_INT; reserved2 = LITERAL_INT; subName = LITERAL_NULL; return; case LITERAL_INT: break; default: throw new RecordFormatException(LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING); } int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); reserved1 = VAR_RECORDINPUTSTREAM.ReadInt(); reserved2 = VAR_RECORDINPUTSTREAM.ReadInt(); if (VAR_INT != STRING_NOT_PRESENT_LEN) { subName = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE = Math.Pow(Math.E, VAR_DOUBLE); double VAR_DOUBLE = Math.Pow(Math.E, -VAR_DOUBLE); VAR_DOUBLE = (VAR_DOUBLE + VAR_DOUBLE) / LITERAL_INT; return VAR_DOUBLE; }
public virtual IList<string> METHOD_NAME() { IList<string> VAR_ILIST<STRING> = new List<string>(); for (int d = LITERAL_INT; d < Interpreter.atn.decisionToDFA.Length; d++) { DFA VAR_DFA = Interpreter.atn.decisionToDFA[d]; VAR_ILIST<STRING>.Add(VAR_DFA.ToString(Vocabulary)); } return VAR_ILIST<STRING>; }
public LexerChannelAction(int VAR_INT) { this.VAR_INT = VAR_INT; }
public MappingCharFilter(NormalizeCharMap VAR_NORMALIZECHARMAP, TextReader VAR_TEXTREADER) : base(@in) { _input = GetBufferedReader(VAR_TEXTREADER); _input.Mark(BufferedCharFilter.DEFAULT_CHAR_BUFFER_SIZE); buffer.Reset(_input); map = VAR_NORMALIZECHARMAP.map; cachedRootArcs = VAR_NORMALIZECHARMAP.cachedRootArcs; if (map != LITERAL_NULL) { fstReader = map.GetBytesReader(); } else { fstReader = LITERAL_NULL; } }
public override string METHOD_NAME() { string VAR_STRING = Environment.NewLine; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(sequence.METHOD_NAME()); VAR_STRINGBUILDER.Append(VAR_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { for (int i = LITERAL_INT; i < _cfHeaders.Count; i++) { CFRecordsAggregate VAR_CFRECORDSAGGREGATE = (CFRecordsAggregate)_cfHeaders[i]; VAR_CFRECORDSAGGREGATE.METHOD_NAME(VAR_RECORDVISITOR); } }
public static bool METHOD_NAME(short[] VAR_SHORT[], short[] VAR_SHORT[]) { if (VAR_SHORT[] == VAR_SHORT[]) { return true; } if (VAR_SHORT[] == LITERAL_NULL || VAR_SHORT[] == LITERAL_NULL || VAR_SHORT[].Length != VAR_SHORT[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_SHORT[].Length; i++) { if (VAR_SHORT[][i] != VAR_SHORT[][i]) { return false; } } } return true; }
public String METHOD_NAME() { return METHOD_NAME(field_2_bytes, codepage); }
public SimpleDate(DateTime VAR_DATETIME) { year = VAR_DATETIME.Year; month = VAR_DATETIME.Month; day = VAR_DATETIME.Day; ticks = VAR_DATETIME.Ticks; }
public override TreeFilter METHOD_NAME() { throw new InvalidOperationException(LITERAL_STRING + GetType().FullName); }
public virtual string METHOD_NAME(Interval VAR_INTERVAL) { int VAR_INT = VAR_INTERVAL.a; int VAR_INT = VAR_INTERVAL.b; if (VAR_INT < LITERAL_INT || VAR_INT < LITERAL_INT) { return string.Empty; } LazyInit(); if (VAR_INT >= tokens.Count) { VAR_INT = tokens.Count - LITERAL_INT; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = VAR_INT; i <= VAR_INT; i++) { IToken VAR_ITOKEN = tokens[i]; if (VAR_ITOKEN.Type == TokenConstants.EOF) { break; } VAR_STRINGBUILDER.Append(VAR_ITOKEN.Text); } return VAR_STRINGBUILDER.ToString(); }
public virtual CancelStepsResponse METHOD_NAME(CancelStepsRequest VAR_CANCELSTEPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelStepsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelStepsResponseUnmarshaller.Instance; return Invoke<CancelStepsResponse>(VAR_CANCELSTEPSREQUEST, VAR_VAR); }
public override long METHOD_NAME() { return LITERAL_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsValue(VAR_OBJECT); }
public override int METHOD_NAME(int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT); } }
public DeleteApplicationRequest(string VAR_STRING) { _applicationName = VAR_STRING; }
public LazyDocument(IndexReader VAR_INDEXREADER, int VAR_INT) { this.VAR_INDEXREADER = VAR_INDEXREADER; this.VAR_INT = VAR_INT; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { while (VAR_INT < VAR_INT && IsWhitespace(VAR_BYTE[][VAR_INT])) { VAR_INT++; } return VAR_INT; }
public int[] METHOD_NAME() { return (int[])map.Clone(); }
public void METHOD_NAME(E VAR_E) { iterator.METHOD_NAME(VAR_E); }
public virtual ModifyCurrentDBClusterCapacityResponse METHOD_NAME(ModifyCurrentDBClusterCapacityRequest VAR_MODIFYCURRENTDBCLUSTERCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyCurrentDBClusterCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyCurrentDBClusterCapacityResponseUnmarshaller.Instance; return Invoke<ModifyCurrentDBClusterCapacityResponse>(VAR_MODIFYCURRENTDBCLUSTERCAPACITYREQUEST, VAR_VAR); }
public CancelRepoBuildRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public virtual java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_LONG[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_LONG[][i] = METHOD_NAME(); } } return this; }
public SpreadsheetVersion METHOD_NAME() { return SpreadsheetVersion.EXCEL97; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is android.graphics.Point) { android.graphics.Point VAR_ANDROID.GRAPHICS.POINT = (android.graphics.Point)VAR_OBJECT; return this.x == VAR_ANDROID.GRAPHICS.POINT.x && this.y == VAR_ANDROID.GRAPHICS.POINT.y; } return false; }
public virtual int METHOD_NAME() { return METHOD_NAME(rootNode); }
public override string METHOD_NAME() { return base.METHOD_NAME() + flags; }
public EnglishPossessiveFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static double METHOD_NAME(double VAR_DOUBLE) { return Math.Log((LITERAL_INT + VAR_DOUBLE) / (LITERAL_INT - VAR_DOUBLE)) / LITERAL_INT; }
public override WindowsIndexInput METHOD_NAME() { WindowsIndexInput VAR_WINDOWSINDEXINPUT = (WindowsIndexInput)base.METHOD_NAME(); VAR_WINDOWSINDEXINPUT.isClone = true; return VAR_WINDOWSINDEXINPUT; }
public ParseException(Token VAR_TOKEN, int[][] VAR_INT[][], string[] VAR_STRING[]) : base(Initialize(currentToken, expectedTokenSequences, tokenImage)) { this.CurrentToken = VAR_TOKEN; this.ExpectedTokenSequences = VAR_INT[][]; this.TokenImage = VAR_STRING[]; }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].SLL_ATNTransitions; VAR_LONG += VAR_DECISIONINFO[][i].LL_ATNTransitions; } return VAR_LONG; }
public java.lang.StringBuffer METHOD_NAME() { lock (this) { reverse0(); return this; } }
public DescribeLoadBalancersRequest(List<string> VAR_LIST<STRING>) { _loadBalancerNames = VAR_LIST<STRING>; }
public override string METHOD_NAME() { return LITERAL_CHAR + base.METHOD_NAME(); }
public static ISignatureComposer METHOD_NAME() { if (LITERAL_NULL == composer) { composer = new RoaSignatureComposer(); } return composer; }
public override bool METHOD_NAME() { lock (@lock) { if (buf == LITERAL_NULL) { throw new System.IO.IOException(LITERAL_STRING); } return (buf.Length - pos > LITERAL_INT || @in.METHOD_NAME()); } }
public virtual GetClientCertificatesResponse METHOD_NAME(GetClientCertificatesRequest VAR_GETCLIENTCERTIFICATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetClientCertificatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetClientCertificatesResponseUnmarshaller.Instance; return Invoke<GetClientCertificatesResponse>(VAR_GETCLIENTCERTIFICATESREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_BYTE[].Length; if (VAR_INT == LITERAL_INT) { VAR_INT += LITERAL_INT; } while (VAR_INT < VAR_INT) { if (VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { return -LITERAL_INT; } int VAR_INT = Match(VAR_BYTE[], VAR_INT, ObjectChecker.tagger); if (VAR_INT >= LITERAL_INT) { return VAR_INT; } VAR_INT = NextLF(VAR_BYTE[], VAR_INT); } return -LITERAL_INT; }
public virtual GetInstanceStateResponse METHOD_NAME(GetInstanceStateRequest VAR_GETINSTANCESTATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceStateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceStateResponseUnmarshaller.Instance; return Invoke<GetInstanceStateResponse>(VAR_GETINSTANCESTATEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public virtual long METHOD_NAME() { return cnt; }
public virtual DeleteConfigurationSetEventDestinationResponse METHOD_NAME(DeleteConfigurationSetEventDestinationRequest VAR_DELETECONFIGURATIONSETEVENTDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConfigurationSetEventDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConfigurationSetEventDestinationResponseUnmarshaller.Instance; return Invoke<DeleteConfigurationSetEventDestinationResponse>(VAR_DELETECONFIGURATIONSETEVENTDESTINATIONREQUEST, VAR_VAR); }
public virtual DeleteNetworkInterfacePermissionResponse METHOD_NAME(DeleteNetworkInterfacePermissionRequest VAR_DELETENETWORKINTERFACEPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNetworkInterfacePermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNetworkInterfacePermissionResponseUnmarshaller.Instance; return Invoke<DeleteNetworkInterfacePermissionResponse>(VAR_DELETENETWORKINTERFACEPERMISSIONREQUEST, VAR_VAR); }
public Tag(string VAR_STRING, string VAR_STRING) { _key = VAR_STRING; _value = VAR_STRING; }
public virtual CreateTrafficMirrorTargetResponse METHOD_NAME(CreateTrafficMirrorTargetRequest VAR_CREATETRAFFICMIRRORTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrafficMirrorTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrafficMirrorTargetResponseUnmarshaller.Instance; return Invoke<CreateTrafficMirrorTargetResponse>(VAR_CREATETRAFFICMIRRORTARGETREQUEST, VAR_VAR); }
public GetGroupPolicyRequest(string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _policyName = VAR_STRING; }
public virtual DeleteVoiceChannelResponse METHOD_NAME(DeleteVoiceChannelRequest VAR_DELETEVOICECHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceChannelResponseUnmarshaller.Instance; return Invoke<DeleteVoiceChannelResponse>(VAR_DELETEVOICECHANNELREQUEST, VAR_VAR); }
public virtual ModifyDBClusterSnapshotAttributeResponse METHOD_NAME(ModifyDBClusterSnapshotAttributeRequest VAR_MODIFYDBCLUSTERSNAPSHOTATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBClusterSnapshotAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBClusterSnapshotAttributeResponseUnmarshaller.Instance; return Invoke<ModifyDBClusterSnapshotAttributeResponse>(VAR_MODIFYDBCLUSTERSNAPSHOTATTRIBUTEREQUEST, VAR_VAR); }
public virtual RegisterAVSDeviceResponse METHOD_NAME(RegisterAVSDeviceRequest VAR_REGISTERAVSDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterAVSDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterAVSDeviceResponseUnmarshaller.Instance; return Invoke<RegisterAVSDeviceResponse>(VAR_REGISTERAVSDEVICEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[]) { Clear(); if (VAR_CHAR[] != LITERAL_NULL) { value = new char[VAR_CHAR[].Length]; System.Array.Copy(VAR_CHAR[], LITERAL_INT, value, LITERAL_INT, VAR_CHAR[].Length); } }
public override int METHOD_NAME(object VAR_OBJECT) { MutableValueDouble VAR_MUTABLEVALUEDOUBLE = (MutableValueDouble)VAR_OBJECT; int VAR_INT = Value.CompareTo(VAR_MUTABLEVALUEDOUBLE.Value); if (VAR_INT != LITERAL_INT) { return VAR_INT; } if (!Exists) { return -LITERAL_INT; } if (!VAR_MUTABLEVALUEDOUBLE.Exists) { return LITERAL_INT; } return LITERAL_INT; }
public virtual UpdateCodeRepositoryResponse METHOD_NAME(UpdateCodeRepositoryRequest VAR_UPDATECODEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateCodeRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateCodeRepositoryResponseUnmarshaller.Instance; return Invoke<UpdateCodeRepositoryResponse>(VAR_UPDATECODEREPOSITORYREQUEST, VAR_VAR); }
public static FormulaError METHOD_NAME(String VAR_STRING) { if (smap.ContainsKey(VAR_STRING)) return smap[VAR_STRING]; throw new ArgumentException(LITERAL_STRING + VAR_STRING); }
public virtual UnmonitorInstancesResponse METHOD_NAME(UnmonitorInstancesRequest VAR_UNMONITORINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnmonitorInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnmonitorInstancesResponseUnmarshaller.Instance; return Invoke<UnmonitorInstancesResponse>(VAR_UNMONITORINSTANCESREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return false; }
public void METHOD_NAME(short VAR_SHORT, byte VAR_BYTE, byte VAR_BYTE, byte VAR_BYTE) { int VAR_INT = VAR_SHORT - FIRST_COLOR_INDEX; if (VAR_INT < LITERAL_INT || VAR_INT >= STANDARD_PALETTE_SIZE) { return; } while (field_2_colors.Count <= VAR_INT) { field_2_colors.Add(new PColor((byte)LITERAL_INT, (byte)LITERAL_INT, (byte)LITERAL_INT)); } PColor VAR_PCOLOR = new PColor(VAR_BYTE, VAR_BYTE, VAR_BYTE); field_2_colors[VAR_INT] = VAR_PCOLOR; }
public virtual bool METHOD_NAME() { return type == JapaneseTokenizerType.USER; }
public virtual DeleteMeetingResponse METHOD_NAME(DeleteMeetingRequest VAR_DELETEMEETINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMeetingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMeetingResponseUnmarshaller.Instance; return Invoke<DeleteMeetingResponse>(VAR_DELETEMEETINGREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.Write(_byteEncoding, LITERAL_INT, _encodedTokenLen); }
public IQueryNode METHOD_NAME(string VAR_STRING) { List<IQueryNode> VAR_LIST<IQUERYNODE> = LITERAL_NULL; IQueryNode VAR_IQUERYNODE, VAR_IQUERYNODE = LITERAL_NULL; VAR_IQUERYNODE = DisjQuery(VAR_STRING); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.NOT: case RegexpToken.PLUS: case RegexpToken.MINUS: case RegexpToken.LPAREN: case RegexpToken.QUOTED: case RegexpToken.TERM: case RegexpToken.REGEXPTERM: case RegexpToken.RANGEIN_START: case RegexpToken.RANGEEX_START: case RegexpToken.NUMBER: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_1_break; } VAR_IQUERYNODE = DisjQuery(VAR_STRING); if (VAR_LIST<IQUERYNODE> == LITERAL_NULL) { VAR_LIST<IQUERYNODE> = new List<IQueryNode>(); VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); } label_1_break: if (VAR_LIST<IQUERYNODE> != LITERAL_NULL) { { if (true) return new BooleanQueryNode(VAR_LIST<IQUERYNODE>); } } else { { if (true) return VAR_IQUERYNODE; } } throw new Exception(LITERAL_STRING); }
public virtual RebootDBInstanceResponse METHOD_NAME(RebootDBInstanceRequest VAR_REBOOTDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootDBInstanceResponseUnmarshaller.Instance; return Invoke<RebootDBInstanceResponse>(VAR_REBOOTDBINSTANCEREQUEST, VAR_VAR); }
public virtual java.util.SortedSet<E> METHOD_NAME(E VAR_E) { return METHOD_NAME(VAR_E, true); }
public static bool METHOD_NAME(byte[] VAR_BYTE[], byte[] VAR_BYTE[], int VAR_INT) { if (VAR_BYTE[] == VAR_BYTE[]) { return true; } if (VAR_BYTE[] == LITERAL_NULL || VAR_BYTE[] == LITERAL_NULL || VAR_BYTE[].Length < VAR_INT || VAR_BYTE[].Length < VAR_INT) { return false; } { for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_BYTE[][i] != VAR_BYTE[][i]) { return false; } } } return true; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return c.METHOD_NAME(VAR_OBJECT); } }
public virtual RestoreDomainAccessResponse METHOD_NAME(RestoreDomainAccessRequest VAR_RESTOREDOMAINACCESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDomainAccessRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDomainAccessResponseUnmarshaller.Instance; return Invoke<RestoreDomainAccessResponse>(VAR_RESTOREDOMAINACCESSREQUEST, VAR_VAR); }
public static bool METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE, int VAR_INT) { if (VAR_ICHARSEQUENCE is UnescapedCharSequence) return ((UnescapedCharSequence)VAR_ICHARSEQUENCE).wasEscaped[VAR_INT]; else return false; }
public void METHOD_NAME(char VAR_CHAR, int VAR_INT) { Cell VAR_CELL = At(VAR_CHAR); if (VAR_CELL == LITERAL_NULL) { VAR_CELL = new Cell(); VAR_CELL.VAR_INT = VAR_INT; cells[VAR_CHAR] = VAR_CELL; } else { VAR_CELL.VAR_INT = VAR_INT; } VAR_CELL.cnt = (VAR_INT >= LITERAL_INT) ? LITERAL_INT : LITERAL_INT; }
public ValueRangeRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_minimumAxisValue = VAR_RECORDINPUTSTREAM.ReadDouble(); field_2_maximumAxisValue = VAR_RECORDINPUTSTREAM.ReadDouble(); field_3_majorIncrement = VAR_RECORDINPUTSTREAM.ReadDouble(); field_4_minorIncrement = VAR_RECORDINPUTSTREAM.ReadDouble(); field_5_categoryAxisCross = VAR_RECORDINPUTSTREAM.ReadDouble(); field_6_options = VAR_RECORDINPUTSTREAM.ReadShort(); }
public void METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>) { CheckFileNames(VAR_ICOLLECTION<STRING>); setFiles.UnionWith(VAR_ICOLLECTION<STRING>); }
public virtual CreateClientVpnEndpointResponse METHOD_NAME(CreateClientVpnEndpointRequest VAR_CREATECLIENTVPNENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClientVpnEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClientVpnEndpointResponseUnmarshaller.Instance; return Invoke<CreateClientVpnEndpointResponse>(VAR_CREATECLIENTVPNENDPOINTREQUEST, VAR_VAR); }
public static java.nio.IntBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteIntArrayBuffer(VAR_INT); }
public virtual FilePath METHOD_NAME() { return file; }
public static CFRecordsAggregate METHOD_NAME(RecordStream VAR_RECORDSTREAM) { Record VAR_RECORD = VAR_RECORDSTREAM.GetNext(); if (VAR_RECORD.Sid != CFHeaderRecord.sid) { throw new InvalidOperationException(LITERAL_STRING + VAR_RECORD.Sid + LITERAL_STRING + CFHeaderRecord.sid + LITERAL_STRING); } CFHeaderRecord VAR_CFHEADERRECORD = (CFHeaderRecord)VAR_RECORD; int VAR_INT = VAR_CFHEADERRECORD.NumberOfConditionalFormats; CFRuleRecord[] VAR_CFRULERECORD[] = new CFRuleRecord[VAR_INT]; for (int i = LITERAL_INT; i < VAR_CFRULERECORD[].Length; i++) { VAR_CFRULERECORD[][i] = (CFRuleRecord)VAR_RECORDSTREAM.GetNext(); } return new CFRecordsAggregate(VAR_CFHEADERRECORD, VAR_CFRULERECORD[]); }
public override void METHOD_NAME() { byte[] VAR_BYTE[]; string VAR_STRING = ToText(); if (utf8Bom) { ByteArrayOutputStream VAR_BYTEARRAYOUTPUTSTREAM = new ByteArrayOutputStream(); VAR_BYTEARRAYOUTPUTSTREAM.Write(unchecked((int)(LITERAL_INT))); VAR_BYTEARRAYOUTPUTSTREAM.Write(unchecked((int)(LITERAL_INT))); VAR_BYTEARRAYOUTPUTSTREAM.Write(unchecked((int)(LITERAL_INT))); VAR_BYTEARRAYOUTPUTSTREAM.Write(Sharpen.Runtime.GetBytesForString(VAR_STRING, RawParseUtils.UTF8_CHARSET.Name())); VAR_BYTE[] = VAR_BYTEARRAYOUTPUTSTREAM.ToByteArray(); } else { VAR_BYTE[] = Constants.Encode(VAR_STRING); } LockFile VAR_LOCKFILE = new LockFile(GetFile(), fs); if (!VAR_LOCKFILE.Lock()) { throw new LockFailedException(GetFile()); } try { VAR_LOCKFILE.SetNeedSnapshot(true); VAR_LOCKFILE.Write(VAR_BYTE[]); if (!VAR_LOCKFILE.Commit()) { throw new IOException(MessageFormat.Format(JGitText.Get().cannotCommitWriteTo, GetFile())); } } finally { VAR_LOCKFILE.Unlock(); } snapshot = VAR_LOCKFILE.GetCommitSnapshot(); hash = Hash(VAR_BYTE[]); FireConfigChangedEvent(); }
public DeleteTopicRequest(string VAR_STRING) { _topicArn = VAR_STRING; }
public static bool METHOD_NAME(CellRangeAddress VAR_CELLRANGEADDRESS, CellRangeAddress VAR_CELLRANGEADDRESS) { int VAR_INT = VAR_CELLRANGEADDRESS.FirstRow; int VAR_INT = VAR_CELLRANGEADDRESS.LastRow; int VAR_INT = VAR_CELLRANGEADDRESS.FirstColumn; int VAR_INT = VAR_CELLRANGEADDRESS.LastColumn; return le(VAR_CELLRANGEADDRESS.FirstRow, VAR_INT) && ge(VAR_CELLRANGEADDRESS.LastRow, VAR_INT) && le(VAR_CELLRANGEADDRESS.FirstColumn, VAR_INT) && ge(VAR_CELLRANGEADDRESS.LastColumn, VAR_INT); }
public override void METHOD_NAME() { if (_size != LITERAL_INT) { java.util.Arrays.fill(array, LITERAL_INT, _size, LITERAL_NULL); _size = LITERAL_INT; modCount++; } }
public override String METHOD_NAME() { return this.GetType().METHOD_NAME(); }
public virtual NGit.Api.CherryPickCommand METHOD_NAME(Ref VAR_REF) { CheckCallable(); commits.AddItem(VAR_REF); return this; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual FileMode METHOD_NAME(int VAR_INT) { return oldModes[VAR_INT]; }
public void METHOD_NAME(TextReader VAR_TEXTREADER) { this.VAR_TEXTREADER = VAR_TEXTREADER; nextPos = LITERAL_INT; nextWrite = LITERAL_INT; count = LITERAL_INT; end = false; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { String VAR_STRING = FormatString; VAR_ILITTLEENDIANOUTPUT.WriteShort(IndexCode); VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_STRING.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_hasMultibyte ? LITERAL_INT : LITERAL_INT); if (field_3_hasMultibyte) { StringUtil.PutUnicodeLE(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } }
public virtual DescribePendingMaintenanceActionsResponse METHOD_NAME(DescribePendingMaintenanceActionsRequest VAR_DESCRIBEPENDINGMAINTENANCEACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePendingMaintenanceActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePendingMaintenanceActionsResponseUnmarshaller.Instance; return Invoke<DescribePendingMaintenanceActionsResponse>(VAR_DESCRIBEPENDINGMAINTENANCEACTIONSREQUEST, VAR_VAR); }
public virtual DescribeServicesResponse METHOD_NAME(DescribeServicesRequest VAR_DESCRIBESERVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeServicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeServicesResponseUnmarshaller.Instance; return Invoke<DescribeServicesResponse>(VAR_DESCRIBESERVICESREQUEST, VAR_VAR); }
public CellType METHOD_NAME() { if (specialCachedValue == LITERAL_NULL) { return CellType.Numeric; } return specialCachedValue.GetValueType(); }
public override bool METHOD_NAME() { int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; VAR_INT = m_cursor; do { if (!r_mark_regions()) { goto lab0; } } while (false); lab0: m_cursor = VAR_INT; m_limit_backward = m_cursor; m_cursor = m_limit; VAR_INT = m_limit - m_cursor; do { if (!r_main_suffix()) { goto lab1; } } while (false); lab1: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_consonant_pair()) { goto lab2; } } while (false); lab2: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_other_suffix()) { goto lab3; } } while (false); lab3: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_undouble()) { goto lab4; } } while (false); lab4: m_cursor = m_limit - VAR_INT; m_cursor = m_limit_backward; return true; }
public void METHOD_NAME(int VAR_INT) { specialCachedValue = SpecialCachedValue.CreateCachedErrorCode(VAR_INT); }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_INT > maxShingleSize) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_INT = VAR_INT; gramSize = new CircularSequence(this); }
public override void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Id); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, _complexData.Length); return LITERAL_INT; }
public InputMismatchException(Parser VAR_PARSER) : base(recognizer, ((ITokenStream)recognizer.InputStream), recognizer.RuleContext) { this.OffendingToken = VAR_PARSER.CurrentToken; }
public virtual long METHOD_NAME() { lock (this) return ordsCache.Sum(pair => pair.Value.METHOD_NAME()); }
public Trec1MQReader(string VAR_STRING) : base() { this.VAR_STRING = VAR_STRING; }
public override string METHOD_NAME() { return LITERAL_STRING + TotalDocCount + LITERAL_STRING + EstimatedMergeBytes + LITERAL_STRING + IsExternal + LITERAL_STRING + MergeMaxNumSegments + LITERAL_STRING; }
public GetVaultNotificationsRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public virtual DisassociatePhoneNumbersFromVoiceConnectorGroupResponse METHOD_NAME(DisassociatePhoneNumbersFromVoiceConnectorGroupRequest VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociatePhoneNumbersFromVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociatePhoneNumbersFromVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse>(VAR_DISASSOCIATEPHONENUMBERSFROMVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING) { int VAR_INT = ivalues.Find(VAR_STRING); if (VAR_INT <= LITERAL_INT) { VAR_INT = PackValues(VAR_STRING); ivalues.Insert(VAR_STRING, (char)VAR_INT); } Insert(VAR_STRING, (char)VAR_INT); }
public bool METHOD_NAME(int VAR_INT) { return GetBoundSheetRec(VAR_INT).IsHidden; }
public AddUserToGroupRequest(string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _userName = VAR_STRING; }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += VAR_DOUBLE[][i] * VAR_DOUBLE[][i]; } return VAR_DOUBLE; }
public DeleteHostedZoneRequest(string VAR_STRING) { _id = VAR_STRING; }
public UserSViewEnd(RecordInputStream VAR_RECORDINPUTSTREAM) { _rawData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public virtual BatchPutScheduledUpdateGroupActionResponse METHOD_NAME(BatchPutScheduledUpdateGroupActionRequest VAR_BATCHPUTSCHEDULEDUPDATEGROUPACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchPutScheduledUpdateGroupActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchPutScheduledUpdateGroupActionResponseUnmarshaller.Instance; return Invoke<BatchPutScheduledUpdateGroupActionResponse>(VAR_BATCHPUTSCHEDULEDUPDATEGROUPACTIONREQUEST, VAR_VAR); }
public static EvaluationException METHOD_NAME() { return new EvaluationException(ErrorEval.NUM_ERROR); }
public virtual ISubscriptionOperations Subscription { get; private set; }
public sealed override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is AnyObjectId) { return METHOD_NAME((AnyObjectId)VAR_OBJECT); } else { return false; } }
public virtual DescribeSpotFleetRequestHistoryResponse METHOD_NAME(DescribeSpotFleetRequestHistoryRequest VAR_DESCRIBESPOTFLEETREQUESTHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotFleetRequestHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotFleetRequestHistoryResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestHistoryResponse>(VAR_DESCRIBESPOTFLEETREQUESTHISTORYREQUEST, VAR_VAR); }
public InventoryPrefixPredicate(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public static MergeStrategy[] METHOD_NAME() { lock (typeof(MergeStrategy)) { MergeStrategy[] VAR_MERGESTRATEGY[] = new MergeStrategy[STRATEGIES.Count]; Sharpen.Collections.ToArray(STRATEGIES.Values, VAR_MERGESTRATEGY[]); return VAR_MERGESTRATEGY[]; } }
public virtual DeleteVoiceConnectorTerminationCredentialsResponse METHOD_NAME(DeleteVoiceConnectorTerminationCredentialsRequest VAR_DELETEVOICECONNECTORTERMINATIONCREDENTIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorTerminationCredentialsResponse>(VAR_DELETEVOICECONNECTORTERMINATIONCREDENTIALSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { if (numMarkers == LITERAL_INT) { lastCharBufferStart = lastChar; } int VAR_INT = -numMarkers - LITERAL_INT; numMarkers++; return VAR_INT; }
public ScoreCachingWrappingScorer(Scorer VAR_SCORER) : base(scorer.m_weight) { this.VAR_SCORER = VAR_SCORER; }
public void METHOD_NAME(long VAR_LONG) { Debug.Assert(VAR_LONG >= LITERAL_INT); if (ord + VAR_LONG > valueCount || ord + VAR_LONG < LITERAL_INT) { throw new System.IO.EndOfStreamException(); } int VAR_INT = (int)Math.Min(VAR_LONG, blockSize - off); off += VAR_INT; ord += VAR_INT; VAR_LONG -= VAR_INT; if (VAR_LONG == LITERAL_INT) { return; } Debug.Assert(off == blockSize); while (VAR_LONG >= blockSize) { int VAR_INT = @in.ReadByte() & LITERAL_INT; int VAR_INT = (int)((uint)VAR_INT >> AbstractBlockPackedWriter.BPV_SHIFT); if (VAR_INT > LITERAL_INT) { throw new System.IO.IOException(LITERAL_STRING); } if ((VAR_INT & AbstractBlockPackedWriter.MIN_VALUE_EQUALS_0) == LITERAL_INT) { ReadVInt64(@in); } long VAR_LONG = PackedInt32s.Format.PACKED.ByteCount(packedIntsVersion, blockSize, VAR_INT); SkipBytes(VAR_LONG); ord += blockSize; VAR_LONG -= blockSize; } if (VAR_LONG == LITERAL_INT) { return; } Debug.Assert(VAR_LONG < blockSize); Refill(); ord += VAR_LONG; off += (int)VAR_LONG; }
public GetDownloadUrlsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual ListSecurityProfilesResponse METHOD_NAME(ListSecurityProfilesRequest VAR_LISTSECURITYPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSecurityProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSecurityProfilesResponseUnmarshaller.Instance; return Invoke<ListSecurityProfilesResponse>(VAR_LISTSECURITYPROFILESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsKey(VAR_OBJECT); }
public virtual ITerminalNode METHOD_NAME(int VAR_INT, int VAR_INT) { if (children == LITERAL_NULL || VAR_INT < LITERAL_INT || VAR_INT >= children.Count) { return LITERAL_NULL; } int VAR_INT = -LITERAL_INT; foreach (IParseTree o in children) { if (o is ITerminalNode) { ITerminalNode VAR_ITERMINALNODE = (ITerminalNode)o; IToken VAR_ITOKEN = VAR_ITERMINALNODE.Symbol; if (VAR_ITOKEN.Type == VAR_INT) { VAR_INT++; if (VAR_INT == VAR_INT) { return VAR_ITERMINALNODE; } } } } return LITERAL_NULL; }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(m_offset); VAR_ILITTLEENDIANOUTPUT.WriteShort(m_fontIndex); }
public virtual void METHOD_NAME() { useCnt.IncrementAndGet(); }
public OneMerge(IList<SegmentCommitInfo> VAR_ILIST<SEGMENTCOMMITINFO>) { if (LITERAL_INT == VAR_ILIST<SEGMENTCOMMITINFO>.Count) { throw new Exception(LITERAL_STRING); } this.Segments = new List<SegmentCommitInfo>(VAR_ILIST<SEGMENTCOMMITINFO>); int VAR_INT = LITERAL_INT; foreach (SegmentCommitInfo info in VAR_ILIST<SEGMENTCOMMITINFO>) { VAR_INT += info.Info.DocCount; } TotalDocCount = VAR_INT; }
public sealed override byte METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (_isQuoted) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_name).Append(LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(_name); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual AssociateWebsiteCertificateAuthorityResponse METHOD_NAME(AssociateWebsiteCertificateAuthorityRequest VAR_ASSOCIATEWEBSITECERTIFICATEAUTHORITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateWebsiteCertificateAuthorityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateWebsiteCertificateAuthorityResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteCertificateAuthorityResponse>(VAR_ASSOCIATEWEBSITECERTIFICATEAUTHORITYREQUEST, VAR_VAR); }
public override RevFilter METHOD_NAME() { return new AuthorRevFilter.PatternSearch(Pattern()); }
public override PredictionContext METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public AttachVpnGatewayRequest(string VAR_STRING, string VAR_STRING) { _vpnGatewayId = VAR_STRING; _vpcId = VAR_STRING; }
public virtual void METHOD_NAME(DocumentsWriterFlushControl VAR_DOCUMENTSWRITERFLUSHCONTROL, ThreadState VAR_THREADSTATE) { OnInsert(VAR_DOCUMENTSWRITERFLUSHCONTROL, VAR_THREADSTATE); OnDelete(VAR_DOCUMENTSWRITERFLUSHCONTROL, VAR_THREADSTATE); }
public virtual UpdateComponentResponse METHOD_NAME(UpdateComponentRequest VAR_UPDATECOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateComponentResponseUnmarshaller.Instance; return Invoke<UpdateComponentResponse>(VAR_UPDATECOMPONENTREQUEST, VAR_VAR); }
public virtual DeleteDashboardResponse METHOD_NAME(DeleteDashboardRequest VAR_DELETEDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDashboardResponseUnmarshaller.Instance; return Invoke<DeleteDashboardResponse>(VAR_DELETEDASHBOARDREQUEST, VAR_VAR); }
public override byte[] METHOD_NAME() { if (freeBlocks == LITERAL_INT) { bytesUsed.AddAndGet(m_blockSize); return new byte[m_blockSize]; } var VAR_VAR = freeByteBlocks[--freeBlocks]; freeByteBlocks[freeBlocks] = LITERAL_NULL; return VAR_VAR; }
public virtual DisableLoggingResponse METHOD_NAME(DisableLoggingRequest VAR_DISABLELOGGINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableLoggingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableLoggingResponseUnmarshaller.Instance; return Invoke<DisableLoggingResponse>(VAR_DISABLELOGGINGREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new CJKWidthFilter(VAR_TOKENSTREAM); }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { bufferUpto = VAR_INT / INT32_BLOCK_SIZE; bufferOffset = bufferUpto * INT32_BLOCK_SIZE; this.end = VAR_INT; upto = VAR_INT; level = LITERAL_INT; buffer = pool.buffers[bufferUpto]; upto = VAR_INT & INT32_BLOCK_MASK; int VAR_INT = Int32BlockPool.LEVEL_SIZE_ARRAY[LITERAL_INT]; if (VAR_INT + VAR_INT >= VAR_INT) { limit = VAR_INT & INT32_BLOCK_MASK; } else { limit = upto + VAR_INT - LITERAL_INT; } }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF) + docIDs.METHOD_NAME() + offsets.METHOD_NAME(); }
public void METHOD_NAME(Document VAR_DOCUMENT) { METHOD_NAME(VAR_DOCUMENT, LITERAL_NULL); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (long)((ulong)VAR_LONG >> LITERAL_INT); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); VAR_LONG[][VAR_INT++] = VAR_LONG & LITERAL_INT; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(MaxChange).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual StartFaceDetectionResponse METHOD_NAME(StartFaceDetectionRequest VAR_STARTFACEDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartFaceDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartFaceDetectionResponseUnmarshaller.Instance; return Invoke<StartFaceDetectionResponse>(VAR_STARTFACEDETECTIONREQUEST, VAR_VAR); }
public IDataValidation METHOD_NAME(IDataValidationConstraint VAR_IDATAVALIDATIONCONSTRAINT, CellRangeAddressList VAR_CELLRANGEADDRESSLIST) { return new HSSFDataValidation(VAR_CELLRANGEADDRESSLIST, VAR_IDATAVALIDATIONCONSTRAINT); }
public DocumentStoredFieldVisitor(ISet<string> VAR_ISET<STRING>) { this.VAR_ISET<STRING> = VAR_ISET<STRING>; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HunspellStemFilter(VAR_TOKENSTREAM, dictionary, true, longestOnly); }
public virtual Repository METHOD_NAME() { return repository; }
public virtual DeleteMLModelResponse METHOD_NAME(DeleteMLModelRequest VAR_DELETEMLMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMLModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMLModelResponseUnmarshaller.Instance; return Invoke<DeleteMLModelResponse>(VAR_DELETEMLMODELREQUEST, VAR_VAR); }
public virtual GetAccountLimitResponse METHOD_NAME(GetAccountLimitRequest VAR_GETACCOUNTLIMITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAccountLimitRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAccountLimitResponseUnmarshaller.Instance; return Invoke<GetAccountLimitResponse>(VAR_GETACCOUNTLIMITREQUEST, VAR_VAR); }
public char[] METHOD_NAME(int VAR_INT) { char[] VAR_CHAR[] = new char[VAR_INT]; Array.Copy(buffer, bufferPosition - VAR_INT, VAR_CHAR[], LITERAL_INT, VAR_INT); return VAR_CHAR[]; }
public virtual ModifyClientVpnEndpointResponse METHOD_NAME(ModifyClientVpnEndpointRequest VAR_MODIFYCLIENTVPNENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClientVpnEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClientVpnEndpointResponseUnmarshaller.Instance; return Invoke<ModifyClientVpnEndpointResponse>(VAR_MODIFYCLIENTVPNENDPOINTREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { return (_firstRow <= VAR_INT) && (_lastRow >= VAR_INT); }
public override int METHOD_NAME() { return delegate1.METHOD_NAME(); }
public RequestEnvironmentInfoRequest(EnvironmentInfoType VAR_ENVIRONMENTINFOTYPE) { _infoType = VAR_ENVIRONMENTINFOTYPE; }
public override void METHOD_NAME(int VAR_INT) { try { BeginWrite(); dst.METHOD_NAME(VAR_INT); } catch (ThreadInterruptedException) { throw WriteTimedOut(); } finally { EndWrite(); } }
public virtual ResetDBClusterParameterGroupResponse METHOD_NAME(ResetDBClusterParameterGroupRequest VAR_RESETDBCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetDBClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<ResetDBClusterParameterGroupResponse>(VAR_RESETDBCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public void METHOD_NAME() { this.workbook.METHOD_NAME(); }
public AntlrInputStream(string VAR_STRING) { this.data = VAR_STRING.ToCharArray(); this.n = VAR_STRING.Length; }
public override java.nio.ByteBuffer METHOD_NAME(short VAR_SHORT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual ReplaceIamInstanceProfileAssociationResponse METHOD_NAME(ReplaceIamInstanceProfileAssociationRequest VAR_REPLACEIAMINSTANCEPROFILEASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReplaceIamInstanceProfileAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReplaceIamInstanceProfileAssociationResponseUnmarshaller.Instance; return Invoke<ReplaceIamInstanceProfileAssociationResponse>(VAR_REPLACEIAMINSTANCEPROFILEASSOCIATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING, Expression VAR_EXPRESSION) { map[VAR_STRING] = VAR_EXPRESSION; }
public Ref3DPtg(CellReference VAR_CELLREFERENCE, int VAR_INT) : base(cr) { ExternSheetIndex = VAR_INT; }
public int METHOD_NAME() { int VAR_INT; int VAR_INT; try { VAR_INT = in1.ReadByte(); VAR_INT = in1.ReadByte(); } catch (IOException e) { throw new RuntimeException(e); } CheckEOF(VAR_INT | VAR_INT); return (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { VAR_INT = RemoveCase(VAR_CHAR[], VAR_INT); VAR_INT = RemovePossessives(VAR_CHAR[], VAR_INT); if (VAR_INT > LITERAL_INT) { VAR_INT = Normalize(VAR_CHAR[], VAR_INT); } return VAR_INT; }
public static int METHOD_NAME(int VAR_INT) { var VAR_VAR = _usableBitSetSizes[LITERAL_INT]; foreach (var t in _usableBitSetSizes.Where(t => t <= VAR_INT)) { VAR_VAR = t; } return VAR_VAR; }
public override string METHOD_NAME() { return LITERAL_STRING + Name + LITERAL_STRING; }
public ListFacesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public BytesRef(int VAR_INT) { this.bytes = new byte[VAR_INT]; }
public virtual DescribeFargateProfileResponse METHOD_NAME(DescribeFargateProfileRequest VAR_DESCRIBEFARGATEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFargateProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFargateProfileResponseUnmarshaller.Instance; return Invoke<DescribeFargateProfileResponse>(VAR_DESCRIBEFARGATEPROFILEREQUEST, VAR_VAR); }
public virtual GetOpenIdTokenForDeveloperIdentityResponse METHOD_NAME(GetOpenIdTokenForDeveloperIdentityRequest VAR_GETOPENIDTOKENFORDEVELOPERIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOpenIdTokenForDeveloperIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOpenIdTokenForDeveloperIdentityResponseUnmarshaller.Instance; return Invoke<GetOpenIdTokenForDeveloperIdentityResponse>(VAR_GETOPENIDTOKENFORDEVELOPERIDENTITYREQUEST, VAR_VAR); }
public int METHOD_NAME() { return _countBytesWritten; }
public bool METHOD_NAME(IntList VAR_INTLIST) { bool VAR_BOOL = true; if (this != VAR_INTLIST) { for (int j = LITERAL_INT; VAR_BOOL && (j < VAR_INTLIST._limit); j++) { if (!Contains(VAR_INTLIST._array[j])) { VAR_BOOL = false; } } } return VAR_BOOL; }
public virtual void METHOD_NAME(TreeFilter VAR_TREEFILTER) { AssertNotStarted(); treeFilter = VAR_TREEFILTER != LITERAL_NULL ? VAR_TREEFILTER : TreeFilter.ALL; }
public virtual PromoteReadReplicaResponse METHOD_NAME(PromoteReadReplicaRequest VAR_PROMOTEREADREPLICAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PromoteReadReplicaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PromoteReadReplicaResponseUnmarshaller.Instance; return Invoke<PromoteReadReplicaResponse>(VAR_PROMOTEREADREPLICAREQUEST, VAR_VAR); }
public sealed override short METHOD_NAME() { int VAR_INT = _position + libcore.io.SizeOf.SHORT; if (VAR_INT > _limit) { throw new java.nio.BufferUnderflowException(); } short VAR_SHORT = libcore.io.Memory.peekShort(backingArray, offset + _position, _order); _position = VAR_INT; return VAR_SHORT; }
public virtual AttachClassicLinkVpcResponse METHOD_NAME(AttachClassicLinkVpcRequest VAR_ATTACHCLASSICLINKVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachClassicLinkVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachClassicLinkVpcResponseUnmarshaller.Instance; return Invoke<AttachClassicLinkVpcResponse>(VAR_ATTACHCLASSICLINKVPCREQUEST, VAR_VAR); }
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_INT[].Length < VAR_INT) { int[] VAR_INT[] = new int[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(VAR_INT[], LITERAL_INT, VAR_INT[], LITERAL_INT, VAR_INT[].Length); return VAR_INT[]; } else { return VAR_INT[]; } }
public ByteArrayDataOutput() { Reset(BytesRef.EMPTY_BYTES); }
public virtual void METHOD_NAME() { int VAR_INT = LITERAL_INT, VAR_INT = m_length; string[] VAR_STRING[] = new string[VAR_INT]; char[] VAR_CHAR[] = new char[VAR_INT]; Iterator VAR_ITERATOR = new Iterator(this); while (VAR_ITERATOR.MoveNext()) { VAR_CHAR[][VAR_INT] = VAR_ITERATOR.Value; VAR_STRING[][VAR_INT++] = VAR_ITERATOR.Current; } Init(); InsertBalanced(VAR_STRING[], VAR_CHAR[], LITERAL_INT, VAR_INT); }
public MultiPhraseQueryNode() { IsLeaf = false; Allocate(); }
public PublishRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _message = VAR_STRING; _subject = VAR_STRING; }
public virtual SendCommandResponse METHOD_NAME(SendCommandRequest VAR_SENDCOMMANDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendCommandRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendCommandResponseUnmarshaller.Instance; return Invoke<SendCommandResponse>(VAR_SENDCOMMANDREQUEST, VAR_VAR); }
public virtual ListDeploymentInstancesResponse METHOD_NAME(ListDeploymentInstancesRequest VAR_LISTDEPLOYMENTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentInstancesResponseUnmarshaller.Instance; return Invoke<ListDeploymentInstancesResponse>(VAR_LISTDEPLOYMENTINSTANCESREQUEST, VAR_VAR); }
public virtual java.util.Iterator<E> METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public ProvisionedThroughput(long VAR_LONG, long VAR_LONG) { _readCapacityUnits = VAR_LONG; _writeCapacityUnits = VAR_LONG; }
public virtual DescribeTagsResponse METHOD_NAME() { return METHOD_NAME(new DescribeTagsRequest()); }
public virtual DeprovisionByoipCidrResponse METHOD_NAME(DeprovisionByoipCidrRequest VAR_DEPROVISIONBYOIPCIDRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeprovisionByoipCidrRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeprovisionByoipCidrResponseUnmarshaller.Instance; return Invoke<DeprovisionByoipCidrResponse>(VAR_DEPROVISIONBYOIPCIDRREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(TreeWalk VAR_TREEWALK) { return pathRaw.Length == VAR_TREEWALK.GetPathLength(); }
public virtual string METHOD_NAME(string VAR_STRING, string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING); VAR_STRINGBUILDER.Append(this.extensionFieldDelimiter); VAR_STRINGBUILDER.Append(VAR_STRING); return EscapeExtensionField(VAR_STRINGBUILDER.ToString()); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { this.VAR_BYTE[] = VAR_BYTE[]; pos = VAR_INT; limit = VAR_INT + VAR_INT; }
public override bool METHOD_NAME(Object VAR_OBJECT) { Loc VAR_LOC = (Loc)VAR_OBJECT; return _bookSheetColumn == VAR_LOC._bookSheetColumn && _rowIndex == VAR_LOC._rowIndex; }
public virtual DeleteDeploymentConfigResponse METHOD_NAME(DeleteDeploymentConfigRequest VAR_DELETEDEPLOYMENTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeploymentConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeploymentConfigResponseUnmarshaller.Instance; return Invoke<DeleteDeploymentConfigResponse>(VAR_DELETEDEPLOYMENTCONFIGREQUEST, VAR_VAR); }
public virtual StartQueryExecutionResponse METHOD_NAME(StartQueryExecutionRequest VAR_STARTQUERYEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartQueryExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartQueryExecutionResponseUnmarshaller.Instance; return Invoke<StartQueryExecutionResponse>(VAR_STARTQUERYEXECUTIONREQUEST, VAR_VAR); }
public GetRepoListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual CreateDistributionResponse METHOD_NAME(CreateDistributionRequest VAR_CREATEDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDistributionResponseUnmarshaller.Instance; return Invoke<CreateDistributionResponse>(VAR_CREATEDISTRIBUTIONREQUEST, VAR_VAR); }
public LongField(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT); } _offset = VAR_INT; }
public override string METHOD_NAME() { var VAR_VAR = new StringBuilder(); VAR_VAR.Append(LITERAL_STRING + Node); VAR_VAR.Append(LITERAL_STRING + Target); VAR_VAR.Append(LITERAL_STRING + Label); if (Flag(BIT_LAST_ARC)) VAR_VAR.Append(LITERAL_STRING); if (Flag(BIT_FINAL_ARC)) VAR_VAR.Append(LITERAL_STRING); if (Flag(BIT_TARGET_NEXT)) VAR_VAR.Append(LITERAL_STRING); if (Flag(BIT_ARC_HAS_OUTPUT)) VAR_VAR.Append(LITERAL_STRING + Output); if (Flag(BIT_ARC_HAS_FINAL_OUTPUT)) VAR_VAR.Append(LITERAL_STRING + NextFinalOutput); if (BytesPerArc != LITERAL_INT) VAR_VAR.Append(LITERAL_STRING + ArcIdx + LITERAL_STRING + NumArcs + LITERAL_STRING); return VAR_VAR.METHOD_NAME(); }
public int METHOD_NAME() { return refCount; }
public int METHOD_NAME() { int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; try { VAR_INT = in1.ReadByte(); VAR_INT = in1.ReadByte(); VAR_INT = in1.ReadByte(); VAR_INT = in1.ReadByte(); } catch (IOException e) { throw new RuntimeException(e); } CheckEOF(VAR_INT | VAR_INT | VAR_INT | VAR_INT); return (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT); }
public virtual BatchCreateAttendeeResponse METHOD_NAME(BatchCreateAttendeeRequest VAR_BATCHCREATEATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchCreateAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchCreateAttendeeResponseUnmarshaller.Instance; return Invoke<BatchCreateAttendeeResponse>(VAR_BATCHCREATEATTENDEEREQUEST, VAR_VAR); }
public virtual DetachInstancesFromLoadBalancerResponse METHOD_NAME(DetachInstancesFromLoadBalancerRequest VAR_DETACHINSTANCESFROMLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachInstancesFromLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachInstancesFromLoadBalancerResponseUnmarshaller.Instance; return Invoke<DetachInstancesFromLoadBalancerResponse>(VAR_DETACHINSTANCESFROMLOADBALANCERREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return currentSource.regionList.sourceStart; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(IndexCode)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_3_hasMultibyte).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(FormatString).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME() { if (this.lastEntryReturned == LITERAL_NULL) { throw new System.InvalidOperationException(); } if (this._enclosing.modCount != this.expectedModCount) { throw new java.util.ConcurrentModificationException(); } this._enclosing.METHOD_NAME(this.lastEntryReturned.key); this.lastEntryReturned = LITERAL_NULL; this.expectedModCount = this._enclosing.modCount; }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(child.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public string METHOD_NAME(int VAR_INT) { return GetFeature(VAR_INT, LITERAL_INT); }
public virtual BatchWriteResponse METHOD_NAME(BatchWriteRequest VAR_BATCHWRITEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchWriteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchWriteResponseUnmarshaller.Instance; return Invoke<BatchWriteResponse>(VAR_BATCHWRITEREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_INT, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public virtual ConfirmTransitVirtualInterfaceResponse METHOD_NAME(ConfirmTransitVirtualInterfaceRequest VAR_CONFIRMTRANSITVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfirmTransitVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfirmTransitVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<ConfirmTransitVirtualInterfaceResponse>(VAR_CONFIRMTRANSITVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual GetFileUploadURLResponse METHOD_NAME(GetFileUploadURLRequest VAR_GETFILEUPLOADURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFileUploadURLRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFileUploadURLResponseUnmarshaller.Instance; return Invoke<GetFileUploadURLResponse>(VAR_GETFILEUPLOADURLREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new KeywordRepeatFilter(VAR_TOKENSTREAM); }
public virtual StartWorkspacesResponse METHOD_NAME(StartWorkspacesRequest VAR_STARTWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartWorkspacesResponseUnmarshaller.Instance; return Invoke<StartWorkspacesResponse>(VAR_STARTWORKSPACESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return deltaCacheLimit; }
public RebootJumpserverRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual int METHOD_NAME() { Region VAR_REGION = currentSource.regionList; return VAR_REGION.resultStart + VAR_REGION.length; }
public virtual CreateLagResponse METHOD_NAME(CreateLagRequest VAR_CREATELAGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLagRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLagResponseUnmarshaller.Instance; return Invoke<CreateLagResponse>(VAR_CREATELAGREQUEST, VAR_VAR); }
public virtual MergeChunk.ConflictState METHOD_NAME() { return conflictState; }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual UpdateRelationalDatabaseResponse METHOD_NAME(UpdateRelationalDatabaseRequest VAR_UPDATERELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<UpdateRelationalDatabaseResponse>(VAR_UPDATERELATIONALDATABASEREQUEST, VAR_VAR); }
public java.util.MapClass.Entry<K, V> METHOD_NAME(K VAR_K) { return this._enclosing.immutableCopy(this.findBounded(VAR_K, java.util.TreeMap.Relation.LOWER)); }
public ExternalNameRecord() { field_2_ixals = LITERAL_INT; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { VAR_INT = StemPrefix(VAR_CHAR[], VAR_INT); VAR_INT = StemSuffix(VAR_CHAR[], VAR_INT); return VAR_INT; }
public void METHOD_NAME(RevFlag VAR_REVFLAG) { flags &= ~VAR_REVFLAG.mask; }
public IllegalFormatFlagsException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; }
public override bool METHOD_NAME() { return false; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new CapitalizationFilter(VAR_TOKENSTREAM, onlyFirstWord, keep, forceFirstLetter, okPrefix, minWordLength, maxWordCount, maxTokenLength, culture); }
public virtual GetAppliedSchemaVersionResponse METHOD_NAME(GetAppliedSchemaVersionRequest VAR_GETAPPLIEDSCHEMAVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAppliedSchemaVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAppliedSchemaVersionResponseUnmarshaller.Instance; return Invoke<GetAppliedSchemaVersionResponse>(VAR_GETAPPLIEDSCHEMAVERSIONREQUEST, VAR_VAR); }
public virtual DescribeLabelingJobResponse METHOD_NAME(DescribeLabelingJobRequest VAR_DESCRIBELABELINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLabelingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLabelingJobResponseUnmarshaller.Instance; return Invoke<DescribeLabelingJobResponse>(VAR_DESCRIBELABELINGJOBREQUEST, VAR_VAR); }
public virtual DeleteAttendeeResponse METHOD_NAME(DeleteAttendeeRequest VAR_DELETEATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAttendeeResponseUnmarshaller.Instance; return Invoke<DeleteAttendeeResponse>(VAR_DELETEATTENDEEREQUEST, VAR_VAR); }
public string METHOD_NAME(IList<string> VAR_ILIST<STRING>) { return METHOD_NAME(VAR_ILIST<STRING>, LITERAL_NULL); }
public virtual RejectAssignmentResponse METHOD_NAME(RejectAssignmentRequest VAR_REJECTASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectAssignmentResponseUnmarshaller.Instance; return Invoke<RejectAssignmentResponse>(VAR_REJECTASSIGNMENTREQUEST, VAR_VAR); }
public CharVector(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT > LITERAL_INT) { blockSize = VAR_INT; } else { blockSize = DEFAULT_BLOCK_SIZE; } array = VAR_CHAR[]; n = VAR_CHAR[].Length; }
public virtual UnsubscribeFromEventResponse METHOD_NAME(UnsubscribeFromEventRequest VAR_UNSUBSCRIBEFROMEVENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnsubscribeFromEventRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnsubscribeFromEventResponseUnmarshaller.Instance; return Invoke<UnsubscribeFromEventResponse>(VAR_UNSUBSCRIBEFROMEVENTREQUEST, VAR_VAR); }
public string METHOD_NAME() { if (pos >= format.Length) { return LITERAL_NULL; } int VAR_INT = pos; char VAR_CHAR = format[pos]; ++pos; if (VAR_CHAR == LITERAL_CHAR) { while ((pos < format.Length) && ((VAR_CHAR = format[pos]) != LITERAL_CHAR)) { ++pos; } if (pos < format.Length) { ++pos; } } else { char VAR_CHAR = VAR_CHAR; while ((pos < format.Length) && ((VAR_CHAR = format[pos])) == VAR_CHAR) { ++pos; } } return format.Substring(VAR_INT, pos - VAR_INT); }
public Policy METHOD_NAME(string VAR_STRING) { Id = VAR_STRING; return this; }
public virtual void METHOD_NAME(string VAR_STRING) { if (!(FieldsData is string)) { throw new ArgumentException(LITERAL_STRING + FieldsData.GetType().Name + LITERAL_STRING); } FieldsData = VAR_STRING; }
public Area3DPtg(String VAR_STRING, int VAR_INT) : base(arearef) { ExternSheetIndex = VAR_INT; }
public virtual bool METHOD_NAME() { return isEmpty(); }
public virtual DeleteMemberResponse METHOD_NAME(DeleteMemberRequest VAR_DELETEMEMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMemberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMemberResponseUnmarshaller.Instance; return Invoke<DeleteMemberResponse>(VAR_DELETEMEMBERREQUEST, VAR_VAR); }
public virtual DeleteRepositoryResponse METHOD_NAME(DeleteRepositoryRequest VAR_DELETEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRepositoryResponseUnmarshaller.Instance; return Invoke<DeleteRepositoryResponse>(VAR_DELETEREPOSITORYREQUEST, VAR_VAR); }
public virtual GetChangeResponse METHOD_NAME(GetChangeRequest VAR_GETCHANGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetChangeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetChangeResponseUnmarshaller.Instance; return Invoke<GetChangeResponse>(VAR_GETCHANGEREQUEST, VAR_VAR); }
public FieldInfos METHOD_NAME() { return new FieldInfos(byName.Values.ToArray()); }
public virtual void METHOD_NAME() { lock (this) { elements = libcore.util.EmptyArray.OBJECT; } }
public override java.nio.LongBuffer METHOD_NAME() { java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.LongToByteBufferAdapter VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER = new java.nio.LongToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._mark = _mark; return VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER; }
public StyleRecord() { field_1_xf_index = isBuiltinFlag.Set(field_1_xf_index); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is NGit.AbbreviatedObjectId) { NGit.AbbreviatedObjectId VAR_NGIT.ABBREVIATEDOBJECTID = (NGit.AbbreviatedObjectId)VAR_OBJECT; return nibbles == VAR_NGIT.ABBREVIATEDOBJECTID.nibbles && w1 == VAR_NGIT.ABBREVIATEDOBJECTID.w1 && w2 == VAR_NGIT.ABBREVIATEDOBJECTID.w2 && w3 == VAR_NGIT.ABBREVIATEDOBJECTID.w3 && w4 == VAR_NGIT.ABBREVIATEDOBJECTID.w4 && w5 == VAR_NGIT.ABBREVIATEDOBJECTID.w5; } return false; }
public virtual void METHOD_NAME(QueryParserTokenManager VAR_QUERYPARSERTOKENMANAGER) { TokenSource = VAR_QUERYPARSERTOKENMANAGER; Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public ExtendedFormatRecord METHOD_NAME(int VAR_INT) { int VAR_INT = records.Xfpos - (numxfs - LITERAL_INT); VAR_INT += VAR_INT; ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD = (ExtendedFormatRecord)records[VAR_INT]; return VAR_EXTENDEDFORMATRECORD; }
public Resource(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public NorwegianLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_STRING == LITERAL_NULL || LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.BOKMAAL; } else if (LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.NYNORSK; } else if (LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { flags = NorwegianStandard.BOKMAAL | NorwegianStandard.NYNORSK; } else { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING); } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual UpdateTypedLinkFacetResponse METHOD_NAME(UpdateTypedLinkFacetRequest VAR_UPDATETYPEDLINKFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTypedLinkFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTypedLinkFacetResponseUnmarshaller.Instance; return Invoke<UpdateTypedLinkFacetResponse>(VAR_UPDATETYPEDLINKFACETREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(E VAR_E) { return backingMap.higherKey(VAR_E); }
public virtual ListReceiptFiltersResponse METHOD_NAME(ListReceiptFiltersRequest VAR_LISTRECEIPTFILTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListReceiptFiltersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListReceiptFiltersResponseUnmarshaller.Instance; return Invoke<ListReceiptFiltersResponse>(VAR_LISTRECEIPTFILTERSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { lock (@lock) { return count; } }
public CreateVaultRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public PendingOutputs() { outputs = new CharsRef[LITERAL_INT]; endOffsets = new int[LITERAL_INT]; posLengths = new int[LITERAL_INT]; }
public static double METHOD_NAME(DateTime VAR_DATETIME, bool VAR_BOOL) { if ((!VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT) || (VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT)) { return BAD_DATE; } DateTime VAR_DATETIME; if (VAR_BOOL) { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } else { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } double VAR_DOUBLE = (VAR_DATETIME - VAR_DATETIME).TotalDays + LITERAL_INT; if (!VAR_BOOL && VAR_DOUBLE >= LITERAL_INT) { VAR_DOUBLE++; } else if (VAR_BOOL) { VAR_DOUBLE--; } return VAR_DOUBLE; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { int VAR_INT = VAR_VALUEEVAL[].Length; if (VAR_INT < LITERAL_INT) { throw new Exception(LITERAL_STRING); } ValueEval VAR_VALUEEVAL = VAR_VALUEEVAL[][LITERAL_INT]; String VAR_STRING = string.Empty; if (VAR_VALUEEVAL is FunctionNameEval) { VAR_STRING = ((FunctionNameEval)VAR_VALUEEVAL).FunctionName; } else { throw new Exception(LITERAL_STRING + VAR_VALUEEVAL.GetType().Name + LITERAL_STRING); } FreeRefFunction VAR_FREEREFFUNCTION = VAR_OPERATIONEVALUATIONCONTEXT.FindUserDefinedFunction(VAR_STRING); if (VAR_FREEREFFUNCTION == LITERAL_NULL) { throw new NotImplementedFunctionException(VAR_STRING); } int VAR_INT = VAR_INT - LITERAL_INT; ValueEval[] VAR_VALUEEVAL[] = new ValueEval[VAR_INT]; Array.Copy(VAR_VALUEEVAL[], LITERAL_INT, VAR_VALUEEVAL[], LITERAL_INT, VAR_INT); return VAR_FREEREFFUNCTION.METHOD_NAME(VAR_VALUEEVAL[], VAR_OPERATIONEVALUATIONCONTEXT); }
public override int METHOD_NAME(object VAR_OBJECT) { int VAR_INT = LITERAL_INT; java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink.next; if (VAR_OBJECT != LITERAL_NULL) { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { if (VAR_OBJECT.Equals(VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data)) { return VAR_INT; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; VAR_INT++; } } else { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { if ((object)VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data == LITERAL_NULL) { return VAR_INT; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; VAR_INT++; } } return -LITERAL_INT; }
public virtual DescribeVpcClassicLinkResponse METHOD_NAME(DescribeVpcClassicLinkRequest VAR_DESCRIBEVPCCLASSICLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcClassicLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcClassicLinkResponseUnmarshaller.Instance; return Invoke<DescribeVpcClassicLinkResponse>(VAR_DESCRIBEVPCCLASSICLINKREQUEST, VAR_VAR); }
public override void METHOD_NAME(RevSort VAR_REVSORT, bool VAR_BOOL) { if (VAR_REVSORT == RevSort.TOPO && !VAR_BOOL) { throw new ArgumentException(JGitText.Get().topologicalSortRequired); } base.METHOD_NAME(VAR_REVSORT, VAR_BOOL); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { lock (this) { delete0(VAR_INT, VAR_INT); return this; } }
public override void METHOD_NAME(int VAR_INT) { throw new NGit.Errors.NotSupportedException(); }
public virtual bool METHOD_NAME(int VAR_INT) { int VAR_INT = EntryRawMode ^ VAR_INT; if (VAR_INT == LITERAL_INT) { return false; } if (FileMode.SYMLINK.Equals(VAR_INT)) { return false; } if (!state.options.IsFileMode()) { VAR_INT &= ~FileMode.EXECUTABLE_FILE.GetBits(); } return VAR_INT != LITERAL_INT; }
public virtual DescribeReservedInstancesModificationsResponse METHOD_NAME(DescribeReservedInstancesModificationsRequest VAR_DESCRIBERESERVEDINSTANCESMODIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedInstancesModificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedInstancesModificationsResponseUnmarshaller.Instance; return Invoke<DescribeReservedInstancesModificationsResponse>(VAR_DESCRIBERESERVEDINSTANCESMODIFICATIONSREQUEST, VAR_VAR); }
public virtual AddSourceIdentifierToSubscriptionResponse METHOD_NAME(AddSourceIdentifierToSubscriptionRequest VAR_ADDSOURCEIDENTIFIERTOSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddSourceIdentifierToSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddSourceIdentifierToSubscriptionResponseUnmarshaller.Instance; return Invoke<AddSourceIdentifierToSubscriptionResponse>(VAR_ADDSOURCEIDENTIFIERTOSUBSCRIPTIONREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return list.METHOD_NAME(VAR_OBJECT); } }
public PagedBytesDataOutput METHOD_NAME() { if (frozen) { throw new InvalidOperationException(LITERAL_STRING); } return new PagedBytesDataOutput(this); }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_SHORT[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); short[] VAR_SHORT[] = new short[VAR_INT]; System.Array.Copy(VAR_SHORT[], VAR_INT, VAR_SHORT[], LITERAL_INT, VAR_INT); return VAR_SHORT[]; }
public virtual bool METHOD_NAME(URIish VAR_URIISH) { return uris.Remove(VAR_URIISH); }
public virtual DescribeGameServerResponse METHOD_NAME(DescribeGameServerRequest VAR_DESCRIBEGAMESERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameServerResponseUnmarshaller.Instance; return Invoke<DescribeGameServerResponse>(VAR_DESCRIBEGAMESERVERREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return this.next_Renamed != LITERAL_NULL; }
public virtual Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(IIntSet VAR_IINTSET) { if (VAR_IINTSET == LITERAL_NULL || VAR_IINTSET.IsNil) { return new Antlr4.Runtime.Misc.IntervalSet(this); } if (VAR_IINTSET is Antlr4.Runtime.Misc.IntervalSet) { return METHOD_NAME(this, (Antlr4.Runtime.Misc.IntervalSet)VAR_IINTSET); } Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = new Antlr4.Runtime.Misc.IntervalSet(); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.AddAll(VAR_IINTSET); return METHOD_NAME(this, VAR_ANTLR4.RUNTIME.MISC.INTERVALSET); }
public virtual string METHOD_NAME() { return this.canonicalName; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return GetRelativeValue(VAR_INT, VAR_INT); }
public AttrPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_options = (byte)VAR_ILITTLEENDIANINPUT.ReadByte(); field_2_data = VAR_ILITTLEENDIANINPUT.ReadShort(); if (IsOptimizedChoose) { int VAR_INT = field_2_data; int[] VAR_INT[] = new int[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT[].Length; i++) { VAR_INT[][i] = VAR_ILITTLEENDIANINPUT.ReadUShort(); } _jumpTable = VAR_INT[]; _chooseFuncOffset = VAR_ILITTLEENDIANINPUT.ReadUShort(); } else { _jumpTable = LITERAL_NULL; _chooseFuncOffset = -LITERAL_INT; } }
public virtual DescribeTrafficMirrorFiltersResponse METHOD_NAME(DescribeTrafficMirrorFiltersRequest VAR_DESCRIBETRAFFICMIRRORFILTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTrafficMirrorFiltersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTrafficMirrorFiltersResponseUnmarshaller.Instance; return Invoke<DescribeTrafficMirrorFiltersResponse>(VAR_DESCRIBETRAFFICMIRRORFILTERSREQUEST, VAR_VAR); }
public java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); }
public virtual DescribeReservedNodeOfferingsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedNodeOfferingsRequest()); }
public CreateLogStreamRequest(string VAR_STRING, string VAR_STRING) { _logGroupName = VAR_STRING; _logStreamName = VAR_STRING; }
public virtual DetachStaticIpResponse METHOD_NAME(DetachStaticIpRequest VAR_DETACHSTATICIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachStaticIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachStaticIpResponseUnmarshaller.Instance; return Invoke<DetachStaticIpResponse>(VAR_DETACHSTATICIPREQUEST, VAR_VAR); }
public static CharArraySet METHOD_NAME(CharArraySet VAR_CHARARRAYSET) { if (VAR_CHARARRAYSET == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } if (VAR_CHARARRAYSET == EMPTY_SET) { return EMPTY_SET; } if (VAR_CHARARRAYSET.map is CharArrayMap.UnmodifiableCharArrayMap<object>) { return VAR_CHARARRAYSET; } return new CharArraySet(CharArrayMap.UnmodifiableMap<object>(VAR_CHARARRAYSET.map)); }
public virtual BatchDetectKeyPhrasesResponse METHOD_NAME(BatchDetectKeyPhrasesRequest VAR_BATCHDETECTKEYPHRASESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDetectKeyPhrasesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDetectKeyPhrasesResponseUnmarshaller.Instance; return Invoke<BatchDetectKeyPhrasesResponse>(VAR_BATCHDETECTKEYPHRASESREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT]); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_WORDCOUNT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.SingletonPredictionContext)) { return false; } } if (this.GetHashCode() != VAR_OBJECT.GetHashCode()) { return false; } Antlr4.Runtime.Atn.SingletonPredictionContext VAR_ANTLR4.RUNTIME.ATN.SINGLETONPREDICTIONCONTEXT = (Antlr4.Runtime.Atn.SingletonPredictionContext)VAR_OBJECT; return returnState == VAR_ANTLR4.RUNTIME.ATN.SINGLETONPREDICTIONCONTEXT.returnState && parent.METHOD_NAME(VAR_ANTLR4.RUNTIME.ATN.SINGLETONPREDICTIONCONTEXT.parent); }
public virtual Sharpen.ResourceBundle METHOD_NAME() { return resourceBundle; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { if (stopTags != LITERAL_NULL) { TokenStream VAR_TOKENSTREAM = new JapanesePartOfSpeechStopFilter(m_luceneMatchVersion, enablePositionIncrements, VAR_TOKENSTREAM, stopTags); return VAR_TOKENSTREAM; } else { return VAR_TOKENSTREAM; } }
public int[] METHOD_NAME() { int VAR_INT = NumBreaks; if (VAR_INT < LITERAL_INT) { return EMPTY_INT_ARRAY; } int[] VAR_INT[] = new int[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { Break VAR_BREAK = _breaks[i]; VAR_INT[][i] = VAR_BREAK.main; } return VAR_INT[]; }
public virtual CreateEventSubscriptionResponse METHOD_NAME(CreateEventSubscriptionRequest VAR_CREATEEVENTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEventSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEventSubscriptionResponseUnmarshaller.Instance; return Invoke<CreateEventSubscriptionResponse>(VAR_CREATEEVENTSUBSCRIPTIONREQUEST, VAR_VAR); }
public override V METHOD_NAME(object VAR_OBJECT) { return this.isInBounds(VAR_OBJECT) ? this._enclosing.METHOD_NAME(VAR_OBJECT) : default(V); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { this.Dx1 = Math.Min(VAR_INT, VAR_INT); this.Dy1 = Math.Min(VAR_INT, VAR_INT); this.Dx2 = Math.Max(VAR_INT, VAR_INT); this.Dy2 = Math.Max(VAR_INT, VAR_INT); }
public override int METHOD_NAME() { if (current == end) { return Done; } else { return Last(); } }
public virtual UpdateGcmChannelResponse METHOD_NAME(UpdateGcmChannelRequest VAR_UPDATEGCMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGcmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGcmChannelResponseUnmarshaller.Instance; return Invoke<UpdateGcmChannelResponse>(VAR_UPDATEGCMCHANNELREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { throw new InvalidOperationException(LITERAL_STRING); }
public PlacementGroup(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual SendCustomVerificationEmailResponse METHOD_NAME(SendCustomVerificationEmailRequest VAR_SENDCUSTOMVERIFICATIONEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendCustomVerificationEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendCustomVerificationEmailResponseUnmarshaller.Instance; return Invoke<SendCustomVerificationEmailResponse>(VAR_SENDCUSTOMVERIFICATIONEMAILREQUEST, VAR_VAR); }
public CreateCollectionRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (this) { int VAR_INT = indexOf(VAR_OBJECT); if (VAR_INT == -LITERAL_INT) { return false; } METHOD_NAME(VAR_INT); return true; } }
public bool METHOD_NAME(char VAR_CHAR) { return char.IsDigit(VAR_CHAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(WSBool1); VAR_ILITTLEENDIANOUTPUT.WriteByte(WSBool2); }
public SubmitGenerateTaskRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual E METHOD_NAME(E VAR_E) { return backingMap.ceilingKey(VAR_E); }
public virtual BatchApplyUpdateActionResponse METHOD_NAME(BatchApplyUpdateActionRequest VAR_BATCHAPPLYUPDATEACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchApplyUpdateActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchApplyUpdateActionResponseUnmarshaller.Instance; return Invoke<BatchApplyUpdateActionResponse>(VAR_BATCHAPPLYUPDATEACTIONREQUEST, VAR_VAR); }
public Break(RecordInputStream VAR_RECORDINPUTSTREAM) { main = VAR_RECORDINPUTSTREAM.ReadUShort() - LITERAL_INT; subFrom = VAR_RECORDINPUTSTREAM.ReadUShort(); subTo = VAR_RECORDINPUTSTREAM.ReadUShort(); }
public virtual NGit.Fnmatch.FileNameMatcher METHOD_NAME() { IList<Head> VAR_ILIST<HEAD> = new AList<Head>(heads.Count); Sharpen.Collections.AddAll(VAR_ILIST<HEAD>, heads); return new NGit.Fnmatch.FileNameMatcher(VAR_ILIST<HEAD>); }
public static bool METHOD_NAME(string VAR_STRING) { return VAR_STRING == LITERAL_NULL || VAR_STRING.Length == LITERAL_INT; }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public virtual ModifySubnetAttributeResponse METHOD_NAME(ModifySubnetAttributeRequest VAR_MODIFYSUBNETATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySubnetAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySubnetAttributeResponseUnmarshaller.Instance; return Invoke<ModifySubnetAttributeResponse>(VAR_MODIFYSUBNETATTRIBUTEREQUEST, VAR_VAR); }
public virtual GetProxySessionResponse METHOD_NAME(GetProxySessionRequest VAR_GETPROXYSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetProxySessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetProxySessionResponseUnmarshaller.Instance; return Invoke<GetProxySessionResponse>(VAR_GETPROXYSESSIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return (LITERAL_STRING + termtext.Utf8ToString() + LITERAL_STRING + DocFreq + LITERAL_STRING + TotalTermFreq); }
public String METHOD_NAME() { long VAR_LONG = _wholePart + LITERAL_INT; StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(VAR_LONG); VAR_STRINGBUILDER[VAR_STRINGBUILDER.Length - LITERAL_INT] = LITERAL_CHAR; return VAR_STRINGBUILDER.ToString(); }
public bool METHOD_NAME(IndexInput VAR_INDEXINPUT, FieldInfo VAR_FIELDINFO) { return VAR_INDEXINPUT == startDocIn && indexHasFreq == (VAR_FIELDINFO.IndexOptions.CompareTo(IndexOptions.DOCS_AND_FREQS) >= LITERAL_INT) && indexHasPos == (VAR_FIELDINFO.IndexOptions.CompareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= LITERAL_INT) && indexHasPayloads == VAR_FIELDINFO.HasPayloads; }
public Sort(SortField VAR_SORTFIELD) { SetSort(VAR_SORTFIELD); }
public static byte[] METHOD_NAME(string VAR_STRING) { byte[] VAR_BYTE[] = new byte[VAR_STRING.Length]; for (int k = VAR_BYTE[].Length - LITERAL_INT; k >= LITERAL_INT; k--) { char VAR_CHAR = VAR_STRING[k]; if (VAR_CHAR > LITERAL_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().notASCIIString, VAR_STRING)); } VAR_BYTE[][k] = unchecked((byte)VAR_CHAR); } return VAR_BYTE[]; }
public virtual PurgeQueueResponse METHOD_NAME(PurgeQueueRequest VAR_PURGEQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurgeQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurgeQueueResponseUnmarshaller.Instance; return Invoke<PurgeQueueResponse>(VAR_PURGEQUEUEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(RuleContext VAR_RULECONTEXT, int VAR_INT, int VAR_INT) { return true; }
public virtual ListStreamsResponse METHOD_NAME() { return METHOD_NAME(new ListStreamsRequest()); }
public virtual string METHOD_NAME() { return new string (surfaceForm, offset, length); }
public virtual GetVaultNotificationsResponse METHOD_NAME(GetVaultNotificationsRequest VAR_GETVAULTNOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVaultNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVaultNotificationsResponseUnmarshaller.Instance; return Invoke<GetVaultNotificationsResponse>(VAR_GETVAULTNOTIFICATIONSREQUEST, VAR_VAR); }
public virtual DeleteTypedLinkFacetResponse METHOD_NAME(DeleteTypedLinkFacetRequest VAR_DELETETYPEDLINKFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTypedLinkFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTypedLinkFacetResponseUnmarshaller.Instance; return Invoke<DeleteTypedLinkFacetResponse>(VAR_DELETETYPEDLINKFACETREQUEST, VAR_VAR); }
public int METHOD_NAME() { return this.pos; }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF) + docIDs.METHOD_NAME() + offsets.METHOD_NAME(); }
public virtual PushCommand METHOD_NAME() { return new PushCommand(repo); }
public virtual SelectResponse METHOD_NAME(SelectRequest VAR_SELECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SelectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SelectResponseUnmarshaller.Instance; return Invoke<SelectResponse>(VAR_SELECTREQUEST, VAR_VAR); }
public ByteArrayDataOutput(byte[] VAR_BYTE[]) { Reset(VAR_BYTE[]); }
public bool METHOD_NAME(string VAR_STRING) { return directory.METHOD_NAME(VAR_STRING); }
public bool METHOD_NAME(IndexInput VAR_INDEXINPUT, FieldInfo VAR_FIELDINFO) { return VAR_INDEXINPUT == startDocIn && indexHasOffsets == (VAR_FIELDINFO.IndexOptions.CompareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= LITERAL_INT) && indexHasPayloads == VAR_FIELDINFO.HasPayloads; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is DanishStemmer; }
public virtual Query METHOD_NAME(IQueryNode VAR_IQUERYNODE) { BooleanQueryNode VAR_BOOLEANQUERYNODE = (BooleanQueryNode)VAR_IQUERYNODE; BooleanQuery VAR_BOOLEANQUERY = new BooleanQuery(); IList<IQueryNode> VAR_ILIST<IQUERYNODE> = VAR_BOOLEANQUERYNODE.GetChildren(); if (VAR_ILIST<IQUERYNODE> != LITERAL_NULL) { foreach (IQueryNode child in VAR_ILIST<IQUERYNODE>) { object VAR_OBJECT = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID); if (VAR_OBJECT != LITERAL_NULL) { Query VAR_QUERY = (Query)VAR_OBJECT; try { VAR_BOOLEANQUERY.Add(VAR_QUERY, GetModifierValue(child)); } catch (BooleanQuery.TooManyClausesException ex) { throw new QueryNodeException(new Message(QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, BooleanQuery.MaxClauseCount, VAR_IQUERYNODE.ToQueryString(new EscapeQuerySyntax())), ex); } } } } return VAR_BOOLEANQUERY; }
public virtual string METHOD_NAME() { return name; }
public virtual ITerminalNode[] METHOD_NAME(int VAR_INT) { if (children == LITERAL_NULL) { return Collections.EmptyList<ITerminalNode>(); } List<ITerminalNode> VAR_LIST<ITERMINALNODE> = LITERAL_NULL; foreach (IParseTree o in children) { if (o is ITerminalNode) { ITerminalNode VAR_ITERMINALNODE = (ITerminalNode)o; IToken VAR_ITOKEN = VAR_ITERMINALNODE.Symbol; if (VAR_ITOKEN.Type == VAR_INT) { if (VAR_LIST<ITERMINALNODE> == LITERAL_NULL) { VAR_LIST<ITERMINALNODE> = new List<ITerminalNode>(); } VAR_LIST<ITERMINALNODE>.Add(VAR_ITERMINALNODE); } } } if (VAR_LIST<ITERMINALNODE> == LITERAL_NULL) { return Collections.EmptyList<ITerminalNode>(); } return VAR_LIST<ITERMINALNODE>; }
public virtual UpdateApnsChannelResponse METHOD_NAME(UpdateApnsChannelRequest VAR_UPDATEAPNSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApnsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApnsChannelResponseUnmarshaller.Instance; return Invoke<UpdateApnsChannelResponse>(VAR_UPDATEAPNSCHANNELREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return input; }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordSize - HEADER_SIZE); int VAR_INT = VAR_INT + HEADER_SIZE; Array.Copy(field_1_UID, LITERAL_INT, VAR_BYTE[], VAR_INT, LITERAL_INT); VAR_BYTE[][VAR_INT + LITERAL_INT] = field_2_marker; Array.Copy(field_pictureData, LITERAL_INT, VAR_BYTE[], VAR_INT + LITERAL_INT, field_pictureData.Length); VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT + RecordSize, RecordId, RecordSize, this); return HEADER_SIZE + LITERAL_INT + LITERAL_INT + field_pictureData.Length; }
public virtual DescribeFolderContentsResponse METHOD_NAME(DescribeFolderContentsRequest VAR_DESCRIBEFOLDERCONTENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFolderContentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFolderContentsResponseUnmarshaller.Instance; return Invoke<DescribeFolderContentsResponse>(VAR_DESCRIBEFOLDERCONTENTSREQUEST, VAR_VAR); }
public CreateDBInstanceReadReplicaRequest(string VAR_STRING, string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; _sourceDBInstanceIdentifier = VAR_STRING; }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public virtual CreateDefaultSubnetResponse METHOD_NAME(CreateDefaultSubnetRequest VAR_CREATEDEFAULTSUBNETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDefaultSubnetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDefaultSubnetResponseUnmarshaller.Instance; return Invoke<CreateDefaultSubnetResponse>(VAR_CREATEDEFAULTSUBNETREQUEST, VAR_VAR); }
public virtual AbbreviatedObjectId METHOD_NAME() { return newId; }
public virtual V METHOD_NAME(V VAR_V) { V VAR_V = this.VAR_V; this.VAR_V = VAR_V; return VAR_V; }
public virtual string METHOD_NAME(string VAR_STRING, string VAR_STRING) { string[] VAR_STRING[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_STRING[] = (string[])VAR_OBJECT; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_STRING; } if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return VAR_STRING; } else if (VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT || VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT) { return VAR_STRING; } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_STRING[] = PropToStringArray(VAR_STRING); valByRound[VAR_STRING] = VAR_STRING[]; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_extBookIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_firstSheetIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_lastSheetIndex); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_reserved); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_subex_len); }
public java.nio.Buffer METHOD_NAME() { _position = LITERAL_INT; _mark = UNSET_MARK; return this; }
public short METHOD_NAME() { return field_1_hide_obj; }
public PrintGridlinesRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_print_gridlines = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual CreateEventTrackerResponse METHOD_NAME(CreateEventTrackerRequest VAR_CREATEEVENTTRACKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEventTrackerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEventTrackerResponseUnmarshaller.Instance; return Invoke<CreateEventTrackerResponse>(VAR_CREATEEVENTTRACKERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return index < to; }
public void METHOD_NAME(ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD) { records.Remove(VAR_EXTENDEDFORMATRECORD); numxfs--; }
public virtual void METHOD_NAME(IRevision VAR_IREVISION) { lock (padlock) { EnsureOpen(); if (currentRevision != LITERAL_NULL) { int VAR_INT = VAR_IREVISION.CompareTo(currentRevision.Revision); if (VAR_INT == LITERAL_INT) { VAR_IREVISION.Release(); return; } if (VAR_INT < LITERAL_INT) { VAR_IREVISION.Release(); throw new ArgumentException(string.Format(LITERAL_STRING, VAR_IREVISION, currentRevision), LITERAL_STRING); } } RefCountedRevision VAR_REFCOUNTEDREVISION = currentRevision; currentRevision = new RefCountedRevision(VAR_IREVISION); if (VAR_REFCOUNTEDREVISION != LITERAL_NULL) VAR_REFCOUNTEDREVISION.DecRef(); CheckExpiredSessions(); } }
public bool METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return VAR_ANYOBJECTID != LITERAL_NULL ? METHOD_NAME(this, VAR_ANYOBJECTID) : false; }
public virtual DeleteBGPPeerResponse METHOD_NAME(DeleteBGPPeerRequest VAR_DELETEBGPPEERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBGPPeerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBGPPeerResponseUnmarshaller.Instance; return Invoke<DeleteBGPPeerResponse>(VAR_DELETEBGPPEERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual DeleteVpcPeeringConnectionResponse METHOD_NAME(DeleteVpcPeeringConnectionRequest VAR_DELETEVPCPEERINGCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcPeeringConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcPeeringConnectionResponseUnmarshaller.Instance; return Invoke<DeleteVpcPeeringConnectionResponse>(VAR_DELETEVPCPEERINGCONNECTIONREQUEST, VAR_VAR); }
public virtual UpdateIdentityPoolResponse METHOD_NAME(UpdateIdentityPoolRequest VAR_UPDATEIDENTITYPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateIdentityPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateIdentityPoolResponseUnmarshaller.Instance; return Invoke<UpdateIdentityPoolResponse>(VAR_UPDATEIDENTITYPOOLREQUEST, VAR_VAR); }
public override string METHOD_NAME(string VAR_STRING, AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS) { return METHOD_NAME(VAR_STRING, VAR_ALIBABACLOUDCREDENTIALS.GetAccessKeySecret()); }
public virtual GetDeviceResponse METHOD_NAME(GetDeviceRequest VAR_GETDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeviceResponseUnmarshaller.Instance; return Invoke<GetDeviceResponse>(VAR_GETDEVICEREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { _out.METHOD_NAME(VAR_INT); _size += LITERAL_INT; }
public bool METHOD_NAME() { return LITERAL_INT <= Status && LITERAL_INT > Status; }
public static CredentialsProvider METHOD_NAME() { return defaultProvider; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerPushModeAction)) { return false; } } return mode == ((Antlr4.Runtime.Atn.LexerPushModeAction)VAR_OBJECT).mode; }
public virtual void METHOD_NAME() { bool VAR_BOOL = false; for (int d = LITERAL_INT; d < Interpreter.decisionToDFA.Length; d++) { DFA VAR_DFA = Interpreter.decisionToDFA[d]; if (VAR_DFA.states.Count > LITERAL_INT) { if (VAR_BOOL) { Output.WriteLine(); } Output.WriteLine(LITERAL_STRING + VAR_DFA.decision + LITERAL_STRING); Output.Write(VAR_DFA.ToString(Vocabulary)); VAR_BOOL = true; } } }
public override java.nio.FloatBuffer METHOD_NAME(int VAR_INT, float VAR_FLOAT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CancelClusterResponse METHOD_NAME(CancelClusterRequest VAR_CANCELCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelClusterResponseUnmarshaller.Instance; return Invoke<CancelClusterResponse>(VAR_CANCELCLUSTERREQUEST, VAR_VAR); }
public virtual DeleteSnapshotResponse METHOD_NAME(DeleteSnapshotRequest VAR_DELETESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteSnapshotResponse>(VAR_DELETESNAPSHOTREQUEST, VAR_VAR); }
public virtual DeletePhoneNumberResponse METHOD_NAME(DeletePhoneNumberRequest VAR_DELETEPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePhoneNumberResponseUnmarshaller.Instance; return Invoke<DeletePhoneNumberResponse>(VAR_DELETEPHONENUMBERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(URIish VAR_URIISH) { if (pushURIs.Contains(VAR_URIISH)) { return false; } return pushURIs.AddItem(VAR_URIISH); }
public virtual BytesRef METHOD_NAME() { if (scratch == LITERAL_NULL) { return LITERAL_NULL; } bool VAR_BOOL = false; try { byte[] VAR_BYTE[] = reader.Read(); if (VAR_BYTE[] != LITERAL_NULL) { scratch.Bytes = VAR_BYTE[]; scratch.Length = VAR_BYTE[].Length; scratch.Offset = LITERAL_INT; } else { IOUtils.Dispose(reader); scratch = LITERAL_NULL; } VAR_BOOL = true; return scratch; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(reader); } } }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_Create_DTM); }
public virtual CreateHealthCheckResponse METHOD_NAME(CreateHealthCheckRequest VAR_CREATEHEALTHCHECKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHealthCheckRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHealthCheckResponseUnmarshaller.Instance; return Invoke<CreateHealthCheckResponse>(VAR_CREATEHEALTHCHECKREQUEST, VAR_VAR); }
public virtual EnableVgwRoutePropagationResponse METHOD_NAME(EnableVgwRoutePropagationRequest VAR_ENABLEVGWROUTEPROPAGATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableVgwRoutePropagationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableVgwRoutePropagationResponseUnmarshaller.Instance; return Invoke<EnableVgwRoutePropagationResponse>(VAR_ENABLEVGWROUTEPROPAGATIONREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_BYTECOUNT); }
public virtual UpdateAutoScalingGroupResponse METHOD_NAME(UpdateAutoScalingGroupRequest VAR_UPDATEAUTOSCALINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAutoScalingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAutoScalingGroupResponseUnmarshaller.Instance; return Invoke<UpdateAutoScalingGroupResponse>(VAR_UPDATEAUTOSCALINGGROUPREQUEST, VAR_VAR); }
public virtual CreateNotebookInstanceResponse METHOD_NAME(CreateNotebookInstanceRequest VAR_CREATENOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNotebookInstanceResponseUnmarshaller.Instance; return Invoke<CreateNotebookInstanceResponse>(VAR_CREATENOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public virtual AllocateAddressResponse METHOD_NAME() { return METHOD_NAME(new AllocateAddressRequest()); }
public virtual CreateMLModelResponse METHOD_NAME(CreateMLModelRequest VAR_CREATEMLMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMLModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMLModelResponseUnmarshaller.Instance; return Invoke<CreateMLModelResponse>(VAR_CREATEMLMODELREQUEST, VAR_VAR); }
public ContinueRecord(byte[] VAR_BYTE[]) { field_1_data = VAR_BYTE[]; }
public Parser METHOD_NAME() { return parser; }
public virtual DeleteSolutionResponse METHOD_NAME(DeleteSolutionRequest VAR_DELETESOLUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSolutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSolutionResponseUnmarshaller.Instance; return Invoke<DeleteSolutionResponse>(VAR_DELETESOLUTIONREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return ObjectId.ZeroId.Equals(newObjectId); }
public int METHOD_NAME() { return nextPos; }
public virtual DescribeSpotFleetInstancesResponse METHOD_NAME(DescribeSpotFleetInstancesRequest VAR_DESCRIBESPOTFLEETINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotFleetInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotFleetInstancesResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetInstancesResponse>(VAR_DESCRIBESPOTFLEETINSTANCESREQUEST, VAR_VAR); }
public virtual ResetPasswordResponse METHOD_NAME(ResetPasswordRequest VAR_RESETPASSWORDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetPasswordRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetPasswordResponseUnmarshaller.Instance; return Invoke<ResetPasswordResponse>(VAR_RESETPASSWORDREQUEST, VAR_VAR); }
public override String METHOD_NAME() { return LITERAL_STRING + recordData.Length + LITERAL_STRING; }
public override Status METHOD_NAME() { if (workingTreeIt == LITERAL_NULL) { workingTreeIt = new FileTreeIterator(repo); } try { IndexDiff VAR_INDEXDIFF = new IndexDiff(repo, Constants.HEAD, workingTreeIt); VAR_INDEXDIFF.Diff(); return new Status(VAR_INDEXDIFF); } catch (IOException e) { throw new JGitInternalException(e.Message, e); } }
public PathHierarchyTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { delimiter = GetChar(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, PathHierarchyTokenizer.DEFAULT_DELIMITER); replacement = GetChar(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, delimiter); reverse = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); skip = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, PathHierarchyTokenizer.DEFAULT_SKIP); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override string METHOD_NAME() { return base.METHOD_NAME() + LITERAL_STRING + lockName; }
public virtual CreateFieldLevelEncryptionConfigResponse METHOD_NAME(CreateFieldLevelEncryptionConfigRequest VAR_CREATEFIELDLEVELENCRYPTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFieldLevelEncryptionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<CreateFieldLevelEncryptionConfigResponse>(VAR_CREATEFIELDLEVELENCRYPTIONCONFIGREQUEST, VAR_VAR); }
public java.io.Reader METHOD_NAME() { return _reader; }
public virtual DeleteHealthCheckResponse METHOD_NAME(DeleteHealthCheckRequest VAR_DELETEHEALTHCHECKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHealthCheckRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHealthCheckResponseUnmarshaller.Instance; return Invoke<DeleteHealthCheckResponse>(VAR_DELETEHEALTHCHECKREQUEST, VAR_VAR); }
public override long METHOD_NAME() { return count; }
public int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { if (emptyComplexPart) { _complexData = new byte[LITERAL_INT]; } else { short VAR_SHORT = LittleEndian.GetShort(VAR_BYTE[], VAR_INT); short VAR_SHORT = LittleEndian.GetShort(VAR_BYTE[], VAR_INT + LITERAL_INT); short VAR_SHORT = LittleEndian.GetShort(VAR_BYTE[], VAR_INT + LITERAL_INT); int VAR_INT = GetActualSizeOfElements(VAR_SHORT) * VAR_SHORT; if (VAR_INT == _complexData.Length) { _complexData = new byte[VAR_INT + LITERAL_INT]; sizeIncludesHeaderSize = false; } Array.Copy(VAR_BYTE[], VAR_INT, _complexData, LITERAL_INT, _complexData.Length); } return _complexData.Length; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { TwoDEval VAR_TWODEVAL = ConvertFirstArg(VAR_VALUEEVAL); int VAR_INT = LITERAL_INT; try { int VAR_INT = ResolveIndexArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); if (!VAR_TWODEVAL.IsColumn) { if (!VAR_TWODEVAL.IsRow) { return ErrorEval.REF_INVALID; } VAR_INT = VAR_INT; VAR_INT = LITERAL_INT; } return GetValueFromArea(VAR_TWODEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public override bool METHOD_NAME(BytesRef VAR_BYTESREF) { throw new System.NotSupportedException(this.GetType().Name + LITERAL_STRING); }
public virtual GetSmsTemplateResponse METHOD_NAME(GetSmsTemplateRequest VAR_GETSMSTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSmsTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSmsTemplateResponseUnmarshaller.Instance; return Invoke<GetSmsTemplateResponse>(VAR_GETSMSTEMPLATEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { if (this.m_field == LITERAL_NULL) return LITERAL_NULL; else return this.m_field.ToString(); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public NPOI.SS.UserModel.IHyperlink METHOD_NAME(HyperlinkType VAR_HYPERLINKTYPE) { return new HSSFHyperlink(VAR_HYPERLINKTYPE); }
public virtual UpdateGlobalSettingsResponse METHOD_NAME(UpdateGlobalSettingsRequest VAR_UPDATEGLOBALSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGlobalSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGlobalSettingsResponseUnmarshaller.Instance; return Invoke<UpdateGlobalSettingsResponse>(VAR_UPDATEGLOBALSETTINGSREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING) { if (VAR_STRING.Length > LITERAL_INT || VAR_STRING.Length > LITERAL_INT) { Debug.Assert(!VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal)); StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING.Length + LITERAL_INT + VAR_STRING.Length + VAR_STRING.Length); VAR_STRINGBUILDER.Append(VAR_STRING); if (VAR_STRING.Length > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(VAR_STRING); } if (VAR_STRING.Length > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(VAR_STRING); } return VAR_STRINGBUILDER.ToString(); } else { return VAR_STRING; } }
public static JGitText METHOD_NAME() { return NLS.GetBundleFor<JGitText>(); }
public virtual void METHOD_NAME(string VAR_STRING, char VAR_CHAR) { int VAR_INT = VAR_STRING.Length + LITERAL_INT; if (m_freenode + VAR_INT > m_eq.Length) { RedimNodeArrays(m_eq.Length + BLOCK_SIZE); } char[] VAR_CHAR[] = new char[VAR_INT--]; VAR_STRING.CopyTo(LITERAL_INT, VAR_CHAR[], LITERAL_INT, VAR_INT - LITERAL_INT); VAR_CHAR[][VAR_INT] = (char)LITERAL_INT; m_root = METHOD_NAME(m_root, VAR_CHAR[], LITERAL_INT, VAR_CHAR); }
public NameRecord METHOD_NAME(byte VAR_BYTE, int VAR_INT) { if (VAR_INT == -LITERAL_INT || VAR_INT + LITERAL_INT > short.MaxValue) throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); NameRecord VAR_NAMERECORD = new NameRecord(VAR_BYTE, (short)(VAR_INT)); AddName(VAR_NAMERECORD); return VAR_NAMERECORD; }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { if (VAR_CHAR[] == LITERAL_NULL) { if (VAR_CHAR[] == LITERAL_NULL || VAR_INT >= VAR_CHAR[].Length) return LITERAL_INT; else return -LITERAL_INT; } else { if (VAR_CHAR[] == LITERAL_NULL) { if (VAR_INT >= VAR_CHAR[].Length) return LITERAL_INT; else return LITERAL_INT; } } int VAR_INT = VAR_INT, VAR_INT = VAR_INT; while (VAR_INT < VAR_CHAR[].Length && VAR_INT < VAR_CHAR[].Length && VAR_CHAR[][VAR_INT] == VAR_CHAR[][VAR_INT]) { VAR_INT++; VAR_INT++; } if (VAR_INT == VAR_CHAR[].Length) { if (VAR_INT == VAR_CHAR[].Length) { return LITERAL_INT; } else { return -LITERAL_INT; } } else { if (VAR_INT == VAR_CHAR[].Length) { return LITERAL_INT; } else { if (VAR_CHAR[][VAR_INT] > VAR_CHAR[][VAR_INT]) return LITERAL_INT; else return -LITERAL_INT; } } }
public virtual GetVoiceConnectorResponse METHOD_NAME(GetVoiceConnectorRequest VAR_GETVOICECONNECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorResponse>(VAR_GETVOICECONNECTORREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = _values[VAR_INT]; _values[VAR_INT] = VAR_INT; if (VAR_INT == POIFSConstants.UNUSED_BLOCK) { _has_free_sectors = true; return; } if (VAR_INT == POIFSConstants.UNUSED_BLOCK) { RecomputeFree(); } }
public static bool METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], VAR_BYTE[].Length); }
public override void METHOD_NAME(IInputIterator VAR_IINPUTITERATOR) { if (VAR_IINPUTITERATOR.HasPayloads) { throw new ArgumentException(LITERAL_STRING); } if (VAR_IINPUTITERATOR.Comparer != LITERAL_NULL) { VAR_IINPUTITERATOR = new UnsortedInputIterator(VAR_IINPUTITERATOR); } if (VAR_IINPUTITERATOR.HasContexts) { throw new System.ArgumentException(LITERAL_STRING); } count = LITERAL_INT; trie = new JaspellTernarySearchTrie { MatchAlmostDiff = editDistance }; BytesRef VAR_BYTESREF; var VAR_VAR = new CharsRef(); while ((VAR_BYTESREF = VAR_IINPUTITERATOR.Next()) != LITERAL_NULL) { long VAR_LONG = VAR_IINPUTITERATOR.Weight; if (VAR_BYTESREF.Length == LITERAL_INT) { continue; } VAR_VAR.Grow(VAR_BYTESREF.Length); UnicodeUtil.UTF8toUTF16(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Length, VAR_VAR); trie.Put(VAR_VAR.ToString(), VAR_LONG); } }
public bool METHOD_NAME() { return verticalBorder.IsSet(field_1_options); }
public CreateDBInstanceRequest(string VAR_STRING, int VAR_INT, string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; _allocatedStorage = VAR_INT; _dbInstanceClass = VAR_STRING; _engine = VAR_STRING; _masterUsername = VAR_STRING; _masterUserPassword = VAR_STRING; }
public virtual DescribeCapacityProvidersResponse METHOD_NAME(DescribeCapacityProvidersRequest VAR_DESCRIBECAPACITYPROVIDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCapacityProvidersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCapacityProvidersResponseUnmarshaller.Instance; return Invoke<DescribeCapacityProvidersResponse>(VAR_DESCRIBECAPACITYPROVIDERSREQUEST, VAR_VAR); }
public virtual CreateQualificationTypeResponse METHOD_NAME(CreateQualificationTypeRequest VAR_CREATEQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateQualificationTypeResponseUnmarshaller.Instance; return Invoke<CreateQualificationTypeResponse>(VAR_CREATEQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(E VAR_E) { addLastImpl(VAR_E); }
public Patch() { files = new AList<FileHeader>(); errors = new AList<FormatError>(LITERAL_INT); }
public virtual GetSdkTypesResponse METHOD_NAME(GetSdkTypesRequest VAR_GETSDKTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSdkTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSdkTypesResponseUnmarshaller.Instance; return Invoke<GetSdkTypesResponse>(VAR_GETSDKTYPESREQUEST, VAR_VAR); }
public override String METHOD_NAME() { throw new NotImplementedException(LITERAL_STRING); }
public ListPhotoFacesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual bool METHOD_NAME() { return batchMode != LITERAL_NULL && batchMode.Value; }
public override bool METHOD_NAME() { return this.endpoint(true) == LITERAL_NULL; }
public override java.util.Set<java.util.MapClass.Entry<K, V>> METHOD_NAME() { java.util.TreeMap<K, V>.BoundedMap.BoundedEntrySet VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDENTRYSET = this._entrySet; return VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDENTRYSET != LITERAL_NULL ? VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDENTRYSET : (this._entrySet = new java.util.TreeMap<K, V>.BoundedMap.BoundedEntrySet(this)); }
public static CFRuleRecord METHOD_NAME(HSSFSheet VAR_HSSFSHEET, String VAR_STRING) { Ptg[] VAR_PTG[] = ParseFormula(VAR_STRING, VAR_HSSFSHEET); return new CFRuleRecord(CONDITION_TYPE_FORMULA, ComparisonOperator.NoComparison, VAR_PTG[], LITERAL_NULL); }
public DeleteAlbumsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public MissingFormatArgumentException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; }
public virtual DeleteApplicationOutputResponse METHOD_NAME(DeleteApplicationOutputRequest VAR_DELETEAPPLICATIONOUTPUTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationOutputRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationOutputResponseUnmarshaller.Instance; return Invoke<DeleteApplicationOutputResponse>(VAR_DELETEAPPLICATIONOUTPUTREQUEST, VAR_VAR); }
public PredictionContextCache METHOD_NAME() { return sharedContextCache; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Text); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DecisionState METHOD_NAME(int VAR_INT) { if (decisionToState.Count != LITERAL_INT) { return decisionToState[VAR_INT]; } return LITERAL_NULL; }
public void METHOD_NAME(int VAR_INT) { _externSheetRecord.METHOD_NAME(VAR_INT); }
public HSSFRequest() { records = new Hashtable(LITERAL_INT); }
public IQueryNode METHOD_NAME(string VAR_STRING) { IQueryNode VAR_IQUERYNODE; VAR_IQUERYNODE = Query(VAR_STRING); Jj_consume_token(LITERAL_INT); { if (true) return VAR_IQUERYNODE; } throw new Exception(LITERAL_STRING); }
public virtual DescribeUpdateResponse METHOD_NAME(DescribeUpdateRequest VAR_DESCRIBEUPDATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUpdateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUpdateResponseUnmarshaller.Instance; return Invoke<DescribeUpdateResponse>(VAR_DESCRIBEUPDATEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return value; }
public virtual int METHOD_NAME() { return (flags >> TYPE_SHIFT) & unchecked((int)(LITERAL_INT)); }
public override java.nio.DoubleBuffer METHOD_NAME(double VAR_DOUBLE) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putDouble(_position++ * libcore.io.SizeOf.DOUBLE, VAR_DOUBLE); return this; }
public void METHOD_NAME(CellCacheEntry VAR_CELLCACHEENTRY) { int VAR_INT = _evaluationFrames.Count; if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } VAR_INT--; CellEvaluationFrame VAR_CELLEVALUATIONFRAME = (CellEvaluationFrame)_evaluationFrames[VAR_INT]; if (VAR_CELLCACHEENTRY != VAR_CELLEVALUATIONFRAME.GetCCE()) { throw new InvalidOperationException(LITERAL_STRING); } _evaluationFrames.RemoveAt(VAR_INT); _currentlyEvaluatingCells.Remove(VAR_CELLCACHEENTRY); }
public NumberPtg(double VAR_DOUBLE) { field_1_value = VAR_DOUBLE; }
public virtual GroupingSearch METHOD_NAME(Sort VAR_SORT) { this.VAR_SORT = VAR_SORT; return this; }
public IBorderFormatting METHOD_NAME() { return GetBorderFormatting(true); }
public HSSFSimpleShape METHOD_NAME(HSSFChildAnchor VAR_HSSFCHILDANCHOR) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = new HSSFSimpleShape(this, VAR_HSSFCHILDANCHOR); VAR_HSSFSIMPLESHAPE.Parent = this; VAR_HSSFSIMPLESHAPE.Anchor = VAR_HSSFCHILDANCHOR; shapes.Add(VAR_HSSFSIMPLESHAPE); OnCreate(VAR_HSSFSIMPLESHAPE); EscherSpRecord VAR_ESCHERSPRECORD = (EscherSpRecord)VAR_HSSFSIMPLESHAPE.GetEscherContainer().GetChildById(EscherSpRecord.RECORD_ID); if (VAR_HSSFSIMPLESHAPE.Anchor.IsHorizontallyFlipped) { VAR_ESCHERSPRECORD.Flags = (VAR_ESCHERSPRECORD.Flags | EscherSpRecord.FLAG_FLIPHORIZ); } if (VAR_HSSFSIMPLESHAPE.Anchor.IsVerticallyFlipped) { VAR_ESCHERSPRECORD.Flags = (VAR_ESCHERSPRECORD.Flags | EscherSpRecord.FLAG_FLIPVERT); } return VAR_HSSFSIMPLESHAPE; }
public virtual GetLifecyclePolicyResponse METHOD_NAME(GetLifecyclePolicyRequest VAR_GETLIFECYCLEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLifecyclePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyResponse>(VAR_GETLIFECYCLEPOLICYREQUEST, VAR_VAR); }
public int? METHOD_NAME(string VAR_STRING) { if (LITERAL_NULL != DictionaryUtil.Get(ResponseDictionary, VAR_STRING)) { return int.Parse(DictionaryUtil.Get(ResponseDictionary, VAR_STRING)); } return LITERAL_NULL; }
public override int METHOD_NAME() { return backingMap.METHOD_NAME(); }
public override java.util.MapClass.Entry<K, V> METHOD_NAME() { return this.nextEntry(); }
public override bool METHOD_NAME() { return a.METHOD_NAME(); }
public GetRepoAuthorizationListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public int METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, VAR_INT); }
public LexerATNConfig(LexerATNConfig VAR_LEXERATNCONFIG, ATNState VAR_ATNSTATE) : base(c, state, c.context, c.semanticContext) { this.lexerActionExecutor = VAR_LEXERATNCONFIG.lexerActionExecutor; this.passedThroughNonGreedyDecision = checkNonGreedyDecision(VAR_LEXERATNCONFIG, VAR_ATNSTATE); }
public virtual IQueryNodeProcessor METHOD_NAME(int VAR_INT, IQueryNodeProcessor VAR_IQUERYNODEPROCESSOR) { IQueryNodeProcessor VAR_IQUERYNODEPROCESSOR = this.processors[VAR_INT]; this.processors[VAR_INT] = VAR_IQUERYNODEPROCESSOR; if (VAR_IQUERYNODEPROCESSOR != VAR_IQUERYNODEPROCESSOR) { VAR_IQUERYNODEPROCESSOR.SetQueryConfigHandler(this.queryConfig); } return VAR_IQUERYNODEPROCESSOR; }
public string METHOD_NAME(int VAR_INT) { if (parser != LITERAL_NULL && VAR_INT >= LITERAL_INT) return parser.RuleNames[VAR_INT]; return LITERAL_STRING + VAR_INT + LITERAL_STRING; }
public override java.nio.ByteBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public override DirCache METHOD_NAME() { if (filepatterns.IsEmpty()) { throw new NoFilepatternException(JGitText.Get().atLeastOnePatternIsRequired); } CheckCallable(); DirCache VAR_DIRCACHE = LITERAL_NULL; try { VAR_DIRCACHE = repo.LockDirCache(); DirCacheBuilder VAR_DIRCACHEBUILDER = VAR_DIRCACHE.Builder(); TreeWalk VAR_TREEWALK = new TreeWalk(repo); VAR_TREEWALK.Reset(); VAR_TREEWALK.Recursive = true; VAR_TREEWALK.Filter = PathFilterGroup.CreateFromStrings(filepatterns); VAR_TREEWALK.AddTree(new DirCacheBuildIterator(VAR_DIRCACHEBUILDER)); while (VAR_TREEWALK.Next()) { FilePath VAR_FILEPATH = new FilePath(repo.WorkTree, VAR_TREEWALK.PathString); FileMode VAR_FILEMODE = VAR_TREEWALK.GetFileMode(LITERAL_INT); if (VAR_FILEMODE.GetObjectType() == Constants.OBJ_BLOB) { Delete(VAR_FILEPATH); } } VAR_DIRCACHEBUILDER.Commit(); SetCallable(false); } catch (IOException e) { throw new JGitInternalException(JGitText.Get().exceptionCaughtDuringExecutionOfRmCommand, e); } finally { if (VAR_DIRCACHE != LITERAL_NULL) { VAR_DIRCACHE.Unlock(); } } return VAR_DIRCACHE; }
public virtual DeleteGatewayResponseResponse METHOD_NAME(DeleteGatewayResponseRequest VAR_DELETEGATEWAYRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGatewayResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGatewayResponseResponseUnmarshaller.Instance; return Invoke<DeleteGatewayResponseResponse>(VAR_DELETEGATEWAYRESPONSEREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new NorwegianLightStemFilter(VAR_TOKENSTREAM, flags); }
public GetUserSourceRepoListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual DescribeEventBusResponse METHOD_NAME(DescribeEventBusRequest VAR_DESCRIBEEVENTBUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventBusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventBusResponseUnmarshaller.Instance; return Invoke<DescribeEventBusResponse>(VAR_DESCRIBEEVENTBUSREQUEST, VAR_VAR); }
public DefaultAcsClient(IClientProfile VAR_ICLIENTPROFILE, AlibabaCloudCredentialsProvider VAR_ALIBABACLOUDCREDENTIALSPROVIDER) : this() { clientProfile = VAR_ICLIENTPROFILE; this.VAR_ALIBABACLOUDCREDENTIALSPROVIDER = VAR_ALIBABACLOUDCREDENTIALSPROVIDER; clientProfile.SetCredentialsProvider(this.VAR_ALIBABACLOUDCREDENTIALSPROVIDER); }
public override string METHOD_NAME() { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(_limit - _position); { for (int i = _position; i < _limit; i++) { VAR_JAVA.LANG.STRINGBUILDER.append(get(i)); } } return VAR_JAVA.LANG.STRINGBUILDER.METHOD_NAME(); }
public byte[] METHOD_NAME() { return replacementBytes; }
public override Object METHOD_NAME() { SeriesToChartGroupRecord VAR_SERIESTOCHARTGROUPRECORD = new SeriesToChartGroupRecord(); VAR_SERIESTOCHARTGROUPRECORD.field_1_chartGroupIndex = field_1_chartGroupIndex; return VAR_SERIESTOCHARTGROUPRECORD; }
public AttributeValue(List<string> VAR_LIST<STRING>) { _ss = VAR_LIST<STRING>; }
public HSSFComment(EscherContainerRecord VAR_ESCHERCONTAINERRECORD, ObjRecord VAR_OBJRECORD, TextObjectRecord VAR_TEXTOBJECTRECORD, NoteRecord VAR_NOTERECORD) : base(spContainer, objRecord, textObjectRecord) { this.VAR_NOTERECORD = VAR_NOTERECORD; }
public FilteredDocIdSetIterator(DocIdSetIterator VAR_DOCIDSETITERATOR) { if (VAR_DOCIDSETITERATOR == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } m_innerIter = VAR_DOCIDSETITERATOR; doc = -LITERAL_INT; }
public virtual DeleteDBClusterParameterGroupResponse METHOD_NAME(DeleteDBClusterParameterGroupRequest VAR_DELETEDBCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<DeleteDBClusterParameterGroupResponse>(VAR_DELETEDBCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public override Int64sRef METHOD_NAME(int VAR_INT) { Debug.Assert(nextValues.Length >= LITERAL_INT); Debug.Assert(VAR_INT > LITERAL_INT); Debug.Assert(nextValues.Offset + nextValues.Length <= nextValues.Int64s.Length); nextValues.Offset += nextValues.Length; int VAR_INT = m_valueCount - position - LITERAL_INT; if (VAR_INT <= LITERAL_INT) { throw new System.IO.EndOfStreamException(); } VAR_INT = Math.Min(VAR_INT, VAR_INT); if (nextValues.Offset == nextValues.Int64s.Length) { long VAR_LONG = format.ByteCount(packedIntsVersion, VAR_INT, m_bitsPerValue); int VAR_INT = (int)Math.Min(VAR_LONG, nextBlocks.Length); m_in.ReadBytes(nextBlocks, LITERAL_INT, VAR_INT); if (VAR_INT < nextBlocks.Length) { Arrays.Fill(nextBlocks, VAR_INT, nextBlocks.Length, (byte)LITERAL_INT); } bulkOperation.Decode(nextBlocks, LITERAL_INT, nextValues.Int64s, LITERAL_INT, iterations); nextValues.Offset = LITERAL_INT; } nextValues.Length = Math.Min(nextValues.Int64s.Length - nextValues.Offset, VAR_INT); position += nextValues.Length; return nextValues; }
public virtual UpdateServiceAccessPoliciesResponse METHOD_NAME(UpdateServiceAccessPoliciesRequest VAR_UPDATESERVICEACCESSPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateServiceAccessPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateServiceAccessPoliciesResponseUnmarshaller.Instance; return Invoke<UpdateServiceAccessPoliciesResponse>(VAR_UPDATESERVICEACCESSPOLICIESREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(ENCODED_SIZE); }
public virtual GetApplicationSettingsResponse METHOD_NAME(GetApplicationSettingsRequest VAR_GETAPPLICATIONSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApplicationSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApplicationSettingsResponseUnmarshaller.Instance; return Invoke<GetApplicationSettingsResponse>(VAR_GETAPPLICATIONSETTINGSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Codepage); }
public SharedFormulaRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { field_5_reserved = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.Available(); field_7_parsed_expr = NPOI.SS.Formula.Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM, VAR_INT); }
public virtual void METHOD_NAME() { if (this.lastPosition == -LITERAL_INT) { throw new System.InvalidOperationException(); } if (this.expectedModCount != this._enclosing.modCount) { throw new java.util.ConcurrentModificationException(); } try { this._enclosing.METHOD_NAME(this.lastPosition); } catch (System.IndexOutOfRangeException) { throw new java.util.ConcurrentModificationException(); } this.expectedModCount = this._enclosing.modCount; if (this.pos == this.lastPosition) { this.pos--; } this.lastPosition = -LITERAL_INT; }
public int METHOD_NAME(char VAR_CHAR) { Cell VAR_CELL = At(VAR_CHAR); return (VAR_CELL == LITERAL_NULL) ? -LITERAL_INT : VAR_CELL.@ref; }
public K METHOD_NAME(K VAR_K) { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.findBounded(VAR_K, java.util.TreeMap.Relation.CEILING); return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> != LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey() : default(K); }
public CreateApplicationRequest(string VAR_STRING) { _applicationName = VAR_STRING; }
public virtual int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT, int VAR_INT) { return METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT, VAR_INT, LITERAL_INT); }
public virtual DescribeContainerInstancesResponse METHOD_NAME(DescribeContainerInstancesRequest VAR_DESCRIBECONTAINERINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeContainerInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeContainerInstancesResponseUnmarshaller.Instance; return Invoke<DescribeContainerInstancesResponse>(VAR_DESCRIBECONTAINERINSTANCESREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { short[] VAR_SHORT[] = _tabids; for (int i = LITERAL_INT; i < VAR_SHORT[].Length; i++) { VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_SHORT[][i]); } }
public virtual ListIAMPolicyAssignmentsForUserResponse METHOD_NAME(ListIAMPolicyAssignmentsForUserRequest VAR_LISTIAMPOLICYASSIGNMENTSFORUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIAMPolicyAssignmentsForUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIAMPolicyAssignmentsForUserResponseUnmarshaller.Instance; return Invoke<ListIAMPolicyAssignmentsForUserResponse>(VAR_LISTIAMPOLICYASSIGNMENTSFORUSERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is DictionaryEntry) { object VAR_OBJECT = ((DictionaryEntry)VAR_OBJECT).Key; object VAR_OBJECT = ((DictionaryEntry)VAR_OBJECT).Value; if (VAR_OBJECT is string && VAR_OBJECT is Ref) { Ref VAR_REF = (Ref)VAR_OBJECT; if (VAR_REF.GetName().METHOD_NAME(this.@ref.GetName())) { ObjectId VAR_OBJECTID = VAR_REF.GetObjectId(); ObjectId VAR_OBJECTID = this.@ref.GetObjectId(); if (VAR_OBJECTID != LITERAL_NULL && VAR_OBJECTID != LITERAL_NULL && AnyObjectId.METHOD_NAME(VAR_OBJECTID, VAR_OBJECTID)) { return true; } } } } return false; }
public virtual RemoveFacetFromObjectResponse METHOD_NAME(RemoveFacetFromObjectRequest VAR_REMOVEFACETFROMOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveFacetFromObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveFacetFromObjectResponseUnmarshaller.Instance; return Invoke<RemoveFacetFromObjectResponse>(VAR_REMOVEFACETFROMOBJECTREQUEST, VAR_VAR); }
public static bool METHOD_NAME(char[] VAR_CHAR[], char[] VAR_CHAR[]) { if (VAR_CHAR[] == VAR_CHAR[]) { return true; } if (VAR_CHAR[] == LITERAL_NULL || VAR_CHAR[] == LITERAL_NULL || VAR_CHAR[].Length != VAR_CHAR[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_CHAR[].Length; i++) { if (VAR_CHAR[][i] != VAR_CHAR[][i]) { return false; } } } return true; }
public virtual AssociateRouteTableResponse METHOD_NAME(AssociateRouteTableRequest VAR_ASSOCIATEROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateRouteTableResponseUnmarshaller.Instance; return Invoke<AssociateRouteTableResponse>(VAR_ASSOCIATEROUTETABLEREQUEST, VAR_VAR); }
public void METHOD_NAME() { if (!initialized) ReadProperties(); if (sInf == LITERAL_NULL) { sInf = PropertySetFactory.CreateSummaryInformation(); } if (dsInf == LITERAL_NULL) { dsInf = PropertySetFactory.CreateDocumentSummaryInformation(); } }
public virtual DescribeCommentsResponse METHOD_NAME(DescribeCommentsRequest VAR_DESCRIBECOMMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCommentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCommentsResponseUnmarshaller.Instance; return Invoke<DescribeCommentsResponse>(VAR_DESCRIBECOMMENTSREQUEST, VAR_VAR); }
public MoPenCreateDeviceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual ApplySchemaResponse METHOD_NAME(ApplySchemaRequest VAR_APPLYSCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ApplySchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ApplySchemaResponseUnmarshaller.Instance; return Invoke<ApplySchemaResponse>(VAR_APPLYSCHEMAREQUEST, VAR_VAR); }
public MMSRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { if (VAR_RECORDINPUTSTREAM.Remaining == LITERAL_INT) { return; } field_1_AddMenuCount = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_2_delMenuCount = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); }
public UserInputQueryBuilder(QueryParser VAR_QUERYPARSER) { this.unSafeParser = VAR_QUERYPARSER; }
public virtual object METHOD_NAME(string VAR_STRING) { TSTNode VAR_TSTNODE = GetNode(VAR_STRING); if (VAR_TSTNODE == LITERAL_NULL) { return LITERAL_NULL; } return VAR_TSTNODE.data; }
public MergedGroup(T VAR_T) { this.VAR_T = VAR_T; }
public StoredField(string VAR_STRING, int VAR_INT) : base(name, TYPE) { FieldsData = new Int32(VAR_INT); }
public virtual NGit.Api.RebaseCommand METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; return this; }
public override Object METHOD_NAME() { return this; }
public virtual Query METHOD_NAME(XmlElement VAR_XMLELEMENT) { string VAR_STRING = DOMUtils.GetAttributeWithInheritanceOrFail(VAR_XMLELEMENT, LITERAL_STRING); string VAR_STRING = DOMUtils.GetNonBlankTextOrFail(VAR_XMLELEMENT); BooleanQuery VAR_BOOLEANQUERY = new BooleanQuery(DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, false)); VAR_BOOLEANQUERY.MinimumNumberShouldMatch = DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, LITERAL_INT); TokenStream VAR_TOKENSTREAM = LITERAL_NULL; try { VAR_TOKENSTREAM = analyzer.GetTokenStream(VAR_STRING, VAR_STRING); ITermToBytesRefAttribute VAR_ITERMTOBYTESREFATTRIBUTE = VAR_TOKENSTREAM.AddAttribute<ITermToBytesRefAttribute>(); Term VAR_TERM = LITERAL_NULL; BytesRef VAR_BYTESREF = VAR_ITERMTOBYTESREFATTRIBUTE.BytesRef; VAR_TOKENSTREAM.Reset(); while (VAR_TOKENSTREAM.IncrementToken()) { VAR_ITERMTOBYTESREFATTRIBUTE.FillBytesRef(); VAR_TERM = new Term(VAR_STRING, BytesRef.DeepCopyOf(VAR_BYTESREF)); VAR_BOOLEANQUERY.Add(new BooleanClause(new TermQuery(VAR_TERM), Occur.SHOULD)); } VAR_TOKENSTREAM.End(); } catch (IOException ioe) { throw new Exception(LITERAL_STRING + ioe); } finally { IOUtils.DisposeWhileHandlingException(VAR_TOKENSTREAM); } VAR_BOOLEANQUERY.Boost = DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, LITERAL_FLOAT); return VAR_BOOLEANQUERY; }
public virtual UpdateMailboxQuotaResponse METHOD_NAME(UpdateMailboxQuotaRequest VAR_UPDATEMAILBOXQUOTAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMailboxQuotaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMailboxQuotaResponseUnmarshaller.Instance; return Invoke<UpdateMailboxQuotaResponse>(VAR_UPDATEMAILBOXQUOTAREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT * (path.Length + LITERAL_INT)); for (int j = LITERAL_INT; j < path.Length; j++) { VAR_STRINGBUILDER.Append(path.GetComponent(j)).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(name); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_APPNAME); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (SheetName != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(SheetName); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(nameName); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetRecommenderConfigurationResponse METHOD_NAME(GetRecommenderConfigurationRequest VAR_GETRECOMMENDERCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRecommenderConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<GetRecommenderConfigurationResponse>(VAR_GETRECOMMENDERCONFIGURATIONREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (text.Index == text.BeginIndex) { return Done; } else { if (LITERAL_INT == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); return Done; } if (text.Index == text.EndIndex) { text.SetIndex(sentenceStarts[currentSentence]); } else { text.SetIndex(sentenceStarts[--currentSentence]); } return Current; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectKind)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectContext)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectInstance1)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectInstance2)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += VAR_DOUBLE[][i]; } VAR_DOUBLE = VAR_DOUBLE / VAR_DOUBLE[].Length; return VAR_DOUBLE; }
public virtual GetCheckerIpRangesResponse METHOD_NAME(GetCheckerIpRangesRequest VAR_GETCHECKERIPRANGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCheckerIpRangesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCheckerIpRangesResponseUnmarshaller.Instance; return Invoke<GetCheckerIpRangesResponse>(VAR_GETCHECKERIPRANGESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return currentSource.regionList.length; }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public WeightedSpanTerm(float VAR_FLOAT, string VAR_STRING, bool VAR_BOOL) : base(weight, term) { _positionSensitive = VAR_BOOL; }
public java.lang.StringBuffer METHOD_NAME(char[] VAR_CHAR[]) { lock (this) { append0(VAR_CHAR[]); return this; } }
public UploadServerCertificateRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _serverCertificateName = VAR_STRING; _certificateBody = VAR_STRING; _privateKey = VAR_STRING; }
public virtual IList<string> METHOD_NAME(RuleContext VAR_RULECONTEXT) { string[] VAR_STRING[] = RuleNames; IList<string> VAR_ILIST<STRING> = new List<string>(); while (VAR_RULECONTEXT != LITERAL_NULL) { int VAR_INT = VAR_RULECONTEXT.RuleIndex; if (VAR_INT < LITERAL_INT) { VAR_ILIST<STRING>.Add(LITERAL_STRING); } else { VAR_ILIST<STRING>.Add(VAR_STRING[][VAR_INT]); } VAR_RULECONTEXT = VAR_RULECONTEXT.Parent; } return VAR_ILIST<STRING>; }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_INT, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, LITERAL_INT); }
public int METHOD_NAME() { return _list.Count; }
public int METHOD_NAME(FormatRun VAR_FORMATRUN) { if (_character == VAR_FORMATRUN._character && _fontIndex == VAR_FORMATRUN._fontIndex) { return LITERAL_INT; } if (_character == VAR_FORMATRUN._character) { return _fontIndex - VAR_FORMATRUN._fontIndex; } return _character - VAR_FORMATRUN._character; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public override int METHOD_NAME() { lock (this) { return _size; } }
public string METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public int METHOD_NAME(String VAR_STRING, String VAR_STRING, String VAR_STRING) { return OrCreateLinkTable.METHOD_NAME(VAR_STRING, VAR_STRING, VAR_STRING); }
public virtual GetDeliverabilityTestReportResponse METHOD_NAME(GetDeliverabilityTestReportRequest VAR_GETDELIVERABILITYTESTREPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeliverabilityTestReportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeliverabilityTestReportResponseUnmarshaller.Instance; return Invoke<GetDeliverabilityTestReportResponse>(VAR_GETDELIVERABILITYTESTREPORTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return GetLeaf().METHOD_NAME(); }
public virtual RenameCallback METHOD_NAME() { return renameCallback; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual PutVoiceConnectorTerminationCredentialsResponse METHOD_NAME(PutVoiceConnectorTerminationCredentialsRequest VAR_PUTVOICECONNECTORTERMINATIONCREDENTIALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorTerminationCredentialsResponse>(VAR_PUTVOICECONNECTORTERMINATIONCREDENTIALSREQUEST, VAR_VAR); }
public virtual CreateGroupResponse METHOD_NAME(CreateGroupRequest VAR_CREATEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGroupResponseUnmarshaller.Instance; return Invoke<CreateGroupResponse>(VAR_CREATEGROUPREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_units); }
public override ObjectLoader METHOD_NAME(AnyObjectId VAR_ANYOBJECTID, int VAR_INT) { ObjectLoader VAR_OBJECTLOADER = db.OpenObject(this, VAR_ANYOBJECTID); if (VAR_OBJECTLOADER == LITERAL_NULL) { if (VAR_INT == OBJ_ANY) { throw new MissingObjectException(VAR_ANYOBJECTID.Copy(), LITERAL_STRING); } throw new MissingObjectException(VAR_ANYOBJECTID.Copy(), VAR_INT); } if (VAR_INT != OBJ_ANY && VAR_OBJECTLOADER.GetType() != VAR_INT) { throw new IncorrectObjectTypeException(VAR_ANYOBJECTID.Copy(), VAR_INT); } return VAR_OBJECTLOADER; }
public ParameterNameValue(string VAR_STRING, string VAR_STRING) { _parameterName = VAR_STRING; _parameterValue = VAR_STRING; }
public virtual AssociateIamInstanceProfileResponse METHOD_NAME(AssociateIamInstanceProfileRequest VAR_ASSOCIATEIAMINSTANCEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateIamInstanceProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateIamInstanceProfileResponseUnmarshaller.Instance; return Invoke<AssociateIamInstanceProfileResponse>(VAR_ASSOCIATEIAMINSTANCEPROFILEREQUEST, VAR_VAR); }
public CreateHostedZoneRequest(string VAR_STRING, string VAR_STRING) { _name = VAR_STRING; _callerReference = VAR_STRING; }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId, surfaceForm, offset, length); }
public virtual bool METHOD_NAME(string VAR_STRING) { return (Find(VAR_STRING) >= LITERAL_INT); }
public ServerException(string VAR_STRING, string VAR_STRING) : base(errorCode, errorMessage) { ErrorType = ErrorType.Server; }
public override string METHOD_NAME() { return LITERAL_STRING + mu + LITERAL_STRING; }
public virtual CreateDiskResponse METHOD_NAME(CreateDiskRequest VAR_CREATEDISKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDiskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDiskResponseUnmarshaller.Instance; return Invoke<CreateDiskResponse>(VAR_CREATEDISKREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return map.Put(VAR_OBJECT); }
public QueryLicensesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public ExpectedAttributeValue(AttributeValue VAR_ATTRIBUTEVALUE) { _value = VAR_ATTRIBUTEVALUE; }
public override long METHOD_NAME() { return GetCachedBytes().Length; }
public DescribeImageAttributeRequest(string VAR_STRING, ImageAttributeName VAR_IMAGEATTRIBUTENAME) { _imageId = VAR_STRING; _attribute = VAR_IMAGEATTRIBUTENAME; }
public HSSFAnchor() { CreateEscherAnchor(); }
public virtual V METHOD_NAME(V VAR_V) { V VAR_V = value; value = VAR_V; return VAR_V; }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { CheckPosition(VAR_INT); System.Array.Copy(_buf, _ReadIndex, VAR_BYTE[], VAR_INT, VAR_INT); _ReadIndex += VAR_INT; }
public virtual CancelDomainTransferToAnotherAwsAccountResponse METHOD_NAME(CancelDomainTransferToAnotherAwsAccountRequest VAR_CANCELDOMAINTRANSFERTOANOTHERAWSACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelDomainTransferToAnotherAwsAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller.Instance; return Invoke<CancelDomainTransferToAnotherAwsAccountResponse>(VAR_CANCELDOMAINTRANSFERTOANOTHERAWSACCOUNTREQUEST, VAR_VAR); }
public virtual RecognizeCelebritiesResponse METHOD_NAME(RecognizeCelebritiesRequest VAR_RECOGNIZECELEBRITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RecognizeCelebritiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RecognizeCelebritiesResponseUnmarshaller.Instance; return Invoke<RecognizeCelebritiesResponse>(VAR_RECOGNIZECELEBRITIESREQUEST, VAR_VAR); }
public SideBandOutputStream(int VAR_INT, int VAR_INT, OutputStream VAR_OUTPUTSTREAM) { if (VAR_INT <= LITERAL_INT || VAR_INT > LITERAL_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().channelMustBeInRange0_255, Sharpen.Extensions.ValueOf(VAR_INT))); } if (VAR_INT <= HDR_SIZE) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().packetSizeMustBeAtLeast, Sharpen.Extensions.ValueOf(VAR_INT), Sharpen.Extensions.ValueOf(HDR_SIZE))); } else { if (MAX_BUF < VAR_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().packetSizeMustBeAtMost, Sharpen.Extensions.ValueOf(VAR_INT), Sharpen.Extensions.ValueOf(MAX_BUF))); } } @out = VAR_OUTPUTSTREAM; buffer = new byte[VAR_INT]; buffer[LITERAL_INT] = unchecked((byte)VAR_INT); cnt = HDR_SIZE; }
public LexerATNConfig(ATNState VAR_ATNSTATE, int VAR_INT, PredictionContext VAR_PREDICTIONCONTEXT, LexerActionExecutor VAR_LEXERACTIONEXECUTOR) : base(state, alt, context, SemanticContext.NONE) { this.VAR_LEXERACTIONEXECUTOR = VAR_LEXERACTIONEXECUTOR; this.passedThroughNonGreedyDecision = false; }
public virtual string METHOD_NAME(IList<RevCommit> VAR_ILIST<REVCOMMIT>, Ref VAR_REF) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (RevCommit c in VAR_ILIST<REVCOMMIT>) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(c.GetName()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ToString(c.GetAuthorIdent())); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(c.GetShortMessage()); VAR_STRINGBUILDER.Append(LITERAL_STRING); } return VAR_STRINGBUILDER.ToString(); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_CHAR[][VAR_INT - LITERAL_INT] != LITERAL_CHAR) { return VAR_INT; } switch (VAR_CHAR[][VAR_INT - LITERAL_INT]) { case LITERAL_CHAR: case LITERAL_CHAR: return VAR_INT; case LITERAL_CHAR: if (VAR_INT > LITERAL_INT && VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR && VAR_CHAR[][VAR_INT - LITERAL_INT] != LITERAL_CHAR && VAR_CHAR[][VAR_INT - LITERAL_INT] != LITERAL_CHAR) { VAR_CHAR[][VAR_INT - LITERAL_INT] = LITERAL_CHAR; return VAR_INT - LITERAL_INT; } if (VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR || VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR || VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR || VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { return VAR_INT; } break; } return VAR_INT - LITERAL_INT; }
public TermsQueryBuilder(Analyzer VAR_ANALYZER) { this.VAR_ANALYZER = VAR_ANALYZER; }
public CreateDomainRequest(string VAR_STRING) { _domainName = VAR_STRING; }
public override Trie METHOD_NAME(Trie VAR_TRIE) { IList<string> VAR_ILIST<STRING> = VAR_TRIE.cmds; IList<Row> VAR_ILIST<ROW> = new List<Row>(); IList<Row> VAR_ILIST<ROW> = VAR_TRIE.VAR_ILIST<ROW>; int[] VAR_INT[] = new int[VAR_ILIST<ROW>.Count]; for (int j = VAR_ILIST<ROW>.Count - LITERAL_INT; j >= LITERAL_INT; j--) { Row VAR_ROW = new Remap(VAR_ILIST<ROW>[j], VAR_INT[]); bool VAR_BOOL = false; for (int i = LITERAL_INT; i < VAR_ILIST<ROW>.Count; i++) { Row VAR_ROW = Merge(VAR_ROW, VAR_ILIST<ROW>[i]); if (VAR_ROW != LITERAL_NULL) { VAR_ILIST<ROW>[i] = VAR_ROW; VAR_BOOL = true; VAR_INT[][j] = i; break; } } if (VAR_BOOL == false) { VAR_INT[][j] = VAR_ILIST<ROW>.Count; VAR_ILIST<ROW>.Add(VAR_ROW); } } int VAR_INT = VAR_INT[][VAR_TRIE.root]; Arrays.Fill(VAR_INT[], -LITERAL_INT); VAR_ILIST<ROW> = RemoveGaps(VAR_INT, VAR_ILIST<ROW>, new List<Row>(), VAR_INT[]); return new Trie(VAR_TRIE.forward, VAR_INT[][VAR_INT], VAR_ILIST<STRING>, VAR_ILIST<ROW>); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { CellRangeAddress8Bit VAR_CELLRANGEADDRESS8BIT = Range; return VAR_CELLRANGEADDRESS8BIT.FirstRow == VAR_INT && VAR_CELLRANGEADDRESS8BIT.FirstColumn == VAR_INT; }
public virtual CompleteLayerUploadResponse METHOD_NAME(CompleteLayerUploadRequest VAR_COMPLETELAYERUPLOADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CompleteLayerUploadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CompleteLayerUploadResponseUnmarshaller.Instance; return Invoke<CompleteLayerUploadResponse>(VAR_COMPLETELAYERUPLOADREQUEST, VAR_VAR); }
public virtual StopHumanLoopResponse METHOD_NAME(StopHumanLoopRequest VAR_STOPHUMANLOOPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopHumanLoopRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopHumanLoopResponseUnmarshaller.Instance; return Invoke<StopHumanLoopResponse>(VAR_STOPHUMANLOOPREQUEST, VAR_VAR); }
public virtual RevCommit METHOD_NAME() { return currentSource.sourceCommit; }
public virtual object METHOD_NAME(string VAR_STRING) { lock (this) { object VAR_OBJECT; perfObjects.TryGetValue(VAR_STRING, out VAR_OBJECT); return VAR_OBJECT; } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HindiStemFilter(VAR_TOKENSTREAM); }
public static java.text.BreakIterator METHOD_NAME() { return METHOD_NAME(System.Globalization.CultureInfo.CurrentCulture); }
public virtual UpdatePublicKeyResponse METHOD_NAME(UpdatePublicKeyRequest VAR_UPDATEPUBLICKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePublicKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePublicKeyResponseUnmarshaller.Instance; return Invoke<UpdatePublicKeyResponse>(VAR_UPDATEPUBLICKEYREQUEST, VAR_VAR); }
public override bool METHOD_NAME(RevWalk VAR_REVWALK, RevCommit VAR_REVCOMMIT) { return VAR_REVCOMMIT.ParentCount < LITERAL_INT; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(DefaultCountry)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(CurrentCountry)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override Object METHOD_NAME() { DefaultColWidthRecord VAR_DEFAULTCOLWIDTHRECORD = new DefaultColWidthRecord(); VAR_DEFAULTCOLWIDTHRECORD.field_1_col_width = field_1_col_width; return VAR_DEFAULTCOLWIDTHRECORD; }
public java.util.regex.Matcher METHOD_NAME(bool VAR_BOOL) { anchoringBounds = VAR_BOOL; useAnchoringBoundsImpl(address, VAR_BOOL); return this; }
public DocsEnum METHOD_NAME(int[] VAR_INT[]) { this.VAR_INT[] = VAR_INT[]; upto = -LITERAL_INT; return this; }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT || VAR_INT < LITERAL_INT) throw new TokenMgrError(LITERAL_STRING + VAR_INT + LITERAL_STRING, TokenMgrError.INVALID_LEXICAL_STATE); elsecurLexState = VAR_INT; }
public bool METHOD_NAME(int VAR_INT) { if (_limit == _array.Length) { growArray(_limit * LITERAL_INT); } _array[_limit++] = VAR_INT; return true; }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT / (ByteBlockCount + LITERAL_INT * ByteValueCount); if (VAR_INT == LITERAL_INT) { return LITERAL_INT; } else if ((VAR_INT - LITERAL_INT) * ByteValueCount >= VAR_INT) { return (int)Math.Ceiling((double)VAR_INT / ByteValueCount); } else { return VAR_INT; } }
public NameRecord METHOD_NAME(int VAR_INT) { return Workbook.METHOD_NAME(VAR_INT); }
public virtual DescribeJobResponse METHOD_NAME(DescribeJobRequest VAR_DESCRIBEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeJobResponseUnmarshaller.Instance; return Invoke<DescribeJobResponse>(VAR_DESCRIBEJOBREQUEST, VAR_VAR); }
public EscherPropertyMetaData(String VAR_STRING, byte VAR_BYTE) { this.VAR_STRING = VAR_STRING; this.VAR_BYTE = VAR_BYTE; }
public HSSFColor METHOD_NAME(byte VAR_BYTE, byte VAR_BYTE, byte VAR_BYTE) { HSSFColor VAR_HSSFCOLOR = LITERAL_NULL; int VAR_INT = int.MaxValue; byte[] VAR_BYTE[] = palette.GetColor(PaletteRecord.FIRST_COLOR_INDEX); for (short i = (short)PaletteRecord.FIRST_COLOR_INDEX; VAR_BYTE[] != LITERAL_NULL; VAR_BYTE[] = palette.GetColor(++i)) { int VAR_INT = Math.Abs(VAR_BYTE - VAR_BYTE[][LITERAL_INT]) + Math.Abs(VAR_BYTE - VAR_BYTE[][LITERAL_INT]) + Math.Abs(VAR_BYTE - VAR_BYTE[][LITERAL_INT]); if (VAR_INT < VAR_INT) { VAR_INT = VAR_INT; VAR_HSSFCOLOR = GetColor(i); } } return VAR_HSSFCOLOR; }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT) { lock (this) { deleteCharAt0(VAR_INT); return this; } }
public override TreeFilter METHOD_NAME() { return this; }
public override string METHOD_NAME() { if (isEmpty()) { return LITERAL_STRING; } java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(size() * LITERAL_INT); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = iterator(); while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { object VAR_OBJECT = VAR_JAVA.UTIL.ITERATOR<E>.next(); if (VAR_OBJECT != this) { VAR_JAVA.LANG.STRINGBUILDER.append(VAR_OBJECT); } else { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); } if (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); } } VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); return VAR_JAVA.LANG.STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public override string METHOD_NAME() { return LITERAL_STRING + shardIndex + LITERAL_STRING; }
public JobParameters(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _format = VAR_STRING; _type = VAR_STRING; _archiveId = VAR_STRING; _description = VAR_STRING; }
public virtual java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT, VAR_INT[].Length); }
public SupBookRecord(String VAR_STRING, String[] VAR_STRING[]) { field_1_number_of_sheets = (short)VAR_STRING[].Length; field_2_encoded_url = VAR_STRING; field_3_sheet_names = VAR_STRING[]; _isAddInFunctions = false; }
public SeriesLabelsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_formatFlags = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual DescribeAssessmentRunsResponse METHOD_NAME(DescribeAssessmentRunsRequest VAR_DESCRIBEASSESSMENTRUNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAssessmentRunsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAssessmentRunsResponseUnmarshaller.Instance; return Invoke<DescribeAssessmentRunsResponse>(VAR_DESCRIBEASSESSMENTRUNSREQUEST, VAR_VAR); }
public virtual DescribeClassicLinkInstancesResponse METHOD_NAME(DescribeClassicLinkInstancesRequest VAR_DESCRIBECLASSICLINKINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClassicLinkInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClassicLinkInstancesResponseUnmarshaller.Instance; return Invoke<DescribeClassicLinkInstancesResponse>(VAR_DESCRIBECLASSICLINKINSTANCESREQUEST, VAR_VAR); }
public virtual byte[] METHOD_NAME() { return new byte[m_blockSize]; }
public override Object METHOD_NAME() { SeriesIndexRecord VAR_SERIESINDEXRECORD = new SeriesIndexRecord(); VAR_SERIESINDEXRECORD.field_1_index = field_1_index; return VAR_SERIESINDEXRECORD; }
public virtual RegisterToWorkMailResponse METHOD_NAME(RegisterToWorkMailRequest VAR_REGISTERTOWORKMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterToWorkMailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterToWorkMailResponseUnmarshaller.Instance; return Invoke<RegisterToWorkMailResponse>(VAR_REGISTERTOWORKMAILREQUEST, VAR_VAR); }
public DeleteCollectionRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public virtual DeleteClusterResponse METHOD_NAME(DeleteClusterRequest VAR_DELETECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(VAR_DELETECLUSTERREQUEST, VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE = Math.Pow(Math.E, VAR_DOUBLE); double VAR_DOUBLE = Math.Pow(Math.E, -VAR_DOUBLE); VAR_DOUBLE = (VAR_DOUBLE - VAR_DOUBLE) / (VAR_DOUBLE + VAR_DOUBLE); return VAR_DOUBLE; }
public override CharsRef METHOD_NAME(CharsRef VAR_CHARSREF, CharsRef VAR_CHARSREF) { Debug.Assert(VAR_CHARSREF != LITERAL_NULL); Debug.Assert(VAR_CHARSREF != LITERAL_NULL); int VAR_INT = VAR_CHARSREF.Offset; int VAR_INT = VAR_CHARSREF.Offset; int VAR_INT = VAR_INT + Math.Min(VAR_CHARSREF.Length, VAR_CHARSREF.Length); while (VAR_INT < VAR_INT) { if (VAR_CHARSREF.Chars[VAR_INT] != VAR_CHARSREF.Chars[VAR_INT]) { break; } VAR_INT++; VAR_INT++; } if (VAR_INT == VAR_CHARSREF.Offset) { return NO_OUTPUT; } else if (VAR_INT == VAR_CHARSREF.Offset + VAR_CHARSREF.Length) { return VAR_CHARSREF; } else if (VAR_INT == VAR_CHARSREF.Offset + VAR_CHARSREF.Length) { return VAR_CHARSREF; } else { return new CharsRef(VAR_CHARSREF.Chars, VAR_CHARSREF.Offset, VAR_INT - VAR_CHARSREF.Offset); } }
public virtual GetExclusionsPreviewResponse METHOD_NAME(GetExclusionsPreviewRequest VAR_GETEXCLUSIONSPREVIEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExclusionsPreviewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExclusionsPreviewResponseUnmarshaller.Instance; return Invoke<GetExclusionsPreviewResponse>(VAR_GETEXCLUSIONSPREVIEWREQUEST, VAR_VAR); }
public KeepWordFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); wordFiles = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); enablePositionIncrements = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME(bool VAR_BOOL) { int VAR_INT = -LITERAL_INT; uniformCnt = LITERAL_INT; uniformSkip = LITERAL_INT; foreach (Cell c in cells.Values) { if (c.@ref >= LITERAL_INT) { return -LITERAL_INT; } if (c.cmd >= LITERAL_INT) { if (VAR_INT < LITERAL_INT) { VAR_INT = c.cmd; uniformSkip = c.skip; } else if (VAR_INT == c.cmd) { if (VAR_BOOL) { if (uniformSkip == c.skip) { uniformCnt++; } else { return -LITERAL_INT; } } else { uniformCnt++; } } else { return -LITERAL_INT; } } } return VAR_INT; }
public virtual ListTypedLinkFacetNamesResponse METHOD_NAME(ListTypedLinkFacetNamesRequest VAR_LISTTYPEDLINKFACETNAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTypedLinkFacetNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTypedLinkFacetNamesResponseUnmarshaller.Instance; return Invoke<ListTypedLinkFacetNamesResponse>(VAR_LISTTYPEDLINKFACETNAMESREQUEST, VAR_VAR); }
public override T METHOD_NAME(int VAR_INT) { if (VAR_INT == size - LITERAL_INT) { T[] VAR_T[] = directory[ToDirectoryIndex(VAR_INT)]; int VAR_INT = ToBlockIndex(VAR_INT); T VAR_T = VAR_T[][VAR_INT]; VAR_T[][VAR_INT] = default(T); size--; if (LITERAL_INT < tailBlkIdx) { tailBlkIdx--; } else { ResetTailBlock(); } return VAR_T; } else { if (VAR_INT < LITERAL_INT || size <= VAR_INT) { throw new IndexOutOfRangeException(VAR_INT.ToString()); } else { T VAR_T = this[VAR_INT]; for (; VAR_INT < size - LITERAL_INT; VAR_INT++) { Set(VAR_INT, this[VAR_INT + LITERAL_INT]); } Set(size - LITERAL_INT, default(T)); size--; ResetTailBlock(); return VAR_T; } } }
public override bool METHOD_NAME() { return roleSessionDurationSeconds * (LITERAL_INT - expireFact) * LITERAL_INT * LITERAL_INT * LITERAL_INT > RemainTicks(); }
public virtual GroupingSearch METHOD_NAME(Sort VAR_SORT) { this.VAR_SORT = VAR_SORT; return this; }
public override long METHOD_NAME() { return ((postings != LITERAL_NULL) ? RamUsageEstimator.SizeOf(postings) : LITERAL_INT) + ((payloads != LITERAL_NULL) ? RamUsageEstimator.SizeOf(payloads) : LITERAL_INT); }
public override void METHOD_NAME(long VAR_LONG) { long VAR_LONG = VAR_LONG - GetFilePointer(); if (VAR_LONG < LITERAL_INT) { throw new InvalidOperationException(this.GetType() + LITERAL_STRING); } SkipBytes(VAR_LONG); }
public ExternalName METHOD_NAME(int VAR_INT, int VAR_INT) { return _iBook.METHOD_NAME(VAR_INT, VAR_INT); }
public StrDocValues(ValueSource VAR_VALUESOURCE) { this.m_vs = VAR_VALUESOURCE; }
public int METHOD_NAME(String VAR_STRING) { return VAR_STRING.GetHashCode(); }
public virtual int METHOD_NAME(char VAR_CHAR) { int VAR_INT = LITERAL_INT; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR & LITERAL_INT; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR >> LITERAL_INT; return VAR_INT; }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { DirectoryInfo VAR_DIRECTORYINFO = Directory(count++, LITERAL_NULL); VAR_DIRECTORYINFO.METHOD_NAME(); FileInfo VAR_FILEINFO = new FileInfo(System.IO.Path.Combine(VAR_DIRECTORYINFO.FullName, VAR_STRING + LITERAL_STRING)); StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); try { using (TextWriter writer = new StreamWriter(new FileStream(VAR_FILEINFO.FullName, FileMode.METHOD_NAME, FileAccess.Write), Encoding.UTF8)) writer.Write(VAR_STRINGBUILDER.ToString()); } catch (IOException ioe) { throw new Exception(ioe.ToString(), ioe); } }
public override java.io.Writer METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE == LITERAL_NULL) { VAR_JAVA.LANG.CHARSEQUENCE = java.lang.CharSequenceProxy.Wrap(LITERAL_STRING); } METHOD_NAME(VAR_JAVA.LANG.CHARSEQUENCE, LITERAL_INT, VAR_JAVA.LANG.CHARSEQUENCE.Length); return this; }
public virtual PutAccountDedicatedIpWarmupAttributesResponse METHOD_NAME(PutAccountDedicatedIpWarmupAttributesRequest VAR_PUTACCOUNTDEDICATEDIPWARMUPATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccountDedicatedIpWarmupAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccountDedicatedIpWarmupAttributesResponseUnmarshaller.Instance; return Invoke<PutAccountDedicatedIpWarmupAttributesResponse>(VAR_PUTACCOUNTDEDICATEDIPWARMUPATTRIBUTESREQUEST, VAR_VAR); }
public static bool METHOD_NAME(object VAR_OBJECT, object VAR_OBJECT) { return VAR_OBJECT == VAR_OBJECT || (VAR_OBJECT != LITERAL_NULL && VAR_OBJECT.Equals(VAR_OBJECT)); }
public RevFlag METHOD_NAME() { return UNSHALLOW; }
public virtual DescribeSolutionVersionResponse METHOD_NAME(DescribeSolutionVersionRequest VAR_DESCRIBESOLUTIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSolutionVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSolutionVersionResponseUnmarshaller.Instance; return Invoke<DescribeSolutionVersionResponse>(VAR_DESCRIBESOLUTIONVERSIONREQUEST, VAR_VAR); }
public virtual byte[] METHOD_NAME() { return file.buf; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_username).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ModifyFpgaImageAttributeResponse METHOD_NAME(ModifyFpgaImageAttributeRequest VAR_MODIFYFPGAIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyFpgaImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyFpgaImageAttributeResponseUnmarshaller.Instance; return Invoke<ModifyFpgaImageAttributeResponse>(VAR_MODIFYFPGAIMAGEATTRIBUTEREQUEST, VAR_VAR); }
protected internal SubmoduleUpdateCommand(Repository VAR_REPOSITORY) : base(repo) { paths = new AList<string>(); }
public virtual bool METHOD_NAME() { return type == JapaneseTokenizerType.KNOWN; }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public void METHOD_NAME(bool VAR_BOOL) { _value = VAR_BOOL ? LITERAL_INT : LITERAL_INT; _isError = false; }
public virtual int METHOD_NAME() { return c; }
public virtual GetDocumentationVersionsResponse METHOD_NAME(GetDocumentationVersionsRequest VAR_GETDOCUMENTATIONVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentationVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentationVersionsResponseUnmarshaller.Instance; return Invoke<GetDocumentationVersionsResponse>(VAR_GETDOCUMENTATIONVERSIONSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(int VAR_INT) { if (mGarbage) { gc(); } return binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); }
public virtual void METHOD_NAME(Parser VAR_PARSER, RecognitionException VAR_RECOGNITIONEXCEPTION) { if (InErrorRecoveryMode(VAR_PARSER)) { return; } BeginErrorCondition(VAR_PARSER); if (VAR_RECOGNITIONEXCEPTION is NoViableAltException) { ReportNoViableAlternative(VAR_PARSER, (NoViableAltException)VAR_RECOGNITIONEXCEPTION); } else { if (VAR_RECOGNITIONEXCEPTION is InputMismatchException) { ReportInputMismatch(VAR_PARSER, (InputMismatchException)VAR_RECOGNITIONEXCEPTION); } else { if (VAR_RECOGNITIONEXCEPTION is FailedPredicateException) { ReportFailedPredicate(VAR_PARSER, (FailedPredicateException)VAR_RECOGNITIONEXCEPTION); } else { System.Console.Error.WriteLine(LITERAL_STRING + VAR_RECOGNITIONEXCEPTION.GetType().FullName); NotifyErrorListeners(VAR_PARSER, VAR_RECOGNITIONEXCEPTION.Message, VAR_RECOGNITIONEXCEPTION); } } } }
public ConstantStringFormat(String VAR_STRING) { str = VAR_STRING; }
public override java.nio.DoubleBuffer METHOD_NAME() { return java.nio.ReadOnlyDoubleArrayBuffer.copy(this, _mark); }
public virtual DeleteCacheClusterResponse METHOD_NAME(DeleteCacheClusterRequest VAR_DELETECACHECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCacheClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCacheClusterResponseUnmarshaller.Instance; return Invoke<DeleteCacheClusterResponse>(VAR_DELETECACHECLUSTERREQUEST, VAR_VAR); }
public virtual ModifyClusterSnapshotScheduleResponse METHOD_NAME(ModifyClusterSnapshotScheduleRequest VAR_MODIFYCLUSTERSNAPSHOTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterSnapshotScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<ModifyClusterSnapshotScheduleResponse>(VAR_MODIFYCLUSTERSNAPSHOTSCHEDULEREQUEST, VAR_VAR); }
public virtual InitCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public TermsEnumWithSlice(int VAR_INT, ReaderSlice VAR_READERSLICE) { this.SubSlice = VAR_READERSLICE; this.Index = VAR_INT; Debug.Assert(VAR_READERSLICE.Length >= LITERAL_INT, LITERAL_STRING + VAR_READERSLICE.Length); }
public UserSViewEnd(byte[] VAR_BYTE[]) { _rawData = VAR_BYTE[]; }
public virtual SetIdentityPoolRolesResponse METHOD_NAME(SetIdentityPoolRolesRequest VAR_SETIDENTITYPOOLROLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityPoolRolesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityPoolRolesResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolRolesResponse>(VAR_SETIDENTITYPOOLROLESREQUEST, VAR_VAR); }
public Vector(short VAR_SHORT) { this._type = VAR_SHORT; }
public virtual GetEndpointResponse METHOD_NAME(GetEndpointRequest VAR_GETENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEndpointResponseUnmarshaller.Instance; return Invoke<GetEndpointResponse>(VAR_GETENDPOINTREQUEST, VAR_VAR); }
public Builder METHOD_NAME(int VAR_INT) { if (VAR_INT <= lastDocID) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + lastDocID); } int VAR_INT = WordNum(VAR_INT); if (this.VAR_INT == -LITERAL_INT) { this.VAR_INT = VAR_INT; word = LITERAL_INT << (VAR_INT & LITERAL_INT); } else if (VAR_INT == this.VAR_INT) { word |= LITERAL_INT << (VAR_INT & LITERAL_INT); } else { AddWord(this.VAR_INT, (byte)word); this.VAR_INT = VAR_INT; word = LITERAL_INT << (VAR_INT & LITERAL_INT); } lastDocID = VAR_INT; return this; }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return false; }
public virtual DescribeClustersResponse METHOD_NAME(DescribeClustersRequest VAR_DESCRIBECLUSTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClustersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClustersResponseUnmarshaller.Instance; return Invoke<DescribeClustersResponse>(VAR_DESCRIBECLUSTERSREQUEST, VAR_VAR); }
public override Trie METHOD_NAME(Reduce VAR_REDUCE) { List<Trie> VAR_LIST<TRIE> = new List<Trie>(); foreach (Trie trie in m_tries) VAR_LIST<TRIE>.Add(trie.METHOD_NAME(VAR_REDUCE)); MultiTrie2 VAR_MULTITRIE2 = new MultiTrie2(forward); VAR_MULTITRIE2.m_tries = VAR_LIST<TRIE>; return VAR_MULTITRIE2; }
public CellRangeAddressBase METHOD_NAME() { return GetCellRange(dataCategoryLabels); }
public virtual string METHOD_NAME() { return pass; }
public virtual java.util.Set<java.util.MapClass.Entry<K, V>> METHOD_NAME() { lock (this) { java.util.Set<java.util.MapClass.Entry<K, V>> VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> = _entrySet; return (VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> != LITERAL_NULL) ? VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> : (_entrySet = new java.util.Hashtable<K, V>.EntrySet(this)); } }
public static String METHOD_NAME(HSSFWorkbook VAR_HSSFWORKBOOK, Ptg[] VAR_PTG[]) { return FormulaRenderer.METHOD_NAME(HSSFEvaluationWorkbook.Create(VAR_HSSFWORKBOOK), VAR_PTG[]); }
public override java.nio.CharBuffer METHOD_NAME() { return new java.nio.CharSequenceAdapter(sequence.SubSequence(_position, _limit)); }
public virtual UpdateBusinessReportScheduleResponse METHOD_NAME(UpdateBusinessReportScheduleRequest VAR_UPDATEBUSINESSREPORTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBusinessReportScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBusinessReportScheduleResponseUnmarshaller.Instance; return Invoke<UpdateBusinessReportScheduleResponse>(VAR_UPDATEBUSINESSREPORTSCHEDULEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT, FileMode VAR_FILEMODE, byte[] VAR_BYTE[], int VAR_INT) { if (FmtBuf(VAR_BYTE[], VAR_INT, VAR_INT, VAR_FILEMODE)) { System.Array.Copy(VAR_BYTE[], VAR_INT, buf, ptr, Constants.OBJECT_ID_LENGTH); ptr += Constants.OBJECT_ID_LENGTH; } else { try { FmtOverflowBuffer(VAR_BYTE[], VAR_INT, VAR_INT, VAR_FILEMODE); overflowBuffer.Write(VAR_BYTE[], VAR_INT, Constants.OBJECT_ID_LENGTH); } catch (IOException badBuffer) { throw new RuntimeException(badBuffer); } } }
public virtual CreateSpotDatafeedSubscriptionResponse METHOD_NAME(CreateSpotDatafeedSubscriptionRequest VAR_CREATESPOTDATAFEEDSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSpotDatafeedSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSpotDatafeedSubscriptionResponseUnmarshaller.Instance; return Invoke<CreateSpotDatafeedSubscriptionResponse>(VAR_CREATESPOTDATAFEEDSUBSCRIPTIONREQUEST, VAR_VAR); }
public long METHOD_NAME() { return count; }
public virtual CreateSkillGroupResponse METHOD_NAME(CreateSkillGroupRequest VAR_CREATESKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSkillGroupResponseUnmarshaller.Instance; return Invoke<CreateSkillGroupResponse>(VAR_CREATESKILLGROUPREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { return RIGHT_ID; }
public virtual void METHOD_NAME(bool VAR_BOOL) { retainBody = VAR_BOOL; }
public void METHOD_NAME() { m_len = LITERAL_INT; }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, bool VAR_BOOL) { insert0(VAR_INT, VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); return this; }
public static bool METHOD_NAME(byte VAR_BYTE) { return WHITESPACE[VAR_BYTE & unchecked((int)(LITERAL_INT))]; }
public virtual DescribeSessionsResponse METHOD_NAME(DescribeSessionsRequest VAR_DESCRIBESESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSessionsResponseUnmarshaller.Instance; return Invoke<DescribeSessionsResponse>(VAR_DESCRIBESESSIONSREQUEST, VAR_VAR); }
public virtual DescribeLocalGatewayVirtualInterfaceGroupsResponse METHOD_NAME(DescribeLocalGatewayVirtualInterfaceGroupsRequest VAR_DESCRIBELOCALGATEWAYVIRTUALINTERFACEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewayVirtualInterfaceGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfaceGroupsResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfaceGroupsResponse>(VAR_DESCRIBELOCALGATEWAYVIRTUALINTERFACEGROUPSREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING, string[] VAR_STRING[]) { string[] VAR_STRING[] = new string[LITERAL_INT + VAR_STRING[].Length]; VAR_STRING[][LITERAL_INT] = VAR_STRING; Array.Copy(VAR_STRING[], LITERAL_INT, VAR_STRING[], LITERAL_INT, VAR_STRING[].Length); return METHOD_NAME(VAR_STRING[], VAR_STRING[].Length); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public virtual SignalResourceResponse METHOD_NAME(SignalResourceRequest VAR_SIGNALRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SignalResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SignalResourceResponseUnmarshaller.Instance; return Invoke<SignalResourceResponse>(VAR_SIGNALRESOURCEREQUEST, VAR_VAR); }
public int METHOD_NAME() { return passwordVerifier; }
public override void METHOD_NAME(MutableValue VAR_MUTABLEVALUE) { MutableValueDouble VAR_MUTABLEVALUEDOUBLE = (MutableValueDouble)VAR_MUTABLEVALUE; Value = VAR_MUTABLEVALUEDOUBLE.Value; Exists = VAR_MUTABLEVALUEDOUBLE.Exists; }
public virtual int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); { for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT; try { if ((VAR_INT = METHOD_NAME()) == -LITERAL_INT) { return i == LITERAL_INT ? -LITERAL_INT : i; } } catch (System.IO.IOException e) { if (i != LITERAL_INT) { return i; } throw; } VAR_BYTE[][VAR_INT + i] = unchecked((byte)VAR_INT); } } return VAR_INT; }
public virtual TreeFilter METHOD_NAME() { return pathFilter; }
public CalcCountRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_iterations = VAR_RECORDINPUTSTREAM.ReadShort(); }
public DescribeVaultRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public sealed override double METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public void METHOD_NAME(char[] VAR_CHAR[]) { METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public virtual DeleteTagsForDomainResponse METHOD_NAME(DeleteTagsForDomainRequest VAR_DELETETAGSFORDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTagsForDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTagsForDomainResponseUnmarshaller.Instance; return Invoke<DeleteTagsForDomainResponse>(VAR_DELETETAGSFORDOMAINREQUEST, VAR_VAR); }
public SetMeRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override java.nio.LongBuffer METHOD_NAME(long VAR_LONG) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putLong(_position++ * libcore.io.SizeOf.LONG, VAR_LONG); return this; }
public virtual DisassociateFleetResponse METHOD_NAME(DisassociateFleetRequest VAR_DISASSOCIATEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateFleetResponseUnmarshaller.Instance; return Invoke<DisassociateFleetResponse>(VAR_DISASSOCIATEFLEETREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_STRING + m_input.METHOD_NAME() + LITERAL_STRING; }
public static string METHOD_NAME(long VAR_LONG) { return VAR_LONG.ToString(CultureInfo.InvariantCulture); }
public BytesRefArray(Counter VAR_COUNTER) { this.pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(VAR_COUNTER)); pool.NextBuffer(); VAR_COUNTER.AddAndGet(RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT32); this.VAR_COUNTER = VAR_COUNTER; }
public override java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } System.Array.Copy(VAR_FLOAT[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public virtual void METHOD_NAME(long VAR_LONG) { if (VAR_LONG < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_LONG); } if (skipBuffer == LITERAL_NULL) { skipBuffer = new byte[SKIP_BUFFER_SIZE]; } Debug.Assert(skipBuffer.Length == SKIP_BUFFER_SIZE); for (long skipped = LITERAL_INT; skipped < VAR_LONG;) { var VAR_VAR = (int)Math.Min(SKIP_BUFFER_SIZE, VAR_LONG - skipped); ReadBytes(skipBuffer, LITERAL_INT, VAR_VAR, false); skipped += VAR_VAR; } }
public sealed override char METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public virtual E METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public ExpPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_first_row = VAR_ILITTLEENDIANINPUT.ReadShort(); field_2_first_col = VAR_ILITTLEENDIANINPUT.ReadShort(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new CJKBigramFilter(VAR_TOKENSTREAM, flags, outputUnigrams); }
public override FuzzySet METHOD_NAME(SegmentWriteState VAR_SEGMENTWRITESTATE, FieldInfo VAR_FIELDINFO) { return FuzzySet.CreateSetBasedOnQuality(VAR_SEGMENTWRITESTATE.SegmentInfo.DocCount, LITERAL_FLOAT); }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.StringIndexOutOfBoundsException(LITERAL_STRING + VAR_INT); } if (VAR_INT > value.Length) { enlargeBuffer(VAR_INT); } else { if (shared) { char[] VAR_CHAR[] = new char[value.Length]; System.Array.Copy(value, LITERAL_INT, VAR_CHAR[], LITERAL_INT, count); value = VAR_CHAR[]; shared = false; } else { if (count < VAR_INT) { java.util.Arrays.fill(value, count, VAR_INT, (char)LITERAL_INT); } } } count = VAR_INT; }
public virtual void METHOD_NAME() { bool VAR_BOOL = false; try { while (true) { MergeThread VAR_MERGETHREAD = LITERAL_NULL; lock (this) { foreach (MergeThread t in m_mergeThreads) { if (t != LITERAL_NULL && t.IsAlive) { VAR_MERGETHREAD = t; break; } } } if (VAR_MERGETHREAD != LITERAL_NULL) { try { VAR_MERGETHREAD.Join(); } catch (ThreadInterruptedException ie) { VAR_BOOL = true; } } else { break; } } } finally { if (VAR_BOOL) { Thread.CurrentThread.Interrupt(); } } }
public virtual DescribeIdentityPoolUsageResponse METHOD_NAME(DescribeIdentityPoolUsageRequest VAR_DESCRIBEIDENTITYPOOLUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityPoolUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityPoolUsageResponseUnmarshaller.Instance; return Invoke<DescribeIdentityPoolUsageResponse>(VAR_DESCRIBEIDENTITYPOOLUSAGEREQUEST, VAR_VAR); }
public virtual CreateClusterSecurityGroupResponse METHOD_NAME(CreateClusterSecurityGroupRequest VAR_CREATECLUSTERSECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterSecurityGroupResponseUnmarshaller.Instance; return Invoke<CreateClusterSecurityGroupResponse>(VAR_CREATECLUSTERSECURITYGROUPREQUEST, VAR_VAR); }
public K METHOD_NAME() { return this.nextEntryNotFailFast().key; }
public HSSFShapeGroup(EscherContainerRecord VAR_ESCHERCONTAINERRECORD, ObjRecord VAR_OBJRECORD) : base(spgrContainer, objRecord) { EscherContainerRecord VAR_ESCHERCONTAINERRECORD = VAR_ESCHERCONTAINERRECORD.ChildContainers[LITERAL_INT]; _spgrRecord = (EscherSpgrRecord)VAR_ESCHERCONTAINERRECORD.GetChild(LITERAL_INT); foreach (EscherRecord ch in VAR_ESCHERCONTAINERRECORD.ChildRecords) { switch (ch.RecordId) { case EscherSpgrRecord.RECORD_ID: break; case EscherClientAnchorRecord.RECORD_ID: anchor = new HSSFClientAnchor((EscherClientAnchorRecord)ch); break; case EscherChildAnchorRecord.RECORD_ID: anchor = new HSSFChildAnchor((EscherChildAnchorRecord)ch); break; } } }
public SoraniStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public SetAlbumCoverRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override bool METHOD_NAME(Object VAR_OBJECT) { bool VAR_BOOL = false; if ((VAR_OBJECT != LITERAL_NULL) && (VAR_OBJECT.GetType() == this.GetType())) { if (this == VAR_OBJECT) { VAR_BOOL = true; } else { DocumentDescriptor VAR_DOCUMENTDESCRIPTOR = (DocumentDescriptor)VAR_OBJECT; VAR_BOOL = this.path.METHOD_NAME(VAR_DOCUMENTDESCRIPTOR.path) && this.name.METHOD_NAME(VAR_DOCUMENTDESCRIPTOR.name); } } return VAR_BOOL; }
public override void METHOD_NAME() { if (!sorted) { Resort(); } Replace(); }
public virtual void METHOD_NAME(K VAR_K, V VAR_V) { IList<V> VAR_ILIST<V>; if (!TryGetValue(VAR_K, out VAR_ILIST<V>)) { VAR_ILIST<V> = new ArrayList<V>(); this[VAR_K] = VAR_ILIST<V>; } VAR_ILIST<V>.Add(VAR_V); }
public virtual DescribeImportSnapshotTasksResponse METHOD_NAME(DescribeImportSnapshotTasksRequest VAR_DESCRIBEIMPORTSNAPSHOTTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImportSnapshotTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImportSnapshotTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportSnapshotTasksResponse>(VAR_DESCRIBEIMPORTSNAPSHOTTASKSREQUEST, VAR_VAR); }
public virtual ListEventSourcesResponse METHOD_NAME(ListEventSourcesRequest VAR_LISTEVENTSOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEventSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEventSourcesResponseUnmarshaller.Instance; return Invoke<ListEventSourcesResponse>(VAR_LISTEVENTSOURCESREQUEST, VAR_VAR); }
public static double METHOD_NAME(DateTime VAR_DATETIME, bool VAR_BOOL) { if ((!VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT) || (VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT)) { return BAD_DATE; } DateTime VAR_DATETIME; if (VAR_BOOL) { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } else { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } double VAR_DOUBLE = (VAR_DATETIME - VAR_DATETIME).TotalDays + LITERAL_INT; if (!VAR_BOOL && VAR_DOUBLE >= LITERAL_INT) { VAR_DOUBLE++; } else if (VAR_BOOL) { VAR_DOUBLE--; } return VAR_DOUBLE; }
public TimeSpec(char VAR_CHAR, int VAR_INT, int VAR_INT, double VAR_DOUBLE) { this.VAR_CHAR = VAR_CHAR; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_DOUBLE = VAR_DOUBLE; modBy = LITERAL_INT; }
public virtual DeleteApiMappingResponse METHOD_NAME(DeleteApiMappingRequest VAR_DELETEAPIMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApiMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApiMappingResponseUnmarshaller.Instance; return Invoke<DeleteApiMappingResponse>(VAR_DELETEAPIMAPPINGREQUEST, VAR_VAR); }
public static string METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case OBJ_COMMIT: { return TYPE_COMMIT; } case OBJ_TREE: { return TYPE_TREE; } case OBJ_BLOB: { return TYPE_BLOB; } case OBJ_TAG: { return TYPE_TAG; } default: { throw new ArgumentException(MessageFormat.Format(JGitText.Get().badObjectType, Sharpen.Extensions.ValueOf(VAR_INT))); } } }
public override long METHOD_NAME(long VAR_LONG) { return count.METHOD_NAME(VAR_LONG); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(base.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Arrays.METHOD_NAME(fields)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual UpdateTemplateActiveVersionResponse METHOD_NAME(UpdateTemplateActiveVersionRequest VAR_UPDATETEMPLATEACTIVEVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTemplateActiveVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTemplateActiveVersionResponseUnmarshaller.Instance; return Invoke<UpdateTemplateActiveVersionResponse>(VAR_UPDATETEMPLATEACTIVEVERSIONREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(FacetLabel VAR_FACETLABEL) { int VAR_INT = Length < VAR_FACETLABEL.Length ? Length : VAR_FACETLABEL.Length; for (int i = LITERAL_INT, j = LITERAL_INT; i < VAR_INT; i++, j++) { int VAR_INT = Components[i].CompareToOrdinal(VAR_FACETLABEL.Components[j]); if (VAR_INT < LITERAL_INT) { return -LITERAL_INT; } if (VAR_INT > LITERAL_INT) { return LITERAL_INT; } } return Length - VAR_FACETLABEL.Length; }
public virtual int METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.Length; char[] VAR_CHAR[] = new char[VAR_INT + LITERAL_INT]; VAR_STRING.CopyTo(LITERAL_INT, VAR_CHAR[], LITERAL_INT, VAR_INT - LITERAL_INT); VAR_CHAR[][VAR_INT] = (char)LITERAL_INT; return METHOD_NAME(VAR_CHAR[], LITERAL_INT); }
public sealed override java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual ListNodesResponse METHOD_NAME(ListNodesRequest VAR_LISTNODESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNodesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNodesResponseUnmarshaller.Instance; return Invoke<ListNodesResponse>(VAR_LISTNODESREQUEST, VAR_VAR); }
public virtual DeleteVoiceConnectorStreamingConfigurationResponse METHOD_NAME(DeleteVoiceConnectorStreamingConfigurationRequest VAR_DELETEVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorStreamingConfigurationResponse>(VAR_DELETEVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new SoraniNormalizationFilter(VAR_TOKENSTREAM); }
public override int METHOD_NAME(int VAR_INT) { if (VAR_INT < start || VAR_INT > end) { throw new ArgumentException(LITERAL_STRING); } else if (VAR_INT == end) { current = end; return Done; } else { return Last(); } }
public virtual SshSessionFactory METHOD_NAME() { return sch; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { var VAR_VAR = new CommonGramsFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, commonWords); return VAR_VAR; }
public virtual DescribeWorkspaceImagesResponse METHOD_NAME(DescribeWorkspaceImagesRequest VAR_DESCRIBEWORKSPACEIMAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspaceImagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspaceImagesResponseUnmarshaller.Instance; return Invoke<DescribeWorkspaceImagesResponse>(VAR_DESCRIBEWORKSPACEIMAGESREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > _size) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (_size - LITERAL_INT) + LITERAL_STRING); } return GetItemInternal(VAR_INT); }
public virtual ListEventBusesResponse METHOD_NAME(ListEventBusesRequest VAR_LISTEVENTBUSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEventBusesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEventBusesResponseUnmarshaller.Instance; return Invoke<ListEventBusesResponse>(VAR_LISTEVENTBUSESREQUEST, VAR_VAR); }
public QualityStats(double VAR_DOUBLE, long VAR_LONG) { this.VAR_DOUBLE = VAR_DOUBLE; this.VAR_LONG = VAR_LONG; this.recallPoints = new List<RecallPoint>(); pAt = new double[MAX_POINTS + LITERAL_INT]; }
public GetInvalidationRequest(string VAR_STRING, string VAR_STRING) { _distributionId = VAR_STRING; _id = VAR_STRING; }
public int METHOD_NAME(ScoreTerm VAR_SCORETERM) { if (this.Boost == VAR_SCORETERM.Boost) { return TermComp.Compare(VAR_SCORETERM.Bytes, this.Bytes); } else { return this.Boost.METHOD_NAME(VAR_SCORETERM.Boost); } }
public virtual RegenerateSecurityTokenResponse METHOD_NAME(RegenerateSecurityTokenRequest VAR_REGENERATESECURITYTOKENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegenerateSecurityTokenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegenerateSecurityTokenResponseUnmarshaller.Instance; return Invoke<RegenerateSecurityTokenResponse>(VAR_REGENERATESECURITYTOKENREQUEST, VAR_VAR); }
public virtual DescribeRootFoldersResponse METHOD_NAME(DescribeRootFoldersRequest VAR_DESCRIBEROOTFOLDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRootFoldersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRootFoldersResponseUnmarshaller.Instance; return Invoke<DescribeRootFoldersResponse>(VAR_DESCRIBEROOTFOLDERSREQUEST, VAR_VAR); }
public virtual DeactivateUserResponse METHOD_NAME(DeactivateUserRequest VAR_DEACTIVATEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeactivateUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeactivateUserResponseUnmarshaller.Instance; return Invoke<DeactivateUserResponse>(VAR_DEACTIVATEUSERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(int VAR_INT) { int VAR_INT = intervals.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Interval VAR_INTERVAL = intervals[i]; int VAR_INT = VAR_INTERVAL.a; int VAR_INT = VAR_INTERVAL.b; if (VAR_INT < VAR_INT) { break; } if (VAR_INT >= VAR_INT && VAR_INT <= VAR_INT) { return true; } } return false; }
public virtual ListJobsResponse METHOD_NAME(ListJobsRequest VAR_LISTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJobsResponseUnmarshaller.Instance; return Invoke<ListJobsResponse>(VAR_LISTJOBSREQUEST, VAR_VAR); }
public RussianLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual SearchSkillGroupsResponse METHOD_NAME(SearchSkillGroupsRequest VAR_SEARCHSKILLGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchSkillGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchSkillGroupsResponseUnmarshaller.Instance; return Invoke<SearchSkillGroupsResponse>(VAR_SEARCHSKILLGROUPSREQUEST, VAR_VAR); }
public virtual SortField METHOD_NAME(Bindings VAR_BINDINGS, bool VAR_BOOL) { return GetValueSource(VAR_BINDINGS).METHOD_NAME(VAR_BOOL); }
public virtual ModifyHostsResponse METHOD_NAME(ModifyHostsRequest VAR_MODIFYHOSTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyHostsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyHostsResponseUnmarshaller.Instance; return Invoke<ModifyHostsResponse>(VAR_MODIFYHOSTSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = GetRefEvaluatorForCurrentSheet(); return new LazyAreaEval(VAR_INT, VAR_INT, VAR_INT, VAR_INT, VAR_SHEETRANGEEVALUATOR); }
public virtual CreateContactMethodResponse METHOD_NAME(CreateContactMethodRequest VAR_CREATECONTACTMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateContactMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateContactMethodResponseUnmarshaller.Instance; return Invoke<CreateContactMethodResponse>(VAR_CREATECONTACTMETHODREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME.GetTime()); }
public override String METHOD_NAME() { return METHOD_NAME(Vocabulary.EmptyVocabulary); }
public void METHOD_NAME(FormulaShifter VAR_FORMULASHIFTER, int VAR_INT) { for (int i = LITERAL_INT; i < _cfHeaders.Count; i++) { CFRecordsAggregate VAR_CFRECORDSAGGREGATE = (CFRecordsAggregate)_cfHeaders[i]; bool VAR_BOOL = VAR_CFRECORDSAGGREGATE.METHOD_NAME(VAR_FORMULASHIFTER, VAR_INT); if (!VAR_BOOL) { _cfHeaders.RemoveAt(i); i--; } } }
public void METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE) { _valuesAgg.METHOD_NAME(VAR_CELLVALUERECORDINTERFACE); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { ShingleFilter VAR_SHINGLEFILTER = new ShingleFilter(VAR_TOKENSTREAM, minShingleSize, maxShingleSize); VAR_SHINGLEFILTER.SetOutputUnigrams(outputUnigrams); VAR_SHINGLEFILTER.SetOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles); VAR_SHINGLEFILTER.SetTokenSeparator(tokenSeparator); VAR_SHINGLEFILTER.SetFillerToken(fillerToken); return VAR_SHINGLEFILTER; }
public SlopQueryNode(IQueryNode VAR_IQUERYNODE, int VAR_INT) { if (VAR_IQUERYNODE == LITERAL_NULL) { throw new QueryNodeError(new Message(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, LITERAL_STRING, LITERAL_STRING)); } this.VAR_INT = VAR_INT; IsLeaf = false; Allocate(); Add(VAR_IQUERYNODE); }
public virtual ReplaceRouteTableAssociationResponse METHOD_NAME(ReplaceRouteTableAssociationRequest VAR_REPLACEROUTETABLEASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReplaceRouteTableAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReplaceRouteTableAssociationResponseUnmarshaller.Instance; return Invoke<ReplaceRouteTableAssociationResponse>(VAR_REPLACEROUTETABLEASSOCIATIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = Constants.OBJECT_ID_LENGTH; System.Array.Copy(VAR_BYTE[], VAR_INT, IdBuffer, IdOffset, VAR_INT); }
public virtual ListTablesResponse METHOD_NAME(int VAR_INT) { var VAR_VAR = new ListTablesRequest(); VAR_VAR.Limit = VAR_INT; return METHOD_NAME(VAR_VAR); }
public DeleteDeviceGroupRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public void METHOD_NAME(RecordStream VAR_RECORDSTREAM) { while (true) { if (!ReadARecord(VAR_RECORDSTREAM)) { break; } } }
public static ReadOnlyCollection<String> METHOD_NAME() { List<String> VAR_LIST<STRING> = new List<String>(); for (int i = LITERAL_INT; i < functions.Length; i++) { Function VAR_FUNCTION = functions[i]; FunctionMetadata VAR_FUNCTIONMETADATA = FunctionMetadataRegistry.GetFunctionByIndex(i); if (VAR_FUNCTION != LITERAL_NULL && !(VAR_FUNCTION is NotImplementedFunction)) { VAR_LIST<STRING>.Add(VAR_FUNCTIONMETADATA.Name); } } VAR_LIST<STRING>.Add(LITERAL_STRING); return VAR_LIST<STRING>.AsReadOnly(); }
public virtual CountPendingActivityTasksResponse METHOD_NAME(CountPendingActivityTasksRequest VAR_COUNTPENDINGACTIVITYTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CountPendingActivityTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CountPendingActivityTasksResponseUnmarshaller.Instance; return Invoke<CountPendingActivityTasksResponse>(VAR_COUNTPENDINGACTIVITYTASKSREQUEST, VAR_VAR); }
public virtual IList<SegToken> METHOD_NAME(string VAR_STRING) { SegGraph VAR_SEGGRAPH = CreateSegGraph(VAR_STRING); BiSegGraph VAR_BISEGGRAPH = new BiSegGraph(VAR_SEGGRAPH); IList<SegToken> VAR_ILIST<SEGTOKEN> = VAR_BISEGGRAPH.GetShortPath(); return VAR_ILIST<SEGTOKEN>; }
public Area3DPtg(AreaReference VAR_AREAREFERENCE, int VAR_INT) : base(arearef) { ExternSheetIndex = (VAR_INT); }
public virtual EnableRuleResponse METHOD_NAME(EnableRuleRequest VAR_ENABLERULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableRuleResponseUnmarshaller.Instance; return Invoke<EnableRuleResponse>(VAR_ENABLERULEREQUEST, VAR_VAR); }
public static bool METHOD_NAME(byte[] VAR_BYTE[], byte[] VAR_BYTE[]) { if (VAR_BYTE[] == VAR_BYTE[]) { return true; } if (VAR_BYTE[] == LITERAL_NULL || VAR_BYTE[] == LITERAL_NULL || VAR_BYTE[].Length != VAR_BYTE[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { if (VAR_BYTE[][i] != VAR_BYTE[][i]) { return false; } } } return true; }
public virtual bool METHOD_NAME() { return expectDataAfterPackFooter; }
public virtual ListIncomingTypedLinksResponse METHOD_NAME(ListIncomingTypedLinksRequest VAR_LISTINCOMINGTYPEDLINKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIncomingTypedLinksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIncomingTypedLinksResponseUnmarshaller.Instance; return Invoke<ListIncomingTypedLinksResponse>(VAR_LISTINCOMINGTYPEDLINKSREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_REVNUMBER); }
public virtual DeleteMonitoringScheduleResponse METHOD_NAME(DeleteMonitoringScheduleRequest VAR_DELETEMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<DeleteMonitoringScheduleResponse>(VAR_DELETEMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(FacetLabel VAR_FACETLABEL, int VAR_INT) { lock (this) { bool VAR_BOOL = cache.METHOD_NAME(VAR_FACETLABEL, VAR_INT); if (VAR_BOOL) { cache.MakeRoomLRU(); } return VAR_BOOL; } }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT, int VAR_INT) { ParserRuleContext VAR_PARSERRULECONTEXT = _ctx; VAR_PARSERRULECONTEXT.Parent = VAR_PARSERRULECONTEXT; VAR_PARSERRULECONTEXT.invokingState = VAR_INT; VAR_PARSERRULECONTEXT.Stop = _input.LT(-LITERAL_INT); _ctx = VAR_PARSERRULECONTEXT; _ctx.Start = VAR_PARSERRULECONTEXT.Start; if (_buildParseTrees) { _ctx.AddChild(VAR_PARSERRULECONTEXT); } if (_parseListeners != LITERAL_NULL) { TriggerEnterRuleEvent(); } }
protected internal Writer() { @lock = this; }
public override string METHOD_NAME() { return LITERAL_NULL; }
public void METHOD_NAME(Ptg VAR_PTG) { if (VAR_PTG == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } _ptgs[_offset] = VAR_PTG; _offset++; }
public override FileRepository METHOD_NAME() { FileRepository VAR_FILEREPOSITORY = new FileRepository(Setup()); if (IsMustExist() && !((ObjectDirectory)VAR_FILEREPOSITORY.ObjectDatabase).Exists()) { throw new RepositoryNotFoundException(GetGitDir()); } return VAR_FILEREPOSITORY; }
public override IList<WeightedFragInfo> METHOD_NAME(IList<WeightedFragInfo> VAR_ILIST<WEIGHTEDFRAGINFO>) { CollectionUtil.TimSort(VAR_ILIST<WEIGHTEDFRAGINFO>, new ScoreComparer()); return VAR_ILIST<WEIGHTEDFRAGINFO>; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual DescribeDBLogFilesResponse METHOD_NAME(DescribeDBLogFilesRequest VAR_DESCRIBEDBLOGFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBLogFilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBLogFilesResponseUnmarshaller.Instance; return Invoke<DescribeDBLogFilesResponse>(VAR_DESCRIBEDBLOGFILESREQUEST, VAR_VAR); }
public NoteRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_row = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_col = VAR_RECORDINPUTSTREAM.ReadUShort(); field_3_flags = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_shapeid = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_hasMultibyte = VAR_RECORDINPUTSTREAM.ReadByte() != LITERAL_INT; if (field_5_hasMultibyte) { field_6_author = StringUtil.ReadUnicodeLE(VAR_RECORDINPUTSTREAM, VAR_INT); } else { field_6_author = StringUtil.ReadCompressedUnicode(VAR_RECORDINPUTSTREAM, VAR_INT); } if (VAR_RECORDINPUTSTREAM.Available() == LITERAL_INT) { field_7_padding = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); } else if (VAR_RECORDINPUTSTREAM.Available() == LITERAL_INT && VAR_INT == LITERAL_INT) { field_7_padding = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); VAR_RECORDINPUTSTREAM.ReadByte(); } }
public virtual NGit.Api.CherryPickCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public virtual GetCloudFormationStackRecordsResponse METHOD_NAME(GetCloudFormationStackRecordsRequest VAR_GETCLOUDFORMATIONSTACKRECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCloudFormationStackRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCloudFormationStackRecordsResponseUnmarshaller.Instance; return Invoke<GetCloudFormationStackRecordsResponse>(VAR_GETCLOUDFORMATIONSTACKRECORDSREQUEST, VAR_VAR); }
public XPathTokenAnywhereElement(string VAR_STRING, int VAR_INT) : base(tokenName) { this.VAR_INT = VAR_INT; }
public bool METHOD_NAME() { return refreshIntervalInMillSeconds * LITERAL_INT * LITERAL_INT >= RemainTicks(); }
public virtual ListDetectorsResponse METHOD_NAME(ListDetectorsRequest VAR_LISTDETECTORSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDetectorsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDetectorsResponseUnmarshaller.Instance; return Invoke<ListDetectorsResponse>(VAR_LISTDETECTORSREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, T VAR_T) { if (VAR_INT == size) { AddItem(VAR_T); } else { if (VAR_INT < LITERAL_INT || size < VAR_INT) { throw new IndexOutOfRangeException(VAR_INT.ToString()); } else { AddItem(default(T)); for (int oldIdx = size - LITERAL_INT; VAR_INT <= oldIdx; oldIdx--) { Set(oldIdx + LITERAL_INT, this[oldIdx]); } Set(VAR_INT, VAR_T); } } }
public static int METHOD_NAME(CellRangeAddress VAR_CELLRANGEADDRESS, CellRangeAddress VAR_CELLRANGEADDRESS) { int VAR_INT = VAR_CELLRANGEADDRESS.FirstRow; int VAR_INT = VAR_CELLRANGEADDRESS.LastRow; int VAR_INT = VAR_CELLRANGEADDRESS.FirstColumn; int VAR_INT = VAR_CELLRANGEADDRESS.LastColumn; if (gt(VAR_CELLRANGEADDRESS.FirstRow, VAR_INT) || lt(VAR_CELLRANGEADDRESS.LastRow, VAR_INT) || gt(VAR_CELLRANGEADDRESS.FirstColumn, VAR_INT) || lt(VAR_CELLRANGEADDRESS.LastColumn, VAR_INT)) { return NO_INTERSECTION; } else if (Contains(VAR_CELLRANGEADDRESS, VAR_CELLRANGEADDRESS)) { return INSIDE; } else if (Contains(VAR_CELLRANGEADDRESS, VAR_CELLRANGEADDRESS)) { return ENCLOSES; } else { return OVERLAP; } }
public short METHOD_NAME(int VAR_INT) { return _xfs[VAR_INT]; }
public static bool METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length != Constants.OBJECT_ID_STRING_LENGTH) { return false; } try { for (int i = LITERAL_INT; i < Constants.OBJECT_ID_STRING_LENGTH; i++) { RawParseUtils.ParseHexInt4(unchecked((byte)VAR_STRING[i])); } return true; } catch (IndexOutOfRangeException) { return false; } }
public override bool METHOD_NAME() { return this._enclosing._size == LITERAL_INT; }
public ByteVector(byte[] VAR_BYTE[], int VAR_INT) { if (VAR_INT > LITERAL_INT) { blockSize = VAR_INT; } else { blockSize = DEFAULT_BLOCK_SIZE; } array = VAR_BYTE[]; n = LITERAL_INT; }
public override void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public SegmentCommitInfo METHOD_NAME(int VAR_INT) { return segments[VAR_INT]; }
public virtual ListDistributionsByWebACLIdResponse METHOD_NAME(ListDistributionsByWebACLIdRequest VAR_LISTDISTRIBUTIONSBYWEBACLIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDistributionsByWebACLIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDistributionsByWebACLIdResponseUnmarshaller.Instance; return Invoke<ListDistributionsByWebACLIdResponse>(VAR_LISTDISTRIBUTIONSBYWEBACLIDREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rt); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectKind); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectContext); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectInstance1); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectInstance2); }
public virtual CreateDeliveryStreamResponse METHOD_NAME(CreateDeliveryStreamRequest VAR_CREATEDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeliveryStreamResponseUnmarshaller.Instance; return Invoke<CreateDeliveryStreamResponse>(VAR_CREATEDELIVERYSTREAMREQUEST, VAR_VAR); }
public virtual ResetDBParameterGroupResponse METHOD_NAME(ResetDBParameterGroupRequest VAR_RESETDBPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetDBParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetDBParameterGroupResponseUnmarshaller.Instance; return Invoke<ResetDBParameterGroupResponse>(VAR_RESETDBPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual DescribeDocumentClassificationJobResponse METHOD_NAME(DescribeDocumentClassificationJobRequest VAR_DESCRIBEDOCUMENTCLASSIFICATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDocumentClassificationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDocumentClassificationJobResponseUnmarshaller.Instance; return Invoke<DescribeDocumentClassificationJobResponse>(VAR_DESCRIBEDOCUMENTCLASSIFICATIONJOBREQUEST, VAR_VAR); }
public virtual DescribeSecurityGroupsResponse METHOD_NAME(DescribeSecurityGroupsRequest VAR_DESCRIBESECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeSecurityGroupsResponse>(VAR_DESCRIBESECURITYGROUPSREQUEST, VAR_VAR); }
public virtual UpdateTrafficPolicyInstanceResponse METHOD_NAME(UpdateTrafficPolicyInstanceRequest VAR_UPDATETRAFFICPOLICYINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTrafficPolicyInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<UpdateTrafficPolicyInstanceResponse>(VAR_UPDATETRAFFICPOLICYINSTANCEREQUEST, VAR_VAR); }
public virtual BinaryHunk METHOD_NAME() { return forwardBinaryHunk; }
public static java.nio.ByteBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(VAR_INT); }
public void METHOD_NAME(String VAR_STRING, int VAR_INT, int VAR_INT) { if (string.IsNullOrEmpty(VAR_STRING)) return; using (Font excelFont = new Font(font.Name.Equals(LITERAL_STRING) ? LITERAL_STRING : font.Name, (int)(font.Size / verticalPixelsPerPoint), font.Style)) { FontDetails VAR_FONTDETAILS = StaticFontMetrics.GetFontDetails(excelFont); int VAR_INT = (int)((VAR_FONTDETAILS.GetStringWidth(VAR_STRING) * LITERAL_INT) + LITERAL_INT); int VAR_INT = (int)((font.Size / verticalPixelsPerPoint) + LITERAL_INT) * LITERAL_INT; VAR_INT -= Convert.ToInt32((font.Size / verticalPixelsPerPoint) + LITERAL_INT * verticalPixelsPerPoint); HSSFTextbox VAR_HSSFTEXTBOX = escherGroup.CreateTextbox(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT + VAR_INT, VAR_INT + VAR_INT)); VAR_HSSFTEXTBOX.IsNoFill = (true); VAR_HSSFTEXTBOX.LineStyle = LineStyle.None; HSSFRichTextString VAR_HSSFRICHTEXTSTRING = new HSSFRichTextString(VAR_STRING); HSSFFont VAR_HSSFFONT = MatchFont(excelFont); VAR_HSSFRICHTEXTSTRING.ApplyFont(VAR_HSSFFONT); VAR_HSSFTEXTBOX.String = (VAR_HSSFRICHTEXTSTRING); } }
public override Search.Query METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { var VAR_VAR = MakeLuceneSubQueriesField(VAR_STRING, VAR_BASICQUERYFACTORY); BooleanQuery VAR_BOOLEANQUERY = new BooleanQuery(); VAR_BOOLEANQUERY.Add(VAR_VAR.FirstOrDefault(), Occur.MUST); SrndBooleanQuery.AddQueriesToBoolean(VAR_BOOLEANQUERY, VAR_VAR.Skip(LITERAL_INT).ToList(), Occur.MUST_NOT); return VAR_BOOLEANQUERY; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { raw = VAR_BYTE[]; prevPtr = -LITERAL_INT; currPtr = LITERAL_INT; if (Eof) { nextPtr = LITERAL_INT; } else { ParseEntry(); } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_save_link_values); }
public static bool? METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } if (EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING)) { return true; } else { if (EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING) || EqualsIgnoreCase(LITERAL_STRING, VAR_STRING)) { return false; } else { return LITERAL_NULL; } } }
public virtual RevObject METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return objects.Get(VAR_ANYOBJECTID); }
public void METHOD_NAME(FontRecord VAR_FONTRECORD) { field_1_font_height = VAR_FONTRECORD.field_1_font_height; field_2_attributes = VAR_FONTRECORD.field_2_attributes; field_3_color_palette_index = VAR_FONTRECORD.field_3_color_palette_index; field_4_bold_weight = VAR_FONTRECORD.field_4_bold_weight; field_5_base_sub_script = VAR_FONTRECORD.field_5_base_sub_script; field_6_underline = VAR_FONTRECORD.field_6_underline; field_7_family = VAR_FONTRECORD.field_7_family; field_8_charset = VAR_FONTRECORD.field_8_charset; field_9_zero = VAR_FONTRECORD.field_9_zero; field_11_font_name = VAR_FONTRECORD.field_11_font_name; }
public BrazilianStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static byte METHOD_NAME(string VAR_STRING) { return (byte)Enum.Parse(typeof(CharacterClass), VAR_STRING, true); }
public ArrayList(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } array = (VAR_INT == LITERAL_INT ? libcore.util.EmptyArray.OBJECT : new object[VAR_INT]); }
public virtual CreateHumanTaskUiResponse METHOD_NAME(CreateHumanTaskUiRequest VAR_CREATEHUMANTASKUIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHumanTaskUiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHumanTaskUiResponseUnmarshaller.Instance; return Invoke<CreateHumanTaskUiResponse>(VAR_CREATEHUMANTASKUIREQUEST, VAR_VAR); }
public virtual GetSoftwareUpdatesResponse METHOD_NAME(GetSoftwareUpdatesRequest VAR_GETSOFTWAREUPDATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSoftwareUpdatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSoftwareUpdatesResponseUnmarshaller.Instance; return Invoke<GetSoftwareUpdatesResponse>(VAR_GETSOFTWAREUPDATESREQUEST, VAR_VAR); }
public NamePtg METHOD_NAME() { return new NamePtg(_index); }
public virtual ListFlowDefinitionsResponse METHOD_NAME(ListFlowDefinitionsRequest VAR_LISTFLOWDEFINITIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFlowDefinitionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFlowDefinitionsResponseUnmarshaller.Instance; return Invoke<ListFlowDefinitionsResponse>(VAR_LISTFLOWDEFINITIONSREQUEST, VAR_VAR); }
public ILittleEndianOutput METHOD_NAME(int VAR_INT) { CheckPosition(VAR_INT); ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT = new LittleEndianByteArrayOutputStream(_buf, _writeIndex, VAR_INT); _writeIndex += VAR_INT; return VAR_ILITTLEENDIANOUTPUT; }
public override long METHOD_NAME(int VAR_INT) { return current.METHOD_NAME(VAR_INT); }
public StemmerOverrideFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { dictionaryFiles = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual DeleteDeploymentGroupResponse METHOD_NAME(DeleteDeploymentGroupRequest VAR_DELETEDEPLOYMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeploymentGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeploymentGroupResponseUnmarshaller.Instance; return Invoke<DeleteDeploymentGroupResponse>(VAR_DELETEDEPLOYMENTGROUPREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(bool VAR_BOOL) { features.put(org.xmlpull.v1.XmlPullParserClass.FEATURE_PROCESS_NAMESPACES, VAR_BOOL); }
public static List<string> METHOD_NAME() { return builtinFormats; }
public virtual AuthorizeSnapshotAccessResponse METHOD_NAME(AuthorizeSnapshotAccessRequest VAR_AUTHORIZESNAPSHOTACCESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeSnapshotAccessRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeSnapshotAccessResponseUnmarshaller.Instance; return Invoke<AuthorizeSnapshotAccessResponse>(VAR_AUTHORIZESNAPSHOTACCESSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { bool VAR_BOOL = false; DirectoryReader VAR_DIRECTORYREADER = DirectoryReader.Open(input); try { CreateIndex(config1, dir1, VAR_DIRECTORYREADER, docsInFirstIndex, false); CreateIndex(config2, dir2, VAR_DIRECTORYREADER, docsInFirstIndex, true); VAR_BOOL = true; } finally { if (VAR_BOOL) { IOUtils.Dispose(VAR_DIRECTORYREADER); } else { IOUtils.DisposeWhileHandlingException(VAR_DIRECTORYREADER); } } }
public override bool METHOD_NAME(object VAR_OBJECT) { return mapEntry.METHOD_NAME(VAR_OBJECT); }
public virtual E METHOD_NAME() { lock (this) { if (elementCount == LITERAL_INT) { throw new java.util.EmptyStackException(); } int VAR_INT = --elementCount; E VAR_E = (E)elementData[VAR_INT]; elementData[VAR_INT] = LITERAL_NULL; modCount++; return VAR_E; } }
public virtual ListHealthChecksResponse METHOD_NAME() { return METHOD_NAME(new ListHealthChecksRequest()); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.io.File)) { return false; } return path.METHOD_NAME(((java.io.File)VAR_OBJECT).getPath()); }
public ListPhotoStoresRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual PutAccessControlRuleResponse METHOD_NAME(PutAccessControlRuleRequest VAR_PUTACCESSCONTROLRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccessControlRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccessControlRuleResponseUnmarshaller.Instance; return Invoke<PutAccessControlRuleResponse>(VAR_PUTACCESSCONTROLRULEREQUEST, VAR_VAR); }
public virtual StopTrainingEntityRecognizerResponse METHOD_NAME(StopTrainingEntityRecognizerRequest VAR_STOPTRAININGENTITYRECOGNIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTrainingEntityRecognizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTrainingEntityRecognizerResponseUnmarshaller.Instance; return Invoke<StopTrainingEntityRecognizerResponse>(VAR_STOPTRAININGENTITYRECOGNIZERREQUEST, VAR_VAR); }
public virtual GetRevisionResponse METHOD_NAME(GetRevisionRequest VAR_GETREVISIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRevisionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRevisionResponseUnmarshaller.Instance; return Invoke<GetRevisionResponse>(VAR_GETREVISIONREQUEST, VAR_VAR); }
public HSSFPicture METHOD_NAME(HSSFChildAnchor VAR_HSSFCHILDANCHOR, int VAR_INT) { HSSFPicture VAR_HSSFPICTURE = new HSSFPicture(this, VAR_HSSFCHILDANCHOR); VAR_HSSFPICTURE.Parent = this; VAR_HSSFPICTURE.Anchor = VAR_HSSFCHILDANCHOR; VAR_HSSFPICTURE.PictureIndex = VAR_INT; shapes.Add(VAR_HSSFPICTURE); OnCreate(VAR_HSSFPICTURE); EscherSpRecord VAR_ESCHERSPRECORD = (EscherSpRecord)VAR_HSSFPICTURE.GetEscherContainer().GetChildById(EscherSpRecord.RECORD_ID); if (VAR_HSSFPICTURE.Anchor.IsHorizontallyFlipped) { VAR_ESCHERSPRECORD.Flags = (VAR_ESCHERSPRECORD.Flags | EscherSpRecord.FLAG_FLIPHORIZ); } if (VAR_HSSFPICTURE.Anchor.IsVerticallyFlipped) { VAR_ESCHERSPRECORD.Flags = (VAR_ESCHERSPRECORD.Flags | EscherSpRecord.FLAG_FLIPVERT); } return VAR_HSSFPICTURE; }
public RecordSizingVisitor() { _totalSize = LITERAL_INT; }
public virtual UpdateApplicationSettingsResponse METHOD_NAME(UpdateApplicationSettingsRequest VAR_UPDATEAPPLICATIONSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApplicationSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApplicationSettingsResponseUnmarshaller.Instance; return Invoke<UpdateApplicationSettingsResponse>(VAR_UPDATEAPPLICATIONSETTINGSREQUEST, VAR_VAR); }
public virtual NGit.Api.LogCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); pathFilters.AddItem(PathFilter.Create(VAR_STRING)); return this; }
public virtual GetRelationalDatabaseLogStreamsResponse METHOD_NAME(GetRelationalDatabaseLogStreamsRequest VAR_GETRELATIONALDATABASELOGSTREAMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseLogStreamsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseLogStreamsResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseLogStreamsResponse>(VAR_GETRELATIONALDATABASELOGSTREAMSREQUEST, VAR_VAR); }
public override java.nio.FloatBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_lineColor); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_linePattern); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_weight); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_format); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_5_colourPaletteIndex); }
public virtual DeleteDBInstanceAutomatedBackupResponse METHOD_NAME(DeleteDBInstanceAutomatedBackupRequest VAR_DELETEDBINSTANCEAUTOMATEDBACKUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBInstanceAutomatedBackupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBInstanceAutomatedBackupResponseUnmarshaller.Instance; return Invoke<DeleteDBInstanceAutomatedBackupResponse>(VAR_DELETEDBINSTANCEAUTOMATEDBACKUPREQUEST, VAR_VAR); }
public MultiSimilarity(Similarity[] VAR_SIMILARITY[]) { this.m_sims = VAR_SIMILARITY[]; }
public override sealed Explanation METHOD_NAME(BasicStats VAR_BASICSTATS, float VAR_FLOAT) { Explanation VAR_EXPLANATION = new Explanation(); VAR_EXPLANATION.Description = this.GetType().Name + LITERAL_STRING; VAR_EXPLANATION.Value = Score(VAR_BASICSTATS, VAR_FLOAT); VAR_EXPLANATION.AddDetail(new Explanation(VAR_FLOAT, LITERAL_STRING)); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.TotalTermFreq, LITERAL_STRING)); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.DocFreq, LITERAL_STRING)); return VAR_EXPLANATION; }
public virtual GetNodeResponse METHOD_NAME(GetNodeRequest VAR_GETNODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetNodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetNodeResponseUnmarshaller.Instance; return Invoke<GetNodeResponse>(VAR_GETNODEREQUEST, VAR_VAR); }
public virtual CreateCapacityProviderResponse METHOD_NAME(CreateCapacityProviderRequest VAR_CREATECAPACITYPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCapacityProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCapacityProviderResponseUnmarshaller.Instance; return Invoke<CreateCapacityProviderResponse>(VAR_CREATECAPACITYPROVIDERREQUEST, VAR_VAR); }
public override string[] METHOD_NAME() { ISet<string> VAR_ISET<STRING> = new JCG.HashSet<string>(); DirectoryNotFoundException VAR_DIRECTORYNOTFOUNDEXCEPTION = LITERAL_NULL; try { foreach (string f in primaryDir.METHOD_NAME()) { VAR_ISET<STRING>.Add(f); } } catch (DirectoryNotFoundException e) { VAR_DIRECTORYNOTFOUNDEXCEPTION = e; } try { foreach (string f in secondaryDir.METHOD_NAME()) { VAR_ISET<STRING>.Add(f); } } catch (DirectoryNotFoundException) { if (VAR_DIRECTORYNOTFOUNDEXCEPTION != LITERAL_NULL) { throw VAR_DIRECTORYNOTFOUNDEXCEPTION; } if (VAR_ISET<STRING>.Count == LITERAL_INT) { throw; } } if (VAR_DIRECTORYNOTFOUNDEXCEPTION != LITERAL_NULL && VAR_ISET<STRING>.Count == LITERAL_INT) { throw VAR_DIRECTORYNOTFOUNDEXCEPTION; } return VAR_ISET<STRING>.ToArray(); }
public int METHOD_NAME() { return _rc4.XorByte(_le.METHOD_NAME()); }
public NumberEval(double VAR_DOUBLE) { this._value = VAR_DOUBLE; }
public virtual java.util.Iterator<E> METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public override string METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public virtual GetDeliverabilityDashboardOptionsResponse METHOD_NAME(GetDeliverabilityDashboardOptionsRequest VAR_GETDELIVERABILITYDASHBOARDOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeliverabilityDashboardOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeliverabilityDashboardOptionsResponseUnmarshaller.Instance; return Invoke<GetDeliverabilityDashboardOptionsResponse>(VAR_GETDELIVERABILITYDASHBOARDOPTIONSREQUEST, VAR_VAR); }
public static double METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME, false); }
public string METHOD_NAME(int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { return LITERAL_NULL; }
public virtual DescribeDhcpOptionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDhcpOptionsRequest()); }
public FormatRecord(int VAR_INT, String VAR_STRING) { field_1_index_code = VAR_INT; field_4_formatstring = VAR_STRING; field_3_hasMultibyte = StringUtil.HasMultibyte(VAR_STRING); }
public String METHOD_NAME(int VAR_INT) { NameRecord VAR_NAMERECORD = workbook.GetSpecificBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, VAR_INT + LITERAL_INT); if (VAR_NAMERECORD == LITERAL_NULL) return LITERAL_NULL; return HSSFFormulaParser.ToFormulaString(this, VAR_NAMERECORD.NameDefinition); }
public virtual CreateLoadBalancerResponse METHOD_NAME(CreateLoadBalancerRequest VAR_CREATELOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLoadBalancerResponseUnmarshaller.Instance; return Invoke<CreateLoadBalancerResponse>(VAR_CREATELOADBALANCERREQUEST, VAR_VAR); }
public virtual GetVoiceConnectorTerminationHealthResponse METHOD_NAME(GetVoiceConnectorTerminationHealthRequest VAR_GETVOICECONNECTORTERMINATIONHEALTHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorTerminationHealthRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorTerminationHealthResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorTerminationHealthResponse>(VAR_GETVOICECONNECTORTERMINATIONHEALTHREQUEST, VAR_VAR); }
public CRNCountRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_number_crn_records = VAR_RECORDINPUTSTREAM.ReadShort(); if (field_1_number_crn_records < LITERAL_INT) { field_1_number_crn_records = (short)-field_1_number_crn_records; } field_2_sheet_table_index = VAR_RECORDINPUTSTREAM.ReadShort(); }
public BOFRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_version = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_type = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_RECORDINPUTSTREAM.Remaining >= LITERAL_INT) { field_3_build = VAR_RECORDINPUTSTREAM.ReadShort(); } if (VAR_RECORDINPUTSTREAM.Remaining >= LITERAL_INT) { field_4_year = VAR_RECORDINPUTSTREAM.ReadShort(); } if (VAR_RECORDINPUTSTREAM.Remaining >= LITERAL_INT) { field_5_history = VAR_RECORDINPUTSTREAM.ReadInt(); } if (VAR_RECORDINPUTSTREAM.Remaining >= LITERAL_INT) { field_6_rversion = VAR_RECORDINPUTSTREAM.ReadInt(); } }
public AcsRequest<CommonResponse> METHOD_NAME() { if (UriPattern != LITERAL_NULL) { var VAR_VAR = new CommonRoaRequest(Product); VAR_VAR.UriPattern = UriPattern; VAR_VAR.SetVersion(Version); foreach (var entry in PathParameters) { VAR_VAR.AddPathParameters(entry.Key, entry.Value); } FillParams(VAR_VAR); return VAR_VAR; } else { var VAR_VAR = new CommonRpcRequest(Product); VAR_VAR.Version = Version; FillParams(VAR_VAR); return VAR_VAR; } }
public void METHOD_NAME() { foreach (FakeDeleteAtomicIndexReader r in GetSequentialSubReaders()) { r.METHOD_NAME(); } }
public string METHOD_NAME() { return new string (buffer, tokenStart, bufferPosition - tokenStart); }
public virtual DescribeComponentResponse METHOD_NAME(DescribeComponentRequest VAR_DESCRIBECOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeComponentResponseUnmarshaller.Instance; return Invoke<DescribeComponentResponse>(VAR_DESCRIBECOMPONENTREQUEST, VAR_VAR); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GermanNormalizationFilter(VAR_TOKENSTREAM); }
public DrillSideways(IndexSearcher VAR_INDEXSEARCHER, FacetsConfig VAR_FACETSCONFIG, TaxonomyReader VAR_TAXONOMYREADER, SortedSetDocValuesReaderState VAR_SORTEDSETDOCVALUESREADERSTATE) { this.m_searcher = VAR_INDEXSEARCHER; this.m_config = VAR_FACETSCONFIG; this.m_taxoReader = VAR_TAXONOMYREADER; this.m_state = VAR_SORTEDSETDOCVALUESREADERSTATE; }
public virtual DescribeAnalysisSchemesResponse METHOD_NAME(DescribeAnalysisSchemesRequest VAR_DESCRIBEANALYSISSCHEMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAnalysisSchemesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAnalysisSchemesResponseUnmarshaller.Instance; return Invoke<DescribeAnalysisSchemesResponse>(VAR_DESCRIBEANALYSISSCHEMESREQUEST, VAR_VAR); }
public virtual PutTargetsResponse METHOD_NAME(PutTargetsRequest VAR_PUTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutTargetsResponseUnmarshaller.Instance; return Invoke<PutTargetsResponse>(VAR_PUTTARGETSREQUEST, VAR_VAR); }
public virtual RevokeIpRulesResponse METHOD_NAME(RevokeIpRulesRequest VAR_REVOKEIPRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeIpRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeIpRulesResponseUnmarshaller.Instance; return Invoke<RevokeIpRulesResponse>(VAR_REVOKEIPRULESREQUEST, VAR_VAR); }
public virtual RegisterGameServerResponse METHOD_NAME(RegisterGameServerRequest VAR_REGISTERGAMESERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterGameServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterGameServerResponseUnmarshaller.Instance; return Invoke<RegisterGameServerResponse>(VAR_REGISTERGAMESERVERREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_1_options); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_data); int[] VAR_INT[] = _jumpTable; if (VAR_INT[] != LITERAL_NULL) { for (int i = LITERAL_INT; i < VAR_INT[].Length; i++) { VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT[][i]); } VAR_ILITTLEENDIANOUTPUT.WriteShort(_chooseFuncOffset); } }
public int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (char c in cells.Keys) { Cell VAR_CELL = At(c); if (VAR_CELL.@ref >= LITERAL_INT) { VAR_INT++; } } return VAR_INT; }
public virtual E METHOD_NAME() { return removeFirstImpl(); }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(child.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new TruncateTokenFilter(VAR_TOKENSTREAM, prefixLength); }
public virtual string METHOD_NAME(int VAR_INT) { string VAR_STRING; switch (VAR_INT) { case TokenConstants.EOF: { VAR_STRING = LITERAL_STRING; break; } case LITERAL_CHAR: { VAR_STRING = LITERAL_STRING; break; } case LITERAL_CHAR: { VAR_STRING = LITERAL_STRING; break; } case LITERAL_CHAR: { VAR_STRING = LITERAL_STRING; break; } default: { VAR_STRING = Char.ConvertFromUtf32(VAR_INT); break; } } return VAR_STRING; }
public virtual CreateContactResponse METHOD_NAME(CreateContactRequest VAR_CREATECONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateContactResponseUnmarshaller.Instance; return Invoke<CreateContactResponse>(VAR_CREATECONTACTREQUEST, VAR_VAR); }
public virtual Transition[][] METHOD_NAME() { State[] VAR_STATE[] = GetNumberedStates(); Transition[][] VAR_TRANSITION[][] = new Transition[VAR_STATE[].Length][]; foreach (State s in VAR_STATE[]) { s.SortTransitions(Transition.COMPARE_BY_MIN_MAX_THEN_DEST); s.TrimTransitionsArray(); VAR_TRANSITION[][][s.number] = s.TransitionsArray; Debug.Assert(s.TransitionsArray != LITERAL_NULL); } return VAR_TRANSITION[][]; }
public virtual DescribeAccountModificationsResponse METHOD_NAME(DescribeAccountModificationsRequest VAR_DESCRIBEACCOUNTMODIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAccountModificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAccountModificationsResponseUnmarshaller.Instance; return Invoke<DescribeAccountModificationsResponse>(VAR_DESCRIBEACCOUNTMODIFICATIONSREQUEST, VAR_VAR); }
public virtual ListSolutionVersionsResponse METHOD_NAME(ListSolutionVersionsRequest VAR_LISTSOLUTIONVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSolutionVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSolutionVersionsResponseUnmarshaller.Instance; return Invoke<ListSolutionVersionsResponse>(VAR_LISTSOLUTIONVERSIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME(FieldInfos VAR_FIELDINFOS, int VAR_INT) { if (_numDocsWritten != VAR_INT) { throw new Exception(LITERAL_STRING + VAR_INT + LITERAL_STRING + _numDocsWritten + LITERAL_STRING + _output + LITERAL_STRING); } Write(END); NewLine(); SimpleTextUtil.WriteChecksum(_output, _scratch); }
public SetVaultNotificationsRequest(string VAR_STRING, VaultNotificationConfig VAR_VAULTNOTIFICATIONCONFIG) { _vaultName = VAR_STRING; _vaultNotificationConfig = VAR_VAULTNOTIFICATIONCONFIG; }
public override Trie METHOD_NAME(Reduce VAR_REDUCE) { List<Trie> VAR_LIST<TRIE> = new List<Trie>(); foreach (Trie trie in m_tries) VAR_LIST<TRIE>.Add(trie.METHOD_NAME(VAR_REDUCE)); MultiTrie VAR_MULTITRIE = new MultiTrie(forward); VAR_MULTITRIE.m_tries = VAR_LIST<TRIE>; return VAR_MULTITRIE; }
public virtual void METHOD_NAME() { lock (@lock) { print(System.Environment.NewLine); if (autoFlush) { flush(); } } }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(GREATERTHAN); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual UpdateDeploymentResponse METHOD_NAME(UpdateDeploymentRequest VAR_UPDATEDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDeploymentResponseUnmarshaller.Instance; return Invoke<UpdateDeploymentResponse>(VAR_UPDATEDEPLOYMENTREQUEST, VAR_VAR); }
public virtual ListRoutingProfilesResponse METHOD_NAME(ListRoutingProfilesRequest VAR_LISTROUTINGPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRoutingProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRoutingProfilesResponseUnmarshaller.Instance; return Invoke<ListRoutingProfilesResponse>(VAR_LISTROUTINGPROFILESREQUEST, VAR_VAR); }
public bool METHOD_NAME(SharedFormulaRecord VAR_SHAREDFORMULARECORD) { return field_7_parsed_expr.IsSame(VAR_SHAREDFORMULARECORD.field_7_parsed_expr); }
public static byte METHOD_NAME(int VAR_INT) { switch (CharUnicodeInfo.GetUnicodeCategory((char)VAR_INT)) { case UnicodeCategory.UppercaseLetter: return WordDelimiterFilter.UPPER; case UnicodeCategory.LowercaseLetter: return WordDelimiterFilter.LOWER; case UnicodeCategory.TitlecaseLetter: case UnicodeCategory.ModifierLetter: case UnicodeCategory.OtherLetter: case UnicodeCategory.NonSpacingMark: case UnicodeCategory.EnclosingMark: case UnicodeCategory.SpacingCombiningMark: return WordDelimiterFilter.ALPHA; case UnicodeCategory.DecimalDigitNumber: case UnicodeCategory.LetterNumber: case UnicodeCategory.OtherNumber: return WordDelimiterFilter.DIGIT; case UnicodeCategory.Surrogate: return WordDelimiterFilter.ALPHA | WordDelimiterFilter.DIGIT; default: return WordDelimiterFilter.SUBWORD_DELIM; } }
public virtual CreateImageResponse METHOD_NAME(CreateImageRequest VAR_CREATEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateImageResponseUnmarshaller.Instance; return Invoke<CreateImageResponse>(VAR_CREATEIMAGEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RevCommit VAR_REVCOMMIT) { if (VAR_REVCOMMIT != LITERAL_NULL) { assume.AddItem(VAR_REVCOMMIT); } }
public virtual DeleteTagsResponse METHOD_NAME(DeleteTagsRequest VAR_DELETETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTagsResponseUnmarshaller.Instance; return Invoke<DeleteTagsResponse>(VAR_DELETETAGSREQUEST, VAR_VAR); }
public virtual ListTemplateVersionsResponse METHOD_NAME(ListTemplateVersionsRequest VAR_LISTTEMPLATEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTemplateVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTemplateVersionsResponseUnmarshaller.Instance; return Invoke<ListTemplateVersionsResponse>(VAR_LISTTEMPLATEVERSIONSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + x + LITERAL_STRING + y + LITERAL_STRING; }
public DisjunctionMaxQueryBuilder(IQueryBuilder VAR_IQUERYBUILDER) { this.VAR_IQUERYBUILDER = VAR_IQUERYBUILDER; }
public virtual PutNotificationConfigurationResponse METHOD_NAME(PutNotificationConfigurationRequest VAR_PUTNOTIFICATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutNotificationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutNotificationConfigurationResponseUnmarshaller.Instance; return Invoke<PutNotificationConfigurationResponse>(VAR_PUTNOTIFICATIONCONFIGURATIONREQUEST, VAR_VAR); }
public RecognizeFlowerRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public IndexFormatTooOldException(string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT) : base(LITERAL_STRING + resourceDesc + LITERAL_STRING + version + LITERAL_STRING + minVersion + LITERAL_STRING + maxVersion + LITERAL_STRING) { Debug.Assert(VAR_STRING != LITERAL_NULL); }
public virtual void METHOD_NAME(int VAR_INT) { if (@readonly) { throw new InvalidOperationException(LITERAL_STRING); } METHOD_NAME(VAR_INT, VAR_INT); }
public sealed override int METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public virtual DescribeClusterSecurityGroupsResponse METHOD_NAME(DescribeClusterSecurityGroupsRequest VAR_DESCRIBECLUSTERSECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeClusterSecurityGroupsResponse>(VAR_DESCRIBECLUSTERSECURITYGROUPSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ScandinavianFoldingFilter(VAR_TOKENSTREAM); }
public virtual DeleteNotebookInstanceLifecycleConfigResponse METHOD_NAME(DeleteNotebookInstanceLifecycleConfigRequest VAR_DELETENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNotebookInstanceLifecycleConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DeleteNotebookInstanceLifecycleConfigResponse>(VAR_DELETENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST, VAR_VAR); }
public virtual DescribeComponentConfigurationRecommendationResponse METHOD_NAME(DescribeComponentConfigurationRecommendationRequest VAR_DESCRIBECOMPONENTCONFIGURATIONRECOMMENDATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeComponentConfigurationRecommendationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeComponentConfigurationRecommendationResponseUnmarshaller.Instance; return Invoke<DescribeComponentConfigurationRecommendationResponse>(VAR_DESCRIBECOMPONENTCONFIGURATIONRECOMMENDATIONREQUEST, VAR_VAR); }
public SimpleMergedSegmentWarmer(InfoStream VAR_INFOSTREAM) { this.VAR_INFOSTREAM = VAR_INFOSTREAM; }
public int METHOD_NAME() { return pos + LITERAL_INT; }
public ThaiTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override int METHOD_NAME() { if (name == LITERAL_NULL || value == LITERAL_NULL) { throw new Exception(GetName() + LITERAL_STRING + name + LITERAL_STRING + value); } RunData.Config.Set(name, value); return LITERAL_INT; }
public void METHOD_NAME(int VAR_INT, String VAR_STRING) { NameRecord VAR_NAMERECORD = workbook.GetSpecificBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, VAR_INT + LITERAL_INT); if (VAR_NAMERECORD == LITERAL_NULL) VAR_NAMERECORD = workbook.CreateBuiltInName(NameRecord.BUILTIN_PRINT_AREA, VAR_INT + LITERAL_INT); String[] VAR_STRING[] = VAR_STRING.Split(new char[] { LITERAL_CHAR }); StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } SheetNameFormatter.AppendFormat(VAR_STRINGBUILDER, GetSheetName(VAR_INT)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][i]); } VAR_NAMERECORD.NameDefinition = (HSSFFormulaParser.Parse(VAR_STRINGBUILDER.ToString(), this, FormulaType.NamedRange, VAR_INT)); }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId); }
public static DefaultProfile METHOD_NAME(string VAR_STRING) { return new DefaultProfile(VAR_STRING); }
public TurkishLowerCaseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static bool METHOD_NAME(double[] VAR_DOUBLE[], double[] VAR_DOUBLE[]) { if (VAR_DOUBLE[] == VAR_DOUBLE[]) { return true; } if (VAR_DOUBLE[] == LITERAL_NULL || VAR_DOUBLE[] == LITERAL_NULL || VAR_DOUBLE[].Length != VAR_DOUBLE[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_DOUBLE[].Length; i++) { if (Sharpen.Util.DoubleToLongBits(VAR_DOUBLE[][i]) != Sharpen.Util.DoubleToLongBits(VAR_DOUBLE[][i])) { return false; } } } return true; }
public ShortField(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT); } _offset = VAR_INT; }
public int METHOD_NAME() { return METHOD_NAME(scheme, port); }
public virtual GetDiskSnapshotsResponse METHOD_NAME(GetDiskSnapshotsRequest VAR_GETDISKSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDiskSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDiskSnapshotsResponseUnmarshaller.Instance; return Invoke<GetDiskSnapshotsResponse>(VAR_GETDISKSNAPSHOTSREQUEST, VAR_VAR); }
public ParseTreePatternMatcher(Lexer VAR_LEXER, Parser VAR_PARSER) { this.VAR_LEXER = VAR_LEXER; this.VAR_PARSER = VAR_PARSER; }
public PassageScorer(float VAR_FLOAT, float VAR_FLOAT, float VAR_FLOAT) { this.VAR_FLOAT = VAR_FLOAT; this.VAR_FLOAT = VAR_FLOAT; this.VAR_FLOAT = VAR_FLOAT; }
public CreateTicketRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual RejectTransitGatewayVpcAttachmentResponse METHOD_NAME(RejectTransitGatewayVpcAttachmentRequest VAR_REJECTTRANSITGATEWAYVPCATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectTransitGatewayVpcAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectTransitGatewayVpcAttachmentResponseUnmarshaller.Instance; return Invoke<RejectTransitGatewayVpcAttachmentResponse>(VAR_REJECTTRANSITGATEWAYVPCATTACHMENTREQUEST, VAR_VAR); }
public virtual DeleteApnsChannelResponse METHOD_NAME(DeleteApnsChannelRequest VAR_DELETEAPNSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApnsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApnsChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsChannelResponse>(VAR_DELETEAPNSCHANNELREQUEST, VAR_VAR); }
public Entry METHOD_NAME(String VAR_STRING) { Entry VAR_ENTRY = LITERAL_NULL; if (VAR_STRING != LITERAL_NULL) { try { VAR_ENTRY = (Entry)_byname[VAR_STRING]; } catch (KeyNotFoundException) { throw new FileNotFoundException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } } if (VAR_ENTRY == LITERAL_NULL) { throw new FileNotFoundException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } return VAR_ENTRY; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new FrenchMinimalStemFilter(VAR_TOKENSTREAM); }
public int METHOD_NAME() { return _relativeDecimalExponent + EXPONENT_OFFSET; }
public virtual DescribeInstanceCreditSpecificationsResponse METHOD_NAME(DescribeInstanceCreditSpecificationsRequest VAR_DESCRIBEINSTANCECREDITSPECIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstanceCreditSpecificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstanceCreditSpecificationsResponseUnmarshaller.Instance; return Invoke<DescribeInstanceCreditSpecificationsResponse>(VAR_DESCRIBEINSTANCECREDITSPECIFICATIONSREQUEST, VAR_VAR); }
public virtual GetSendQuotaResponse METHOD_NAME() { return METHOD_NAME(new GetSendQuotaRequest()); }
public override string METHOD_NAME() { return Term.Utf8ToString(); }
public virtual ListFacetNamesResponse METHOD_NAME(ListFacetNamesRequest VAR_LISTFACETNAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFacetNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFacetNamesResponseUnmarshaller.Instance; return Invoke<ListFacetNamesResponse>(VAR_LISTFACETNAMESREQUEST, VAR_VAR); }
public PlainValueCellCacheEntry(ValueEval VAR_VALUEEVAL) { UpdateValue(VAR_VALUEEVAL); }
public virtual PutEmailIdentityFeedbackAttributesResponse METHOD_NAME(PutEmailIdentityFeedbackAttributesRequest VAR_PUTEMAILIDENTITYFEEDBACKATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEmailIdentityFeedbackAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEmailIdentityFeedbackAttributesResponseUnmarshaller.Instance; return Invoke<PutEmailIdentityFeedbackAttributesResponse>(VAR_PUTEMAILIDENTITYFEEDBACKATTRIBUTESREQUEST, VAR_VAR); }
public AbortMultipartUploadRequest(string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _uploadId = VAR_STRING; }
public ResetDBParameterGroupRequest(string VAR_STRING) { _dbParameterGroupName = VAR_STRING; }
public IClientAnchor METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { return new HSSFClientAnchor(VAR_INT, VAR_INT, VAR_INT, VAR_INT, (short)VAR_INT, VAR_INT, (short)VAR_INT, VAR_INT); }
public void METHOD_NAME(ValueEval VAR_VALUEEVAL) { int VAR_INT = _evaluationFrames.Count; if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } CellEvaluationFrame VAR_CELLEVALUATIONFRAME = (CellEvaluationFrame)_evaluationFrames[VAR_INT - LITERAL_INT]; VAR_CELLEVALUATIONFRAME.UpdateFormulaResult(VAR_VALUEEVAL); }
public virtual IEnumerator<string> METHOD_NAME() { return new Iterator(this); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT); }
public override int[] METHOD_NAME() { int[] VAR_INT[] = base.METHOD_NAME(); start = new int[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_INT32)]; end = new int[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_INT32)]; freq = new int[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_INT32)]; Debug.Assert(start.Length >= VAR_INT[].Length); Debug.Assert(end.Length >= VAR_INT[].Length); Debug.Assert(freq.Length >= VAR_INT[].Length); return VAR_INT[]; }
public virtual bool METHOD_NAME(RefSpec VAR_REFSPEC) { if (fetch.Contains(VAR_REFSPEC)) { return false; } return fetch.AddItem(VAR_REFSPEC); }
public char METHOD_NAME(int VAR_INT) { if (VAR_INT < start || VAR_INT > end) { throw new System.ArgumentException(); } offset = VAR_INT; if (offset == end) { return java.text.CharacterIteratorClass.DONE; } return @string[offset]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public LogByteSizeMergePolicy() { m_minMergeSize = (long)(DEFAULT_MIN_MERGE_MB * LITERAL_INT * LITERAL_INT); m_maxMergeSize = (long)(DEFAULT_MAX_MERGE_MB * LITERAL_INT * LITERAL_INT); m_maxMergeSizeForForcedMerge = long.MaxValue; }
public virtual DescribeNetworkInterfacePermissionsResponse METHOD_NAME(DescribeNetworkInterfacePermissionsRequest VAR_DESCRIBENETWORKINTERFACEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNetworkInterfacePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNetworkInterfacePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacePermissionsResponse>(VAR_DESCRIBENETWORKINTERFACEPERMISSIONSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.m_field + LITERAL_STRING + this.m_text + LITERAL_STRING; }
public virtual DeleteImageBuilderResponse METHOD_NAME(DeleteImageBuilderRequest VAR_DELETEIMAGEBUILDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteImageBuilderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteImageBuilderResponseUnmarshaller.Instance; return Invoke<DeleteImageBuilderResponse>(VAR_DELETEIMAGEBUILDERREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return requiresCommitBody; }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_DOCPARTS); }
public virtual DescribeConfigurationSetResponse METHOD_NAME(DescribeConfigurationSetRequest VAR_DESCRIBECONFIGURATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConfigurationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConfigurationSetResponseUnmarshaller.Instance; return Invoke<DescribeConfigurationSetResponse>(VAR_DESCRIBECONFIGURATIONSETREQUEST, VAR_VAR); }
public static BufferSize METHOD_NAME(long VAR_LONG) { return new BufferSize(VAR_LONG * MB); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_reserved); }
public virtual ListLabelingJobsForWorkteamResponse METHOD_NAME(ListLabelingJobsForWorkteamRequest VAR_LISTLABELINGJOBSFORWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLabelingJobsForWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLabelingJobsForWorkteamResponseUnmarshaller.Instance; return Invoke<ListLabelingJobsForWorkteamResponse>(VAR_LISTLABELINGJOBSFORWORKTEAMREQUEST, VAR_VAR); }
public virtual GetKeyPairResponse METHOD_NAME(GetKeyPairRequest VAR_GETKEYPAIRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetKeyPairRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetKeyPairResponseUnmarshaller.Instance; return Invoke<GetKeyPairResponse>(VAR_GETKEYPAIRREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return elements.Length == LITERAL_INT; }
public EveryNTermSelector(int VAR_INT) { this.VAR_INT = VAR_INT; count = VAR_INT; }
public void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { TokenSource.METHOD_NAME(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public DirectTrackingAllocator(int VAR_INT, Counter VAR_COUNTER) : base(blockSize) { this.VAR_COUNTER = VAR_COUNTER; }
public static java.nio.ShortBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteShortArrayBuffer(VAR_INT); }
public virtual DescribeDatasetImportJobResponse METHOD_NAME(DescribeDatasetImportJobRequest VAR_DESCRIBEDATASETIMPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDatasetImportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDatasetImportJobResponseUnmarshaller.Instance; return Invoke<DescribeDatasetImportJobResponse>(VAR_DESCRIBEDATASETIMPORTJOBREQUEST, VAR_VAR); }
public virtual DescribeClusterSnapshotsResponse METHOD_NAME() { return METHOD_NAME(new DescribeClusterSnapshotsRequest()); }
public PushbackReader(java.io.Reader VAR_JAVA.IO.READER, int VAR_INT) : base(@in) { if (VAR_INT <= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } buf = new char[VAR_INT]; pos = VAR_INT; }
public sealed override char METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT, libcore.io.SizeOf.CHAR); return (char)libcore.io.Memory.peekShort(backingArray, offset + VAR_INT, _order); }
public SingleCellValueArray(ValueEval VAR_VALUEEVAL) : base(LITERAL_INT) { _value = VAR_VALUEEVAL; }
public virtual IList<Ref> METHOD_NAME() { return cherryPickedRefs; }
public Destination(List<string> VAR_LIST<STRING>) { _toAddresses = VAR_LIST<STRING>; }
public virtual string METHOD_NAME() { return hostName; }
public void METHOD_NAME(int VAR_INT) { map = new int[VAR_INT]; }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; try { out1.WriteByte((byte)VAR_INT); out1.WriteByte((byte)VAR_INT); } catch (IOException e) { throw new RuntimeException(e); } }
public PathQueryNode(IList<QueryText> VAR_ILIST<QUERYTEXT>) { this.values = VAR_ILIST<QUERYTEXT>; if (VAR_ILIST<QUERYTEXT>.Count <= LITERAL_INT) { throw new Exception(LITERAL_STRING); } }
public virtual int METHOD_NAME() { return maxDeltaDepth; }
public virtual ListDomainsResponse METHOD_NAME(ListDomainsRequest VAR_LISTDOMAINSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDomainsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDomainsResponseUnmarshaller.Instance; return Invoke<ListDomainsResponse>(VAR_LISTDOMAINSREQUEST, VAR_VAR); }
public virtual float METHOD_NAME(int VAR_INT, int VAR_INT) { float VAR_FLOAT = LITERAL_INT + VAR_INT / pivot; return (k1 + LITERAL_INT) * (float)Math.Log(LITERAL_INT + (VAR_FLOAT + LITERAL_INT) / (VAR_INT + LITERAL_INT)); }
public virtual PutIdentityPolicyResponse METHOD_NAME(PutIdentityPolicyRequest VAR_PUTIDENTITYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutIdentityPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutIdentityPolicyResponseUnmarshaller.Instance; return Invoke<PutIdentityPolicyResponse>(VAR_PUTIDENTITYPOLICYREQUEST, VAR_VAR); }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(child.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static java.io.File[] METHOD_NAME() { return new java.io.File[] { new java.io.File(LITERAL_STRING) }; }
public override java.nio.CharBuffer METHOD_NAME() { return new java.nio.ReadOnlyCharArrayBuffer(remaining(), backingArray, offset + _position); }
public JapaneseKatakanaStemFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT) : base(input) { this.minimumKatakanaLength = VAR_INT; this.termAttr = AddAttribute<ICharTermAttribute>(); this.keywordAttr = AddAttribute<IKeywordAttribute>(); }
public override string METHOD_NAME() { return Term.Utf8ToString(); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { System.Array.Copy(VAR_CHAR[], VAR_INT, m_buf, this.m_len, VAR_INT); this.m_len += VAR_INT; }
public ExternalNameRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_option_flag = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_ixals = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_not_used = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUByte(); field_4_name = StringUtil.ReadUnicodeString(VAR_RECORDINPUTSTREAM, VAR_INT); if (!IsOLELink && !IsStdDocumentNameIdentifier) { if (IsAutomaticLink) { if (VAR_RECORDINPUTSTREAM.Available() > LITERAL_INT) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUByte() + LITERAL_INT; int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort() + LITERAL_INT; int VAR_INT = VAR_INT * VAR_INT; _ddeValues = ConstantValueParser.Parse(VAR_RECORDINPUTSTREAM, VAR_INT); _nColumns = VAR_INT; _nRows = VAR_INT; } } else { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); field_5_name_definition = Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM); } } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PorterStemFilter(VAR_TOKENSTREAM); }
public LoginProfile(string VAR_STRING, DateTime VAR_DATETIME) { _userName = VAR_STRING; _createDate = VAR_DATETIME; }
public void METHOD_NAME(byte[] VAR_BYTE[]) { field_2_unknownFormulaData = VAR_BYTE[]; }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { return m_normMap == LITERAL_NULL ? VAR_TEXTREADER : new MappingCharFilter(m_normMap, VAR_TEXTREADER); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public java.nio.Buffer METHOD_NAME() { _position = LITERAL_INT; _mark = UNSET_MARK; _limit = _capacity; return this; }
public int METHOD_NAME(int VAR_INT) { return _externalNameRecords[VAR_INT].Ix; }
public virtual DeleteReceiptRuleResponse METHOD_NAME(DeleteReceiptRuleRequest VAR_DELETERECEIPTRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteReceiptRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteReceiptRuleResponseUnmarshaller.Instance; return Invoke<DeleteReceiptRuleResponse>(VAR_DELETERECEIPTRULEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (!base.METHOD_NAME(VAR_OBJECT)) return false; if (GetType() != VAR_OBJECT.GetType()) return false; SortedSetSortField VAR_SORTEDSETSORTFIELD = (SortedSetSortField)VAR_OBJECT; if (selector != VAR_SORTEDSETSORTFIELD.selector) return false; return true; }
public JobFlowDetail(string VAR_STRING, string VAR_STRING, JobFlowExecutionStatusDetail VAR_JOBFLOWEXECUTIONSTATUSDETAIL, JobFlowInstancesDetail VAR_JOBFLOWINSTANCESDETAIL) { _jobFlowId = VAR_STRING; _name = VAR_STRING; _executionStatusDetail = VAR_JOBFLOWEXECUTIONSTATUSDETAIL; _instances = VAR_JOBFLOWINSTANCESDETAIL; }
public virtual PutVoiceConnectorOriginationResponse METHOD_NAME(PutVoiceConnectorOriginationRequest VAR_PUTVOICECONNECTORORIGINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorOriginationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorOriginationResponse>(VAR_PUTVOICECONNECTORORIGINATIONREQUEST, VAR_VAR); }
public virtual StartDBInstanceResponse METHOD_NAME(StartDBInstanceRequest VAR_STARTDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDBInstanceResponseUnmarshaller.Instance; return Invoke<StartDBInstanceResponse>(VAR_STARTDBINSTANCEREQUEST, VAR_VAR); }
public virtual DeleteChangeSetResponse METHOD_NAME(DeleteChangeSetRequest VAR_DELETECHANGESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteChangeSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteChangeSetResponseUnmarshaller.Instance; return Invoke<DeleteChangeSetResponse>(VAR_DELETECHANGESETREQUEST, VAR_VAR); }
public int METHOD_NAME() { return this.pos + LITERAL_INT; }
public virtual DescribeGameSessionDetailsResponse METHOD_NAME(DescribeGameSessionDetailsRequest VAR_DESCRIBEGAMESESSIONDETAILSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameSessionDetailsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameSessionDetailsResponseUnmarshaller.Instance; return Invoke<DescribeGameSessionDetailsResponse>(VAR_DESCRIBEGAMESESSIONDETAILSREQUEST, VAR_VAR); }
public virtual ListDatasetImportJobsResponse METHOD_NAME(ListDatasetImportJobsRequest VAR_LISTDATASETIMPORTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDatasetImportJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDatasetImportJobsResponseUnmarshaller.Instance; return Invoke<ListDatasetImportJobsResponse>(VAR_LISTDATASETIMPORTJOBSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + x + LITERAL_STRING + y + LITERAL_STRING; }
public virtual CharBlockArray METHOD_NAME(char VAR_CHAR) { if (this.current.length == this.blockSize) { AddBlock(); } this.current.chars[this.current.length++] = VAR_CHAR; this.length++; return this; }
public SimpleBoolFunction(ValueSource VAR_VALUESOURCE) { this.m_source = VAR_VALUESOURCE; }
public override string METHOD_NAME() { return Prefix; }
public static NGit.Transport.Transport METHOD_NAME(URIish VAR_URIISH) { foreach (JavaWeakReference<TransportProtocol> @ref in protocols) { TransportProtocol VAR_TRANSPORTPROTOCOL = @ref.Get(); if (VAR_TRANSPORTPROTOCOL == LITERAL_NULL) { protocols.Remove(@ref); continue; } if (VAR_TRANSPORTPROTOCOL.CanHandle(VAR_URIISH, LITERAL_NULL, LITERAL_NULL)) { return VAR_TRANSPORTPROTOCOL.METHOD_NAME(VAR_URIISH); } } throw new NGit.Errors.NotSupportedException(MessageFormat.Format(JGitText.Get().URINotSupported, VAR_URIISH)); }
public override void METHOD_NAME(int VAR_INT) { throw new System.IO.IOException(LITERAL_STRING); }
public virtual DeleteClusterSecurityGroupResponse METHOD_NAME(DeleteClusterSecurityGroupRequest VAR_DELETECLUSTERSECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterSecurityGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSecurityGroupResponse>(VAR_DELETECLUSTERSECURITYGROUPREQUEST, VAR_VAR); }
public virtual RebalanceSlotsInGlobalReplicationGroupResponse METHOD_NAME(RebalanceSlotsInGlobalReplicationGroupRequest VAR_REBALANCESLOTSINGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebalanceSlotsInGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<RebalanceSlotsInGlobalReplicationGroupResponse>(VAR_REBALANCESLOTSINGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public virtual DeleteLocalGatewayRouteResponse METHOD_NAME(DeleteLocalGatewayRouteRequest VAR_DELETELOCALGATEWAYROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLocalGatewayRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLocalGatewayRouteResponseUnmarshaller.Instance; return Invoke<DeleteLocalGatewayRouteResponse>(VAR_DELETELOCALGATEWAYROUTEREQUEST, VAR_VAR); }
public virtual RestoreDBClusterFromSnapshotResponse METHOD_NAME(RestoreDBClusterFromSnapshotRequest VAR_RESTOREDBCLUSTERFROMSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBClusterFromSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBClusterFromSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterFromSnapshotResponse>(VAR_RESTOREDBCLUSTERFROMSNAPSHOTREQUEST, VAR_VAR); }
public override string METHOD_NAME(int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { return LITERAL_NULL; }
public CreateDBSnapshotRequest(string VAR_STRING, string VAR_STRING) { _dbSnapshotIdentifier = VAR_STRING; _dbInstanceIdentifier = VAR_STRING; }
public virtual RemoveRoleFromDBInstanceResponse METHOD_NAME(RemoveRoleFromDBInstanceRequest VAR_REMOVEROLEFROMDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveRoleFromDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveRoleFromDBInstanceResponseUnmarshaller.Instance; return Invoke<RemoveRoleFromDBInstanceResponse>(VAR_REMOVEROLEFROMDBINSTANCEREQUEST, VAR_VAR); }
public virtual IToken METHOD_NAME() { if (i >= tokens.Count) { if (eofToken == LITERAL_NULL) { int VAR_INT = -LITERAL_INT; if (tokens.Count > LITERAL_INT) { int VAR_INT = tokens[tokens.Count - LITERAL_INT].StopIndex; if (VAR_INT != -LITERAL_INT) { VAR_INT = VAR_INT + LITERAL_INT; } } int VAR_INT = Math.Max(-LITERAL_INT, VAR_INT - LITERAL_INT); eofToken = _factory.Create(Tuple.Create((ITokenSource)this, InputStream), TokenConstants.EOF, LITERAL_STRING, TokenConstants.DefaultChannel, VAR_INT, VAR_INT, Line, Column); } return eofToken; } IToken VAR_ITOKEN = tokens[i]; if (i == tokens.Count - LITERAL_INT && VAR_ITOKEN.Type == TokenConstants.EOF) { eofToken = VAR_ITOKEN; } i++; return VAR_ITOKEN; }
public override IQueryMaker METHOD_NAME() { return LITERAL_NULL; }
public GC(FileRepository VAR_FILEREPOSITORY) { this.VAR_FILEREPOSITORY = VAR_FILEREPOSITORY; this.pm = NullProgressMonitor.INSTANCE; }
public override void METHOD_NAME(int VAR_INT) { lock (this) { base.METHOD_NAME(VAR_INT); } }
public virtual CancelImportTaskResponse METHOD_NAME(CancelImportTaskRequest VAR_CANCELIMPORTTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelImportTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelImportTaskResponseUnmarshaller.Instance; return Invoke<CancelImportTaskResponse>(VAR_CANCELIMPORTTASKREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return (current = start); }
public virtual DeleteDiskResponse METHOD_NAME(DeleteDiskRequest VAR_DELETEDISKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDiskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDiskResponseUnmarshaller.Instance; return Invoke<DeleteDiskResponse>(VAR_DELETEDISKREQUEST, VAR_VAR); }
public virtual DeleteVpcEndpointConnectionNotificationsResponse METHOD_NAME(DeleteVpcEndpointConnectionNotificationsRequest VAR_DELETEVPCENDPOINTCONNECTIONNOTIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcEndpointConnectionNotificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcEndpointConnectionNotificationsResponseUnmarshaller.Instance; return Invoke<DeleteVpcEndpointConnectionNotificationsResponse>(VAR_DELETEVPCENDPOINTCONNECTIONNOTIFICATIONSREQUEST, VAR_VAR); }
public bool METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return VAR_ANYOBJECTID != LITERAL_NULL ? METHOD_NAME(this, VAR_ANYOBJECTID) : false; }
public DescribeConfigurationSettingsRequest(string VAR_STRING) { _applicationName = VAR_STRING; }
public ET METHOD_NAME() { if (expectedModCount == list.modCount) { java.util.LinkedList.Link<ET> VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> = link.METHOD_NAME; if (VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> != list.voidLink) { lastLink = link = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; pos++; return link.data; } throw new java.util.NoSuchElementException(); } throw new java.util.ConcurrentModificationException(); }
public virtual CreateConfigurationResponse METHOD_NAME(CreateConfigurationRequest VAR_CREATECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConfigurationResponseUnmarshaller.Instance; return Invoke<CreateConfigurationResponse>(VAR_CREATECONFIGURATIONREQUEST, VAR_VAR); }
public virtual ResetClusterParameterGroupResponse METHOD_NAME(ResetClusterParameterGroupRequest VAR_RESETCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<ResetClusterParameterGroupResponse>(VAR_RESETCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { @in.METHOD_NAME(VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Password)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual SendTemplatedEmailResponse METHOD_NAME(SendTemplatedEmailRequest VAR_SENDTEMPLATEDEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendTemplatedEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendTemplatedEmailResponseUnmarshaller.Instance; return Invoke<SendTemplatedEmailResponse>(VAR_SENDTEMPLATEDEMAILREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is SemanticContext.Predicate)) { return false; } if (this == VAR_OBJECT) { return true; } SemanticContext.Predicate VAR_SEMANTICCONTEXT.PREDICATE = (SemanticContext.Predicate)VAR_OBJECT; return this.ruleIndex == VAR_SEMANTICCONTEXT.PREDICATE.ruleIndex && this.predIndex == VAR_SEMANTICCONTEXT.PREDICATE.predIndex && this.isCtxDependent == VAR_SEMANTICCONTEXT.PREDICATE.isCtxDependent; }
public virtual void METHOD_NAME(bool VAR_BOOL) { throw new System.NotImplementedException(); }
public virtual bool METHOD_NAME(int VAR_INT) { foreach (var positionSpan in _positionSpans) { if ((VAR_INT >= positionSpan.Start) && (VAR_INT <= positionSpan.End)) { return true; } } return false; }
public static int METHOD_NAME(long VAR_LONG, int VAR_INT) { if (VAR_INT <= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } int VAR_INT = LITERAL_INT; while (VAR_LONG >= VAR_INT) { VAR_LONG /= VAR_INT; VAR_INT++; } return VAR_INT; }
public sealed override java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, VAR_LONG[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT == this; }
public virtual void METHOD_NAME(string VAR_STRING, Repository VAR_REPOSITORY) { exports.Put(NameWithDotGit(VAR_STRING), VAR_REPOSITORY); }
public virtual void METHOD_NAME(long VAR_LONG) { METHOD_NAME(VAR_LONG.ToString()); }
public NPOI.SS.UserModel.IFormulaEvaluator METHOD_NAME() { return new HSSFFormulaEvaluator(workbook); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL || !(VAR_OBJECT is Antlr4.Runtime.Misc.IntervalSet)) { return false; } Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = (Antlr4.Runtime.Misc.IntervalSet)VAR_OBJECT; return this.intervals.SequenceEqual(VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.intervals); }
public virtual FileMode METHOD_NAME(DirCacheIterator VAR_DIRCACHEITERATOR) { FileMode VAR_FILEMODE = EntryFileMode; if (VAR_DIRCACHEITERATOR == LITERAL_NULL) { return VAR_FILEMODE; } if (GetOptions().IsFileMode()) { return VAR_FILEMODE; } FileMode VAR_FILEMODE = VAR_DIRCACHEITERATOR.EntryFileMode; if (FileMode.REGULAR_FILE == VAR_FILEMODE && FileMode.EXECUTABLE_FILE == VAR_FILEMODE) { return VAR_FILEMODE; } if (FileMode.EXECUTABLE_FILE == VAR_FILEMODE && FileMode.REGULAR_FILE == VAR_FILEMODE) { return VAR_FILEMODE; } return VAR_FILEMODE; }
public virtual CreateScheduledActionResponse METHOD_NAME(CreateScheduledActionRequest VAR_CREATESCHEDULEDACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateScheduledActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateScheduledActionResponseUnmarshaller.Instance; return Invoke<CreateScheduledActionResponse>(VAR_CREATESCHEDULEDACTIONREQUEST, VAR_VAR); }
public virtual PackConfig METHOD_NAME() { return this._enclosing.config; }
public override java.nio.CharBuffer METHOD_NAME(char VAR_CHAR) { throw new java.nio.ReadOnlyBufferException(); }
public DeleteDistributionRequest(string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _ifMatch = VAR_STRING; }
public static long METHOD_NAME(long[] VAR_LONG[], long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG += (VAR_LONG[][i] & ~VAR_LONG[][i]).PopCount(); } return VAR_LONG; }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { return true; }
public virtual DescribeReservedDBInstancesOfferingsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedDBInstancesOfferingsRequest()); }
public ByteVector(int VAR_INT) { if (VAR_INT > LITERAL_INT) { blockSize = VAR_INT; } else { blockSize = DEFAULT_BLOCK_SIZE; } array = new byte[blockSize]; n = LITERAL_INT; }
public virtual OpenStringBuilder METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { return METHOD_NAME(VAR_ICHARSEQUENCE, LITERAL_INT, VAR_ICHARSEQUENCE.Length); }
public string METHOD_NAME(ITokenStream VAR_ITOKENSTREAM) { return GetTokenName(VAR_ITOKENSTREAM.LA(LITERAL_INT)); }
public static NGit.ObjectId METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT); }
public GutsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_left_row_gutter = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_top_col_gutter = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_row_level_max = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_col_level_max = VAR_RECORDINPUTSTREAM.ReadShort(); }
public GermanMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DescribeActiveReceiptRuleSetResponse METHOD_NAME(DescribeActiveReceiptRuleSetRequest VAR_DESCRIBEACTIVERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeActiveReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeActiveReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeActiveReceiptRuleSetResponse>(VAR_DESCRIBEACTIVERECEIPTRULESETREQUEST, VAR_VAR); }
public virtual GetGeoLocationResponse METHOD_NAME(GetGeoLocationRequest VAR_GETGEOLOCATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGeoLocationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGeoLocationResponseUnmarshaller.Instance; return Invoke<GetGeoLocationResponse>(VAR_GETGEOLOCATIONREQUEST, VAR_VAR); }
public KStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public PublishRequest(string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _message = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, string VAR_STRING) { int VAR_INT = VAR_STRING.Length; int VAR_INT = ShiftForReplace(VAR_INT, VAR_INT + VAR_INT, VAR_INT); VAR_STRING.CopyTo(LITERAL_INT, buffer, VAR_INT, VAR_INT); token.Length = (this.VAR_INT = VAR_INT); }
public virtual DescribeInternetGatewaysResponse METHOD_NAME() { return METHOD_NAME(new DescribeInternetGatewaysRequest()); }
public virtual ListQualificationTypesResponse METHOD_NAME(ListQualificationTypesRequest VAR_LISTQUALIFICATIONTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQualificationTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQualificationTypesResponseUnmarshaller.Instance; return Invoke<ListQualificationTypesResponse>(VAR_LISTQUALIFICATIONTYPESREQUEST, VAR_VAR); }
public virtual DetachInstancesResponse METHOD_NAME(DetachInstancesRequest VAR_DETACHINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachInstancesResponseUnmarshaller.Instance; return Invoke<DetachInstancesResponse>(VAR_DETACHINSTANCESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { int VAR_INT = VAR_TREEWALK.TreeCount; if (VAR_INT == LITERAL_INT) { return true; } int VAR_INT = VAR_TREEWALK.GetRawMode(LITERAL_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_TREEWALK.GetRawMode(i) != VAR_INT || !VAR_TREEWALK.IdEqual(i, LITERAL_INT)) { return true; } } return false; }
public override IList<MatchingDocs> METHOD_NAME() { IList<MatchingDocs> VAR_ILIST<MATCHINGDOCS> = base.METHOD_NAME(); if (totalHits == NOT_CALCULATED) { totalHits = LITERAL_INT; foreach (MatchingDocs md in VAR_ILIST<MATCHINGDOCS>) { totalHits += md.TotalHits; } } if (totalHits <= sampleSize) { return VAR_ILIST<MATCHINGDOCS>; } if (sampledDocs == LITERAL_NULL) { samplingRate = (LITERAL_INT * sampleSize) / totalHits; sampledDocs = CreateSampledDocs(VAR_ILIST<MATCHINGDOCS>); } return sampledDocs; }
public virtual CreateDataSourceFromS3Response METHOD_NAME(CreateDataSourceFromS3Request VAR_CREATEDATASOURCEFROMS3REQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDataSourceFromS3RequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDataSourceFromS3ResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromS3Response>(VAR_CREATEDATASOURCEFROMS3REQUEST, VAR_VAR); }
public virtual UpdateFleetMetadataResponse METHOD_NAME(UpdateFleetMetadataRequest VAR_UPDATEFLEETMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFleetMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFleetMetadataResponseUnmarshaller.Instance; return Invoke<UpdateFleetMetadataResponse>(VAR_UPDATEFLEETMETADATAREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME() { return newValue; }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (FieldIndexData entry in fields.Values) { VAR_LONG += entry.METHOD_NAME(); } return VAR_LONG; }
public java.lang.StringBuilder METHOD_NAME(char VAR_CHAR) { append0(VAR_CHAR); return this; }
public virtual void METHOD_NAME(int VAR_INT) { lock (@lock) { checkNotClosed(); if (pos == LITERAL_INT) { throw new System.IO.IOException(LITERAL_STRING); } buf[--pos] = (char)VAR_INT; } }
public QueryFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public ProductDomain(string VAR_STRING, string VAR_STRING) { ProductName = VAR_STRING; DomainName = VAR_STRING; }
public virtual void METHOD_NAME() { refLogMessage = LITERAL_NULL; refLogIncludeResult = false; }
public static ITaxonomyWriterCache METHOD_NAME() { return new Cl2oTaxonomyWriterCache(LITERAL_INT, LITERAL_FLOAT, LITERAL_INT); }
public virtual NGit.Api.PushCommand METHOD_NAME(bool VAR_BOOL) { CheckCallable(); this.VAR_BOOL = VAR_BOOL; return this; }
public override ProcessStartInfo METHOD_NAME(string VAR_STRING, string[] VAR_STRING[]) { IList<string> VAR_ILIST<STRING> = new AList<string>(LITERAL_INT + VAR_STRING[].Length); VAR_ILIST<STRING>.AddItem(LITERAL_STRING); VAR_ILIST<STRING>.AddItem(LITERAL_STRING); VAR_ILIST<STRING>.AddItem(VAR_STRING); Sharpen.Collections.AddAll(VAR_ILIST<STRING>, Arrays.AsList(VAR_STRING[])); ProcessStartInfo VAR_PROCESSSTARTINFO = new ProcessStartInfo(); VAR_PROCESSSTARTINFO.SetCommand(VAR_ILIST<STRING>); return VAR_PROCESSSTARTINFO; }
public NameCommentRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { ILittleEndianInput VAR_ILITTLEENDIANINPUT = VAR_RECORDINPUTSTREAM; field_1_record_type = VAR_ILITTLEENDIANINPUT.ReadShort(); field_2_frt_cell_ref_flag = VAR_ILITTLEENDIANINPUT.ReadShort(); field_3_reserved = VAR_ILITTLEENDIANINPUT.ReadLong(); int VAR_INT = VAR_ILITTLEENDIANINPUT.ReadShort(); int VAR_INT = VAR_ILITTLEENDIANINPUT.ReadShort(); VAR_ILITTLEENDIANINPUT.ReadByte(); field_6_name_text = StringUtil.ReadCompressedUnicode(VAR_ILITTLEENDIANINPUT, VAR_INT); VAR_ILITTLEENDIANINPUT.ReadByte(); field_7_comment_text = StringUtil.ReadCompressedUnicode(VAR_ILITTLEENDIANINPUT, VAR_INT); }
public virtual void METHOD_NAME(float VAR_FLOAT) { long VAR_LONG = android.view.animation.AnimationUtils.currentAnimationTimeMillis(); if (mState == STATE_PULL_DECAY && VAR_LONG - mStartTime < mDuration) { return; } if (mState != STATE_PULL) { mGlowScaleY = PULL_GLOW_BEGIN; } mState = STATE_PULL; mStartTime = VAR_LONG; mDuration = PULL_TIME; mPullDistance += VAR_FLOAT; float VAR_FLOAT = System.Math.Abs(mPullDistance); mEdgeAlpha = mEdgeAlphaStart = System.Math.Max(PULL_EDGE_BEGIN, System.Math.Min(VAR_FLOAT, MAX_ALPHA)); mEdgeScaleY = mEdgeScaleYStart = System.Math.Max(HELD_EDGE_SCALE_Y, System.Math.Min(VAR_FLOAT * PULL_DISTANCE_EDGE_FACTOR, LITERAL_FLOAT)); mGlowAlpha = mGlowAlphaStart = System.Math.Min(MAX_ALPHA, mGlowAlpha + (System.Math.Abs(VAR_FLOAT) * PULL_DISTANCE_ALPHA_GLOW_FACTOR)); float VAR_FLOAT = System.Math.Abs(VAR_FLOAT); if (VAR_FLOAT > LITERAL_INT && mPullDistance < LITERAL_INT) { VAR_FLOAT = -VAR_FLOAT; } if (mPullDistance == LITERAL_INT) { mGlowScaleY = LITERAL_INT; } mGlowScaleY = mGlowScaleYStart = System.Math.Min(MAX_GLOW_HEIGHT, System.Math.Max(LITERAL_INT, mGlowScaleY + VAR_FLOAT * PULL_DISTANCE_GLOW_FACTOR)); mEdgeAlphaFinish = mEdgeAlpha; mEdgeScaleYFinish = mEdgeScaleY; mGlowAlphaFinish = mGlowAlpha; mGlowScaleYFinish = mGlowScaleY; }
public virtual NGit.Transport.URIish METHOD_NAME(string VAR_STRING) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.path = VAR_STRING; VAR_NGIT.TRANSPORT.URIISH.rawPath = VAR_STRING; return VAR_NGIT.TRANSPORT.URIISH; }
public virtual UpdateTemplateResponse METHOD_NAME(UpdateTemplateRequest VAR_UPDATETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTemplateResponseUnmarshaller.Instance; return Invoke<UpdateTemplateResponse>(VAR_UPDATETEMPLATEREQUEST, VAR_VAR); }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = METHOD_NAME(VAR_LONG[], VAR_INT); VAR_INT += valueCount; VAR_INT = WriteInt64(VAR_LONG, VAR_BYTE[], VAR_INT); } }
public virtual ListDomainDeliverabilityCampaignsResponse METHOD_NAME(ListDomainDeliverabilityCampaignsRequest VAR_LISTDOMAINDELIVERABILITYCAMPAIGNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDomainDeliverabilityCampaignsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDomainDeliverabilityCampaignsResponseUnmarshaller.Instance; return Invoke<ListDomainDeliverabilityCampaignsResponse>(VAR_LISTDOMAINDELIVERABILITYCAMPAIGNSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public DiffFormatter(OutputStream VAR_OUTPUTSTREAM) { this.VAR_OUTPUTSTREAM = VAR_OUTPUTSTREAM; }
public ExpectedAttributeValue(bool VAR_BOOL) { _exists = VAR_BOOL; }
public override FieldsProducer METHOD_NAME(SegmentReadState VAR_SEGMENTREADSTATE) { PostingsReaderBase VAR_POSTINGSREADERBASE = new Lucene41PostingsReader(VAR_SEGMENTREADSTATE.Directory, VAR_SEGMENTREADSTATE.FieldInfos, VAR_SEGMENTREADSTATE.SegmentInfo, VAR_SEGMENTREADSTATE.Context, VAR_SEGMENTREADSTATE.SegmentSuffix); bool VAR_BOOL = false; try { FieldsProducer VAR_FIELDSPRODUCER = new FSTTermsReader(VAR_SEGMENTREADSTATE, VAR_POSTINGSREADERBASE); VAR_BOOL = true; return VAR_FIELDSPRODUCER; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(VAR_POSTINGSREADERBASE); } } }
public virtual ListSubscribedWorkteamsResponse METHOD_NAME(ListSubscribedWorkteamsRequest VAR_LISTSUBSCRIBEDWORKTEAMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSubscribedWorkteamsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSubscribedWorkteamsResponseUnmarshaller.Instance; return Invoke<ListSubscribedWorkteamsResponse>(VAR_LISTSUBSCRIBEDWORKTEAMSREQUEST, VAR_VAR); }
public BatchDeleteAttributesRequest(string VAR_STRING, List<DeletableItem> VAR_LIST<DELETABLEITEM>) { _domainName = VAR_STRING; _items = VAR_LIST<DELETABLEITEM>; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_1_value ? LITERAL_INT : LITERAL_INT); }
public java.util.NavigableMap<K, V> METHOD_NAME() { return new java.util.TreeMap<K, V>.BoundedMap(this._enclosing, !this.ascending, this.from, this.fromBound, this.to, this.toBound); }
public override java.nio.ByteBuffer METHOD_NAME(long VAR_LONG) { int VAR_INT = _position + libcore.io.SizeOf.LONG; if (VAR_INT > _limit) { throw new java.nio.BufferOverflowException(); } libcore.io.Memory.pokeLong(backingArray, offset + _position, VAR_LONG, _order); _position = VAR_INT; return this; }
public CFRecordsAggregate METHOD_NAME(int VAR_INT) { CheckIndex(VAR_INT); return (CFRecordsAggregate)_cfHeaders[VAR_INT]; }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual GetSegmentsResponse METHOD_NAME(GetSegmentsRequest VAR_GETSEGMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentsResponseUnmarshaller.Instance; return Invoke<GetSegmentsResponse>(VAR_GETSEGMENTSREQUEST, VAR_VAR); }
public virtual DeleteVpcEndpointsResponse METHOD_NAME(DeleteVpcEndpointsRequest VAR_DELETEVPCENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcEndpointsResponseUnmarshaller.Instance; return Invoke<DeleteVpcEndpointsResponse>(VAR_DELETEVPCENDPOINTSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { switch (CellType) { case CellType.Blank: return LITERAL_STRING; case CellType.Boolean: return BooleanCellValue ? LITERAL_STRING : LITERAL_STRING; case CellType.Error: return NPOI.SS.Formula.Eval.ErrorEval.GetText(((BoolErrRecord)_record).ErrorValue); case CellType.Formula: return CellFormula; case CellType.Numeric: string VAR_STRING = this.CellStyle.GetDataFormatString(); DataFormatter VAR_DATAFORMATTER = new DataFormatter(); return VAR_DATAFORMATTER.FormatCellValue(this); case CellType.String: return StringCellValue; default: return LITERAL_STRING + CellType; } }
public virtual IList<HunkHeader> METHOD_NAME() { if (hunks == LITERAL_NULL) { return Sharpen.Collections.EmptyList<HunkHeader>(); } return hunks; }
public virtual ObjectId METHOD_NAME() { EnsureId(); return idBuffer.METHOD_NAME(); }
public ListQueuesRequest(string VAR_STRING) { _queueNamePrefix = VAR_STRING; }
public virtual AcceptTransitGatewayPeeringAttachmentResponse METHOD_NAME(AcceptTransitGatewayPeeringAttachmentRequest VAR_ACCEPTTRANSITGATEWAYPEERINGATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptTransitGatewayPeeringAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptTransitGatewayPeeringAttachmentResponseUnmarshaller.Instance; return Invoke<AcceptTransitGatewayPeeringAttachmentResponse>(VAR_ACCEPTTRANSITGATEWAYPEERINGATTACHMENTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { int VAR_INT = Length; StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_STRINGBUILDER.Append(CharAt(i)); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); int VAR_INT = disjuncts.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Query VAR_QUERY = disjuncts[i]; if (VAR_QUERY is BooleanQuery) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_QUERY.METHOD_NAME(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(VAR_QUERY.METHOD_NAME(VAR_STRING)); } if (i != VAR_INT - LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } } VAR_STRINGBUILDER.Append(LITERAL_STRING); if (tieBreakerMultiplier != LITERAL_FLOAT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(tieBreakerMultiplier); } if (Boost != LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Boost); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual bool METHOD_NAME() { return c.METHOD_NAME(); }
public string ServiceEndpoint { get; internal set; }
public virtual DescribeHsmClientCertificatesResponse METHOD_NAME() { return METHOD_NAME(new DescribeHsmClientCertificatesRequest()); }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_SHORT[].Length < VAR_INT) { short[] VAR_SHORT[] = new short[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT16)]; Array.Copy(VAR_SHORT[], LITERAL_INT, VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); return VAR_SHORT[]; } else { return VAR_SHORT[]; } }
public virtual string METHOD_NAME(string VAR_STRING, TokenGroup VAR_TOKENGROUP) { if (VAR_TOKENGROUP.TotalScore <= LITERAL_INT) { return VAR_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(preTag.Length + VAR_STRING.Length + postTag.Length); VAR_STRINGBUILDER.Append(preTag); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(postTag); return VAR_STRINGBUILDER.ToString(); }
public LimitTokenCountFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT, bool VAR_BOOL) : base(@in) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public override void METHOD_NAME(int[] VAR_INT[], int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = METHOD_NAME(VAR_INT[], VAR_INT); VAR_INT += valueCount; VAR_INT = WriteInt64(VAR_LONG, VAR_BYTE[], VAR_INT); } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ClassicFilter(VAR_TOKENSTREAM); }
public virtual bool METHOD_NAME() { return allowThin; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public override void METHOD_NAME(long VAR_LONG) { Debug.Assert(m_bitsPerValue == LITERAL_INT || (VAR_LONG >= LITERAL_INT && VAR_LONG <= PackedInt32s.MaxValue(m_bitsPerValue)), m_bitsPerValue.ToString()); Debug.Assert(!finished); if (m_valueCount != -LITERAL_INT && written >= m_valueCount) { throw new System.IO.EndOfStreamException(LITERAL_STRING); } nextValues[off++] = VAR_LONG; if (off == nextValues.Length) { Flush(); } ++written; }
public GetOnlineServiceResultRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; }
public override bool METHOD_NAME() { return this._enclosing._size == LITERAL_INT; }
public virtual int METHOD_NAME(ScoreTerm VAR_SCORETERM) { if (Term.BytesEquals(VAR_SCORETERM.Term)) { return LITERAL_INT; } if (this.Boost == VAR_SCORETERM.Boost) { return VAR_SCORETERM.Term.METHOD_NAME(this.Term); } else { return this.Boost.METHOD_NAME(VAR_SCORETERM.Boost); } }
public virtual int METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > count || VAR_INT > VAR_INT) { throw startEndAndLength(VAR_INT, VAR_INT); } return Sharpen.CharHelper.CodePointCount(value, VAR_INT, VAR_INT - VAR_INT); }
public virtual string[] METHOD_NAME() { return commitNames; }
public override bool METHOD_NAME() { return EntrySet().METHOD_NAME(); }
public bool METHOD_NAME() { return border.IsSet(field_1_options); }
public virtual DeleteLaunchTemplateVersionsResponse METHOD_NAME(DeleteLaunchTemplateVersionsRequest VAR_DELETELAUNCHTEMPLATEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLaunchTemplateVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLaunchTemplateVersionsResponseUnmarshaller.Instance; return Invoke<DeleteLaunchTemplateVersionsResponse>(VAR_DELETELAUNCHTEMPLATEVERSIONSREQUEST, VAR_VAR); }
public virtual DescribeDeviceResponse METHOD_NAME(DescribeDeviceRequest VAR_DESCRIBEDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDeviceResponseUnmarshaller.Instance; return Invoke<DescribeDeviceResponse>(VAR_DESCRIBEDEVICEREQUEST, VAR_VAR); }
public static Type METHOD_NAME(string VAR_STRING) { return loader.METHOD_NAME(VAR_STRING); }
public virtual CreateParameterGroupResponse METHOD_NAME(CreateParameterGroupRequest VAR_CREATEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateParameterGroupResponse>(VAR_CREATEPARAMETERGROUPREQUEST, VAR_VAR); }
public FieldsQuery(SrndQuery VAR_SRNDQUERY, string VAR_STRING, char VAR_CHAR) { this.VAR_SRNDQUERY = VAR_SRNDQUERY; var VAR_VAR = new List<string>(); VAR_VAR.Add(VAR_STRING); this.fieldNames = VAR_VAR; this.VAR_CHAR = VAR_CHAR; }
public virtual DescribeReservedCacheNodesOfferingsResponse METHOD_NAME(DescribeReservedCacheNodesOfferingsRequest VAR_DESCRIBERESERVEDCACHENODESOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedCacheNodesOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedCacheNodesOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeReservedCacheNodesOfferingsResponse>(VAR_DESCRIBERESERVEDCACHENODESOFFERINGSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(Constants.TypeString(Type)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(Name); VAR_STRINGBUILDER.Append(LITERAL_CHAR); AppendCoreFlags(VAR_STRINGBUILDER); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual UpdateTableReplicaAutoScalingResponse METHOD_NAME(UpdateTableReplicaAutoScalingRequest VAR_UPDATETABLEREPLICAAUTOSCALINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTableReplicaAutoScalingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTableReplicaAutoScalingResponseUnmarshaller.Instance; return Invoke<UpdateTableReplicaAutoScalingResponse>(VAR_UPDATETABLEREPLICAAUTOSCALINGREQUEST, VAR_VAR); }
public virtual ValidateConfigurationResponse METHOD_NAME(ValidateConfigurationRequest VAR_VALIDATECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ValidateConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ValidateConfigurationResponseUnmarshaller.Instance; return Invoke<ValidateConfigurationResponse>(VAR_VALIDATECONFIGURATIONREQUEST, VAR_VAR); }
public virtual ModifyReservedInstancesResponse METHOD_NAME(ModifyReservedInstancesRequest VAR_MODIFYRESERVEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyReservedInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyReservedInstancesResponseUnmarshaller.Instance; return Invoke<ModifyReservedInstancesResponse>(VAR_MODIFYRESERVEDINSTANCESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ICharStream VAR_ICHARSTREAM, int VAR_INT) { METHOD_NAME(VAR_ICHARSTREAM); SwitchTo(VAR_INT); }
public virtual DeleteIdentityResponse METHOD_NAME(DeleteIdentityRequest VAR_DELETEIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIdentityResponseUnmarshaller.Instance; return Invoke<DeleteIdentityResponse>(VAR_DELETEIDENTITYREQUEST, VAR_VAR); }
public PackConfig(Config VAR_CONFIG) { FromConfig(VAR_CONFIG); }
public java.lang.StringBuilder METHOD_NAME(char VAR_CHAR) { append0(VAR_CHAR); return this; }
public virtual DeleteBrokerResponse METHOD_NAME(DeleteBrokerRequest VAR_DELETEBROKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBrokerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBrokerResponseUnmarshaller.Instance; return Invoke<DeleteBrokerResponse>(VAR_DELETEBROKERREQUEST, VAR_VAR); }
public static string METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { return METHOD_NAME(VAR_STRINGBUILDER.ToString(VAR_INT, VAR_STRINGBUILDER.Length - VAR_INT), LITERAL_INT); }
public virtual Explanation METHOD_NAME(CollectionStatistics VAR_COLLECTIONSTATISTICS, TermStatistics VAR_TERMSTATISTICS) { long VAR_LONG = VAR_TERMSTATISTICS.DocFreq; long VAR_LONG = VAR_COLLECTIONSTATISTICS.MaxDoc; float VAR_FLOAT = Idf(VAR_LONG, VAR_LONG); return new Explanation(VAR_FLOAT, LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_LONG + LITERAL_STRING); }
public override Object METHOD_NAME() { CalcCountRecord VAR_CALCCOUNTRECORD = new CalcCountRecord(); VAR_CALCCOUNTRECORD.field_1_iterations = field_1_iterations; return VAR_CALCCOUNTRECORD; }
public virtual bool METHOD_NAME(IParseTree VAR_IPARSETREE, string VAR_STRING, int VAR_INT) { ParseTreePattern VAR_PARSETREEPATTERN = Compile(VAR_STRING, VAR_INT); return METHOD_NAME(VAR_IPARSETREE, VAR_PARSETREEPATTERN); }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { return METHOD_NAME(VAR_CELLRANGEADDRESS[], VAR_HSSFCONDITIONALFORMATTINGRULE == LITERAL_NULL ? LITERAL_NULL : new HSSFConditionalFormattingRule[] { VAR_HSSFCONDITIONALFORMATTINGRULE }); }
public virtual long METHOD_NAME(char[] VAR_CHAR[]) { long VAR_LONG = LITERAL_INT; long VAR_LONG = unchecked((long)LITERAL_INT); for (int i = LITERAL_INT; i < VAR_CHAR[].Length; i++) { char VAR_CHAR = VAR_CHAR[][i]; VAR_LONG = (VAR_LONG ^ (VAR_CHAR & LITERAL_INT)) * VAR_LONG; VAR_LONG = (VAR_LONG ^ (VAR_CHAR >> LITERAL_INT)) * VAR_LONG; } return VAR_LONG; }
public virtual PutAnomalyDetectorResponse METHOD_NAME(PutAnomalyDetectorRequest VAR_PUTANOMALYDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAnomalyDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAnomalyDetectorResponseUnmarshaller.Instance; return Invoke<PutAnomalyDetectorResponse>(VAR_PUTANOMALYDETECTORREQUEST, VAR_VAR); }
public virtual AssociateTransitGatewayRouteTableResponse METHOD_NAME(AssociateTransitGatewayRouteTableRequest VAR_ASSOCIATETRANSITGATEWAYROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateTransitGatewayRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateTransitGatewayRouteTableResponseUnmarshaller.Instance; return Invoke<AssociateTransitGatewayRouteTableResponse>(VAR_ASSOCIATETRANSITGATEWAYROUTETABLEREQUEST, VAR_VAR); }
public IEnumerable<string> METHOD_NAME(string VAR_STRING) { return EC2Metadata.GetItems(string.Format(CultureInfo.InvariantCulture, LITERAL_STRING, _path, VAR_STRING)); }
public void METHOD_NAME() { arriving = LITERAL_NULL; leaving = LITERAL_NULL; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_recalc); }
public void METHOD_NAME(FormulaCellCacheEntry VAR_FORMULACELLCACHEENTRY) { _consumingCells.Add(VAR_FORMULACELLCACHEENTRY); }
public DeleteUserRequest(string VAR_STRING) { _userName = VAR_STRING; }
public SingleValueVector(ValueEval VAR_VALUEEVAL) { _value = VAR_VALUEEVAL; }
public virtual DeleteMethodResponse METHOD_NAME(DeleteMethodRequest VAR_DELETEMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMethodResponseUnmarshaller.Instance; return Invoke<DeleteMethodResponse>(VAR_DELETEMETHODREQUEST, VAR_VAR); }
public static CompareResult METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { return LessThan; } if (VAR_INT > LITERAL_INT) { return GreaterThan; } return Equal; }
public virtual CreatePresetResponse METHOD_NAME(CreatePresetRequest VAR_CREATEPRESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePresetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePresetResponseUnmarshaller.Instance; return Invoke<CreatePresetResponse>(VAR_CREATEPRESETREQUEST, VAR_VAR); }
public S3Origin(string VAR_STRING) { _domainName = VAR_STRING; }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { HTMLStripCharFilter VAR_HTMLSTRIPCHARFILTER; if (LITERAL_NULL == escapedTags) { VAR_HTMLSTRIPCHARFILTER = new HTMLStripCharFilter(VAR_TEXTREADER); } else { VAR_HTMLSTRIPCHARFILTER = new HTMLStripCharFilter(VAR_TEXTREADER, escapedTags); } return VAR_HTMLSTRIPCHARFILTER; }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { m_current = VAR_CHAR[]; m_cursor = LITERAL_INT; m_limit = VAR_INT; m_limit_backward = LITERAL_INT; m_bra = m_cursor; m_ket = m_limit; }
public virtual DisableTransitGatewayRouteTablePropagationResponse METHOD_NAME(DisableTransitGatewayRouteTablePropagationRequest VAR_DISABLETRANSITGATEWAYROUTETABLEPROPAGATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableTransitGatewayRouteTablePropagationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableTransitGatewayRouteTablePropagationResponseUnmarshaller.Instance; return Invoke<DisableTransitGatewayRouteTablePropagationResponse>(VAR_DISABLETRANSITGATEWAYROUTETABLEPROPAGATIONREQUEST, VAR_VAR); }
public virtual UpdateTagsForDomainResponse METHOD_NAME(UpdateTagsForDomainRequest VAR_UPDATETAGSFORDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTagsForDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTagsForDomainResponseUnmarshaller.Instance; return Invoke<UpdateTagsForDomainResponse>(VAR_UPDATETAGSFORDOMAINREQUEST, VAR_VAR); }
public override ObjectId METHOD_NAME() { return peeledObjectId; }
public LexerActionExecutor(ILexerAction[] VAR_ILEXERACTION[]) { this.VAR_ILEXERACTION[] = VAR_ILEXERACTION[]; int VAR_INT = MurmurHash.Initialize(); foreach (ILexerAction lexerAction in VAR_ILEXERACTION[]) { VAR_INT = MurmurHash.Update(VAR_INT, lexerAction); } this.hashCode = MurmurHash.Finish(VAR_INT, VAR_ILEXERACTION[].Length); }
public virtual SetAlarmStateResponse METHOD_NAME(SetAlarmStateRequest VAR_SETALARMSTATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetAlarmStateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetAlarmStateResponseUnmarshaller.Instance; return Invoke<SetAlarmStateResponse>(VAR_SETALARMSTATEREQUEST, VAR_VAR); }
public FilePath METHOD_NAME() { return configFile; }
public virtual DescribeUsersResponse METHOD_NAME(DescribeUsersRequest VAR_DESCRIBEUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUsersResponseUnmarshaller.Instance; return Invoke<DescribeUsersResponse>(VAR_DESCRIBEUSERSREQUEST, VAR_VAR); }
public PagedMutable(long VAR_LONG, int VAR_INT, int VAR_INT, float VAR_FLOAT) : this(size, pageSize, PackedInt32s.FastestFormatAndBits(pageSize, bitsPerValue, acceptableOverheadRatio)) { FillPages(); }
public CFHeaderRecord() { field_4_cell_ranges = new CellRangeAddressList(); }
public virtual GetDataSourceResponse METHOD_NAME(GetDataSourceRequest VAR_GETDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDataSourceResponseUnmarshaller.Instance; return Invoke<GetDataSourceResponse>(VAR_GETDATASOURCEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteDouble(field_1_margin); }
public virtual DeleteProfilingGroupResponse METHOD_NAME(DeleteProfilingGroupRequest VAR_DELETEPROFILINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteProfilingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteProfilingGroupResponseUnmarshaller.Instance; return Invoke<DeleteProfilingGroupResponse>(VAR_DELETEPROFILINGGROUPREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT, bool VAR_BOOL) { this.mId = VAR_INT; this.mProgress = VAR_INT; this.mFromUser = VAR_BOOL; }
public static FuncVarPtg METHOD_NAME(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { return METHOD_NAME(VAR_ILITTLEENDIANINPUT.ReadByte(), VAR_ILITTLEENDIANINPUT.ReadShort()); }
public virtual CreateAttendeeResponse METHOD_NAME(CreateAttendeeRequest VAR_CREATEATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAttendeeResponseUnmarshaller.Instance; return Invoke<CreateAttendeeResponse>(VAR_CREATEATTENDEEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_option_flag).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_ixals).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_4_name).Append(LITERAL_STRING); if (field_5_name_definition != LITERAL_NULL) { Ptg[] VAR_PTG[] = field_5_name_definition.Tokens; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { Ptg VAR_PTG = VAR_PTG[][i]; VAR_STRINGBUILDER.Append(VAR_PTG.METHOD_NAME()).Append(VAR_PTG.RVAType).Append(LITERAL_STRING); } } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeDBClusterParameterGroupsResponse METHOD_NAME(DescribeDBClusterParameterGroupsRequest VAR_DESCRIBEDBCLUSTERPARAMETERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBClusterParameterGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBClusterParameterGroupsResponseUnmarshaller.Instance; return Invoke<DescribeDBClusterParameterGroupsResponse>(VAR_DESCRIBEDBCLUSTERPARAMETERGROUPSREQUEST, VAR_VAR); }
public PropertyTable(HeaderBlock VAR_HEADERBLOCK) : base(headerBlock) { _bigBigBlockSize = VAR_HEADERBLOCK.BigBlockSize; _blocks = LITERAL_NULL; }
public int METHOD_NAME(String VAR_STRING) { for (int i = LITERAL_INT; i < _externalNameRecords.Length; i++) { if (_externalNameRecords[i].Text.Equals(VAR_STRING, StringComparison.OrdinalIgnoreCase)) { return i; } } return -LITERAL_INT; }
public virtual AbortVaultLockResponse METHOD_NAME(AbortVaultLockRequest VAR_ABORTVAULTLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AbortVaultLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AbortVaultLockResponseUnmarshaller.Instance; return Invoke<AbortVaultLockResponse>(VAR_ABORTVAULTLOCKREQUEST, VAR_VAR); }
public virtual CreateBatchPredictionResponse METHOD_NAME(CreateBatchPredictionRequest VAR_CREATEBATCHPREDICTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBatchPredictionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBatchPredictionResponseUnmarshaller.Instance; return Invoke<CreateBatchPredictionResponse>(VAR_CREATEBATCHPREDICTIONREQUEST, VAR_VAR); }
public virtual ListHostedZonesByNameResponse METHOD_NAME(ListHostedZonesByNameRequest VAR_LISTHOSTEDZONESBYNAMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHostedZonesByNameRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHostedZonesByNameResponseUnmarshaller.Instance; return Invoke<ListHostedZonesByNameResponse>(VAR_LISTHOSTEDZONESBYNAMEREQUEST, VAR_VAR); }
public PersonIdent METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.Author(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return LITERAL_NULL; } return RawParseUtils.ParsePersonIdent(VAR_BYTE[], VAR_INT); }
public virtual RecordLifecycleActionHeartbeatResponse METHOD_NAME(RecordLifecycleActionHeartbeatRequest VAR_RECORDLIFECYCLEACTIONHEARTBEATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RecordLifecycleActionHeartbeatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RecordLifecycleActionHeartbeatResponseUnmarshaller.Instance; return Invoke<RecordLifecycleActionHeartbeatResponse>(VAR_RECORDLIFECYCLEACTIONHEARTBEATREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (logger != LITERAL_NULL) { logger.METHOD_NAME(); } }
public virtual GetLoadBalancerTlsCertificatesResponse METHOD_NAME(GetLoadBalancerTlsCertificatesRequest VAR_GETLOADBALANCERTLSCERTIFICATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLoadBalancerTlsCertificatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLoadBalancerTlsCertificatesResponseUnmarshaller.Instance; return Invoke<GetLoadBalancerTlsCertificatesResponse>(VAR_GETLOADBALANCERTLSCERTIFICATESREQUEST, VAR_VAR); }
public ExtSSTRecord METHOD_NAME(int VAR_INT) { if (bucketAbsoluteOffsets == LITERAL_NULL || bucketAbsoluteOffsets == LITERAL_NULL) throw new InvalidOperationException(LITERAL_STRING); ExtSSTRecord VAR_EXTSSTRECORD = new ExtSSTRecord(); VAR_EXTSSTRECORD.NumStringsPerBucket = ((short)LITERAL_INT); int[] VAR_INT[] = (int[])bucketAbsoluteOffsets.Clone(); int[] VAR_INT[] = (int[])bucketRelativeOffsets.Clone(); for (int i = LITERAL_INT; i < VAR_INT[].Length; i++) VAR_INT[][i] += VAR_INT; VAR_EXTSSTRECORD.SetBucketOffsets(VAR_INT[], VAR_INT[]); return VAR_EXTSSTRECORD; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); }
public virtual ListMultipartUploadsResponse METHOD_NAME(ListMultipartUploadsRequest VAR_LISTMULTIPARTUPLOADSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMultipartUploadsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMultipartUploadsResponseUnmarshaller.Instance; return Invoke<ListMultipartUploadsResponse>(VAR_LISTMULTIPARTUPLOADSREQUEST, VAR_VAR); }
public override BytesRef METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { Debug.Assert(VAR_BYTESREF != LITERAL_NULL); Debug.Assert(VAR_BYTESREF != LITERAL_NULL); if (VAR_BYTESREF == NO_OUTPUT) { return VAR_BYTESREF; } else if (VAR_BYTESREF == NO_OUTPUT) { return VAR_BYTESREF; } else { Debug.Assert(VAR_BYTESREF.Length > LITERAL_INT); Debug.Assert(VAR_BYTESREF.Length > LITERAL_INT); BytesRef VAR_BYTESREF = new BytesRef(VAR_BYTESREF.Length + VAR_BYTESREF.Length); Array.Copy(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Bytes, LITERAL_INT, VAR_BYTESREF.Length); Array.Copy(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Bytes, VAR_BYTESREF.Length, VAR_BYTESREF.Length); VAR_BYTESREF.Length = VAR_BYTESREF.Length + VAR_BYTESREF.Length; return VAR_BYTESREF; } }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); doWait = bool.Parse(VAR_STRING); }
public RunBackgroundTask(PerfTask VAR_PERFTASK, bool VAR_BOOL) { this.VAR_PERFTASK = VAR_PERFTASK; this.VAR_BOOL = VAR_BOOL; }
public override Object METHOD_NAME() { GridsetRecord VAR_GRIDSETRECORD = new GridsetRecord(); VAR_GRIDSETRECORD.field_1_gridset_flag = field_1_gridset_flag; return VAR_GRIDSETRECORD; }
public BoundSheetRecord(String VAR_STRING) { field_2_option_flags = LITERAL_INT; this.Sheetname = VAR_STRING; }
public MFADevice(string VAR_STRING, string VAR_STRING, DateTime VAR_DATETIME) { _userName = VAR_STRING; _serialNumber = VAR_STRING; _enableDate = VAR_DATETIME; }
public virtual DescribeStreamSummaryResponse METHOD_NAME(DescribeStreamSummaryRequest VAR_DESCRIBESTREAMSUMMARYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStreamSummaryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStreamSummaryResponseUnmarshaller.Instance; return Invoke<DescribeStreamSummaryResponse>(VAR_DESCRIBESTREAMSUMMARYREQUEST, VAR_VAR); }
public virtual ListClusterJobsResponse METHOD_NAME(ListClusterJobsRequest VAR_LISTCLUSTERJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListClusterJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListClusterJobsResponseUnmarshaller.Instance; return Invoke<ListClusterJobsResponse>(VAR_LISTCLUSTERJOBSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(string VAR_STRING) { long VAR_LONG = long.Parse(VAR_STRING, NumberStyles.HexNumber); long VAR_LONG = commit.Generation; return VAR_LONG < VAR_LONG ? -LITERAL_INT : (VAR_LONG > VAR_LONG ? LITERAL_INT : LITERAL_INT); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); string VAR_STRING = LITERAL_STRING; foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX)); VAR_STRING = LITERAL_STRING; } return LITERAL_STRING + VAR_STRINGBUILDER.ToString() + LITERAL_STRING; }
public virtual float METHOD_NAME() { throw new System.NotImplementedException(); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { bool VAR_BOOL = false; IEvaluationCell VAR_IEVALUATIONCELL = Sheet.GetCell(VAR_INT, VAR_INT); if (VAR_IEVALUATIONCELL != LITERAL_NULL && VAR_IEVALUATIONCELL.CellType == CellType.Formula) { IEvaluationWorkbook VAR_IEVALUATIONWORKBOOK = _bookEvaluator.Workbook; foreach (Ptg ptg in VAR_IEVALUATIONWORKBOOK.GetFormulaTokens(VAR_IEVALUATIONCELL)) { if (ptg is FuncVarPtg) { FuncVarPtg VAR_FUNCVARPTG = (FuncVarPtg)ptg; if (LITERAL_STRING.Equals(VAR_FUNCVARPTG.Name)) { VAR_BOOL = true; break; } } } } return VAR_BOOL; }
public virtual CreateMonitoringScheduleResponse METHOD_NAME(CreateMonitoringScheduleRequest VAR_CREATEMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<CreateMonitoringScheduleResponse>(VAR_CREATEMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new CzechStemFilter(VAR_TOKENSTREAM); }
public virtual GetSpeechSynthesisTaskResponse METHOD_NAME(GetSpeechSynthesisTaskRequest VAR_GETSPEECHSYNTHESISTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSpeechSynthesisTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSpeechSynthesisTaskResponseUnmarshaller.Instance; return Invoke<GetSpeechSynthesisTaskResponse>(VAR_GETSPEECHSYNTHESISTASKREQUEST, VAR_VAR); }
public virtual FuzzySet METHOD_NAME(FieldInfo VAR_FIELDINFO, FuzzySet VAR_FUZZYSET) { const float VAR_FLOAT = LITERAL_FLOAT; return VAR_FUZZYSET.METHOD_NAME(VAR_FLOAT); }
public virtual MonitorInstancesResponse METHOD_NAME(MonitorInstancesRequest VAR_MONITORINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = MonitorInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = MonitorInstancesResponseUnmarshaller.Instance; return Invoke<MonitorInstancesResponse>(VAR_MONITORINSTANCESREQUEST, VAR_VAR); }
public virtual ListDocumentClassifiersResponse METHOD_NAME(ListDocumentClassifiersRequest VAR_LISTDOCUMENTCLASSIFIERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDocumentClassifiersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDocumentClassifiersResponseUnmarshaller.Instance; return Invoke<ListDocumentClassifiersResponse>(VAR_LISTDOCUMENTCLASSIFIERSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < fields.Length; i++) { VAR_STRINGBUILDER.Append(fields[i].METHOD_NAME()); if ((i + LITERAL_INT) < fields.Length) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_axisType); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_2_reserved1); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_3_reserved2); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_reserved3); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_5_reserved4); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | (VAR_INT << LITERAL_INT) | VAR_INT; } }
public virtual NGit.Api.StashDropCommand METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(); } stashRefEntry = VAR_INT; return this; }
public virtual CreateHITWithHITTypeResponse METHOD_NAME(CreateHITWithHITTypeRequest VAR_CREATEHITWITHHITTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHITWithHITTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHITWithHITTypeResponseUnmarshaller.Instance; return Invoke<CreateHITWithHITTypeResponse>(VAR_CREATEHITWITHHITTYPEREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, Ptg VAR_PTG) { if (_ptgs[VAR_INT] != LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } _ptgs[VAR_INT] = VAR_PTG; }
public Area3DPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_index_extern_sheet = VAR_ILITTLEENDIANINPUT.ReadShort(); ReadCoordinates(VAR_ILITTLEENDIANINPUT); }
public virtual UpdateNotebookInstanceResponse METHOD_NAME(UpdateNotebookInstanceRequest VAR_UPDATENOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNotebookInstanceResponseUnmarshaller.Instance; return Invoke<UpdateNotebookInstanceResponse>(VAR_UPDATENOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public Record METHOD_NAME(short VAR_SHORT) { for (IEnumerator iterator = records.GetEnumerator(); iterator.MoveNext();) { Record VAR_RECORD = (Record)iterator.Current; if (VAR_RECORD.Sid == VAR_SHORT) { return VAR_RECORD; } } return LITERAL_NULL; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { FromHexString(VAR_BYTE[], VAR_INT); }
public virtual AttachInstancesResponse METHOD_NAME(AttachInstancesRequest VAR_ATTACHINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachInstancesResponseUnmarshaller.Instance; return Invoke<AttachInstancesResponse>(VAR_ATTACHINSTANCESREQUEST, VAR_VAR); }
public virtual NotifyWorkersResponse METHOD_NAME(NotifyWorkersRequest VAR_NOTIFYWORKERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = NotifyWorkersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = NotifyWorkersResponseUnmarshaller.Instance; return Invoke<NotifyWorkersResponse>(VAR_NOTIFYWORKERSREQUEST, VAR_VAR); }
public virtual CommitCommand METHOD_NAME() { return new CommitCommand(repo); }
public override object METHOD_NAME() { BufferedIndexInput VAR_BUFFEREDINDEXINPUT = (BufferedIndexInput)base.METHOD_NAME(); VAR_BUFFEREDINDEXINPUT.m_buffer = LITERAL_NULL; VAR_BUFFEREDINDEXINPUT.bufferLength = LITERAL_INT; VAR_BUFFEREDINDEXINPUT.bufferPosition = LITERAL_INT; VAR_BUFFEREDINDEXINPUT.bufferStart = GetFilePointer(); return VAR_BUFFEREDINDEXINPUT; }
public bool METHOD_NAME(String VAR_STRING) { return VAR_STRING != LITERAL_NULL && _byname.ContainsKey(VAR_STRING); }
public MorfologikFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = LITERAL_STRING; string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, VAR_STRING); if (!string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING + LITERAL_STRING + DICTIONARY_ATTRIBUTE + LITERAL_STRING); } resourceName = Get(VAR_IDICTIONARY<STRING, STRING>, DICTIONARY_ATTRIBUTE); if (VAR_IDICTIONARY<STRING, STRING>.Count != LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static DVConstraint METHOD_NAME(int VAR_INT, int VAR_INT, String VAR_STRING, String VAR_STRING) { switch (VAR_INT) { case ValidationType.ANY: if (VAR_STRING != LITERAL_NULL || VAR_STRING != LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } break; case ValidationType.DECIMAL: case ValidationType.INTEGER: case ValidationType.TEXT_LENGTH: if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } OperatorType.ValidateSecondArg(VAR_INT, VAR_STRING); break; default: throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertNumber(VAR_STRING) : double.NaN; String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertNumber(VAR_STRING) : double.NaN; return new DVConstraint(VAR_INT, VAR_INT, VAR_STRING, VAR_STRING, VAR_DOUBLE, VAR_DOUBLE, LITERAL_NULL); }
public virtual UpdateUsageResponse METHOD_NAME(UpdateUsageRequest VAR_UPDATEUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUsageResponseUnmarshaller.Instance; return Invoke<UpdateUsageResponse>(VAR_UPDATEUSAGEREQUEST, VAR_VAR); }
public virtual UpdateEvaluationResponse METHOD_NAME(UpdateEvaluationRequest VAR_UPDATEEVALUATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEvaluationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEvaluationResponseUnmarshaller.Instance; return Invoke<UpdateEvaluationResponse>(VAR_UPDATEEVALUATIONREQUEST, VAR_VAR); }
public ProtectRecord(bool VAR_BOOL) : this(LITERAL_INT) { this.Protect = (VAR_BOOL); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(recordType); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.Write(reserved); }
public virtual GetDocumentPathResponse METHOD_NAME(GetDocumentPathRequest VAR_GETDOCUMENTPATHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentPathRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentPathResponseUnmarshaller.Instance; return Invoke<GetDocumentPathResponse>(VAR_GETDOCUMENTPATHREQUEST, VAR_VAR); }
public virtual CreateTransitGatewayVpcAttachmentResponse METHOD_NAME(CreateTransitGatewayVpcAttachmentRequest VAR_CREATETRANSITGATEWAYVPCATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayVpcAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayVpcAttachmentResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayVpcAttachmentResponse>(VAR_CREATETRANSITGATEWAYVPCATTACHMENTREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return true; }
public virtual DisassociateSubnetCidrBlockResponse METHOD_NAME(DisassociateSubnetCidrBlockRequest VAR_DISASSOCIATESUBNETCIDRBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateSubnetCidrBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateSubnetCidrBlockResponseUnmarshaller.Instance; return Invoke<DisassociateSubnetCidrBlockResponse>(VAR_DISASSOCIATESUBNETCIDRBLOCKREQUEST, VAR_VAR); }
public static byte[] METHOD_NAME(string VAR_STRING) { ByteBuffer VAR_BYTEBUFFER = NGit.Constants.CHARSET.METHOD_NAME(VAR_STRING); int VAR_INT = VAR_BYTEBUFFER.Limit(); if (VAR_BYTEBUFFER.HasArray() && VAR_BYTEBUFFER.ArrayOffset() == LITERAL_INT) { byte[] VAR_BYTE[] = ((byte[])VAR_BYTEBUFFER.Array()); if (VAR_BYTE[].Length == VAR_INT) { return VAR_BYTE[]; } } byte[] VAR_BYTE[] = new byte[VAR_INT]; VAR_BYTEBUFFER.Get(VAR_BYTE[]); return VAR_BYTE[]; }
public virtual DescribePlacementGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribePlacementGroupsRequest()); }
public virtual UpdateTrialResponse METHOD_NAME(UpdateTrialRequest VAR_UPDATETRIALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTrialRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTrialResponseUnmarshaller.Instance; return Invoke<UpdateTrialResponse>(VAR_UPDATETRIALREQUEST, VAR_VAR); }
public virtual DeleteTransitGatewayPeeringAttachmentResponse METHOD_NAME(DeleteTransitGatewayPeeringAttachmentRequest VAR_DELETETRANSITGATEWAYPEERINGATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayPeeringAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayPeeringAttachmentResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayPeeringAttachmentResponse>(VAR_DELETETRANSITGATEWAYPEERINGATTACHMENTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { try { GetCachedBytes(); return false; } catch (LargeObjectException) { return true; } }
public virtual java.util.Collection<V> METHOD_NAME() { lock (this) { java.util.Collection<V> VAR_JAVA.UTIL.COLLECTION<V> = _values; return (VAR_JAVA.UTIL.COLLECTION<V> != LITERAL_NULL) ? VAR_JAVA.UTIL.COLLECTION<V> : (_values = new java.util.Hashtable<K, V>.Values(this)); } }
public EscherComplexProperty(short VAR_SHORT, bool VAR_BOOL, byte[] VAR_BYTE[]) : base(propertyNumber, true, isBlipId) { this._complexData = VAR_BYTE[]; }
public virtual DeleteMatchmakingRuleSetResponse METHOD_NAME(DeleteMatchmakingRuleSetRequest VAR_DELETEMATCHMAKINGRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMatchmakingRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<DeleteMatchmakingRuleSetResponse>(VAR_DELETEMATCHMAKINGRULESETREQUEST, VAR_VAR); }
public virtual UnassignIpv6AddressesResponse METHOD_NAME(UnassignIpv6AddressesRequest VAR_UNASSIGNIPV6ADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnassignIpv6AddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnassignIpv6AddressesResponseUnmarshaller.Instance; return Invoke<UnassignIpv6AddressesResponse>(VAR_UNASSIGNIPV6ADDRESSESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if ((VAR_OBJECT is FacetResult) == false) { return false; } FacetResult VAR_FACETRESULT = (FacetResult)VAR_OBJECT; return Value.METHOD_NAME(VAR_FACETRESULT.Value) && ChildCount == VAR_FACETRESULT.ChildCount && Arrays.METHOD_NAME(LabelValues, VAR_FACETRESULT.LabelValues); }
public ConfirmSubscriptionRequest(string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _token = VAR_STRING; }
public override Ref METHOD_NAME(string VAR_STRING, Ref VAR_REF) { string VAR_STRING = ToRefName(VAR_STRING); if (!VAR_STRING.Equals(VAR_REF.GetName())) { throw new ArgumentException(); } if (!resolved.IsEmpty()) { foreach (Ref @ref in resolved) { loose = loose.METHOD_NAME(@ref); } resolved = RefList.EmptyList(); } int VAR_INT = loose.Find(VAR_STRING); if (LITERAL_INT <= VAR_INT) { Ref VAR_REF = loose.Get(VAR_STRING); loose = loose.Set(VAR_INT, VAR_REF); return VAR_REF; } else { Ref VAR_REF = Get(VAR_STRING); loose = loose.Add(VAR_INT, VAR_REF); sizeIsValid = false; return VAR_REF; } }
public virtual RespondActivityTaskCanceledResponse METHOD_NAME(RespondActivityTaskCanceledRequest VAR_RESPONDACTIVITYTASKCANCELEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RespondActivityTaskCanceledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RespondActivityTaskCanceledResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCanceledResponse>(VAR_RESPONDACTIVITYTASKCANCELEDREQUEST, VAR_VAR); }
public DocumentInputStream METHOD_NAME(Entry VAR_ENTRY) { if (!VAR_ENTRY.IsDocumentEntry) { throw new IOException(LITERAL_STRING + VAR_ENTRY.Name + LITERAL_STRING); } DocumentEntry VAR_DOCUMENTENTRY = (DocumentEntry)VAR_ENTRY; return new DocumentInputStream(VAR_DOCUMENTENTRY); }
public virtual DescribeInstanceStatusResponse METHOD_NAME() { return METHOD_NAME(new DescribeInstanceStatusRequest()); }
public virtual bool METHOD_NAME() { return true; }
public virtual BinaryHunk METHOD_NAME() { return reverseBinaryHunk; }
public static java.nio.charset.CoderResult METHOD_NAME(int VAR_INT) { lock (typeof(CoderResult)) { if (VAR_INT > LITERAL_INT) { int VAR_INT = Sharpen.Util.IntValueOf(VAR_INT); lock (_malformedErrors) { java.nio.charset.CoderResult VAR_JAVA.NIO.CHARSET.CODERRESULT = _malformedErrors.get(VAR_INT); if (VAR_JAVA.NIO.CHARSET.CODERRESULT == LITERAL_NULL) { VAR_JAVA.NIO.CHARSET.CODERRESULT = new java.nio.charset.CoderResult(TYPE_MALFORMED_INPUT, VAR_INT); _malformedErrors.put(VAR_INT, VAR_JAVA.NIO.CHARSET.CODERRESULT); } return VAR_JAVA.NIO.CHARSET.CODERRESULT; } } throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } }
public virtual java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_BYTE[][i] = METHOD_NAME(); } } return this; }
public ObjectId METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT) { return METHOD_NAME((long)VAR_INT); } int VAR_INT = (int)(((uint)VAR_INT) >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; return METHOD_NAME(((long)VAR_INT) << LITERAL_INT | VAR_INT); }
public virtual UpdateRoomMembershipResponse METHOD_NAME(UpdateRoomMembershipRequest VAR_UPDATEROOMMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRoomMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRoomMembershipResponseUnmarshaller.Instance; return Invoke<UpdateRoomMembershipResponse>(VAR_UPDATEROOMMEMBERSHIPREQUEST, VAR_VAR); }
public override void METHOD_NAME(StringBuilder VAR_STRINGBUILDER, Object VAR_OBJECT) { double VAR_DOUBLE = ((double)VAR_OBJECT); if (VAR_DOUBLE < LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_DOUBLE = -VAR_DOUBLE; } long[] VAR_LONG[] = new long[specs.Count]; for (int i = LITERAL_INT; i < specs.Count; i++) { VAR_LONG[][i] = specs[(i)].ValueFor(VAR_DOUBLE); } string[] VAR_STRING[] = printfFmt.Split(LITERAL_STRING.ToCharArray()); string VAR_STRING = string.Empty; int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; Regex VAR_REGEX = new Regex(LITERAL_STRING); foreach (string fmt in VAR_STRING[]) { VAR_INT += fmt.Length; if (VAR_INT < printfFmt.Length) { VAR_STRING = printfFmt[VAR_INT].ToString(); VAR_INT++; } elsesplit = string.Empty; if (VAR_REGEX.IsMatch(fmt)) { VAR_STRINGBUILDER.Append(VAR_LONG[][VAR_INT].ToString(fmt)).Append(VAR_STRING); VAR_INT++; } else { VAR_STRINGBUILDER.Append(fmt).Append(VAR_STRING); } } }
public void METHOD_NAME(double VAR_DOUBLE) { WriteContinueIfRequired(LITERAL_INT); _ulrOutput.METHOD_NAME(VAR_DOUBLE); }
public virtual CancelExportTaskResponse METHOD_NAME(CancelExportTaskRequest VAR_CANCELEXPORTTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelExportTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelExportTaskResponseUnmarshaller.Instance; return Invoke<CancelExportTaskResponse>(VAR_CANCELEXPORTTASKREQUEST, VAR_VAR); }
public override string METHOD_NAME() { if (Length == LITERAL_INT) { return LITERAL_STRING; } string[] VAR_STRING[] = new string[Length]; Array.Copy(Components, LITERAL_INT, VAR_STRING[], LITERAL_INT, Length); return LITERAL_STRING + Arrays.METHOD_NAME(VAR_STRING[]); }
public virtual DescribeEventTrackerResponse METHOD_NAME(DescribeEventTrackerRequest VAR_DESCRIBEEVENTTRACKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventTrackerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventTrackerResponseUnmarshaller.Instance; return Invoke<DescribeEventTrackerResponse>(VAR_DESCRIBEEVENTTRACKERREQUEST, VAR_VAR); }
public virtual UpdateJourneyResponse METHOD_NAME(UpdateJourneyRequest VAR_UPDATEJOURNEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateJourneyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateJourneyResponseUnmarshaller.Instance; return Invoke<UpdateJourneyResponse>(VAR_UPDATEJOURNEYREQUEST, VAR_VAR); }
public virtual RemoveTagsFromVaultResponse METHOD_NAME(RemoveTagsFromVaultRequest VAR_REMOVETAGSFROMVAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTagsFromVaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTagsFromVaultResponseUnmarshaller.Instance; return Invoke<RemoveTagsFromVaultResponse>(VAR_REMOVETAGSFROMVAULTREQUEST, VAR_VAR); }
public virtual NGit.Api.RevertCommand METHOD_NAME(Ref VAR_REF) { CheckCallable(); commits.AddItem(VAR_REF); return this; }
public virtual DeleteFargateProfileResponse METHOD_NAME(DeleteFargateProfileRequest VAR_DELETEFARGATEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFargateProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFargateProfileResponseUnmarshaller.Instance; return Invoke<DeleteFargateProfileResponse>(VAR_DELETEFARGATEPROFILEREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { switch (_code) { case NONE: case EQ: return VAR_INT == LITERAL_INT; case NE: return VAR_INT != LITERAL_INT; case LT: return VAR_INT < LITERAL_INT; case LE: return VAR_INT <= LITERAL_INT; case GT: return VAR_INT > LITERAL_INT; case GE: return VAR_INT >= LITERAL_INT; } throw new Exception(LITERAL_STRING + _representation + LITERAL_STRING); }
public SeriesRecord METHOD_NAME() { return series; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListBotsResponse METHOD_NAME(ListBotsRequest VAR_LISTBOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBotsResponseUnmarshaller.Instance; return Invoke<ListBotsResponse>(VAR_LISTBOTSREQUEST, VAR_VAR); }
public int METHOD_NAME() { return port; }
public virtual void METHOD_NAME(long VAR_LONG) { throw new System.NotImplementedException(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { IMatchPredicate VAR_IMATCHPREDICATE = CreateCriteriaPredicate(VAR_VALUEEVAL, VAR_INT, VAR_INT); if (VAR_IMATCHPREDICATE == LITERAL_NULL) { return NumberEval.ZERO; } double VAR_DOUBLE = CountMatchingCellsInArea(VAR_VALUEEVAL, VAR_IMATCHPREDICATE); return new NumberEval(VAR_DOUBLE); }
public override bool METHOD_NAME() { return true; }
public virtual DeleteVpcResponse METHOD_NAME(DeleteVpcRequest VAR_DELETEVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcResponseUnmarshaller.Instance; return Invoke<DeleteVpcResponse>(VAR_DELETEVPCREQUEST, VAR_VAR); }
public virtual VoteOnProposalResponse METHOD_NAME(VoteOnProposalRequest VAR_VOTEONPROPOSALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = VoteOnProposalRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = VoteOnProposalResponseUnmarshaller.Instance; return Invoke<VoteOnProposalResponse>(VAR_VOTEONPROPOSALREQUEST, VAR_VAR); }
public void METHOD_NAME() { costs = ArrayUtil.METHOD_NAME(costs, LITERAL_INT + count); lastRightID = ArrayUtil.METHOD_NAME(lastRightID, LITERAL_INT + count); backPos = ArrayUtil.METHOD_NAME(backPos, LITERAL_INT + count); backIndex = ArrayUtil.METHOD_NAME(backIndex, LITERAL_INT + count); backID = ArrayUtil.METHOD_NAME(backID, LITERAL_INT + count); JapaneseTokenizerType[] VAR_JAPANESETOKENIZERTYPE[] = new JapaneseTokenizerType[backID.Length]; System.Array.Copy(backType, LITERAL_INT, VAR_JAPANESETOKENIZERTYPE[], LITERAL_INT, backType.Length); backType = VAR_JAPANESETOKENIZERTYPE[]; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual float METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual string METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT && VAR_INT <= count) { if (VAR_INT == count) { return string.Empty; } return new string (value, VAR_INT, count - VAR_INT); } throw indexAndLength(VAR_INT); }
public DBCellRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_row_offset = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining; field_2_cell_offsets = new short[VAR_INT / LITERAL_INT]; for (int i = LITERAL_INT; i < field_2_cell_offsets.Length; i++) { field_2_cell_offsets[i] = VAR_RECORDINPUTSTREAM.ReadShort(); } }
public DefaultAcsClient(IClientProfile VAR_ICLIENTPROFILE) : this() { clientProfile = VAR_ICLIENTPROFILE; credentialsProvider = new StaticCredentialsProvider(VAR_ICLIENTPROFILE); clientProfile.SetCredentialsProvider(credentialsProvider); }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { if (VAR_INT > VAR_STRINGBUILDER.Length || VAR_INT < LITERAL_INT) return VAR_INT; int VAR_INT, VAR_INT = m_maxScan; for (VAR_INT = VAR_INT; VAR_INT > LITERAL_INT && VAR_INT > LITERAL_INT; VAR_INT--) { if (m_boundaryChars.Contains(VAR_STRINGBUILDER[VAR_INT - LITERAL_INT])) return VAR_INT; VAR_INT--; } if (VAR_INT == LITERAL_INT) { return LITERAL_INT; } return VAR_INT; }
public BufferedTokenStream(ITokenSource VAR_ITOKENSOURCE) { if (VAR_ITOKENSOURCE == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } this._tokenSource = VAR_ITOKENSOURCE; }
public sealed override bool METHOD_NAME() { return false; }
public TokenMgrError(string VAR_STRING, int VAR_INT) : base(message) { errorCode = VAR_INT; }
public virtual int METHOD_NAME() { int VAR_INT = LITERAL_INT; foreach (Row row in rows) VAR_INT += row.METHOD_NAME(); return VAR_INT; }
public int METHOD_NAME(int VAR_INT) { RowRecord VAR_ROWRECORD = this.GetRow(VAR_INT); int VAR_INT = VAR_ROWRECORD.OutlineLevel; int VAR_INT = VAR_INT; while (this.GetRow(VAR_INT) != LITERAL_NULL) { VAR_ROWRECORD = this.GetRow(VAR_INT); if (VAR_ROWRECORD.OutlineLevel < VAR_INT) return VAR_INT + LITERAL_INT; VAR_INT--; } return VAR_INT + LITERAL_INT; }
public DirCacheBuildIterator(DirCacheBuilder VAR_DIRCACHEBUILDER) : base(dcb.GetDirCache()) { builder = VAR_DIRCACHEBUILDER; }
public virtual DeleteGraphResponse METHOD_NAME(DeleteGraphRequest VAR_DELETEGRAPHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGraphRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGraphResponseUnmarshaller.Instance; return Invoke<DeleteGraphResponse>(VAR_DELETEGRAPHREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, Id, Version, SourceFiles); }
public static DateTime METHOD_NAME(String VAR_STRING) { String[] VAR_STRING[] = VAR_STRING.Split(LITERAL_STRING.ToCharArray()); if (VAR_STRING[].Length != LITERAL_INT) { throw new EvaluationException(ErrorEval.VALUE_INVALID); } String VAR_STRING = VAR_STRING[][LITERAL_INT]; int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); if (VAR_INT > LITERAL_INT) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT); } int VAR_INT; int VAR_INT; int VAR_INT; try { VAR_INT = int.Parse(VAR_STRING[][LITERAL_INT]); VAR_INT = int.Parse(VAR_STRING[][LITERAL_INT]); VAR_INT = int.Parse(VAR_STRING); } catch (FormatException) { throw new EvaluationException(ErrorEval.VALUE_INVALID); } if (VAR_INT < LITERAL_INT || VAR_INT < LITERAL_INT || VAR_INT < LITERAL_INT || (VAR_INT > LITERAL_INT && VAR_INT > LITERAL_INT && VAR_INT > LITERAL_INT)) { throw new EvaluationException(ErrorEval.VALUE_INVALID); } if (VAR_INT >= LITERAL_INT && VAR_INT < LITERAL_INT) { return MakeDate(VAR_INT, VAR_INT, VAR_INT); } if (false) { return MakeDate(VAR_INT, VAR_INT, VAR_INT); } throw new RuntimeException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_MMCLIPCOUNT); }
public virtual void METHOD_NAME(long VAR_LONG) { deltaCacheSize = VAR_LONG; }
public UpdateKnowledgeRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_BYTE[][VAR_INT + i] = bytes[pos--]; } }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueVector VAR_VALUEVECTOR = CreateValueVector(VAR_VALUEEVAL); ValueVector VAR_VALUEVECTOR = CreateValueVector(VAR_VALUEEVAL); int VAR_INT = VAR_VALUEVECTOR.Size; if (VAR_INT == LITERAL_INT || VAR_VALUEVECTOR.Size != VAR_INT) { return ErrorEval.NA; } VAR_DOUBLE = EvaluateInternal(VAR_VALUEVECTOR, VAR_VALUEVECTOR, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } if (Double.IsNaN(VAR_DOUBLE) || Double.IsInfinity(VAR_DOUBLE)) { return ErrorEval.NUM_ERROR; } return new NumberEval(VAR_DOUBLE); }
public void METHOD_NAME(IWorkbook VAR_IWORKBOOK) { _sewb.METHOD_NAME(VAR_IWORKBOOK); }
public sealed override string METHOD_NAME() { return key + LITERAL_STRING + value; }
public virtual DescribeReservedInstancesOfferingsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedInstancesOfferingsRequest()); }
public virtual CreateCacheParameterGroupResponse METHOD_NAME(CreateCacheParameterGroupRequest VAR_CREATECACHEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCacheParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCacheParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateCacheParameterGroupResponse>(VAR_CREATECACHEPARAMETERGROUPREQUEST, VAR_VAR); }
public OldStringRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { sid = VAR_RECORDINPUTSTREAM.Sid; if (VAR_RECORDINPUTSTREAM.Sid == biff2_sid) { field_1_string_len = (short)VAR_RECORDINPUTSTREAM.ReadUByte(); } else { field_1_string_len = VAR_RECORDINPUTSTREAM.ReadShort(); } field_2_bytes = new byte[field_1_string_len]; VAR_RECORDINPUTSTREAM.Read(field_2_bytes, LITERAL_INT, field_1_string_len); }
public virtual long METHOD_NAME() { return (_fst != LITERAL_NULL) ? _fst.GetSizeInBytes() : LITERAL_INT; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = escherGroup.CreateShape(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT + VAR_INT, VAR_INT + VAR_INT)); VAR_HSSFSIMPLESHAPE.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_RECTANGLE); VAR_HSSFSIMPLESHAPE.LineStyle = LineStyle.None; VAR_HSSFSIMPLESHAPE.SetFillColor(foreground.R, foreground.G, foreground.B); VAR_HSSFSIMPLESHAPE.SetLineStyleColor(foreground.R, foreground.G, foreground.B); }
public virtual void METHOD_NAME(OneMerge VAR_ONEMERGE) { Merges.METHOD_NAME(VAR_ONEMERGE); }
public override long METHOD_NAME(FieldInvertState VAR_FIELDINVERTSTATE) { return m_sims[LITERAL_INT].METHOD_NAME(VAR_FIELDINVERTSTATE); }
public PolicyAttribute(string VAR_STRING, string VAR_STRING) { _attributeName = VAR_STRING; _attributeValue = VAR_STRING; }
public string METHOD_NAME() { return publicKeyId; }
public virtual ListJourneysResponse METHOD_NAME(ListJourneysRequest VAR_LISTJOURNEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJourneysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJourneysResponseUnmarshaller.Instance; return Invoke<ListJourneysResponse>(VAR_LISTJOURNEYSREQUEST, VAR_VAR); }
public FormulaCellCacheEntry METHOD_NAME(IEvaluationCell VAR_IEVALUATIONCELL) { FormulaCellCacheEntry VAR_FORMULACELLCACHEENTRY = _formulaCellCache.Get(VAR_IEVALUATIONCELL); if (VAR_FORMULACELLCACHEENTRY == LITERAL_NULL) { VAR_FORMULACELLCACHEENTRY = new FormulaCellCacheEntry(); _formulaCellCache.Put(VAR_IEVALUATIONCELL, VAR_FORMULACELLCACHEENTRY); } return VAR_FORMULACELLCACHEENTRY; }
public virtual StartHumanLoopResponse METHOD_NAME(StartHumanLoopRequest VAR_STARTHUMANLOOPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartHumanLoopRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartHumanLoopResponseUnmarshaller.Instance; return Invoke<StartHumanLoopResponse>(VAR_STARTHUMANLOOPREQUEST, VAR_VAR); }
public virtual IList<RefSpec> METHOD_NAME() { return refSpecs; }
public override void METHOD_NAME(IInputIterator VAR_IINPUTITERATOR) { if (VAR_IINPUTITERATOR.HasPayloads) { throw new ArgumentException(LITERAL_STRING); } if (VAR_IINPUTITERATOR.HasContexts) { throw new ArgumentException(LITERAL_STRING); } count = LITERAL_INT; var VAR_VAR = new BytesRef(); IInputIterator VAR_IINPUTITERATOR = new WFSTInputIterator(this, VAR_IINPUTITERATOR); var VAR_VAR = new Int32sRef(); BytesRef VAR_BYTESREF = LITERAL_NULL; var VAR_VAR = PositiveInt32Outputs.Singleton; var VAR_VAR = new Builder<long?>(FST.INPUT_TYPE.BYTE1, VAR_VAR); while ((VAR_VAR = VAR_IINPUTITERATOR.Next()) != LITERAL_NULL) { long VAR_LONG = VAR_IINPUTITERATOR.Weight; if (VAR_BYTESREF == LITERAL_NULL) { VAR_BYTESREF = new BytesRef(); } else if (VAR_VAR.Equals(VAR_BYTESREF)) { continue; } Lucene.Net.Util.Fst.Util.ToInt32sRef(VAR_VAR, VAR_VAR); VAR_VAR.Add(VAR_VAR, VAR_LONG); VAR_BYTESREF.CopyBytes(VAR_VAR); count++; } fst = VAR_VAR.Finish(); }
public java.util.Comparator<K> METHOD_NAME() { if (this.ascending) { return this._enclosing.METHOD_NAME(); } else { return java.util.Collections.reverseOrder<K>(this._enclosing._comparator); } }
public PrintHeadersRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_print_headers = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual DeleteBranchCommand METHOD_NAME() { return new DeleteBranchCommand(repo); }
public virtual DetectLabelsResponse METHOD_NAME(DetectLabelsRequest VAR_DETECTLABELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectLabelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectLabelsResponseUnmarshaller.Instance; return Invoke<DetectLabelsResponse>(VAR_DETECTLABELSREQUEST, VAR_VAR); }
public FnGroupCountRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_count = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public override java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } System.Array.Copy(VAR_DOUBLE[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (IsDefaultField(this.m_field)) { return GetTermEscaped(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING + this.similarity; } else { return this.m_field + LITERAL_STRING + GetTermEscaped(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING + this.similarity; } }
public AbstractBlockPackedWriter(DataOutput VAR_DATAOUTPUT, int VAR_INT) { PackedInt32s.CheckBlockSize(VAR_INT, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE); Reset(VAR_DATAOUTPUT); m_values = new long[VAR_INT]; }
public virtual string METHOD_NAME() { return message; }
public virtual ListAttendeesResponse METHOD_NAME(ListAttendeesRequest VAR_LISTATTENDEESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAttendeesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAttendeesResponseUnmarshaller.Instance; return Invoke<ListAttendeesResponse>(VAR_LISTATTENDEESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { upto = count = LITERAL_INT; posIncr = LITERAL_INT; }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public virtual void METHOD_NAME(E VAR_E) { lock (this) { if (elementCount == elementData.Length) { growByOne(); } elementData[elementCount++] = VAR_E; modCount++; } }
public override long METHOD_NAME(string VAR_STRING) { EnsureOpen(); FileInfo VAR_FILEINFO = new FileInfo(Path.Combine(m_directory.FullName, VAR_STRING)); long VAR_LONG = VAR_FILEINFO.Length; if (VAR_LONG == LITERAL_INT && !VAR_FILEINFO.Exists) { throw new FileNotFoundException(VAR_STRING); } else { return VAR_LONG; } }
public virtual PutExternalModelResponse METHOD_NAME(PutExternalModelRequest VAR_PUTEXTERNALMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutExternalModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutExternalModelResponseUnmarshaller.Instance; return Invoke<PutExternalModelResponse>(VAR_PUTEXTERNALMODELREQUEST, VAR_VAR); }
public virtual PutConferencePreferenceResponse METHOD_NAME(PutConferencePreferenceRequest VAR_PUTCONFERENCEPREFERENCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConferencePreferenceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConferencePreferenceResponseUnmarshaller.Instance; return Invoke<PutConferencePreferenceResponse>(VAR_PUTCONFERENCEPREFERENCEREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return _size; }
public virtual CreateApiMappingResponse METHOD_NAME(CreateApiMappingRequest VAR_CREATEAPIMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateApiMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateApiMappingResponseUnmarshaller.Instance; return Invoke<CreateApiMappingResponse>(VAR_CREATEAPIMAPPINGREQUEST, VAR_VAR); }
public virtual CharBlockArray METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE, int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT + VAR_INT; for (int i = VAR_INT; i < VAR_INT; i++) { METHOD_NAME(VAR_ICHARSEQUENCE[i]); } return this; }
public virtual UpdateAdmChannelResponse METHOD_NAME(UpdateAdmChannelRequest VAR_UPDATEADMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAdmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAdmChannelResponseUnmarshaller.Instance; return Invoke<UpdateAdmChannelResponse>(VAR_UPDATEADMCHANNELREQUEST, VAR_VAR); }
public DirCacheIterator(DirCache VAR_DIRCACHE) { cache = VAR_DIRCACHE; tree = VAR_DIRCACHE.GetCacheTree(true); treeStart = LITERAL_INT; treeEnd = tree.GetEntrySpan(); subtreeId = new byte[Constants.OBJECT_ID_LENGTH]; if (!Eof) { ParseEntry(); } }
public void METHOD_NAME(BytesRef VAR_BYTESREF, int VAR_INT) { var VAR_VAR = VAR_BYTESREF.Bytes = buffers[VAR_INT >> BYTE_BLOCK_SHIFT]; var VAR_VAR = VAR_INT & BYTE_BLOCK_MASK; if ((VAR_VAR[VAR_VAR] & LITERAL_INT) == LITERAL_INT) { VAR_BYTESREF.Length = VAR_VAR[VAR_VAR]; VAR_BYTESREF.Offset = VAR_VAR + LITERAL_INT; } else { VAR_BYTESREF.Length = (VAR_VAR[VAR_VAR] & LITERAL_INT) + ((VAR_VAR[VAR_VAR + LITERAL_INT] & LITERAL_INT) << LITERAL_INT); VAR_BYTESREF.Offset = VAR_VAR + LITERAL_INT; } Debug.Assert(VAR_BYTESREF.Length >= LITERAL_INT); }
public Restrictions(GeoRestriction VAR_GEORESTRICTION) { _geoRestriction = VAR_GEORESTRICTION; }
public virtual DisableRuleResponse METHOD_NAME(DisableRuleRequest VAR_DISABLERULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableRuleResponseUnmarshaller.Instance; return Invoke<DisableRuleResponse>(VAR_DISABLERULEREQUEST, VAR_VAR); }
public virtual GetSuppressedDestinationResponse METHOD_NAME(GetSuppressedDestinationRequest VAR_GETSUPPRESSEDDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSuppressedDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSuppressedDestinationResponseUnmarshaller.Instance; return Invoke<GetSuppressedDestinationResponse>(VAR_GETSUPPRESSEDDESTINATIONREQUEST, VAR_VAR); }
public virtual ListDomainsResponse METHOD_NAME(ListDomainsRequest VAR_LISTDOMAINSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDomainsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDomainsResponseUnmarshaller.Instance; return Invoke<ListDomainsResponse>(VAR_LISTDOMAINSREQUEST, VAR_VAR); }
public virtual StartLifecyclePolicyPreviewResponse METHOD_NAME(StartLifecyclePolicyPreviewRequest VAR_STARTLIFECYCLEPOLICYPREVIEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartLifecyclePolicyPreviewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<StartLifecyclePolicyPreviewResponse>(VAR_STARTLIFECYCLEPOLICYPREVIEWREQUEST, VAR_VAR); }
public virtual CreateDiskFromSnapshotResponse METHOD_NAME(CreateDiskFromSnapshotRequest VAR_CREATEDISKFROMSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDiskFromSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDiskFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateDiskFromSnapshotResponse>(VAR_CREATEDISKFROMSNAPSHOTREQUEST, VAR_VAR); }
public virtual SubmoduleSyncCommand METHOD_NAME() { return new SubmoduleSyncCommand(repo); }
public virtual DeleteConfigurationSetTrackingOptionsResponse METHOD_NAME(DeleteConfigurationSetTrackingOptionsRequest VAR_DELETECONFIGURATIONSETTRACKINGOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConfigurationSetTrackingOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConfigurationSetTrackingOptionsResponseUnmarshaller.Instance; return Invoke<DeleteConfigurationSetTrackingOptionsResponse>(VAR_DELETECONFIGURATIONSETTRACKINGOPTIONSREQUEST, VAR_VAR); }
public virtual TValue METHOD_NAME(TValue VAR_TVALUE) { if (!allowModify) { throw new NotSupportedException(); } TValue VAR_TVALUE = outerInstance.values[lastPos].Value; outerInstance.values[lastPos].Value = VAR_TVALUE; return VAR_TVALUE; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(length).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE, int VAR_INT) { double VAR_DOUBLE = FV(VAR_DOUBLE, VAR_INT - LITERAL_INT, PMT(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, VAR_INT), VAR_DOUBLE, VAR_INT) * VAR_DOUBLE; if (VAR_INT == LITERAL_INT) VAR_DOUBLE /= (LITERAL_INT + VAR_DOUBLE); return VAR_DOUBLE; }
public FileDictionary(Stream VAR_STREAM, string VAR_STRING) { @in = IOUtils.GetDecodingReader(VAR_STREAM, Encoding.UTF8); this.VAR_STRING = VAR_STRING; }
public DocumentSummaryInformation(PropertySet VAR_PROPERTYSET) : base(ps) { if (!IsDocumentSummaryInformation) throw new UnexpectedPropertySetTypeException(LITERAL_STRING + GetType().Name); }
public EscherBSERecord METHOD_NAME(int VAR_INT) { return (EscherBSERecord)escherBSERecords[VAR_INT - LITERAL_INT]; }
public virtual CreateDetectorVersionResponse METHOD_NAME(CreateDetectorVersionRequest VAR_CREATEDETECTORVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDetectorVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDetectorVersionResponseUnmarshaller.Instance; return Invoke<CreateDetectorVersionResponse>(VAR_CREATEDETECTORVERSIONREQUEST, VAR_VAR); }
public static DVConstraint METHOD_NAME(String[] VAR_STRING[]) { return new DVConstraint(LITERAL_NULL, VAR_STRING[]); }
public virtual ListGroupsResponse METHOD_NAME(ListGroupsRequest VAR_LISTGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGroupsResponseUnmarshaller.Instance; return Invoke<ListGroupsResponse>(VAR_LISTGROUPSREQUEST, VAR_VAR); }
public virtual DeleteScriptResponse METHOD_NAME(DeleteScriptRequest VAR_DELETESCRIPTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteScriptRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteScriptResponseUnmarshaller.Instance; return Invoke<DeleteScriptResponse>(VAR_DELETESCRIPTREQUEST, VAR_VAR); }
public virtual DescribeSpotDatafeedSubscriptionResponse METHOD_NAME(DescribeSpotDatafeedSubscriptionRequest VAR_DESCRIBESPOTDATAFEEDSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotDatafeedSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotDatafeedSubscriptionResponseUnmarshaller.Instance; return Invoke<DescribeSpotDatafeedSubscriptionResponse>(VAR_DESCRIBESPOTDATAFEEDSUBSCRIPTIONREQUEST, VAR_VAR); }
public CharArrayReader(char[] VAR_CHAR[]) { this.VAR_CHAR[] = VAR_CHAR[]; this.count = VAR_CHAR[].Length; }
public virtual java.lang.CharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { return java.lang.CharSequenceProxy.Wrap(substring(VAR_INT, VAR_INT)); }
public Builder(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual void METHOD_NAME(string VAR_STRING, object VAR_OBJECT) { lock (this) { perfObjects[VAR_STRING] = VAR_OBJECT; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(FirstRow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(LastRow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(FirstCol)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(LastCol)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field_5_zero)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ExitStandbyResponse METHOD_NAME(ExitStandbyRequest VAR_EXITSTANDBYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExitStandbyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExitStandbyResponseUnmarshaller.Instance; return Invoke<ExitStandbyResponse>(VAR_EXITSTANDBYREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME(Subs) + LITERAL_STRING; }
public MergeException(Exception VAR_EXCEPTION, Directory VAR_DIRECTORY) : base(exc.ToString(), exc) { this.VAR_DIRECTORY = VAR_DIRECTORY; }
public virtual int METHOD_NAME(java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER) { int VAR_INT = remaining(); if (VAR_JAVA.NIO.CHARBUFFER == this) { if (VAR_INT == LITERAL_INT) { return -LITERAL_INT; } throw new System.ArgumentException(); } if (VAR_INT == LITERAL_INT) { return _limit > LITERAL_INT && VAR_JAVA.NIO.CHARBUFFER.remaining() == LITERAL_INT ? LITERAL_INT : -LITERAL_INT; } VAR_INT = System.Math.Min(VAR_JAVA.NIO.CHARBUFFER.remaining(), VAR_INT); if (VAR_INT > LITERAL_INT) { char[] VAR_CHAR[] = new char[VAR_INT]; get(VAR_CHAR[]); VAR_JAVA.NIO.CHARBUFFER.put(VAR_CHAR[]); } return VAR_INT; }
public sealed override float METHOD_NAME() { return Sharpen.Util.IntBitsToFloat(getInt()); }
public UpdateApplicationRequest(string VAR_STRING) { _applicationName = VAR_STRING; }
public void METHOD_NAME(ByteSliceReader VAR_BYTESLICEREADER, int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT < streamCount); int VAR_INT = postingsArray.intStarts[VAR_INT]; int[] VAR_INT[] = intPool.Buffers[VAR_INT >> Int32BlockPool.INT32_BLOCK_SHIFT]; int VAR_INT = VAR_INT & Int32BlockPool.INT32_BLOCK_MASK; VAR_BYTESLICEREADER.Init(bytePool, postingsArray.byteStarts[VAR_INT] + VAR_INT * ByteBlockPool.FIRST_LEVEL_SIZE, VAR_INT[][VAR_INT + VAR_INT]); }
public override T METHOD_NAME() { if (this._enclosing.size <= this.index) { throw new NoSuchElementException(); } T VAR_T = this.block[this.blkIdx]; if (++this.blkIdx == BlockList<T>.BLOCK_SIZE) { if (++this.dirIdx < this._enclosing.directory.Length) { this.block = this._enclosing.directory[this.dirIdx]; } else { this.block = LITERAL_NULL; } this.blkIdx = LITERAL_INT; } this.index++; return VAR_T; }
public virtual DescribeOptionGroupOptionsResponse METHOD_NAME(DescribeOptionGroupOptionsRequest VAR_DESCRIBEOPTIONGROUPOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOptionGroupOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOptionGroupOptionsResponseUnmarshaller.Instance; return Invoke<DescribeOptionGroupOptionsResponse>(VAR_DESCRIBEOPTIONGROUPOPTIONSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(int VAR_INT) { int VAR_INT = n; int VAR_INT = array.Length; if (n + VAR_INT >= VAR_INT) { byte[] VAR_BYTE[] = new byte[VAR_INT + blockSize]; System.Array.Copy(array, LITERAL_INT, VAR_BYTE[], LITERAL_INT, VAR_INT); array = VAR_BYTE[]; } n += VAR_INT; return VAR_INT; }
public virtual string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); foreach (TermInfo ti in termsInfos) { VAR_STRINGBUILDER.Append(ti.Text); } return VAR_STRINGBUILDER.ToString(); }
public ReplaceableItem(string VAR_STRING) { _name = VAR_STRING; }
public NamePtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_label_index = VAR_ILITTLEENDIANINPUT.ReadShort(); field_2_zero = VAR_ILITTLEENDIANINPUT.ReadShort(); }
public override int METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT != LITERAL_NULL) { { for (int i = LITERAL_INT; i < a.Length; i++) { if (VAR_OBJECT.Equals(a[i])) { return i; } } } } else { { for (int i = LITERAL_INT; i < a.Length; i++) { if ((object)a[i] == LITERAL_NULL) { return i; } } } } return -LITERAL_INT; }
public virtual ListContactFlowsResponse METHOD_NAME(ListContactFlowsRequest VAR_LISTCONTACTFLOWSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListContactFlowsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListContactFlowsResponseUnmarshaller.Instance; return Invoke<ListContactFlowsResponse>(VAR_LISTCONTACTFLOWSREQUEST, VAR_VAR); }
public override int METHOD_NAME() { string VAR_STRING = LITERAL_NULL; try { if (current >= analyzerNames.Count) { current = LITERAL_INT; } VAR_STRING = analyzerNames[current++]; Analyzer VAR_ANALYZER = LITERAL_NULL; if (LITERAL_NULL == VAR_STRING || LITERAL_INT == VAR_STRING.Length) { VAR_STRING = typeof(Lucene.Net.Analysis.Standard.StandardAnalyzer).AssemblyQualifiedName; } AnalyzerFactory VAR_ANALYZERFACTORY; if (RunData.AnalyzerFactories.TryGetValue(VAR_STRING, out VAR_ANALYZERFACTORY) && LITERAL_NULL != VAR_ANALYZERFACTORY) { VAR_ANALYZER = VAR_ANALYZERFACTORY.Create(); } else { if (VAR_STRING.Contains(LITERAL_STRING)) { if (VAR_STRING.StartsWith(LITERAL_STRING, StringComparison.Ordinal)) { VAR_STRING = LITERAL_STRING + VAR_STRING; } VAR_ANALYZER = CreateAnalyzer(VAR_STRING); } else { try { string VAR_STRING = LITERAL_STRING + VAR_STRING; VAR_ANALYZER = CreateAnalyzer(VAR_STRING); VAR_STRING = VAR_STRING; } catch (TypeLoadException) { VAR_STRING = LITERAL_STRING + VAR_STRING; VAR_ANALYZER = CreateAnalyzer(VAR_STRING); } } } RunData.Analyzer = VAR_ANALYZER; } catch (Exception e) { throw new Exception(LITERAL_STRING + VAR_STRING, e); } return LITERAL_INT; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Id); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, propertyValue); return LITERAL_INT; }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_SHORT[], LITERAL_INT, VAR_INT); }
public override java.util.Iterator<V> METHOD_NAME() { return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!base.METHOD_NAME(VAR_OBJECT)) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } PrefixQuery VAR_PREFIXQUERY = (PrefixQuery)VAR_OBJECT; if (_prefix == LITERAL_NULL) { if (VAR_PREFIXQUERY._prefix != LITERAL_NULL) { return false; } } else if (!_prefix.METHOD_NAME(VAR_PREFIXQUERY._prefix)) { return false; } return true; }
public bool METHOD_NAME(int VAR_INT) { return GetBoundSheetRec(VAR_INT).IsVeryHidden; }
public UpdateAccessKeyRequest(string VAR_STRING, StatusType VAR_STATUSTYPE) { _accessKeyId = VAR_STRING; _status = VAR_STATUSTYPE; }
public static int METHOD_NAME(ThreeDEval VAR_THREEDEVAL, IMatchPredicate VAR_IMATCHPREDICATE) { int VAR_INT = LITERAL_INT; for (int sIx = VAR_THREEDEVAL.FirstSheetIndex; sIx <= VAR_THREEDEVAL.LastSheetIndex; sIx++) { int VAR_INT = VAR_THREEDEVAL.Height; int VAR_INT = VAR_THREEDEVAL.Width; for (int rrIx = LITERAL_INT; rrIx < VAR_INT; rrIx++) { for (int rcIx = LITERAL_INT; rcIx < VAR_INT; rcIx++) { ValueEval VAR_VALUEEVAL = VAR_THREEDEVAL.GetValue(sIx, rrIx, rcIx); if (VAR_IMATCHPREDICATE is I_MatchAreaPredicate) { I_MatchAreaPredicate VAR_I_MATCHAREAPREDICATE = (I_MatchAreaPredicate)VAR_IMATCHPREDICATE; if (!VAR_I_MATCHAREAPREDICATE.Matches(VAR_THREEDEVAL, rrIx, rcIx)) continue; } if (VAR_IMATCHPREDICATE.Matches(VAR_VALUEEVAL)) { VAR_INT++; } } } } return VAR_INT; }
public virtual NGit.Api.PushCommand METHOD_NAME(params RefSpec[] VAR_REFSPEC[]) { CheckCallable(); this.refSpecs.Clear(); Sharpen.Collections.AddAll(refSpecs, VAR_REFSPEC[]); return this; }
public EscherComplexProperty(short VAR_SHORT, byte[] VAR_BYTE[]) : base(id) { this._complexData = VAR_BYTE[]; }
public virtual CreateNodeResponse METHOD_NAME(CreateNodeRequest VAR_CREATENODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNodeResponseUnmarshaller.Instance; return Invoke<CreateNodeResponse>(VAR_CREATENODEREQUEST, VAR_VAR); }
public override Note METHOD_NAME() { CheckCallable(); RevWalk VAR_REVWALK = new RevWalk(repo); NoteMap VAR_NOTEMAP = NoteMap.NewEmptyMap(); RevCommit VAR_REVCOMMIT = LITERAL_NULL; try { Ref VAR_REF = repo.GetRef(notesRef); if (VAR_REF != LITERAL_NULL) { VAR_REVCOMMIT = VAR_REVWALK.ParseCommit(VAR_REF.GetObjectId()); VAR_NOTEMAP = NoteMap.Read(VAR_REVWALK.GetObjectReader(), VAR_REVCOMMIT); } return VAR_NOTEMAP.GetNote(id); } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_REVWALK.Release(); } }
public virtual void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { jjmatchedPos = jjnewStateCnt = LITERAL_INT; curLexState = defaultLexState; m_input_stream = VAR_ICHARSTREAM; ReInitRounds(); }
public virtual bool METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { return map.Put(VAR_ICHARSEQUENCE); }
public virtual void METHOD_NAME(int VAR_INT) { deltaBaseCacheLimit = VAR_INT; }
public ServerException(string VAR_STRING, string VAR_STRING, string VAR_STRING) : base(errorCode, errorMessage, requestId) { RequestId = VAR_STRING; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<SrndQuery> VAR_ILIST<SRNDQUERY>; Token VAR_TOKEN; VAR_SRNDQUERY = WQuery(); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.N: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_5; } VAR_TOKEN = Jj_consume_token(RegexpToken.N); VAR_ILIST<SRNDQUERY> = new List<SrndQuery>(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); VAR_SRNDQUERY = WQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); VAR_SRNDQUERY = GetDistanceQuery(VAR_ILIST<SRNDQUERY>, true, VAR_TOKEN, false); } label_5: { if (true) return VAR_SRNDQUERY; } throw new Exception(LITERAL_STRING); }
public MoreLikeThisQuery(string VAR_STRING, string[] VAR_STRING[], Analyzer VAR_ANALYZER, string VAR_STRING) { this.LikeText = VAR_STRING; this.MoreLikeFields = VAR_STRING[]; this.Analyzer = VAR_ANALYZER; this.VAR_STRING = VAR_STRING; }
public virtual DescribeImageAttributeResponse METHOD_NAME(DescribeImageAttributeRequest VAR_DESCRIBEIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImageAttributeResponseUnmarshaller.Instance; return Invoke<DescribeImageAttributeResponse>(VAR_DESCRIBEIMAGEATTRIBUTEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(object VAR_OBJECT) { METHOD_NAME(Sharpen.StringHelper.GetValueOf(VAR_OBJECT)); }
public virtual DeregisterFromWorkMailResponse METHOD_NAME(DeregisterFromWorkMailRequest VAR_DEREGISTERFROMWORKMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterFromWorkMailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterFromWorkMailResponseUnmarshaller.Instance; return Invoke<DeregisterFromWorkMailResponse>(VAR_DEREGISTERFROMWORKMAILREQUEST, VAR_VAR); }
public virtual PutClusterCapacityProvidersResponse METHOD_NAME(PutClusterCapacityProvidersRequest VAR_PUTCLUSTERCAPACITYPROVIDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutClusterCapacityProvidersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutClusterCapacityProvidersResponseUnmarshaller.Instance; return Invoke<PutClusterCapacityProvidersResponse>(VAR_PUTCLUSTERCAPACITYPROVIDERSREQUEST, VAR_VAR); }
public ChangeMessageVisibilityBatchRequestEntry(string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _receiptHandle = VAR_STRING; }
public java.lang.StringBuffer METHOD_NAME(bool VAR_BOOL) { return METHOD_NAME(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); }
public int METHOD_NAME(T VAR_T, T VAR_T) { return cmp.METHOD_NAME(VAR_T, VAR_T); }
public GetAttributesRequest(string VAR_STRING, string VAR_STRING) { _domainName = VAR_STRING; _itemName = VAR_STRING; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_firstMovedIndex); VAR_STRINGBUILDER.Append(_lastMovedIndex); VAR_STRINGBUILDER.Append(_amountToMove); return VAR_STRINGBUILDER.METHOD_NAME(); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { double VAR_DOUBLE; try { VAR_DOUBLE = Eval(VAR_VALUEEVAL[], VAR_INT, VAR_INT); CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public virtual DescribeFpgaImagesResponse METHOD_NAME(DescribeFpgaImagesRequest VAR_DESCRIBEFPGAIMAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFpgaImagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFpgaImagesResponseUnmarshaller.Instance; return Invoke<DescribeFpgaImagesResponse>(VAR_DESCRIBEFPGAIMAGESREQUEST, VAR_VAR); }
public override ObjectInserter METHOD_NAME() { return new ObjectDirectoryInserter(this, config); }
public override java.nio.LongBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { checkIndex(VAR_INT); byteBuffer.putLong(VAR_INT * libcore.io.SizeOf.LONG, VAR_LONG); return this; }
public virtual bool METHOD_NAME() { return retainBody; }
public virtual AddApplicationVpcConfigurationResponse METHOD_NAME(AddApplicationVpcConfigurationRequest VAR_ADDAPPLICATIONVPCCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationVpcConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationVpcConfigurationResponseUnmarshaller.Instance; return Invoke<AddApplicationVpcConfigurationResponse>(VAR_ADDAPPLICATIONVPCCONFIGURATIONREQUEST, VAR_VAR); }
public override java.util.MapClass.Entry<K, V> METHOD_NAME() { return this.nextEntry(); }
public SpreadsheetVersion METHOD_NAME() { return SpreadsheetVersion.EXCEL2007; }
public virtual string[] METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING, string[] VAR_STRING[], bool[] VAR_BOOL[]) { CredentialItem.StringType[] VAR_CREDENTIALITEM.STRINGTYPE[] = new CredentialItem.StringType[VAR_STRING[].Length]; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { VAR_CREDENTIALITEM.STRINGTYPE[][i] = new CredentialItem.StringType(VAR_STRING[][i], !VAR_BOOL[][i]); } IList<CredentialItem> VAR_ILIST<CREDENTIALITEM> = new AList<CredentialItem>(); if (VAR_STRING != LITERAL_NULL && VAR_STRING.Length > LITERAL_INT) { VAR_ILIST<CREDENTIALITEM>.AddItem(new CredentialItem.InformationalMessage(VAR_STRING)); } Sharpen.Collections.AddAll(VAR_ILIST<CREDENTIALITEM>, Arrays.AsList(VAR_CREDENTIALITEM.STRINGTYPE[])); if (!provider.Get(uri, VAR_ILIST<CREDENTIALITEM>)) { return LITERAL_NULL; } string[] VAR_STRING[] = new string[VAR_CREDENTIALITEM.STRINGTYPE[].Length]; for (int i_1 = LITERAL_INT; i_1 < VAR_CREDENTIALITEM.STRINGTYPE[].Length; i_1++) { VAR_STRING[][i_1] = VAR_CREDENTIALITEM.STRINGTYPE[][i_1].GetValue(); } return VAR_STRING[]; }
public static MergeStrategy METHOD_NAME(string VAR_STRING) { lock (typeof(MergeStrategy)) { return STRATEGIES.METHOD_NAME(VAR_STRING); } }
public virtual AssociateConnectionWithLagResponse METHOD_NAME(AssociateConnectionWithLagRequest VAR_ASSOCIATECONNECTIONWITHLAGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateConnectionWithLagRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateConnectionWithLagResponseUnmarshaller.Instance; return Invoke<AssociateConnectionWithLagResponse>(VAR_ASSOCIATECONNECTIONWITHLAGREQUEST, VAR_VAR); }
public short METHOD_NAME(short VAR_SHORT) { return (short)this.GetValue(VAR_SHORT); }
public static java.text.BreakIterator METHOD_NAME() { return METHOD_NAME(System.Globalization.CultureInfo.CurrentCulture); }
public MissingObjectException(ObjectId VAR_OBJECTID, string VAR_STRING) : base(MessageFormat.Format(JGitText.Get().missingObject, type, id.Name)) { missing = VAR_OBJECTID.Copy(); }
public PipedReader(java.io.PipedWriter VAR_JAVA.IO.PIPEDWRITER, int VAR_INT) : this(pipeSize) { throw new System.NotImplementedException(); }
public ImportKeyPairRequest(string VAR_STRING, string VAR_STRING) { _keyName = VAR_STRING; _publicKeyMaterial = VAR_STRING; }
public DeleteFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual CreateReceiptRuleSetResponse METHOD_NAME(CreateReceiptRuleSetRequest VAR_CREATERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<CreateReceiptRuleSetResponse>(VAR_CREATERECEIPTRULESETREQUEST, VAR_VAR); }
public RemovePermissionRequest(string VAR_STRING, string VAR_STRING) { _queueUrl = VAR_STRING; _label = VAR_STRING; }
public override string METHOD_NAME() { return LITERAL_STRING + m_basicModel.METHOD_NAME() + m_afterEffect.METHOD_NAME() + m_normalization.METHOD_NAME(); }
public virtual void METHOD_NAME(RefUpdate.Result VAR_REFUPDATE.RESULT) { switch (VAR_REFUPDATE.RESULT) { case RefUpdate.Result.NOT_ATTEMPTED: { METHOD_NAME(ReceiveCommand.Result.NOT_ATTEMPTED); break; } case RefUpdate.Result.LOCK_FAILURE: case RefUpdate.Result.IO_FAILURE: { METHOD_NAME(ReceiveCommand.Result.LOCK_FAILURE); break; } case RefUpdate.Result.NO_CHANGE: case RefUpdate.Result.NEW: case RefUpdate.Result.FORCED: case RefUpdate.Result.FAST_FORWARD: { METHOD_NAME(ReceiveCommand.Result.OK); break; } case RefUpdate.Result.REJECTED: { METHOD_NAME(ReceiveCommand.Result.REJECTED_NONFASTFORWARD); break; } case RefUpdate.Result.REJECTED_CURRENT_BRANCH: { METHOD_NAME(ReceiveCommand.Result.REJECTED_CURRENT_BRANCH); break; } default: { METHOD_NAME(ReceiveCommand.Result.REJECTED_OTHER_REASON, VAR_REFUPDATE.RESULT.ToString()); break; break; } } }
public virtual DeleteMatchmakingConfigurationResponse METHOD_NAME(DeleteMatchmakingConfigurationRequest VAR_DELETEMATCHMAKINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMatchmakingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMatchmakingConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteMatchmakingConfigurationResponse>(VAR_DELETEMATCHMAKINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual double METHOD_NAME(SpatialContext VAR_SPATIALCONTEXT, double VAR_DOUBLE) { if (DistErr != LITERAL_NULL) return DistErr.Value; double VAR_DOUBLE = (this.distErrPct ?? VAR_DOUBLE); return CalcDistanceFromErrPct(Shape, VAR_DOUBLE, VAR_SPATIALCONTEXT); }
public java.nio.charset.CharsetEncoder METHOD_NAME(byte[] VAR_BYTE[]) { if (VAR_BYTE[] == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_BYTE[].Length == LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_BYTE[].Length > maxBytesPerChar()) { throw new System.ArgumentException(LITERAL_STRING + VAR_BYTE[].Length + LITERAL_STRING + maxBytesPerChar()); } if (!isLegalReplacement(VAR_BYTE[])) { throw new System.ArgumentException(LITERAL_STRING + java.util.Arrays.toString(VAR_BYTE[])); } this.replacementBytes = VAR_BYTE[]; implReplaceWith(replacementBytes); return this; }
public virtual CreateApplicationSnapshotResponse METHOD_NAME(CreateApplicationSnapshotRequest VAR_CREATEAPPLICATIONSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateApplicationSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateApplicationSnapshotResponseUnmarshaller.Instance; return Invoke<CreateApplicationSnapshotResponse>(VAR_CREATEAPPLICATIONSNAPSHOTREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); if (VAR_VALUEEVAL is BlankEval) { return NumberEval.ZERO; } if (VAR_VALUEEVAL is StringEval) { return VAR_VALUEEVAL; } VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(+VAR_DOUBLE); }
public MoPenBindIsvRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual AssociateIpGroupsResponse METHOD_NAME(AssociateIpGroupsRequest VAR_ASSOCIATEIPGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateIpGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateIpGroupsResponseUnmarshaller.Instance; return Invoke<AssociateIpGroupsResponse>(VAR_ASSOCIATEIPGROUPSREQUEST, VAR_VAR); }
public virtual TestEventPatternResponse METHOD_NAME(TestEventPatternRequest VAR_TESTEVENTPATTERNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestEventPatternRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestEventPatternResponseUnmarshaller.Instance; return Invoke<TestEventPatternResponse>(VAR_TESTEVENTPATTERNREQUEST, VAR_VAR); }
public LockFailedException(FilePath VAR_FILEPATH, string VAR_STRING) : base(message) { this.VAR_FILEPATH = VAR_FILEPATH; }
public virtual DeleteSkillGroupResponse METHOD_NAME(DeleteSkillGroupRequest VAR_DELETESKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSkillGroupResponseUnmarshaller.Instance; return Invoke<DeleteSkillGroupResponse>(VAR_DELETESKILLGROUPREQUEST, VAR_VAR); }
public SortedDocValuesField(string VAR_STRING, BytesRef VAR_BYTESREF) : base(name, TYPE) { FieldsData = VAR_BYTESREF; }
public virtual CreateNetworkResponse METHOD_NAME(CreateNetworkRequest VAR_CREATENETWORKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkResponseUnmarshaller.Instance; return Invoke<CreateNetworkResponse>(VAR_CREATENETWORKREQUEST, VAR_VAR); }
public DeleteGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual DescribeCacheEngineVersionsResponse METHOD_NAME(DescribeCacheEngineVersionsRequest VAR_DESCRIBECACHEENGINEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCacheEngineVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCacheEngineVersionsResponseUnmarshaller.Instance; return Invoke<DescribeCacheEngineVersionsResponse>(VAR_DESCRIBECACHEENGINEVERSIONSREQUEST, VAR_VAR); }
public override int METHOD_NAME(object VAR_OBJECT) { MutableValueBool VAR_MUTABLEVALUEBOOL = (MutableValueBool)VAR_OBJECT; if (Value != VAR_MUTABLEVALUEBOOL.Value) { return Value ? LITERAL_INT : LITERAL_INT; } if (Exists == VAR_MUTABLEVALUEBOOL.Exists) { return LITERAL_INT; } return Exists ? LITERAL_INT : -LITERAL_INT; }
public LineParser(string[] VAR_STRING[]) { this.m_header = VAR_STRING[]; }
public virtual RestoreDBInstanceFromDBSnapshotResponse METHOD_NAME(RestoreDBInstanceFromDBSnapshotRequest VAR_RESTOREDBINSTANCEFROMDBSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBInstanceFromDBSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBInstanceFromDBSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreDBInstanceFromDBSnapshotResponse>(VAR_RESTOREDBINSTANCEFROMDBSNAPSHOTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(E VAR_E) { addFirstImpl(VAR_E); }
public override void METHOD_NAME() { lock (this) { if (buf == LITERAL_NULL) { throw new System.IO.IOException(LITERAL_STRING); } if (-LITERAL_INT == markpos) { throw new System.IO.IOException(LITERAL_STRING); } pos = markpos; } }
public virtual UpdateUsagePlanResponse METHOD_NAME(UpdateUsagePlanRequest VAR_UPDATEUSAGEPLANREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUsagePlanRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUsagePlanResponseUnmarshaller.Instance; return Invoke<UpdateUsagePlanResponse>(VAR_UPDATEUSAGEPLANREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (GetType() != VAR_OBJECT.GetType()) { return false; } TermInfo VAR_TERMINFO = (TermInfo)VAR_OBJECT; if (position != VAR_TERMINFO.position) { return false; } return true; }
public StringPtg(String VAR_STRING) { if (VAR_STRING.Length > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } _is16bitUnicode = StringUtil.HasMultibyte(VAR_STRING); field_3_string = VAR_STRING; field_1_Length = VAR_STRING.Length; }
public virtual DiffEntry.ChangeType METHOD_NAME() { return changeType; }
public String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); METHOD_NAME(VAR_STRINGBUILDER); return VAR_STRINGBUILDER.ToString(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(DataSize); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_objectType); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_objectId); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_option); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_reserved1); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_5_reserved2); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_6_reserved3); }
public virtual DescribeAppResponse METHOD_NAME(DescribeAppRequest VAR_DESCRIBEAPPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAppRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAppResponseUnmarshaller.Instance; return Invoke<DescribeAppResponse>(VAR_DESCRIBEAPPREQUEST, VAR_VAR); }
public virtual IDictionary<string, DirCacheEntry> METHOD_NAME() { return toBeCheckedOut; }
public virtual CreatePublicVirtualInterfaceResponse METHOD_NAME(CreatePublicVirtualInterfaceRequest VAR_CREATEPUBLICVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePublicVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePublicVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<CreatePublicVirtualInterfaceResponse>(VAR_CREATEPUBLICVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual CreateQueueResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new CreateQueueRequest(); VAR_VAR.QueueName = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public virtual CreateFieldLevelEncryptionProfileResponse METHOD_NAME(CreateFieldLevelEncryptionProfileRequest VAR_CREATEFIELDLEVELENCRYPTIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFieldLevelEncryptionProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFieldLevelEncryptionProfileResponseUnmarshaller.Instance; return Invoke<CreateFieldLevelEncryptionProfileResponse>(VAR_CREATEFIELDLEVELENCRYPTIONPROFILEREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT) { return sIconIds[VAR_INT]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Numerator)).Append(LITERAL_STRING).Append(Numerator).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Denominator)).Append(LITERAL_STRING).Append(Denominator).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(int VAR_INT) { Debug.Assert(m_buffer == LITERAL_NULL || bufferSize == m_buffer.Length, LITERAL_STRING + m_buffer + LITERAL_STRING + bufferSize + LITERAL_STRING + (m_buffer != LITERAL_NULL ? m_buffer.Length : LITERAL_INT)); if (VAR_INT != bufferSize) { CheckBufferSize(VAR_INT); bufferSize = VAR_INT; if (m_buffer != LITERAL_NULL) { byte[] VAR_BYTE[] = new byte[VAR_INT]; int VAR_INT = bufferLength - bufferPosition; int VAR_INT; if (VAR_INT > VAR_INT) { VAR_INT = VAR_INT; } else { VAR_INT = VAR_INT; } Array.Copy(m_buffer, bufferPosition, VAR_BYTE[], LITERAL_INT, VAR_INT); bufferStart += bufferPosition; bufferPosition = LITERAL_INT; bufferLength = VAR_INT; NewBuffer(VAR_BYTE[]); } } }
public virtual DisassociateSigninDelegateGroupsFromAccountResponse METHOD_NAME(DisassociateSigninDelegateGroupsFromAccountRequest VAR_DISASSOCIATESIGNINDELEGATEGROUPSFROMACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateSigninDelegateGroupsFromAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateSigninDelegateGroupsFromAccountResponseUnmarshaller.Instance; return Invoke<DisassociateSigninDelegateGroupsFromAccountResponse>(VAR_DISASSOCIATESIGNINDELEGATEGROUPSFROMACCOUNTREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new IndicNormalizationFilter(VAR_TOKENSTREAM); }
public TickRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_majorTickType = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_2_minorTickType = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_3_labelPosition = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_4_background = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_5_labelColorRgb = (byte)VAR_RECORDINPUTSTREAM.ReadInt(); field_6_zero1 = VAR_RECORDINPUTSTREAM.ReadInt(); field_7_zero2 = VAR_RECORDINPUTSTREAM.ReadInt(); field_8_zero3 = VAR_RECORDINPUTSTREAM.ReadInt(); field_9_zero4 = VAR_RECORDINPUTSTREAM.ReadInt(); field_10_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_11_tickColor = VAR_RECORDINPUTSTREAM.ReadShort(); field_12_zero5 = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual long METHOD_NAME() { return packedGitLimit; }
public virtual DisassociateContactFromAddressBookResponse METHOD_NAME(DisassociateContactFromAddressBookRequest VAR_DISASSOCIATECONTACTFROMADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateContactFromAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateContactFromAddressBookResponseUnmarshaller.Instance; return Invoke<DisassociateContactFromAddressBookResponse>(VAR_DISASSOCIATECONTACTFROMADDRESSBOOKREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { CheckPosition(LITERAL_INT); int VAR_INT = _writeIndex; _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _writeIndex = VAR_INT; }
public override int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (pos < size) { VAR_INT = Math.Min(VAR_INT, size - pos); s.CopyTo(pos, VAR_CHAR[], VAR_INT, pos + VAR_INT - pos); pos += VAR_INT; return VAR_INT; } else { s = LITERAL_NULL; return -LITERAL_INT; } }
public virtual AssociateSkillWithUsersResponse METHOD_NAME(AssociateSkillWithUsersRequest VAR_ASSOCIATESKILLWITHUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateSkillWithUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateSkillWithUsersResponseUnmarshaller.Instance; return Invoke<AssociateSkillWithUsersResponse>(VAR_ASSOCIATESKILLWITHUSERSREQUEST, VAR_VAR); }
public bool METHOD_NAME(double VAR_DOUBLE, IndexSearcher VAR_INDEXSEARCHER) { return VAR_DOUBLE > maxAgeSec; }
public virtual DescribeObservationResponse METHOD_NAME(DescribeObservationRequest VAR_DESCRIBEOBSERVATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeObservationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeObservationResponseUnmarshaller.Instance; return Invoke<DescribeObservationResponse>(VAR_DESCRIBEOBSERVATIONREQUEST, VAR_VAR); }
public virtual DeletePresetResponse METHOD_NAME(DeletePresetRequest VAR_DELETEPRESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePresetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePresetResponseUnmarshaller.Instance; return Invoke<DeletePresetResponse>(VAR_DELETEPRESETREQUEST, VAR_VAR); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (KeyValuePair<string, DocValuesProducer> entry in formats) { VAR_LONG += (entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR) + entry.Value.METHOD_NAME(); } return VAR_LONG; }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public virtual char[] METHOD_NAME() { lock (@lock) { char[] VAR_CHAR[] = new char[count]; System.Array.Copy(buf, LITERAL_INT, VAR_CHAR[], LITERAL_INT, count); return VAR_CHAR[]; } }
public virtual RebuildWorkspacesResponse METHOD_NAME(RebuildWorkspacesRequest VAR_REBUILDWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebuildWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebuildWorkspacesResponseUnmarshaller.Instance; return Invoke<RebuildWorkspacesResponse>(VAR_REBUILDWORKSPACESREQUEST, VAR_VAR); }
public virtual GetLexiconResponse METHOD_NAME(GetLexiconRequest VAR_GETLEXICONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLexiconRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLexiconResponseUnmarshaller.Instance; return Invoke<GetLexiconResponse>(VAR_GETLEXICONREQUEST, VAR_VAR); }
public virtual UpdateDeploymentStrategyResponse METHOD_NAME(UpdateDeploymentStrategyRequest VAR_UPDATEDEPLOYMENTSTRATEGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDeploymentStrategyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDeploymentStrategyResponseUnmarshaller.Instance; return Invoke<UpdateDeploymentStrategyResponse>(VAR_UPDATEDEPLOYMENTSTRATEGYREQUEST, VAR_VAR); }
public GetAlgorithmListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual bool METHOD_NAME() { return forceUpdate; }
public virtual ListGameServersResponse METHOD_NAME(ListGameServersRequest VAR_LISTGAMESERVERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGameServersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGameServersResponseUnmarshaller.Instance; return Invoke<ListGameServersResponse>(VAR_LISTGAMESERVERSREQUEST, VAR_VAR); }
public bool METHOD_NAME() { bool VAR_BOOL = false; if ((!IsRoot) && IsDeleteOK) { VAR_BOOL = _parent.DeleteEntry(this); } return VAR_BOOL; }
public TableRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { field_5_flags = VAR_RECORDINPUTSTREAM.ReadByte(); field_6_res = VAR_RECORDINPUTSTREAM.ReadByte(); field_7_rowInputRow = VAR_RECORDINPUTSTREAM.ReadShort(); field_8_colInputRow = VAR_RECORDINPUTSTREAM.ReadShort(); field_9_rowInputCol = VAR_RECORDINPUTSTREAM.ReadShort(); field_10_colInputCol = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual AllocateHostsResponse METHOD_NAME(AllocateHostsRequest VAR_ALLOCATEHOSTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateHostsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateHostsResponseUnmarshaller.Instance; return Invoke<AllocateHostsResponse>(VAR_ALLOCATEHOSTSREQUEST, VAR_VAR); }
public void METHOD_NAME() { _ulrOutput.Terminate(); _totalPreviousRecordsSize += _ulrOutput.TotalSize; _ulrOutput = new UnknownLengthRecordOutput(_out, ContinueRecord.sid); }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (VAR_INT > pos) { throw new System.IO.IOException(LITERAL_STRING); } java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); if (buf == LITERAL_NULL) { throw streamClosed(); } System.Array.Copy(VAR_BYTE[], VAR_INT, buf, pos - VAR_INT, VAR_INT); pos = pos - VAR_INT; }
public bool METHOD_NAME(BookSheetKey VAR_BOOKSHEETKEY, int VAR_INT, int VAR_INT) { BlankCellSheetGroup VAR_BLANKCELLSHEETGROUP = (BlankCellSheetGroup)_sheetGroupsByBookSheet[VAR_BOOKSHEETKEY]; if (VAR_BLANKCELLSHEETGROUP == LITERAL_NULL) { return false; } return VAR_BLANKCELLSHEETGROUP.METHOD_NAME(VAR_INT, VAR_INT); }
public virtual DescribeTextTranslationJobResponse METHOD_NAME(DescribeTextTranslationJobRequest VAR_DESCRIBETEXTTRANSLATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTextTranslationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTextTranslationJobResponseUnmarshaller.Instance; return Invoke<DescribeTextTranslationJobResponse>(VAR_DESCRIBETEXTTRANSLATIONJOBREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); if (remainingData == LITERAL_NULL) remainingData = new byte[LITERAL_INT]; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = remainingData.Length + (shortRecord ? LITERAL_INT : LITERAL_INT); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_1_flag); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_2_col1); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_3_dx1); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_4_row1); if (!shortRecord) { LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_5_dy1); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_6_col2); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_7_dx2); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_8_row2); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, field_9_dy2); } Array.Copy(remainingData, LITERAL_INT, VAR_BYTE[], VAR_INT + (shortRecord ? LITERAL_INT : LITERAL_INT), remainingData.Length); int VAR_INT = VAR_INT + LITERAL_INT + (shortRecord ? LITERAL_INT : LITERAL_INT) + remainingData.Length; VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = _breaks.Count; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { _breaks[i].METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } }
public virtual float METHOD_NAME(float VAR_FLOAT) { if (LITERAL_FLOAT == VAR_FLOAT) { return LITERAL_FLOAT; } return (VAR_FLOAT <= tf_min) ? tf_base : (float)Math.Sqrt(VAR_FLOAT + (tf_base * tf_base) - tf_min); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, int VAR_INT) { delete0(VAR_INT, VAR_INT); return this; }
public virtual bool METHOD_NAME() { return this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR; }
public int METHOD_NAME(int VAR_INT) { return linkTable.GetLastInternalSheetIndexForExtIndex(VAR_INT); }
public PlainTextDictionary(Stream VAR_STREAM) { @in = IOUtils.GetDecodingReader(VAR_STREAM, Encoding.UTF8); }
public LittleEndianByteArrayOutputStream(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > VAR_BYTE[].Length) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_BYTE[].Length + LITERAL_STRING); } _buf = VAR_BYTE[]; _writeIndex = VAR_INT; _endIndex = VAR_INT + VAR_INT; if (_endIndex < VAR_INT || _endIndex > VAR_BYTE[].Length) { throw new ArgumentException(LITERAL_STRING + _endIndex + LITERAL_STRING + _writeIndex + LITERAL_STRING + VAR_BYTE[].Length + LITERAL_STRING); } }
public void METHOD_NAME(MergeCellsRecord[] VAR_MERGECELLSRECORD[]) { for (int i = LITERAL_INT; i < VAR_MERGECELLSRECORD[].Length; i++) { AddMergeCellsRecord(VAR_MERGECELLSRECORD[][i]); } }
public virtual DescribeInternetGatewaysResponse METHOD_NAME(DescribeInternetGatewaysRequest VAR_DESCRIBEINTERNETGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInternetGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInternetGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeInternetGatewaysResponse>(VAR_DESCRIBEINTERNETGATEWAYSREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_LASTSAVE_DTM); }
public bool METHOD_NAME() { return hitEndImpl(address); }
public virtual ListSkillsResponse METHOD_NAME(ListSkillsRequest VAR_LISTSKILLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSkillsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSkillsResponseUnmarshaller.Instance; return Invoke<ListSkillsResponse>(VAR_LISTSKILLSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (VAR_LONG << LITERAL_INT) | (VAR_LONG << LITERAL_INT) | VAR_LONG; } }
public virtual GetCloudFrontOriginAccessIdentityResponse METHOD_NAME(GetCloudFrontOriginAccessIdentityRequest VAR_GETCLOUDFRONTORIGINACCESSIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCloudFrontOriginAccessIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityResponse>(VAR_GETCLOUDFRONTORIGINACCESSIDENTITYREQUEST, VAR_VAR); }
public override bool METHOD_NAME(RevWalk VAR_REVWALK, RevCommit VAR_REVCOMMIT) { return false; }
public DocumentStoredFieldVisitor() { this.fieldsToAdd = LITERAL_NULL; }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], IConditionalFormattingRule[] VAR_ICONDITIONALFORMATTINGRULE[]) { if (VAR_CELLRANGEADDRESS[] == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } if (VAR_ICONDITIONALFORMATTINGRULE[] == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } if (VAR_ICONDITIONALFORMATTINGRULE[].Length == LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } if (VAR_ICONDITIONALFORMATTINGRULE[].Length > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } CFRuleRecord[] VAR_CFRULERECORD[] = new CFRuleRecord[VAR_ICONDITIONALFORMATTINGRULE[].Length]; for (int i = LITERAL_INT; i != VAR_ICONDITIONALFORMATTINGRULE[].Length; i++) { VAR_CFRULERECORD[][i] = ((HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE[][i]).CfRuleRecord; } CFRecordsAggregate VAR_CFRECORDSAGGREGATE = new CFRecordsAggregate(VAR_CELLRANGEADDRESS[], VAR_CFRULERECORD[]); return _conditionalFormattingTable.Add(VAR_CFRECORDSAGGREGATE); }
public virtual java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_FLOAT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_FLOAT[][i] = METHOD_NAME(); } } return this; }
public void METHOD_NAME() { pos = LITERAL_INT; }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { int VAR_INT = VAR_TREEWALK.IsPathPrefix(raw, raw.Length); if (VAR_INT > LITERAL_INT) { throw StopWalkException.INSTANCE; } return VAR_INT == LITERAL_INT; }
public virtual TagDeliveryStreamResponse METHOD_NAME(TagDeliveryStreamRequest VAR_TAGDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagDeliveryStreamResponseUnmarshaller.Instance; return Invoke<TagDeliveryStreamResponse>(VAR_TAGDELIVERYSTREAMREQUEST, VAR_VAR); }
public NormalisedDecimal METHOD_NAME() { return NormalisedDecimal.Create(_significand, _binaryExponent); }
public java.util.NavigableSet<K> METHOD_NAME() { return new java.util.TreeMap<K, V>.BoundedMap(this._enclosing, !this.ascending, this.from, this.fromBound, this.to, this.toBound).navigableKeySet(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_row); VAR_ILITTLEENDIANOUTPUT.WriteShort(_first_col); int VAR_INT = _xfs.Length; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_xfs[i]); } VAR_ILITTLEENDIANOUTPUT.WriteShort(_last_col); }
public byte[] METHOD_NAME() { byte[] VAR_BYTE[] = new byte[SIZE]; LittleEndian.PutInt(VAR_BYTE[], LITERAL_INT * LittleEndian.INT_SIZE, _dwLowDateTime); LittleEndian.PutInt(VAR_BYTE[], LITERAL_INT * LittleEndian.INT_SIZE, _dwHighDateTime); return VAR_BYTE[]; }
public virtual DiffCommand METHOD_NAME() { return new DiffCommand(repo); }
public virtual ModifySnapshotAttributeResponse METHOD_NAME(ModifySnapshotAttributeRequest VAR_MODIFYSNAPSHOTATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySnapshotAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySnapshotAttributeResponseUnmarshaller.Instance; return Invoke<ModifySnapshotAttributeResponse>(VAR_MODIFYSNAPSHOTATTRIBUTEREQUEST, VAR_VAR); }
public virtual CreateSubnetResponse METHOD_NAME(CreateSubnetRequest VAR_CREATESUBNETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSubnetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSubnetResponseUnmarshaller.Instance; return Invoke<CreateSubnetResponse>(VAR_CREATESUBNETREQUEST, VAR_VAR); }
public override java.util.List<E> METHOD_NAME(int VAR_INT, int VAR_INT) { return new java.util.Collections.UnmodifiableRandomAccessList<E>(list.METHOD_NAME(VAR_INT, VAR_INT)); }
public long METHOD_NAME() { if (!(ClipboardFormatTag == CFTAG_WINDOWS)) throw new HPSFException(LITERAL_STRING + LITERAL_STRING); return LittleEndian.GetInt(this.ThumbnailData, OFFSet_CF); }
public HSSFDataValidation(CellRangeAddressList VAR_CELLRANGEADDRESSLIST, IDataValidationConstraint VAR_IDATAVALIDATIONCONSTRAINT) { _regions = VAR_CELLRANGEADDRESSLIST; _constraint = (DVConstraint)VAR_IDATAVALIDATIONCONSTRAINT; }
public virtual NGit.Api.DiffCommand METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; return this; }
public virtual DeleteSegmentResponse METHOD_NAME(DeleteSegmentRequest VAR_DELETESEGMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSegmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSegmentResponseUnmarshaller.Instance; return Invoke<DeleteSegmentResponse>(VAR_DELETESEGMENTREQUEST, VAR_VAR); }
public virtual AcceptVpcPeeringConnectionResponse METHOD_NAME(AcceptVpcPeeringConnectionRequest VAR_ACCEPTVPCPEERINGCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptVpcPeeringConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptVpcPeeringConnectionResponseUnmarshaller.Instance; return Invoke<AcceptVpcPeeringConnectionResponse>(VAR_ACCEPTVPCPEERINGCONNECTIONREQUEST, VAR_VAR); }
public java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); }
public PortugueseLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public RefPtg(int VAR_INT, int VAR_INT, bool VAR_BOOL, bool VAR_BOOL) : base(row, column, isRowRelative, isColumnRelative) { Row = VAR_INT; Column = VAR_INT; IsRowRelative = VAR_BOOL; IsColRelative = VAR_BOOL; }
public virtual ExportJournalToS3Response METHOD_NAME(ExportJournalToS3Request VAR_EXPORTJOURNALTOS3REQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportJournalToS3RequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportJournalToS3ResponseUnmarshaller.Instance; return Invoke<ExportJournalToS3Response>(VAR_EXPORTJOURNALTOS3REQUEST, VAR_VAR); }
public virtual AssociatePhoneNumbersWithVoiceConnectorGroupResponse METHOD_NAME(AssociatePhoneNumbersWithVoiceConnectorGroupRequest VAR_ASSOCIATEPHONENUMBERSWITHVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<AssociatePhoneNumbersWithVoiceConnectorGroupResponse>(VAR_ASSOCIATEPHONENUMBERSWITHVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public RecursivePrefixTreeStrategy(SpatialPrefixTree VAR_SPATIALPREFIXTREE, string VAR_STRING) : base(grid, fieldName, true) { prefixGridScanLevel = VAR_SPATIALPREFIXTREE.MaxLevels - LITERAL_INT; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { VAR_INT[][VAR_INT++] = ((VAR_BYTE[][VAR_INT++] & LITERAL_INT) << LITERAL_INT) | (VAR_BYTE[][VAR_INT++] & LITERAL_INT); } }
public GetAlbumsByNamesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public SendRawEmailRequest(RawMessage VAR_RAWMESSAGE) { _rawMessage = VAR_RAWMESSAGE; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is NGramPhraseQuery)) { return false; } NGramPhraseQuery VAR_NGRAMPHRASEQUERY = (NGramPhraseQuery)VAR_OBJECT; if (this.n != VAR_NGRAMPHRASEQUERY.n) { return false; } return base.METHOD_NAME(VAR_NGRAMPHRASEQUERY); }
public Rule(string VAR_STRING, int VAR_INT, string VAR_STRING) { this.m_suffix = VAR_STRING.ToCharArray(); this.m_replacement = VAR_STRING.ToCharArray(); this.m_min = VAR_INT; }
public virtual ListDataSetsResponse METHOD_NAME(ListDataSetsRequest VAR_LISTDATASETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDataSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDataSetsResponseUnmarshaller.Instance; return Invoke<ListDataSetsResponse>(VAR_LISTDATASETSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(E VAR_E, int VAR_INT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_E, VAR_OBJECT[], LITERAL_INT, VAR_INT); }
public virtual StopDBClusterResponse METHOD_NAME(StopDBClusterRequest VAR_STOPDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopDBClusterResponseUnmarshaller.Instance; return Invoke<StopDBClusterResponse>(VAR_STOPDBCLUSTERREQUEST, VAR_VAR); }
public virtual ListRuleNamesByTargetResponse METHOD_NAME(ListRuleNamesByTargetRequest VAR_LISTRULENAMESBYTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRuleNamesByTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRuleNamesByTargetResponseUnmarshaller.Instance; return Invoke<ListRuleNamesByTargetResponse>(VAR_LISTRULENAMESBYTARGETREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { _in.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); }
public SSTRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_num_strings = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_num_unique_strings = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_strings = new IntMapper<UnicodeString>(); deserializer = new SSTDeserializer(field_3_strings); deserializer.ManufactureStrings(field_2_num_unique_strings, VAR_RECORDINPUTSTREAM); }
public virtual DeleteBatchPredictionResponse METHOD_NAME(DeleteBatchPredictionRequest VAR_DELETEBATCHPREDICTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBatchPredictionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBatchPredictionResponseUnmarshaller.Instance; return Invoke<DeleteBatchPredictionResponse>(VAR_DELETEBATCHPREDICTIONREQUEST, VAR_VAR); }
public virtual SetReceiptRulePositionResponse METHOD_NAME(SetReceiptRulePositionRequest VAR_SETRECEIPTRULEPOSITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetReceiptRulePositionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetReceiptRulePositionResponseUnmarshaller.Instance; return Invoke<SetReceiptRulePositionResponse>(VAR_SETRECEIPTRULEPOSITIONREQUEST, VAR_VAR); }
public Ref3DPtg(String VAR_STRING, int VAR_INT) { CellReference VAR_CELLREFERENCE = new CellReference(VAR_STRING); Row = VAR_CELLREFERENCE.Row; Column = VAR_CELLREFERENCE.Col; IsColRelative = !VAR_CELLREFERENCE.IsColAbsolute; IsRowRelative = !VAR_CELLREFERENCE.IsRowAbsolute; ExternSheetIndex = VAR_INT; }
public DisableAvailabilityZonesForLoadBalancerRequest(string VAR_STRING, List<string> VAR_LIST<STRING>) { _loadBalancerName = VAR_STRING; _availabilityZones = VAR_LIST<STRING>; }
public override java.util.Set<java.util.MapClass.Entry<K, V>> METHOD_NAME() { java.util.Set<java.util.MapClass.Entry<K, V>> VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> = _entrySet; return (VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> != LITERAL_NULL) ? VAR_JAVA.UTIL.SET<JAVA.UTIL.MAPCLASS.ENTRY<K, V>> : (_entrySet = new java.util.HashMap<K, V>.EntrySet(this)); }
public char[] METHOD_NAME(int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT); Debug.Assert(InBounds(VAR_INT), LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT); int VAR_INT = GetIndex(VAR_INT); int VAR_INT = GetIndex(VAR_INT + VAR_INT); var VAR_VAR = new char[VAR_INT]; if (VAR_INT >= VAR_INT && VAR_INT < buffer.Length) { Array.Copy(buffer, VAR_INT, VAR_VAR, LITERAL_INT, VAR_INT - VAR_INT); } else { int VAR_INT = buffer.Length - VAR_INT; Array.Copy(buffer, VAR_INT, VAR_VAR, LITERAL_INT, VAR_INT); Array.Copy(buffer, LITERAL_INT, VAR_VAR, buffer.Length - VAR_INT, VAR_INT - VAR_INT); } return VAR_VAR; }
public IndexInput METHOD_NAME(string VAR_STRING, IOContext VAR_IOCONTEXT)throws IOException { ensureOpen() ; if (VAR_IOCONTEXT.VAR_IOCONTEXT !=Context.MERGE ||VAR_IOCONTEXT.mergeInfo.estimatedMergeBytes<minBytesDirect ||fileLength(VAR_STRING) <minBytesDirect ) { return @delegate.METHOD_NAME(VAR_STRING, VAR_IOCONTEXT) ; } else { return new NativeUnixIndexInput(new File(Directory, VAR_STRING), mergeBufferSize); } }
public EscherArrayProperty(short VAR_SHORT, byte[] VAR_BYTE[]) : base(id, CheckComplexData(complexData)) { emptyComplexPart = VAR_BYTE[].Length == LITERAL_INT; }
public NamePtg(int VAR_INT) { field_1_label_index = LITERAL_INT + VAR_INT; }
public virtual DescribeHumanLoopResponse METHOD_NAME(DescribeHumanLoopRequest VAR_DESCRIBEHUMANLOOPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHumanLoopRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHumanLoopResponseUnmarshaller.Instance; return Invoke<DescribeHumanLoopResponse>(VAR_DESCRIBEHUMANLOOPREQUEST, VAR_VAR); }
public virtual PutDedicatedIpInPoolResponse METHOD_NAME(PutDedicatedIpInPoolRequest VAR_PUTDEDICATEDIPINPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutDedicatedIpInPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutDedicatedIpInPoolResponseUnmarshaller.Instance; return Invoke<PutDedicatedIpInPoolResponse>(VAR_PUTDEDICATEDIPINPOOLREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_number_crn_records); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_sheet_table_index); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ObjectId METHOD_NAME(int VAR_INT, long VAR_LONG, InputStream VAR_INPUTSTREAM) { MessageDigest VAR_MESSAGEDIGEST = Digest(); VAR_MESSAGEDIGEST.Update(Constants.EncodedTypeString(VAR_INT)); VAR_MESSAGEDIGEST.Update(unchecked((byte)LITERAL_CHAR)); VAR_MESSAGEDIGEST.Update(Constants.EncodeASCII(VAR_LONG)); VAR_MESSAGEDIGEST.Update(unchecked((byte)LITERAL_INT)); byte[] VAR_BYTE[] = Buffer(); while (VAR_LONG > LITERAL_INT) { int VAR_INT = VAR_INPUTSTREAM.Read(VAR_BYTE[], LITERAL_INT, (int)Math.Min(VAR_LONG, VAR_BYTE[].Length)); if (VAR_INT < LITERAL_INT) { throw new EOFException(LITERAL_STRING); } VAR_MESSAGEDIGEST.Update(VAR_BYTE[], LITERAL_INT, VAR_INT); VAR_LONG -= VAR_INT; } return ObjectId.FromRaw(VAR_MESSAGEDIGEST.Digest()); }
public virtual IList<Search.Query> METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { List<Search.Query> VAR_LIST<SEARCH.QUERY> = new List<Search.Query>(); IEnumerator<SrndQuery> VAR_IENUMERATOR<SRNDQUERY> = GetSubQueriesEnumerator(); while (VAR_IENUMERATOR<SRNDQUERY>.MoveNext()) { VAR_LIST<SEARCH.QUERY>.Add((VAR_IENUMERATOR<SRNDQUERY>.Current).MakeLuceneQueryField(VAR_STRING, VAR_BASICQUERYFACTORY)); } return VAR_LIST<SEARCH.QUERY>; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual IQueryNode METHOD_NAME(IQueryNode VAR_IQUERYNODE) { Operator? VAR_OPERATOR? = GetQueryConfigHandler().Get(ConfigurationKeys.DEFAULT_OPERATOR); if (VAR_OPERATOR? == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } this.usingAnd = Operator.AND == VAR_OPERATOR?; return ProcessIteration(VAR_IQUERYNODE); }
public virtual StartDBClusterResponse METHOD_NAME(StartDBClusterRequest VAR_STARTDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDBClusterResponseUnmarshaller.Instance; return Invoke<StartDBClusterResponse>(VAR_STARTDBCLUSTERREQUEST, VAR_VAR); }
public Ptg[] METHOD_NAME() { return Formula.GetTokens(field_5_name_definition); }
public override sealed long METHOD_NAME() { return bufferStart + bufferPosition; }
public virtual ListDevicesResponse METHOD_NAME(ListDevicesRequest VAR_LISTDEVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDevicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDevicesResponseUnmarshaller.Instance; return Invoke<ListDevicesResponse>(VAR_LISTDEVICESREQUEST, VAR_VAR); }
public ApplyTokenRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual EnableVpcClassicLinkDnsSupportResponse METHOD_NAME(EnableVpcClassicLinkDnsSupportRequest VAR_ENABLEVPCCLASSICLINKDNSSUPPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableVpcClassicLinkDnsSupportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableVpcClassicLinkDnsSupportResponseUnmarshaller.Instance; return Invoke<EnableVpcClassicLinkDnsSupportResponse>(VAR_ENABLEVPCCLASSICLINKDNSSUPPORTREQUEST, VAR_VAR); }
public virtual ModifyClusterDbRevisionResponse METHOD_NAME(ModifyClusterDbRevisionRequest VAR_MODIFYCLUSTERDBREVISIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterDbRevisionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterDbRevisionResponseUnmarshaller.Instance; return Invoke<ModifyClusterDbRevisionResponse>(VAR_MODIFYCLUSTERDBREVISIONREQUEST, VAR_VAR); }
public java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[]) { return METHOD_NAME(VAR_LONG[], LITERAL_INT, VAR_LONG[].Length); }
public virtual object METHOD_NAME() { throw new System.NotImplementedException(); }
public LinkFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual RemoveAttributesResponse METHOD_NAME(RemoveAttributesRequest VAR_REMOVEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveAttributesResponseUnmarshaller.Instance; return Invoke<RemoveAttributesResponse>(VAR_REMOVEATTRIBUTESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public String METHOD_NAME(String[] VAR_STRING[]) { return LITERAL_STRING + VAR_STRING[][LITERAL_INT] + LITERAL_STRING; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } PostingsAndFreq VAR_POSTINGSANDFREQ = (PostingsAndFreq)VAR_OBJECT; if (docFreq != VAR_POSTINGSANDFREQ.docFreq) { return false; } if (position != VAR_POSTINGSANDFREQ.position) { return false; } if (terms == LITERAL_NULL) { return VAR_POSTINGSANDFREQ.terms == LITERAL_NULL; } return Arrays.METHOD_NAME(terms, VAR_POSTINGSANDFREQ.terms); }
public virtual ModifyMountTargetSecurityGroupsResponse METHOD_NAME(ModifyMountTargetSecurityGroupsRequest VAR_MODIFYMOUNTTARGETSECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyMountTargetSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<ModifyMountTargetSecurityGroupsResponse>(VAR_MODIFYMOUNTTARGETSECURITYGROUPSREQUEST, VAR_VAR); }
public virtual ListBatchInferenceJobsResponse METHOD_NAME(ListBatchInferenceJobsRequest VAR_LISTBATCHINFERENCEJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBatchInferenceJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBatchInferenceJobsResponseUnmarshaller.Instance; return Invoke<ListBatchInferenceJobsResponse>(VAR_LISTBATCHINFERENCEJOBSREQUEST, VAR_VAR); }
public virtual long METHOD_NAME(int VAR_INT) { if (count <= VAR_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } return entries[VAR_INT]; }
public LimitTokenPositionFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { maxTokenPosition = RequireInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_TOKEN_POSITION_KEY); consumeAllTokens = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, CONSUME_ALL_TOKENS_KEY, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public SaveRecalcRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_recalc = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual DeleteSecurityGroupResponse METHOD_NAME(DeleteSecurityGroupRequest VAR_DELETESECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSecurityGroupResponseUnmarshaller.Instance; return Invoke<DeleteSecurityGroupResponse>(VAR_DELETESECURITYGROUPREQUEST, VAR_VAR); }
public virtual IntervalSet METHOD_NAME() { return Atn.METHOD_NAME(State, Context); }
public virtual void METHOD_NAME(long VAR_LONG) { METHOD_NAME(VAR_LONG.ToString()); }
public virtual ResetPersonalPINResponse METHOD_NAME(ResetPersonalPINRequest VAR_RESETPERSONALPINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetPersonalPINRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetPersonalPINResponseUnmarshaller.Instance; return Invoke<ResetPersonalPINResponse>(VAR_RESETPERSONALPINREQUEST, VAR_VAR); }
public virtual StartSmartHomeApplianceDiscoveryResponse METHOD_NAME(StartSmartHomeApplianceDiscoveryRequest VAR_STARTSMARTHOMEAPPLIANCEDISCOVERYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartSmartHomeApplianceDiscoveryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartSmartHomeApplianceDiscoveryResponseUnmarshaller.Instance; return Invoke<StartSmartHomeApplianceDiscoveryResponse>(VAR_STARTSMARTHOMEAPPLIANCEDISCOVERYREQUEST, VAR_VAR); }
public Query METHOD_NAME(string VAR_STRING) { char[] VAR_CHAR[] = VAR_STRING.ToCharArray(); char[] VAR_CHAR[] = new char[VAR_CHAR[].Length]; State VAR_STATE = new State(VAR_CHAR[], VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); ParseSubQuery(VAR_STATE); return VAR_STATE.Top; }
public virtual void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; returned = false; }
public virtual ICollection<TransportProtocol.URIishField> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(EnumSet.Of(TransportProtocol.URIishField.PATH)); }
public Config(NGit.Config VAR_NGIT.CONFIG) { baseConfig = VAR_NGIT.CONFIG; state = new AtomicReference<ConfigSnapshot>(NewState()); }
public virtual PutAccountSuppressionAttributesResponse METHOD_NAME(PutAccountSuppressionAttributesRequest VAR_PUTACCOUNTSUPPRESSIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccountSuppressionAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccountSuppressionAttributesResponseUnmarshaller.Instance; return Invoke<PutAccountSuppressionAttributesResponse>(VAR_PUTACCOUNTSUPPRESSIONATTRIBUTESREQUEST, VAR_VAR); }
public BufferedIndexInput(string VAR_STRING, int VAR_INT) : base(resourceDesc) { CheckBufferSize(VAR_INT); this.VAR_INT = VAR_INT; }
public virtual DescribeDocumentClassifierResponse METHOD_NAME(DescribeDocumentClassifierRequest VAR_DESCRIBEDOCUMENTCLASSIFIERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDocumentClassifierRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDocumentClassifierResponseUnmarshaller.Instance; return Invoke<DescribeDocumentClassifierResponse>(VAR_DESCRIBEDOCUMENTCLASSIFIERREQUEST, VAR_VAR); }
public static Function METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case FunctionID.INDIRECT: case FunctionID.EXTERNAL_FUNC: return LITERAL_NULL; } Function VAR_FUNCTION = functions[VAR_INT]; if (VAR_FUNCTION == LITERAL_NULL) { throw new NotImplementedException(LITERAL_STRING + VAR_INT); } return VAR_FUNCTION; }
public virtual DeleteFacetResponse METHOD_NAME(DeleteFacetRequest VAR_DELETEFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFacetResponseUnmarshaller.Instance; return Invoke<DeleteFacetResponse>(VAR_DELETEFACETREQUEST, VAR_VAR); }
public NameXPtg METHOD_NAME(String VAR_STRING, int VAR_INT, UDFFinder VAR_UDFFINDER) { LinkTable VAR_LINKTABLE = OrCreateLinkTable; NameXPtg VAR_NAMEXPTG = VAR_LINKTABLE.METHOD_NAME(VAR_STRING, VAR_INT); if (VAR_NAMEXPTG == LITERAL_NULL && VAR_UDFFINDER.FindFunction(VAR_STRING) != LITERAL_NULL) { VAR_NAMEXPTG = VAR_LINKTABLE.AddNameXPtg(VAR_STRING); } return VAR_NAMEXPTG; }
public virtual int METHOD_NAME() { return index; }
public override String METHOD_NAME() { return FormatReferenceAsString(); }
public virtual AllocateTransitVirtualInterfaceResponse METHOD_NAME(AllocateTransitVirtualInterfaceRequest VAR_ALLOCATETRANSITVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateTransitVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateTransitVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<AllocateTransitVirtualInterfaceResponse>(VAR_ALLOCATETRANSITVIRTUALINTERFACEREQUEST, VAR_VAR); }
public PushbackInputStream(java.io.InputStream VAR_JAVA.IO.INPUTSTREAM) : base(@in) { buf = (VAR_JAVA.IO.INPUTSTREAM == LITERAL_NULL) ? LITERAL_NULL : new byte[LITERAL_INT]; pos = LITERAL_INT; }
public virtual int METHOD_NAME(PostingsAndFreq VAR_POSTINGSANDFREQ) { if (docFreq != VAR_POSTINGSANDFREQ.docFreq) { return docFreq - VAR_POSTINGSANDFREQ.docFreq; } if (position != VAR_POSTINGSANDFREQ.position) { return position - VAR_POSTINGSANDFREQ.position; } if (nTerms != VAR_POSTINGSANDFREQ.nTerms) { return nTerms - VAR_POSTINGSANDFREQ.nTerms; } if (nTerms == LITERAL_INT) { return LITERAL_INT; } for (int i = LITERAL_INT; i < terms.Length; i++) { int VAR_INT = terms[i].METHOD_NAME(VAR_POSTINGSANDFREQ.terms[i]); if (VAR_INT != LITERAL_INT) { return VAR_INT; } } return LITERAL_INT; }
public void METHOD_NAME(IEvaluationCell VAR_IEVALUATIONCELL) { int VAR_INT = GetSheetIndex(VAR_IEVALUATIONCELL.Sheet); _cache.METHOD_NAME(_workbookIx, VAR_INT, VAR_IEVALUATIONCELL); }
public virtual NGit.BatchRefUpdate METHOD_NAME(bool VAR_BOOL) { allowNonFastForwards = VAR_BOOL; return this; }
public virtual UpdateRouteResponse METHOD_NAME(UpdateRouteRequest VAR_UPDATEROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRouteResponseUnmarshaller.Instance; return Invoke<UpdateRouteResponse>(VAR_UPDATEROUTEREQUEST, VAR_VAR); }
public DoubleConstValueSource(double VAR_DOUBLE) { this.VAR_DOUBLE = VAR_DOUBLE; this.fv = (float)VAR_DOUBLE; this.lv = (long)VAR_DOUBLE; }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT > YyLength) { ZzScanError(ZZ_PUSHBACK_2BIG); } zzMarkedPos -= VAR_INT; }
public override int METHOD_NAME(int VAR_INT) { return returnStates[VAR_INT]; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<SrndQuery> VAR_ILIST<SRNDQUERY>; Token VAR_TOKEN; VAR_SRNDQUERY = PrimaryQuery(); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.W: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_6; } VAR_TOKEN = Jj_consume_token(RegexpToken.W); VAR_ILIST<SRNDQUERY> = new List<SrndQuery>(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); VAR_SRNDQUERY = PrimaryQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); VAR_SRNDQUERY = GetDistanceQuery(VAR_ILIST<SRNDQUERY>, true, VAR_TOKEN, true); } label_6: { if (true) return VAR_SRNDQUERY; } throw new Exception(LITERAL_STRING); }
public virtual ListHITsResponse METHOD_NAME(ListHITsRequest VAR_LISTHITSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHITsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHITsResponseUnmarshaller.Instance; return Invoke<ListHITsResponse>(VAR_LISTHITSREQUEST, VAR_VAR); }
public virtual ICollection<string> METHOD_NAME(string VAR_STRING) { return GetState().METHOD_NAME(VAR_STRING); }
public virtual AttachDiskResponse METHOD_NAME(AttachDiskRequest VAR_ATTACHDISKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachDiskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachDiskResponseUnmarshaller.Instance; return Invoke<AttachDiskResponse>(VAR_ATTACHDISKREQUEST, VAR_VAR); }
public virtual DescribePoliciesResponse METHOD_NAME(DescribePoliciesRequest VAR_DESCRIBEPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePoliciesResponseUnmarshaller.Instance; return Invoke<DescribePoliciesResponse>(VAR_DESCRIBEPOLICIESREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return _limit == LITERAL_INT; }
public HSSFCombobox(HSSFShape VAR_HSSFSHAPE, HSSFAnchor VAR_HSSFANCHOR) : base(parent, anchor) { base.ShapeType = (OBJECT_TYPE_COMBO_BOX); CommonObjectDataSubRecord VAR_COMMONOBJECTDATASUBRECORD = (CommonObjectDataSubRecord)GetObjRecord().SubRecords[LITERAL_INT]; VAR_COMMONOBJECTDATASUBRECORD.ObjectType = CommonObjectType.ComboBox; }
public void METHOD_NAME(short VAR_SHORT) { field_1_calcmode = VAR_SHORT; }
public void METHOD_NAME(double VAR_DOUBLE) { METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); }
public virtual AssociateAddressResponse METHOD_NAME(AssociateAddressRequest VAR_ASSOCIATEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateAddressResponseUnmarshaller.Instance; return Invoke<AssociateAddressResponse>(VAR_ASSOCIATEADDRESSREQUEST, VAR_VAR); }
public virtual ConfirmConnectionResponse METHOD_NAME(ConfirmConnectionRequest VAR_CONFIRMCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfirmConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfirmConnectionResponseUnmarshaller.Instance; return Invoke<ConfirmConnectionResponse>(VAR_CONFIRMCONNECTIONREQUEST, VAR_VAR); }
public UseSelFSRecord(bool VAR_BOOL) : this(LITERAL_INT) { _options = useNaturalLanguageFormulasFlag.SetBoolean(_options, VAR_BOOL); }
public virtual void METHOD_NAME(string VAR_STRING, TokenStream VAR_TOKENSTREAM) { offsetAtt = VAR_TOKENSTREAM.AddAttribute<IOffsetAttribute>(); currentNumFrags = LITERAL_INT; }
public override FieldFragList METHOD_NAME(FieldPhraseList VAR_FIELDPHRASELIST, int VAR_INT) { return METHOD_NAME(VAR_FIELDPHRASELIST, new SimpleFieldFragList(VAR_INT), VAR_INT); }
public virtual StopImageBuilderResponse METHOD_NAME(StopImageBuilderRequest VAR_STOPIMAGEBUILDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopImageBuilderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopImageBuilderResponseUnmarshaller.Instance; return Invoke<StopImageBuilderResponse>(VAR_STOPIMAGEBUILDERREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { throw new System.NotImplementedException(); }
public static long METHOD_NAME(long[] VAR_LONG[], long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG += (VAR_LONG[][i] ^ VAR_LONG[][i]).PopCount(); } return VAR_LONG; }
public virtual GetDocumentResponse METHOD_NAME(GetDocumentRequest VAR_GETDOCUMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentResponseUnmarshaller.Instance; return Invoke<GetDocumentResponse>(VAR_GETDOCUMENTREQUEST, VAR_VAR); }
public partial interface IOperations { Task<AzureOperationResponse<IEnumerable<Operation>>> METHOD_NAME(Dictionary<string, List<string>> VAR_DICTIONARY<STRING, LIST<STRING>> = LITERAL_NULL, CancellationToken VAR_CANCELLATIONTOKEN = default(CancellationToken)); }
public virtual PutPermissionResponse METHOD_NAME(PutPermissionRequest VAR_PUTPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutPermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutPermissionResponseUnmarshaller.Instance; return Invoke<PutPermissionResponse>(VAR_PUTPERMISSIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(LITERAL_INT); VAR_ILITTLEENDIANOUTPUT.WriteInt(FirstRow); VAR_ILITTLEENDIANOUTPUT.WriteInt(LastRowAdd1); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_zero); for (int k = LITERAL_INT; k < NumDbcells; k++) { VAR_ILITTLEENDIANOUTPUT.WriteInt(GetDbcellAt(k)); } }
public HSSFFormulaEvaluator(IWorkbook VAR_IWORKBOOK) : this(workbook, LITERAL_NULL) { this.VAR_IWORKBOOK = VAR_IWORKBOOK; }
public virtual int METHOD_NAME(char VAR_CHAR) { int VAR_INT = LITERAL_INT; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR & LITERAL_INT; VAR_INT = ((VAR_INT << LITERAL_INT) + VAR_INT) + VAR_CHAR >> LITERAL_INT; return VAR_INT; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public static SimpleFraction METHOD_NAME(double VAR_DOUBLE, int VAR_INT) { int VAR_INT = (int)Math.Round(VAR_DOUBLE * (double)VAR_INT, MidpointRounding.AwayFromZero); return new SimpleFraction(VAR_INT, VAR_INT); }
public virtual DescribeInsightRulesResponse METHOD_NAME(DescribeInsightRulesRequest VAR_DESCRIBEINSIGHTRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInsightRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInsightRulesResponseUnmarshaller.Instance; return Invoke<DescribeInsightRulesResponse>(VAR_DESCRIBEINSIGHTRULESREQUEST, VAR_VAR); }
public ListMFADevicesRequest(string VAR_STRING) { _userName = VAR_STRING; }
public void METHOD_NAME(RowRecord VAR_ROWRECORD) { int VAR_INT = VAR_ROWRECORD.RowNumber; _valuesAgg.RemoveAllCellsValuesForRow(VAR_INT); int VAR_INT = VAR_INT; RowRecord VAR_ROWRECORD = (RowRecord)_rowRecords[VAR_INT]; _rowRecords.Remove(VAR_INT); if (VAR_ROWRECORD == LITERAL_NULL) { throw new Exception(LITERAL_STRING + VAR_INT + LITERAL_STRING); } if (VAR_ROWRECORD != VAR_ROWRECORD) { _rowRecords[VAR_INT] = VAR_ROWRECORD; throw new Exception(LITERAL_STRING); } _rowRecordValues = LITERAL_NULL; }
public virtual DeleteRepositoryPolicyResponse METHOD_NAME(DeleteRepositoryPolicyRequest VAR_DELETEREPOSITORYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRepositoryPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRepositoryPolicyResponseUnmarshaller.Instance; return Invoke<DeleteRepositoryPolicyResponse>(VAR_DELETEREPOSITORYPOLICYREQUEST, VAR_VAR); }
public BackupRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_backup = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual NGit.Api.DiffCommand METHOD_NAME(AbstractTreeIterator VAR_ABSTRACTTREEITERATOR) { this.VAR_ABSTRACTTREEITERATOR = VAR_ABSTRACTTREEITERATOR; return this; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT; } } }
public void METHOD_NAME(Lexer VAR_LEXER) { action.METHOD_NAME(VAR_LEXER); }
public virtual DeleteModelPackageResponse METHOD_NAME(DeleteModelPackageRequest VAR_DELETEMODELPACKAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteModelPackageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteModelPackageResponseUnmarshaller.Instance; return Invoke<DeleteModelPackageResponse>(VAR_DELETEMODELPACKAGEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return mValue; }
public void METHOD_NAME(short VAR_SHORT) { METHOD_NAME(LITERAL_INT, _string.CharCount, VAR_SHORT); }
public SliceWriter(Int32BlockPool VAR_INT32BLOCKPOOL) { this.VAR_INT32BLOCKPOOL = VAR_INT32BLOCKPOOL; }
public virtual DisableVgwRoutePropagationResponse METHOD_NAME(DisableVgwRoutePropagationRequest VAR_DISABLEVGWROUTEPROPAGATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableVgwRoutePropagationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableVgwRoutePropagationResponseUnmarshaller.Instance; return Invoke<DisableVgwRoutePropagationResponse>(VAR_DISABLEVGWROUTEPROPAGATIONREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_name.NameText); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual AttachObjectResponse METHOD_NAME(AttachObjectRequest VAR_ATTACHOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachObjectResponseUnmarshaller.Instance; return Invoke<AttachObjectResponse>(VAR_ATTACHOBJECTREQUEST, VAR_VAR); }
public virtual CopyDBClusterParameterGroupResponse METHOD_NAME(CopyDBClusterParameterGroupRequest VAR_COPYDBCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyDBClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CopyDBClusterParameterGroupResponse>(VAR_COPYDBCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual GetRoutesResponse METHOD_NAME(GetRoutesRequest VAR_GETROUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRoutesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRoutesResponseUnmarshaller.Instance; return Invoke<GetRoutesResponse>(VAR_GETROUTESREQUEST, VAR_VAR); }
public override KeyValuePair<string, Ref> METHOD_NAME() { if (this.HasNext()) { Ent VAR_ENT = this.next; this.next = this.Peek(); return VAR_ENT; } throw new NoSuchElementException(); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (VAR_OBJECT is long) { return base.METHOD_NAME((long)VAR_OBJECT); } if (VAR_OBJECT is String) { return base.METHOD_NAME((long)dictionaryNameToID[(VAR_OBJECT)]); } return false; }
public UpdateNamespaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public virtual ListNotebookInstancesResponse METHOD_NAME(ListNotebookInstancesRequest VAR_LISTNOTEBOOKINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNotebookInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNotebookInstancesResponseUnmarshaller.Instance; return Invoke<ListNotebookInstancesResponse>(VAR_LISTNOTEBOOKINSTANCESREQUEST, VAR_VAR); }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public virtual DescribeGroupsResponse METHOD_NAME(DescribeGroupsRequest VAR_DESCRIBEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGroupsResponseUnmarshaller.Instance; return Invoke<DescribeGroupsResponse>(VAR_DESCRIBEGROUPSREQUEST, VAR_VAR); }
public virtual GetShippingLabelResponse METHOD_NAME(GetShippingLabelRequest VAR_GETSHIPPINGLABELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetShippingLabelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetShippingLabelResponseUnmarshaller.Instance; return Invoke<GetShippingLabelResponse>(VAR_GETSHIPPINGLABELREQUEST, VAR_VAR); }
public MonitorInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public AtomTransition(ATNState VAR_ATNSTATE, int VAR_INT) : base(target) { this.VAR_INT = VAR_INT; }
public MulRKRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_row = VAR_RECORDINPUTSTREAM.ReadUShort(); field_2_first_col = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_rks = RkRec.ParseRKs(VAR_RECORDINPUTSTREAM); field_4_last_col = VAR_RECORDINPUTSTREAM.ReadShort(); }
public State METHOD_NAME() { if (this.stateRegistry == LITERAL_NULL) { throw new InvalidOperationException(); } if (root.HasChildren) { ReplaceOrRegister(root); } stateRegistry = LITERAL_NULL; return root; }
public virtual DescribeWorkspaceDirectoriesResponse METHOD_NAME(DescribeWorkspaceDirectoriesRequest VAR_DESCRIBEWORKSPACEDIRECTORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspaceDirectoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspaceDirectoriesResponseUnmarshaller.Instance; return Invoke<DescribeWorkspaceDirectoriesResponse>(VAR_DESCRIBEWORKSPACEDIRECTORIESREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(int VAR_INT) { lock (this) { E VAR_E = (E)elements[VAR_INT]; removeRange(VAR_INT, VAR_INT + LITERAL_INT); return VAR_E; } }
public StreamTokenizer(java.io.InputStream VAR_JAVA.IO.INPUTSTREAM) { throw new System.NotImplementedException(); }
public virtual ModifyVpcPeeringConnectionOptionsResponse METHOD_NAME(ModifyVpcPeeringConnectionOptionsRequest VAR_MODIFYVPCPEERINGCONNECTIONOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcPeeringConnectionOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcPeeringConnectionOptionsResponseUnmarshaller.Instance; return Invoke<ModifyVpcPeeringConnectionOptionsResponse>(VAR_MODIFYVPCPEERINGCONNECTIONOPTIONSREQUEST, VAR_VAR); }
public virtual GetAppResponse METHOD_NAME(GetAppRequest VAR_GETAPPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAppRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAppResponseUnmarshaller.Instance; return Invoke<GetAppResponse>(VAR_GETAPPREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { if (!IsMainThread()) { throw new InvalidOperationException(); } pm.METHOD_NAME(VAR_INT); }
public virtual ModifyFleetResponse METHOD_NAME(ModifyFleetRequest VAR_MODIFYFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyFleetResponseUnmarshaller.Instance; return Invoke<ModifyFleetResponse>(VAR_MODIFYFLEETREQUEST, VAR_VAR); }
public virtual UpdateFolderResponse METHOD_NAME(UpdateFolderRequest VAR_UPDATEFOLDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFolderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFolderResponseUnmarshaller.Instance; return Invoke<UpdateFolderResponse>(VAR_UPDATEFOLDERREQUEST, VAR_VAR); }
public virtual CreateAppResponse METHOD_NAME(CreateAppRequest VAR_CREATEAPPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAppRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAppResponseUnmarshaller.Instance; return Invoke<CreateAppResponse>(VAR_CREATEAPPREQUEST, VAR_VAR); }
public static DVConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING, String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } OperatorType.ValidateSecondArg(VAR_INT, VAR_STRING); SimpleDateFormat VAR_SIMPLEDATEFORMAT = VAR_STRING == LITERAL_NULL ? LITERAL_NULL : new SimpleDateFormat(VAR_STRING); String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertDate(VAR_STRING, VAR_SIMPLEDATEFORMAT) : Double.NaN; String VAR_STRING = GetFormulaFromTextExpression(VAR_STRING); Double VAR_DOUBLE = VAR_STRING == LITERAL_NULL ? ConvertDate(VAR_STRING, VAR_SIMPLEDATEFORMAT) : Double.NaN; return new DVConstraint(ValidationType.DATE, VAR_INT, VAR_STRING, VAR_STRING, VAR_DOUBLE, VAR_DOUBLE, LITERAL_NULL); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LookupName(_functionIndex)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_numberOfArgs); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ModifyDefaultCreditSpecificationResponse METHOD_NAME(ModifyDefaultCreditSpecificationRequest VAR_MODIFYDEFAULTCREDITSPECIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDefaultCreditSpecificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDefaultCreditSpecificationResponseUnmarshaller.Instance; return Invoke<ModifyDefaultCreditSpecificationResponse>(VAR_MODIFYDEFAULTCREDITSPECIFICATIONREQUEST, VAR_VAR); }
public override Sharpen.Iterator<Note> METHOD_NAME() { try { return root.METHOD_NAME(new MutableObjectId(), reader); } catch (IOException e) { throw new RuntimeException(e); } }
public virtual ObjectId METHOD_NAME(TreeFormatter VAR_TREEFORMATTER) { return VAR_TREEFORMATTER.ComputeId(this); }
public virtual int METHOD_NAME() { return this.inputLength; }
public override void METHOD_NAME() { this._enclosing.refreshExpGroupMetadataList(true, true); this._enclosing.notifyDataSetInvalidated(); }
public virtual ITerminalNode METHOD_NAME(IToken VAR_ITOKEN) { TerminalNodeImpl VAR_TERMINALNODEIMPL = new TerminalNodeImpl(VAR_ITOKEN); METHOD_NAME(VAR_TERMINALNODEIMPL); VAR_TERMINALNODEIMPL.Parent = this; return VAR_TERMINALNODEIMPL; }
public virtual bool METHOD_NAME() { return type == JapaneseTokenizerType.UNKNOWN; }
public virtual bool METHOD_NAME(string VAR_STRING) { CredentialItem.Password VAR_CREDENTIALITEM.PASSWORD = new CredentialItem.Password(VAR_STRING); if (provider.Get(uri, VAR_CREDENTIALITEM.PASSWORD)) { password = new string (VAR_CREDENTIALITEM.PASSWORD.GetValue()); return true; } else { password = LITERAL_NULL; return false; } }
public virtual CreateTransitGatewayResponse METHOD_NAME(CreateTransitGatewayRequest VAR_CREATETRANSITGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayResponse>(VAR_CREATETRANSITGATEWAYREQUEST, VAR_VAR); }
public virtual CreateCampaignResponse METHOD_NAME(CreateCampaignRequest VAR_CREATECAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCampaignResponseUnmarshaller.Instance; return Invoke<CreateCampaignResponse>(VAR_CREATECAMPAIGNREQUEST, VAR_VAR); }
public ClientException(string VAR_STRING, string VAR_STRING) : base(errCode + LITERAL_STRING + errMsg) { ErrorCode = VAR_STRING; ErrorMessage = VAR_STRING; ErrorType = ErrorType.Client; }
public void METHOD_NAME(int VAR_INT) { _conditionalFormattingTable.Remove(VAR_INT); }
public static void METHOD_NAME(float[] VAR_FLOAT[], float VAR_FLOAT) { { for (int i = LITERAL_INT; i < VAR_FLOAT[].Length; i++) { VAR_FLOAT[][i] = VAR_FLOAT; } } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return dictionary == LITERAL_NULL ? VAR_TOKENSTREAM : new StemmerOverrideFilter(VAR_TOKENSTREAM, dictionary); }
public virtual ListS3ResourcesResponse METHOD_NAME(ListS3ResourcesRequest VAR_LISTS3RESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListS3ResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListS3ResourcesResponseUnmarshaller.Instance; return Invoke<ListS3ResourcesResponse>(VAR_LISTS3RESOURCESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + (char)from + LITERAL_STRING + (char)to + LITERAL_STRING; }
public override java.nio.DoubleBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual CreatePresignedNotebookInstanceUrlResponse METHOD_NAME(CreatePresignedNotebookInstanceUrlRequest VAR_CREATEPRESIGNEDNOTEBOOKINSTANCEURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePresignedNotebookInstanceUrlRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePresignedNotebookInstanceUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedNotebookInstanceUrlResponse>(VAR_CREATEPRESIGNEDNOTEBOOKINSTANCEURLREQUEST, VAR_VAR); }
public IterationRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _flags = VAR_RECORDINPUTSTREAM.ReadShort(); }
public CreateUserInfoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public void METHOD_NAME(BookSheetKey VAR_BOOKSHEETKEY, int VAR_INT, int VAR_INT, IEvaluationListener VAR_IEVALUATIONLISTENER) { if (_usedBlankCellGroup != LITERAL_NULL) { if (_usedBlankCellGroup.ContainsCell(VAR_BOOKSHEETKEY, VAR_INT, VAR_INT)) { ClearFormulaEntry(); RecurseClearCachedFormulaResults(VAR_IEVALUATIONLISTENER); } } }
public virtual Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(IIntSet VAR_IINTSET) { if (VAR_IINTSET == LITERAL_NULL) { return this; } if (VAR_IINTSET is Antlr4.Runtime.Misc.IntervalSet) { Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = (Antlr4.Runtime.Misc.IntervalSet)VAR_IINTSET; int VAR_INT = VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.intervals.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Interval VAR_INTERVAL = VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.intervals[i]; this.Add(VAR_INTERVAL.a, VAR_INTERVAL.b); } } else { foreach (int value in VAR_IINTSET.ToList()) { Add(value); } } return this; }
public OpenStringBuilder(char[] VAR_CHAR[], int VAR_INT) { Set(VAR_CHAR[], VAR_INT); }
public virtual bool METHOD_NAME() { return refLogIncludeResult; }
public HeaderFooterRecord(byte[] VAR_BYTE[]) { _rawData = VAR_BYTE[]; }
public byte[] METHOD_NAME() { return Arrays.CopyOf(path, path.Length); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Mode)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public HSSFChildAnchor() { _escherChildAnchor = new EscherChildAnchorRecord(); }
public bool METHOD_NAME() { return !canonicalName.StartsWith(LITERAL_STRING) && !canonicalName.StartsWith(LITERAL_STRING); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public static Token METHOD_NAME(int VAR_INT, string VAR_STRING) { switch (VAR_INT) { default: return new Token(VAR_INT, VAR_STRING); } }
public virtual float METHOD_NAME(int VAR_INT) { Debug.Assert(IsSupported(VAR_INT)); return LITERAL_FLOAT; }
public override void METHOD_NAME() { backingMap.METHOD_NAME(); }
public CompoundException(ICollection<Exception> VAR_ICOLLECTION<EXCEPTION>) : base(Format(why)) { causeList = Sharpen.Collections.UnmodifiableList(new AList<Exception>(VAR_ICOLLECTION<EXCEPTION>)); }
public DeleteEnvironmentConfigurationRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _environmentName = VAR_STRING; }
public ModifyImageAttributeRequest(string VAR_STRING, string VAR_STRING) { _imageId = VAR_STRING; _attribute = VAR_STRING; }
public LastCellOfRowDummyRecord(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public override string METHOD_NAME() { return path.METHOD_NAME(); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(Add); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public override void METHOD_NAME() { Reset(); try { consumer.METHOD_NAME(); } finally { if (nextTermsHash != LITERAL_NULL) { nextTermsHash.METHOD_NAME(); } } }
public virtual CreateUsagePlanKeyResponse METHOD_NAME(CreateUsagePlanKeyRequest VAR_CREATEUSAGEPLANKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateUsagePlanKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateUsagePlanKeyResponseUnmarshaller.Instance; return Invoke<CreateUsagePlanKeyResponse>(VAR_CREATEUSAGEPLANKEYREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { if (_offset < VAR_INT) { return true; } if (LastIndex > VAR_INT) { return true; } return false; }
public virtual CherryPickResult.CherryPickStatus METHOD_NAME() { return status; }
public static string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); try { METHOD_NAME(VAR_STRINGBUILDER, VAR_STRING); } catch (IOException bogus) { throw new Exception(bogus.ToString(), bogus); } return VAR_STRINGBUILDER.ToString(); }
public GetDistributionRequest(string VAR_STRING) { _id = VAR_STRING; }
public override string METHOD_NAME(string VAR_STRING, string VAR_STRING) { return LITERAL_STRING; }
public override Repository METHOD_NAME(C VAR_C, string VAR_STRING) { if (IsUnreasonableName(VAR_STRING)) { throw new RepositoryNotFoundException(VAR_STRING); } Repository VAR_REPOSITORY = exports.Get(NameWithDotGit(VAR_STRING)); if (VAR_REPOSITORY != LITERAL_NULL) { VAR_REPOSITORY.IncrementOpen(); return VAR_REPOSITORY; } foreach (FilePath @base in exportBase) { FilePath VAR_FILEPATH = RepositoryCache.FileKey.Resolve(new FilePath(@base, VAR_STRING), FS.DETECTED); if (VAR_FILEPATH == LITERAL_NULL) { continue; } try { RepositoryCache.FileKey VAR_REPOSITORYCACHE.FILEKEY = RepositoryCache.FileKey.Exact(VAR_FILEPATH, FS.DETECTED); VAR_REPOSITORY = RepositoryCache.METHOD_NAME(VAR_REPOSITORYCACHE.FILEKEY, true); } catch (IOException e) { throw new RepositoryNotFoundException(VAR_STRING, e); } try { if (IsExportOk(VAR_C, VAR_STRING, VAR_REPOSITORY)) { return VAR_REPOSITORY; } else { throw new ServiceNotEnabledException(); } } catch (RuntimeException e) { VAR_REPOSITORY.Close(); throw new RepositoryNotFoundException(VAR_STRING, e); } catch (IOException e) { VAR_REPOSITORY.Close(); throw new RepositoryNotFoundException(VAR_STRING, e); } catch (ServiceNotEnabledException e) { VAR_REPOSITORY.Close(); throw; } } if (exportBase.Count == LITERAL_INT) { FilePath VAR_FILEPATH = new FilePath(exportBase.Iterator().Next(), VAR_STRING); throw new RepositoryNotFoundException(VAR_STRING, new RepositoryNotFoundException(VAR_FILEPATH)); } throw new RepositoryNotFoundException(VAR_STRING); }
public virtual bool METHOD_NAME(E VAR_E) { lock (this) { if (contains(VAR_E)) { return false; } add(VAR_E); return true; } }
public virtual EnableTransitGatewayRouteTablePropagationResponse METHOD_NAME(EnableTransitGatewayRouteTablePropagationRequest VAR_ENABLETRANSITGATEWAYROUTETABLEPROPAGATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableTransitGatewayRouteTablePropagationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableTransitGatewayRouteTablePropagationResponseUnmarshaller.Instance; return Invoke<EnableTransitGatewayRouteTablePropagationResponse>(VAR_ENABLETRANSITGATEWAYROUTETABLEPROPAGATIONREQUEST, VAR_VAR); }
public PatternKeywordMarkerFilter(TokenStream VAR_TOKENSTREAM, Regex VAR_REGEX) : base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); this.matcher = VAR_REGEX.Match(LITERAL_STRING); this.VAR_REGEX = VAR_REGEX; }
public AddInstanceGroupsRequest(string VAR_STRING, List<InstanceGroupConfig> VAR_LIST<INSTANCEGROUPCONFIG>) { _jobFlowId = VAR_STRING; _instanceGroups = VAR_LIST<INSTANCEGROUPCONFIG>; }
public FSTTermsReader(SegmentReadState VAR_SEGMENTREADSTATE, PostingsReaderBase VAR_POSTINGSREADERBASE) { string VAR_STRING = IndexFileNames.SegmentFileName(VAR_SEGMENTREADSTATE.SegmentInfo.Name, VAR_SEGMENTREADSTATE.SegmentSuffix, FSTTermsWriter.TERMS_EXTENSION); this.VAR_POSTINGSREADERBASE = VAR_POSTINGSREADERBASE; IndexInput VAR_INDEXINPUT = VAR_SEGMENTREADSTATE.Directory.OpenInput(VAR_STRING, VAR_SEGMENTREADSTATE.Context); bool VAR_BOOL = false; try { version = ReadHeader(VAR_INDEXINPUT); if (version >= FSTTermsWriter.TERMS_VERSION_CHECKSUM) { CodecUtil.ChecksumEntireFile(VAR_INDEXINPUT); } this.VAR_POSTINGSREADERBASE.Init(VAR_INDEXINPUT); SeekDir(VAR_INDEXINPUT); FieldInfos VAR_FIELDINFOS = VAR_SEGMENTREADSTATE.FieldInfos; int VAR_INT = VAR_INDEXINPUT.ReadVInt32(); for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT = VAR_INDEXINPUT.ReadVInt32(); FieldInfo VAR_FIELDINFO = VAR_FIELDINFOS.FieldInfo(VAR_INT); long VAR_LONG = VAR_INDEXINPUT.ReadVInt64(); long VAR_LONG = VAR_FIELDINFO.IndexOptions == IndexOptions.DOCS_ONLY ? -LITERAL_INT : VAR_INDEXINPUT.ReadVInt64(); long VAR_LONG = VAR_INDEXINPUT.ReadVInt64(); int VAR_INT = VAR_INDEXINPUT.ReadVInt32(); int VAR_INT = VAR_INDEXINPUT.ReadVInt32(); TermsReader VAR_TERMSREADER = new TermsReader(this, VAR_FIELDINFO, VAR_INDEXINPUT, VAR_LONG, VAR_LONG, VAR_LONG, VAR_INT, VAR_INT); TermsReader VAR_TERMSREADER; fields.TryGetValue(VAR_FIELDINFO.Name, out VAR_TERMSREADER); fields[VAR_FIELDINFO.Name] = VAR_TERMSREADER; CheckFieldSummary(VAR_SEGMENTREADSTATE.SegmentInfo, VAR_INDEXINPUT, VAR_TERMSREADER, VAR_TERMSREADER); } VAR_BOOL = true; } finally { if (VAR_BOOL) { IOUtils.Dispose(VAR_INDEXINPUT); } else { IOUtils.DisposeWhileHandlingException(VAR_INDEXINPUT); } } }
public virtual DescribeVpcEndpointsResponse METHOD_NAME(DescribeVpcEndpointsRequest VAR_DESCRIBEVPCENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointsResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointsResponse>(VAR_DESCRIBEVPCENDPOINTSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { newPrefix = VAR_STRING; }
public GetHostedZoneRequest(string VAR_STRING) { _id = VAR_STRING; }
public virtual IList<FilePath> METHOD_NAME() { return updatedFiles; }
public DeleteDhcpOptionsRequest(string VAR_STRING) { _dhcpOptionsId = VAR_STRING; }
public virtual QueryPhraseMap METHOD_NAME(string VAR_STRING) { QueryPhraseMap VAR_QUERYPHRASEMAP; subMap.TryGetValue(VAR_STRING, out VAR_QUERYPHRASEMAP); return VAR_QUERYPHRASEMAP; }
public virtual PutConfigurationSetDeliveryOptionsResponse METHOD_NAME(PutConfigurationSetDeliveryOptionsRequest VAR_PUTCONFIGURATIONSETDELIVERYOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConfigurationSetDeliveryOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConfigurationSetDeliveryOptionsResponseUnmarshaller.Instance; return Invoke<PutConfigurationSetDeliveryOptionsResponse>(VAR_PUTCONFIGURATIONSETDELIVERYOPTIONSREQUEST, VAR_VAR); }
public ChartRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_x = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_y = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_width = VAR_RECORDINPUTSTREAM.ReadInt(); field_4_height = VAR_RECORDINPUTSTREAM.ReadInt(); }
public virtual ListTaskDefinitionsResponse METHOD_NAME(ListTaskDefinitionsRequest VAR_LISTTASKDEFINITIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTaskDefinitionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTaskDefinitionsResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionsResponse>(VAR_LISTTASKDEFINITIONSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return rawPath; }
public IndexRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_zero = VAR_RECORDINPUTSTREAM.ReadInt(); if (field_1_zero != LITERAL_INT) { throw new RecordFormatException(LITERAL_STRING + field_1_zero); } field_2_first_row = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_last_row_add1 = VAR_RECORDINPUTSTREAM.ReadInt(); field_4_zero = VAR_RECORDINPUTSTREAM.ReadInt(); int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining / LITERAL_INT; field_5_dbcells = new IntList(VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { field_5_dbcells.Add(VAR_RECORDINPUTSTREAM.ReadInt()); } }
public virtual System.Type METHOD_NAME() { return _enumType; }
public bool METHOD_NAME(int VAR_INT) { for (int i = LITERAL_INT; i < SUPPORTED_TYPES.Length; i++) if (VAR_INT == SUPPORTED_TYPES[i]) return true; return false; }
public virtual PersonIdent METHOD_NAME(int VAR_INT) { return sourceCommitters[VAR_INT]; }
public RemoveTagsRequest(string VAR_STRING, List<string> VAR_LIST<STRING>) { _resourceId = VAR_STRING; _tagKeys = VAR_LIST<STRING>; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectKind)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(unused)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, bool VAR_BOOL) { flags = LITERAL_INT; numSyllables = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; i++) { if (IsVowel(VAR_CHAR[][i])) { numSyllables++; } } if (numSyllables > LITERAL_INT) { VAR_INT = RemoveParticle(VAR_CHAR[], VAR_INT); } if (numSyllables > LITERAL_INT) { VAR_INT = RemovePossessivePronoun(VAR_CHAR[], VAR_INT); } if (VAR_BOOL) { VAR_INT = StemDerivational(VAR_CHAR[], VAR_INT); } return VAR_INT; }
public override long METHOD_NAME(FieldInvertState VAR_FIELDINVERTSTATE) { float VAR_FLOAT; if (discountOverlaps) { VAR_FLOAT = VAR_FIELDINVERTSTATE.Length - VAR_FIELDINVERTSTATE.NumOverlap; } else { VAR_FLOAT = VAR_FIELDINVERTSTATE.Length; } return EncodeNormValue(VAR_FIELDINVERTSTATE.Boost, VAR_FLOAT); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { try { NLPChunkerOp VAR_NLPCHUNKEROP = LITERAL_NULL; if (chunkerModelFile != LITERAL_NULL) { VAR_NLPCHUNKEROP = OpenNLPOpsFactory.GetChunker(chunkerModelFile); } return new OpenNLPChunkerFilter(VAR_TOKENSTREAM, VAR_NLPCHUNKEROP); } catch (IOException e) { throw new ArgumentException(e.ToString(), e); } }
public virtual IList<PackedObjectInfo> METHOD_NAME(IComparer<PackedObjectInfo> VAR_ICOMPARER<PACKEDOBJECTINFO>) { Arrays.Sort(entries, LITERAL_INT, entryCount, VAR_ICOMPARER<PACKEDOBJECTINFO>); IList<PackedObjectInfo> VAR_ILIST<PACKEDOBJECTINFO> = Arrays.AsList(entries); if (entryCount < entries.Length) { VAR_ILIST<PACKEDOBJECTINFO> = VAR_ILIST<PACKEDOBJECTINFO>.SubList(LITERAL_INT, entryCount); } return VAR_ILIST<PACKEDOBJECTINFO>; }
public string METHOD_NAME() { var VAR_VAR = GetCredentials(); var VAR_VAR = VAR_VAR as BasicSessionCredentials; return VAR_VAR != LITERAL_NULL ? VAR_VAR.GetSessionToken() : LITERAL_NULL; }
public virtual StopAutoMLJobResponse METHOD_NAME(StopAutoMLJobRequest VAR_STOPAUTOMLJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopAutoMLJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopAutoMLJobResponseUnmarshaller.Instance; return Invoke<StopAutoMLJobResponse>(VAR_STOPAUTOMLJOBREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER, int VAR_INT) { if (VAR_INT > VAR_STRINGBUILDER.Length || VAR_INT < LITERAL_INT) return VAR_INT; bi.SetText(VAR_STRINGBUILDER.ToString(LITERAL_INT, VAR_INT - LITERAL_INT)); bi.Last(); return bi.Previous(); }
public virtual StartImageBuilderResponse METHOD_NAME(StartImageBuilderRequest VAR_STARTIMAGEBUILDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartImageBuilderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartImageBuilderResponseUnmarshaller.Instance; return Invoke<StartImageBuilderResponse>(VAR_STARTIMAGEBUILDERREQUEST, VAR_VAR); }
public double METHOD_NAME() { long VAR_LONG = ReadLong(); double VAR_DOUBLE = BitConverter.Int64BitsToDouble(VAR_LONG); if (Double.IsNaN(VAR_DOUBLE)) { throw new Exception(LITERAL_STRING); } return VAR_DOUBLE; }
public double METHOD_NAME() { return _in.METHOD_NAME(); }
public virtual int METHOD_NAME(Cell VAR_CELL) { return string.CompareOrdinal(TokenString, VAR_CELL.TokenString); }
public virtual GetCampaignDateRangeKpiResponse METHOD_NAME(GetCampaignDateRangeKpiRequest VAR_GETCAMPAIGNDATERANGEKPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignDateRangeKpiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignDateRangeKpiResponseUnmarshaller.Instance; return Invoke<GetCampaignDateRangeKpiResponse>(VAR_GETCAMPAIGNDATERANGEKPIREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_3_row_index); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_first_column_index); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_last_column_index); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(double VAR_DOUBLE) { EnsureCapacity(_Count + LITERAL_INT); _array[_Count] = VAR_DOUBLE; _Count++; }
public String METHOD_NAME(int VAR_INT) { return GetSheetEvaluator(VAR_INT).SheetName; }
public virtual TransferDomainToAnotherAwsAccountResponse METHOD_NAME(TransferDomainToAnotherAwsAccountRequest VAR_TRANSFERDOMAINTOANOTHERAWSACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TransferDomainToAnotherAwsAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TransferDomainToAnotherAwsAccountResponseUnmarshaller.Instance; return Invoke<TransferDomainToAnotherAwsAccountResponse>(VAR_TRANSFERDOMAINTOANOTHERAWSACCOUNTREQUEST, VAR_VAR); }
public bool METHOD_NAME(V VAR_V, V VAR_V) { return compareAndSet(VAR_V, VAR_V); }
public override void METHOD_NAME(ReceiveCommand.Result VAR_RECEIVECOMMAND.RESULT, string VAR_STRING) { this._enclosing.result = this.Decode(VAR_RECEIVECOMMAND.RESULT); base.METHOD_NAME(VAR_RECEIVECOMMAND.RESULT, VAR_STRING); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual IList<string> METHOD_NAME() { return modifiedFiles; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Row); VAR_ILITTLEENDIANOUTPUT.WriteShort(Column); VAR_ILITTLEENDIANOUTPUT.WriteShort(XFIndex); SerializeValue(VAR_ILITTLEENDIANOUTPUT); }
public override string METHOD_NAME() { return LITERAL_STRING + index + LITERAL_STRING; }
public virtual DescribeDBClusterParametersResponse METHOD_NAME(DescribeDBClusterParametersRequest VAR_DESCRIBEDBCLUSTERPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBClusterParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBClusterParametersResponseUnmarshaller.Instance; return Invoke<DescribeDBClusterParametersResponse>(VAR_DESCRIBEDBCLUSTERPARAMETERSREQUEST, VAR_VAR); }
public CellRangeAddress METHOD_NAME() { return new CellRangeAddress(FirstRow, LastRow, FirstColumn, LastColumn); }
public bool METHOD_NAME(RevFlagSet VAR_REVFLAGSET) { return (flags & VAR_REVFLAGSET.mask) != LITERAL_INT; }
public virtual GetPolicyResponse METHOD_NAME(GetPolicyRequest VAR_GETPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPolicyResponseUnmarshaller.Instance; return Invoke<GetPolicyResponse>(VAR_GETPOLICYREQUEST, VAR_VAR); }
public BookSheetKey(int VAR_INT, int VAR_INT) { _bookIndex = VAR_INT; _sheetIndex = VAR_INT; }
public virtual void METHOD_NAME(int VAR_INT, bool VAR_BOOL) { this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; SetSequenceName(); }
public virtual DescribeVpcEndpointConnectionsResponse METHOD_NAME(DescribeVpcEndpointConnectionsRequest VAR_DESCRIBEVPCENDPOINTCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointConnectionsResponse>(VAR_DESCRIBEVPCENDPOINTCONNECTIONSREQUEST, VAR_VAR); }
public virtual GetHostedZoneResponse METHOD_NAME(GetHostedZoneRequest VAR_GETHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHostedZoneResponseUnmarshaller.Instance; return Invoke<GetHostedZoneResponse>(VAR_GETHOSTEDZONEREQUEST, VAR_VAR); }
public ChangeBatch(List<Change> VAR_LIST<CHANGE>) { _changes = VAR_LIST<CHANGE>; }
public String[] METHOD_NAME(int VAR_INT) { int VAR_INT = _externSheetRecord.GetExtbookIndexFromRefIndex(VAR_INT); SupBookRecord VAR_SUPBOOKRECORD = _externalBookBlocks[VAR_INT].GetExternalBookRecord(); if (!VAR_SUPBOOKRECORD.IsExternalReferences) { return LITERAL_NULL; } int VAR_INT = _externSheetRecord.GetFirstSheetIndexFromRefIndex(VAR_INT); int VAR_INT = _externSheetRecord.GetLastSheetIndexFromRefIndex(VAR_INT); String VAR_STRING = LITERAL_NULL; String VAR_STRING = LITERAL_NULL; if (VAR_INT >= LITERAL_INT) { VAR_STRING = VAR_SUPBOOKRECORD.SheetNames[VAR_INT]; } if (VAR_INT >= LITERAL_INT) { VAR_STRING = VAR_SUPBOOKRECORD.SheetNames[VAR_INT]; } if (VAR_INT == VAR_INT) { return new String[] { VAR_SUPBOOKRECORD.URL, VAR_STRING }; } else { return new String[] { VAR_SUPBOOKRECORD.URL, VAR_STRING, VAR_STRING }; } }
public ChartEndBlockRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rt = VAR_RECORDINPUTSTREAM.ReadShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadShort(); iObjectKind = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_RECORDINPUTSTREAM.Available() == LITERAL_INT) { unused = new byte[LITERAL_INT]; } else { unused = new byte[LITERAL_INT]; VAR_RECORDINPUTSTREAM.ReadFully(unused); } }
public virtual CreateQueueResponse METHOD_NAME(CreateQueueRequest VAR_CREATEQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateQueueResponseUnmarshaller.Instance; return Invoke<CreateQueueResponse>(VAR_CREATEQUEUEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { this.maxCharsToAnalyze = VAR_INT; }
public virtual CreateCodeRepositoryResponse METHOD_NAME(CreateCodeRepositoryRequest VAR_CREATECODEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCodeRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCodeRepositoryResponseUnmarshaller.Instance; return Invoke<CreateCodeRepositoryResponse>(VAR_CREATECODEREPOSITORYREQUEST, VAR_VAR); }
public static string METHOD_NAME(string[] VAR_STRING[]) { return IndexFileNames.FileNameFromGeneration(IndexFileNames.SEGMENTS, LITERAL_STRING, GetLastCommitGeneration(VAR_STRING[])); }
public java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public virtual ModifyCertificatesResponse METHOD_NAME(ModifyCertificatesRequest VAR_MODIFYCERTIFICATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyCertificatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyCertificatesResponseUnmarshaller.Instance; return Invoke<ModifyCertificatesResponse>(VAR_MODIFYCERTIFICATESREQUEST, VAR_VAR); }
public void METHOD_NAME(String VAR_STRING, int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ForkedEvaluationCell VAR_FORKEDEVALUATIONCELL = _sewb.GetOrCreateUpdatableCell(VAR_STRING, VAR_INT, VAR_INT); VAR_FORKEDEVALUATIONCELL.SetValue(VAR_VALUEEVAL); _evaluator.NotifyUpdateCell(VAR_FORKEDEVALUATIONCELL); }
public virtual DisassociateMemberAccountResponse METHOD_NAME(DisassociateMemberAccountRequest VAR_DISASSOCIATEMEMBERACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateMemberAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateMemberAccountResponseUnmarshaller.Instance; return Invoke<DisassociateMemberAccountResponse>(VAR_DISASSOCIATEMEMBERACCOUNTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { var VAR_VAR = m_initial; var VAR_VAR = VAR_INT + VAR_INT; for (int i = VAR_INT; i < VAR_VAR; i++) { VAR_VAR = Step(VAR_VAR, ((sbyte)VAR_BYTE[][i]) & LITERAL_INT); if (VAR_VAR == -LITERAL_INT) { return false; } } return m_accept[VAR_VAR]; }
public virtual DeleteTrafficPolicyResponse METHOD_NAME(DeleteTrafficPolicyRequest VAR_DELETETRAFFICPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficPolicyResponseUnmarshaller.Instance; return Invoke<DeleteTrafficPolicyResponse>(VAR_DELETETRAFFICPOLICYREQUEST, VAR_VAR); }
public static PackIndex METHOD_NAME(InputStream VAR_INPUTSTREAM) { byte[] VAR_BYTE[] = new byte[LITERAL_INT]; IOUtil.ReadFully(VAR_INPUTSTREAM, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); if (IsTOC(VAR_BYTE[])) { int VAR_INT = NB.DecodeInt32(VAR_BYTE[], LITERAL_INT); switch (VAR_INT) { case LITERAL_INT: { return new PackIndexV2(VAR_INPUTSTREAM); } default: { throw new IOException(MessageFormat.Format(JGitText.Get().unsupportedPackIndexVersion, Sharpen.Extensions.ValueOf(VAR_INT))); } } } return new PackIndexV1(VAR_INPUTSTREAM, VAR_BYTE[]); }
public double[] METHOD_NAME() { if (_Count < LITERAL_INT) { return EMPTY_DOUBLE_ARRAY; } double[] VAR_DOUBLE[] = new double[_Count]; Array.Copy(_array, LITERAL_INT, VAR_DOUBLE[], LITERAL_INT, _Count); return VAR_DOUBLE[]; }
public virtual GetHostReservationPurchasePreviewResponse METHOD_NAME(GetHostReservationPurchasePreviewRequest VAR_GETHOSTRESERVATIONPURCHASEPREVIEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHostReservationPurchasePreviewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHostReservationPurchasePreviewResponseUnmarshaller.Instance; return Invoke<GetHostReservationPurchasePreviewResponse>(VAR_GETHOSTRESERVATIONPURCHASEPREVIEWREQUEST, VAR_VAR); }
public virtual CreateCustomAvailabilityZoneResponse METHOD_NAME(CreateCustomAvailabilityZoneRequest VAR_CREATECUSTOMAVAILABILITYZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCustomAvailabilityZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCustomAvailabilityZoneResponseUnmarshaller.Instance; return Invoke<CreateCustomAvailabilityZoneResponse>(VAR_CREATECUSTOMAVAILABILITYZONEREQUEST, VAR_VAR); }
public EvaluationTracker(EvaluationCache VAR_EVALUATIONCACHE) { _cache = VAR_EVALUATIONCACHE; _evaluationFrames = new ArrayList(); _currentlyEvaluatingCells = new ArrayList(); }
public override string METHOD_NAME() { return Format(false, false); }
public virtual AcceptQualificationRequestResponse METHOD_NAME(AcceptQualificationRequestRequest VAR_ACCEPTQUALIFICATIONREQUESTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptQualificationRequestRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptQualificationRequestResponseUnmarshaller.Instance; return Invoke<AcceptQualificationRequestResponse>(VAR_ACCEPTQUALIFICATIONREQUESTREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return false; }
public java.lang.StringBuffer METHOD_NAME(java.lang.StringBuffer VAR_JAVA.LANG.STRINGBUFFER) { if (appendPos < _regionEnd) { VAR_JAVA.LANG.STRINGBUFFER.append(Sharpen.StringHelper.Substring(input, appendPos, _regionEnd)); } return VAR_JAVA.LANG.STRINGBUFFER; }
public String METHOD_NAME() { return _wholePart.ToString(CultureInfo.InvariantCulture); }
public void METHOD_NAME(bool VAR_BOOL) { field_1_options = verticalBorder.SetShortBoolean(field_1_options, VAR_BOOL); }
public CRNRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_last_column_index = VAR_RECORDINPUTSTREAM.ReadByte() & LITERAL_INT; field_2_first_column_index = VAR_RECORDINPUTSTREAM.ReadByte() & LITERAL_INT; field_3_row_index = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = field_1_last_column_index - field_2_first_column_index + LITERAL_INT; field_4_constant_values = ConstantValueParser.Parse(VAR_RECORDINPUTSTREAM, VAR_INT); }
public virtual RevokeDBSecurityGroupIngressResponse METHOD_NAME(RevokeDBSecurityGroupIngressRequest VAR_REVOKEDBSECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeDBSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeDBSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<RevokeDBSecurityGroupIngressResponse>(VAR_REVOKEDBSECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public virtual CharBlockArray METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT; int VAR_INT = VAR_INT; while (VAR_INT > LITERAL_INT) { if (this.current.VAR_INT == this.blockSize) { AddBlock(); } int VAR_INT = VAR_INT; int VAR_INT = this.blockSize - this.current.VAR_INT; if (VAR_INT < VAR_INT) { VAR_INT = VAR_INT; } Array.Copy(VAR_CHAR[], VAR_INT, this.current.VAR_CHAR[], this.current.VAR_INT, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; this.current.VAR_INT += VAR_INT; } this.VAR_INT += VAR_INT; return this; }
public override String METHOD_NAME() { return METHOD_NAME(LITERAL_NULL, true); }
public override int METHOD_NAME() { try { CultureInfo VAR_CULTUREINFO = RunData.Locale; if (VAR_CULTUREINFO == LITERAL_NULL) throw new Exception(LITERAL_STRING); Analyzer VAR_ANALYZER = CreateAnalyzer(VAR_CULTUREINFO, impl); RunData.Analyzer = VAR_ANALYZER; Console.WriteLine(LITERAL_STRING + VAR_ANALYZER.GetType().Name + LITERAL_STRING + VAR_CULTUREINFO + LITERAL_STRING); } catch (Exception e) { throw new Exception(LITERAL_STRING + impl, e); } return LITERAL_INT; }
public sealed override short METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public static string METHOD_NAME(short[] VAR_SHORT[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR); for (int i = LITERAL_INT; i < VAR_SHORT[].Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_SHORT[][i])); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.ToString(); }
public virtual ListIPSetsResponse METHOD_NAME(ListIPSetsRequest VAR_LISTIPSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIPSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIPSetsResponseUnmarshaller.Instance; return Invoke<ListIPSetsResponse>(VAR_LISTIPSETSREQUEST, VAR_VAR); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } for (int i = LITERAL_INT; i < m_maxLevels - LITERAL_INT; i++) { if (VAR_DOUBLE > levelW[i] && VAR_DOUBLE > levelH[i]) { return i + LITERAL_INT; } } return m_maxLevels; }
public IIndexableField[] METHOD_NAME(string VAR_STRING) { var VAR_VAR = new List<IIndexableField>(); foreach (IIndexableField field in fields) { if (field.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_VAR.Add(field); } } return VAR_VAR.ToArray(); }
public virtual GetTrafficPolicyResponse METHOD_NAME(GetTrafficPolicyRequest VAR_GETTRAFFICPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTrafficPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTrafficPolicyResponseUnmarshaller.Instance; return Invoke<GetTrafficPolicyResponse>(VAR_GETTRAFFICPOLICYREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { EnsureId(); return idBuffer.METHOD_NAME; }
public virtual DeleteExperimentResponse METHOD_NAME(DeleteExperimentRequest VAR_DELETEEXPERIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteExperimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteExperimentResponseUnmarshaller.Instance; return Invoke<DeleteExperimentResponse>(VAR_DELETEEXPERIMENTREQUEST, VAR_VAR); }
public static int[] METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT + VAR_INT[].Length); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(ReadOnly); VAR_ILITTLEENDIANOUTPUT.WriteShort(Password); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_username_value.Length); if (field_3_username_value.Length > LITERAL_INT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_username_unicode_options); StringUtil.PutCompressedUnicode(Username, VAR_ILITTLEENDIANOUTPUT); } }
public BulgarianStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public GetMirrorListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual DescribeDomainEndpointOptionsResponse METHOD_NAME(DescribeDomainEndpointOptionsRequest VAR_DESCRIBEDOMAINENDPOINTOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDomainEndpointOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDomainEndpointOptionsResponseUnmarshaller.Instance; return Invoke<DescribeDomainEndpointOptionsResponse>(VAR_DESCRIBEDOMAINENDPOINTOPTIONSREQUEST, VAR_VAR); }
public CommonToken(Tuple<ITokenSource, ICharStream> VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM>, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { this.VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM> = VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM>; this._type = VAR_INT; this._channel = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; if (VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM>.Item1 != LITERAL_NULL) { this._line = VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM>.Item1.Line; this.charPositionInLine = VAR_TUPLE<ITOKENSOURCE, ICHARSTREAM>.Item1.Column; } }
public override bool METHOD_NAME(URIish VAR_URIISH, params CredentialItem[] VAR_CREDENTIALITEM[]) { foreach (CredentialItem i in VAR_CREDENTIALITEM[]) { if (i is CredentialItem.Username) { ((CredentialItem.Username)i).SetValue(username); continue; } if (i is CredentialItem.Password) { ((CredentialItem.Password)i).SetValue(password); continue; } if (i is CredentialItem.StringType) { if (i.GetPromptText().Equals(LITERAL_STRING)) { ((CredentialItem.StringType)i).SetValue(new string (password)); continue; } } throw new UnsupportedCredentialItem(VAR_URIISH, i.GetType().FullName + LITERAL_STRING + i.GetPromptText()); } return true; }
public virtual double METHOD_NAME(string VAR_STRING, double VAR_DOUBLE) { double[] VAR_DOUBLE[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_DOUBLE[] = (double[])VAR_OBJECT; return VAR_DOUBLE[][roundNumber % VAR_DOUBLE[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_DOUBLE.ToString(CultureInfo.InvariantCulture); } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return double.Parse(VAR_STRING, CultureInfo.InvariantCulture); } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_DOUBLE[] = PropToDoubleArray(VAR_STRING); valByRound[VAR_STRING] = VAR_DOUBLE[]; return VAR_DOUBLE[][roundNumber % VAR_DOUBLE[].Length]; }
public virtual UpdateDocumentationVersionResponse METHOD_NAME(UpdateDocumentationVersionRequest VAR_UPDATEDOCUMENTATIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDocumentationVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDocumentationVersionResponseUnmarshaller.Instance; return Invoke<UpdateDocumentationVersionResponse>(VAR_UPDATEDOCUMENTATIONVERSIONREQUEST, VAR_VAR); }
public virtual DeleteApplicationInputProcessingConfigurationResponse METHOD_NAME(DeleteApplicationInputProcessingConfigurationRequest VAR_DELETEAPPLICATIONINPUTPROCESSINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationInputProcessingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationInputProcessingConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteApplicationInputProcessingConfigurationResponse>(VAR_DELETEAPPLICATIONINPUTPROCESSINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual PurchaseScheduledInstancesResponse METHOD_NAME(PurchaseScheduledInstancesRequest VAR_PURCHASESCHEDULEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseScheduledInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseScheduledInstancesResponseUnmarshaller.Instance; return Invoke<PurchaseScheduledInstancesResponse>(VAR_PURCHASESCHEDULEDINSTANCESREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return host; }
public virtual DeleteNetworkProfileResponse METHOD_NAME(DeleteNetworkProfileRequest VAR_DELETENETWORKPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNetworkProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNetworkProfileResponseUnmarshaller.Instance; return Invoke<DeleteNetworkProfileResponse>(VAR_DELETENETWORKPROFILEREQUEST, VAR_VAR); }
public virtual ListSchemasResponse METHOD_NAME(ListSchemasRequest VAR_LISTSCHEMASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSchemasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSchemasResponseUnmarshaller.Instance; return Invoke<ListSchemasResponse>(VAR_LISTSCHEMASREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_first_row); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_first_col); }
public ByteSliceWriter(ByteBlockPool VAR_BYTEBLOCKPOOL) { this.VAR_BYTEBLOCKPOOL = VAR_BYTEBLOCKPOOL; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { int VAR_INT = ShiftForReplace(VAR_INT, VAR_INT + VAR_INT, VAR_INT); System.Array.Copy(VAR_CHAR[], VAR_INT, buffer, VAR_INT, VAR_INT); token.Length = (this.VAR_INT = VAR_INT); }
public override void METHOD_NAME(int VAR_INT, int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { lock (this) { base.METHOD_NAME(VAR_INT, VAR_INT, VAR_CHAR[], VAR_INT); } }
public virtual RestoreAddressToClassicResponse METHOD_NAME(RestoreAddressToClassicRequest VAR_RESTOREADDRESSTOCLASSICREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreAddressToClassicRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreAddressToClassicResponseUnmarshaller.Instance; return Invoke<RestoreAddressToClassicResponse>(VAR_RESTOREADDRESSTOCLASSICREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { VAR_LONG[][VAR_INT++] = ((VAR_BYTE[][VAR_INT++] & LITERAL_INT) << LITERAL_INT) | (VAR_BYTE[][VAR_INT++] & LITERAL_INT); } }
public CreateNamespaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public override java.nio.ShortBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual GetEventsConfigurationResponse METHOD_NAME(GetEventsConfigurationRequest VAR_GETEVENTSCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEventsConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEventsConfigurationResponseUnmarshaller.Instance; return Invoke<GetEventsConfigurationResponse>(VAR_GETEVENTSCONFIGURATIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + DocFreq + LITERAL_STRING + TotalTermFreq + LITERAL_STRING + TermBlockOrd + LITERAL_STRING + BlockFilePointer; }
public virtual EstimateTemplateCostResponse METHOD_NAME(EstimateTemplateCostRequest VAR_ESTIMATETEMPLATECOSTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EstimateTemplateCostRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EstimateTemplateCostResponseUnmarshaller.Instance; return Invoke<EstimateTemplateCostResponse>(VAR_ESTIMATETEMPLATECOSTREQUEST, VAR_VAR); }
public override TreeFilter METHOD_NAME() { return new OrTreeFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { int VAR_INT; if (VAR_VALUEEVAL is AreaEval) { VAR_INT = ((AreaEval)VAR_VALUEEVAL).FirstColumn; } else if (VAR_VALUEEVAL is RefEval) { VAR_INT = ((RefEval)VAR_VALUEEVAL).Column; } else { return ErrorEval.VALUE_INVALID; } return new NumberEval(VAR_INT + LITERAL_INT); }
public override java.nio.ByteOrder METHOD_NAME() { return java.nio.ByteOrder.nativeOrder(); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char VAR_CHAR) { int VAR_INT = StrLen(VAR_CHAR[]) + LITERAL_INT; if (m_freenode + VAR_INT > m_eq.Length) { RedimNodeArrays(m_eq.Length + BLOCK_SIZE); } m_root = METHOD_NAME(m_root, VAR_CHAR[], VAR_INT, VAR_CHAR); }
public DFAState METHOD_NAME(int VAR_INT) { if (!IsPrecedenceDfa) { throw new Exception(LITERAL_STRING); } if (VAR_INT < LITERAL_INT || VAR_INT >= s0.edges.Length) { return LITERAL_NULL; } return s0.edges[VAR_INT]; }
public virtual SetActiveReceiptRuleSetResponse METHOD_NAME(SetActiveReceiptRuleSetRequest VAR_SETACTIVERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetActiveReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetActiveReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<SetActiveReceiptRuleSetResponse>(VAR_SETACTIVERECEIPTRULESETREQUEST, VAR_VAR); }
public virtual CreateLaunchTemplateResponse METHOD_NAME(CreateLaunchTemplateRequest VAR_CREATELAUNCHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLaunchTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLaunchTemplateResponseUnmarshaller.Instance; return Invoke<CreateLaunchTemplateResponse>(VAR_CREATELAUNCHTEMPLATEREQUEST, VAR_VAR); }
public virtual ListTrafficPolicyVersionsResponse METHOD_NAME(ListTrafficPolicyVersionsRequest VAR_LISTTRAFFICPOLICYVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrafficPolicyVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrafficPolicyVersionsResponseUnmarshaller.Instance; return Invoke<ListTrafficPolicyVersionsResponse>(VAR_LISTTRAFFICPOLICYVERSIONSREQUEST, VAR_VAR); }
public virtual CultureInfo METHOD_NAME() { return effectiveLocale; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { VAR_LONG[][VAR_INT++] = METHOD_NAME(VAR_LONG[], VAR_INT); VAR_INT += valueCount; } }
public static string METHOD_NAME(IndexCommit VAR_INDEXCOMMIT) { return VAR_INDEXCOMMIT.Generation.ToString(LITERAL_STRING); }
public virtual ListServicesResponse METHOD_NAME(ListServicesRequest VAR_LISTSERVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListServicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListServicesResponseUnmarshaller.Instance; return Invoke<ListServicesResponse>(VAR_LISTSERVICESREQUEST, VAR_VAR); }
public virtual BatchModifyClusterSnapshotsResponse METHOD_NAME(BatchModifyClusterSnapshotsRequest VAR_BATCHMODIFYCLUSTERSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchModifyClusterSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchModifyClusterSnapshotsResponseUnmarshaller.Instance; return Invoke<BatchModifyClusterSnapshotsResponse>(VAR_BATCHMODIFYCLUSTERSNAPSHOTSREQUEST, VAR_VAR); }
public virtual DeleteBackupResponse METHOD_NAME(DeleteBackupRequest VAR_DELETEBACKUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBackupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBackupResponseUnmarshaller.Instance; return Invoke<DeleteBackupResponse>(VAR_DELETEBACKUPREQUEST, VAR_VAR); }
public virtual DescribeDBParameterGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBParameterGroupsRequest()); }
public void METHOD_NAME(bool VAR_BOOL, bool VAR_BOOL) { if (bufferUpto != -LITERAL_INT) { if (VAR_BOOL) { for (int i = LITERAL_INT; i < bufferUpto; i++) { Arrays.Fill(buffers[i], LITERAL_INT); } Arrays.Fill(buffers[bufferUpto], LITERAL_INT, Int32Upto, LITERAL_INT); } if (bufferUpto > LITERAL_INT || !VAR_BOOL) { int VAR_INT = VAR_BOOL ? LITERAL_INT : LITERAL_INT; allocator.RecycleInt32Blocks(buffers, VAR_INT, LITERAL_INT + bufferUpto); Arrays.Fill(buffers, VAR_INT, bufferUpto + LITERAL_INT, LITERAL_NULL); } if (VAR_BOOL) { bufferUpto = LITERAL_INT; Int32Upto = LITERAL_INT; Int32Offset = LITERAL_INT; buffer = buffers[LITERAL_INT]; } else { bufferUpto = -LITERAL_INT; Int32Upto = INT32_BLOCK_SIZE; Int32Offset = -INT32_BLOCK_SIZE; buffer = LITERAL_NULL; } } }
public override Object METHOD_NAME() { SaveRecalcRecord VAR_SAVERECALCRECORD = new SaveRecalcRecord(); VAR_SAVERECALCRECORD.field_1_recalc = field_1_recalc; return VAR_SAVERECALCRECORD; }
public static void METHOD_NAME(string[] VAR_STRING[]) { Exec(VAR_STRING[]); }
public virtual DeregisterImageResponse METHOD_NAME(DeregisterImageRequest VAR_DEREGISTERIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterImageResponseUnmarshaller.Instance; return Invoke<DeregisterImageResponse>(VAR_DEREGISTERIMAGEREQUEST, VAR_VAR); }
public virtual ModifyDBSnapshotResponse METHOD_NAME(ModifyDBSnapshotRequest VAR_MODIFYDBSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBSnapshotResponseUnmarshaller.Instance; return Invoke<ModifyDBSnapshotResponse>(VAR_MODIFYDBSNAPSHOTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(PositionOfBof)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_2_option_flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_4_isMultibyteUnicode)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_5_sheetname).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(string VAR_STRING) { this.m_params = VAR_STRING; m_fieldsToLoad = new JCG.HashSet<string>(); for (StringTokenizer tokenizer = new StringTokenizer(VAR_STRING, LITERAL_STRING); tokenizer.MoveNext();) { string VAR_STRING = tokenizer.Current; m_fieldsToLoad.Add(VAR_STRING); } }
public virtual GetNamedQueryResponse METHOD_NAME(GetNamedQueryRequest VAR_GETNAMEDQUERYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetNamedQueryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetNamedQueryResponseUnmarshaller.Instance; return Invoke<GetNamedQueryResponse>(VAR_GETNAMEDQUERYREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GermanStemFilter(VAR_TOKENSTREAM); }
public ExtendedFormatRecord METHOD_NAME() { ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD = CreateExtendedFormat(); records.Add(records.Xfpos + LITERAL_INT, VAR_EXTENDEDFORMATRECORD); records.Xfpos = records.Xfpos + LITERAL_INT; numxfs++; return VAR_EXTENDEDFORMATRECORD; }
public virtual ModifyClusterMaintenanceResponse METHOD_NAME(ModifyClusterMaintenanceRequest VAR_MODIFYCLUSTERMAINTENANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterMaintenanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterMaintenanceResponseUnmarshaller.Instance; return Invoke<ModifyClusterMaintenanceResponse>(VAR_MODIFYCLUSTERMAINTENANCEREQUEST, VAR_VAR); }
public virtual DeleteDBSecurityGroupResponse METHOD_NAME(DeleteDBSecurityGroupRequest VAR_DELETEDBSECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBSecurityGroupResponseUnmarshaller.Instance; return Invoke<DeleteDBSecurityGroupResponse>(VAR_DELETEDBSECURITYGROUPREQUEST, VAR_VAR); }
public static FormulaError METHOD_NAME(byte VAR_BYTE) { if (bmap.ContainsKey(VAR_BYTE)) return bmap[VAR_BYTE]; throw new ArgumentException(LITERAL_STRING + VAR_BYTE); }
public void METHOD_NAME(StringBuilder VAR_STRINGBUILDER) { if (hStart >= LITERAL_INT && !_formatter.ShowAmPm) { for (int i = LITERAL_INT; i < hLen; i++) { VAR_STRINGBUILDER[hStart + i] = LITERAL_CHAR; } } }
public virtual SendRawEmailResponse METHOD_NAME(SendRawEmailRequest VAR_SENDRAWEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendRawEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendRawEmailResponseUnmarshaller.Instance; return Invoke<SendRawEmailResponse>(VAR_SENDRAWEMAILREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (@readonly) { throw new InvalidOperationException(LITERAL_STRING); } intervals.METHOD_NAME(); }
public override int METHOD_NAME() { if (current == start) { return Done; } else { return First(); } }
public virtual DeleteDocumentClassifierResponse METHOD_NAME(DeleteDocumentClassifierRequest VAR_DELETEDOCUMENTCLASSIFIERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDocumentClassifierRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDocumentClassifierResponseUnmarshaller.Instance; return Invoke<DeleteDocumentClassifierResponse>(VAR_DELETEDOCUMENTCLASSIFIERREQUEST, VAR_VAR); }
public DeleteDeviceAllGroupRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public override String METHOD_NAME() { CellReference VAR_CELLREFERENCE = new CellReference(Row, Column, !IsRowRelative, !IsColRelative); StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternSheetIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_CELLREFERENCE.FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateBGPPeerResponse METHOD_NAME(CreateBGPPeerRequest VAR_CREATEBGPPEERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBGPPeerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBGPPeerResponseUnmarshaller.Instance; return Invoke<CreateBGPPeerResponse>(VAR_CREATEBGPPEERREQUEST, VAR_VAR); }
public string METHOD_NAME() { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); ASCII_ONLY.appendEncoded(VAR_JAVA.LANG.STRINGBUILDER, ToString()); return VAR_JAVA.LANG.STRINGBUILDER.ToString(); }
public virtual ICharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT; StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_INT); int VAR_INT = BlockIndex(VAR_INT); int VAR_INT = IndexInBlock(VAR_INT); while (VAR_INT > LITERAL_INT) { Block VAR_BLOCK = blocks[VAR_INT++]; int VAR_INT = Math.Min(VAR_INT, VAR_BLOCK.VAR_INT - VAR_INT); VAR_STRINGBUILDER.Append(VAR_BLOCK.chars, VAR_INT, VAR_INT); VAR_INT -= VAR_INT; VAR_INT = LITERAL_INT; } return new StringBuilderCharSequence(VAR_STRINGBUILDER); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public static ReadOnlyCollection<String> METHOD_NAME() { List<String> VAR_LIST<STRING> = new List<String>(); for (int i = LITERAL_INT; i < functions.Length; i++) { Function VAR_FUNCTION = functions[i]; if (VAR_FUNCTION != LITERAL_NULL && (VAR_FUNCTION is NotImplementedFunction)) { FunctionMetadata VAR_FUNCTIONMETADATA = FunctionMetadataRegistry.GetFunctionByIndex(i); VAR_LIST<STRING>.Add(VAR_FUNCTIONMETADATA.Name); } } VAR_LIST<STRING>.Remove(LITERAL_STRING); return VAR_LIST<STRING>.AsReadOnly(); }
public ItalianLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteByte(_numberOfArgs); VAR_ILITTLEENDIANOUTPUT.WriteShort(_functionIndex); }
public virtual string METHOD_NAME(IToken VAR_ITOKEN) { if (VAR_ITOKEN == LITERAL_NULL) { return LITERAL_STRING; } string VAR_STRING = VAR_ITOKEN.Text; if (VAR_STRING == LITERAL_NULL) { if (VAR_ITOKEN.Type == TokenConstants.EOF) { VAR_STRING = LITERAL_STRING; } else { VAR_STRING = LITERAL_STRING + VAR_ITOKEN.Type + LITERAL_STRING; } } VAR_STRING = VAR_STRING.Replace(LITERAL_STRING, LITERAL_STRING); VAR_STRING = VAR_STRING.Replace(LITERAL_STRING, LITERAL_STRING); VAR_STRING = VAR_STRING.Replace(LITERAL_STRING, LITERAL_STRING); return LITERAL_STRING + VAR_STRING + LITERAL_STRING; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new NumericPayloadTokenFilter(VAR_TOKENSTREAM, payload, typeMatch); }
public void METHOD_NAME() { dgg.DrawingsSaved = dgg.DrawingsSaved + LITERAL_INT; }
public UploadSigningCertificateRequest(string VAR_STRING) { _certificateBody = VAR_STRING; }
public virtual DeleteJourneyResponse METHOD_NAME(DeleteJourneyRequest VAR_DELETEJOURNEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteJourneyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteJourneyResponseUnmarshaller.Instance; return Invoke<DeleteJourneyResponse>(VAR_DELETEJOURNEYREQUEST, VAR_VAR); }
public override void METHOD_NAME() { ptr = mark; }
public DescribeInstanceHealthRequest(string VAR_STRING) { _loadBalancerName = VAR_STRING; }
public static Automaton METHOD_NAME(Term VAR_TERM) { IList<Automaton> VAR_ILIST<AUTOMATON> = new List<Automaton>(); string VAR_STRING = VAR_TERM.Text(); for (int i = LITERAL_INT; i < VAR_STRING.Length;) { int VAR_INT = Character.CodePointAt(VAR_STRING, i); int VAR_INT = Character.CharCount(VAR_INT); switch (VAR_INT) { case WILDCARD_STRING: VAR_ILIST<AUTOMATON>.Add(BasicAutomata.MakeAnyString()); break; case WILDCARD_CHAR: VAR_ILIST<AUTOMATON>.Add(BasicAutomata.MakeAnyChar()); break; case WILDCARD_ESCAPE: if (i + VAR_INT < VAR_STRING.Length) { int VAR_INT = Character.CodePointAt(VAR_STRING, i + VAR_INT); VAR_INT += Character.CharCount(VAR_INT); VAR_ILIST<AUTOMATON>.Add(BasicAutomata.MakeChar(VAR_INT)); break; } goto default; default: VAR_ILIST<AUTOMATON>.Add(BasicAutomata.MakeChar(VAR_INT)); break; } i += VAR_INT; } return BasicOperations.Concatenate(VAR_ILIST<AUTOMATON>); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (VAR_OBJECT == LITERAL_NULL) return false; if (VAR_OBJECT is ExtendedFormatRecord) { ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD = (ExtendedFormatRecord)VAR_OBJECT; if (field_1_font_index != VAR_EXTENDEDFORMATRECORD.field_1_font_index) return false; if (field_2_format_index != VAR_EXTENDEDFORMATRECORD.field_2_format_index) return false; if (field_3_cell_options != VAR_EXTENDEDFORMATRECORD.field_3_cell_options) return false; if (field_4_alignment_options != VAR_EXTENDEDFORMATRECORD.field_4_alignment_options) return false; if (field_5_indention_options != VAR_EXTENDEDFORMATRECORD.field_5_indention_options) return false; if (field_6_border_options != VAR_EXTENDEDFORMATRECORD.field_6_border_options) return false; if (field_7_palette_options != VAR_EXTENDEDFORMATRECORD.field_7_palette_options) return false; if (field_8_adtl_palette_options != VAR_EXTENDEDFORMATRECORD.field_8_adtl_palette_options) return false; if (field_9_fill_palette_options != VAR_EXTENDEDFORMATRECORD.field_9_fill_palette_options) return false; return true; } return false; }
public override byte[] METHOD_NAME() { return new byte[] { (byte)(red & LITERAL_INT), (byte)(green & LITERAL_INT), (byte)(blue & LITERAL_INT) }; }
public virtual NGit.Api.BlameCommand METHOD_NAME(bool VAR_BOOL) { followFileRenames = Sharpen.Extensions.ValueOf(VAR_BOOL); return this; }
public StringMatcher(String VAR_STRING, CmpOp VAR_CMPOP) : base(optr) { _value = VAR_STRING; _operator = VAR_CMPOP; switch (VAR_CMPOP.Code) { case CmpOp.NONE: case CmpOp.EQ: case CmpOp.NE: _pattern = GetWildCardPattern(VAR_STRING); break; default: _pattern = LITERAL_NULL; break; } }
public DefaultColWidthRecord() { field_1_col_width = DEFAULT_COLUMN_WIDTH; }
public GetIndustryInfoListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual AssociateTrialComponentResponse METHOD_NAME(AssociateTrialComponentRequest VAR_ASSOCIATETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateTrialComponentResponseUnmarshaller.Instance; return Invoke<AssociateTrialComponentResponse>(VAR_ASSOCIATETRIALCOMPONENTREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { METHOD_NAME(VAR_INT, VAR_INT, true); }
public virtual GetFieldLevelEncryptionResponse METHOD_NAME(GetFieldLevelEncryptionRequest VAR_GETFIELDLEVELENCRYPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFieldLevelEncryptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFieldLevelEncryptionResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionResponse>(VAR_GETFIELDLEVELENCRYPTIONREQUEST, VAR_VAR); }
public virtual java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { VAR_CHAR[][i] = METHOD_NAME(); } } return this; }
public virtual UpdateServiceResponse METHOD_NAME(UpdateServiceRequest VAR_UPDATESERVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateServiceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateServiceResponseUnmarshaller.Instance; return Invoke<UpdateServiceResponse>(VAR_UPDATESERVICEREQUEST, VAR_VAR); }
public virtual FlushStageCacheResponse METHOD_NAME(FlushStageCacheRequest VAR_FLUSHSTAGECACHEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = FlushStageCacheRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = FlushStageCacheResponseUnmarshaller.Instance; return Invoke<FlushStageCacheResponse>(VAR_FLUSHSTAGECACHEREQUEST, VAR_VAR); }
public virtual ModifyInstanceMetadataOptionsResponse METHOD_NAME(ModifyInstanceMetadataOptionsRequest VAR_MODIFYINSTANCEMETADATAOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceMetadataOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceMetadataOptionsResponseUnmarshaller.Instance; return Invoke<ModifyInstanceMetadataOptionsResponse>(VAR_MODIFYINSTANCEMETADATAOPTIONSREQUEST, VAR_VAR); }
public DefaultRowHeightRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_option_flags = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_row_height = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual ListModelPackagesResponse METHOD_NAME(ListModelPackagesRequest VAR_LISTMODELPACKAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListModelPackagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListModelPackagesResponseUnmarshaller.Instance; return Invoke<ListModelPackagesResponse>(VAR_LISTMODELPACKAGESREQUEST, VAR_VAR); }
public virtual StopFleetActionsResponse METHOD_NAME(StopFleetActionsRequest VAR_STOPFLEETACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopFleetActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopFleetActionsResponseUnmarshaller.Instance; return Invoke<StopFleetActionsResponse>(VAR_STOPFLEETACTIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; if (VAR_VALUEEVAL is StringEval) { switch (Code) { case CmpOp.EQ: case CmpOp.NONE: break; case CmpOp.NE: return true; default: return false; } StringEval VAR_STRINGEVAL = (StringEval)VAR_VALUEEVAL; Double VAR_DOUBLE = OperandResolver.ParseDouble(VAR_STRINGEVAL.StringValue); if (double.IsNaN(VAR_DOUBLE)) { return false; } return _value == VAR_DOUBLE; } else if ((VAR_VALUEEVAL is NumberEval)) { NumberEval VAR_NUMBEREVAL = (NumberEval)VAR_VALUEEVAL; VAR_DOUBLE = VAR_NUMBEREVAL.NumberValue; } else if ((VAR_VALUEEVAL is BlankEval)) { switch (Code) { case CmpOp.NE: return true; default: return false; } } else { return false; } return Evaluate(VAR_DOUBLE.CompareTo(_value)); }
public override bool METHOD_NAME(RevWalk VAR_REVWALK, RevCommit VAR_REVCOMMIT) { throw new NotSupportedException(JGitText.Get().cannotBeCombined); }
public LongList(int VAR_INT) { entries = new long[VAR_INT]; }
public static string METHOD_NAME(java.io.InputStream VAR_JAVA.IO.INPUTSTREAM) { java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(LITERAL_INT); while (true) { int VAR_INT = VAR_JAVA.IO.INPUTSTREAM.read(); if (VAR_INT == -LITERAL_INT) { throw new java.io.EOFException(); } else { if (VAR_INT == LITERAL_CHAR) { break; } } VAR_JAVA.LANG.STRINGBUILDER.append((char)VAR_INT); } int VAR_INT = VAR_JAVA.LANG.STRINGBUILDER.Length; if (VAR_INT > LITERAL_INT && VAR_JAVA.LANG.STRINGBUILDER[VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_JAVA.LANG.STRINGBUILDER.setLength(VAR_INT - LITERAL_INT); } return VAR_JAVA.LANG.STRINGBUILDER.ToString(); }
public virtual DeleteRouteRequestParameterResponse METHOD_NAME(DeleteRouteRequestParameterRequest VAR_DELETEROUTEREQUESTPARAMETERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRouteRequestParameterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRouteRequestParameterResponseUnmarshaller.Instance; return Invoke<DeleteRouteRequestParameterResponse>(VAR_DELETEROUTEREQUESTPARAMETERREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT * DBCellRecord.BLOCK_SIZE; int VAR_INT = VAR_INT + DBCellRecord.BLOCK_SIZE - LITERAL_INT; if (VAR_INT >= _rowRecords.Count) VAR_INT = _rowRecords.Count - LITERAL_INT; return VAR_INT - VAR_INT + LITERAL_INT; }
public virtual bool METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { return map.Put(VAR_ICHARSEQUENCE); }
public FSTCompletion(FST<object> VAR_FST<OBJECT>, bool VAR_BOOL, bool VAR_BOOL) { this.VAR_FST<OBJECT> = VAR_FST<OBJECT>; if (VAR_FST<OBJECT> != LITERAL_NULL) { this.rootArcs = CacheRootArcs(VAR_FST<OBJECT>); } else { this.rootArcs = new FST.Arc<object>[LITERAL_INT]; } this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; }
public virtual Explanation METHOD_NAME(CollectionStatistics VAR_COLLECTIONSTATISTICS, TermStatistics VAR_TERMSTATISTICS) { long VAR_LONG = VAR_TERMSTATISTICS.DocFreq; long VAR_LONG = VAR_COLLECTIONSTATISTICS.MaxDoc; float VAR_FLOAT = Idf(VAR_LONG, VAR_LONG); return new Explanation(VAR_FLOAT, LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_LONG + LITERAL_STRING); }
public virtual CreateEndpointResponse METHOD_NAME(CreateEndpointRequest VAR_CREATEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEndpointResponseUnmarshaller.Instance; return Invoke<CreateEndpointResponse>(VAR_CREATEENDPOINTREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, Sid); LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, (short)(RecordSize - LITERAL_INT)); byte[] VAR_BYTE[] = RawData; if (escherRecords.Count == LITERAL_INT && VAR_BYTE[] != LITERAL_NULL) { LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, Sid); LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, (short)(RecordSize - LITERAL_INT)); Array.Copy(VAR_BYTE[], LITERAL_INT, VAR_BYTE[], LITERAL_INT + VAR_INT, VAR_BYTE[].Length); return VAR_BYTE[].Length + LITERAL_INT; } LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, Sid); LittleEndian.PutShort(VAR_BYTE[], LITERAL_INT + VAR_INT, (short)(RecordSize - LITERAL_INT)); int VAR_INT = VAR_INT + LITERAL_INT; foreach (EscherRecord r in escherRecords) { VAR_INT += r.METHOD_NAME(VAR_INT, VAR_BYTE[], new NullEscherSerializationListener()); } return RecordSize; }
public bool METHOD_NAME() { int VAR_INT = _significand.BitLength() - C_64; return _significand.CompareTo(BI_MAX_BASE.ShiftLeft(VAR_INT)) < LITERAL_INT; }
public override FieldIndexEnum METHOD_NAME(FieldInfo VAR_FIELDINFO) { FieldIndexData VAR_FIELDINDEXDATA; if (!fields.TryGetValue(VAR_FIELDINFO, out VAR_FIELDINDEXDATA) || VAR_FIELDINDEXDATA == LITERAL_NULL || VAR_FIELDINDEXDATA.fst == LITERAL_NULL) { return LITERAL_NULL; } else { return new IndexEnum(VAR_FIELDINDEXDATA.fst); } }
public AssociationsFacetsExample() { config = new FacetsConfig(); config.SetMultiValued(LITERAL_STRING, true); config.SetIndexFieldName(LITERAL_STRING, LITERAL_STRING); config.SetMultiValued(LITERAL_STRING, true); config.SetIndexFieldName(LITERAL_STRING, LITERAL_STRING); }
public override void METHOD_NAME(int VAR_INT, int VAR_INT, long VAR_LONG) { EnsureCapacity(VAR_LONG); current.METHOD_NAME(VAR_INT, VAR_INT, VAR_LONG); }
public virtual ListDeploymentConfigsResponse METHOD_NAME(ListDeploymentConfigsRequest VAR_LISTDEPLOYMENTCONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentConfigsResponseUnmarshaller.Instance; return Invoke<ListDeploymentConfigsResponse>(VAR_LISTDEPLOYMENTCONFIGSREQUEST, VAR_VAR); }
public ListUserPoliciesRequest(string VAR_STRING) { _userName = VAR_STRING; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new FinnishLightStemFilter(VAR_TOKENSTREAM); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(m_tries.Count * LITERAL_INT); for (int i = LITERAL_INT; i < m_tries.Count; i++) { string VAR_STRING = m_tries[i].METHOD_NAME(VAR_STRING); if (VAR_STRING == LITERAL_NULL || (VAR_STRING.Length == LITERAL_INT && VAR_STRING[LITERAL_INT] == EOM)) { return VAR_STRINGBUILDER.ToString(); } VAR_STRINGBUILDER.Append(VAR_STRING); } return VAR_STRINGBUILDER.ToString(); }
public int METHOD_NAME(String VAR_STRING, String VAR_STRING, String VAR_STRING) { int VAR_INT = GetExternalWorkbookIndex(VAR_STRING); if (VAR_INT == -LITERAL_INT) { throw new RuntimeException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } SupBookRecord VAR_SUPBOOKRECORD = _externalBookBlocks[VAR_INT].GetExternalBookRecord(); int VAR_INT = GetSheetIndex(VAR_SUPBOOKRECORD.SheetNames, VAR_STRING); int VAR_INT = GetSheetIndex(VAR_SUPBOOKRECORD.SheetNames, VAR_STRING); int VAR_INT = _externSheetRecord.GetRefIxForSheet(VAR_INT, VAR_INT, VAR_INT); if (VAR_INT < LITERAL_INT) { VAR_INT = _externSheetRecord.AddRef(VAR_INT, VAR_INT, VAR_INT); } return VAR_INT; }
public String METHOD_NAME(int VAR_INT) { int VAR_INT = linkTable.GetLastInternalSheetIndexForExtIndex(VAR_INT); return FindSheetNameFromIndex(VAR_INT); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rt); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectKind); VAR_ILITTLEENDIANOUTPUT.Write(reserved); }
public ValueEval METHOD_NAME() { return _value; }
public virtual ImportImageResponse METHOD_NAME(ImportImageRequest VAR_IMPORTIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportImageResponseUnmarshaller.Instance; return Invoke<ImportImageResponse>(VAR_IMPORTIMAGEREQUEST, VAR_VAR); }
public PruneByAge(double VAR_DOUBLE) { if (VAR_DOUBLE < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_DOUBLE + LITERAL_STRING); } this.VAR_DOUBLE = VAR_DOUBLE; }
public DeleteSecurityGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual GetRoomSkillParameterResponse METHOD_NAME(GetRoomSkillParameterRequest VAR_GETROOMSKILLPARAMETERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRoomSkillParameterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRoomSkillParameterResponseUnmarshaller.Instance; return Invoke<GetRoomSkillParameterResponse>(VAR_GETROOMSKILLPARAMETERREQUEST, VAR_VAR); }
public virtual ParserRuleContext METHOD_NAME(int VAR_INT) { RuleStartState VAR_RULESTARTSTATE = _atn.ruleToStartState[VAR_INT]; InterpreterRuleContext VAR_INTERPRETERRULECONTEXT = new InterpreterRuleContext(LITERAL_NULL, ATNState.InvalidStateNumber, VAR_INT); if (VAR_RULESTARTSTATE.isPrecedenceRule) { EnterRecursionRule(VAR_INTERPRETERRULECONTEXT, VAR_RULESTARTSTATE.stateNumber, VAR_INT, LITERAL_INT); } else { EnterRule(VAR_INTERPRETERRULECONTEXT, VAR_RULESTARTSTATE.stateNumber, VAR_INT); } while (true) { ATNState VAR_ATNSTATE = AtnState; switch (VAR_ATNSTATE.StateType) { case StateType.RuleStop: { if (RuleContext.IsEmpty) { if (VAR_RULESTARTSTATE.isPrecedenceRule) { ParserRuleContext VAR_PARSERRULECONTEXT = RuleContext; Tuple<ParserRuleContext, int> VAR_TUPLE<PARSERRULECONTEXT, INT> = _parentContextStack.Pop(); UnrollRecursionContexts(VAR_TUPLE<PARSERRULECONTEXT, INT>.Item1); return VAR_PARSERRULECONTEXT; } else { ExitRule(); return VAR_INTERPRETERRULECONTEXT; } } VisitRuleStopState(VAR_ATNSTATE); break; } default: { try { VisitState(VAR_ATNSTATE); } catch (RecognitionException e) { State = _atn.ruleToStopState[VAR_ATNSTATE.ruleIndex].stateNumber; Context.exception = e; ErrorHandler.ReportError(this, e); ErrorHandler.Recover(this, e); } break; } } } }
public virtual DeleteInstallationMediaResponse METHOD_NAME(DeleteInstallationMediaRequest VAR_DELETEINSTALLATIONMEDIAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInstallationMediaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInstallationMediaResponseUnmarshaller.Instance; return Invoke<DeleteInstallationMediaResponse>(VAR_DELETEINSTALLATIONMEDIAREQUEST, VAR_VAR); }
public bool METHOD_NAME(double VAR_DOUBLE) { return VAR_DOUBLE >= minIncl && VAR_DOUBLE <= maxIncl; }
public virtual GetVariablesResponse METHOD_NAME(GetVariablesRequest VAR_GETVARIABLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVariablesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVariablesResponseUnmarshaller.Instance; return Invoke<GetVariablesResponse>(VAR_GETVARIABLESREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | (VAR_INT << LITERAL_INT) | VAR_INT; } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_pointNumber); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_seriesIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_seriesNumber); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_formatFlags); }
public Area3DPxg(int VAR_INT, SheetIdentifier VAR_SHEETIDENTIFIER, String VAR_STRING) : this(externalWorkbookNumber, sheetName, new AreaReference(arearef)) { ; }
public sealed override java.lang.CharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { checkStartEndRemaining(VAR_INT, VAR_INT); java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = duplicate(); VAR_JAVA.NIO.CHARBUFFER.limit(_position + VAR_INT); VAR_JAVA.NIO.CHARBUFFER.position(_position + VAR_INT); return VAR_JAVA.NIO.CHARBUFFER; }
public virtual DescribeInstallationMediaResponse METHOD_NAME(DescribeInstallationMediaRequest VAR_DESCRIBEINSTALLATIONMEDIAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstallationMediaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstallationMediaResponseUnmarshaller.Instance; return Invoke<DescribeInstallationMediaResponse>(VAR_DESCRIBEINSTALLATIONMEDIAREQUEST, VAR_VAR); }
public virtual UpdateConferenceProviderResponse METHOD_NAME(UpdateConferenceProviderRequest VAR_UPDATECONFERENCEPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConferenceProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConferenceProviderResponseUnmarshaller.Instance; return Invoke<UpdateConferenceProviderResponse>(VAR_UPDATECONFERENCEPROVIDERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { int VAR_INT = -numMarkers; if (VAR_INT != VAR_INT) { throw new InvalidOperationException(LITERAL_STRING); } numMarkers--; if (numMarkers == LITERAL_INT && p > LITERAL_INT) { System.Array.Copy(data, p, data, LITERAL_INT, n - p); n = n - p; p = LITERAL_INT; lastCharBufferStart = lastChar; } }
public static int METHOD_NAME() { return LITERAL_INT; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new UpperCaseFilter(m_luceneMatchVersion, VAR_TOKENSTREAM); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(GetHideObj()); }
public virtual V METHOD_NAME(V VAR_V) { V VAR_V = this.VAR_V; this.VAR_V = VAR_V; return VAR_V; }
public override string METHOD_NAME() { return METHOD_NAME(Dir, LITERAL_INT); }
public virtual CreateHITResponse METHOD_NAME(CreateHITRequest VAR_CREATEHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHITResponseUnmarshaller.Instance; return Invoke<CreateHITResponse>(VAR_CREATEHITREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentException(LITERAL_STRING); } if (string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; this.escape = VAR_STRING; }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { int VAR_INT = DataSize; int VAR_INT = LITERAL_INT + VAR_INT; LittleEndianByteArrayOutputStream VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM = new LittleEndianByteArrayOutputStream(VAR_BYTE[], VAR_INT, VAR_INT); VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM.WriteShort(this.Sid); VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM.WriteShort(VAR_INT); METHOD_NAME(VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM); if (VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM.WriteIndex - VAR_INT != VAR_INT) { throw new InvalidOperationException(LITERAL_STRING + this.GetType().Name + LITERAL_STRING + LITERAL_STRING + VAR_INT + LITERAL_STRING + (VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM.WriteIndex - VAR_INT)); } return VAR_INT; }
public override java.nio.DoubleBuffer METHOD_NAME() { return copy(this, _mark); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT) { int VAR_INT = _position + libcore.io.SizeOf.INT; if (VAR_INT > _limit) { throw new java.nio.BufferOverflowException(); } libcore.io.Memory.pokeInt(backingArray, offset + _position, VAR_INT, _order); _position = VAR_INT; return this; }
public bool METHOD_NAME(RevFlag VAR_REVFLAG) { return (flags & VAR_REVFLAG.mask) != LITERAL_INT; }
public virtual ListGeoLocationsResponse METHOD_NAME(ListGeoLocationsRequest VAR_LISTGEOLOCATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGeoLocationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGeoLocationsResponseUnmarshaller.Instance; return Invoke<ListGeoLocationsResponse>(VAR_LISTGEOLOCATIONSREQUEST, VAR_VAR); }
public virtual DescribeClusterSnapshotsResponse METHOD_NAME(DescribeClusterSnapshotsRequest VAR_DESCRIBECLUSTERSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeClusterSnapshotsResponse>(VAR_DESCRIBECLUSTERSNAPSHOTSREQUEST, VAR_VAR); }
public virtual DeleteDirectConnectGatewayAssociationProposalResponse METHOD_NAME(DeleteDirectConnectGatewayAssociationProposalRequest VAR_DELETEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDirectConnectGatewayAssociationProposalRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDirectConnectGatewayAssociationProposalResponseUnmarshaller.Instance; return Invoke<DeleteDirectConnectGatewayAssociationProposalResponse>(VAR_DELETEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALREQUEST, VAR_VAR); }
public virtual V METHOD_NAME() { throw new System.NotImplementedException(); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { return Prev(VAR_BYTE[], VAR_INT, LITERAL_CHAR); }
public virtual GetVoiceConnectorTerminationResponse METHOD_NAME(GetVoiceConnectorTerminationRequest VAR_GETVOICECONNECTORTERMINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorTerminationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorTerminationResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorTerminationResponse>(VAR_GETVOICECONNECTORTERMINATIONREQUEST, VAR_VAR); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } int VAR_INT = GeohashUtils.LookupHashLenForWidthHeight(VAR_DOUBLE, VAR_DOUBLE); return Math.Max(Math.Min(VAR_INT, m_maxLevels), LITERAL_INT); }
public virtual DescribeHsmConfigurationsResponse METHOD_NAME() { return METHOD_NAME(new DescribeHsmConfigurationsRequest()); }
public virtual DeleteInternetGatewayResponse METHOD_NAME(DeleteInternetGatewayRequest VAR_DELETEINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInternetGatewayResponseUnmarshaller.Instance; return Invoke<DeleteInternetGatewayResponse>(VAR_DELETEINTERNETGATEWAYREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(char VAR_CHAR) { lock (this) { append0(VAR_CHAR); return this; } }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is SwedishStemmer; }
public virtual int METHOD_NAME() { return pathOffset; }
public SingleTermsEnum(TermsEnum VAR_TERMSENUM, BytesRef VAR_BYTESREF) : base(tenum) { singleRef = VAR_BYTESREF; SetInitialSeekTerm(VAR_BYTESREF); }
public virtual ListAllowedNodeTypeModificationsResponse METHOD_NAME(ListAllowedNodeTypeModificationsRequest VAR_LISTALLOWEDNODETYPEMODIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAllowedNodeTypeModificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAllowedNodeTypeModificationsResponseUnmarshaller.Instance; return Invoke<ListAllowedNodeTypeModificationsResponse>(VAR_LISTALLOWEDNODETYPEMODIFICATIONSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { int VAR_INT = LITERAL_INT; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } if (VAR_INT > LITERAL_INT) { return ErrorEval.VALUE_INVALID; } if (VAR_INT == LITERAL_INT) { return new StringEval(LITERAL_STRING); } int VAR_INT = LITERAL_INT; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.NUM_ERROR; } if (VAR_INT > LITERAL_INT || VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } String VAR_STRING = this.integerToRoman(VAR_INT); if (VAR_INT == LITERAL_INT) { return new StringEval(VAR_STRING); } return new StringEval(MakeConcise(VAR_STRING, VAR_INT)); }
public virtual RegisterDomainResponse METHOD_NAME(RegisterDomainRequest VAR_REGISTERDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterDomainResponseUnmarshaller.Instance; return Invoke<RegisterDomainResponse>(VAR_REGISTERDOMAINREQUEST, VAR_VAR); }
public override V METHOD_NAME(char[] VAR_CHAR[]) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return default(V); }
public string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < this.Length; i++) { if (this.chars[i] == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } else if (this.wasEscaped[i]) VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(this.chars[i]); } return VAR_STRINGBUILDER.ToString(); }
public TrustedSigners(List<string> VAR_LIST<STRING>) { _items = VAR_LIST<STRING>; }
public virtual ModifyVpnTunnelCertificateResponse METHOD_NAME(ModifyVpnTunnelCertificateRequest VAR_MODIFYVPNTUNNELCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpnTunnelCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpnTunnelCertificateResponseUnmarshaller.Instance; return Invoke<ModifyVpnTunnelCertificateResponse>(VAR_MODIFYVPNTUNNELCERTIFICATEREQUEST, VAR_VAR); }
public virtual AuthorizeClientVpnIngressResponse METHOD_NAME(AuthorizeClientVpnIngressRequest VAR_AUTHORIZECLIENTVPNINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeClientVpnIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeClientVpnIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeClientVpnIngressResponse>(VAR_AUTHORIZECLIENTVPNINGRESSREQUEST, VAR_VAR); }
public virtual DeprecateWorkflowTypeResponse METHOD_NAME(DeprecateWorkflowTypeRequest VAR_DEPRECATEWORKFLOWTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeprecateWorkflowTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeprecateWorkflowTypeResponseUnmarshaller.Instance; return Invoke<DeprecateWorkflowTypeResponse>(VAR_DEPRECATEWORKFLOWTYPEREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return _pattern; }
public ICUNormalizer2FilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, LITERAL_STRING); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, new string[] { LITERAL_STRING, LITERAL_STRING }, LITERAL_STRING); Normalizer2 VAR_NORMALIZER2 = Normalizer2.GetInstance(LITERAL_NULL, VAR_STRING, LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal) ? Normalizer2Mode.Compose : Normalizer2Mode.Decompose); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_STRING != LITERAL_NULL) { UnicodeSet VAR_UNICODESET = new UnicodeSet(VAR_STRING); if (VAR_UNICODESET.Any()) { VAR_UNICODESET.Freeze(); VAR_NORMALIZER2 = new FilteredNormalizer2(VAR_NORMALIZER2, VAR_UNICODESET); } } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } this.VAR_NORMALIZER2 = VAR_NORMALIZER2; }
public override java.nio.LongBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (GetChild() == LITERAL_NULL) return LITERAL_STRING; return GetChild().METHOD_NAME(VAR_IESCAPEQUERYSYNTAX) + LITERAL_STRING + GetValueString(); }
public virtual GetResolverRuleAssociationResponse METHOD_NAME(GetResolverRuleAssociationRequest VAR_GETRESOLVERRULEASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResolverRuleAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResolverRuleAssociationResponseUnmarshaller.Instance; return Invoke<GetResolverRuleAssociationResponse>(VAR_GETRESOLVERRULEASSOCIATIONREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { return VAR_VALUEEVAL; }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(diff.METHOD_NAME()); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(XPosition); VAR_ILITTLEENDIANOUTPUT.WriteInt(YPosition); VAR_ILITTLEENDIANOUTPUT.WriteInt(Width); VAR_ILITTLEENDIANOUTPUT.WriteInt(Height); VAR_ILITTLEENDIANOUTPUT.WriteShort(field5_grbit); VAR_ILITTLEENDIANOUTPUT.WriteShort(field6_icrt); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new BulgarianStemFilter(VAR_TOKENSTREAM); }
public virtual GetClientCertificateResponse METHOD_NAME(GetClientCertificateRequest VAR_GETCLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetClientCertificateResponseUnmarshaller.Instance; return Invoke<GetClientCertificateResponse>(VAR_GETCLIENTCERTIFICATEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is PorterStemmer; }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public virtual long METHOD_NAME() { throw new System.NotImplementedException(); }
public override byte[] METHOD_NAME() { if (onDiskFile == LITERAL_NULL) { return base.METHOD_NAME(); } long VAR_LONG = Length(); if (int.MaxValue < VAR_LONG) { throw new OutOfMemoryException(JGitText.Get().lengthExceedsMaximumArraySize); } byte[] VAR_BYTE[] = new byte[(int)VAR_LONG]; FileInputStream VAR_FILEINPUTSTREAM = new FileInputStream(onDiskFile); try { IOUtil.ReadFully(VAR_FILEINPUTSTREAM, VAR_BYTE[], LITERAL_INT, (int)VAR_LONG); } finally { VAR_FILEINPUTSTREAM.Close(); } return VAR_BYTE[]; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public CheckDNSAvailabilityRequest(string VAR_STRING) { _cnamePrefix = VAR_STRING; }
public virtual DescribeVpcAttributeResponse METHOD_NAME(DescribeVpcAttributeRequest VAR_DESCRIBEVPCATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcAttributeResponseUnmarshaller.Instance; return Invoke<DescribeVpcAttributeResponse>(VAR_DESCRIBEVPCATTRIBUTEREQUEST, VAR_VAR); }
public virtual AddResourcePermissionsResponse METHOD_NAME(AddResourcePermissionsRequest VAR_ADDRESOURCEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddResourcePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddResourcePermissionsResponseUnmarshaller.Instance; return Invoke<AddResourcePermissionsResponse>(VAR_ADDRESOURCEPERMISSIONSREQUEST, VAR_VAR); }
public virtual DisassociateTrialComponentResponse METHOD_NAME(DisassociateTrialComponentRequest VAR_DISASSOCIATETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateTrialComponentResponseUnmarshaller.Instance; return Invoke<DisassociateTrialComponentResponse>(VAR_DISASSOCIATETRIALCOMPONENTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return this._nextEntry != LITERAL_NULL; }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_CATEGORY); }
public virtual PutConfigurationSetSendingOptionsResponse METHOD_NAME(PutConfigurationSetSendingOptionsRequest VAR_PUTCONFIGURATIONSETSENDINGOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConfigurationSetSendingOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConfigurationSetSendingOptionsResponseUnmarshaller.Instance; return Invoke<PutConfigurationSetSendingOptionsResponse>(VAR_PUTCONFIGURATIONSETSENDINGOPTIONSREQUEST, VAR_VAR); }
public virtual DisableEbsEncryptionByDefaultResponse METHOD_NAME(DisableEbsEncryptionByDefaultRequest VAR_DISABLEEBSENCRYPTIONBYDEFAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableEbsEncryptionByDefaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableEbsEncryptionByDefaultResponseUnmarshaller.Instance; return Invoke<DisableEbsEncryptionByDefaultResponse>(VAR_DISABLEEBSENCRYPTIONBYDEFAULTREQUEST, VAR_VAR); }
public override java.util.Iterator<E> METHOD_NAME() { return listIterator(LITERAL_INT); }
public virtual DeprecateDomainResponse METHOD_NAME(DeprecateDomainRequest VAR_DEPRECATEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeprecateDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeprecateDomainResponseUnmarshaller.Instance; return Invoke<DeprecateDomainResponse>(VAR_DEPRECATEDOMAINREQUEST, VAR_VAR); }
public virtual GetSegmentExportJobsResponse METHOD_NAME(GetSegmentExportJobsRequest VAR_GETSEGMENTEXPORTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentExportJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentExportJobsResponseUnmarshaller.Instance; return Invoke<GetSegmentExportJobsResponse>(VAR_GETSEGMENTEXPORTJOBSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return containsValue(VAR_OBJECT); }
public virtual int METHOD_NAME() { return endOffset; }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT) { METHOD_NAME(VAR_PARSERRULECONTEXT, Atn.ruleToStartState[VAR_INT].stateNumber, VAR_INT, LITERAL_INT); }
public virtual FilePath METHOD_NAME() { return ((FileTreeIterator.FileEntry)Current()).GetFile(); }
public override RevFilter METHOD_NAME() { return this; }
public virtual void METHOD_NAME(bool VAR_BOOL) { enabled = VAR_BOOL; }
public virtual UpdatePushTemplateResponse METHOD_NAME(UpdatePushTemplateRequest VAR_UPDATEPUSHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePushTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePushTemplateResponseUnmarshaller.Instance; return Invoke<UpdatePushTemplateResponse>(VAR_UPDATEPUSHTEMPLATEREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + lockFile; }
public override java.io.Writer METHOD_NAME(char VAR_CHAR) { write(VAR_CHAR); return this; }
public virtual GetStageResponse METHOD_NAME(GetStageRequest VAR_GETSTAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStageResponseUnmarshaller.Instance; return Invoke<GetStageResponse>(VAR_GETSTAGEREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_VALUEEVAL[].Length; if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } if (VAR_INT > LITERAL_INT) { return ErrorEval.VALUE_INVALID; } int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_INT += CountUtils.CountArg(VAR_VALUEEVAL[][i], _predicate); } return new NumberEval(VAR_INT); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return doFixed(VAR_VALUEEVAL[][LITERAL_INT], new NumberEval(LITERAL_INT), BoolEval.FALSE, VAR_INT, VAR_INT); case LITERAL_INT: return doFixed(VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], BoolEval.FALSE, VAR_INT, VAR_INT); case LITERAL_INT: return doFixed(VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); } return ErrorEval.VALUE_INVALID; }
public virtual void METHOD_NAME() { n = LITERAL_INT; }
public IEnumerator<ThreadState> METHOD_NAME() { return GetPerThreadsIterator(perThreadPool.NumThreadStatesActive); }
public EnglishMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public NameRecord METHOD_NAME(int VAR_INT) { return linkTable.METHOD_NAME(VAR_INT); }
public virtual string METHOD_NAME() { string VAR_STRING = Environment.NewLine; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (m_queries != LITERAL_NULL) { for (int i = LITERAL_INT; i < m_queries.Length; i++) { VAR_STRINGBUILDER.Append(i + LITERAL_STRING + m_queries[i].GetType().Name + LITERAL_STRING + m_queries[i].ToString()); VAR_STRINGBUILDER.Append(VAR_STRING); } } return VAR_STRINGBUILDER.ToString(); }
public virtual SkipWaitTimeForInstanceTerminationResponse METHOD_NAME(SkipWaitTimeForInstanceTerminationRequest VAR_SKIPWAITTIMEFORINSTANCETERMINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SkipWaitTimeForInstanceTerminationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SkipWaitTimeForInstanceTerminationResponseUnmarshaller.Instance; return Invoke<SkipWaitTimeForInstanceTerminationResponse>(VAR_SKIPWAITTIMEFORINSTANCETERMINATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public EdgeNGramFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { minGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenFilter.DEFAULT_MIN_GRAM_SIZE); maxGramSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenFilter.DEFAULT_MAX_GRAM_SIZE); side = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, EdgeNGramTokenFilter.Side.FRONT.ToString()); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetApplicationRevisionResponse METHOD_NAME(GetApplicationRevisionRequest VAR_GETAPPLICATIONREVISIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApplicationRevisionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApplicationRevisionResponseUnmarshaller.Instance; return Invoke<GetApplicationRevisionResponse>(VAR_GETAPPLICATIONREVISIONREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return doFixed(VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_INT, VAR_INT); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[], byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], VAR_BYTE[], LITERAL_NULL); }
public static TreeFilter METHOD_NAME(ICollection<PathFilter> VAR_ICOLLECTION<PATHFILTER>) { if (VAR_ICOLLECTION<PATHFILTER>.IsEmpty()) { throw new ArgumentException(JGitText.Get().atLeastOnePathIsRequired); } PathFilter[] VAR_PATHFILTER[] = new PathFilter[VAR_ICOLLECTION<PATHFILTER>.Count]; Sharpen.Collections.ToArray(VAR_ICOLLECTION<PATHFILTER>, VAR_PATHFILTER[]); return METHOD_NAME(VAR_PATHFILTER[]); }
public override java.util.Iterator<E> METHOD_NAME() { return new java.util.ArrayList<E>.ArrayListIterator(this); }
public virtual bool METHOD_NAME() { return clean; }
public static bool METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { return SliceEquals(VAR_BYTESREF, VAR_BYTESREF, LITERAL_INT); }
public virtual UpdateStackInstancesResponse METHOD_NAME(UpdateStackInstancesRequest VAR_UPDATESTACKINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStackInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStackInstancesResponseUnmarshaller.Instance; return Invoke<UpdateStackInstancesResponse>(VAR_UPDATESTACKINSTANCESREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT) { if (VAR_INT >= _size) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (_size - LITERAL_INT) + LITERAL_STRING); } int VAR_INT = _re.FirstSheetIndex + VAR_INT; return _re.GetInnerValueEval(VAR_INT); }
public virtual GetApiMappingsResponse METHOD_NAME(GetApiMappingsRequest VAR_GETAPIMAPPINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApiMappingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApiMappingsResponseUnmarshaller.Instance; return Invoke<GetApiMappingsResponse>(VAR_GETAPIMAPPINGSREQUEST, VAR_VAR); }
public ServerCertificateMetadata(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _path = VAR_STRING; _serverCertificateName = VAR_STRING; _serverCertificateId = VAR_STRING; _arn = VAR_STRING; }
public virtual ListLedgersResponse METHOD_NAME(ListLedgersRequest VAR_LISTLEDGERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLedgersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLedgersResponseUnmarshaller.Instance; return Invoke<ListLedgersResponse>(VAR_LISTLEDGERSREQUEST, VAR_VAR); }
public UnknownFormatConversionException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } this.VAR_STRING = VAR_STRING; }
public BytesRef METHOD_NAME() { if (outerInstance.done) { return LITERAL_NULL; } if (isFirstLine) { isFirstLine = false; return spare; } outerInstance.line = outerInstance.@in.ReadLine(); if (outerInstance.line != LITERAL_NULL) { string[] VAR_STRING[] = outerInstance.line.Split(new string[] { outerInstance.fieldDelimiter }, StringSplitOptions.RemoveEmptyEntries); if (VAR_STRING[].Length > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } else if (VAR_STRING[].Length == LITERAL_INT) { spare.CopyChars(VAR_STRING[][LITERAL_INT]); ReadWeight(VAR_STRING[][LITERAL_INT]); if (hasPayloads) { curPayload.CopyChars(VAR_STRING[][LITERAL_INT]); } } else if (VAR_STRING[].Length == LITERAL_INT) { spare.CopyChars(VAR_STRING[][LITERAL_INT]); ReadWeight(VAR_STRING[][LITERAL_INT]); if (hasPayloads) { curPayload = new BytesRef(); } } else { spare.CopyChars(VAR_STRING[][LITERAL_INT]); curWeight = LITERAL_INT; if (hasPayloads) { curPayload = new BytesRef(); } } return spare; } else { outerInstance.done = true; IOUtils.Dispose(outerInstance.@in); return LITERAL_NULL; } }
public virtual string METHOD_NAME() { return remote; }
public DefaultUDFFinder(String[] VAR_STRING[], FreeRefFunction[] VAR_FREEREFFUNCTION[]) { int VAR_INT = VAR_STRING[].Length; if (VAR_FREEREFFUNCTION[].Length != VAR_INT) { throw new ArgumentException(LITERAL_STRING); } Dictionary<String, FreeRefFunction> VAR_DICTIONARY<STRING, FREEREFFUNCTION> = new Dictionary<String, FreeRefFunction>(VAR_INT * LITERAL_INT / LITERAL_INT); for (int i = LITERAL_INT; i < VAR_FREEREFFUNCTION[].Length; i++) { VAR_DICTIONARY<STRING, FREEREFFUNCTION>[VAR_STRING[][i].ToUpper()] = VAR_FREEREFFUNCTION[][i]; } _functionsByName = VAR_DICTIONARY<STRING, FREEREFFUNCTION>; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = escherGroup.CreateShape(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT + VAR_INT, VAR_INT + VAR_INT)); VAR_HSSFSIMPLESHAPE.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_OVAL); VAR_HSSFSIMPLESHAPE.LineWidth = LITERAL_INT; VAR_HSSFSIMPLESHAPE.SetLineStyleColor(foreground.R, foreground.G, foreground.B); VAR_HSSFSIMPLESHAPE.IsNoFill = (true); }
public static FontUnderline METHOD_NAME(int VAR_INT) { return _table[VAR_INT]; }
public PutAttributesRequest(string VAR_STRING, string VAR_STRING, List<ReplaceableAttribute> VAR_LIST<REPLACEABLEATTRIBUTE>) { _domainName = VAR_STRING; _itemName = VAR_STRING; _attributes = VAR_LIST<REPLACEABLEATTRIBUTE>; }
public virtual ListExportsResponse METHOD_NAME(ListExportsRequest VAR_LISTEXPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListExportsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListExportsResponseUnmarshaller.Instance; return Invoke<ListExportsResponse>(VAR_LISTEXPORTSREQUEST, VAR_VAR); }
public OpenStringBuilder(int VAR_INT) { m_buf = new char[VAR_INT]; }
public virtual StopTextTranslationJobResponse METHOD_NAME(StopTextTranslationJobRequest VAR_STOPTEXTTRANSLATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTextTranslationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTextTranslationJobResponseUnmarshaller.Instance; return Invoke<StopTextTranslationJobResponse>(VAR_STOPTEXTTRANSLATIONJOBREQUEST, VAR_VAR); }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.Action(LITERAL_NULL, ruleIndex, actionIndex); }
public virtual TestInvokeAuthorizerResponse METHOD_NAME(TestInvokeAuthorizerRequest VAR_TESTINVOKEAUTHORIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestInvokeAuthorizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestInvokeAuthorizerResponseUnmarshaller.Instance; return Invoke<TestInvokeAuthorizerResponse>(VAR_TESTINVOKEAUTHORIZERREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { VAR_INT = RemoveCase(VAR_CHAR[], VAR_INT); return Normalize(VAR_CHAR[], VAR_INT); }
public virtual DescribeTableReplicaAutoScalingResponse METHOD_NAME(DescribeTableReplicaAutoScalingRequest VAR_DESCRIBETABLEREPLICAAUTOSCALINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTableReplicaAutoScalingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTableReplicaAutoScalingResponseUnmarshaller.Instance; return Invoke<DescribeTableReplicaAutoScalingResponse>(VAR_DESCRIBETABLEREPLICAAUTOSCALINGREQUEST, VAR_VAR); }
public int METHOD_NAME() { return _rc4.Xorshort(_le.METHOD_NAME()); }
public int METHOD_NAME() { return groupCountImpl(address); }
public GetConsoleOutputRequest(string VAR_STRING) { _instanceId = VAR_STRING; }
public virtual DeleteHITResponse METHOD_NAME(DeleteHITRequest VAR_DELETEHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHITResponseUnmarshaller.Instance; return Invoke<DeleteHITResponse>(VAR_DELETEHITREQUEST, VAR_VAR); }
public static DVConstraint METHOD_NAME(String VAR_STRING) { return new DVConstraint(VAR_STRING, LITERAL_NULL); }
public UnbufferedCharStream(Stream VAR_STREAM, int VAR_INT) : this(bufferSize) { this.VAR_STREAM = new StreamReader(VAR_STREAM); Fill(LITERAL_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + @delegate.METHOD_NAME() + LITERAL_STRING + maxTokenCount + LITERAL_STRING + consumeAllTokens + LITERAL_STRING; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return c.METHOD_NAME(VAR_OBJECT); }
public NotImplementedFunction(String VAR_STRING) { _functionName = VAR_STRING; }
public virtual CreateRecommenderConfigurationResponse METHOD_NAME(CreateRecommenderConfigurationRequest VAR_CREATERECOMMENDERCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRecommenderConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<CreateRecommenderConfigurationResponse>(VAR_CREATERECOMMENDERCONFIGURATIONREQUEST, VAR_VAR); }
public GetNamespaceListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual CreateDefaultVpcResponse METHOD_NAME(CreateDefaultVpcRequest VAR_CREATEDEFAULTVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDefaultVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDefaultVpcResponseUnmarshaller.Instance; return Invoke<CreateDefaultVpcResponse>(VAR_CREATEDEFAULTVPCREQUEST, VAR_VAR); }
public virtual CreateTemplateResponse METHOD_NAME(CreateTemplateRequest VAR_CREATETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTemplateResponseUnmarshaller.Instance; return Invoke<CreateTemplateResponse>(VAR_CREATETEMPLATEREQUEST, VAR_VAR); }
public override ICollection<ReflogEntry> METHOD_NAME() { CheckCallable(); try { ReflogReader VAR_REFLOGREADER = new ReflogReader(repo, @ref); return VAR_REFLOGREADER.GetReverseEntries(); } catch (IOException e) { throw new InvalidRefNameException(MessageFormat.Format(JGitText.Get().cannotRead, @ref), e); } }
public CreateVpcRequest(string VAR_STRING) { _cidrBlock = VAR_STRING; }
public FormulaUsedBlankCellSet() { _sheetGroupsByBookSheet = new Hashtable(); }
public SpatialPrefixTree(SpatialContext VAR_SPATIALCONTEXT, int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT); this.m_ctx = VAR_SPATIALCONTEXT; this.m_maxLevels = VAR_INT; }
public virtual ListObjectParentsResponse METHOD_NAME(ListObjectParentsRequest VAR_LISTOBJECTPARENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListObjectParentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListObjectParentsResponseUnmarshaller.Instance; return Invoke<ListObjectParentsResponse>(VAR_LISTOBJECTPARENTSREQUEST, VAR_VAR); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE) { return PMT(VAR_DOUBLE, VAR_INT, VAR_DOUBLE) - IPMT(VAR_DOUBLE, VAR_INT, VAR_INT, VAR_DOUBLE); }
public Header(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual DescribeSpotInstanceRequestsResponse METHOD_NAME() { return METHOD_NAME(new DescribeSpotInstanceRequestsRequest()); }
public SetTransition(ATNState VAR_ATNSTATE, IntervalSet VAR_INTERVALSET) : base(target) { if (VAR_INTERVALSET == LITERAL_NULL) { VAR_INTERVALSET = IntervalSet.Of(TokenConstants.InvalidType); } this.VAR_INTERVALSET = VAR_INTERVALSET; }
public override Object METHOD_NAME() { return this; }
public override int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT) throw new ArgumentException(LITERAL_STRING); if (VAR_INT >= VAR_CHAR[].Length) throw new ArgumentException(LITERAL_STRING); if (VAR_INT <= LITERAL_INT) throw new ArgumentException(LITERAL_STRING); while (!inputFinished || inputBuffer.Length > LITERAL_INT || resultBuffer.Length > LITERAL_INT) { int VAR_INT; if (resultBuffer.Length > LITERAL_INT) { VAR_INT = OutputFromResultBuffer(VAR_CHAR[], VAR_INT, VAR_INT); if (VAR_INT > LITERAL_INT) { return VAR_INT; } } int VAR_INT = ReadAndNormalizeFromInput(); if (VAR_INT > LITERAL_INT) { VAR_INT = OutputFromResultBuffer(VAR_CHAR[], VAR_INT, VAR_INT); if (VAR_INT > LITERAL_INT) { return VAR_INT; } } ReadInputToBuffer(); } return LITERAL_INT; }
public void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public virtual void METHOD_NAME(float VAR_FLOAT, float VAR_FLOAT) { tf_min = VAR_FLOAT; tf_base = VAR_FLOAT; }
public DatasetSplitter(double VAR_DOUBLE, double VAR_DOUBLE) { this._crossValidationRatio = VAR_DOUBLE; this._testRatio = VAR_DOUBLE; }
public virtual ListBuildsResponse METHOD_NAME(ListBuildsRequest VAR_LISTBUILDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBuildsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBuildsResponseUnmarshaller.Instance; return Invoke<ListBuildsResponse>(VAR_LISTBUILDSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return startLine; }
public virtual void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { TokenSource.METHOD_NAME(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rtFirst); VAR_ILITTLEENDIANOUTPUT.WriteShort(rtLast); }
public virtual RestoreDBClusterFromS3Response METHOD_NAME(RestoreDBClusterFromS3Request VAR_RESTOREDBCLUSTERFROMS3REQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBClusterFromS3RequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBClusterFromS3ResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterFromS3Response>(VAR_RESTOREDBCLUSTERFROMS3REQUEST, VAR_VAR); }
public virtual void METHOD_NAME(bool VAR_BOOL) { METHOD_NAME(VAR_BOOL.ToString()); }
public ThrowingPrintWriter(TextWriter VAR_TEXTWRITER) { this.VAR_TEXTWRITER = VAR_TEXTWRITER; LF = AccessController.DoPrivileged(new _PrivilegedAction_69()); }
public virtual DescribeResourceResponse METHOD_NAME(DescribeResourceRequest VAR_DESCRIBERESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeResourceResponseUnmarshaller.Instance; return Invoke<DescribeResourceResponse>(VAR_DESCRIBERESOURCEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return flags; }
public virtual GetAccountSettingsResponse METHOD_NAME(GetAccountSettingsRequest VAR_GETACCOUNTSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAccountSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAccountSettingsResponseUnmarshaller.Instance; return Invoke<GetAccountSettingsResponse>(VAR_GETACCOUNTSETTINGSREQUEST, VAR_VAR); }
public virtual UpdateClusterSettingsResponse METHOD_NAME(UpdateClusterSettingsRequest VAR_UPDATECLUSTERSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateClusterSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateClusterSettingsResponseUnmarshaller.Instance; return Invoke<UpdateClusterSettingsResponse>(VAR_UPDATECLUSTERSETTINGSREQUEST, VAR_VAR); }
public virtual GetRelationalDatabaseSnapshotsResponse METHOD_NAME(GetRelationalDatabaseSnapshotsRequest VAR_GETRELATIONALDATABASESNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseSnapshotsResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseSnapshotsResponse>(VAR_GETRELATIONALDATABASESNAPSHOTSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(short VAR_SHORT) { int VAR_INT = _position + libcore.io.SizeOf.SHORT; if (VAR_INT > _limit) { throw new java.nio.BufferOverflowException(); } libcore.io.Memory.pokeShort(backingArray, offset + _position, VAR_SHORT, _order); _position = VAR_INT; return this; }
public virtual DescribeProcessingJobResponse METHOD_NAME(DescribeProcessingJobRequest VAR_DESCRIBEPROCESSINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeProcessingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeProcessingJobResponseUnmarshaller.Instance; return Invoke<DescribeProcessingJobResponse>(VAR_DESCRIBEPROCESSINGJOBREQUEST, VAR_VAR); }
public UnbindInstance2VpcRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public ByteArrayBackedDataSource(byte[] VAR_BYTE[], int VAR_INT) { this.buffer = VAR_BYTE[]; this.VAR_INT = VAR_INT; }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.EmptySet<string>(); }
public override void METHOD_NAME(long VAR_LONG) { termOrd = (int)VAR_LONG; SetTerm(); }
public virtual QueryConfigHandler METHOD_NAME() { return queryConfigHandler; }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public virtual UpdateDocumentationPartResponse METHOD_NAME(UpdateDocumentationPartRequest VAR_UPDATEDOCUMENTATIONPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDocumentationPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDocumentationPartResponseUnmarshaller.Instance; return Invoke<UpdateDocumentationPartResponse>(VAR_UPDATEDOCUMENTATIONPARTREQUEST, VAR_VAR); }
public virtual DeleteDBClusterResponse METHOD_NAME(DeleteDBClusterRequest VAR_DELETEDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBClusterResponseUnmarshaller.Instance; return Invoke<DeleteDBClusterResponse>(VAR_DELETEDBCLUSTERREQUEST, VAR_VAR); }
public virtual android.graphics.drawable.Drawable METHOD_NAME() { return mProgressDrawable; }
public ConfigureHealthCheckRequest(string VAR_STRING, HealthCheck VAR_HEALTHCHECK) { _loadBalancerName = VAR_STRING; _healthCheck = VAR_HEALTHCHECK; }
public Row(Row VAR_ROW) { cells = VAR_ROW.cells; }
public void METHOD_NAME() { this.field_1_numShapes++; }
public virtual EnableEbsEncryptionByDefaultResponse METHOD_NAME(EnableEbsEncryptionByDefaultRequest VAR_ENABLEEBSENCRYPTIONBYDEFAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableEbsEncryptionByDefaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableEbsEncryptionByDefaultResponseUnmarshaller.Instance; return Invoke<EnableEbsEncryptionByDefaultResponse>(VAR_ENABLEEBSENCRYPTIONBYDEFAULTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[]) { Clear(); value = VAR_CHAR[]; }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME() + LITERAL_STRING + b.METHOD_NAME() + LITERAL_STRING; }
public virtual DeleteIntegrationResponseResponse METHOD_NAME(DeleteIntegrationResponseRequest VAR_DELETEINTEGRATIONRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIntegrationResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIntegrationResponseResponseUnmarshaller.Instance; return Invoke<DeleteIntegrationResponseResponse>(VAR_DELETEINTEGRATIONRESPONSEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { return map.ContainsKey(VAR_ICHARSEQUENCE); }
public virtual string METHOD_NAME(CultureInfo VAR_CULTUREINFO) { return this.m_message.METHOD_NAME(VAR_CULTUREINFO); }
public static long METHOD_NAME(long VAR_LONG) { VAR_LONG--; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG |= VAR_LONG >> LITERAL_INT; VAR_LONG++; return VAR_LONG; }
public virtual CreateTransitGatewayMulticastDomainResponse METHOD_NAME(CreateTransitGatewayMulticastDomainRequest VAR_CREATETRANSITGATEWAYMULTICASTDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayMulticastDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayMulticastDomainResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayMulticastDomainResponse>(VAR_CREATETRANSITGATEWAYMULTICASTDOMAINREQUEST, VAR_VAR); }
public virtual DisassociateDomainResponse METHOD_NAME(DisassociateDomainRequest VAR_DISASSOCIATEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateDomainResponseUnmarshaller.Instance; return Invoke<DisassociateDomainResponse>(VAR_DISASSOCIATEDOMAINREQUEST, VAR_VAR); }
public override string METHOD_NAME() { var VAR_VAR = new StringBuilder(); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(this.Partition); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(this.Service); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(this.Region); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(this.AccountId); VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(this.Resource); return VAR_VAR.METHOD_NAME(); }
public CellWalk(ISheet VAR_ISHEET, CellRangeAddress VAR_CELLRANGEADDRESS) { this.VAR_ISHEET = VAR_ISHEET; this.VAR_CELLRANGEADDRESS = VAR_CELLRANGEADDRESS; this.traverseEmptyCells = false; }
public virtual SendMessageBatchResponse METHOD_NAME(string VAR_STRING, List<SendMessageBatchRequestEntry> VAR_LIST<SENDMESSAGEBATCHREQUESTENTRY>) { var VAR_VAR = new SendMessageBatchRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.Entries = VAR_LIST<SENDMESSAGEBATCHREQUESTENTRY>; return METHOD_NAME(VAR_VAR); }
public virtual GetImportJobsResponse METHOD_NAME(GetImportJobsRequest VAR_GETIMPORTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetImportJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetImportJobsResponseUnmarshaller.Instance; return Invoke<GetImportJobsResponse>(VAR_GETIMPORTJOBSREQUEST, VAR_VAR); }
public override float METHOD_NAME(int VAR_INT, string VAR_STRING, int VAR_INT, float VAR_FLOAT) { return VAR_INT > LITERAL_INT ? VAR_FLOAT : LITERAL_INT; }
public virtual CreateRelationalDatabaseResponse METHOD_NAME(CreateRelationalDatabaseRequest VAR_CREATERELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseResponse>(VAR_CREATERELATIONALDATABASEREQUEST, VAR_VAR); }
public Arc<T> METHOD_NAME(Arc<T> VAR_ARC<T>) { Node = VAR_ARC<T>.Node; Label = VAR_ARC<T>.Label; Target = VAR_ARC<T>.Target; Flags = VAR_ARC<T>.Flags; Output = VAR_ARC<T>.Output; NextFinalOutput = VAR_ARC<T>.Output; NextFinalOutput = VAR_ARC<T>.NextFinalOutput; NextArc = VAR_ARC<T>.NextArc; BytesPerArc = VAR_ARC<T>.BytesPerArc; if (BytesPerArc != LITERAL_INT) { PosArcsStart = VAR_ARC<T>.PosArcsStart; ArcIdx = VAR_ARC<T>.ArcIdx; NumArcs = VAR_ARC<T>.NumArcs; } return this; }
public virtual AbbreviatedObjectId METHOD_NAME() { return oldId; }
public virtual ContinueUpdateRollbackResponse METHOD_NAME(ContinueUpdateRollbackRequest VAR_CONTINUEUPDATEROLLBACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ContinueUpdateRollbackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ContinueUpdateRollbackResponseUnmarshaller.Instance; return Invoke<ContinueUpdateRollbackResponse>(VAR_CONTINUEUPDATEROLLBACKREQUEST, VAR_VAR); }
public virtual ListDataSourcesResponse METHOD_NAME(ListDataSourcesRequest VAR_LISTDATASOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDataSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDataSourcesResponseUnmarshaller.Instance; return Invoke<ListDataSourcesResponse>(VAR_LISTDATASOURCESREQUEST, VAR_VAR); }
public void METHOD_NAME(Lexer VAR_LEXER) { VAR_LEXER.Channel = channel; }
public virtual int METHOD_NAME(int VAR_INT) { if (VAR_INT == -LITERAL_INT) { return lastChar; } Sync(VAR_INT); int VAR_INT = p + VAR_INT - LITERAL_INT; if (VAR_INT < LITERAL_INT) { throw new ArgumentOutOfRangeException(); } if (VAR_INT >= n) { return IntStreamConstants.EOF; } return data[VAR_INT]; }
public sealed override object METHOD_NAME() { return protectedArray(); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public RefWriter(RefList<Ref> VAR_REFLIST<REF>) { this.VAR_REFLIST<REF> = VAR_REFLIST<REF>.AsList(); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual NGit.Api.SubmoduleUpdateCommand METHOD_NAME(ProgressMonitormonitor VAR_PROGRESSMONITORMONITOR) { this.monitor = monitor; return this; }
public virtual DescribeDatasetGroupResponse METHOD_NAME(DescribeDatasetGroupRequest VAR_DESCRIBEDATASETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDatasetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDatasetGroupResponseUnmarshaller.Instance; return Invoke<DescribeDatasetGroupResponse>(VAR_DESCRIBEDATASETGROUPREQUEST, VAR_VAR); }
public virtual ListGameServerGroupsResponse METHOD_NAME(ListGameServerGroupsRequest VAR_LISTGAMESERVERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGameServerGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGameServerGroupsResponseUnmarshaller.Instance; return Invoke<ListGameServerGroupsResponse>(VAR_LISTGAMESERVERGROUPSREQUEST, VAR_VAR); }
public NameRecord METHOD_NAME(byte VAR_BYTE, int VAR_INT) { return OrCreateLinkTable.METHOD_NAME(VAR_BYTE, VAR_INT); }
public long METHOD_NAME() { int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); return (((long)VAR_INT << LITERAL_INT) + ((long)VAR_INT << LITERAL_INT) + ((long)VAR_INT << LITERAL_INT) + ((long)VAR_INT << LITERAL_INT) + ((long)VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT)); }
public static ValueVector METHOD_NAME(TwoDEval VAR_TWODEVAL) { if (VAR_TWODEVAL.IsColumn) { return CreateColumnVector(VAR_TWODEVAL, LITERAL_INT); } if (VAR_TWODEVAL.IsRow) { return CreateRowVector(VAR_TWODEVAL, LITERAL_INT); } return LITERAL_NULL; }
public virtual bool METHOD_NAME(int VAR_INT) { return VAR_INT >= LITERAL_INT && VAR_INT <= LITERAL_INT; }
public override string METHOD_NAME() { return LITERAL_STRING + LITERAL_STRING + decision + LITERAL_STRING + contextSensitivities.Count + LITERAL_STRING + errors.Count + LITERAL_STRING + ambiguities.Count + LITERAL_STRING + SLL_TotalLook + LITERAL_STRING + SLL_ATNTransitions + LITERAL_STRING + SLL_DFATransitions + LITERAL_STRING + LL_Fallback + LITERAL_STRING + LL_TotalLook + LITERAL_STRING + LL_ATNTransitions + LITERAL_CHAR; }
public virtual RemoveNoteCommand METHOD_NAME() { return new RemoveNoteCommand(repo); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = _thedata.Length; for (IEnumerator iterator = ChildRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_INT += VAR_ESCHERRECORD.RecordSize; } LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); Array.Copy(_thedata, LITERAL_INT, VAR_BYTE[], VAR_INT + LITERAL_INT, _thedata.Length); int VAR_INT = VAR_INT + LITERAL_INT + _thedata.Length; for (IEnumerator iterator = ChildRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_INT += VAR_ESCHERRECORD.METHOD_NAME(VAR_INT, VAR_BYTE[]); } VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { if (stopWordFiles != LITERAL_NULL) { if (FORMAT_WORDSET.Equals(format, StringComparison.OrdinalIgnoreCase)) { stopWords = GetWordSet(VAR_IRESOURCELOADER, stopWordFiles, ignoreCase); } else if (FORMAT_SNOWBALL.Equals(format, StringComparison.OrdinalIgnoreCase)) { stopWords = GetSnowballWordSet(VAR_IRESOURCELOADER, stopWordFiles, ignoreCase); } else { throw new System.ArgumentException(LITERAL_STRING + format); } } else { if (LITERAL_NULL != format) { throw new System.ArgumentException(LITERAL_STRING + format); } stopWords = new CharArraySet(m_luceneMatchVersion, StopAnalyzer.ENGLISH_STOP_WORDS_SET, ignoreCase); } }
public PredicateTransition(ATNState VAR_ATNSTATE, int VAR_INT, int VAR_INT, bool VAR_BOOL) : base(target) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public CharFilter(TextReader VAR_TEXTREADER) { this.m_input = VAR_TEXTREADER; }
public sealed override java.nio.DoubleBuffer METHOD_NAME(java.nio.DoubleBuffer VAR_JAVA.NIO.DOUBLEBUFFER) { throw new java.nio.ReadOnlyBufferException(); }
public virtual AssociateVpcCidrBlockResponse METHOD_NAME(AssociateVpcCidrBlockRequest VAR_ASSOCIATEVPCCIDRBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateVpcCidrBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateVpcCidrBlockResponseUnmarshaller.Instance; return Invoke<AssociateVpcCidrBlockResponse>(VAR_ASSOCIATEVPCCIDRBLOCKREQUEST, VAR_VAR); }
public static DateTime METHOD_NAME(double VAR_DOUBLE, bool VAR_BOOL, TimeZone VAR_TIMEZONE, bool VAR_BOOL) { return GetJavaCalendar(VAR_DOUBLE, VAR_BOOL, VAR_BOOL); }
public virtual AttachTypedLinkResponse METHOD_NAME(AttachTypedLinkRequest VAR_ATTACHTYPEDLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachTypedLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachTypedLinkResponseUnmarshaller.Instance; return Invoke<AttachTypedLinkResponse>(VAR_ATTACHTYPEDLINKREQUEST, VAR_VAR); }
public static CellValue METHOD_NAME(int VAR_INT) { return new CellValue(CellType.Error, LITERAL_INT, false, LITERAL_NULL, VAR_INT); }
public short METHOD_NAME() { return headerValue; }
public virtual DescribeFindingsResponse METHOD_NAME(DescribeFindingsRequest VAR_DESCRIBEFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFindingsResponseUnmarshaller.Instance; return Invoke<DescribeFindingsResponse>(VAR_DESCRIBEFINDINGSREQUEST, VAR_VAR); }
public virtual GetSdkTypeResponse METHOD_NAME(GetSdkTypeRequest VAR_GETSDKTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSdkTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSdkTypeResponseUnmarshaller.Instance; return Invoke<GetSdkTypeResponse>(VAR_GETSDKTYPEREQUEST, VAR_VAR); }
public virtual PutLifecycleConfigurationResponse METHOD_NAME(PutLifecycleConfigurationRequest VAR_PUTLIFECYCLECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutLifecycleConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutLifecycleConfigurationResponseUnmarshaller.Instance; return Invoke<PutLifecycleConfigurationResponse>(VAR_PUTLIFECYCLECONFIGURATIONREQUEST, VAR_VAR); }
public virtual CommonToken METHOD_NAME(int VAR_INT, string VAR_STRING) { return new CommonToken(VAR_INT, VAR_STRING); }
public CommitBuilder() { parentIds = EMPTY_OBJECTID_LIST; encoding = Constants.CHARSET; }
public bool METHOD_NAME() { return METHOD_NAME(_firstCell, _lastCell); }
public T METHOD_NAME(T VAR_T) { size++; heap[size] = VAR_T; UpHeap(); return heap[LITERAL_INT]; }
public virtual ListTagCommand METHOD_NAME() { return new ListTagCommand(repo); }
public virtual DescribeLoadBalancerPoliciesResponse METHOD_NAME() { return METHOD_NAME(new DescribeLoadBalancerPoliciesRequest()); }
public LikePhotoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual E METHOD_NAME() { return (_size == LITERAL_INT) ? default(E) : removeLastImpl(); }
public override int METHOD_NAME() { return this._enclosing._size; }
public static float[] METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_FLOAT[], LITERAL_INT, VAR_INT); }
public virtual LogoutUserResponse METHOD_NAME(LogoutUserRequest VAR_LOGOUTUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = LogoutUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = LogoutUserResponseUnmarshaller.Instance; return Invoke<LogoutUserResponse>(VAR_LOGOUTUSERREQUEST, VAR_VAR); }
public bool METHOD_NAME(char VAR_CHAR) { return char.IsLetter(VAR_CHAR); }
public virtual ListResolverEndpointIpAddressesResponse METHOD_NAME(ListResolverEndpointIpAddressesRequest VAR_LISTRESOLVERENDPOINTIPADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResolverEndpointIpAddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResolverEndpointIpAddressesResponseUnmarshaller.Instance; return Invoke<ListResolverEndpointIpAddressesResponse>(VAR_LISTRESOLVERENDPOINTIPADDRESSESREQUEST, VAR_VAR); }
public virtual ListHealthChecksResponse METHOD_NAME(ListHealthChecksRequest VAR_LISTHEALTHCHECKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHealthChecksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHealthChecksResponseUnmarshaller.Instance; return Invoke<ListHealthChecksResponse>(VAR_LISTHEALTHCHECKSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_OBJECT, VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public virtual GetQualificationScoreResponse METHOD_NAME(GetQualificationScoreRequest VAR_GETQUALIFICATIONSCOREREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQualificationScoreRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQualificationScoreResponseUnmarshaller.Instance; return Invoke<GetQualificationScoreResponse>(VAR_GETQUALIFICATIONSCOREREQUEST, VAR_VAR); }
public virtual ListMeetingsResponse METHOD_NAME(ListMeetingsRequest VAR_LISTMEETINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMeetingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMeetingsResponseUnmarshaller.Instance; return Invoke<ListMeetingsResponse>(VAR_LISTMEETINGSREQUEST, VAR_VAR); }
public virtual LookupPolicyResponse METHOD_NAME(LookupPolicyRequest VAR_LOOKUPPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = LookupPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = LookupPolicyResponseUnmarshaller.Instance; return Invoke<LookupPolicyResponse>(VAR_LOOKUPPOLICYREQUEST, VAR_VAR); }
public virtual ListAssessmentRunAgentsResponse METHOD_NAME(ListAssessmentRunAgentsRequest VAR_LISTASSESSMENTRUNAGENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssessmentRunAgentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssessmentRunAgentsResponseUnmarshaller.Instance; return Invoke<ListAssessmentRunAgentsResponse>(VAR_LISTASSESSMENTRUNAGENTSREQUEST, VAR_VAR); }
public virtual UpdateEndpointWeightsAndCapacitiesResponse METHOD_NAME(UpdateEndpointWeightsAndCapacitiesRequest VAR_UPDATEENDPOINTWEIGHTSANDCAPACITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEndpointWeightsAndCapacitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEndpointWeightsAndCapacitiesResponseUnmarshaller.Instance; return Invoke<UpdateEndpointWeightsAndCapacitiesResponse>(VAR_UPDATEENDPOINTWEIGHTSANDCAPACITIESREQUEST, VAR_VAR); }
public virtual UpdateCloudFrontOriginAccessIdentityResponse METHOD_NAME(UpdateCloudFrontOriginAccessIdentityRequest VAR_UPDATECLOUDFRONTORIGINACCESSIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<UpdateCloudFrontOriginAccessIdentityResponse>(VAR_UPDATECLOUDFRONTORIGINACCESSIDENTITYREQUEST, VAR_VAR); }
public BatchPutAttributesRequest(string VAR_STRING, List<ReplaceableItem> VAR_LIST<REPLACEABLEITEM>) { _domainName = VAR_STRING; _items = VAR_LIST<REPLACEABLEITEM>; }
public virtual DeleteAnomalyDetectorResponse METHOD_NAME(DeleteAnomalyDetectorRequest VAR_DELETEANOMALYDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAnomalyDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAnomalyDetectorResponseUnmarshaller.Instance; return Invoke<DeleteAnomalyDetectorResponse>(VAR_DELETEANOMALYDETECTORREQUEST, VAR_VAR); }
public virtual DeleteSpotDatafeedSubscriptionResponse METHOD_NAME() { return METHOD_NAME(new DeleteSpotDatafeedSubscriptionRequest()); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { lock (@lock) { checkNotClosed(); if (VAR_INT > pos) { throw new System.IO.IOException(LITERAL_STRING); } java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT + VAR_INT - LITERAL_INT; i >= VAR_INT; i--) { METHOD_NAME(VAR_CHAR[][i]); } } } }
public virtual string METHOD_NAME() { return this.oldPrefix; }
public CommonGramsFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { commonWordFiles = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); format = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DeleteCorsConfigurationResponse METHOD_NAME(DeleteCorsConfigurationRequest VAR_DELETECORSCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCorsConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCorsConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteCorsConfigurationResponse>(VAR_DELETECORSCONFIGURATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } if ((VAR_INT | VAR_INT) < LITERAL_INT || VAR_INT > VAR_STRING.Length - VAR_INT) { throw new java.lang.StringIndexOutOfBoundsException(VAR_STRING, VAR_INT, VAR_INT); } lock (@lock) { expand(VAR_INT); Sharpen.StringHelper.GetCharsForString(VAR_STRING, VAR_INT, VAR_INT + VAR_INT, buf, this.VAR_INT); this.VAR_INT += VAR_INT; } }
public virtual GetMethodResponse METHOD_NAME(GetMethodRequest VAR_GETMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMethodResponseUnmarshaller.Instance; return Invoke<GetMethodResponse>(VAR_GETMETHODREQUEST, VAR_VAR); }
public virtual Repository METHOD_NAME() { return repo; }
public virtual DeleteTrafficMirrorFilterRuleResponse METHOD_NAME(DeleteTrafficMirrorFilterRuleRequest VAR_DELETETRAFFICMIRRORFILTERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficMirrorFilterRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficMirrorFilterRuleResponseUnmarshaller.Instance; return Invoke<DeleteTrafficMirrorFilterRuleResponse>(VAR_DELETETRAFFICMIRRORFILTERRULEREQUEST, VAR_VAR); }
public virtual CreateLabelingJobResponse METHOD_NAME(CreateLabelingJobRequest VAR_CREATELABELINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLabelingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLabelingJobResponseUnmarshaller.Instance; return Invoke<CreateLabelingJobResponse>(VAR_CREATELABELINGJOBREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is java.util.concurrent.CopyOnWriteArrayList<E>) { return this == VAR_OBJECT || java.util.Arrays.equals(elements, ((java.util.concurrent.CopyOnWriteArrayList<E>)VAR_OBJECT).elements); } else { if (VAR_OBJECT is java.util.List<E>) { object[] VAR_OBJECT[] = elements; java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = ((java.util.List<E>)VAR_OBJECT).iterator(); foreach (object o in VAR_OBJECT[]) { if (!VAR_JAVA.UTIL.ITERATOR<E>.hasNext() || !libcore.util.Objects.equal(o, VAR_JAVA.UTIL.ITERATOR<E>.next())) { return false; } } return !VAR_JAVA.UTIL.ITERATOR<E>.hasNext(); } else { return false; } } }
public virtual DeleteCustomMetadataResponse METHOD_NAME(DeleteCustomMetadataRequest VAR_DELETECUSTOMMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCustomMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCustomMetadataResponseUnmarshaller.Instance; return Invoke<DeleteCustomMetadataResponse>(VAR_DELETECUSTOMMETADATAREQUEST, VAR_VAR); }
public virtual DescribeNetworkAclsResponse METHOD_NAME(DescribeNetworkAclsRequest VAR_DESCRIBENETWORKACLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNetworkAclsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNetworkAclsResponseUnmarshaller.Instance; return Invoke<DescribeNetworkAclsResponse>(VAR_DESCRIBENETWORKACLSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(sid)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public UnsubscribeRequest(string VAR_STRING) { _subscriptionArn = VAR_STRING; }
public virtual ListRulesPackagesResponse METHOD_NAME(ListRulesPackagesRequest VAR_LISTRULESPACKAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRulesPackagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRulesPackagesResponseUnmarshaller.Instance; return Invoke<ListRulesPackagesResponse>(VAR_LISTRULESPACKAGESREQUEST, VAR_VAR); }
public virtual DisableMetricsCollectionResponse METHOD_NAME(DisableMetricsCollectionRequest VAR_DISABLEMETRICSCOLLECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableMetricsCollectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableMetricsCollectionResponseUnmarshaller.Instance; return Invoke<DisableMetricsCollectionResponse>(VAR_DISABLEMETRICSCOLLECTIONREQUEST, VAR_VAR); }
public static java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { lock (this) { int VAR_INT = VAR_OBJECT.GetHashCode(); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = table; { for (java.util.Hashtable.HashtableEntry<K, V> e = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT & (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length - LITERAL_INT)]; e != LITERAL_NULL; e = e.next) { K VAR_K = e.VAR_OBJECT; if (Sharpen.Util.Equals(VAR_K, VAR_OBJECT) || (e.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_K))) { return true; } } } return false; } }
public override void METHOD_NAME() { System.Exception VAR_SYSTEM.EXCEPTION = LITERAL_NULL; try { flush(); } catch (System.Exception e) { VAR_SYSTEM.EXCEPTION = e; } try { @out.METHOD_NAME(); } catch (System.Exception e) { if (VAR_SYSTEM.EXCEPTION == LITERAL_NULL) { VAR_SYSTEM.EXCEPTION = e; } } if (VAR_SYSTEM.EXCEPTION != LITERAL_NULL) { Sharpen.Util.Throw(VAR_SYSTEM.EXCEPTION); } }
public virtual IList<string> METHOD_NAME() { return conflictList; }
public virtual ListOrganizationAdminAccountsResponse METHOD_NAME(ListOrganizationAdminAccountsRequest VAR_LISTORGANIZATIONADMINACCOUNTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOrganizationAdminAccountsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOrganizationAdminAccountsResponseUnmarshaller.Instance; return Invoke<ListOrganizationAdminAccountsResponse>(VAR_LISTORGANIZATIONADMINACCOUNTSREQUEST, VAR_VAR); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = double.PositiveInfinity; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE = Math.METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE[][i]); } return VAR_DOUBLE; }
public override int METHOD_NAME() { throw new System.NotImplementedException(); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_LINECOUNT); }
public RowRecordsAggregate(RecordStream VAR_RECORDSTREAM, SharedValueManager VAR_SHAREDVALUEMANAGER) : this(svm) { while (VAR_RECORDSTREAM.HasNext()) { Record VAR_RECORD = VAR_RECORDSTREAM.GetNext(); switch (VAR_RECORD.Sid) { case RowRecord.sid: InsertRow((RowRecord)VAR_RECORD); continue; case DConRefRecord.sid: AddUnknownRecord(VAR_RECORD); continue; case DBCellRecord.sid: continue; } if (VAR_RECORD is UnknownRecord) { AddUnknownRecord((UnknownRecord)VAR_RECORD); while (VAR_RECORDSTREAM.PeekNextSid() == ContinueRecord.sid) { AddUnknownRecord(VAR_RECORDSTREAM.GetNext()); } continue; } if (VAR_RECORD is MulBlankRecord) { _valuesAgg.AddMultipleBlanks((MulBlankRecord)VAR_RECORD); continue; } if (!(VAR_RECORD is CellValueRecordInterface)) { if (VAR_RECORD.Sid == SeriesIndexRecord.sid) { AddUnknownRecord(VAR_RECORD); continue; } throw new InvalidOperationException(LITERAL_STRING + VAR_RECORD.GetType().Name + LITERAL_STRING); } _valuesAgg.Construct((CellValueRecordInterface)VAR_RECORD, VAR_RECORDSTREAM, VAR_SHAREDVALUEMANAGER); } }
public CreateRepoSyncTaskRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public SharedFormula(SpreadsheetVersion VAR_SPREADSHEETVERSION) { _columnWrappingMask = VAR_SPREADSHEETVERSION.LastColumnIndex; _rowWrappingMask = VAR_SPREADSHEETVERSION.LastRowIndex; }
public LexerTypeAction(int VAR_INT) { this.VAR_INT = VAR_INT; }
public char METHOD_NAME() { if (start == end) { return java.text.CharacterIteratorClass.DONE; } offset = start; return @string[offset]; }
public override java.nio.ShortBuffer METHOD_NAME() { return new java.nio.ReadOnlyShortArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual NGit.Api.RenameBranchCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Options); VAR_ILITTLEENDIANOUTPUT.WriteInt(HorizontalPos); VAR_ILITTLEENDIANOUTPUT.WriteInt(VerticalPos); VAR_ILITTLEENDIANOUTPUT.WriteInt(ObjectID); VAR_ILITTLEENDIANOUTPUT.WriteInt(DVRecNo); }
public SheetBuilder METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE = LITERAL_INT; try { VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } DateTime VAR_DATETIME = DateUtil.GetJavaDate(VAR_DOUBLE, false); int VAR_INT = LITERAL_INT; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.NUM_ERROR; } if (VAR_INT != LITERAL_INT && VAR_INT != LITERAL_INT) { return ErrorEval.NUM_ERROR; } return new NumberEval(this.getWeekNo(VAR_DATETIME, VAR_INT)); }
public static int METHOD_NAME(DataInput VAR_DATAINPUT, string VAR_STRING, int VAR_INT, int VAR_INT) { int VAR_INT = VAR_DATAINPUT.ReadInt32(); if (VAR_INT != CODEC_MAGIC) { throw new System.IO.IOException(LITERAL_STRING + VAR_INT + LITERAL_STRING + CODEC_MAGIC + LITERAL_STRING + VAR_DATAINPUT + LITERAL_STRING); } return CheckHeaderNoMagic(VAR_DATAINPUT, VAR_STRING, VAR_INT, VAR_INT); }
public virtual string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (var i = LITERAL_INT; i < VAR_STRING.Length;) { var VAR_VAR = Char.ConvertToUtf32(VAR_STRING, i); VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_VAR)); i += (VAR_VAR > LITERAL_INT) ? LITERAL_INT : LITERAL_INT; } return VAR_STRINGBUILDER.ToString(); }
public override bool METHOD_NAME(BytesRef VAR_BYTESREF) { termUpto = BinarySearch(VAR_BYTESREF, br, LITERAL_INT, info.terms.Count - LITERAL_INT, info.terms, info.sortedTerms, BytesRef.UTF8SortedAsUnicodeComparer); return termUpto >= LITERAL_INT; }
public virtual CreateCacheSecurityGroupResponse METHOD_NAME(CreateCacheSecurityGroupRequest VAR_CREATECACHESECURITYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCacheSecurityGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCacheSecurityGroupResponseUnmarshaller.Instance; return Invoke<CreateCacheSecurityGroupResponse>(VAR_CREATECACHESECURITYGROUPREQUEST, VAR_VAR); }
public FetchMomentPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual int METHOD_NAME(string VAR_STRING) { int VAR_INT; if (RuleIndexMap.TryGetValue(VAR_STRING, out VAR_INT)) { return VAR_INT; } return -LITERAL_INT; }
public RebootInstanceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual RevokeClientVpnIngressResponse METHOD_NAME(RevokeClientVpnIngressRequest VAR_REVOKECLIENTVPNINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeClientVpnIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeClientVpnIngressResponseUnmarshaller.Instance; return Invoke<RevokeClientVpnIngressResponse>(VAR_REVOKECLIENTVPNINGRESSREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return false; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(sid)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Range.METHOD_NAME()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_5_reserved)).Append(LITERAL_STRING); Ptg[] VAR_PTG[] = field_7_parsed_expr.Tokens; for (int k = LITERAL_INT; k < VAR_PTG[].Length; k++) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(k).Append(LITERAL_STRING); Ptg VAR_PTG = VAR_PTG[][k]; VAR_STRINGBUILDER.Append(VAR_PTG.METHOD_NAME()).Append(VAR_PTG.RVAType).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public LexerPushModeAction(int VAR_INT) { this.VAR_INT = VAR_INT; }
public override void METHOD_NAME(int VAR_INT) { mark = ptr; }
public virtual CreateClusterParameterGroupResponse METHOD_NAME(CreateClusterParameterGroupRequest VAR_CREATECLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateClusterParameterGroupResponse>(VAR_CREATECLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { var VAR_VAR = GetSubQueriesEnumerator(); while (VAR_VAR.MoveNext()) { SrndQuery VAR_SRNDQUERY = VAR_VAR.Current; if (VAR_SRNDQUERY is IDistanceSubQuery) { string VAR_STRING = ((IDistanceSubQuery)VAR_SRNDQUERY).METHOD_NAME(); if (VAR_STRING != LITERAL_NULL) { return VAR_STRING; } } else { return LITERAL_STRING + VAR_SRNDQUERY.ToString(); } } return LITERAL_NULL; }
public virtual DescribeBrokerEngineTypesResponse METHOD_NAME(DescribeBrokerEngineTypesRequest VAR_DESCRIBEBROKERENGINETYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBrokerEngineTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBrokerEngineTypesResponseUnmarshaller.Instance; return Invoke<DescribeBrokerEngineTypesResponse>(VAR_DESCRIBEBROKERENGINETYPESREQUEST, VAR_VAR); }
public virtual DescribeReservedDBInstancesOfferingsResponse METHOD_NAME(DescribeReservedDBInstancesOfferingsRequest VAR_DESCRIBERESERVEDDBINSTANCESOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedDBInstancesOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedDBInstancesOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeReservedDBInstancesOfferingsResponse>(VAR_DESCRIBERESERVEDDBINSTANCESOFFERINGSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME() { return new java.nio.ReadWriteHeapByteBuffer(backingArray, remaining(), offset + _position); }
public GetCollectionRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public DeleteApplicationVersionRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _versionLabel = VAR_STRING; }
public override int METHOD_NAME() { return (current = end); }
public virtual DeleteFleetResponse METHOD_NAME(DeleteFleetRequest VAR_DELETEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFleetResponseUnmarshaller.Instance; return Invoke<DeleteFleetResponse>(VAR_DELETEFLEETREQUEST, VAR_VAR); }
public override void METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>) { throw new NotSupportedException(); }
public virtual DescribeWorkteamResponse METHOD_NAME(DescribeWorkteamRequest VAR_DESCRIBEWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkteamResponseUnmarshaller.Instance; return Invoke<DescribeWorkteamResponse>(VAR_DESCRIBEWORKTEAMREQUEST, VAR_VAR); }
public virtual StatusCommand METHOD_NAME() { return new StatusCommand(repo); }
public virtual StopInstancesResponse METHOD_NAME(StopInstancesRequest VAR_STOPINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopInstancesResponseUnmarshaller.Instance; return Invoke<StopInstancesResponse>(VAR_STOPINSTANCESREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) return false; if (VAR_OBJECT == this) return true; if (VAR_OBJECT.GetType() != GetType()) return false; HSSFChildAnchor VAR_HSSFCHILDANCHOR = (HSSFChildAnchor)VAR_OBJECT; return VAR_HSSFCHILDANCHOR.Dx1 == Dx1 && VAR_HSSFCHILDANCHOR.Dx2 == Dx2 && VAR_HSSFCHILDANCHOR.Dy1 == Dy1 && VAR_HSSFCHILDANCHOR.Dy2 == Dy2; }
public virtual DescribeDBSubnetGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBSubnetGroupsRequest()); }
public DocsEnum METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[]) { this.VAR_INT[] = VAR_INT[]; this.VAR_INT[] = VAR_INT[]; docID_Renamed = upto = -LITERAL_INT; return this; }
public override bool METHOD_NAME() { return this.index < this._enclosing.size; }
public virtual ListTagsForResourceResponse METHOD_NAME(ListTagsForResourceRequest VAR_LISTTAGSFORRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForResourceResponseUnmarshaller.Instance; return Invoke<ListTagsForResourceResponse>(VAR_LISTTAGSFORRESOURCEREQUEST, VAR_VAR); }
public static String METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= _formats.Length) { return LITERAL_NULL; } return _formats[VAR_INT]; }
public ExpandedDouble(long VAR_LONG) { int VAR_INT = (int)(VAR_LONG >> LITERAL_INT); if (VAR_INT == LITERAL_INT) { BigInteger VAR_BIGINTEGER = new BigInteger(VAR_LONG) & BI_FRAC_MASK; int VAR_INT = LITERAL_INT - VAR_BIGINTEGER.BitLength(); _significand = VAR_BIGINTEGER << VAR_INT; _binaryExponent = (VAR_INT & LITERAL_INT) - LITERAL_INT - VAR_INT; } else { BigInteger VAR_BIGINTEGER = GetFrac(VAR_LONG); _significand = VAR_BIGINTEGER; _binaryExponent = (VAR_INT & LITERAL_INT) - LITERAL_INT; } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_codepage); }
public override void METHOD_NAME(RevCommit VAR_REVCOMMIT) { throw new NotSupportedException(); }
public CellRangeAddress[] METHOD_NAME() { return cfAggregate.Header.CellRanges; }
public virtual java.io.PrintStream METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE == LITERAL_NULL) { print(LITERAL_STRING); } else { print(VAR_JAVA.LANG.CHARSEQUENCE.ToString()); } return this; }
public virtual GetSkillGroupResponse METHOD_NAME(GetSkillGroupRequest VAR_GETSKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSkillGroupResponseUnmarshaller.Instance; return Invoke<GetSkillGroupResponse>(VAR_GETSKILLGROUPREQUEST, VAR_VAR); }
public virtual DeleteObjectResponse METHOD_NAME(DeleteObjectRequest VAR_DELETEOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteObjectResponseUnmarshaller.Instance; return Invoke<DeleteObjectResponse>(VAR_DELETEOBJECTREQUEST, VAR_VAR); }
public bool METHOD_NAME(IntList VAR_INTLIST) { bool VAR_BOOL = false; for (int j = LITERAL_INT; j < VAR_INTLIST._limit; j++) { if (RemoveValue(VAR_INTLIST._array[j])) { VAR_BOOL = true; } } return VAR_BOOL; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_encryptionType)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_encryptionInfo)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_minorVersionNo)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_docId)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_saltData)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_saltHash)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateCustomerGatewayResponse METHOD_NAME(CreateCustomerGatewayRequest VAR_CREATECUSTOMERGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCustomerGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCustomerGatewayResponseUnmarshaller.Instance; return Invoke<CreateCustomerGatewayResponse>(VAR_CREATECUSTOMERGATEWAYREQUEST, VAR_VAR); }
public override java.nio.CharBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual DirCache METHOD_NAME() { return cache; }
public PatternReplaceCharFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { pattern = GetPattern(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); replacement = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, LITERAL_STRING); maxBlockChars = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, PatternReplaceCharFilter.DEFAULT_MAX_BLOCK_CHARS); if (VAR_IDICTIONARY<STRING, STRING>.TryGetValue(LITERAL_STRING, out blockDelimiters)) { VAR_IDICTIONARY<STRING, STRING>.Remove(LITERAL_STRING); } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public bool METHOD_NAME() { return shouldCreateEmptyCells; }
public virtual long METHOD_NAME() { long VAR_LONG = LITERAL_INT; VAR_LONG += LITERAL_INT * LITERAL_INT; VAR_LONG += SizeOf(src); VAR_LONG += SizeOf(table); VAR_LONG += SizeOf(entries); return VAR_LONG; }
public virtual java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_SHORT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_SHORT[][i]); } } return this; }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(child.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetGatewayResponseResponse METHOD_NAME(GetGatewayResponseRequest VAR_GETGATEWAYRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGatewayResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGatewayResponseResponseUnmarshaller.Instance; return Invoke<GetGatewayResponseResponse>(VAR_GETGATEWAYRESPONSEREQUEST, VAR_VAR); }
public SubscribeRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _protocol = VAR_STRING; _endpoint = VAR_STRING; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT, float VAR_FLOAT, bool VAR_BOOL) { this.ln_min = VAR_INT; this.ln_max = VAR_INT; this.ln_steep = VAR_FLOAT; this.DiscountOverlaps = VAR_BOOL; }
public virtual void METHOD_NAME() { setStartTime(-LITERAL_INT); }
public virtual DeleteLaunchConfigurationResponse METHOD_NAME(DeleteLaunchConfigurationRequest VAR_DELETELAUNCHCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLaunchConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLaunchConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteLaunchConfigurationResponse>(VAR_DELETELAUNCHCONFIGURATIONREQUEST, VAR_VAR); }
public void METHOD_NAME(Record VAR_RECORD) { int VAR_INT = records.IndexOf(VAR_RECORD); this.METHOD_NAME(VAR_INT); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(_functionIndex); }
public Term(string VAR_STRING, BytesRef VAR_BYTESREF) { Field = VAR_STRING; Bytes = VAR_BYTESREF; }
public override long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.NUM_BYTES_INT64 + RamUsageEstimator.NUM_BYTES_SINGLE) + current.METHOD_NAME(); }
public int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_INT, VAR_BYTE[], new NullEscherSerializationListener()); }
public override string METHOD_NAME() { if (count == LITERAL_INT) { return string.Empty; } int VAR_INT = value.Length - count; if (VAR_INT >= LITERAL_INT || (VAR_INT >= INITIAL_CAPACITY && VAR_INT >= (count >> LITERAL_INT))) { return new string (value, LITERAL_INT, count); } shared = true; return Sharpen.StringHelper.GetString(LITERAL_INT, count, value); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_protect); }
public virtual AssociateResolverEndpointIpAddressResponse METHOD_NAME(AssociateResolverEndpointIpAddressRequest VAR_ASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateResolverEndpointIpAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateResolverEndpointIpAddressResponseUnmarshaller.Instance; return Invoke<AssociateResolverEndpointIpAddressResponse>(VAR_ASSOCIATERESOLVERENDPOINTIPADDRESSREQUEST, VAR_VAR); }
public virtual NGit.Api.RevertCommand METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return METHOD_NAME(VAR_ANYOBJECTID.GetName(), VAR_ANYOBJECTID); }
public static java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[]) { return new java.nio.ReadWriteHeapByteBuffer(VAR_BYTE[]); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_SECURITY); }
public virtual ImportVolumeResponse METHOD_NAME(ImportVolumeRequest VAR_IMPORTVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportVolumeResponseUnmarshaller.Instance; return Invoke<ImportVolumeResponse>(VAR_IMPORTVOLUMEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return renameDetector != LITERAL_NULL; }
public virtual RebootCacheClusterResponse METHOD_NAME(RebootCacheClusterRequest VAR_REBOOTCACHECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootCacheClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootCacheClusterResponseUnmarshaller.Instance; return Invoke<RebootCacheClusterResponse>(VAR_REBOOTCACHECLUSTERREQUEST, VAR_VAR); }
public virtual DescribeTemplateAliasResponse METHOD_NAME(DescribeTemplateAliasRequest VAR_DESCRIBETEMPLATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTemplateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTemplateAliasResponseUnmarshaller.Instance; return Invoke<DescribeTemplateAliasResponse>(VAR_DESCRIBETEMPLATEALIASREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (overflow != LITERAL_NULL) { Destroy(); } if (inCoreLimit < TemporaryBuffer.Block.SZ) { blocks = new AList<TemporaryBuffer.Block>(LITERAL_INT); blocks.AddItem(new TemporaryBuffer.Block(inCoreLimit)); } else { blocks = new AList<TemporaryBuffer.Block>(inCoreLimit / TemporaryBuffer.Block.SZ); blocks.AddItem(new TemporaryBuffer.Block()); } }
public virtual DescribeWorkspaceSnapshotsResponse METHOD_NAME(DescribeWorkspaceSnapshotsRequest VAR_DESCRIBEWORKSPACESNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkspaceSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkspaceSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeWorkspaceSnapshotsResponse>(VAR_DESCRIBEWORKSPACESNAPSHOTSREQUEST, VAR_VAR); }
public void METHOD_NAME() { Name = LITERAL_NULL; Body = LITERAL_NULL; Title = LITERAL_NULL; date = LITERAL_NULL; Props = LITERAL_NULL; ID = -LITERAL_INT; }
public virtual DeleteDistributionResponse METHOD_NAME(DeleteDistributionRequest VAR_DELETEDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDistributionResponseUnmarshaller.Instance; return Invoke<DeleteDistributionResponse>(VAR_DELETEDISTRIBUTIONREQUEST, VAR_VAR); }
public long METHOD_NAME() { Debug.Assert(HasNext); long VAR_LONG = currentValues[pOff++]; if (pOff == currentCount) { vOff += LITERAL_INT; pOff = LITERAL_INT; if (vOff <= outerInstance.valuesOff) { FillValues(); } else { currentCount = LITERAL_INT; } } return VAR_LONG; }
public virtual AttachInstancesToLoadBalancerResponse METHOD_NAME(AttachInstancesToLoadBalancerRequest VAR_ATTACHINSTANCESTOLOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachInstancesToLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachInstancesToLoadBalancerResponseUnmarshaller.Instance; return Invoke<AttachInstancesToLoadBalancerResponse>(VAR_ATTACHINSTANCESTOLOADBALANCERREQUEST, VAR_VAR); }
public PrintSetupRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_paper_size = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_scale = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_page_start = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_fit_width = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_fit_height = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_7_hresolution = VAR_RECORDINPUTSTREAM.ReadShort(); field_8_vresolution = VAR_RECORDINPUTSTREAM.ReadShort(); field_9_headermargin = VAR_RECORDINPUTSTREAM.ReadDouble(); field_10_footermargin = VAR_RECORDINPUTSTREAM.ReadDouble(); field_11_copies = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual UpdateNotificationSettingsResponse METHOD_NAME(UpdateNotificationSettingsRequest VAR_UPDATENOTIFICATIONSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNotificationSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNotificationSettingsResponseUnmarshaller.Instance; return Invoke<UpdateNotificationSettingsResponse>(VAR_UPDATENOTIFICATIONSETTINGSREQUEST, VAR_VAR); }
public virtual DescribeSnapshotAttributeResponse METHOD_NAME(DescribeSnapshotAttributeRequest VAR_DESCRIBESNAPSHOTATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSnapshotAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSnapshotAttributeResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotAttributeResponse>(VAR_DESCRIBESNAPSHOTATTRIBUTEREQUEST, VAR_VAR); }
public virtual ListDocumentClassificationJobsResponse METHOD_NAME(ListDocumentClassificationJobsRequest VAR_LISTDOCUMENTCLASSIFICATIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDocumentClassificationJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDocumentClassificationJobsResponseUnmarshaller.Instance; return Invoke<ListDocumentClassificationJobsResponse>(VAR_LISTDOCUMENTCLASSIFICATIONJOBSREQUEST, VAR_VAR); }
public Item() { parent = (char)LITERAL_INT; child = (char)LITERAL_INT; }
public static NGit.AbbreviatedObjectId METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { return new NGit.AbbreviatedObjectId(Constants.OBJECT_ID_STRING_LENGTH, VAR_ANYOBJECTID.w1, VAR_ANYOBJECTID.w2, VAR_ANYOBJECTID.w3, VAR_ANYOBJECTID.w4, VAR_ANYOBJECTID.w5); }
public String METHOD_NAME(Object VAR_OBJECT) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); FormatValue(VAR_STRINGBUILDER, VAR_OBJECT); return VAR_STRINGBUILDER.ToString(); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { rawDataContainer.Concatenate(VAR_BYTE[]); }
public virtual ListenerHandle METHOD_NAME(ConfigChangedListener VAR_CONFIGCHANGEDLISTENER) { return listeners.AddConfigChangedListener(VAR_CONFIGCHANGEDLISTENER); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public void METHOD_NAME(int VAR_INT, bool VAR_BOOL) { if (VAR_BOOL) { flags |= (short)VAR_INT; } else { flags &= (short)(LITERAL_INT ^ VAR_INT); } }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= LITERAL_INT) { throw new EvaluationException(ErrorEval.NUM_ERROR); } int VAR_INT = (int)Math.Floor(VAR_DOUBLE); int VAR_INT = (int)Math.Floor(VAR_DOUBLE); if (VAR_INT == VAR_INT) { return LITERAL_INT; } if (VAR_INT > VAR_INT) { int VAR_INT = VAR_INT; VAR_INT = VAR_INT; VAR_INT = VAR_INT; } switch (VAR_INT) { case LITERAL_INT: return Basis0(VAR_INT, VAR_INT); case LITERAL_INT: return Basis1(VAR_INT, VAR_INT); case LITERAL_INT: return Basis2(VAR_INT, VAR_INT); case LITERAL_INT: return Basis3(VAR_INT, VAR_INT); case LITERAL_INT: return Basis4(VAR_INT, VAR_INT); } throw new InvalidOperationException(LITERAL_STRING); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); string VAR_STRING = LITERAL_STRING; foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX)); VAR_STRING = LITERAL_STRING; } if ((Parent != LITERAL_NULL && Parent is GroupQueryNode) || IsRoot) return VAR_STRINGBUILDER.ToString(); else return LITERAL_STRING + VAR_STRINGBUILDER.ToString() + LITERAL_STRING; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { throw new java.nio.ReadOnlyBufferException(); }
public virtual GetVoiceConnectorGroupResponse METHOD_NAME(GetVoiceConnectorGroupRequest VAR_GETVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorGroupResponse>(VAR_GETVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public virtual BatchUpdateUserResponse METHOD_NAME(BatchUpdateUserRequest VAR_BATCHUPDATEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchUpdateUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchUpdateUserResponseUnmarshaller.Instance; return Invoke<BatchUpdateUserResponse>(VAR_BATCHUPDATEUSERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return new string (chars, Offset, Length); }
public virtual DescribeStorageResponse METHOD_NAME(DescribeStorageRequest VAR_DESCRIBESTORAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStorageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStorageResponseUnmarshaller.Instance; return Invoke<DescribeStorageResponse>(VAR_DESCRIBESTORAGEREQUEST, VAR_VAR); }
public override void METHOD_NAME() { flush(); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public void METHOD_NAME(int VAR_INT) { bufferPosition -= VAR_INT; }
public virtual UpdateDashboardPublishedVersionResponse METHOD_NAME(UpdateDashboardPublishedVersionRequest VAR_UPDATEDASHBOARDPUBLISHEDVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDashboardPublishedVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDashboardPublishedVersionResponseUnmarshaller.Instance; return Invoke<UpdateDashboardPublishedVersionResponse>(VAR_UPDATEDASHBOARDPUBLISHEDVERSIONREQUEST, VAR_VAR); }
public DocumentStoredFieldVisitor(params string[] VAR_STRING[]) { fieldsToAdd = new JCG.HashSet<string>(); foreach (string field in VAR_STRING[]) { fieldsToAdd.Add(field); } }
public virtual ResumeGameServerGroupResponse METHOD_NAME(ResumeGameServerGroupRequest VAR_RESUMEGAMESERVERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResumeGameServerGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResumeGameServerGroupResponseUnmarshaller.Instance; return Invoke<ResumeGameServerGroupResponse>(VAR_RESUMEGAMESERVERGROUPREQUEST, VAR_VAR); }
public virtual NGit.Api.PushCommand METHOD_NAME() { refSpecs.AddItem(NGit.Transport.Transport.REFSPEC_PUSH_ALL); return this; }
public virtual CreateDBSnapshotResponse METHOD_NAME(CreateDBSnapshotRequest VAR_CREATEDBSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBSnapshotResponseUnmarshaller.Instance; return Invoke<CreateDBSnapshotResponse>(VAR_CREATEDBSNAPSHOTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { if (roleSessionDurationSeconds == LITERAL_INT) { return false; } var VAR_VAR = DateTime.UtcNow.currentTimeMillis(); return roleSessionDurationSeconds * expireFact < (VAR_VAR - sessionStartedTimeInMilliSeconds) / LITERAL_INT; }
public virtual IList<Interval> METHOD_NAME() { return intervals; }
public GetNamespaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public DeleteVpcRequest(string VAR_STRING) { _vpcId = VAR_STRING; }
public long METHOD_NAME() { return ((fst != LITERAL_NULL) ? fst.GetSizeInBytes() : LITERAL_INT); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } bool VAR_BOOL; try { VAR_BOOL = Calculate(VAR_VALUEEVAL[]); } catch (EvaluationException e) { return e.GetErrorEval(); } return BoolEval.ValueOf(VAR_BOOL); }
public virtual void METHOD_NAME(string VAR_STRING) { lock (@lock) { print(VAR_STRING); METHOD_NAME(); } }
public TypedPropertyValue(int VAR_INT, Object VAR_OBJECT) { _type = VAR_INT; _value = VAR_OBJECT; }
public override java.nio.FloatBuffer METHOD_NAME() { java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.FloatToByteBufferAdapter VAR_JAVA.NIO.FLOATTOBYTEBUFFERADAPTER = new java.nio.FloatToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); VAR_JAVA.NIO.FLOATTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.FLOATTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.FLOATTOBYTEBUFFERADAPTER._mark = _mark; return VAR_JAVA.NIO.FLOATTOBYTEBUFFERADAPTER; }
public virtual MigrateWorkspaceResponse METHOD_NAME(MigrateWorkspaceRequest VAR_MIGRATEWORKSPACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = MigrateWorkspaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = MigrateWorkspaceResponseUnmarshaller.Instance; return Invoke<MigrateWorkspaceResponse>(VAR_MIGRATEWORKSPACEREQUEST, VAR_VAR); }
public virtual GetRequestValidatorResponse METHOD_NAME(GetRequestValidatorRequest VAR_GETREQUESTVALIDATORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRequestValidatorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRequestValidatorResponseUnmarshaller.Instance; return Invoke<GetRequestValidatorResponse>(VAR_GETREQUESTVALIDATORREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return METHOD_NAME(false); }
public virtual ForgetSmartHomeAppliancesResponse METHOD_NAME(ForgetSmartHomeAppliancesRequest VAR_FORGETSMARTHOMEAPPLIANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ForgetSmartHomeAppliancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ForgetSmartHomeAppliancesResponseUnmarshaller.Instance; return Invoke<ForgetSmartHomeAppliancesResponse>(VAR_FORGETSMARTHOMEAPPLIANCESREQUEST, VAR_VAR); }
public virtual DeleteApiResponse METHOD_NAME(DeleteApiRequest VAR_DELETEAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApiResponseUnmarshaller.Instance; return Invoke<DeleteApiResponse>(VAR_DELETEAPIREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { mKeyProgressIncrement = VAR_INT < LITERAL_INT ? -VAR_INT : VAR_INT; }
public bool METHOD_NAME(IntList VAR_INTLIST) { if (VAR_INTLIST._limit != LITERAL_INT) { if ((_limit + VAR_INTLIST._limit) > _array.Length) { growArray(_limit + VAR_INTLIST._limit); } Array.Copy(VAR_INTLIST._array, LITERAL_INT, _array, _limit, VAR_INTLIST._limit); _limit += VAR_INTLIST._limit; } return true; }
public DVRecord METHOD_NAME(HSSFSheet VAR_HSSFSHEET) { NPOI.HSSF.UserModel.DVConstraint.FormulaPair VAR_NPOI.HSSF.USERMODEL.DVCONSTRAINT.FORMULAPAIR = _constraint.CreateFormulas(VAR_HSSFSHEET); return new DVRecord(_constraint.GetValidationType(), _constraint.Operator, _errorStyle, _emptyCellAllowed, SuppressDropDownArrow, _constraint.GetValidationType() == ValidationType.LIST && _constraint.ExplicitListValues != LITERAL_NULL, _ShowPromptBox, _prompt_title, _prompt_text, _ShowErrorBox, _error_title, _error_text, VAR_NPOI.HSSF.USERMODEL.DVCONSTRAINT.FORMULAPAIR.Formula1, VAR_NPOI.HSSF.USERMODEL.DVCONSTRAINT.FORMULAPAIR.Formula2, _regions); }
public bool METHOD_NAME(bool VAR_BOOL) { switch (_code) { case NONE: case EQ: return VAR_BOOL; case NE: return !VAR_BOOL; } throw new Exception(LITERAL_STRING + _representation + LITERAL_STRING); }
public override bool METHOD_NAME() { return false; }
public virtual ListHoursOfOperationsResponse METHOD_NAME(ListHoursOfOperationsRequest VAR_LISTHOURSOFOPERATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHoursOfOperationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHoursOfOperationsResponseUnmarshaller.Instance; return Invoke<ListHoursOfOperationsResponse>(VAR_LISTHOURSOFOPERATIONSREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE []) { throw new RecordFormatException(LITERAL_STRING); }
public java.net.URI METHOD_NAME() { if (opaque) { return this; } string VAR_STRING = METHOD_NAME(path, false); if (path.Equals(VAR_STRING)) { return this; } java.net.URI VAR_JAVA.NET.URI = duplicate(); VAR_JAVA.NET.URI.path = VAR_STRING; VAR_JAVA.NET.URI.setSchemeSpecificPart(); return VAR_JAVA.NET.URI; }
public FreeRefFunction METHOD_NAME(String VAR_STRING) { return _udfFinder.FindFunction(VAR_STRING); }
public virtual UpdateGatewayResponseResponse METHOD_NAME(UpdateGatewayResponseRequest VAR_UPDATEGATEWAYRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGatewayResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGatewayResponseResponseUnmarshaller.Instance; return Invoke<UpdateGatewayResponseResponse>(VAR_UPDATEGATEWAYRESPONSEREQUEST, VAR_VAR); }
public virtual GetOperationDetailResponse METHOD_NAME(GetOperationDetailRequest VAR_GETOPERATIONDETAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOperationDetailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOperationDetailResponseUnmarshaller.Instance; return Invoke<GetOperationDetailResponse>(VAR_GETOPERATIONDETAILREQUEST, VAR_VAR); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (!Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_STRINGBUILDER.Append(Field); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(Term.Text()); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public NameXPtg METHOD_NAME(String VAR_STRING, UDFFinder VAR_UDFFINDER) { return METHOD_NAME(VAR_STRING, -LITERAL_INT, VAR_UDFFINDER); }
public virtual string METHOD_NAME() { return charsetName; }
public virtual DescribeWebsiteCertificateAuthorityResponse METHOD_NAME(DescribeWebsiteCertificateAuthorityRequest VAR_DESCRIBEWEBSITECERTIFICATEAUTHORITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWebsiteCertificateAuthorityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWebsiteCertificateAuthorityResponseUnmarshaller.Instance; return Invoke<DescribeWebsiteCertificateAuthorityResponse>(VAR_DESCRIBEWEBSITECERTIFICATEAUTHORITYREQUEST, VAR_VAR); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE) { return PMT(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, VAR_DOUBLE) - IPMT(VAR_DOUBLE, VAR_INT, VAR_INT, VAR_DOUBLE, VAR_DOUBLE); }
public override java.nio.ShortBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public LinkTable(int VAR_INT, WorkbookRecordList VAR_WORKBOOKRECORDLIST) { _workbookRecordList = VAR_WORKBOOKRECORDLIST; _definedNames = new List<NameRecord>(); _externalBookBlocks = new ExternalBookBlock[] { new ExternalBookBlock(VAR_INT), }; _externSheetRecord = new ExternSheetRecord(); _recordCount = LITERAL_INT; SupBookRecord VAR_SUPBOOKRECORD = _externalBookBlocks[LITERAL_INT].GetExternalBookRecord(); int VAR_INT = FindFirstRecordLocBySid(CountryRecord.sid); if (VAR_INT < LITERAL_INT) { throw new Exception(LITERAL_STRING); } _workbookRecordList.Add(VAR_INT + LITERAL_INT, _externSheetRecord); _workbookRecordList.Add(VAR_INT + LITERAL_INT, VAR_SUPBOOKRECORD); }
public void METHOD_NAME() { throw new NotImplementedException(LITERAL_STRING); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT + VAR_FLOAT[].Length); }
public virtual void METHOD_NAME(T[] VAR_T[], int VAR_INT, int VAR_INT) { while (LITERAL_INT < VAR_INT) { int VAR_INT = tailBlkIdx; int VAR_INT = Math.Min(VAR_INT, BLOCK_SIZE - VAR_INT); if (VAR_INT == LITERAL_INT) { AddItem(VAR_T[][VAR_INT++]); VAR_INT--; continue; } System.Array.Copy(VAR_T[], VAR_INT, tailBlock, VAR_INT, VAR_INT); tailBlkIdx += VAR_INT; size += VAR_INT; VAR_INT += VAR_INT; VAR_INT -= VAR_INT; } }
public virtual RenewDomainResponse METHOD_NAME(RenewDomainRequest VAR_RENEWDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RenewDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RenewDomainResponseUnmarshaller.Instance; return Invoke<RenewDomainResponse>(VAR_RENEWDOMAINREQUEST, VAR_VAR); }
public static bool METHOD_NAME(int VAR_INT) { return VAR_INT >= MIN_VALUE && VAR_INT <= MAX_VALUE; }
public virtual AddApplicationInputResponse METHOD_NAME(AddApplicationInputRequest VAR_ADDAPPLICATIONINPUTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationInputRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationInputResponseUnmarshaller.Instance; return Invoke<AddApplicationInputResponse>(VAR_ADDAPPLICATIONINPUTREQUEST, VAR_VAR); }
public IRequest METHOD_NAME(DeletePublicKeyRequest VAR_DELETEPUBLICKEYREQUEST) { var VAR_VAR = new DefaultRequest(VAR_DELETEPUBLICKEYREQUEST, LITERAL_STRING); VAR_VAR.HttpMethod = LITERAL_STRING; if (VAR_DELETEPUBLICKEYREQUEST.IsSetIfMatch()) VAR_VAR.Headers[LITERAL_STRING] = VAR_DELETEPUBLICKEYREQUEST.IfMatch; if (!VAR_DELETEPUBLICKEYREQUEST.IsSetId()) throw new AmazonCloudFrontException(LITERAL_STRING); VAR_VAR.AddPathResource(LITERAL_STRING, StringUtils.FromString(VAR_DELETEPUBLICKEYREQUEST.Id)); VAR_VAR.ResourcePath = LITERAL_STRING; VAR_VAR.MarshallerVersion = LITERAL_INT; return VAR_VAR; }
public virtual bool METHOD_NAME(IParseTree VAR_IPARSETREE) { return matcher.Match(VAR_IPARSETREE, this).Succeeded; }
public virtual CreateDetectorResponse METHOD_NAME(CreateDetectorRequest VAR_CREATEDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDetectorResponseUnmarshaller.Instance; return Invoke<CreateDetectorResponse>(VAR_CREATEDETECTORREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is IndexCommit) { IndexCommit VAR_INDEXCOMMIT = (IndexCommit)VAR_OBJECT; return VAR_INDEXCOMMIT.Directory == Directory && VAR_INDEXCOMMIT.Generation == Generation; } else { return false; } }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT > YyLength) ZzScanError(ZZ_PUSHBACK_2BIG); zzMarkedPos -= VAR_INT; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return doFixed(VAR_VALUEEVAL, VAR_VALUEEVAL, BoolEval.FALSE, VAR_INT, VAR_INT); }
public RevisionSyntaxException(string VAR_STRING, string VAR_STRING) : base(message) { this.VAR_STRING = VAR_STRING; }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public QueryParser(ICharStream VAR_ICHARSTREAM) { TokenSource = new QueryParserTokenManager(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public float? METHOD_NAME(string VAR_STRING) { if (LITERAL_NULL != DictionaryUtil.Get(ResponseDictionary, VAR_STRING)) { return float.Parse(DictionaryUtil.Get(ResponseDictionary, VAR_STRING)); } return LITERAL_NULL; }
public virtual ModifyClusterResponse METHOD_NAME(ModifyClusterRequest VAR_MODIFYCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterResponseUnmarshaller.Instance; return Invoke<ModifyClusterResponse>(VAR_MODIFYCLUSTERREQUEST, VAR_VAR); }
public virtual DescribeSolutionResponse METHOD_NAME(DescribeSolutionRequest VAR_DESCRIBESOLUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSolutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSolutionResponseUnmarshaller.Instance; return Invoke<DescribeSolutionResponse>(VAR_DESCRIBESOLUTIONREQUEST, VAR_VAR); }
public BootstrapActionConfig METHOD_NAME() { return new BootstrapActionConfig { Name = LITERAL_STRING, ScriptBootstrapAction = new ScriptBootstrapActionConfig { Path = string.Format(CultureInfo.InvariantCulture, LITERAL_STRING), Args = args } }; }
public virtual void METHOD_NAME(string VAR_STRING, RevCommit VAR_REVCOMMIT) { METHOD_NAME(VAR_STRING, FileMode.GITLINK, VAR_REVCOMMIT); }
public override int METHOD_NAME() { if (ptr == data.Length) { return -LITERAL_INT; } return data[ptr++] & unchecked((int)(LITERAL_INT)); }
public void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public override RevFilter METHOD_NAME() { return this; }
public void METHOD_NAME(FormulaShifter VAR_FORMULASHIFTER, int VAR_INT) { for (int i = LITERAL_INT; i < records.Length; i++) { CellValueRecordInterface[] VAR_CELLVALUERECORDINTERFACE[] = records[i]; if (VAR_CELLVALUERECORDINTERFACE[] == LITERAL_NULL) { continue; } for (int j = LITERAL_INT; j < VAR_CELLVALUERECORDINTERFACE[].Length; j++) { CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE = VAR_CELLVALUERECORDINTERFACE[][j]; if (VAR_CELLVALUERECORDINTERFACE is FormulaRecordAggregate) { FormulaRecordAggregate VAR_FORMULARECORDAGGREGATE = (FormulaRecordAggregate)VAR_CELLVALUERECORDINTERFACE; Ptg[] VAR_PTG[] = VAR_FORMULARECORDAGGREGATE.FormulaTokens; Ptg[] VAR_PTG[] = ((FormulaRecordAggregate)VAR_CELLVALUERECORDINTERFACE).FormulaRecord.ParsedExpression; if (VAR_FORMULASHIFTER.AdjustFormula(VAR_PTG[], VAR_INT)) { VAR_FORMULARECORDAGGREGATE.SetParsedExpression(VAR_PTG[]); } } } } }
public UpdateGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual ListBrokersResponse METHOD_NAME(ListBrokersRequest VAR_LISTBROKERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListBrokersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListBrokersResponseUnmarshaller.Instance; return Invoke<ListBrokersResponse>(VAR_LISTBROKERSREQUEST, VAR_VAR); }
public FormulaCellCacheEntry[] METHOD_NAME() { return _consumingCells.ToArray(); }
public int METHOD_NAME() { return cardinality; }
public static WeightedTerm[] METHOD_NAME(Query VAR_QUERY, bool VAR_BOOL) { return METHOD_NAME(VAR_QUERY, VAR_BOOL, LITERAL_NULL); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(ColWidth); }
public override FieldsConsumer METHOD_NAME(SegmentWriteState VAR_SEGMENTWRITESTATE) { PostingsWriterBase VAR_POSTINGSWRITERBASE = new Lucene41PostingsWriter(VAR_SEGMENTWRITESTATE); bool VAR_BOOL = false; try { FieldsConsumer VAR_FIELDSCONSUMER = new FSTTermsWriter(VAR_SEGMENTWRITESTATE, VAR_POSTINGSWRITERBASE); VAR_BOOL = true; return VAR_FIELDSCONSUMER; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(VAR_POSTINGSWRITERBASE); } } }
public virtual int METHOD_NAME() { return mThumbOffset; }
public virtual GetApnsChannelResponse METHOD_NAME(GetApnsChannelRequest VAR_GETAPNSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApnsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApnsChannelResponseUnmarshaller.Instance; return Invoke<GetApnsChannelResponse>(VAR_GETAPNSCHANNELREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (LITERAL_NULL == VAR_OBJECT || this.GetType() != VAR_OBJECT.GetType()) { return false; } var VAR_VAR = (NGramDistance)VAR_OBJECT; return VAR_VAR.n == this.n; }
public virtual GetDomainDetailResponse METHOD_NAME(GetDomainDetailRequest VAR_GETDOMAINDETAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainDetailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainDetailResponseUnmarshaller.Instance; return Invoke<GetDomainDetailResponse>(VAR_GETDOMAINDETAILREQUEST, VAR_VAR); }
public virtual UpdateConfigurationSetReputationMetricsEnabledResponse METHOD_NAME(UpdateConfigurationSetReputationMetricsEnabledRequest VAR_UPDATECONFIGURATIONSETREPUTATIONMETRICSENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationSetReputationMetricsEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationSetReputationMetricsEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetReputationMetricsEnabledResponse>(VAR_UPDATECONFIGURATIONSETREPUTATIONMETRICSENABLEDREQUEST, VAR_VAR); }
public PackedDataInput(DataInput VAR_DATAINPUT) { this.VAR_DATAINPUT = VAR_DATAINPUT; SkipToNextByte(); }
public virtual AssociateQualificationWithWorkerResponse METHOD_NAME(AssociateQualificationWithWorkerRequest VAR_ASSOCIATEQUALIFICATIONWITHWORKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateQualificationWithWorkerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateQualificationWithWorkerResponseUnmarshaller.Instance; return Invoke<AssociateQualificationWithWorkerResponse>(VAR_ASSOCIATEQUALIFICATIONWITHWORKERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + fstArc + LITERAL_STRING + fsaState; }
public virtual SignalWorkflowExecutionResponse METHOD_NAME(SignalWorkflowExecutionRequest VAR_SIGNALWORKFLOWEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SignalWorkflowExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SignalWorkflowExecutionResponseUnmarshaller.Instance; return Invoke<SignalWorkflowExecutionResponse>(VAR_SIGNALWORKFLOWEXECUTIONREQUEST, VAR_VAR); }
public string METHOD_NAME(int VAR_INT) { if (VAR_INT == TokenConstants.EOF) { return LITERAL_STRING; } IVocabulary VAR_IVOCABULARY = parser != LITERAL_NULL ? parser.Vocabulary : Vocabulary.EmptyVocabulary; String VAR_STRING = VAR_IVOCABULARY.GetDisplayName(VAR_INT); if (VAR_STRING.Equals(VAR_INT.ToString())) { return VAR_STRING; } return VAR_STRING + LITERAL_STRING + VAR_INT + LITERAL_STRING; }
public CJKWidthFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetHLSStreamingSessionURLResponse METHOD_NAME(GetHLSStreamingSessionURLRequest VAR_GETHLSSTREAMINGSESSIONURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHLSStreamingSessionURLRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHLSStreamingSessionURLResponseUnmarshaller.Instance; return Invoke<GetHLSStreamingSessionURLResponse>(VAR_GETHLSSTREAMINGSESSIONURLREQUEST, VAR_VAR); }
public bool METHOD_NAME(FormulaShifter VAR_FORMULASHIFTER, int VAR_INT) { CellRangeAddress[] VAR_CELLRANGEADDRESS[] = header.CellRanges; bool VAR_BOOL = false; List<CellRangeAddress> VAR_LIST<CELLRANGEADDRESS> = new List<CellRangeAddress>(); for (int i = LITERAL_INT; i < VAR_CELLRANGEADDRESS[].Length; i++) { CellRangeAddress VAR_CELLRANGEADDRESS = VAR_CELLRANGEADDRESS[][i]; CellRangeAddress VAR_CELLRANGEADDRESS = ShiftRange(VAR_FORMULASHIFTER, VAR_CELLRANGEADDRESS, VAR_INT); if (VAR_CELLRANGEADDRESS == LITERAL_NULL) { VAR_BOOL = true; continue; } VAR_LIST<CELLRANGEADDRESS>.Add(VAR_CELLRANGEADDRESS); if (VAR_CELLRANGEADDRESS != VAR_CELLRANGEADDRESS) { VAR_BOOL = true; } } if (VAR_BOOL) { int VAR_INT = VAR_LIST<CELLRANGEADDRESS>.Count; if (VAR_INT == LITERAL_INT) { return false; } CellRangeAddress[] VAR_CELLRANGEADDRESS[] = new CellRangeAddress[VAR_INT]; VAR_CELLRANGEADDRESS[] = VAR_LIST<CELLRANGEADDRESS>.ToArray(); header.CellRanges = (VAR_CELLRANGEADDRESS[]); } for (int i = LITERAL_INT; i < rules.Count; i++) { CFRuleRecord VAR_CFRULERECORD = rules[i]; Ptg[] VAR_PTG[]; VAR_PTG[] = VAR_CFRULERECORD.ParsedExpression1; if (VAR_PTG[] != LITERAL_NULL && VAR_FORMULASHIFTER.AdjustFormula(VAR_PTG[], VAR_INT)) { VAR_CFRULERECORD.ParsedExpression1 = (VAR_PTG[]); } VAR_PTG[] = VAR_CFRULERECORD.ParsedExpression2; if (VAR_PTG[] != LITERAL_NULL && VAR_FORMULASHIFTER.AdjustFormula(VAR_PTG[], VAR_INT)) { VAR_CFRULERECORD.ParsedExpression2 = (VAR_PTG[]); } } return true; }
public virtual int METHOD_NAME(int VAR_INT) { if (mGarbage) { gc(); } return mKeys[VAR_INT]; }
public JapaneseKatakanaStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { minimumLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, MINIMUM_LENGTH_PARAM, JapaneseKatakanaStemFilter.DEFAULT_MINIMUM_LENGTH); if (minimumLength < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + MINIMUM_LENGTH_PARAM + LITERAL_STRING + minimumLength + LITERAL_STRING); } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static void METHOD_NAME(StringBuilder VAR_STRINGBUILDER, byte[] VAR_BYTE[]) { for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(i).Append(LITERAL_STRING).Append(VAR_BYTE[][i]); if (i < VAR_BYTE[].Length - LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } } }
public int METHOD_NAME() { return _in.METHOD_NAME(); }
public virtual DeleteDatasetGroupResponse METHOD_NAME(DeleteDatasetGroupRequest VAR_DELETEDATASETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDatasetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDatasetGroupResponseUnmarshaller.Instance; return Invoke<DeleteDatasetGroupResponse>(VAR_DELETEDATASETGROUPREQUEST, VAR_VAR); }
public virtual DescribeBuildResponse METHOD_NAME(DescribeBuildRequest VAR_DESCRIBEBUILDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBuildRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBuildResponseUnmarshaller.Instance; return Invoke<DescribeBuildResponse>(VAR_DESCRIBEBUILDREQUEST, VAR_VAR); }
public virtual E METHOD_NAME() { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink.previous; return (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> == voidLink) ? default(E) : VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data; }
public override long METHOD_NAME(long VAR_LONG) { Debug.Assert(VAR_LONG >= LITERAL_INT && VAR_LONG < valueCount); int VAR_INT = (int)((long)((ulong)VAR_LONG >> blockShift)); int VAR_INT = (int)(VAR_LONG & blockMask); return minValues[VAR_INT] + (long)(float)(VAR_INT * averages[VAR_INT]) + BlockPackedReaderIterator.ZigZagDecode(subReaders[VAR_INT].METHOD_NAME(VAR_INT)); }
public virtual DescribeVpnGatewaysResponse METHOD_NAME() { return METHOD_NAME(new DescribeVpnGatewaysRequest()); }
public override java.util.Iterator<E> METHOD_NAME() { return backingMap.keySet().METHOD_NAME(); }
public override void METHOD_NAME(DocData VAR_DOCDATA, string VAR_STRING) { int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; int VAR_INT; while ((VAR_INT = VAR_STRING.IndexOf(WriteLineDocTask.SEP, VAR_INT)) >= LITERAL_INT) { if (VAR_INT >= m_header.Length) { throw new Exception(LITERAL_STRING + (VAR_INT + LITERAL_INT) + LITERAL_STRING + m_header.Length + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } SetDocDataField(VAR_DOCDATA, VAR_INT, VAR_STRING.Substring(VAR_INT, VAR_INT - VAR_INT)); ++VAR_INT; VAR_INT = VAR_INT + LITERAL_INT; } if (VAR_INT != m_header.Length - LITERAL_INT) { throw new Exception(LITERAL_STRING + (VAR_INT + LITERAL_INT) + LITERAL_STRING + m_header.Length + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } SetDocDataField(VAR_DOCDATA, VAR_INT, VAR_STRING.Substring(VAR_INT)); }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].LL_TotalLook; } return VAR_LONG; }
public static bool METHOD_NAME(string VAR_STRING, java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return new java.util.regex.Matcher(new java.util.regex.Pattern(VAR_STRING, LITERAL_INT), VAR_JAVA.LANG.CHARSEQUENCE).METHOD_NAME(); }
public HSSFChildAnchor(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) : base(Math.Min(dx1, dx2), Math.Min(dy1, dy2), Math.Max(dx1, dx2), Math.Max(dy1, dy2)) { if (VAR_INT > VAR_INT) { _isHorizontallyFlipped = true; } if (VAR_INT > VAR_INT) { _isVerticallyFlipped = true; } }
public java.nio.CharBuffer METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, LITERAL_INT, VAR_STRING.Length); }
public virtual StartExportTaskResponse METHOD_NAME(StartExportTaskRequest VAR_STARTEXPORTTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartExportTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartExportTaskResponseUnmarshaller.Instance; return Invoke<StartExportTaskResponse>(VAR_STARTEXPORTTASKREQUEST, VAR_VAR); }
public virtual UpdateUserHierarchyResponse METHOD_NAME(UpdateUserHierarchyRequest VAR_UPDATEUSERHIERARCHYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserHierarchyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserHierarchyResponseUnmarshaller.Instance; return Invoke<UpdateUserHierarchyResponse>(VAR_UPDATEUSERHIERARCHYREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Id)).Append(LITERAL_STRING).Append(Id).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_4_text.Length); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(is16bit); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(Text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public int METHOD_NAME(object VAR_OBJECT, int VAR_INT) { object VAR_OBJECT = VAR_OBJECT; int VAR_INT = VAR_INT; int VAR_INT = findIndex(VAR_OBJECT, keys); if (keys[VAR_INT] != VAR_OBJECT) { if (++size > threshold) { rehash(); VAR_INT = findIndex(VAR_OBJECT, keys); } keys[VAR_INT] = VAR_OBJECT; values[VAR_INT] = -LITERAL_INT; } int VAR_INT = values[VAR_INT]; values[VAR_INT] = VAR_INT; return VAR_INT; }
public virtual NGit.Api.TagCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual DeleteIndexFieldResponse METHOD_NAME(DeleteIndexFieldRequest VAR_DELETEINDEXFIELDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIndexFieldRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIndexFieldResponseUnmarshaller.Instance; return Invoke<DeleteIndexFieldResponse>(VAR_DELETEINDEXFIELDREQUEST, VAR_VAR); }
public virtual AbbreviatedObjectId METHOD_NAME() { return missing; }
public virtual ParserRuleContext METHOD_NAME(int VAR_INT) { ParserRuleContext VAR_PARSERRULECONTEXT = _ctx; while (VAR_PARSERRULECONTEXT != LITERAL_NULL) { if (VAR_PARSERRULECONTEXT.RuleIndex == VAR_INT) { return VAR_PARSERRULECONTEXT; } VAR_PARSERRULECONTEXT = (ParserRuleContext)VAR_PARSERRULECONTEXT.Parent; } return LITERAL_NULL; }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { for (int i = _rectangleGroups.Count - LITERAL_INT; i >= LITERAL_INT; i--) { BlankCellRectangleGroup VAR_BLANKCELLRECTANGLEGROUP = (BlankCellRectangleGroup)_rectangleGroups[i]; if (VAR_BLANKCELLRECTANGLEGROUP.METHOD_NAME(VAR_INT, VAR_INT)) { return true; } } if (_currentRectangleGroup != LITERAL_NULL && _currentRectangleGroup.METHOD_NAME(VAR_INT, VAR_INT)) { return true; } if (_currentRowIndex != -LITERAL_INT && _currentRowIndex == VAR_INT) { if (_firstColumnIndex <= VAR_INT && VAR_INT <= _lastColumnIndex) { return true; } } return false; }
public virtual DisassociateS3ResourcesResponse METHOD_NAME(DisassociateS3ResourcesRequest VAR_DISASSOCIATES3RESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateS3ResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateS3ResourcesResponseUnmarshaller.Instance; return Invoke<DisassociateS3ResourcesResponse>(VAR_DISASSOCIATES3RESOURCESREQUEST, VAR_VAR); }
public FontRecord METHOD_NAME() { FontRecord VAR_FONTRECORD = (FontRecord)CreateFont(); records.Add(records.Fontpos + LITERAL_INT, VAR_FONTRECORD); records.Fontpos = (records.Fontpos + LITERAL_INT); numfonts++; return VAR_FONTRECORD; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is SpanishStemmer; }
public bool METHOD_NAME(char VAR_CHAR) { return System.Char.IsLower(VAR_CHAR); }
public override java.nio.ByteOrder METHOD_NAME() { return byteBuffer.METHOD_NAME(); }
public DeleteVolumeRequest(string VAR_STRING) { _volumeId = VAR_STRING; }
public BRAIRecord METHOD_NAME() { return dataSecondaryCategoryLabels; }
public virtual int METHOD_NAME() { int VAR_INT = LITERAL_INT; Antlr4.Runtime.RuleContext VAR_ANTLR4.RUNTIME.RULECONTEXT = this; while (VAR_ANTLR4.RUNTIME.RULECONTEXT != LITERAL_NULL) { VAR_ANTLR4.RUNTIME.RULECONTEXT = VAR_ANTLR4.RUNTIME.RULECONTEXT._parent; VAR_INT++; } return VAR_INT; }
public virtual PersonIdent METHOD_NAME() { return tagger; }
public override ObjectId METHOD_NAME(int VAR_INT, long VAR_LONG, InputStream VAR_INPUTSTREAM) { throw new NotSupportedException(); }
public Automaton METHOD_NAME(Automaton VAR_AUTOMATON) { if (VAR_AUTOMATON.IsSingleton) { VAR_AUTOMATON = VAR_AUTOMATON.CloneExpanded(); } State[] VAR_STATE[] = new State[VAR_AUTOMATON.GetNumberedStates().Length]; List<State> VAR_LIST<STATE> = new List<State>(); State VAR_STATE = VAR_AUTOMATON.GetInitialState(); VAR_LIST<STATE>.Add(VAR_STATE); Automaton VAR_AUTOMATON = new Automaton(); VAR_AUTOMATON.IsDeterministic = false; State VAR_STATE = VAR_AUTOMATON.GetInitialState(); utf8States = new State[LITERAL_INT]; utf8StateCount = LITERAL_INT; VAR_STATE.number = utf8StateCount; utf8States[utf8StateCount] = VAR_STATE; utf8StateCount++; VAR_STATE.Accept = VAR_STATE.Accept; VAR_STATE[][VAR_STATE.number] = VAR_STATE; while (VAR_LIST<STATE>.Count != LITERAL_INT) { VAR_STATE = VAR_LIST<STATE>[VAR_LIST<STATE>.Count - LITERAL_INT]; VAR_LIST<STATE>.RemoveAt(VAR_LIST<STATE>.Count - LITERAL_INT); VAR_STATE = VAR_STATE[][VAR_STATE.number]; for (int i = LITERAL_INT; i < VAR_STATE.numTransitions; i++) { Transition VAR_TRANSITION = VAR_STATE.TransitionsArray[i]; State VAR_STATE = VAR_TRANSITION.to; State VAR_STATE = VAR_STATE[][VAR_STATE.number]; if (VAR_STATE == LITERAL_NULL) { VAR_STATE = NewUTF8State(); VAR_STATE.accept = VAR_STATE.accept; VAR_STATE[][VAR_STATE.number] = VAR_STATE; VAR_LIST<STATE>.Add(VAR_STATE); } ConvertOneEdge(VAR_STATE, VAR_STATE, VAR_TRANSITION.min, VAR_TRANSITION.max); } } VAR_AUTOMATON.SetNumberedStates(utf8States, utf8StateCount); return VAR_AUTOMATON; }
public static string[] METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual void METHOD_NAME(int VAR_INT) { workers.AddAndGet(VAR_INT); }
public FacetEntry(BytesRef VAR_BYTESREF, int VAR_INT) { this.VAR_BYTESREF = VAR_BYTESREF; this.VAR_INT = VAR_INT; }
public override string METHOD_NAME() { string VAR_STRING = invert ? LITERAL_STRING : string.Empty; return GetType().Name + LITERAL_STRING + VAR_STRING + nodeName + LITERAL_STRING; }
public virtual NGit.Api.RemoveNoteCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<string> VAR_ILIST<STRING>; VAR_ILIST<STRING> = OptionalFields(); VAR_SRNDQUERY = OrQuery(); { if (true) return (VAR_ILIST<STRING> == LITERAL_NULL) ? VAR_SRNDQUERY : GetFieldsQuery(VAR_SRNDQUERY, VAR_ILIST<STRING>); } throw new Exception(LITERAL_STRING); }
public virtual DescribeParametersResponse METHOD_NAME(DescribeParametersRequest VAR_DESCRIBEPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeParametersResponseUnmarshaller.Instance; return Invoke<DescribeParametersResponse>(VAR_DESCRIBEPARAMETERSREQUEST, VAR_VAR); }
public ParseException(Token VAR_TOKEN, int[][] VAR_INT[][], string[] VAR_STRING[]) : base(new Message(QueryParserMessages.INVALID_SYNTAX, Initialize(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))) { this.CurrentToken = VAR_TOKEN; this.ExpectedTokenSequences = VAR_INT[][]; this.TokenImage = VAR_STRING[]; }
public virtual ListHumanTaskUisResponse METHOD_NAME(ListHumanTaskUisRequest VAR_LISTHUMANTASKUISREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHumanTaskUisRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHumanTaskUisResponseUnmarshaller.Instance; return Invoke<ListHumanTaskUisResponse>(VAR_LISTHUMANTASKUISREQUEST, VAR_VAR); }
public static java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); }
public Parser(bool VAR_BOOL, Analyzer VAR_ANALYZER) : base(dedup) { this.VAR_ANALYZER = VAR_ANALYZER; }
public ObjectProtectRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_protect = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteInt(_reserved0Int); VAR_ILITTLEENDIANOUTPUT.WriteShort(_reserved1Short); VAR_ILITTLEENDIANOUTPUT.WriteByte(_reserved2Byte); }
public virtual int METHOD_NAME() { if (mGarbage) { gc(); } return mSize; }
public decimal METHOD_NAME() { return new decimal (_fractionalPart) / (BD_2_POW_24); }
public virtual AttachLoadBalancerTlsCertificateResponse METHOD_NAME(AttachLoadBalancerTlsCertificateRequest VAR_ATTACHLOADBALANCERTLSCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachLoadBalancerTlsCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachLoadBalancerTlsCertificateResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancerTlsCertificateResponse>(VAR_ATTACHLOADBALANCERTLSCERTIFICATEREQUEST, VAR_VAR); }
if (_classmap == LITERAL_NULL) { return m_transitions[state * _points.Length + GetCharClass(c)]; } else { return m_transitions[state * _points.Length + _classmap[c]]; }
public virtual UpdateVoiceChannelResponse METHOD_NAME(UpdateVoiceChannelRequest VAR_UPDATEVOICECHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVoiceChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVoiceChannelResponseUnmarshaller.Instance; return Invoke<UpdateVoiceChannelResponse>(VAR_UPDATEVOICECHANNELREQUEST, VAR_VAR); }
public override void METHOD_NAME(ReceivePack VAR_RECEIVEPACK, ICollection<ReceiveCommand> VAR_ICOLLECTION<RECEIVECOMMAND>) { for (int i = LITERAL_INT; i < count; i++) { hooks[i].METHOD_NAME(VAR_RECEIVEPACK, VAR_ICOLLECTION<RECEIVECOMMAND>); } }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT]); }
public virtual DescribeSpotDatafeedSubscriptionResponse METHOD_NAME() { return METHOD_NAME(new DescribeSpotDatafeedSubscriptionRequest()); }
public virtual int METHOD_NAME() { return tzOffset; }
public void METHOD_NAME() { allocationSite = LITERAL_NULL; }
public virtual AssociateClientVpnTargetNetworkResponse METHOD_NAME(AssociateClientVpnTargetNetworkRequest VAR_ASSOCIATECLIENTVPNTARGETNETWORKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateClientVpnTargetNetworkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateClientVpnTargetNetworkResponseUnmarshaller.Instance; return Invoke<AssociateClientVpnTargetNetworkResponse>(VAR_ASSOCIATECLIENTVPNTARGETNETWORKREQUEST, VAR_VAR); }
public virtual ListEnvironmentsResponse METHOD_NAME(ListEnvironmentsRequest VAR_LISTENVIRONMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEnvironmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEnvironmentsResponseUnmarshaller.Instance; return Invoke<ListEnvironmentsResponse>(VAR_LISTENVIRONMENTSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { if (semiVolatile.IsSet(field_1_options)) { return LITERAL_STRING; } if (optiIf.IsSet(field_1_options)) { return LITERAL_STRING; } if (optiChoose.IsSet(field_1_options)) { return LITERAL_STRING; } if (optiSkip.IsSet(field_1_options)) { return LITERAL_STRING; } if (optiSum.IsSet(field_1_options)) { return LITERAL_STRING; } if (baxcel.IsSet(field_1_options)) { return LITERAL_STRING; } if (space.IsSet(field_1_options)) { return LITERAL_STRING; } return LITERAL_STRING; }
public virtual int METHOD_NAME() { return value.Length; }
public virtual void METHOD_NAME(int VAR_INT) { lock (this) { if (VAR_INT < LITERAL_INT) { VAR_INT = LITERAL_INT; } if (VAR_INT != mMax) { mMax = VAR_INT; postInvalidate(); if (mProgress > VAR_INT) { mProgress = VAR_INT; } refreshProgress(android.@internal.R.id.progress, mProgress, false); } } }
public GetVaultNotificationsRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public override java.nio.FloatBuffer METHOD_NAME() { return java.nio.ReadOnlyFloatArrayBuffer.copy(this, _mark); }
this.className = className; key = resourceName;
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return METHOD_NAME(FirstSheetIndex, VAR_INT, VAR_INT); }
public java.util.regex.Matcher METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return new java.util.regex.Matcher(this, VAR_JAVA.LANG.CHARSEQUENCE); }
public virtual ListRoomMembershipsResponse METHOD_NAME(ListRoomMembershipsRequest VAR_LISTROOMMEMBERSHIPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRoomMembershipsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRoomMembershipsResponseUnmarshaller.Instance; return Invoke<ListRoomMembershipsResponse>(VAR_LISTROOMMEMBERSHIPSREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, string VAR_STRING) { insert0(VAR_INT, VAR_STRING); return this; }
public virtual RegisterActivityTypeResponse METHOD_NAME(RegisterActivityTypeRequest VAR_REGISTERACTIVITYTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterActivityTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterActivityTypeResponseUnmarshaller.Instance; return Invoke<RegisterActivityTypeResponse>(VAR_REGISTERACTIVITYTYPEREQUEST, VAR_VAR); }
public virtual DescribeSuggestersResponse METHOD_NAME(DescribeSuggestersRequest VAR_DESCRIBESUGGESTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSuggestersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSuggestersResponseUnmarshaller.Instance; return Invoke<DescribeSuggestersResponse>(VAR_DESCRIBESUGGESTERSREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { if (VAR_INT != _firstColumnIndex) { return false; } if (VAR_INT != _lastColumnIndex) { return false; } if (VAR_INT != _lastRowIndex + LITERAL_INT) { return false; } _lastRowIndex = VAR_INT; return true; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is FinnishStemmer; }
public virtual StopDeploymentResponse METHOD_NAME(StopDeploymentRequest VAR_STOPDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopDeploymentResponseUnmarshaller.Instance; return Invoke<StopDeploymentResponse>(VAR_STOPDEPLOYMENTREQUEST, VAR_VAR); }
public virtual ListGitHubAccountTokenNamesResponse METHOD_NAME(ListGitHubAccountTokenNamesRequest VAR_LISTGITHUBACCOUNTTOKENNAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGitHubAccountTokenNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGitHubAccountTokenNamesResponseUnmarshaller.Instance; return Invoke<ListGitHubAccountTokenNamesResponse>(VAR_LISTGITHUBACCOUNTTOKENNAMESREQUEST, VAR_VAR); }
public virtual CreateBackupResponse METHOD_NAME(CreateBackupRequest VAR_CREATEBACKUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBackupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBackupResponseUnmarshaller.Instance; return Invoke<CreateBackupResponse>(VAR_CREATEBACKUPREQUEST, VAR_VAR); }
public virtual ModifyTransitGatewayVpcAttachmentResponse METHOD_NAME(ModifyTransitGatewayVpcAttachmentRequest VAR_MODIFYTRANSITGATEWAYVPCATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyTransitGatewayVpcAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyTransitGatewayVpcAttachmentResponseUnmarshaller.Instance; return Invoke<ModifyTransitGatewayVpcAttachmentResponse>(VAR_MODIFYTRANSITGATEWAYVPCATTACHMENTREQUEST, VAR_VAR); }
public virtual RejectSkillResponse METHOD_NAME(RejectSkillRequest VAR_REJECTSKILLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectSkillRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectSkillResponseUnmarshaller.Instance; return Invoke<RejectSkillResponse>(VAR_REJECTSKILLREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetGnumericPart(red)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(GetGnumericPart(green)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(GetGnumericPart(blue)); return VAR_STRINGBUILDER.ToString(); }
public override string METHOD_NAME() { return LITERAL_STRING + this.m_field + LITERAL_STRING + this.m_text + LITERAL_STRING; }
public GetOSSImageAccessRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteFleetsResponse METHOD_NAME(DeleteFleetsRequest VAR_DELETEFLEETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFleetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFleetsResponseUnmarshaller.Instance; return Invoke<DeleteFleetsResponse>(VAR_DELETEFLEETSREQUEST, VAR_VAR); }
public void METHOD_NAME(E VAR_E) { if (this.expectedModCount == this._enclosing.modCount) { try { this._enclosing.METHOD_NAME(this.lastPosition, VAR_E); } catch (System.IndexOutOfRangeException) { throw new System.InvalidOperationException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public InvalidationBatch(Paths VAR_PATHS, string VAR_STRING) { _paths = VAR_PATHS; _callerReference = VAR_STRING; }
public virtual int METHOD_NAME() { return p; }
public void METHOD_NAME(SubRecord VAR_SUBRECORD) { subrecords.Add(VAR_SUBRECORD); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); int VAR_INT = VAR_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); VAR_INT += LITERAL_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, RecordId); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, RecordSize - LITERAL_INT); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_1_dx1); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_2_dy1); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_3_dx2); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_4_dy2); VAR_INT += LITERAL_INT; VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public static NGit.ObjectId METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT); }
public virtual DisassociateIpGroupsResponse METHOD_NAME(DisassociateIpGroupsRequest VAR_DISASSOCIATEIPGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateIpGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateIpGroupsResponseUnmarshaller.Instance; return Invoke<DisassociateIpGroupsResponse>(VAR_DISASSOCIATEIPGROUPSREQUEST, VAR_VAR); }
public static void METHOD_NAME(FilePath VAR_FILEPATH, bool VAR_BOOL) { if (!VAR_FILEPATH.METHOD_NAME()) { if (VAR_BOOL && VAR_FILEPATH.IsDirectory()) { return; } throw new IOException(MessageFormat.Format(JGitText.Get().mkDirsFailed, VAR_FILEPATH.GetAbsolutePath())); } }
public GetImageManifestRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual ListIdentitiesResponse METHOD_NAME(ListIdentitiesRequest VAR_LISTIDENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIdentitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIdentitiesResponseUnmarshaller.Instance; return Invoke<ListIdentitiesResponse>(VAR_LISTIDENTITIESREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_sfr.Range.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public byte[] METHOD_NAME() { byte[] VAR_BYTE[] = new byte[Size]; LittleEndian.PutInt(VAR_BYTE[], LITERAL_INT * LittleEndian.INT_SIZE, LittleEndian.INT_SIZE + _value.Length); LittleEndian.PutInt(VAR_BYTE[], LITERAL_INT * LittleEndian.INT_SIZE, _format); System.Array.Copy(_value, LITERAL_INT, VAR_BYTE[], LittleEndian.INT_SIZE + LittleEndian.INT_SIZE, _value.Length); return VAR_BYTE[]; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (VAR_INT >= buffer.Length) { Flush(); @in.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); } else { if (upto + VAR_INT > buffer.Length) { Flush(); } System.Buffer.BlockCopy(VAR_BYTE[], VAR_INT, buffer, upto, VAR_INT); upto += VAR_INT; } }
public IPicture METHOD_NAME(HSSFClientAnchor VAR_HSSFCLIENTANCHOR, int VAR_INT) { HSSFPicture VAR_HSSFPICTURE = new HSSFPicture(LITERAL_NULL, (HSSFClientAnchor)VAR_HSSFCLIENTANCHOR); VAR_HSSFPICTURE.PictureIndex = VAR_INT; AddShape(VAR_HSSFPICTURE); OnCreate(VAR_HSSFPICTURE); return VAR_HSSFPICTURE; }
public string METHOD_NAME() { return legacyCredential.AccessSecret; }
public virtual int METHOD_NAME(java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.BYTEBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.BYTEBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.BYTEBUFFER._position; byte VAR_BYTE; byte VAR_BYTE; while (VAR_INT > LITERAL_INT) { VAR_BYTE = get(VAR_INT); VAR_BYTE = VAR_JAVA.NIO.BYTEBUFFER.get(VAR_INT); if (VAR_BYTE != VAR_BYTE) { return ((sbyte)VAR_BYTE) < VAR_BYTE ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.BYTEBUFFER.remaining(); }
public virtual CreateResolverEndpointResponse METHOD_NAME(CreateResolverEndpointRequest VAR_CREATERESOLVERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateResolverEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateResolverEndpointResponseUnmarshaller.Instance; return Invoke<CreateResolverEndpointResponse>(VAR_CREATERESOLVERENDPOINTREQUEST, VAR_VAR); }
public HunspellStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { dictionaryFiles = Require(VAR_IDICTIONARY<STRING, STRING>, PARAM_DICTIONARY); affixFile = Get(VAR_IDICTIONARY<STRING, STRING>, PARAM_AFFIX); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, PARAM_IGNORE_CASE, false); longestOnly = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, PARAM_LONGEST_ONLY, false); GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, LITERAL_INT); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public virtual CancelSpotInstanceRequestsResponse METHOD_NAME(CancelSpotInstanceRequestsRequest VAR_CANCELSPOTINSTANCEREQUESTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelSpotInstanceRequestsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelSpotInstanceRequestsResponseUnmarshaller.Instance; return Invoke<CancelSpotInstanceRequestsResponse>(VAR_CANCELSPOTINSTANCEREQUESTSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_print_headers); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], TextWriter VAR_TEXTWRITER) { ToHexCharArray(VAR_CHAR[]); VAR_TEXTWRITER.Write(VAR_CHAR[], LITERAL_INT, Constants.OBJECT_ID_STRING_LENGTH); }
public virtual DeleteVaultAccessPolicyResponse METHOD_NAME(DeleteVaultAccessPolicyRequest VAR_DELETEVAULTACCESSPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVaultAccessPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVaultAccessPolicyResponseUnmarshaller.Instance; return Invoke<DeleteVaultAccessPolicyResponse>(VAR_DELETEVAULTACCESSPOLICYREQUEST, VAR_VAR); }
public SpanOrBuilder(ISpanQueryBuilder VAR_ISPANQUERYBUILDER) { this.VAR_ISPANQUERYBUILDER = VAR_ISPANQUERYBUILDER; }
public virtual DescribeConnectionsOnInterconnectResponse METHOD_NAME(DescribeConnectionsOnInterconnectRequest VAR_DESCRIBECONNECTIONSONINTERCONNECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConnectionsOnInterconnectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConnectionsOnInterconnectResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsOnInterconnectResponse>(VAR_DESCRIBECONNECTIONSONINTERCONNECTREQUEST, VAR_VAR); }
public MultiBoolFunction(IList<ValueSource> VAR_ILIST<VALUESOURCE>) { this.m_sources = VAR_ILIST<VALUESOURCE>; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ICUTransformFilter(VAR_TOKENSTREAM, transliterator); }
public virtual void METHOD_NAME() { endA++; }
public virtual DeleteReceiptRuleSetResponse METHOD_NAME(DeleteReceiptRuleSetRequest VAR_DELETERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DeleteReceiptRuleSetResponse>(VAR_DELETERECEIPTRULESETREQUEST, VAR_VAR); }
public PutRetentionPolicyRequest(string VAR_STRING, int VAR_INT) { _logGroupName = VAR_STRING; _retentionInDays = VAR_INT; }
public void METHOD_NAME(RowRecord VAR_ROWRECORD) { _rowRecords[VAR_ROWRECORD.RowNumber] = VAR_ROWRECORD; _rowRecordValues = LITERAL_NULL; if (VAR_ROWRECORD.RowNumber < firstrow || firstrow == -LITERAL_INT) { firstrow = VAR_ROWRECORD.RowNumber; } if (VAR_ROWRECORD.RowNumber > lastrow || lastrow == -LITERAL_INT) { lastrow = VAR_ROWRECORD.RowNumber; } }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual NGit.Api.LsRemoteCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual void METHOD_NAME(string VAR_STRING) { DeleteNode(GetNode(this.culture.TextInfo.ToLower(VAR_STRING.Trim()))); }
public Object[][] METHOD_NAME() { if (_arrayValues == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } Object[][] VAR_OBJECT[][] = new Object[_nRows][]; for (int r = LITERAL_INT; r < _nRows; r++) { VAR_OBJECT[][][r] = new object[_nColumns]; for (int c = LITERAL_INT; c < _nColumns; c++) { VAR_OBJECT[][][r][c] = _arrayValues[GetValueIndex(c, r)]; } } return VAR_OBJECT[][]; }
public virtual PutIntegrationResponseResponse METHOD_NAME(PutIntegrationResponseRequest VAR_PUTINTEGRATIONRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutIntegrationResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutIntegrationResponseResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponseResponse>(VAR_PUTINTEGRATIONRESPONSEREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { lock (@lock) { if (VAR_INT < LITERAL_INT) { throw new java.lang.StringIndexOutOfBoundsException(VAR_STRING, VAR_INT, VAR_INT); } if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } if ((VAR_INT | VAR_INT) < LITERAL_INT || VAR_INT > VAR_STRING.Length - VAR_INT) { throw new java.lang.StringIndexOutOfBoundsException(VAR_STRING, VAR_INT, VAR_INT); } checkStatus(); java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = java.nio.CharBuffer.wrap(java.lang.CharSequenceProxy.Wrap(VAR_STRING), VAR_INT, VAR_INT + VAR_INT); convert(VAR_JAVA.NIO.CHARBUFFER); } }
public string SubscriptionId { get; set; }
public IPicture METHOD_NAME(HSSFClientAnchor VAR_HSSFCLIENTANCHOR, int VAR_INT) { HSSFPicture VAR_HSSFPICTURE = new HSSFPicture(LITERAL_NULL, (HSSFClientAnchor)VAR_HSSFCLIENTANCHOR); VAR_HSSFPICTURE.PictureIndex = VAR_INT; AddShape(VAR_HSSFPICTURE); OnCreate(VAR_HSSFPICTURE); return VAR_HSSFPICTURE; }
public virtual ReleaseStaticIpResponse METHOD_NAME(ReleaseStaticIpRequest VAR_RELEASESTATICIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReleaseStaticIpRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReleaseStaticIpResponseUnmarshaller.Instance; return Invoke<ReleaseStaticIpResponse>(VAR_RELEASESTATICIPREQUEST, VAR_VAR); }
public virtual ListConfigurationSetsResponse METHOD_NAME(ListConfigurationSetsRequest VAR_LISTCONFIGURATIONSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListConfigurationSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListConfigurationSetsResponseUnmarshaller.Instance; return Invoke<ListConfigurationSetsResponse>(VAR_LISTCONFIGURATIONSETSREQUEST, VAR_VAR); }
public virtual UpdateRecordsResponse METHOD_NAME(UpdateRecordsRequest VAR_UPDATERECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRecordsResponseUnmarshaller.Instance; return Invoke<UpdateRecordsResponse>(VAR_UPDATERECORDSREQUEST, VAR_VAR); }
public virtual IToken METHOD_NAME() { IToken VAR_ITOKEN = _factory.Create(_tokenFactorySourcePair, _type, _text, _channel, _tokenStartCharIndex, CharIndex - LITERAL_INT, _tokenStartLine, _tokenStartColumn); METHOD_NAME(VAR_ITOKEN); return VAR_ITOKEN; }
public virtual IndexCommit METHOD_NAME() { lock (this) { if (!initCalled) { throw new InvalidOperationException(LITERAL_STRING); } if (m_lastCommit == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } IncRef(m_lastCommit); return m_lastCommit; } }
public override void METHOD_NAME(IInputIterator VAR_IINPUTITERATOR) { if (m_searcherMgr != LITERAL_NULL) { m_searcherMgr.Dispose(); m_searcherMgr = LITERAL_NULL; } if (writer != LITERAL_NULL) { writer.Dispose(); writer = LITERAL_NULL; } AtomicReader VAR_ATOMICREADER = LITERAL_NULL; bool VAR_BOOL = false; try { writer = new IndexWriter(dir, GetIndexWriterConfig(matchVersion, GramAnalyzer, OpenMode.CREATE)); BytesRef VAR_BYTESREF; while ((VAR_BYTESREF = VAR_IINPUTITERATOR.Next()) != LITERAL_NULL) { BytesRef VAR_BYTESREF; if (VAR_IINPUTITERATOR.HasPayloads) { VAR_BYTESREF = VAR_IINPUTITERATOR.Payload; } else { VAR_BYTESREF = LITERAL_NULL; } Add(VAR_BYTESREF, VAR_IINPUTITERATOR.Contexts, VAR_IINPUTITERATOR.Weight, VAR_BYTESREF); } m_searcherMgr = new SearcherManager(writer, true, LITERAL_NULL); VAR_BOOL = true; } finally { if (VAR_BOOL) { IOUtils.Dispose(VAR_ATOMICREADER); } else { IOUtils.DisposeWhileHandlingException(writer, VAR_ATOMICREADER); writer = LITERAL_NULL; } } }
public override java.nio.ShortBuffer METHOD_NAME(short VAR_SHORT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { for (int i = LITERAL_INT; i < suffixes.Length; i++) { if (EndsWithCheckLength(VAR_CHAR[], VAR_INT, suffixes[i])) { VAR_INT = StemmerUtil.DeleteN(VAR_CHAR[], VAR_INT - suffixes[i].Length, VAR_INT, suffixes[i].Length); } } return VAR_INT; }
public SeriesListRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); short[] VAR_SHORT[] = new short[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_SHORT[][i] = VAR_RECORDINPUTSTREAM.ReadShort(); } field_1_seriesNumbers = VAR_SHORT[]; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerModeAction)) { return false; } } return mode == ((Antlr4.Runtime.Atn.LexerModeAction)VAR_OBJECT).mode; }
public virtual string METHOD_NAME() { if (Size() == LITERAL_INT) { return LITERAL_NULL; } int VAR_INT = GetEnd(LITERAL_INT); if (content[VAR_INT - LITERAL_INT] != LITERAL_CHAR) { return LITERAL_NULL; } if (content.Length > LITERAL_INT && content[VAR_INT - LITERAL_INT] == LITERAL_CHAR) { return LITERAL_STRING; } else { return LITERAL_STRING; } }
public NormalisedDecimal METHOD_NAME() { long VAR_LONG = _wholePart; if (_fractionalPart >= FRAC_HALF) { VAR_LONG++; } int VAR_INT = _relativeDecimalExponent; if (VAR_LONG < MAX_REP_WHOLE_PART) { return new NormalisedDecimal(VAR_LONG, LITERAL_INT, VAR_INT); } return new NormalisedDecimal(VAR_LONG / LITERAL_INT, LITERAL_INT, VAR_INT + LITERAL_INT); }
public PLSAggregate(RecordStream VAR_RECORDSTREAM) { _pls = VAR_RECORDSTREAM.GetNext(); if (VAR_RECORDSTREAM.PeekNextSid() == ContinueRecord.sid) { List<ContinueRecord> VAR_LIST<CONTINUERECORD> = new List<ContinueRecord>(); while (VAR_RECORDSTREAM.PeekNextSid() == ContinueRecord.sid) { VAR_LIST<CONTINUERECORD>.Add((ContinueRecord)VAR_RECORDSTREAM.GetNext()); } _plsContinues = new ContinueRecord[VAR_LIST<CONTINUERECORD>.Count]; _plsContinues = VAR_LIST<CONTINUERECORD>.ToArray(); } else { _plsContinues = EMPTY_CONTINUE_RECORD_ARRAY; } }
public virtual AssociateDelegateToResourceResponse METHOD_NAME(AssociateDelegateToResourceRequest VAR_ASSOCIATEDELEGATETORESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateDelegateToResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateDelegateToResourceResponseUnmarshaller.Instance; return Invoke<AssociateDelegateToResourceResponse>(VAR_ASSOCIATEDELEGATETORESOURCEREQUEST, VAR_VAR); }
public static void METHOD_NAME(CredentialsProvider VAR_CREDENTIALSPROVIDER) { defaultProvider = VAR_CREDENTIALSPROVIDER; }
public EscherProperty METHOD_NAME(int VAR_INT) { return properties[VAR_INT]; }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { lock (this) { object[] VAR_OBJECT[] = new object[elements.Length + LITERAL_INT]; System.Array.Copy(elements, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, VAR_INT); VAR_OBJECT[][VAR_INT] = VAR_E; System.Array.Copy(elements, VAR_INT, VAR_OBJECT[], VAR_INT + LITERAL_INT, elements.Length - VAR_INT); elements = VAR_OBJECT[]; } }
public static BitField METHOD_NAME(int VAR_INT) { BitField VAR_BITFIELD = (BitField)instances[VAR_INT]; if (VAR_BITFIELD == LITERAL_NULL) { VAR_BITFIELD = new BitField(VAR_INT); instances[VAR_INT] = VAR_BITFIELD; } return VAR_BITFIELD; }
public bool METHOD_NAME(int VAR_INT) { int VAR_INT = ReaderUtil.SubIndex(VAR_INT, starts); Debug.Assert(VAR_INT != -LITERAL_INT); IBits VAR_IBITS = subs[VAR_INT]; if (VAR_IBITS == LITERAL_NULL) { return sefaultValue; } else { Debug.Assert(CheckLength(VAR_INT, VAR_INT)); return VAR_IBITS.METHOD_NAME(VAR_INT - starts[VAR_INT]); } }
public virtual DeleteFieldLevelEncryptionProfileResponse METHOD_NAME(DeleteFieldLevelEncryptionProfileRequest VAR_DELETEFIELDLEVELENCRYPTIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFieldLevelEncryptionProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFieldLevelEncryptionProfileResponseUnmarshaller.Instance; return Invoke<DeleteFieldLevelEncryptionProfileResponse>(VAR_DELETEFIELDLEVELENCRYPTIONPROFILEREQUEST, VAR_VAR); }
public EscherComplexProperty(short VAR_SHORT, byte[] VAR_BYTE[]) : base(id) { this._complexData = VAR_BYTE[]; }
public override object METHOD_NAME() { if (_input == LITERAL_NULL) { throw new ObjectDisposedException(this.GetType().GetTypeInfo().FullName, LITERAL_STRING); } return new SimpleTextTermVectorsReader(_offsets, (IndexInput)_input.METHOD_NAME()); }
public static void METHOD_NAME(short[] VAR_SHORT[], short VAR_SHORT) { { for (int i = LITERAL_INT; i < VAR_SHORT[].Length; i++) { VAR_SHORT[][i] = VAR_SHORT; } } }
public int METHOD_NAME() { return endB; }
public virtual DescribeAutoMLJobResponse METHOD_NAME(DescribeAutoMLJobRequest VAR_DESCRIBEAUTOMLJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAutoMLJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAutoMLJobResponseUnmarshaller.Instance; return Invoke<DescribeAutoMLJobResponse>(VAR_DESCRIBEAUTOMLJOBREQUEST, VAR_VAR); }
public SelectionRecord(int VAR_INT, int VAR_INT) { field_1_pane = LITERAL_INT; field_2_row_active_cell = VAR_INT; field_3_col_active_cell = VAR_INT; field_4_ref_active_cell = LITERAL_INT; field_6_refs = new CellRangeAddress8Bit[] { new CellRangeAddress8Bit(VAR_INT, VAR_INT, VAR_INT, VAR_INT), }; }
public InvalidationBatch(string VAR_STRING) { _callerReference = VAR_STRING; }
public virtual int METHOD_NAME(IndexCommit VAR_INDEXCOMMIT) { if (Directory != VAR_INDEXCOMMIT.Directory) { throw new System.NotSupportedException(LITERAL_STRING); } long VAR_LONG = Generation; long VAR_LONG = VAR_INDEXCOMMIT.Generation; if (VAR_LONG < VAR_LONG) { return -LITERAL_INT; } else if (VAR_LONG > VAR_LONG) { return LITERAL_INT; } else { return LITERAL_INT; } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Options); VAR_ILITTLEENDIANOUTPUT.WriteShort(TopRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(LeftCol); VAR_ILITTLEENDIANOUTPUT.WriteInt(HeaderColor); VAR_ILITTLEENDIANOUTPUT.WriteShort(PageBreakZoom); VAR_ILITTLEENDIANOUTPUT.WriteShort(NormalZoom); VAR_ILITTLEENDIANOUTPUT.WriteInt(Reserved); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PhoneticFilter(VAR_TOKENSTREAM, GetEncoder(), inject); }
public virtual StartMatchmakingResponse METHOD_NAME(StartMatchmakingRequest VAR_STARTMATCHMAKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMatchmakingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMatchmakingResponseUnmarshaller.Instance; return Invoke<StartMatchmakingResponse>(VAR_STARTMATCHMAKINGREQUEST, VAR_VAR); }
public virtual CreateReusableDelegationSetResponse METHOD_NAME(CreateReusableDelegationSetRequest VAR_CREATEREUSABLEDELEGATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateReusableDelegationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateReusableDelegationSetResponseUnmarshaller.Instance; return Invoke<CreateReusableDelegationSetResponse>(VAR_CREATEREUSABLEDELEGATIONSETREQUEST, VAR_VAR); }
public virtual GC METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = (VAR_PROGRESSMONITOR == LITERAL_NULL) ? NullProgressMonitor.INSTANCE : VAR_PROGRESSMONITOR; return this; }
public string METHOD_NAME() { return regionId; }
public virtual CreateVpcEndpointServiceConfigurationResponse METHOD_NAME(CreateVpcEndpointServiceConfigurationRequest VAR_CREATEVPCENDPOINTSERVICECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcEndpointServiceConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcEndpointServiceConfigurationResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointServiceConfigurationResponse>(VAR_CREATEVPCENDPOINTSERVICECONFIGURATIONREQUEST, VAR_VAR); }
public virtual IIndexableField METHOD_NAME(FieldInfo VAR_FIELDINFO) { fieldNames.Add(VAR_FIELDINFO.Name); IList<LazyField> VAR_ILIST<LAZYFIELD>; if (!fields.TryGetValue(VAR_FIELDINFO.Number, out VAR_ILIST<LAZYFIELD>) || LITERAL_NULL == VAR_ILIST<LAZYFIELD>) { VAR_ILIST<LAZYFIELD> = new List<LazyField>(); fields[VAR_FIELDINFO.Number] = VAR_ILIST<LAZYFIELD>; } LazyField VAR_LAZYFIELD = new LazyField(this, VAR_FIELDINFO.Name, VAR_FIELDINFO.Number); VAR_ILIST<LAZYFIELD>.Add(VAR_LAZYFIELD); lock (this) { doc = LITERAL_NULL; } return VAR_LAZYFIELD; }
public static int METHOD_NAME(int VAR_INT) { VAR_INT--; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT |= VAR_INT >> LITERAL_INT; VAR_INT++; return VAR_INT; }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { return left < right && top < bottom && VAR_INT >= left && VAR_INT < right && VAR_INT >= top && VAR_INT < bottom; }
public override int METHOD_NAME() { return PACK_DELTA; }
public Tag(string VAR_STRING) { _key = VAR_STRING; }
public InactivatePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DescribeEventSubscriptionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeEventSubscriptionsRequest()); }
public override short METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return byteBuffer.getShort(VAR_INT * libcore.io.SizeOf.SHORT); }
public virtual bool METHOD_NAME() { return exportAll; }
public static void METHOD_NAME(int VAR_INT, String VAR_STRING) { switch (VAR_INT) { case BETWEEN: if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } break; case NOT_BETWEEN: if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } break; } }
public override V METHOD_NAME() { return this.nextEntry().value; }
public virtual UpdateSchemaResponse METHOD_NAME(UpdateSchemaRequest VAR_UPDATESCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSchemaResponseUnmarshaller.Instance; return Invoke<UpdateSchemaResponse>(VAR_UPDATESCHEMAREQUEST, VAR_VAR); }
public PortugueseMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public SeriesChartGroupIndexRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_chartGroupIndex = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return ErrorEval.NA; }
public virtual E METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, default(E)); }
public virtual DescribeComponentConfigurationResponse METHOD_NAME(DescribeComponentConfigurationRequest VAR_DESCRIBECOMPONENTCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeComponentConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeComponentConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeComponentConfigurationResponse>(VAR_DESCRIBECOMPONENTCONFIGURATIONREQUEST, VAR_VAR); }
public CellRangeAddressList METHOD_NAME() { CellRangeAddressList VAR_CELLRANGEADDRESSLIST = new CellRangeAddressList(); int VAR_INT = _list.Count; for (int k = LITERAL_INT; k < VAR_INT; k++) { CellRangeAddress VAR_CELLRANGEADDRESS = (CellRangeAddress)_list[k]; VAR_CELLRANGEADDRESSLIST.AddCellRangeAddress(VAR_CELLRANGEADDRESS.METHOD_NAME()); } return VAR_CELLRANGEADDRESSLIST; }
public virtual DescribeClientVpnAuthorizationRulesResponse METHOD_NAME(DescribeClientVpnAuthorizationRulesRequest VAR_DESCRIBECLIENTVPNAUTHORIZATIONRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientVpnAuthorizationRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientVpnAuthorizationRulesResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnAuthorizationRulesResponse>(VAR_DESCRIBECLIENTVPNAUTHORIZATIONRULESREQUEST, VAR_VAR); }
public IConditionalFormattingRule METHOD_NAME(int VAR_INT) { CFRuleRecord VAR_CFRULERECORD = cfAggregate.METHOD_NAME(VAR_INT); return new HSSFConditionalFormattingRule(_workbook, VAR_CFRULERECORD); }
public Ref METHOD_NAME(string VAR_STRING) { return advertisedRefs.Get(VAR_STRING); }
public override int METHOD_NAME() { return type; }
public virtual DeleteCustomVerificationEmailTemplateResponse METHOD_NAME(DeleteCustomVerificationEmailTemplateRequest VAR_DELETECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCustomVerificationEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCustomVerificationEmailTemplateResponseUnmarshaller.Instance; return Invoke<DeleteCustomVerificationEmailTemplateResponse>(VAR_DELETECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { DisableRefLog(); } else { destination.METHOD_NAME(VAR_STRING, false); } }
public virtual CreateVpcEndpointConnectionNotificationResponse METHOD_NAME(CreateVpcEndpointConnectionNotificationRequest VAR_CREATEVPCENDPOINTCONNECTIONNOTIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcEndpointConnectionNotificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcEndpointConnectionNotificationResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointConnectionNotificationResponse>(VAR_CREATEVPCENDPOINTCONNECTIONNOTIFICATIONREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { int VAR_INT; if (VAR_VALUEEVAL is AreaEval) { VAR_INT = ((AreaEval)VAR_VALUEEVAL).FirstColumn; } else if (VAR_VALUEEVAL is RefEval) { VAR_INT = ((RefEval)VAR_VALUEEVAL).Column; } else { return ErrorEval.VALUE_INVALID; } return new NumberEval(VAR_INT + LITERAL_INT); }
public CompleteMultipartUploadRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _uploadId = VAR_STRING; _archiveSize = VAR_STRING; _checksum = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { Color VAR_COLOR = foreground; SetColor(background); FillRect(VAR_INT, VAR_INT, VAR_INT, VAR_INT); SetColor(VAR_COLOR); }
public string METHOD_NAME() { return fragment; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < count; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(points[i].point).Append(LITERAL_CHAR).Append(points[i].starts.count).Append(LITERAL_CHAR).Append(points[i].ends.count); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE = Math.Pow(Math.E, VAR_DOUBLE); double VAR_DOUBLE = Math.Pow(Math.E, -VAR_DOUBLE); VAR_DOUBLE = (VAR_DOUBLE - VAR_DOUBLE) / LITERAL_INT; return VAR_DOUBLE; }
public virtual GetMembersResponse METHOD_NAME(GetMembersRequest VAR_GETMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMembersResponseUnmarshaller.Instance; return Invoke<GetMembersResponse>(VAR_GETMEMBERSREQUEST, VAR_VAR); }
public IPatternFormatting METHOD_NAME() { return GetPatternFormatting(true); }
public virtual DeleteSpotDatafeedSubscriptionResponse METHOD_NAME(DeleteSpotDatafeedSubscriptionRequest VAR_DELETESPOTDATAFEEDSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSpotDatafeedSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSpotDatafeedSubscriptionResponseUnmarshaller.Instance; return Invoke<DeleteSpotDatafeedSubscriptionResponse>(VAR_DELETESPOTDATAFEEDSUBSCRIPTIONREQUEST, VAR_VAR); }
public override RevFilter METHOD_NAME() { return new NGit.Revwalk.Filter.SkipRevFilter(skip); }
public BinarySearchIndexes(int VAR_INT) { _lowIx = -LITERAL_INT; _highIx = VAR_INT; }
public override Search.Query METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { return SrndBooleanQuery.MakeBooleanQuery(MakeLuceneSubQueriesField(VAR_STRING, VAR_BASICQUERYFACTORY), Occur.SHOULD); }
public static CloneCommand METHOD_NAME() { return new CloneCommand(); }
public virtual EnableMetricsCollectionResponse METHOD_NAME(EnableMetricsCollectionRequest VAR_ENABLEMETRICSCOLLECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableMetricsCollectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableMetricsCollectionResponseUnmarshaller.Instance; return Invoke<EnableMetricsCollectionResponse>(VAR_ENABLEMETRICSCOLLECTIONREQUEST, VAR_VAR); }
public virtual DescribePlayerSessionsResponse METHOD_NAME(DescribePlayerSessionsRequest VAR_DESCRIBEPLAYERSESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePlayerSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePlayerSessionsResponseUnmarshaller.Instance; return Invoke<DescribePlayerSessionsResponse>(VAR_DESCRIBEPLAYERSESSIONSREQUEST, VAR_VAR); }
public virtual UpdateDocumentVersionResponse METHOD_NAME(UpdateDocumentVersionRequest VAR_UPDATEDOCUMENTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDocumentVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDocumentVersionResponseUnmarshaller.Instance; return Invoke<UpdateDocumentVersionResponse>(VAR_UPDATEDOCUMENTVERSIONREQUEST, VAR_VAR); }
public virtual NGit.Api.TagCommand METHOD_NAME(PersonIdent VAR_PERSONIDENT) { this.VAR_PERSONIDENT = VAR_PERSONIDENT; return this; }
public void METHOD_NAME(double VAR_DOUBLE) { if (double.IsInfinity(VAR_DOUBLE)) { SetCellErrorValue(FormulaError.DIV0.Code); } else if (double.IsNaN(VAR_DOUBLE)) { SetCellErrorValue(FormulaError.NUM.Code); } else { int VAR_INT = _record.Row; int VAR_INT = _record.Column; short VAR_SHORT = _record.XFIndex; switch (cellType) { case CellType.Numeric: ((NumberRecord)_record).Value = VAR_DOUBLE; break; case CellType.Formula: ((FormulaRecordAggregate)_record).SetCachedDoubleResult(VAR_DOUBLE); break; default: SetCellType(CellType.Numeric, false, VAR_INT, VAR_INT, VAR_SHORT); ((NumberRecord)_record).Value = VAR_DOUBLE; break; } } }
public PatternReplaceFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { pattern = GetPattern(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); replacement = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); replaceAll = LITERAL_STRING.Equals(Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, new string[] { LITERAL_STRING, LITERAL_STRING }, LITERAL_STRING), StringComparison.Ordinal); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public IList<T> METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is IList<T> outputList)) { return new JCG.List<T>(LITERAL_INT) { (T)VAR_OBJECT }; } else { return outputList; } }
public FooterKey(string VAR_STRING) { name = VAR_STRING; raw = Constants.Encode(VAR_STRING.ToLower()); }
public virtual IList<IToken> METHOD_NAME() { return tokens; }
public virtual DeleteTaskSetResponse METHOD_NAME(DeleteTaskSetRequest VAR_DELETETASKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTaskSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTaskSetResponseUnmarshaller.Instance; return Invoke<DeleteTaskSetResponse>(VAR_DELETETASKSETREQUEST, VAR_VAR); }
public virtual DescribeLifecycleConfigurationResponse METHOD_NAME(DescribeLifecycleConfigurationRequest VAR_DESCRIBELIFECYCLECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLifecycleConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLifecycleConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleConfigurationResponse>(VAR_DESCRIBELIFECYCLECONFIGURATIONREQUEST, VAR_VAR); }
public virtual DescribeNodegroupResponse METHOD_NAME(DescribeNodegroupRequest VAR_DESCRIBENODEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNodegroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNodegroupResponseUnmarshaller.Instance; return Invoke<DescribeNodegroupResponse>(VAR_DESCRIBENODEGROUPREQUEST, VAR_VAR); }
public CustomProperty() { this.name = LITERAL_NULL; }
public virtual DeleteDirectConnectGatewayResponse METHOD_NAME(DeleteDirectConnectGatewayRequest VAR_DELETEDIRECTCONNECTGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDirectConnectGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDirectConnectGatewayResponseUnmarshaller.Instance; return Invoke<DeleteDirectConnectGatewayResponse>(VAR_DELETEDIRECTCONNECTGATEWAYREQUEST, VAR_VAR); }
protected internal AddCommand(Repository VAR_REPOSITORY) : base(repo) { filepatterns = new List<string>(); }
public virtual UpdateStageResponse METHOD_NAME(UpdateStageRequest VAR_UPDATESTAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStageResponseUnmarshaller.Instance; return Invoke<UpdateStageResponse>(VAR_UPDATESTAGEREQUEST, VAR_VAR); }
public virtual ModifyIdFormatResponse METHOD_NAME(ModifyIdFormatRequest VAR_MODIFYIDFORMATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyIdFormatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyIdFormatResponseUnmarshaller.Instance; return Invoke<ModifyIdFormatResponse>(VAR_MODIFYIDFORMATREQUEST, VAR_VAR); }
public virtual RemoveRoleFromDBClusterResponse METHOD_NAME(RemoveRoleFromDBClusterRequest VAR_REMOVEROLEFROMDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveRoleFromDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveRoleFromDBClusterResponseUnmarshaller.Instance; return Invoke<RemoveRoleFromDBClusterResponse>(VAR_REMOVEROLEFROMDBCLUSTERREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT, E VAR_E) { if (VAR_INT >= LITERAL_INT && VAR_INT < _size) { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink; if (VAR_INT < (_size / LITERAL_INT)) { { for (int i = LITERAL_INT; i <= VAR_INT; i++) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } } else { { for (int i = _size; i > VAR_INT; i--) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } } E VAR_E = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data; VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data = VAR_E; return VAR_E; } throw new System.IndexOutOfRangeException(); }
public virtual ListPhoneNumbersResponse METHOD_NAME(ListPhoneNumbersRequest VAR_LISTPHONENUMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPhoneNumbersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPhoneNumbersResponseUnmarshaller.Instance; return Invoke<ListPhoneNumbersResponse>(VAR_LISTPHONENUMBERSREQUEST, VAR_VAR); }
public GermanNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public override bool METHOD_NAME(object VAR_OBJECT) { return list.METHOD_NAME(VAR_OBJECT); }
public virtual PullCommand METHOD_NAME() { return new PullCommand(repo); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual CreateIngestionResponse METHOD_NAME(CreateIngestionRequest VAR_CREATEINGESTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIngestionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIngestionResponseUnmarshaller.Instance; return Invoke<CreateIngestionResponse>(VAR_CREATEINGESTIONREQUEST, VAR_VAR); }
protected internal StashCreateCommand(Repository VAR_REPOSITORY) : base(repo) { person = new PersonIdent(VAR_REPOSITORY); }
public sealed override java.nio.ShortBuffer METHOD_NAME() { return java.nio.ShortToByteBufferAdapter.METHOD_NAME(this); }
public FeatSmartTag() { data = new byte[LITERAL_INT]; }
public virtual NGit.Api.LogCommand METHOD_NAME(int VAR_INT) { CheckCallable(); this.VAR_INT = VAR_INT; return this; }
public Ptg[] METHOD_NAME(FormulaRecord VAR_FORMULARECORD) { int VAR_INT = VAR_FORMULARECORD.Row; int VAR_INT = VAR_FORMULARECORD.Column; if (!IsInRange(VAR_INT, VAR_INT)) { throw new Exception(LITERAL_STRING); } SharedFormula VAR_SHAREDFORMULA = new SharedFormula(SpreadsheetVersion.EXCEL97); return VAR_SHAREDFORMULA.ConvertSharedFormulas(field_7_parsed_expr.Tokens, VAR_INT, VAR_INT); }
public int METHOD_NAME() { return _regionEnd; }
public virtual int METHOD_NAME() { return behindCount; }
public override void METHOD_NAME(int[] VAR_INT[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { VAR_LONG[][VAR_INT++] = METHOD_NAME(VAR_INT[], VAR_INT); VAR_INT += valueCount; } }
public virtual PutImageScanningConfigurationResponse METHOD_NAME(PutImageScanningConfigurationRequest VAR_PUTIMAGESCANNINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutImageScanningConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutImageScanningConfigurationResponseUnmarshaller.Instance; return Invoke<PutImageScanningConfigurationResponse>(VAR_PUTIMAGESCANNINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual BlameCommand METHOD_NAME() { return new BlameCommand(repo); }
public virtual BytesRef METHOD_NAME() { return new BytesRef(text.ToString()); }
public virtual int METHOD_NAME(java.nio.DoubleBuffer VAR_JAVA.NIO.DOUBLEBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.DOUBLEBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.DOUBLEBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.DOUBLEBUFFER._position; double VAR_DOUBLE; double VAR_DOUBLE; while (VAR_INT > LITERAL_INT) { VAR_DOUBLE = get(VAR_INT); VAR_DOUBLE = VAR_JAVA.NIO.DOUBLEBUFFER.get(VAR_INT); if ((VAR_DOUBLE != VAR_DOUBLE) && ((VAR_DOUBLE == VAR_DOUBLE) || (VAR_DOUBLE == VAR_DOUBLE))) { return VAR_DOUBLE < VAR_DOUBLE ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.DOUBLEBUFFER.remaining(); }
public virtual CreateIpGroupResponse METHOD_NAME(CreateIpGroupRequest VAR_CREATEIPGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIpGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIpGroupResponseUnmarshaller.Instance; return Invoke<CreateIpGroupResponse>(VAR_CREATEIPGROUPREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(int VAR_INT, E VAR_E) { lock (this) { object[] VAR_OBJECT[] = (object[])elements.Clone(); E VAR_E = (E)VAR_OBJECT[][VAR_INT]; VAR_OBJECT[][VAR_INT] = VAR_E; elements = VAR_OBJECT[]; return VAR_E; } }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public override string METHOD_NAME(int VAR_INT, int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT, VAR_INT); } }
public static TreeFilter METHOD_NAME(TreeFilter VAR_TREEFILTER, TreeFilter VAR_TREEFILTER) { if (VAR_TREEFILTER == ALL) { return VAR_TREEFILTER; } if (VAR_TREEFILTER == ALL) { return VAR_TREEFILTER; } return new AndTreeFilter.Binary(VAR_TREEFILTER, VAR_TREEFILTER); }
public static string METHOD_NAME(string VAR_STRING, string VAR_STRING) { if (VAR_STRING != LITERAL_NULL && !string.IsNullOrEmpty(VAR_STRING) && !string.IsNullOrEmpty(VAR_STRING) && !VAR_STRING.StartsWith(LITERAL_STRING)) { return LITERAL_STRING + VAR_STRING; } return VAR_STRING; }
public void METHOD_NAME() { int VAR_INT = infoOffset + P_SIZE; Arrays.Fill(info, VAR_INT, VAR_INT + LITERAL_INT, unchecked((byte)LITERAL_INT)); }
public override Object METHOD_NAME() { return new SeriesListRecord((short[])field_1_seriesNumbers.METHOD_NAME()); }
public void METHOD_NAME() { if (LITERAL_NULL == escherRecords || LITERAL_INT == escherRecords.Count) { byte[] VAR_BYTE[] = RawData; ConvertToEscherRecords(LITERAL_INT, VAR_BYTE[].Length, VAR_BYTE[]); } }
public virtual RemoveAutoScalingPolicyResponse METHOD_NAME(RemoveAutoScalingPolicyRequest VAR_REMOVEAUTOSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveAutoScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveAutoScalingPolicyResponseUnmarshaller.Instance; return Invoke<RemoveAutoScalingPolicyResponse>(VAR_REMOVEAUTOSCALINGPOLICYREQUEST, VAR_VAR); }
public override byte METHOD_NAME() { Debug.Assert(!Eof()); Debug.Assert(upto <= limit); if (upto == limit) { NextSlice(); } return (byte)buffer[upto++]; }
public virtual CreateAliasResponse METHOD_NAME(CreateAliasRequest VAR_CREATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAliasResponseUnmarshaller.Instance; return Invoke<CreateAliasResponse>(VAR_CREATEALIASREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return @in.METHOD_NAME(); }
public string METHOD_NAME() { return schemeSpecificPart; }
public virtual CreateRouteResponseResponse METHOD_NAME(CreateRouteResponseRequest VAR_CREATEROUTERESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRouteResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRouteResponseResponseUnmarshaller.Instance; return Invoke<CreateRouteResponseResponse>(VAR_CREATEROUTERESPONSEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { if (this.lastEntryReturned == LITERAL_NULL) { throw new System.InvalidOperationException(); } if (this._enclosing.modCount != this.expectedModCount) { throw new java.util.ConcurrentModificationException(); } this._enclosing.METHOD_NAME(this.lastEntryReturned.key); this.lastEntryReturned = LITERAL_NULL; this.expectedModCount = this._enclosing.modCount; }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT >= LITERAL_INT) { mValues[VAR_INT] = VAR_E; } else { VAR_INT = ~VAR_INT; if (VAR_INT < mSize && mValues[VAR_INT] == DELETED) { mKeys[VAR_INT] = VAR_INT; mValues[VAR_INT] = VAR_E; return; } if (mGarbage && mSize >= mKeys.Length) { gc(); VAR_INT = ~binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); } if (mSize >= mKeys.Length) { int VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(mSize + LITERAL_INT); int[] VAR_INT[] = new int[VAR_INT]; object[] VAR_OBJECT[] = new object[VAR_INT]; System.Array.Copy(mKeys, LITERAL_INT, VAR_INT[], LITERAL_INT, mKeys.Length); System.Array.Copy(mValues, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, mValues.Length); mKeys = VAR_INT[]; mValues = VAR_OBJECT[]; } if (mSize - VAR_INT != LITERAL_INT) { System.Array.Copy(mKeys, VAR_INT, mKeys, VAR_INT + LITERAL_INT, mSize - VAR_INT); System.Array.Copy(mValues, VAR_INT, mValues, VAR_INT + LITERAL_INT, mSize - VAR_INT); } mKeys[VAR_INT] = VAR_INT; mValues[VAR_INT] = VAR_E; mSize++; } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerCustomAction)) { return false; } } Antlr4.Runtime.Atn.LexerCustomAction VAR_ANTLR4.RUNTIME.ATN.LEXERCUSTOMACTION = (Antlr4.Runtime.Atn.LexerCustomAction)VAR_OBJECT; return ruleIndex == VAR_ANTLR4.RUNTIME.ATN.LEXERCUSTOMACTION.ruleIndex && actionIndex == VAR_ANTLR4.RUNTIME.ATN.LEXERCUSTOMACTION.actionIndex; }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { throw new System.NotSupportedException(this.GetType().Name + LITERAL_STRING); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_BYTE[].Length >= VAR_INT + VAR_INT); int VAR_INT = VAR_INT + VAR_INT; while (true) { int VAR_INT = outerInstance.blockSize - currentBlockUpto; int VAR_INT = VAR_INT - VAR_INT; if (VAR_INT < VAR_INT) { System.Buffer.BlockCopy(currentBlock, currentBlockUpto, VAR_BYTE[], VAR_INT, VAR_INT); NextBlock(); VAR_INT += VAR_INT; } else { System.Buffer.BlockCopy(currentBlock, currentBlockUpto, VAR_BYTE[], VAR_INT, VAR_INT); currentBlockUpto += VAR_INT; break; } } }
public FileResolver(FilePath VAR_FILEPATH, bool VAR_BOOL) : this() { ExportDirectory(VAR_FILEPATH); SetExportAll(VAR_BOOL); }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { lock (mutex) { list.METHOD_NAME(VAR_INT, VAR_E); } }
public string METHOD_NAME(string VAR_STRING) { reset(); java.lang.StringBuffer VAR_JAVA.LANG.STRINGBUFFER = new java.lang.StringBuffer(input.Length); if (find()) { appendReplacement(VAR_JAVA.LANG.STRINGBUFFER, VAR_STRING); } return appendTail(VAR_JAVA.LANG.STRINGBUFFER).ToString(); }
public String METHOD_NAME() { return FormatReferenceAsString(); }
public static string METHOD_NAME(string VAR_STRING, string VAR_STRING) { var VAR_VAR = VAR_STRING.LastIndexOf(VAR_STRING); if (VAR_VAR > -LITERAL_INT) { return VAR_STRING.Substring(LITERAL_INT, VAR_VAR); } return VAR_STRING; }
public virtual float METHOD_NAME(float VAR_FLOAT) { if (LITERAL_FLOAT == VAR_FLOAT) { return LITERAL_FLOAT; } float VAR_FLOAT = tf_hyper_min; float VAR_FLOAT = tf_hyper_max; double VAR_DOUBLE = tf_hyper_base; float VAR_FLOAT = tf_hyper_xoffset; double VAR_DOUBLE = (double)(VAR_FLOAT - VAR_FLOAT); float VAR_FLOAT = VAR_FLOAT + (float)((VAR_FLOAT - VAR_FLOAT) / LITERAL_FLOAT * (((Math.Pow(VAR_DOUBLE, VAR_DOUBLE) - Math.Pow(VAR_DOUBLE, -VAR_DOUBLE)) / (Math.Pow(VAR_DOUBLE, VAR_DOUBLE) + Math.Pow(VAR_DOUBLE, -VAR_DOUBLE))) + LITERAL_INT)); return float.IsNaN(VAR_FLOAT) ? VAR_FLOAT : VAR_FLOAT; }
public override void METHOD_NAME(Config VAR_CONFIG) { base.METHOD_NAME(VAR_CONFIG); sortRange = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT); r = new Random(VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT)); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], StandardSyntaxParserConstants.TokenImage); }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE) { return METHOD_NAME(VAR_CELLRANGEADDRESS[], (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE); }
public virtual void METHOD_NAME(ObjectInserter VAR_OBJECTINSERTER) { if (inserter != LITERAL_NULL) { inserter.Release(); } inserter = VAR_OBJECTINSERTER; }
public override void METHOD_NAME() { head = LITERAL_NULL; free = LITERAL_NULL; }
public void METHOD_NAME(ICharStream VAR_ICHARSTREAM, int VAR_INT) { METHOD_NAME(VAR_ICHARSTREAM); SwitchTo(VAR_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.containsMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual IList<string> METHOD_NAME() { return removedList; }
public virtual TaxonomyReader METHOD_NAME() { lock (this) { if (taxonomyReader != LITERAL_NULL) { taxonomyReader.IncRef(); } return taxonomyReader; } }
public override string METHOD_NAME(string VAR_STRING) { return query.METHOD_NAME(VAR_STRING); }
public HSSFShapeGroup METHOD_NAME(HSSFClientAnchor VAR_HSSFCLIENTANCHOR) { HSSFShapeGroup VAR_HSSFSHAPEGROUP = new HSSFShapeGroup(LITERAL_NULL, VAR_HSSFCLIENTANCHOR); AddShape(VAR_HSSFSHAPEGROUP); OnCreate(VAR_HSSFSHAPEGROUP); return VAR_HSSFSHAPEGROUP; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetText()).Append(LITERAL_CHAR).Append(Number.METHOD_NAME(boost)).Append(LITERAL_STRING); foreach (Toffs to in termsOffsets) { VAR_STRINGBUILDER.Append(to); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public ClassicFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual UpdateApplicationResponse METHOD_NAME(UpdateApplicationRequest VAR_UPDATEAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApplicationResponseUnmarshaller.Instance; return Invoke<UpdateApplicationResponse>(VAR_UPDATEAPPLICATIONREQUEST, VAR_VAR); }
public override PackParser METHOD_NAME(InputStream VAR_INPUTSTREAM) { throw new NotSupportedException(); }
public virtual void METHOD_NAME(bool VAR_BOOL) { METHOD_NAME(VAR_BOOL.ToString()); }
public int METHOD_NAME() { return (top + bottom) >> LITERAL_INT; }
public override ConstantScoreQuery METHOD_NAME(SpatialArgs VAR_SPATIALARGS) { if (!SpatialOperation.Is(VAR_SPATIALARGS.Operation, SpatialOperation.Intersects, SpatialOperation.IsWithin)) { throw new UnsupportedSpatialOperation(VAR_SPATIALARGS.Operation); } IShape VAR_ISHAPE = VAR_SPATIALARGS.Shape; if (VAR_ISHAPE is IRectangle) { var VAR_VAR = (IRectangle)VAR_ISHAPE; return new ConstantScoreQuery(MakeWithin(VAR_VAR)); } else if (VAR_ISHAPE is ICircle) { var VAR_VAR = (ICircle)VAR_ISHAPE; var VAR_VAR = VAR_VAR.BoundingBox; var VAR_VAR = new ValueSourceFilter(new QueryWrapperFilter(MakeWithin(VAR_VAR)), MakeDistanceValueSource(VAR_VAR.Center), LITERAL_INT, VAR_VAR.Radius); return new ConstantScoreQuery(VAR_VAR); } throw new NotSupportedException(LITERAL_STRING + LITERAL_STRING + VAR_ISHAPE.GetType().Name + LITERAL_STRING); }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public virtual GetManagedScalingPolicyResponse METHOD_NAME(GetManagedScalingPolicyRequest VAR_GETMANAGEDSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetManagedScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetManagedScalingPolicyResponseUnmarshaller.Instance; return Invoke<GetManagedScalingPolicyResponse>(VAR_GETMANAGEDSCALINGPOLICYREQUEST, VAR_VAR); }
public virtual ListApplicationsResponse METHOD_NAME() { return METHOD_NAME(new ListApplicationsRequest()); }
public virtual string METHOD_NAME() { return s; }
public static String METHOD_NAME(short VAR_SHORT) { return (String)builtinFormats[VAR_SHORT]; }
public virtual void METHOD_NAME(PerfTask VAR_PERFTASK) { tasks.Add(VAR_PERFTASK); VAR_PERFTASK.Depth = Depth + LITERAL_INT; }
public virtual GetQueueUrlResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new GetQueueUrlRequest(); VAR_VAR.QueueName = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE = VAR_DOUBLE * VAR_DOUBLE; return Math.Log(Math.Sqrt(VAR_DOUBLE * VAR_DOUBLE + LITERAL_INT) + VAR_DOUBLE); }
public virtual DescribeActivityTypeResponse METHOD_NAME(DescribeActivityTypeRequest VAR_DESCRIBEACTIVITYTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeActivityTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeActivityTypeResponseUnmarshaller.Instance; return Invoke<DescribeActivityTypeResponse>(VAR_DESCRIBEACTIVITYTYPEREQUEST, VAR_VAR); }
public virtual RegisterTransitGatewayMulticastGroupSourcesResponse METHOD_NAME(RegisterTransitGatewayMulticastGroupSourcesRequest VAR_REGISTERTRANSITGATEWAYMULTICASTGROUPSOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterTransitGatewayMulticastGroupSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupSourcesResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupSourcesResponse>(VAR_REGISTERTRANSITGATEWAYMULTICASTGROUPSOURCESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { mPullDistance = LITERAL_INT; if (mState != STATE_PULL && mState != STATE_PULL_DECAY) { return; } mState = STATE_RECEDE; mEdgeAlphaStart = mEdgeAlpha; mEdgeScaleYStart = mEdgeScaleY; mGlowAlphaStart = mGlowAlpha; mGlowScaleYStart = mGlowScaleY; mEdgeAlphaFinish = LITERAL_FLOAT; mEdgeScaleYFinish = LITERAL_FLOAT; mGlowAlphaFinish = LITERAL_FLOAT; mGlowScaleYFinish = LITERAL_FLOAT; mStartTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis(); mDuration = RECEDE_TIME; }
public virtual ImportKeyPairResponse METHOD_NAME(ImportKeyPairRequest VAR_IMPORTKEYPAIRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportKeyPairRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportKeyPairResponseUnmarshaller.Instance; return Invoke<ImportKeyPairResponse>(VAR_IMPORTKEYPAIRREQUEST, VAR_VAR); }
public override void METHOD_NAME() { base.METHOD_NAME(); }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].timeInPrediction; } return VAR_LONG; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HungarianLightStemFilter(VAR_TOKENSTREAM); }
public virtual string METHOD_NAME() { return desc; }
public virtual DeleteAlgorithmResponse METHOD_NAME(DeleteAlgorithmRequest VAR_DELETEALGORITHMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAlgorithmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAlgorithmResponseUnmarshaller.Instance; return Invoke<DeleteAlgorithmResponse>(VAR_DELETEALGORITHMREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { this.m_prefix = VAR_STRING; }
public override ICollection<ChildScorer> METHOD_NAME() { return new List<ChildScorer> { new ChildScorer(_childScorer, LITERAL_STRING) }; }
public virtual void METHOD_NAME() { this._enclosing.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED); }
public Azure.Storage.Files.Shares.Models.FileProperty Properties { get; internal set; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { try { return new OpenNLPPOSFilter(VAR_TOKENSTREAM, OpenNLPOpsFactory.GetPOSTagger(posTaggerModelFile)); } catch (IOException e) { throw new ArgumentException(e.ToString(), e); } }
public virtual SendBulkTemplatedEmailResponse METHOD_NAME(SendBulkTemplatedEmailRequest VAR_SENDBULKTEMPLATEDEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendBulkTemplatedEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendBulkTemplatedEmailResponseUnmarshaller.Instance; return Invoke<SendBulkTemplatedEmailResponse>(VAR_SENDBULKTEMPLATEDEMAILREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(float VAR_FLOAT) { return putInt(Sharpen.Util.FloatToRawIntBits(VAR_FLOAT)); }
public TotalTermFreqValueSource(string VAR_STRING, string VAR_STRING, string VAR_STRING, BytesRef VAR_BYTESREF) { this.m_field = VAR_STRING; this.m_val = VAR_STRING; this.m_indexedField = VAR_STRING; this.m_indexedBytes = VAR_BYTESREF; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_BYTE[].Length; while (VAR_INT < VAR_INT) { if (VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { return -LITERAL_INT; } if (VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { break; } VAR_INT = NextLF(VAR_BYTE[], VAR_INT); } return Match(VAR_BYTE[], VAR_INT, ObjectChecker.encoding); }
public void METHOD_NAME(ByteBlockPool VAR_BYTEBLOCKPOOL, int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT - VAR_INT >= LITERAL_INT); Debug.Assert(VAR_INT >= LITERAL_INT); Debug.Assert(VAR_INT >= LITERAL_INT); this.VAR_BYTEBLOCKPOOL = VAR_BYTEBLOCKPOOL; this.EndIndex = VAR_INT; level = LITERAL_INT; bufferUpto = VAR_INT / ByteBlockPool.BYTE_BLOCK_SIZE; BufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE; buffer = VAR_BYTEBLOCKPOOL.Buffers[bufferUpto]; upto = VAR_INT & ByteBlockPool.BYTE_BLOCK_MASK; int VAR_INT = ByteBlockPool.LEVEL_SIZE_ARRAY[LITERAL_INT]; if (VAR_INT + VAR_INT >= VAR_INT) { limit = VAR_INT & ByteBlockPool.BYTE_BLOCK_MASK; } else { limit = upto + VAR_INT - LITERAL_INT; } }
public MergeCellsRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); CellRangeAddress[] VAR_CELLRANGEADDRESS[] = new CellRangeAddress[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_CELLRANGEADDRESS[][i] = new CellRangeAddress(VAR_RECORDINPUTSTREAM); } _numberOfRegions = VAR_INT; _startIndex = LITERAL_INT; _regions = VAR_CELLRANGEADDRESS[]; }
public virtual IList<FileHeader> METHOD_NAME() { return files; }
public sealed override long METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public virtual DescribeClusterTracksResponse METHOD_NAME(DescribeClusterTracksRequest VAR_DESCRIBECLUSTERTRACKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterTracksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterTracksResponseUnmarshaller.Instance; return Invoke<DescribeClusterTracksResponse>(VAR_DESCRIBECLUSTERTRACKSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (sheetName != LITERAL_NULL) { SheetNameFormatter.AppendFormat(VAR_STRINGBUILDER, sheetName); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ErrorConstants.GetText(ErrorConstants.ERROR_REF)); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(Ptg[] VAR_PTG[]) { field_8_parsed_expr = NPOI.SS.Formula.Formula.Create(VAR_PTG[]); }
public virtual ListActivityTypesResponse METHOD_NAME(ListActivityTypesRequest VAR_LISTACTIVITYTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListActivityTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListActivityTypesResponseUnmarshaller.Instance; return Invoke<ListActivityTypesResponse>(VAR_LISTACTIVITYTYPESREQUEST, VAR_VAR); }
public virtual DescribeDBSecurityGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBSecurityGroupsRequest()); }
public virtual ICollection METHOD_NAME() { return matchingGroups; }
public void METHOD_NAME(bool VAR_BOOL) { specialCachedValue = SpecialCachedValue.CreateCachedBoolean(VAR_BOOL); }
public static bool METHOD_NAME(Ptg[] VAR_PTG[]) { for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { if (IsDeletedCellRef(VAR_PTG[][i])) { return true; } } return false; }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public override void METHOD_NAME() { head = LITERAL_NULL; tail = LITERAL_NULL; free.METHOD_NAME(); }
public virtual DeleteIPSetResponse METHOD_NAME(DeleteIPSetRequest VAR_DELETEIPSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIPSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIPSetResponseUnmarshaller.Instance; return Invoke<DeleteIPSetResponse>(VAR_DELETEIPSETREQUEST, VAR_VAR); }
public StaticCredentialsProvider(AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS) { this.VAR_ALIBABACLOUDCREDENTIALS = VAR_ALIBABACLOUDCREDENTIALS; }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_DOUBLE[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); double[] VAR_DOUBLE[] = new double[VAR_INT]; System.Array.Copy(VAR_DOUBLE[], VAR_INT, VAR_DOUBLE[], LITERAL_INT, VAR_INT); return VAR_DOUBLE[]; }
public virtual DescribeEntityRecognizerResponse METHOD_NAME(DescribeEntityRecognizerRequest VAR_DESCRIBEENTITYRECOGNIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEntityRecognizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEntityRecognizerResponseUnmarshaller.Instance; return Invoke<DescribeEntityRecognizerResponse>(VAR_DESCRIBEENTITYRECOGNIZERREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_TITLE); }
public virtual GetDigestResponse METHOD_NAME(GetDigestRequest VAR_GETDIGESTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDigestRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDigestResponseUnmarshaller.Instance; return Invoke<GetDigestResponse>(VAR_GETDIGESTREQUEST, VAR_VAR); }
public virtual CreateStackResponse METHOD_NAME(CreateStackRequest VAR_CREATESTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStackResponseUnmarshaller.Instance; return Invoke<CreateStackResponse>(VAR_CREATESTACKREQUEST, VAR_VAR); }
public bool METHOD_NAME(Ptg[] VAR_PTG[], int VAR_INT) { bool VAR_BOOL = false; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { Ptg VAR_PTG = AdjustPtg(VAR_PTG[][i], VAR_INT); if (VAR_PTG != LITERAL_NULL) { VAR_BOOL = true; VAR_PTG[][i] = VAR_PTG; } } return VAR_BOOL; }
public virtual void METHOD_NAME(object VAR_OBJECT) { METHOD_NAME(Sharpen.StringHelper.GetValueOf(VAR_OBJECT)); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); useAddIndexesDir = bool.Parse(VAR_STRING); }
public void METHOD_NAME()throws IOException { if (isOpen && !isClone ) { try {channel.METHOD_NAME() ; } finally { if (!isClone) { fis.METHOD_NAME(); } } } }
public void METHOD_NAME() { count = LITERAL_INT; Debug.Assert(forwardCount == LITERAL_INT, LITERAL_STRING + pos + LITERAL_STRING + forwardCount); }
public void METHOD_NAME() { for (int i = LITERAL_INT; i < _numberOfFormulas; i++) { _frAggs[i].UnlinkSharedFormula(); } }
public override bool METHOD_NAME(BytesRef VAR_BYTESREF, TermStats VAR_TERMSTATS) { if (VAR_TERMSTATS.DocFreq >= docFreqThresh || count >= interval) { count = LITERAL_INT; return true; } else { count++; return false; } }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_HEADINGPAIR); }
public virtual string[] METHOD_NAME(string[] VAR_STRING[]) { lock (this) { return tagger.tag(VAR_STRING[]); } }
public override TermsEnum METHOD_NAME(CompiledAutomaton VAR_COMPILEDAUTOMATON, BytesRef VAR_BYTESREF) { if (VAR_COMPILEDAUTOMATON.Type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) { throw new System.ArgumentException(LITERAL_STRING); } return new IntersectEnum(this, VAR_COMPILEDAUTOMATON, VAR_BYTESREF); }
public virtual AttachLoadBalancerToSubnetsResponse METHOD_NAME(AttachLoadBalancerToSubnetsRequest VAR_ATTACHLOADBALANCERTOSUBNETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachLoadBalancerToSubnetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachLoadBalancerToSubnetsResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancerToSubnetsResponse>(VAR_ATTACHLOADBALANCERTOSUBNETSREQUEST, VAR_VAR); }
public PrecedenceQueryParser() { SetQueryNodeProcessor(new PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler)); }
public CommonToken(int VAR_INT) { this._type = VAR_INT; this.source = EmptySource; }
public virtual DeleteEmailChannelResponse METHOD_NAME(DeleteEmailChannelRequest VAR_DELETEEMAILCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEmailChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEmailChannelResponseUnmarshaller.Instance; return Invoke<DeleteEmailChannelResponse>(VAR_DELETEEMAILCHANNELREQUEST, VAR_VAR); }
public virtual DeleteNotificationSubscriptionResponse METHOD_NAME(DeleteNotificationSubscriptionRequest VAR_DELETENOTIFICATIONSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNotificationSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNotificationSubscriptionResponseUnmarshaller.Instance; return Invoke<DeleteNotificationSubscriptionResponse>(VAR_DELETENOTIFICATIONSUBSCRIPTIONREQUEST, VAR_VAR); }
public override void METHOD_NAME() { lock (@lock) { if (isClosed()) { return; } System.Exception VAR_SYSTEM.EXCEPTION = LITERAL_NULL; try { flushInternal(); } catch (System.Exception e) { VAR_SYSTEM.EXCEPTION = e; } buf = LITERAL_NULL; try { @out.METHOD_NAME(); } catch (System.Exception e) { if (VAR_SYSTEM.EXCEPTION == LITERAL_NULL) { VAR_SYSTEM.EXCEPTION = e; } } @out = LITERAL_NULL; if (VAR_SYSTEM.EXCEPTION != LITERAL_NULL) { Sharpen.Util.Throw(VAR_SYSTEM.EXCEPTION); } } }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(m_match.METHOD_NAME(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_start).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(m_end); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListPipelinesResponse METHOD_NAME(ListPipelinesRequest VAR_LISTPIPELINESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPipelinesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPipelinesResponseUnmarshaller.Instance; return Invoke<ListPipelinesResponse>(VAR_LISTPIPELINESREQUEST, VAR_VAR); }
public virtual ConfirmProductInstanceResponse METHOD_NAME(ConfirmProductInstanceRequest VAR_CONFIRMPRODUCTINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfirmProductInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfirmProductInstanceResponseUnmarshaller.Instance; return Invoke<ConfirmProductInstanceResponse>(VAR_CONFIRMPRODUCTINSTANCEREQUEST, VAR_VAR); }
public virtual CreateProjectResponse METHOD_NAME(CreateProjectRequest VAR_CREATEPROJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProjectResponseUnmarshaller.Instance; return Invoke<CreateProjectResponse>(VAR_CREATEPROJECTREQUEST, VAR_VAR); }
public ListMomentsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual string METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > AbstractDictionary.GB2312_CHAR_NUM) return LITERAL_STRING; int VAR_INT = VAR_INT / LITERAL_INT + LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT + LITERAL_INT; byte[] VAR_BYTE[] = new byte[LITERAL_INT]; VAR_BYTE[][LITERAL_INT] = (byte)VAR_INT; VAR_BYTE[][LITERAL_INT] = (byte)VAR_INT; try { string VAR_STRING = Encoding.GetEncoding(LITERAL_STRING).GetString(VAR_BYTE[]); return VAR_STRING; } catch (ArgumentException) { return LITERAL_STRING; } }
public static RevFilter METHOD_NAME(RevFilter VAR_REVFILTER, RevFilter VAR_REVFILTER) { if (VAR_REVFILTER == ALL || VAR_REVFILTER == ALL) { return ALL; } return new OrRevFilter.Binary(VAR_REVFILTER, VAR_REVFILTER); }
public UpdateTableRequest(string VAR_STRING, ProvisionedThroughput VAR_PROVISIONEDTHROUGHPUT) { _tableName = VAR_STRING; _provisionedThroughput = VAR_PROVISIONEDTHROUGHPUT; }
public virtual Repository METHOD_NAME() { return db; }
public override java.nio.ShortBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public virtual CreateInstanceExportTaskResponse METHOD_NAME(CreateInstanceExportTaskRequest VAR_CREATEINSTANCEEXPORTTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInstanceExportTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInstanceExportTaskResponseUnmarshaller.Instance; return Invoke<CreateInstanceExportTaskResponse>(VAR_CREATEINSTANCEEXPORTTASKREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME(Subs) + LITERAL_STRING; }
public virtual DescribeStacksResponse METHOD_NAME(DescribeStacksRequest VAR_DESCRIBESTACKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStacksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStacksResponseUnmarshaller.Instance; return Invoke<DescribeStacksResponse>(VAR_DESCRIBESTACKSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_xf_index); if (IsBuiltin) { VAR_ILITTLEENDIANOUTPUT.WriteByte(field_2_builtin_style); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_outline_style_level); } else { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_name.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_stringHasMultibyte ? LITERAL_INT : LITERAL_INT); if (field_3_stringHasMultibyte) { StringUtil.PutUnicodeLE(Name, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(Name, VAR_ILITTLEENDIANOUTPUT); } } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { deflater.SetInput(VAR_BYTE[], VAR_INT, VAR_INT); for (;;) { if (outPtr == zbuf.Length) { throw new EOFException(); } int VAR_INT = deflater.Deflate(zbuf, outPtr, zbuf.Length - outPtr); if (VAR_INT == LITERAL_INT) { if (deflater.IsNeedingInput) { break; } throw new IOException(); } outPtr += VAR_INT; } }
public override String METHOD_NAME() { return LITERAL_STRING; }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { return METHOD_NAME(VAR_INT, System.Convert.ToString(VAR_DOUBLE)); }
public override FieldWriter METHOD_NAME(FieldInfo VAR_FIELDINFO, long VAR_LONG) { SimpleFieldWriter VAR_SIMPLEFIELDWRITER = new SimpleFieldWriter(this, VAR_FIELDINFO, VAR_LONG); fields.Add(VAR_SIMPLEFIELDWRITER); return VAR_SIMPLEFIELDWRITER; }
public virtual DeleteUserEndpointsResponse METHOD_NAME(DeleteUserEndpointsRequest VAR_DELETEUSERENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUserEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUserEndpointsResponseUnmarshaller.Instance; return Invoke<DeleteUserEndpointsResponse>(VAR_DELETEUSERENDPOINTSREQUEST, VAR_VAR); }
public HSSFColor METHOD_NAME(byte VAR_BYTE, byte VAR_BYTE, byte VAR_BYTE) { byte[] VAR_BYTE[] = palette.GetColor(PaletteRecord.FIRST_COLOR_INDEX); short VAR_SHORT; for (VAR_SHORT = (short)PaletteRecord.FIRST_COLOR_INDEX; VAR_SHORT < PaletteRecord.STANDARD_PALETTE_SIZE + PaletteRecord.FIRST_COLOR_INDEX; VAR_BYTE[] = palette.GetColor(++VAR_SHORT)) { if (VAR_BYTE[] == LITERAL_NULL) { SetColorAtIndex(VAR_SHORT, VAR_BYTE, VAR_BYTE, VAR_BYTE); return GetColor(VAR_SHORT); } } throw new Exception(LITERAL_STRING); }
public virtual bool METHOD_NAME() { return renameDetectionType != DiffConfig.RenameDetectionType.FALSE; }
public static bool METHOD_NAME(string VAR_STRING) { for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; switch (VAR_CHAR) { case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: { return false; } } } return true; }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT || VAR_INT < LITERAL_INT) throw new TokenMgrError(LITERAL_STRING + VAR_INT + LITERAL_STRING, TokenMgrError.INVALID_LEXICAL_STATE); elsecurLexState = VAR_INT; }
public virtual CreateDeliverabilityTestReportResponse METHOD_NAME(CreateDeliverabilityTestReportRequest VAR_CREATEDELIVERABILITYTESTREPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeliverabilityTestReportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeliverabilityTestReportResponseUnmarshaller.Instance; return Invoke<CreateDeliverabilityTestReportResponse>(VAR_CREATEDELIVERABILITYTESTREPORTREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatAsString); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual string METHOD_NAME() { return remoteName; }
public virtual CherryPickCommand METHOD_NAME() { return new CherryPickCommand(repo); }
public NPOI.SS.UserModel.IClientAnchor METHOD_NAME() { return new HSSFClientAnchor(); }
public virtual DeleteProfileResponse METHOD_NAME(DeleteProfileRequest VAR_DELETEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteProfileResponseUnmarshaller.Instance; return Invoke<DeleteProfileResponse>(VAR_DELETEPROFILEREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return java.util.TreeMap<K, V>.count(this.entrySet().iterator()); }
public override java.nio.ByteBuffer METHOD_NAME(java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER) { throw new System.NotImplementedException(); }
public virtual NGit.Api.CreateBranchCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; this.startCommit = LITERAL_NULL; return this; }
public virtual ListOnPremisesInstancesResponse METHOD_NAME(ListOnPremisesInstancesRequest VAR_LISTONPREMISESINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOnPremisesInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOnPremisesInstancesResponseUnmarshaller.Instance; return Invoke<ListOnPremisesInstancesResponse>(VAR_LISTONPREMISESINSTANCESREQUEST, VAR_VAR); }
public override int[] METHOD_NAME() { if (perField.postingsArray != LITERAL_NULL) { bytesUsed.AddAndGet(-(perField.postingsArray.size * perField.postingsArray.BytesPerPosting())); perField.postingsArray = LITERAL_NULL; } return LITERAL_NULL; }
public virtual string METHOD_NAME() { return currentSource.sourcePath.GetPath(); }
public static PredictionContext METHOD_NAME(PredictionContext VAR_PREDICTIONCONTEXT, int VAR_INT) { if (VAR_INT == EMPTY_RETURN_STATE && VAR_PREDICTIONCONTEXT == LITERAL_NULL) { return PredictionContext.EMPTY; } return new SingletonPredictionContext(VAR_PREDICTIONCONTEXT, VAR_INT); }
public virtual void METHOD_NAME(string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) throw new ArgumentException(LITERAL_STRING, LITERAL_STRING); string VAR_STRING = Path.Combine(workingDirectory, VAR_STRING); System.IO.Directory.Delete(VAR_STRING, true); }
public virtual DescribeSnapshotCopyGrantsResponse METHOD_NAME(DescribeSnapshotCopyGrantsRequest VAR_DESCRIBESNAPSHOTCOPYGRANTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSnapshotCopyGrantsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSnapshotCopyGrantsResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotCopyGrantsResponse>(VAR_DESCRIBESNAPSHOTCOPYGRANTSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return Utils.Join(LITERAL_STRING, opnds); }
public virtual DescribeApplicationResponse METHOD_NAME(DescribeApplicationRequest VAR_DESCRIBEAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeApplicationResponseUnmarshaller.Instance; return Invoke<DescribeApplicationResponse>(VAR_DESCRIBEAPPLICATIONREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT, E VAR_E) { object[] VAR_OBJECT[] = array; if (VAR_INT >= _size) { throwIndexOutOfBoundsException(VAR_INT, _size); } E VAR_E = (E)VAR_OBJECT[][VAR_INT]; VAR_OBJECT[][VAR_INT] = VAR_E; return VAR_E; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public BatchSendMessagesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual DeleteEgressOnlyInternetGatewayResponse METHOD_NAME(DeleteEgressOnlyInternetGatewayRequest VAR_DELETEEGRESSONLYINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEgressOnlyInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEgressOnlyInternetGatewayResponseUnmarshaller.Instance; return Invoke<DeleteEgressOnlyInternetGatewayResponse>(VAR_DELETEEGRESSONLYINTERNETGATEWAYREQUEST, VAR_VAR); }
public static char[] METHOD_NAME(int VAR_INT) { return ToHexChars(VAR_INT, LITERAL_INT); }
public virtual DescribeLoadBalancerPoliciesResponse METHOD_NAME(DescribeLoadBalancerPoliciesRequest VAR_DESCRIBELOADBALANCERPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoadBalancerPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoadBalancerPoliciesResponseUnmarshaller.Instance; return Invoke<DescribeLoadBalancerPoliciesResponse>(VAR_DESCRIBELOADBALANCERPOLICIESREQUEST, VAR_VAR); }
public override void METHOD_NAME() { try { BeginWrite(); dst.METHOD_NAME(); } catch (ThreadInterruptedException) { throw WriteTimedOut(); } finally { EndWrite(); } }
public virtual UpdateVirtualInterfaceAttributesResponse METHOD_NAME(UpdateVirtualInterfaceAttributesRequest VAR_UPDATEVIRTUALINTERFACEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVirtualInterfaceAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVirtualInterfaceAttributesResponseUnmarshaller.Instance; return Invoke<UpdateVirtualInterfaceAttributesResponse>(VAR_UPDATEVIRTUALINTERFACEATTRIBUTESREQUEST, VAR_VAR); }
public ScandinavianNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { charTermAttribute = AddAttribute<ICharTermAttribute>(); }
public virtual DeleteHumanLoopResponse METHOD_NAME(DeleteHumanLoopRequest VAR_DELETEHUMANLOOPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteHumanLoopRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteHumanLoopResponseUnmarshaller.Instance; return Invoke<DeleteHumanLoopResponse>(VAR_DELETEHUMANLOOPREQUEST, VAR_VAR); }
public override void METHOD_NAME(bool VAR_BOOL) { base.METHOD_NAME(VAR_BOOL); if (!VAR_BOOL && !mPopup.isDropDownAlwaysVisible()) { dismissDropDown(); } }
public virtual GetApnsSandboxChannelResponse METHOD_NAME(GetApnsSandboxChannelRequest VAR_GETAPNSSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApnsSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApnsSandboxChannelResponseUnmarshaller.Instance; return Invoke<GetApnsSandboxChannelResponse>(VAR_GETAPNSSANDBOXCHANNELREQUEST, VAR_VAR); }
public override TreeFilter METHOD_NAME() { TreeFilter VAR_TREEFILTER = a.METHOD_NAME(); return VAR_TREEFILTER == a ? this : new NGit.Treewalk.Filter.NotTreeFilter(VAR_TREEFILTER); }
public virtual void METHOD_NAME(string VAR_STRING, IQueryBuilder VAR_IQUERYBUILDER) { builders[VAR_STRING] = VAR_IQUERYBUILDER; }
public static bool METHOD_NAME(int VAR_INT) { return Array.BinarySearch(SUPPORTED_BITS_PER_VALUE, VAR_INT) >= LITERAL_INT; }
public virtual V METHOD_NAME() { return mapEntry.METHOD_NAME(); }
public DeletedArea3DPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_index_extern_sheet = VAR_ILITTLEENDIANINPUT.ReadUShort(); unused1 = VAR_ILITTLEENDIANINPUT.ReadInt(); unused2 = VAR_ILITTLEENDIANINPUT.ReadInt(); }
public override string METHOD_NAME() { return $"{nameof(NativeFSLock)}@{path}"; }
public virtual CreateVolumeResponse METHOD_NAME(CreateVolumeRequest VAR_CREATEVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVolumeResponseUnmarshaller.Instance; return Invoke<CreateVolumeResponse>(VAR_CREATEVOLUMEREQUEST, VAR_VAR); }
public IEvaluationCell METHOD_NAME(int VAR_INT, int VAR_INT) { HSSFRow VAR_HSSFROW = (HSSFRow)_hs.GetRow(VAR_INT); if (VAR_HSSFROW == LITERAL_NULL) { return LITERAL_NULL; } ICell VAR_ICELL = (HSSFCell)VAR_HSSFROW.METHOD_NAME(VAR_INT); if (VAR_ICELL == LITERAL_NULL) { return LITERAL_NULL; } return new HSSFEvaluationCell(VAR_ICELL, this); }
public virtual DeleteBasePathMappingResponse METHOD_NAME(DeleteBasePathMappingRequest VAR_DELETEBASEPATHMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBasePathMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBasePathMappingResponseUnmarshaller.Instance; return Invoke<DeleteBasePathMappingResponse>(VAR_DELETEBASEPATHMAPPINGREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ATNState VAR_ATNSTATE) { states[VAR_ATNSTATE.stateNumber] = LITERAL_NULL; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.ShortBuffer)) { return false; } java.nio.ShortBuffer VAR_JAVA.NIO.SHORTBUFFER = (java.nio.ShortBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.SHORTBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.SHORTBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { VAR_BOOL = get(VAR_INT++) == VAR_JAVA.NIO.SHORTBUFFER.get(VAR_INT++); } return VAR_BOOL; }
if (VAR_OBJECT == LITERAL_NULL || !(VAR_OBJECT is PropertySet)) return false; PropertySet VAR_PROPERTYSET = (PropertySet)VAR_OBJECT; int VAR_INT = VAR_PROPERTYSET.ByteOrder; int VAR_INT = ByteOrder; ClassID VAR_CLASSID = VAR_PROPERTYSET.ClassID; ClassID VAR_CLASSID = ClassID; int VAR_INT = VAR_PROPERTYSET.Format; int VAR_INT = Format; int VAR_INT = VAR_PROPERTYSET.OSVersion; int VAR_INT = OSVersion; int VAR_INT = VAR_PROPERTYSET.SectionCount; int VAR_INT = SectionCount; if (VAR_INT != VAR_INT || !VAR_CLASSID.METHOD_NAME(VAR_CLASSID) || VAR_INT != VAR_INT || VAR_INT != VAR_INT || VAR_INT != VAR_INT) return false; return Util.AreEqual(Sections, VAR_PROPERTYSET.Sections);
public static int METHOD_NAME(int VAR_INT, int VAR_INT) { double VAR_DOUBLE = VAR_INT; double VAR_DOUBLE = VAR_INT; var VAR_VAR = VAR_DOUBLE / VAR_DOUBLE; var VAR_VAR = Math.Log(LITERAL_INT - VAR_VAR) * -LITERAL_INT; return (int)(VAR_DOUBLE * VAR_VAR); }
public static bool METHOD_NAME(FilePath VAR_FILEPATH, FS VAR_FS) { return VAR_FS.Resolve(VAR_FILEPATH, LITERAL_STRING).Exists() && VAR_FS.Resolve(VAR_FILEPATH, LITERAL_STRING).Exists() && IsValidHead(new FilePath(VAR_FILEPATH, Constants.HEAD)); }
public void METHOD_NAME(int VAR_INT) { SetPropertyValue(new EscherSimpleProperty(EscherProperties.FILL__PATTERNTEXTURE, false, true, VAR_INT)); SetPropertyValue(new EscherSimpleProperty(EscherProperties.FILL__FILLTYPE, false, false, FILL_TYPE_PICTURE)); EscherBSERecord VAR_ESCHERBSERECORD = ((HSSFWorkbook)((HSSFPatriarch)Patriarch).Sheet.Workbook).Workbook.GetBSERecord(VAR_INT); VAR_ESCHERBSERECORD.Ref = (VAR_ESCHERBSERECORD.Ref + LITERAL_INT); }
public DirectPostingsFormat(int VAR_INT, int VAR_INT) : base() { _minSkipCount = VAR_INT; _lowFreqCutoff = VAR_INT; }
public RecyclingByteBlockAllocator(int VAR_INT, int VAR_INT, Counter VAR_COUNTER) : base(blockSize) { freeByteBlocks = new byte[VAR_INT][]; this.VAR_INT = VAR_INT; this.VAR_COUNTER = VAR_COUNTER; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { for (int i = LITERAL_INT; i < prefixes.Length; i++) { if (StartsWithCheckLength(VAR_CHAR[], VAR_INT, prefixes[i])) { return StemmerUtil.DeleteN(VAR_CHAR[], LITERAL_INT, VAR_INT, prefixes[i].Length); } } return VAR_INT; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (DateRevQueue.Entry q = head; q != LITERAL_NULL; q = q.next) { Describe(VAR_STRINGBUILDER, q.commit); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual java.nio.charset.CodingErrorAction METHOD_NAME() { return _malformedInputAction; }
public Result(Int32sRef VAR_INT32SREF, T VAR_T) { this.Input = VAR_INT32SREF; this.Output = VAR_T; }
public string METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_COMMENTS); }
public virtual GetBlacklistReportsResponse METHOD_NAME(GetBlacklistReportsRequest VAR_GETBLACKLISTREPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBlacklistReportsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBlacklistReportsResponseUnmarshaller.Instance; return Invoke<GetBlacklistReportsResponse>(VAR_GETBLACKLISTREPORTSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return messageWriter != LITERAL_NULL ? messageWriter.ToString() : string.Empty; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.text.StringCharacterIterator)) { return false; } java.text.StringCharacterIterator VAR_JAVA.TEXT.STRINGCHARACTERITERATOR = (java.text.StringCharacterIterator)VAR_OBJECT; return @string.METHOD_NAME(VAR_JAVA.TEXT.STRINGCHARACTERITERATOR.@string) && start == VAR_JAVA.TEXT.STRINGCHARACTERITERATOR.start && end == VAR_JAVA.TEXT.STRINGCHARACTERITERATOR.end && offset == VAR_JAVA.TEXT.STRINGCHARACTERITERATOR.offset; }
public virtual AddFacetToObjectResponse METHOD_NAME(AddFacetToObjectRequest VAR_ADDFACETTOOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddFacetToObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddFacetToObjectResponseUnmarshaller.Instance; return Invoke<AddFacetToObjectResponse>(VAR_ADDFACETTOOBJECTREQUEST, VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public int METHOD_NAME(int VAR_INT) { int VAR_INT = Correct(VAR_INT); return (m_input is CharFilter) ? ((CharFilter)m_input).METHOD_NAME(VAR_INT) : VAR_INT; }
public static ContinuableRecordOutput METHOD_NAME() { return new ContinuableRecordOutput(NOPOutput, -LITERAL_INT); }
public DisassociateAddressRequest(string VAR_STRING) { _publicIp = VAR_STRING; }
public virtual DescribeVirtualGatewaysResponse METHOD_NAME(DescribeVirtualGatewaysRequest VAR_DESCRIBEVIRTUALGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVirtualGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVirtualGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeVirtualGatewaysResponse>(VAR_DESCRIBEVIRTUALGATEWAYSREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, bool VAR_BOOL) { BoundSheetRecord VAR_BOUNDSHEETRECORD = boundsheets[VAR_INT]; VAR_BOUNDSHEETRECORD.IsHidden = VAR_BOOL; }
public static ICell METHOD_NAME(IRow VAR_IROW, int VAR_INT, String VAR_STRING, ICellStyle VAR_ICELLSTYLE) { ICell VAR_ICELL = GetCell(VAR_IROW, VAR_INT); VAR_ICELL.SetCellValue(VAR_ICELL.Row.Sheet.Workbook.GetCreationHelper().CreateRichTextString(VAR_STRING)); if (VAR_ICELLSTYLE != LITERAL_NULL) { VAR_ICELL.CellStyle = VAR_ICELLSTYLE; } return VAR_ICELL; }
public CreateCacheParameterGroupRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _cacheParameterGroupName = VAR_STRING; _cacheParameterGroupFamily = VAR_STRING; _description = VAR_STRING; }
public DirCacheEntry(byte[] VAR_BYTE[], int VAR_INT) { if (!IsValidPath(VAR_BYTE[])) { throw new InvalidPathException(ToString(VAR_BYTE[])); } if (VAR_INT < LITERAL_INT || LITERAL_INT < VAR_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidStageForPath, VAR_INT, ToString(VAR_BYTE[]))); } info = new byte[INFO_LEN]; infoOffset = LITERAL_INT; path = VAR_BYTE[]; int VAR_INT = ((VAR_INT & unchecked((int)(LITERAL_INT))) << LITERAL_INT); if (path.Length < NAME_MASK) { VAR_INT |= path.Length; } else { VAR_INT |= NAME_MASK; } NB.EncodeInt16(info, infoOffset + P_FLAGS, VAR_INT); }
public FileOutputStream(string VAR_STRING, bool VAR_BOOL) : this(new java.io.File(path), append) { throw new System.NotImplementedException(); }
public virtual DescribeVolumesResponse METHOD_NAME() { return METHOD_NAME(new DescribeVolumesRequest()); }
public override string METHOD_NAME() { return token.METHOD_NAME(); }
public override MutableValue METHOD_NAME() { MutableValueDouble VAR_MUTABLEVALUEDOUBLE = new MutableValueDouble(); VAR_MUTABLEVALUEDOUBLE.Value = this.Value; VAR_MUTABLEVALUEDOUBLE.Exists = this.Exists; return VAR_MUTABLEVALUEDOUBLE; }
public override bool METHOD_NAME() { foreach (byte b in pathRaw) { if (b == LITERAL_CHAR) { return true; } } return false; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is BasqueStemmer; }
public SheetBuilder METHOD_NAME(String VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public ListTimeLinesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DescribeStackResourcesResponse METHOD_NAME(DescribeStackResourcesRequest VAR_DESCRIBESTACKRESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackResourcesResponseUnmarshaller.Instance; return Invoke<DescribeStackResourcesResponse>(VAR_DESCRIBESTACKRESOURCESREQUEST, VAR_VAR); }
public virtual UpdateBotResponse METHOD_NAME(UpdateBotRequest VAR_UPDATEBOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBotResponseUnmarshaller.Instance; return Invoke<UpdateBotResponse>(VAR_UPDATEBOTREQUEST, VAR_VAR); }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return VAR_INT >= VAR_INT && VAR_INT <= VAR_INT && !base.METHOD_NAME(VAR_INT, VAR_INT, VAR_INT); }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { while (count < VAR_INT) { Add(VAR_INT); } }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_SHORT[].Length < VAR_INT) { short[] VAR_SHORT[] = new short[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT16)]; Array.Copy(VAR_SHORT[], LITERAL_INT, VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); return VAR_SHORT[]; } else { return VAR_SHORT[]; } }
public virtual ExportSnapshotResponse METHOD_NAME(ExportSnapshotRequest VAR_EXPORTSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportSnapshotResponseUnmarshaller.Instance; return Invoke<ExportSnapshotResponse>(VAR_EXPORTSNAPSHOTREQUEST, VAR_VAR); }
public bool METHOD_NAME(short VAR_SHORT) { for (IEnumerator iterator = ChildRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; if (VAR_ESCHERRECORD.RecordId == VAR_SHORT) { return true; } } return false; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); _thedata = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT + LITERAL_INT, _thedata, LITERAL_INT, VAR_INT); return VAR_INT + LITERAL_INT; }
public virtual NGit.Api.RmCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); filepatterns.AddItem(VAR_STRING); return this; }
public virtual GetEmailIdentityResponse METHOD_NAME(GetEmailIdentityRequest VAR_GETEMAILIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEmailIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEmailIdentityResponseUnmarshaller.Instance; return Invoke<GetEmailIdentityResponse>(VAR_GETEMAILIDENTITYREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT) { try { java.util.ListIterator<E> VAR_JAVA.UTIL.LISTITERATOR<E> = listIterator(VAR_INT); E VAR_E = VAR_JAVA.UTIL.LISTITERATOR<E>.next(); VAR_JAVA.UTIL.LISTITERATOR<E>.METHOD_NAME(); return VAR_E; } catch (java.util.NoSuchElementException) { throw new System.IndexOutOfRangeException(); } }
public virtual NGit.Treewalk.CanonicalTreeParser METHOD_NAME() { NGit.Treewalk.CanonicalTreeParser VAR_NGIT.TREEWALK.CANONICALTREEPARSER = this; for (;;) { if (VAR_NGIT.TREEWALK.CANONICALTREEPARSER.nextPtr == VAR_NGIT.TREEWALK.CANONICALTREEPARSER.raw.Length) { if (VAR_NGIT.TREEWALK.CANONICALTREEPARSER.parent == LITERAL_NULL) { VAR_NGIT.TREEWALK.CANONICALTREEPARSER.currPtr = VAR_NGIT.TREEWALK.CANONICALTREEPARSER.nextPtr; return VAR_NGIT.TREEWALK.CANONICALTREEPARSER; } VAR_NGIT.TREEWALK.CANONICALTREEPARSER = (NGit.Treewalk.CanonicalTreeParser)VAR_NGIT.TREEWALK.CANONICALTREEPARSER.parent; continue; } VAR_NGIT.TREEWALK.CANONICALTREEPARSER.prevPtr = VAR_NGIT.TREEWALK.CANONICALTREEPARSER.currPtr; VAR_NGIT.TREEWALK.CANONICALTREEPARSER.currPtr = VAR_NGIT.TREEWALK.CANONICALTREEPARSER.nextPtr; VAR_NGIT.TREEWALK.CANONICALTREEPARSER.ParseEntry(); return VAR_NGIT.TREEWALK.CANONICALTREEPARSER; } }
public virtual UpdateClusterConfigResponse METHOD_NAME(UpdateClusterConfigRequest VAR_UPDATECLUSTERCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateClusterConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateClusterConfigResponseUnmarshaller.Instance; return Invoke<UpdateClusterConfigResponse>(VAR_UPDATECLUSTERCONFIGREQUEST, VAR_VAR); }
public Point(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public void METHOD_NAME(ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD) { field_1_font_index = VAR_EXTENDEDFORMATRECORD.field_1_font_index; field_2_format_index = VAR_EXTENDEDFORMATRECORD.field_2_format_index; field_3_cell_options = VAR_EXTENDEDFORMATRECORD.field_3_cell_options; field_4_alignment_options = VAR_EXTENDEDFORMATRECORD.field_4_alignment_options; field_5_indention_options = VAR_EXTENDEDFORMATRECORD.field_5_indention_options; field_6_border_options = VAR_EXTENDEDFORMATRECORD.field_6_border_options; field_7_palette_options = VAR_EXTENDEDFORMATRECORD.field_7_palette_options; field_8_adtl_palette_options = VAR_EXTENDEDFORMATRECORD.field_8_adtl_palette_options; field_9_fill_palette_options = VAR_EXTENDEDFORMATRECORD.field_9_fill_palette_options; }
public virtual GetInvitationConfigurationResponse METHOD_NAME(GetInvitationConfigurationRequest VAR_GETINVITATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInvitationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInvitationConfigurationResponseUnmarshaller.Instance; return Invoke<GetInvitationConfigurationResponse>(VAR_GETINVITATIONCONFIGURATIONREQUEST, VAR_VAR); }
public virtual RevTag METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevObject VAR_REVOBJECT = ParseAny(VAR_ANYOBJECTID); if (!(VAR_REVOBJECT is RevTag)) { throw new IncorrectObjectTypeException(VAR_ANYOBJECTID.ToObjectId(), Constants.TYPE_TAG); } return (RevTag)VAR_REVOBJECT; }
public virtual IList<string> METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, defaultNumReturnValues); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public StringEval(String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; }
public virtual BatchGetOnPremisesInstancesResponse METHOD_NAME(BatchGetOnPremisesInstancesRequest VAR_BATCHGETONPREMISESINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetOnPremisesInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetOnPremisesInstancesResponseUnmarshaller.Instance; return Invoke<BatchGetOnPremisesInstancesResponse>(VAR_BATCHGETONPREMISESINSTANCESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(Config VAR_CONFIG) { IList<string> VAR_ILIST<STRING> = new AList<string>(); VAR_ILIST<STRING>.Clear(); foreach (URIish u in URIs) { VAR_ILIST<STRING>.AddItem(u.ToPrivateString()); } VAR_CONFIG.SetStringList(SECTION, Name, KEY_URL, VAR_ILIST<STRING>); VAR_ILIST<STRING>.Clear(); foreach (URIish u_1 in PushURIs) { VAR_ILIST<STRING>.AddItem(u_1.ToPrivateString()); } VAR_CONFIG.SetStringList(SECTION, Name, KEY_PUSHURL, VAR_ILIST<STRING>); VAR_ILIST<STRING>.Clear(); foreach (RefSpec u_2 in FetchRefSpecs) { VAR_ILIST<STRING>.AddItem(u_2.ToString()); } VAR_CONFIG.SetStringList(SECTION, Name, KEY_FETCH, VAR_ILIST<STRING>); VAR_ILIST<STRING>.Clear(); foreach (RefSpec u_3 in PushRefSpecs) { VAR_ILIST<STRING>.AddItem(u_3.ToString()); } VAR_CONFIG.SetStringList(SECTION, Name, KEY_PUSH, VAR_ILIST<STRING>); Set(VAR_CONFIG, KEY_UPLOADPACK, UploadPack, DEFAULT_UPLOAD_PACK); Set(VAR_CONFIG, KEY_RECEIVEPACK, ReceivePack, DEFAULT_RECEIVE_PACK); Set(VAR_CONFIG, KEY_TAGOPT, TagOpt.Option(), NGit.Transport.TagOpt.AUTO_FOLLOW.Option()); Set(VAR_CONFIG, KEY_MIRROR, mirror, DEFAULT_MIRROR); Set(VAR_CONFIG, KEY_TIMEOUT, timeout, LITERAL_INT); if (!oldName.Equals(name)) { VAR_CONFIG.UnsetSection(SECTION, oldName); oldName = name; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subrecords.Count; i++) { SubRecord VAR_SUBRECORD = subrecords[i]; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_SUBRECORD.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual NGit.Api.StashCreateCommand METHOD_NAME(PersonIdent VAR_PERSONIDENT) { this.VAR_PERSONIDENT = VAR_PERSONIDENT; return this; }
public virtual GetDefaultCreditSpecificationResponse METHOD_NAME(GetDefaultCreditSpecificationRequest VAR_GETDEFAULTCREDITSPECIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDefaultCreditSpecificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDefaultCreditSpecificationResponseUnmarshaller.Instance; return Invoke<GetDefaultCreditSpecificationResponse>(VAR_GETDEFAULTCREDITSPECIFICATIONREQUEST, VAR_VAR); }
public static Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(int VAR_INT) { Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = new Antlr4.Runtime.Misc.IntervalSet(); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.Add(VAR_INT); return VAR_ANTLR4.RUNTIME.MISC.INTERVALSET; }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public virtual GetJobManifestResponse METHOD_NAME(GetJobManifestRequest VAR_GETJOBMANIFESTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJobManifestRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJobManifestResponseUnmarshaller.Instance; return Invoke<GetJobManifestResponse>(VAR_GETJOBMANIFESTREQUEST, VAR_VAR); }
public virtual ListGroupMembersResponse METHOD_NAME(ListGroupMembersRequest VAR_LISTGROUPMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGroupMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGroupMembersResponseUnmarshaller.Instance; return Invoke<ListGroupMembersResponse>(VAR_LISTGROUPMEMBERSREQUEST, VAR_VAR); }
public virtual CreateMatchmakingConfigurationResponse METHOD_NAME(CreateMatchmakingConfigurationRequest VAR_CREATEMATCHMAKINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMatchmakingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMatchmakingConfigurationResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingConfigurationResponse>(VAR_CREATEMATCHMAKINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual GetQueryResultsResponse METHOD_NAME(GetQueryResultsRequest VAR_GETQUERYRESULTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQueryResultsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQueryResultsResponseUnmarshaller.Instance; return Invoke<GetQueryResultsResponse>(VAR_GETQUERYRESULTSREQUEST, VAR_VAR); }
public int[] METHOD_NAME(int VAR_INT) { return segmentations[VAR_INT]; }
public virtual StartTextTranslationJobResponse METHOD_NAME(StartTextTranslationJobRequest VAR_STARTTEXTTRANSLATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartTextTranslationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartTextTranslationJobResponseUnmarshaller.Instance; return Invoke<StartTextTranslationJobResponse>(VAR_STARTTEXTTRANSLATIONJOBREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_DOUBLE < LITERAL_INT) { return ErrorEval.NUM_ERROR; } return new NumberEval(GetCalField(VAR_DOUBLE)); }
public virtual GetAutoSnapshotsResponse METHOD_NAME(GetAutoSnapshotsRequest VAR_GETAUTOSNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAutoSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAutoSnapshotsResponseUnmarshaller.Instance; return Invoke<GetAutoSnapshotsResponse>(VAR_GETAUTOSNAPSHOTSREQUEST, VAR_VAR); }
public RestoreDBInstanceToPointInTimeRequest(string VAR_STRING, string VAR_STRING) { _sourceDBInstanceIdentifier = VAR_STRING; _targetDBInstanceIdentifier = VAR_STRING; }
public virtual bool METHOD_NAME() { return dryRun; }
public static bool METHOD_NAME(object[] VAR_OBJECT[], object[] VAR_OBJECT[]) { if (VAR_OBJECT[] == VAR_OBJECT[]) { return true; } if (VAR_OBJECT[] == LITERAL_NULL || VAR_OBJECT[] == LITERAL_NULL || VAR_OBJECT[].Length != VAR_OBJECT[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_OBJECT[].Length; i++) { object VAR_OBJECT = VAR_OBJECT[][i]; object VAR_OBJECT = VAR_OBJECT[][i]; if (!(VAR_OBJECT == LITERAL_NULL ? VAR_OBJECT == LITERAL_NULL : VAR_OBJECT.Equals(VAR_OBJECT))) { return false; } } } return true; }
public bool METHOD_NAME(Formula VAR_FORMULA) { return Arrays.Equals(_byteEncoding, VAR_FORMULA._byteEncoding); }
public override ObjectId METHOD_NAME(TreeFormatter VAR_TREEFORMATTER) { return Delegate().METHOD_NAME(VAR_TREEFORMATTER); }
public static int[] METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT + VAR_INT[].Length); }
public virtual DescribeReservedDBInstancesResponse METHOD_NAME(DescribeReservedDBInstancesRequest VAR_DESCRIBERESERVEDDBINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedDBInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedDBInstancesResponseUnmarshaller.Instance; return Invoke<DescribeReservedDBInstancesResponse>(VAR_DESCRIBERESERVEDDBINSTANCESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(subs.Length + LITERAL_STRING); for (int i = LITERAL_INT; i < subs.Length; i++) { if (i != LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (subs[i] == LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING + starts[i] + LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING + starts[i] + LITERAL_STRING + subs[i].Length + LITERAL_STRING + subs[i]); } } VAR_STRINGBUILDER.Append(LITERAL_STRING + starts[subs.Length]); return VAR_STRINGBUILDER.METHOD_NAME(); }
public DescribeLogStreamsRequest(string VAR_STRING) { _logGroupName = VAR_STRING; }
public static String[] METHOD_NAME() { return (String[])_formats.Clone(); }
public virtual CreateVoiceTemplateResponse METHOD_NAME(CreateVoiceTemplateRequest VAR_CREATEVOICETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVoiceTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVoiceTemplateResponseUnmarshaller.Instance; return Invoke<CreateVoiceTemplateResponse>(VAR_CREATEVOICETEMPLATEREQUEST, VAR_VAR); }
public static long METHOD_NAME(Directory VAR_DIRECTORY) { try { return METHOD_NAME(VAR_DIRECTORY.ListAll()); } catch (DirectoryNotFoundException) { return -LITERAL_INT; } }
public virtual SearchTransitGatewayRoutesResponse METHOD_NAME(SearchTransitGatewayRoutesRequest VAR_SEARCHTRANSITGATEWAYROUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchTransitGatewayRoutesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchTransitGatewayRoutesResponseUnmarshaller.Instance; return Invoke<SearchTransitGatewayRoutesResponse>(VAR_SEARCHTRANSITGATEWAYROUTESREQUEST, VAR_VAR); }
public virtual ListCompilationJobsResponse METHOD_NAME(ListCompilationJobsRequest VAR_LISTCOMPILATIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCompilationJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCompilationJobsResponseUnmarshaller.Instance; return Invoke<ListCompilationJobsResponse>(VAR_LISTCOMPILATIONJOBSREQUEST, VAR_VAR); }
public static Query METHOD_NAME(string VAR_STRING, bool VAR_BOOL, string VAR_STRING, Query VAR_QUERY, IndexSearcher VAR_INDEXSEARCHER, ScoreMode VAR_SCOREMODE) { switch (VAR_SCOREMODE) { case ScoreMode.None: TermsCollector VAR_TERMSCOLLECTOR = TermsCollector.Create(VAR_STRING, VAR_BOOL); VAR_INDEXSEARCHER.Search(VAR_QUERY, VAR_TERMSCOLLECTOR); return new TermsQuery(VAR_STRING, VAR_QUERY, VAR_TERMSCOLLECTOR.CollectorTerms); case ScoreMode.Total: case ScoreMode.Max: case ScoreMode.Avg: TermsWithScoreCollector VAR_TERMSWITHSCORECOLLECTOR = TermsWithScoreCollector.Create(VAR_STRING, VAR_BOOL, VAR_SCOREMODE); VAR_INDEXSEARCHER.Search(VAR_QUERY, VAR_TERMSWITHSCORECOLLECTOR); return new TermsIncludingScoreQuery(VAR_STRING, VAR_BOOL, VAR_TERMSWITHSCORECOLLECTOR.CollectedTerms, VAR_TERMSWITHSCORECOLLECTOR.ScoresPerTerm, VAR_QUERY); default: throw new System.ArgumentException(string.Format(LITERAL_STRING, VAR_SCOREMODE)); } }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); Array.Copy(field_pictureData, LITERAL_INT, VAR_BYTE[], VAR_INT + LITERAL_INT, field_pictureData.Length); VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT + LITERAL_INT + field_pictureData.Length, RecordId, field_pictureData.Length + LITERAL_INT, this); return field_pictureData.Length + LITERAL_INT; }
public override SeekStatus METHOD_NAME(BytesRef VAR_BYTESREF) { int VAR_INT = FindTerm(VAR_BYTESREF); if (VAR_INT >= LITERAL_INT) { termOrd = VAR_INT; SetTerm(); return SeekStatus.FOUND; } else if (VAR_INT == -outerInstance.terms.Length - LITERAL_INT) { return SeekStatus.END; } else { termOrd = -VAR_INT - LITERAL_INT; SetTerm(); return SeekStatus.NOT_FOUND; } }
public virtual DeleteLoadBalancerResponse METHOD_NAME(DeleteLoadBalancerRequest VAR_DELETELOADBALANCERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLoadBalancerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLoadBalancerResponseUnmarshaller.Instance; return Invoke<DeleteLoadBalancerResponse>(VAR_DELETELOADBALANCERREQUEST, VAR_VAR); }
public virtual DeleteVpcPeeringAuthorizationResponse METHOD_NAME(DeleteVpcPeeringAuthorizationRequest VAR_DELETEVPCPEERINGAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcPeeringAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcPeeringAuthorizationResponseUnmarshaller.Instance; return Invoke<DeleteVpcPeeringAuthorizationResponse>(VAR_DELETEVPCPEERINGAUTHORIZATIONREQUEST, VAR_VAR); }
public virtual SendAnnouncementResponse METHOD_NAME(SendAnnouncementRequest VAR_SENDANNOUNCEMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendAnnouncementRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendAnnouncementResponseUnmarshaller.Instance; return Invoke<SendAnnouncementResponse>(VAR_SENDANNOUNCEMENTREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { int VAR_INT; object[] VAR_OBJECT[]; lock (mutex) { VAR_INT = list.size(); VAR_OBJECT[] = new object[VAR_INT]; list.toArray(VAR_OBJECT[]); } if (VAR_OBJECT != LITERAL_NULL) { { for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_OBJECT.Equals(VAR_OBJECT[][i])) { return i; } } } } else { { for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_OBJECT[][i] == LITERAL_NULL) { return i; } } } } return -LITERAL_INT; }
public override SortedDocValues METHOD_NAME(string VAR_STRING) { return LITERAL_NULL; }
public virtual void METHOD_NAME() { METHOD_NAME(clock.Get()); }
public sealed override java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public SortingBits(IBits VAR_IBITS, Sorter.DocMap VAR_SORTER.DOCMAP) { this.@in = VAR_IBITS; this.VAR_SORTER.DOCMAP = VAR_SORTER.DOCMAP; }
public static string METHOD_NAME(string VAR_STRING) { string VAR_STRING = VAR_STRING; if (VAR_STRING.IndexOf(LITERAL_CHAR) >= LITERAL_INT) { VAR_STRING.Replace(LITERAL_STRING, ESCAPED_QUOTE); } if (VAR_STRING.IndexOf(COMMA) >= LITERAL_INT) { VAR_STRING = LITERAL_STRING + VAR_STRING + LITERAL_STRING; } return VAR_STRING; }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, bool VAR_BOOL) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = -LITERAL_INT * (VAR_DOUBLE + (VAR_DOUBLE * VAR_DOUBLE)); } else { double VAR_DOUBLE = VAR_DOUBLE + LITERAL_INT; VAR_DOUBLE = ((LITERAL_INT - Math.Pow(VAR_DOUBLE, VAR_DOUBLE)) * (VAR_BOOL ? VAR_DOUBLE : LITERAL_INT) * VAR_DOUBLE) / VAR_DOUBLE - VAR_DOUBLE * Math.Pow(VAR_DOUBLE, VAR_DOUBLE); } return VAR_DOUBLE; }
public override java.nio.CharBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { throw new java.nio.ReadOnlyBufferException(); }
public virtual UpdateLifecyclePolicyResponse METHOD_NAME(UpdateLifecyclePolicyRequest VAR_UPDATELIFECYCLEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateLifecyclePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<UpdateLifecyclePolicyResponse>(VAR_UPDATELIFECYCLEPOLICYREQUEST, VAR_VAR); }
public virtual CreateNotebookInstanceLifecycleConfigResponse METHOD_NAME(CreateNotebookInstanceLifecycleConfigRequest VAR_CREATENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNotebookInstanceLifecycleConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<CreateNotebookInstanceLifecycleConfigResponse>(VAR_CREATENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(string VAR_STRING) { return map.Put(VAR_STRING); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_axisType); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_2_x); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_3_y); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_width); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_5_height); }
public virtual GetJourneyResponse METHOD_NAME(GetJourneyRequest VAR_GETJOURNEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJourneyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJourneyResponseUnmarshaller.Instance; return Invoke<GetJourneyResponse>(VAR_GETJOURNEYREQUEST, VAR_VAR); }
public PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler VAR_QUERYCONFIGHANDLER) : base(queryConfig) { for (int i = LITERAL_INT; i < Count; i++) { if (this[i].GetType().Equals(typeof(BooleanQuery2ModifierNodeProcessor))) { RemoveAt(i--); } } Add(new BooleanModifiersQueryNodeProcessor()); }
public static bool METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { return SliceEquals(VAR_BYTESREF, VAR_BYTESREF, LITERAL_INT); }
public virtual DeleteUsageReportSubscriptionResponse METHOD_NAME(DeleteUsageReportSubscriptionRequest VAR_DELETEUSAGEREPORTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUsageReportSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUsageReportSubscriptionResponseUnmarshaller.Instance; return Invoke<DeleteUsageReportSubscriptionResponse>(VAR_DELETEUSAGEREPORTSUBSCRIPTIONREQUEST, VAR_VAR); }
public java.io.File[] METHOD_NAME(java.io.FilenameFilter VAR_JAVA.IO.FILENAMEFILTER) { return filenamesToFiles(list(VAR_JAVA.IO.FILENAMEFILTER)); }
public virtual RespondActivityTaskFailedResponse METHOD_NAME(RespondActivityTaskFailedRequest VAR_RESPONDACTIVITYTASKFAILEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RespondActivityTaskFailedRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RespondActivityTaskFailedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskFailedResponse>(VAR_RESPONDACTIVITYTASKFAILEDREQUEST, VAR_VAR); }
public virtual ListIdentitiesResponse METHOD_NAME() { return METHOD_NAME(new ListIdentitiesRequest()); }
public int METHOD_NAME(T VAR_T, T VAR_T) { java.lang.Comparable<T> VAR_JAVA.LANG.COMPARABLE<T> = (java.lang.Comparable<T>)VAR_T; return VAR_JAVA.LANG.COMPARABLE<T>.compareTo(VAR_T); }
public virtual ListFindingsResponse METHOD_NAME(ListFindingsRequest VAR_LISTFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFindingsResponseUnmarshaller.Instance; return Invoke<ListFindingsResponse>(VAR_LISTFINDINGSREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { bool VAR_BOOL = false; for (int j = LITERAL_INT; !VAR_BOOL && (j < _limit); j++) { if (_array[j] == VAR_INT) { VAR_BOOL = true; } } return VAR_BOOL; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } try { int VAR_INT = EvaluateFirstArg(VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); if (VAR_INT < LITERAL_INT || VAR_INT >= VAR_VALUEEVAL[].Length) { return ErrorEval.VALUE_INVALID; } ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL[][VAR_INT], VAR_INT, VAR_INT); if (VAR_VALUEEVAL == MissingArgEval.instance) { return BlankEval.instance; } return VAR_VALUEEVAL; } catch (EvaluationException e) { return e.GetErrorEval(); } }
public override Object METHOD_NAME() { DatRecord VAR_DATRECORD = new DatRecord(); VAR_DATRECORD.field_1_options = field_1_options; return VAR_DATRECORD; }
public virtual CreateGlobalReplicationGroupResponse METHOD_NAME(CreateGlobalReplicationGroupRequest VAR_CREATEGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<CreateGlobalReplicationGroupResponse>(VAR_CREATEGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(Interval VAR_INTERVAL) { if (VAR_INTERVAL.a < LITERAL_INT || VAR_INTERVAL.b < VAR_INTERVAL.a - LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } int VAR_INT = BufferStartIndex; if (n > LITERAL_INT && data[n - LITERAL_INT] == IntStreamConstants.EOF) { if (VAR_INTERVAL.a + VAR_INTERVAL.Length > VAR_INT + n) { throw new ArgumentException(LITERAL_STRING); } } if (VAR_INTERVAL.a < VAR_INT || VAR_INTERVAL.b >= VAR_INT + n) { throw new NotSupportedException(LITERAL_STRING + VAR_INTERVAL + LITERAL_STRING + VAR_INT + LITERAL_STRING + (VAR_INT + n - LITERAL_INT)); } int VAR_INT = VAR_INTERVAL.a - VAR_INT; var VAR_VAR = new StringBuilder(VAR_INTERVAL.Length); for (int offset = LITERAL_INT; offset < VAR_INTERVAL.Length; offset++) { VAR_VAR.Append(Char.ConvertFromUtf32(data[VAR_INT + offset])); } return VAR_VAR.ToString(); }
if (VAR_STRING.Length > LITERAL_INT) { char VAR_CHAR = VAR_STRING[LITERAL_INT]; char[] VAR_CHAR[] = new char[LITERAL_INT]; VAR_CHAR[][LITERAL_INT] = (char)LITERAL_INT; for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { VAR_CHAR[][LITERAL_INT] = VAR_STRING[i]; m_classmap.Insert(VAR_CHAR[], LITERAL_INT, VAR_CHAR); } }
public virtual StemmerOverrideMap METHOD_NAME() { ByteSequenceOutputs VAR_BYTESEQUENCEOUTPUTS = ByteSequenceOutputs.Singleton; Builder<BytesRef> VAR_BUILDER<BYTESREF> = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE4, VAR_BYTESEQUENCEOUTPUTS); int[] VAR_INT[] = hash.Sort(BytesRef.UTF8SortedAsUnicodeComparer); Int32sRef VAR_INT32SREF = new Int32sRef(); int VAR_INT = hash.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT = VAR_INT[][i]; BytesRef VAR_BYTESREF = hash.Get(VAR_INT, spare); UnicodeUtil.UTF8toUTF32(VAR_BYTESREF, VAR_INT32SREF); VAR_BUILDER<BYTESREF>.Add(VAR_INT32SREF, new BytesRef(outputValues[VAR_INT])); } return new StemmerOverrideMap(VAR_BUILDER<BYTESREF>.Finish(), ignoreCase); }
public DFRSimilarity(BasicModel VAR_BASICMODEL, AfterEffect VAR_AFTEREFFECT, Normalization VAR_NORMALIZATION) { if (VAR_BASICMODEL == LITERAL_NULL || VAR_AFTEREFFECT == LITERAL_NULL || VAR_NORMALIZATION == LITERAL_NULL) { throw new System.NullReferenceException(LITERAL_STRING); } this.m_basicModel = VAR_BASICMODEL; this.m_afterEffect = VAR_AFTEREFFECT; this.m_normalization = VAR_NORMALIZATION; }
public ResetSnapshotAttributeRequest(string VAR_STRING, SnapshotAttributeName VAR_SNAPSHOTATTRIBUTENAME) { _snapshotId = VAR_STRING; _attribute = VAR_SNAPSHOTATTRIBUTENAME; }
public override V METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { if (VAR_ICHARSEQUENCE == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return default(V); }
public string METHOD_NAME() { return scheme; }
public override void METHOD_NAME(long VAR_LONG) { throw new System.NotSupportedException(); }
public XPathElement(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public virtual DeleteAccountResponse METHOD_NAME(DeleteAccountRequest VAR_DELETEACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAccountResponseUnmarshaller.Instance; return Invoke<DeleteAccountResponse>(VAR_DELETEACCOUNTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(IParseTree VAR_IPARSETREE, ParseTreePattern VAR_PARSETREEPATTERN) { MultiMap<string, IParseTree> VAR_MULTIMAP<STRING, IPARSETREE> = new MultiMap<string, IParseTree>(); IParseTree VAR_IPARSETREE = MatchImpl(VAR_IPARSETREE, VAR_PARSETREEPATTERN.PatternTree, VAR_MULTIMAP<STRING, IPARSETREE>); return VAR_IPARSETREE == LITERAL_NULL; }
public PredictionContext METHOD_NAME(PredictionContext VAR_PREDICTIONCONTEXT) { return cache.METHOD_NAME(VAR_PREDICTIONCONTEXT); }
public SpotPlacement(string VAR_STRING) { _availabilityZone = VAR_STRING; }
public virtual DescribeFleetInstancesResponse METHOD_NAME(DescribeFleetInstancesRequest VAR_DESCRIBEFLEETINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetInstancesResponseUnmarshaller.Instance; return Invoke<DescribeFleetInstancesResponse>(VAR_DESCRIBEFLEETINSTANCESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(WorkingTreeIterator VAR_WORKINGTREEITERATOR) { this.VAR_WORKINGTREEITERATOR = VAR_WORKINGTREEITERATOR; }
public static long METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG += VAR_LONG[][i].PopCount(); } return VAR_LONG; }
public static RepositoryCache.FileKey METHOD_NAME(FilePath VAR_FILEPATH, FS VAR_FS) { FilePath VAR_FILEPATH = Resolve(VAR_FILEPATH, VAR_FS); return new RepositoryCache.FileKey(VAR_FILEPATH != LITERAL_NULL ? VAR_FILEPATH : VAR_FILEPATH, VAR_FS); }
public ObjectWalk(ObjectReader VAR_OBJECTREADER, int VAR_INT) : base(or) { this.VAR_INT = VAR_INT; this.UNSHALLOW = NewFlag(LITERAL_STRING); this.REINTERESTING = NewFlag(LITERAL_STRING); }
public RegisterImageRequest(string VAR_STRING) { _imageLocation = VAR_STRING; }
public virtual void METHOD_NAME(string VAR_STRING) { EnsureCapacity(VAR_STRING.Length); VAR_STRING.CopyTo(LITERAL_INT, m_buf, m_len, VAR_STRING.Length - LITERAL_INT); m_len += VAR_STRING.Length; }
public RefCountedRevision(IRevision VAR_IREVISION) { Revision = VAR_IREVISION; }
public virtual ListTagsForResourcesResponse METHOD_NAME(ListTagsForResourcesRequest VAR_LISTTAGSFORRESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForResourcesResponseUnmarshaller.Instance; return Invoke<ListTagsForResourcesResponse>(VAR_LISTTAGSFORRESOURCESREQUEST, VAR_VAR); }
public override byte METHOD_NAME() { return bytes[pos++]; }
public virtual DeleteGlobalReplicationGroupResponse METHOD_NAME(DeleteGlobalReplicationGroupRequest VAR_DELETEGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteGlobalReplicationGroupResponse>(VAR_DELETEGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public override java.nio.IntBuffer METHOD_NAME() { return duplicate(); }
public virtual DescribeFileSystemPolicyResponse METHOD_NAME(DescribeFileSystemPolicyRequest VAR_DESCRIBEFILESYSTEMPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFileSystemPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFileSystemPolicyResponseUnmarshaller.Instance; return Invoke<DescribeFileSystemPolicyResponse>(VAR_DESCRIBEFILESYSTEMPOLICYREQUEST, VAR_VAR); }
public virtual ListAttributesResponse METHOD_NAME(ListAttributesRequest VAR_LISTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAttributesResponseUnmarshaller.Instance; return Invoke<ListAttributesResponse>(VAR_LISTATTRIBUTESREQUEST, VAR_VAR); }
public ModifyStrategyTargetRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public void METHOD_NAME(FontRecord VAR_FONTRECORD) { records.Remove(VAR_FONTRECORD); numfonts--; }
public static Type METHOD_NAME(string VAR_STRING) { return loader.METHOD_NAME(VAR_STRING); }
public void METHOD_NAME(TermsEnum VAR_TERMSENUM, BytesRef VAR_BYTESREF) { this.Terms = VAR_TERMSENUM; Current = VAR_BYTESREF; }
public BRAIRecord METHOD_NAME() { return dataValues; }
public static DefaultProfile METHOD_NAME(string VAR_STRING, ICredentialProvider VAR_ICREDENTIALPROVIDER) { _profile = new DefaultProfile(VAR_STRING, VAR_ICREDENTIALPROVIDER); return _profile; }
public virtual ListFieldLevelEncryptionProfilesResponse METHOD_NAME(ListFieldLevelEncryptionProfilesRequest VAR_LISTFIELDLEVELENCRYPTIONPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFieldLevelEncryptionProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFieldLevelEncryptionProfilesResponseUnmarshaller.Instance; return Invoke<ListFieldLevelEncryptionProfilesResponse>(VAR_LISTFIELDLEVELENCRYPTIONPROFILESREQUEST, VAR_VAR); }
public virtual RegisterTaskDefinitionResponse METHOD_NAME(RegisterTaskDefinitionRequest VAR_REGISTERTASKDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterTaskDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterTaskDefinitionResponseUnmarshaller.Instance; return Invoke<RegisterTaskDefinitionResponse>(VAR_REGISTERTASKDEFINITIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, type); }
public virtual DisableEnhancedMonitoringResponse METHOD_NAME(DisableEnhancedMonitoringRequest VAR_DISABLEENHANCEDMONITORINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableEnhancedMonitoringRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableEnhancedMonitoringResponseUnmarshaller.Instance; return Invoke<DisableEnhancedMonitoringResponse>(VAR_DISABLEENHANCEDMONITORINGREQUEST, VAR_VAR); }
public NodeHash(FST<T> VAR_FST<T>, FST.BytesReader VAR_FST.BYTESREADER) { table = new PagedGrowableWriter(LITERAL_INT, LITERAL_INT << LITERAL_INT, LITERAL_INT, PackedInt32s.COMPACT); mask = LITERAL_INT; this.VAR_FST<T> = VAR_FST<T>; this.VAR_FST.BYTESREADER = VAR_FST.BYTESREADER; }
public static string METHOD_NAME(NGit.ObjectId VAR_NGIT.OBJECTID) { return VAR_NGIT.OBJECTID != LITERAL_NULL ? VAR_NGIT.OBJECTID.Name : ZEROID_STR; }
public ILittleEndianOutput METHOD_NAME(int VAR_INT) { return this; }
public String METHOD_NAME(IFormulaRenderingWorkbook VAR_IFORMULARENDERINGWORKBOOK) { return VAR_IFORMULARENDERINGWORKBOOK.GetNameText(this); }
public override string METHOD_NAME() { return LITERAL_STRING + GetValueString() + LITERAL_STRING + LITERAL_STRING + Child.METHOD_NAME() + LITERAL_STRING; }
public virtual ListTagsResponse METHOD_NAME(ListTagsRequest VAR_LISTTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsResponseUnmarshaller.Instance; return Invoke<ListTagsResponse>(VAR_LISTTAGSREQUEST, VAR_VAR); }
public virtual ListTypeVersionsResponse METHOD_NAME(ListTypeVersionsRequest VAR_LISTTYPEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTypeVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTypeVersionsResponseUnmarshaller.Instance; return Invoke<ListTypeVersionsResponse>(VAR_LISTTYPEVERSIONSREQUEST, VAR_VAR); }
public ObjectLinkRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_anchorId = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_link1 = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_link2 = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual string METHOD_NAME() { return promptText; }
public static string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING.Length); for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_STRING[i])); } return VAR_STRINGBUILDER.ToString(); }
public static bool METHOD_NAME(int VAR_INT) { return VAR_INT == UserSViewBegin.VAR_INT; }
public virtual GetInstanceMetricDataResponse METHOD_NAME(GetInstanceMetricDataRequest VAR_GETINSTANCEMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceMetricDataResponseUnmarshaller.Instance; return Invoke<GetInstanceMetricDataResponse>(VAR_GETINSTANCEMETRICDATAREQUEST, VAR_VAR); }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { Debug.Assert(VAR_TERMSTATE != LITERAL_NULL && VAR_TERMSTATE is BlockTermState); Debug.Assert(!doOrd || ((BlockTermState)VAR_TERMSTATE).Ord < outerInstance.numTerms); state.CopyFrom(VAR_TERMSTATE); seekPending = true; indexIsCurrent = false; term.CopyBytes(VAR_BYTESREF); }
public NGramDistance(int VAR_INT) { this.n = VAR_INT; }
public virtual AllocateConnectionOnInterconnectResponse METHOD_NAME(AllocateConnectionOnInterconnectRequest VAR_ALLOCATECONNECTIONONINTERCONNECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AllocateConnectionOnInterconnectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AllocateConnectionOnInterconnectResponseUnmarshaller.Instance; return Invoke<AllocateConnectionOnInterconnectResponse>(VAR_ALLOCATECONNECTIONONINTERCONNECTREQUEST, VAR_VAR); }
public StandardSyntaxParser(ICharStream VAR_ICHARSTREAM) { TokenSource = new StandardSyntaxParserTokenManager(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { _range.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); SerializeExtraData(VAR_ILITTLEENDIANOUTPUT); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { return IsDefaultField(field) ? LITERAL_STRING + text + LITERAL_STRING : field + LITERAL_STRING + text + LITERAL_STRING; }
public static bool METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case RowRecord.VAR_INT: case BlankRecord.VAR_INT: case BoolErrRecord.VAR_INT: case FormulaRecord.VAR_INT: case LabelRecord.VAR_INT: case LabelSSTRecord.VAR_INT: case NumberRecord.VAR_INT: case RKRecord.VAR_INT: case ArrayRecord.VAR_INT: case SharedFormulaRecord.VAR_INT: case TableRecord.VAR_INT: return true; } return false; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_INT; int VAR_INT = VAR_BYTE[].Length; while (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] != LITERAL_CHAR) { VAR_INT = NextLF(VAR_BYTE[], VAR_INT); } while (LITERAL_INT < VAR_INT && VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } return VAR_INT; }
public virtual VerifyDomainDkimResponse METHOD_NAME(VerifyDomainDkimRequest VAR_VERIFYDOMAINDKIMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = VerifyDomainDkimRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = VerifyDomainDkimResponseUnmarshaller.Instance; return Invoke<VerifyDomainDkimResponse>(VAR_VERIFYDOMAINDKIMREQUEST, VAR_VAR); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (VAR_OBJECT is HSSFRichTextString) { return _string.METHOD_NAME(((HSSFRichTextString)VAR_OBJECT)._string); } return false; }
public override bool METHOD_NAME(Object VAR_OBJECT) { RowColKey VAR_ROWCOLKEY = (RowColKey)VAR_OBJECT; return _rowIndex == VAR_ROWCOLKEY._rowIndex && _columnIndex == VAR_ROWCOLKEY._columnIndex; }
public virtual GetIdentityPoolConfigurationResponse METHOD_NAME(GetIdentityPoolConfigurationRequest VAR_GETIDENTITYPOOLCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityPoolConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<GetIdentityPoolConfigurationResponse>(VAR_GETIDENTITYPOOLCONFIGURATIONREQUEST, VAR_VAR); }
public virtual DeleteTrafficMirrorFilterResponse METHOD_NAME(DeleteTrafficMirrorFilterRequest VAR_DELETETRAFFICMIRRORFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficMirrorFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficMirrorFilterResponseUnmarshaller.Instance; return Invoke<DeleteTrafficMirrorFilterResponse>(VAR_DELETETRAFFICMIRRORFILTERREQUEST, VAR_VAR); }
public override IBits METHOD_NAME(Directory VAR_DIRECTORY, SegmentCommitInfo VAR_SEGMENTCOMMITINFO, IOContext VAR_IOCONTEXT) { Debug.Assert(VAR_SEGMENTCOMMITINFO.HasDeletions); var VAR_VAR = new BytesRef(); var VAR_VAR = new CharsRef(); var VAR_VAR = IndexFileNames.FileNameFromGeneration(VAR_SEGMENTCOMMITINFO.Info.Name, LIVEDOCS_EXTENSION, VAR_SEGMENTCOMMITINFO.DelGen); ChecksumIndexInput VAR_CHECKSUMINDEXINPUT = LITERAL_NULL; var VAR_VAR = false; try { VAR_CHECKSUMINDEXINPUT = VAR_DIRECTORY.OpenChecksumInput(VAR_VAR, VAR_IOCONTEXT); SimpleTextUtil.ReadLine(VAR_CHECKSUMINDEXINPUT, VAR_VAR); Debug.Assert(StringHelper.StartsWith(VAR_VAR, SIZE)); var VAR_VAR = ParseInt32At(VAR_VAR, SIZE.Length, VAR_VAR); var VAR_VAR = new BitArray(VAR_VAR); SimpleTextUtil.ReadLine(VAR_CHECKSUMINDEXINPUT, VAR_VAR); while (!VAR_VAR.Equals(END)) { Debug.Assert(StringHelper.StartsWith(VAR_VAR, DOC)); var VAR_VAR = ParseInt32At(VAR_VAR, DOC.Length, VAR_VAR); VAR_VAR.SafeSet(VAR_VAR, true); SimpleTextUtil.ReadLine(VAR_CHECKSUMINDEXINPUT, VAR_VAR); } SimpleTextUtil.CheckFooter(VAR_CHECKSUMINDEXINPUT); VAR_VAR = true; return new SimpleTextBits(VAR_VAR, VAR_VAR); } finally { if (VAR_VAR) { IOUtils.Dispose(VAR_CHECKSUMINDEXINPUT); } else { IOUtils.DisposeWhileHandlingException(VAR_CHECKSUMINDEXINPUT); } } }
public virtual CreateConferenceProviderResponse METHOD_NAME(CreateConferenceProviderRequest VAR_CREATECONFERENCEPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConferenceProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConferenceProviderResponseUnmarshaller.Instance; return Invoke<CreateConferenceProviderResponse>(VAR_CREATECONFERENCEPROVIDERREQUEST, VAR_VAR); }
public SimpleQQParser(string VAR_STRING, string VAR_STRING) : this(new string[] { qqName }, indexField);
public override bool METHOD_NAME() { return false; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new HyphenationCompoundWordTokenFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, hyphenator, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new JapaneseBaseFormFilter(VAR_TOKENSTREAM); }
public OrderedATNConfigSet() { this.configLookup = new LexerConfigHashSet(); }
public static ValueEval METHOD_NAME(ValueEval VAR_VALUEEVAL, int VAR_INT, int VAR_INT) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_VALUEEVAL == BlankEval.instance) { return NumberEval.ZERO; } return VAR_VALUEEVAL; }
public GetGroupRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, bool VAR_BOOL) { if (VAR_BOOL) { _highIx = VAR_INT; } else { _lowIx = VAR_INT; } }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public override String METHOD_NAME() { return cfAggregate.METHOD_NAME(); }
public override void METHOD_NAME(Config VAR_CONFIG) { base.METHOD_NAME(VAR_CONFIG); random = new Random(VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT)); maxDocFacets = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT); maxDims = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT); maxFacetDepth = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT); if (maxFacetDepth < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + maxFacetDepth); } maxValue = maxDocFacets * maxFacetDepth; }
public async Task<AzureOperationResponse> METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING, Dictionary<string, List<string>> VAR_DICTIONARY<STRING, LIST<STRING>> = LITERAL_NULL, CancellationToken VAR_CANCELLATIONTOKEN = default(CancellationToken)) { AzureOperationResponse VAR_AZUREOPERATIONRESPONSE = await BeginDeleteWithHttpMessagesAsync(VAR_STRING, VAR_STRING, VAR_STRING, VAR_DICTIONARY<STRING, LIST<STRING>>, VAR_CANCELLATIONTOKEN).ConfigureAwait(false); return await Client.GetPostOrDeleteOperationResultAsync(VAR_AZUREOPERATIONRESPONSE, VAR_DICTIONARY<STRING, LIST<STRING>>, VAR_CANCELLATIONTOKEN).ConfigureAwait(false); }
public virtual Builder METHOD_NAME(int VAR_INT) { if (VAR_INT <= previousDoc) { throw new System.ArgumentException(LITERAL_STRING + previousDoc + LITERAL_STRING + VAR_INT); } buffer[bufferSize++] = VAR_INT - previousDoc - LITERAL_INT; if (bufferSize == BLOCK_SIZE) { EncodeBlock(); bufferSize = LITERAL_INT; } previousDoc = VAR_INT; ++cardinality; return this; }
public static bool METHOD_NAME(String VAR_STRING) { short VAR_SHORT = FunctionMetadataRegistry.LookupIndexByName(VAR_STRING.ToUpper()); return VAR_SHORT >= LITERAL_INT; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { while (VAR_INT > LITERAL_INT) { int VAR_INT = limit - upto; if (VAR_INT < VAR_INT) { Array.Copy(buffer, upto, VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; NextSlice(); } else { Array.Copy(buffer, upto, VAR_BYTE[], VAR_INT, VAR_INT); upto += VAR_INT; break; } } }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(CONCAT); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual ListResolverRuleAssociationsResponse METHOD_NAME(ListResolverRuleAssociationsRequest VAR_LISTRESOLVERRULEASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListResolverRuleAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListResolverRuleAssociationsResponseUnmarshaller.Instance; return Invoke<ListResolverRuleAssociationsResponse>(VAR_LISTRESOLVERRULEASSOCIATIONSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ApostropheFilter(VAR_TOKENSTREAM); }
public static string METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.LastIndexOf(LITERAL_CHAR); if (VAR_INT == -LITERAL_INT) { return LITERAL_STRING; } return VAR_STRING.Substring(VAR_INT + LITERAL_INT, VAR_STRING.Length - (VAR_INT + LITERAL_INT)); }
public static String METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT >= _formats.Length) { return LITERAL_NULL; } return _formats[VAR_INT]; }
public virtual int METHOD_NAME(object VAR_OBJECT) { return list.METHOD_NAME(VAR_OBJECT); }
public virtual void METHOD_NAME() { Balance(); RedimNodeArrays(m_freenode); CharVector VAR_CHARVECTOR = new CharVector(); VAR_CHARVECTOR.Alloc(LITERAL_INT); TernaryTree VAR_TERNARYTREE = new TernaryTree(); Compact(VAR_CHARVECTOR, VAR_TERNARYTREE, m_root); m_kv = VAR_CHARVECTOR; m_kv.METHOD_NAME(); }
public GetRepoSyncTaskRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public ChangeMessageVisibilityRequest(string VAR_STRING, string VAR_STRING, int VAR_INT) { _queueUrl = VAR_STRING; _receiptHandle = VAR_STRING; _visibilityTimeout = VAR_INT; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Recalc).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CheckoutResult.Status METHOD_NAME() { return myStatus; }
public StartRepoBuildByRuleRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual ModifyAvailabilityZoneGroupResponse METHOD_NAME(ModifyAvailabilityZoneGroupRequest VAR_MODIFYAVAILABILITYZONEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyAvailabilityZoneGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyAvailabilityZoneGroupResponseUnmarshaller.Instance; return Invoke<ModifyAvailabilityZoneGroupResponse>(VAR_MODIFYAVAILABILITYZONEGROUPREQUEST, VAR_VAR); }
public override int METHOD_NAME(object VAR_OBJECT) { MutableValueStr VAR_MUTABLEVALUESTR = (MutableValueStr)VAR_OBJECT; int VAR_INT = Value.CompareTo(VAR_MUTABLEVALUESTR.Value); if (VAR_INT != LITERAL_INT) { return VAR_INT; } if (Exists == VAR_MUTABLEVALUESTR.Exists) { return LITERAL_INT; } return Exists ? LITERAL_INT : -LITERAL_INT; }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); string VAR_STRING = LITERAL_STRING; foreach (IQueryNode child in VAR_VAR) { VAR_STRINGBUILDER.Append(VAR_STRING).Append(child.METHOD_NAME(VAR_IESCAPEQUERYSYNTAX)); VAR_STRING = LITERAL_STRING; } return LITERAL_STRING + VAR_STRINGBUILDER.ToString() + LITERAL_STRING; }
public virtual DescribeChangeSetResponse METHOD_NAME(DescribeChangeSetRequest VAR_DESCRIBECHANGESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeChangeSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeChangeSetResponseUnmarshaller.Instance; return Invoke<DescribeChangeSetResponse>(VAR_DESCRIBECHANGESETREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT) { return VAR_INT; }
public virtual FilePath METHOD_NAME() { return identityFile; }
public override string METHOD_NAME() { string VAR_STRING = GetType().FullName; int VAR_INT = VAR_STRING.LastIndexOf(LITERAL_CHAR); if (VAR_INT >= LITERAL_INT) { VAR_STRING = Sharpen.Runtime.Substring(VAR_STRING, VAR_INT + LITERAL_INT); } return VAR_STRING.Replace(LITERAL_CHAR, LITERAL_CHAR); }
public virtual DeleteVoiceConnectorProxyResponse METHOD_NAME(DeleteVoiceConnectorProxyRequest VAR_DELETEVOICECONNECTORPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorProxyResponse>(VAR_DELETEVOICECONNECTORPROXYREQUEST, VAR_VAR); }
public ByteArrayDataInput(byte[] VAR_BYTE[]) { Reset(VAR_BYTE[]); }
public virtual CreateLocalGatewayRouteResponse METHOD_NAME(CreateLocalGatewayRouteRequest VAR_CREATELOCALGATEWAYROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLocalGatewayRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLocalGatewayRouteResponseUnmarshaller.Instance; return Invoke<CreateLocalGatewayRouteResponse>(VAR_CREATELOCALGATEWAYROUTEREQUEST, VAR_VAR); }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { int VAR_INT = LITERAL_INT; for (int i = VAR_INT; i < VAR_CHAR[].Length && VAR_CHAR[][i] != LITERAL_INT; i++) { VAR_INT++; } return VAR_INT; }
public virtual AttachPolicyResponse METHOD_NAME(AttachPolicyRequest VAR_ATTACHPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachPolicyResponseUnmarshaller.Instance; return Invoke<AttachPolicyResponse>(VAR_ATTACHPOLICYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { METHOD_NAME(VAR_DOUBLE.ToString()); }
public static java.text.BreakIterator METHOD_NAME() { return METHOD_NAME(System.Globalization.CultureInfo.CurrentCulture); }
public virtual bool METHOD_NAME(E VAR_E) { throw new System.NotSupportedException(); }
public SendMessageRequest(string VAR_STRING, string VAR_STRING) { _queueUrl = VAR_STRING; _messageBody = VAR_STRING; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { try { AreaEval VAR_AREAEVAL = EvaluateRef(VAR_VALUEEVAL); AreaEval VAR_AREAEVAL = EvaluateRef(VAR_VALUEEVAL); return ResolveRange(VAR_AREAEVAL, VAR_AREAEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public virtual java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_CHAR[][i]); } } return this; }
public override void METHOD_NAME(byte VAR_BYTE) { Debug.Assert(slice != LITERAL_NULL); if (slice[upto] != LITERAL_INT) { upto = pool.AllocSlice(slice, upto); slice = pool.Buffer; offset0 = pool.ByteOffset; Debug.Assert(slice != LITERAL_NULL); } slice[upto++] = (byte)VAR_BYTE; Debug.Assert(upto != slice.Length); }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE; if (J2N.BitConversion.DoubleToRawInt64Bits(VAR_DOUBLE) < LITERAL_INT) { VAR_DOUBLE = Math.Abs(VAR_DOUBLE); VAR_DOUBLE = -LITERAL_INT; } else { VAR_DOUBLE = LITERAL_INT; } return VAR_DOUBLE * Math.Log((LITERAL_INT + VAR_DOUBLE) / (LITERAL_INT - VAR_DOUBLE)); }
public static double METHOD_NAME(double VAR_DOUBLE) { double VAR_DOUBLE; if (J2N.BitConversion.DoubleToRawInt64Bits(VAR_DOUBLE) < LITERAL_INT) { VAR_DOUBLE = Math.Abs(VAR_DOUBLE); VAR_DOUBLE = -LITERAL_INT; } else { VAR_DOUBLE = LITERAL_INT; } return VAR_DOUBLE * Math.Log(Math.Sqrt(VAR_DOUBLE * VAR_DOUBLE + LITERAL_INT) + VAR_DOUBLE); }
public FuzzyLikeThisQuery(int VAR_INT, Analyzer VAR_ANALYZER) { q = new ScoreTermQueue(VAR_INT); this.VAR_ANALYZER = VAR_ANALYZER; this.VAR_INT = VAR_INT; }
public override bool METHOD_NAME(RuleContext VAR_RULECONTEXT, int VAR_INT) { return VAR_INT >= _precedenceStack[_precedenceStack.Count - LITERAL_INT]; }
public virtual UpdateStackResponse METHOD_NAME(UpdateStackRequest VAR_UPDATESTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStackResponseUnmarshaller.Instance; return Invoke<UpdateStackResponse>(VAR_UPDATESTACKREQUEST, VAR_VAR); }
public StartJumpserverRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual IList<IgnoreRule> METHOD_NAME() { return Sharpen.Collections.UnmodifiableList(rules); }
public RefMap() { prefix = string.Empty; packed = RefList.EmptyList(); loose = RefList.EmptyList(); resolved = RefList.EmptyList(); }
public virtual ICollection<ObjectId> METHOD_NAME() { return candidates; }
public int METHOD_NAME(object VAR_OBJECT) { int VAR_INT = findIndex(VAR_OBJECT, keys); if (keys[VAR_INT] == VAR_OBJECT) { return values[VAR_INT]; } return -LITERAL_INT; }
public ICharSequence METHOD_NAME(char[] VAR_CHAR[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < this.Length; i++) { if (this.chars[i] == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } else { foreach (char character in VAR_CHAR[]) { if (this.chars[i] == character && this.wasEscaped[i]) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); break; } } } VAR_STRINGBUILDER.Append(this.chars[i]); } return new StringCharSequence(VAR_STRINGBUILDER.ToString()); }
public virtual NGit.Api.DiffCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual RevertCommand METHOD_NAME() { return new RevertCommand(repo); }
public override void METHOD_NAME() { if (_size != LITERAL_INT) { java.util.Arrays.fill(table, LITERAL_NULL); entryForNullKey = LITERAL_NULL; modCount++; _size = LITERAL_INT; } }
public static double METHOD_NAME(double VAR_DOUBLE) { return Math.Log(VAR_DOUBLE) / LOG_2; }
public bool METHOD_NAME() { return horizontalBorder.IsSet(field_1_options); }
public virtual void METHOD_NAME() { if (Operation.IsTargetNeedsArea && !Shape.HasArea) { throw new ArgumentException(Operation + LITERAL_STRING); } if (DistErr != LITERAL_NULL && DistErrPct != LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } }
public virtual DeleteConfigurationSetResponse METHOD_NAME(DeleteConfigurationSetRequest VAR_DELETECONFIGURATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConfigurationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConfigurationSetResponseUnmarshaller.Instance; return Invoke<DeleteConfigurationSetResponse>(VAR_DELETECONFIGURATIONSETREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { if (used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(LITERAL_INT, value.Length); used = true; return true; }
public static java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_DOUBLE[].Length, VAR_INT, VAR_INT); java.nio.DoubleBuffer VAR_JAVA.NIO.DOUBLEBUFFER = new java.nio.ReadWriteDoubleArrayBuffer(VAR_DOUBLE[]); VAR_JAVA.NIO.DOUBLEBUFFER._position = VAR_INT; VAR_JAVA.NIO.DOUBLEBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.DOUBLEBUFFER; }
public virtual DescribeSpotInstanceRequestsResponse METHOD_NAME(DescribeSpotInstanceRequestsRequest VAR_DESCRIBESPOTINSTANCEREQUESTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotInstanceRequestsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotInstanceRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotInstanceRequestsResponse>(VAR_DESCRIBESPOTINSTANCEREQUESTSREQUEST, VAR_VAR); }
public virtual UpdateFieldLevelEncryptionConfigResponse METHOD_NAME(UpdateFieldLevelEncryptionConfigRequest VAR_UPDATEFIELDLEVELENCRYPTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFieldLevelEncryptionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<UpdateFieldLevelEncryptionConfigResponse>(VAR_UPDATEFIELDLEVELENCRYPTIONCONFIGREQUEST, VAR_VAR); }
public void METHOD_NAME() { specialCachedValue = SpecialCachedValue.CreateForString(); }
public SpanNearBuilder(ISpanQueryBuilder VAR_ISPANQUERYBUILDER) { this.VAR_ISPANQUERYBUILDER = VAR_ISPANQUERYBUILDER; }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (KeyValuePair<string, DirectField> entry in fields) { VAR_LONG += entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR; VAR_LONG += entry.Value.METHOD_NAME(); } return VAR_LONG; }
public virtual DeleteGlobalClusterResponse METHOD_NAME(DeleteGlobalClusterRequest VAR_DELETEGLOBALCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGlobalClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGlobalClusterResponseUnmarshaller.Instance; return Invoke<DeleteGlobalClusterResponse>(VAR_DELETEGLOBALCLUSTERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return type.Name + LITERAL_STRING + listener + LITERAL_STRING; }
public override void METHOD_NAME(DocData VAR_DOCDATA, string VAR_STRING) { int VAR_INT = LITERAL_INT; int VAR_INT = VAR_STRING.IndexOf(WriteLineDocTask.SEP, VAR_INT); if (VAR_INT < LITERAL_INT) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } VAR_DOCDATA.Title = VAR_STRING.Substring(VAR_INT, VAR_INT - VAR_INT); VAR_INT = VAR_INT + LITERAL_INT; VAR_INT = VAR_STRING.IndexOf(WriteLineDocTask.SEP, VAR_INT); if (VAR_INT < LITERAL_INT) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } VAR_DOCDATA.SetDate(VAR_STRING.Substring(VAR_INT, VAR_INT - VAR_INT)); VAR_INT = VAR_INT + LITERAL_INT; VAR_INT = VAR_STRING.IndexOf(WriteLineDocTask.SEP, VAR_INT); if (VAR_INT >= LITERAL_INT) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } VAR_DOCDATA.Body = VAR_STRING.Substring(VAR_INT); }
public override bool METHOD_NAME() { return false; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(remoteName); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(localName); if (forceUpdate) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(oldObjectId == LITERAL_NULL ? string.Empty : oldObjectId.Abbreviate(LITERAL_INT).Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(newObjectId == LITERAL_NULL ? string.Empty : newObjectId.Abbreviate(LITERAL_INT).Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeTerminationPolicyTypesResponse METHOD_NAME() { return METHOD_NAME(new DescribeTerminationPolicyTypesRequest()); }
public DeleteTagsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public ChartFormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field1_x_position = VAR_RECORDINPUTSTREAM.ReadInt(); field2_y_position = VAR_RECORDINPUTSTREAM.ReadInt(); field3_width = VAR_RECORDINPUTSTREAM.ReadInt(); field4_height = VAR_RECORDINPUTSTREAM.ReadInt(); field5_grbit = VAR_RECORDINPUTSTREAM.ReadShort(); field6_icrt = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override void METHOD_NAME(IndexChangedListener VAR_INDEXCHANGEDLISTENER) { VAR_INDEXCHANGEDLISTENER.OnIndexChanged(this); }
public NameRecord METHOD_NAME(int VAR_INT, int VAR_INT) { NameRecord VAR_NAMERECORD = GetNameRecord(VAR_INT); int VAR_INT = CheckExternSheet(VAR_INT); Ptg[] VAR_PTG[] = VAR_NAMERECORD.NameDefinition; for (int i = LITERAL_INT; i < VAR_PTG[].Length; i++) { Ptg VAR_PTG = VAR_PTG[][i]; if (VAR_PTG is Area3DPtg) { Area3DPtg VAR_AREA3DPTG = (Area3DPtg)((OperandPtg)VAR_PTG).Copy(); VAR_AREA3DPTG.ExternSheetIndex = (VAR_INT); VAR_PTG[][i] = VAR_AREA3DPTG; } else if (VAR_PTG is Ref3DPtg) { Ref3DPtg VAR_REF3DPTG = (Ref3DPtg)((OperandPtg)VAR_PTG).Copy(); VAR_REF3DPTG.ExternSheetIndex = (VAR_INT); VAR_PTG[][i] = VAR_REF3DPTG; } } NameRecord VAR_NAMERECORD = CreateBuiltInName(NameRecord.BUILTIN_FILTER_DB, VAR_INT + LITERAL_INT); VAR_NAMERECORD.NameDefinition = VAR_PTG[]; VAR_NAMERECORD.IsHiddenName = true; return VAR_NAMERECORD; }
public override int METHOD_NAME(byte[] VAR_BYTE[]) { throw new System.NotImplementedException(); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = _byteEncoding.Length - _encodedTokenLen; VAR_ILITTLEENDIANOUTPUT.Write(_byteEncoding, _encodedTokenLen, VAR_INT); }
public virtual GetGcmChannelResponse METHOD_NAME(GetGcmChannelRequest VAR_GETGCMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetGcmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetGcmChannelResponseUnmarshaller.Instance; return Invoke<GetGcmChannelResponse>(VAR_GETGCMCHANNELREQUEST, VAR_VAR); }
public override long METHOD_NAME() { return indexReader.METHOD_NAME(); }
public short METHOD_NAME() { return field_1_calcmode; }
public virtual DeleteStreamResponse METHOD_NAME(DeleteStreamRequest VAR_DELETESTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStreamResponseUnmarshaller.Instance; return Invoke<DeleteStreamResponse>(VAR_DELETESTREAMREQUEST, VAR_VAR); }
public virtual java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_DOUBLE[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_DOUBLE[][i]); } } return this; }
public virtual RevokeSecurityGroupEgressResponse METHOD_NAME(RevokeSecurityGroupEgressRequest VAR_REVOKESECURITYGROUPEGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeSecurityGroupEgressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeSecurityGroupEgressResponseUnmarshaller.Instance; return Invoke<RevokeSecurityGroupEgressResponse>(VAR_REVOKESECURITYGROUPEGRESSREQUEST, VAR_VAR); }
public CreateRepoWebhookRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public int METHOD_NAME(char VAR_CHAR) { Cell VAR_CELL = At(VAR_CHAR); return (VAR_CELL == LITERAL_NULL) ? -LITERAL_INT : VAR_CELL.cnt; }
public virtual SortField[] METHOD_NAME() { return fields; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Version)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString((int)Type)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(TypeName).Append(LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Build)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(BuildYear).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(HistoryBitMask)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(RequiredVersion)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateDBInstanceResponse METHOD_NAME(CreateDBInstanceRequest VAR_CREATEDBINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBInstanceResponseUnmarshaller.Instance; return Invoke<CreateDBInstanceResponse>(VAR_CREATEDBINSTANCEREQUEST, VAR_VAR); }
public virtual CreateStackInstancesResponse METHOD_NAME(CreateStackInstancesRequest VAR_CREATESTACKINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStackInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStackInstancesResponseUnmarshaller.Instance; return Invoke<CreateStackInstancesResponse>(VAR_CREATESTACKINSTANCESREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = LITERAL_INT; for (IEnumerator iterator = ChildRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_INT += VAR_ESCHERRECORD.RecordSize; } VAR_INT += _remainingLength; LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; for (IEnumerator iterator = ChildRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_INT += VAR_ESCHERRECORD.METHOD_NAME(VAR_INT, VAR_BYTE[], VAR_ESCHERSERIALIZATIONLISTENER); } VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public override string METHOD_NAME() { return LITERAL_STRING + m_cp + LITERAL_STRING; }
public MissingRecordAwareHSSFListener(IHSSFListener VAR_IHSSFLISTENER) { ResetCounts(); childListener = VAR_IHSSFLISTENER; }
public int METHOD_NAME(int VAR_INT) { return (VAR_INT & ~this._mask); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_13_border_styles1); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_14_border_styles2); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); m_traversalSize = (int)float.Parse(VAR_STRING, CultureInfo.InvariantCulture); }
public virtual string METHOD_NAME(IList<string> VAR_ILIST<STRING>) { return Trees.METHOD_NAME(this, VAR_ILIST<STRING>); }
public HSSFSimpleShape METHOD_NAME(IClientAnchor VAR_ICLIENTANCHOR) { HSSFTextbox VAR_HSSFTEXTBOX = new HSSFTextbox(LITERAL_NULL, (HSSFAnchor)VAR_ICLIENTANCHOR); AddShape(VAR_HSSFTEXTBOX); OnCreate(VAR_HSSFTEXTBOX); return VAR_HSSFTEXTBOX; }
public virtual UpdateDevicePolicyConfigurationResponse METHOD_NAME(UpdateDevicePolicyConfigurationRequest VAR_UPDATEDEVICEPOLICYCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDevicePolicyConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDevicePolicyConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateDevicePolicyConfigurationResponse>(VAR_UPDATEDEVICEPOLICYCONFIGURATIONREQUEST, VAR_VAR); }
public virtual float METHOD_NAME(int VAR_INT) { return LITERAL_INT + LITERAL_INT / (float)Math.Log(pivot + VAR_INT); }
public Record METHOD_NAME() { Record VAR_RECORD; VAR_RECORD = GetNextUnreadRecord(); if (VAR_RECORD != LITERAL_NULL) { return VAR_RECORD; } while (true) { if (!_recStream.HasNextRecord) { return LITERAL_NULL; } _recStream.METHOD_NAME(); if (_lastRecordWasEOFLevelZero) { if (_recStream.Sid != BOFRecord.sid) { return LITERAL_NULL; } } VAR_RECORD = ReadNextRecord(); if (VAR_RECORD == LITERAL_NULL) { continue; } return VAR_RECORD; } }
public java.io.FileDescriptor METHOD_NAME() { throw new System.NotImplementedException(); }
public MoveAlbumPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual UpdateStackSetResponse METHOD_NAME(UpdateStackSetRequest VAR_UPDATESTACKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateStackSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateStackSetResponseUnmarshaller.Instance; return Invoke<UpdateStackSetResponse>(VAR_UPDATESTACKSETREQUEST, VAR_VAR); }
public static double METHOD_NAME(double VAR_DOUBLE) { return Math.Log(Math.Sqrt(Math.Pow(VAR_DOUBLE, LITERAL_INT) - LITERAL_INT) + VAR_DOUBLE); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; i++) { switch (VAR_CHAR[][i]) { case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; } } VAR_INT = Step1(VAR_CHAR[], VAR_INT); return Step2(VAR_CHAR[], VAR_INT); }
public virtual CreateProposalResponse METHOD_NAME(CreateProposalRequest VAR_CREATEPROPOSALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProposalRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProposalResponseUnmarshaller.Instance; return Invoke<CreateProposalResponse>(VAR_CREATEPROPOSALREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return false; }
public virtual RevCommit METHOD_NAME() { return head != LITERAL_NULL ? head.commit : LITERAL_NULL; }
public IBorderFormatting METHOD_NAME() { return METHOD_NAME(false); }
public DeletedArea3DPtg(int VAR_INT) { field_1_index_extern_sheet = VAR_INT; unused1 = LITERAL_INT; unused2 = LITERAL_INT; }
public SheetRecordCollector() { _totalSize = LITERAL_INT; _list = new ArrayList(LITERAL_INT); }
public virtual RemovePermissionResponse METHOD_NAME(RemovePermissionRequest VAR_REMOVEPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemovePermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemovePermissionResponseUnmarshaller.Instance; return Invoke<RemovePermissionResponse>(VAR_REMOVEPERMISSIONREQUEST, VAR_VAR); }
public virtual ModifyClusterIamRolesResponse METHOD_NAME(ModifyClusterIamRolesRequest VAR_MODIFYCLUSTERIAMROLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterIamRolesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterIamRolesResponseUnmarshaller.Instance; return Invoke<ModifyClusterIamRolesResponse>(VAR_MODIFYCLUSTERIAMROLESREQUEST, VAR_VAR); }
public AreaFormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_foregroundColor = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_backgroundColor = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_pattern = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_formatFlags = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_forecolorIndex = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_backcolorIndex = VAR_RECORDINPUTSTREAM.ReadShort(); }
public int METHOD_NAME() { return _lei.METHOD_NAME(); }
public override string METHOD_NAME() { return METHOD_NAME(LITERAL_STRING); }
public short METHOD_NAME(short VAR_SHORT) { return (short)this.Set(VAR_SHORT); }
public void METHOD_NAME(ThreadState VAR_THREADSTATE) { lock (this) { Debug.Assert(!VAR_THREADSTATE.flushPending); if (VAR_THREADSTATE.dwpt.NumDocsInRAM > LITERAL_INT) { VAR_THREADSTATE.flushPending = true; long VAR_LONG = VAR_THREADSTATE.bytesUsed; flushBytes += VAR_LONG; activeBytes -= VAR_LONG; numPending++; Debug.Assert(AssertMemory()); } } }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, char[] VAR_CHAR[]) { insert0(VAR_INT, VAR_CHAR[]); return this; }
public StoredField(string VAR_STRING, double VAR_DOUBLE) : base(name, TYPE) { FieldsData = new Double(VAR_DOUBLE); }
public override string METHOD_NAME() { return LITERAL_STRING + Number.ToString(Lambda) + LITERAL_STRING; }
public ReleaseAddressRequest(string VAR_STRING) { _publicIp = VAR_STRING; }
public virtual DeleteKeyPairResponse METHOD_NAME(DeleteKeyPairRequest VAR_DELETEKEYPAIRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteKeyPairRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteKeyPairResponseUnmarshaller.Instance; return Invoke<DeleteKeyPairResponse>(VAR_DELETEKEYPAIRREQUEST, VAR_VAR); }
public byte[] METHOD_NAME(short VAR_SHORT) { int VAR_INT = VAR_SHORT - FIRST_COLOR_INDEX; if (VAR_INT < LITERAL_INT || VAR_INT >= field_2_colors.Count) { return LITERAL_NULL; } PColor VAR_PCOLOR = (PColor)field_2_colors[VAR_INT]; return new byte[] { VAR_PCOLOR._red, VAR_PCOLOR._green, VAR_PCOLOR._blue }; }
public virtual int METHOD_NAME(E VAR_E) { if (mGarbage) { gc(); } { for (int i = LITERAL_INT; i < mSize; i++) { if (Sharpen.Util.Equals(VAR_E, mValues[i])) { return i; } } } return -LITERAL_INT; }
public virtual NGit.Transport.URIish METHOD_NAME(string VAR_STRING) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.scheme = VAR_STRING; return VAR_NGIT.TRANSPORT.URIISH; }
public virtual void METHOD_NAME(char[] VAR_CHAR[]) { METHOD_NAME(new string (VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length)); }
public CommonToken(int VAR_INT, string VAR_STRING) { this._type = VAR_INT; this._channel = TokenConstants.DefaultChannel; this._text = VAR_STRING; this.source = EmptySource; }
public override string METHOD_NAME() { return Field + LITERAL_STRING + Text(); }
public override java.nio.LongBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public ATNSimulator(ATN VAR_ATN, PredictionContextCache VAR_PREDICTIONCONTEXTCACHE) { this.VAR_ATN = VAR_ATN; this.VAR_PREDICTIONCONTEXTCACHE = VAR_PREDICTIONCONTEXTCACHE; }
public CachedOrdinalsReader(OrdinalsReader VAR_ORDINALSREADER) { this.VAR_ORDINALSREADER = VAR_ORDINALSREADER; }
public static CompareResult METHOD_NAME(bool VAR_BOOL) { if (VAR_BOOL) { return Equal; } return LessThan; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Version); VAR_ILITTLEENDIANOUTPUT.WriteShort((int)Type); VAR_ILITTLEENDIANOUTPUT.WriteShort(Build); VAR_ILITTLEENDIANOUTPUT.WriteShort(BuildYear); VAR_ILITTLEENDIANOUTPUT.WriteInt(HistoryBitMask); VAR_ILITTLEENDIANOUTPUT.WriteInt(RequiredVersion); }
public java.io.File METHOD_NAME() { return new java.io.File(getAbsolutePath()); }
public virtual DescribeTemplatePermissionsResponse METHOD_NAME(DescribeTemplatePermissionsRequest VAR_DESCRIBETEMPLATEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTemplatePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTemplatePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeTemplatePermissionsResponse>(VAR_DESCRIBETEMPLATEPERMISSIONSREQUEST, VAR_VAR); }
public virtual CountOpenWorkflowExecutionsResponse METHOD_NAME(CountOpenWorkflowExecutionsRequest VAR_COUNTOPENWORKFLOWEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CountOpenWorkflowExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CountOpenWorkflowExecutionsResponseUnmarshaller.Instance; return Invoke<CountOpenWorkflowExecutionsResponse>(VAR_COUNTOPENWORKFLOWEXECUTIONSREQUEST, VAR_VAR); }
public virtual DescribeAccountLimitsResponse METHOD_NAME() { return METHOD_NAME(new DescribeAccountLimitsRequest()); }
public virtual object METHOD_NAME(string VAR_STRING) { if (fst == LITERAL_NULL) { return LITERAL_NULL; } FST.Arc<long?> VAR_FST.ARC<LONG?> = new FST.Arc<long?>(); long? VAR_LONG? = LITERAL_NULL; try { VAR_LONG? = LookupPrefix(new BytesRef(VAR_STRING), VAR_FST.ARC<LONG?>); } catch (IOException bogus) { throw new Exception(bogus.ToString(), bogus); } if (VAR_LONG? == LITERAL_NULL || !VAR_FST.ARC<LONG?>.IsFinal) { return LITERAL_NULL; } else { return DecodeWeight(VAR_LONG?.GetValueOrDefault() + VAR_FST.ARC<LONG?>.NextFinalOutput.GetValueOrDefault()); } }
public virtual CreateGameServerGroupResponse METHOD_NAME(CreateGameServerGroupRequest VAR_CREATEGAMESERVERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGameServerGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGameServerGroupResponseUnmarshaller.Instance; return Invoke<CreateGameServerGroupResponse>(VAR_CREATEGAMESERVERGROUPREQUEST, VAR_VAR); }
public static bool METHOD_NAME(int VAR_INT) { bool VAR_BOOL = false; switch (VAR_INT) { case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: case LITERAL_INT: VAR_BOOL = true; break; default: VAR_BOOL = false; break; } return VAR_BOOL; }
public virtual PackFile METHOD_NAME() { return newPack; }
public virtual CreateInternetGatewayResponse METHOD_NAME() { return METHOD_NAME(new CreateInternetGatewayRequest()); }
public void METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[], int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public override void METHOD_NAME() { unpackedObjectCache.Clear(); ObjectDirectory.PackList VAR_OBJECTDIRECTORY.PACKLIST = packList.Get(); packList.Set(NO_PACKS); foreach (PackFile p in VAR_OBJECTDIRECTORY.PACKLIST.VAR_OBJECTDIRECTORY.PACKLIST) { p.METHOD_NAME(); } FileObjectDatabase.AlternateHandle[] VAR_FILEOBJECTDATABASE.ALTERNATEHANDLE[] = alternates.Get(); if (VAR_FILEOBJECTDATABASE.ALTERNATEHANDLE[] != LITERAL_NULL) { alternates.Set(LITERAL_NULL); foreach (FileObjectDatabase.AlternateHandle od in VAR_FILEOBJECTDATABASE.ALTERNATEHANDLE[]) { od.METHOD_NAME(); } } }
public virtual IList<IToken> METHOD_NAME(int VAR_INT, int VAR_INT) { LazyInit(); if (VAR_INT < LITERAL_INT || VAR_INT >= tokens.Count) { throw new ArgumentOutOfRangeException(VAR_INT + LITERAL_STRING + (tokens.Count - LITERAL_INT)); } int VAR_INT = NextTokenOnChannel(VAR_INT + LITERAL_INT, Lexer.DefaultTokenChannel); int VAR_INT; int VAR_INT = VAR_INT + LITERAL_INT; if (VAR_INT == -LITERAL_INT) { VAR_INT = Size - LITERAL_INT; } else { VAR_INT = VAR_INT; } return FilterForChannel(VAR_INT, VAR_INT, VAR_INT); }
public override int METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public virtual DeleteCustomAvailabilityZoneResponse METHOD_NAME(DeleteCustomAvailabilityZoneRequest VAR_DELETECUSTOMAVAILABILITYZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCustomAvailabilityZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCustomAvailabilityZoneResponseUnmarshaller.Instance; return Invoke<DeleteCustomAvailabilityZoneResponse>(VAR_DELETECUSTOMAVAILABILITYZONEREQUEST, VAR_VAR); }
public virtual BatchUnsuspendUserResponse METHOD_NAME(BatchUnsuspendUserRequest VAR_BATCHUNSUSPENDUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchUnsuspendUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchUnsuspendUserResponseUnmarshaller.Instance; return Invoke<BatchUnsuspendUserResponse>(VAR_BATCHUNSUSPENDUSERREQUEST, VAR_VAR); }
public virtual DeleteAccountSettingResponse METHOD_NAME(DeleteAccountSettingRequest VAR_DELETEACCOUNTSETTINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAccountSettingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAccountSettingResponseUnmarshaller.Instance; return Invoke<DeleteAccountSettingResponse>(VAR_DELETEACCOUNTSETTINGREQUEST, VAR_VAR); }
public OR(SemanticContext VAR_SEMANTICCONTEXT, SemanticContext VAR_SEMANTICCONTEXT) { HashSet<SemanticContext> VAR_HASHSET<SEMANTICCONTEXT> = new HashSet<SemanticContext>(); if (VAR_SEMANTICCONTEXT is SemanticContext.OR) { VAR_HASHSET<SEMANTICCONTEXT>.UnionWith(((OR)VAR_SEMANTICCONTEXT).opnds); } else { VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT); } if (VAR_SEMANTICCONTEXT is SemanticContext.OR) { VAR_HASHSET<SEMANTICCONTEXT>.UnionWith(((OR)VAR_SEMANTICCONTEXT).opnds); } else { VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT); } IList<SemanticContext.PrecedencePredicate> VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE> = FilterPrecedencePredicates(VAR_HASHSET<SEMANTICCONTEXT>); if (VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE>.Count > LITERAL_INT) { SemanticContext.PrecedencePredicate VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE = VAR_ILIST<SEMANTICCONTEXT.PRECEDENCEPREDICATE>.Max(); VAR_HASHSET<SEMANTICCONTEXT>.Add(VAR_SEMANTICCONTEXT.PRECEDENCEPREDICATE); } this.opnds = VAR_HASHSET<SEMANTICCONTEXT>.ToArray(); }
public virtual ListHumanLoopsResponse METHOD_NAME(ListHumanLoopsRequest VAR_LISTHUMANLOOPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHumanLoopsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHumanLoopsResponseUnmarshaller.Instance; return Invoke<ListHumanLoopsResponse>(VAR_LISTHUMANLOOPSREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_VALUEEVAL[].Length; if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } ValueEval VAR_VALUEEVAL = VAR_VALUEEVAL[][LITERAL_INT]; try { if (VAR_VALUEEVAL is NumericValueEval) { return EvaluateSingleProduct(VAR_VALUEEVAL[]); } if (VAR_VALUEEVAL is RefEval) { return EvaluateSingleProduct(VAR_VALUEEVAL[]); } if (VAR_VALUEEVAL is TwoDEval) { TwoDEval VAR_TWODEVAL = (TwoDEval)VAR_VALUEEVAL; if (VAR_TWODEVAL.IsRow && VAR_TWODEVAL.IsColumn) { return EvaluateSingleProduct(VAR_VALUEEVAL[]); } return EvaluateAreaSumProduct(VAR_VALUEEVAL[]); } } catch (EvaluationException e) { return e.GetErrorEval(); } throw new RuntimeException(LITERAL_STRING + VAR_VALUEEVAL.GetType().Name + LITERAL_STRING); }
public virtual DescribeParameterGroupsResponse METHOD_NAME(DescribeParameterGroupsRequest VAR_DESCRIBEPARAMETERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeParameterGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeParameterGroupsResponseUnmarshaller.Instance; return Invoke<DescribeParameterGroupsResponse>(VAR_DESCRIBEPARAMETERGROUPSREQUEST, VAR_VAR); }
public static bool[] METHOD_NAME(bool[] VAR_BOOL[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_BOOL[].Length < VAR_INT) { bool[] VAR_BOOL[] = new bool[Oversize(VAR_INT, LITERAL_INT)]; Array.Copy(VAR_BOOL[], LITERAL_INT, VAR_BOOL[], LITERAL_INT, VAR_BOOL[].Length); return VAR_BOOL[]; } else { return VAR_BOOL[]; } }
public virtual double METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual void METHOD_NAME(ITokenSource VAR_ITOKENSOURCE) { this._tokenSource = VAR_ITOKENSOURCE; tokens.Clear(); p = -LITERAL_INT; this.fetchedEOF = false; }
public virtual void METHOD_NAME(Parser VAR_PARSER) { EndErrorCondition(VAR_PARSER); }
public virtual DescribeVpcPeeringAuthorizationsResponse METHOD_NAME(DescribeVpcPeeringAuthorizationsRequest VAR_DESCRIBEVPCPEERINGAUTHORIZATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcPeeringAuthorizationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcPeeringAuthorizationsResponseUnmarshaller.Instance; return Invoke<DescribeVpcPeeringAuthorizationsResponse>(VAR_DESCRIBEVPCPEERINGAUTHORIZATIONSREQUEST, VAR_VAR); }
public virtual CreateDocumentationVersionResponse METHOD_NAME(CreateDocumentationVersionRequest VAR_CREATEDOCUMENTATIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDocumentationVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDocumentationVersionResponseUnmarshaller.Instance; return Invoke<CreateDocumentationVersionResponse>(VAR_CREATEDOCUMENTATIONVERSIONREQUEST, VAR_VAR); }
public virtual CreateClusterResponse METHOD_NAME(CreateClusterRequest VAR_CREATECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateClusterResponseUnmarshaller.Instance; return Invoke<CreateClusterResponse>(VAR_CREATECLUSTERREQUEST, VAR_VAR); }
public override java.nio.DoubleBuffer METHOD_NAME() { if (byteBuffer.isReadOnly()) { throw new java.nio.ReadOnlyBufferException(); } byteBuffer.limit(_limit * libcore.io.SizeOf.DOUBLE); byteBuffer.position(_position * libcore.io.SizeOf.DOUBLE); byteBuffer.METHOD_NAME(); byteBuffer.clear(); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public override int[] METHOD_NAME() { int[] VAR_INT[] = base.METHOD_NAME(); boost = ArrayUtil.METHOD_NAME(boost, VAR_INT[].Length); if (termState.Length < VAR_INT[].Length) { TermContext[] VAR_TERMCONTEXT[] = new TermContext[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; Array.Copy(termState, LITERAL_INT, VAR_TERMCONTEXT[], LITERAL_INT, termState.Length); termState = VAR_TERMCONTEXT[]; } Debug.Assert(termState.Length >= VAR_INT[].Length && boost.Length >= VAR_INT[].Length); return VAR_INT[]; }
public DefaultColWidthRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_col_width = VAR_RECORDINPUTSTREAM.ReadUShort(); }
public virtual GetAttributesResponse METHOD_NAME(GetAttributesRequest VAR_GETATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAttributesResponseUnmarshaller.Instance; return Invoke<GetAttributesResponse>(VAR_GETATTRIBUTESREQUEST, VAR_VAR); }
public GetSubUserListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual void METHOD_NAME(QueryConfigHandler VAR_QUERYCONFIGHANDLER) { this.VAR_QUERYCONFIGHANDLER = VAR_QUERYCONFIGHANDLER; }
public WindowCacheConfig() { packedGitOpenFiles = LITERAL_INT; packedGitLimit = LITERAL_INT * MB; packedGitWindowSize = LITERAL_INT * KB; packedGitMMAP = false; deltaBaseCacheLimit = LITERAL_INT * MB; streamFileThreshold = PackConfig.DEFAULT_BIG_FILE_THRESHOLD; }
public MutableFPNumber METHOD_NAME() { return new MutableFPNumber(_significand, _binaryExponent); }
public override java.nio.ShortBuffer METHOD_NAME() { java.nio.ShortToByteBufferAdapter VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER = new java.nio.ShortToByteBufferAdapter(byteBuffer.METHOD_NAME()); VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER._mark = _mark; VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER.byteBuffer._order = byteBuffer._order; return VAR_JAVA.NIO.SHORTTOBYTEBUFFERADAPTER; }
public virtual DescribeReservedCacheNodesResponse METHOD_NAME(DescribeReservedCacheNodesRequest VAR_DESCRIBERESERVEDCACHENODESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedCacheNodesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedCacheNodesResponseUnmarshaller.Instance; return Invoke<DescribeReservedCacheNodesResponse>(VAR_DESCRIBERESERVEDCACHENODESREQUEST, VAR_VAR); }
public virtual ListOperationsResponse METHOD_NAME(ListOperationsRequest VAR_LISTOPERATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOperationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOperationsResponseUnmarshaller.Instance; return Invoke<ListOperationsResponse>(VAR_LISTOPERATIONSREQUEST, VAR_VAR); }
public SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual BatchReadResponse METHOD_NAME(BatchReadRequest VAR_BATCHREADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchReadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchReadResponseUnmarshaller.Instance; return Invoke<BatchReadResponse>(VAR_BATCHREADREQUEST, VAR_VAR); }
public InstanceProfileCredentials METHOD_NAME(int VAR_INT) { for (var i = LITERAL_INT; i <= VAR_INT; i++) { try { return METHOD_NAME(); } catch (ClientException e) { if (i == VAR_INT) { throw new ClientException(e.ErrorCode, e.ErrorMessage); } } } throw new ClientException(LITERAL_STRING); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return new NumberEval(DateUtil.GetExcelDate(DateTime.Now)); }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public virtual long METHOD_NAME(IndexSearcher VAR_INDEXSEARCHER) { EnsureOpen(); var VAR_VAR = ((DirectoryReader)VAR_INDEXSEARCHER.IndexReader).Version; var VAR_VAR = false; var VAR_VAR = _searchers.GetOrAdd(VAR_VAR, l => new Lazy<SearcherTracker>(() => { VAR_VAR = true; return new SearcherTracker(VAR_INDEXSEARCHER); })).Value; if (!VAR_VAR && VAR_VAR.Searcher != VAR_INDEXSEARCHER) { throw new ArgumentException(LITERAL_STRING + VAR_INDEXSEARCHER + LITERAL_STRING + VAR_VAR.Searcher); } return VAR_VAR; }
public virtual ClassifyDocumentResponse METHOD_NAME(ClassifyDocumentRequest VAR_CLASSIFYDOCUMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ClassifyDocumentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ClassifyDocumentResponseUnmarshaller.Instance; return Invoke<ClassifyDocumentResponse>(VAR_CLASSIFYDOCUMENTREQUEST, VAR_VAR); }
public virtual GetIdentityPoolRolesResponse METHOD_NAME(GetIdentityPoolRolesRequest VAR_GETIDENTITYPOOLROLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityPoolRolesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityPoolRolesResponseUnmarshaller.Instance; return Invoke<GetIdentityPoolRolesResponse>(VAR_GETIDENTITYPOOLROLESREQUEST, VAR_VAR); }
public ICharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { return new UnescapedCharSequence(this.chars, this.wasEscaped, VAR_INT, VAR_INT); }
public virtual CreateDeploymentGroupResponse METHOD_NAME(CreateDeploymentGroupRequest VAR_CREATEDEPLOYMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeploymentGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeploymentGroupResponseUnmarshaller.Instance; return Invoke<CreateDeploymentGroupResponse>(VAR_CREATEDEPLOYMENTGROUPREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(@object != LITERAL_NULL ? @object.Name : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(@object != LITERAL_NULL ? Constants.TypeString(type) : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(tag != LITERAL_NULL ? tag : LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (tagger != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(tagger); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(message != LITERAL_NULL ? message : string.Empty); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ET METHOD_NAME() { if (this.expectedModCount == this.list.modCount) { if (this.hasNext()) { this.link = this.link.previous; this.canRemove = true; return this.link.data; } throw new java.util.NoSuchElementException(); } throw new java.util.ConcurrentModificationException(); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is string) { string VAR_STRING = (string)VAR_OBJECT; return names.ContainsKey(VAR_STRING) || names.ContainsKey(StringUtils.ToLowerCase(VAR_STRING)); } return false; }
public int METHOD_NAME(int VAR_INT) { return (VAR_INT | this._mask); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(JGitText.Get().contextMustBeNonNegative); } context = VAR_INT; }
public virtual string METHOD_NAME(DiffEntry.Side VAR_DIFFENTRY.SIDE) { return VAR_DIFFENTRY.SIDE == DiffEntry.Side.OLD ? GetOldPath() : GetNewPath(); }
public virtual DescribeAccessPointsResponse METHOD_NAME(DescribeAccessPointsRequest VAR_DESCRIBEACCESSPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAccessPointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAccessPointsResponseUnmarshaller.Instance; return Invoke<DescribeAccessPointsResponse>(VAR_DESCRIBEACCESSPOINTSREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT) { deleteCharAt0(VAR_INT); return this; }
public int METHOD_NAME(UnicodeString VAR_UNICODESTRING) { if (sst == LITERAL_NULL) { InsertSST(); } return sst.AddString(VAR_UNICODESTRING); }
public override string METHOD_NAME(TermData VAR_TERMDATA) { return VAR_TERMDATA.ToString(); }
public IList<HSSFObjectData> METHOD_NAME() { List<HSSFObjectData> VAR_LIST<HSSFOBJECTDATA> = new List<HSSFObjectData>(); for (int i = LITERAL_INT; i < NumberOfSheets; i++) { METHOD_NAME((HSSFSheet)GetSheetAt(i), VAR_LIST<HSSFOBJECTDATA>); } return VAR_LIST<HSSFOBJECTDATA>; }
public virtual DisableDirectoryResponse METHOD_NAME(DisableDirectoryRequest VAR_DISABLEDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableDirectoryResponseUnmarshaller.Instance; return Invoke<DisableDirectoryResponse>(VAR_DISABLEDIRECTORYREQUEST, VAR_VAR); }
public virtual UpdateApiMappingResponse METHOD_NAME(UpdateApiMappingRequest VAR_UPDATEAPIMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApiMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApiMappingResponseUnmarshaller.Instance; return Invoke<UpdateApiMappingResponse>(VAR_UPDATEAPIMAPPINGREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, bool VAR_BOOL) { return METHOD_NAME(VAR_INT, VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); }
public virtual UpdateConfigurationResponse METHOD_NAME(UpdateConfigurationRequest VAR_UPDATECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationResponse>(VAR_UPDATECONFIGURATIONREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, int VAR_INT, string VAR_STRING) { lock (this) { replace0(VAR_INT, VAR_INT, VAR_STRING); return this; } }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_INT[][VAR_INT++] = (int)(((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT); } } }
public virtual void METHOD_NAME(string VAR_STRING) { lock (this) { if (@out == LITERAL_NULL) { setError(); return; } if (VAR_STRING == LITERAL_NULL) { METHOD_NAME(LITERAL_STRING); return; } try { if (encoding == LITERAL_NULL) { write(Sharpen.StringHelper.GetBytesForString(VAR_STRING)); } else { write(Sharpen.StringHelper.GetBytesForString(VAR_STRING, encoding)); } } catch (System.IO.IOException) { setError(); } } }
public virtual E METHOD_NAME(int VAR_INT, E VAR_E) { lock (this) { object[] VAR_OBJECT[] = (object[])elements.Clone(); E VAR_E = (E)VAR_OBJECT[][VAR_INT]; VAR_OBJECT[][VAR_INT] = VAR_E; elements = VAR_OBJECT[]; return VAR_E; } }
public static void METHOD_NAME(object[] VAR_OBJECT[], int VAR_INT, int VAR_INT, object VAR_OBJECT) { java.util.Arrays.checkStartAndEnd(VAR_OBJECT[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_OBJECT[][i] = VAR_OBJECT; } } }
public short METHOD_NAME(int VAR_INT, int VAR_INT) { return (short)OrCreateLinkTable.CheckExternSheet(VAR_INT, VAR_INT); }
public virtual DeleteClusterParameterGroupResponse METHOD_NAME(DeleteClusterParameterGroupRequest VAR_DELETECLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterParameterGroupResponse>(VAR_DELETECLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual GetTemplateResponse METHOD_NAME(GetTemplateRequest VAR_GETTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTemplateResponseUnmarshaller.Instance; return Invoke<GetTemplateResponse>(VAR_GETTEMPLATEREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public override Note METHOD_NAME() { CheckCallable(); RevWalk VAR_REVWALK = new RevWalk(repo); ObjectInserter VAR_OBJECTINSERTER = repo.NewObjectInserter(); NoteMap VAR_NOTEMAP = NoteMap.NewEmptyMap(); RevCommit VAR_REVCOMMIT = LITERAL_NULL; try { Ref VAR_REF = repo.GetRef(notesRef); if (VAR_REF != LITERAL_NULL) { VAR_REVCOMMIT = VAR_REVWALK.ParseCommit(VAR_REF.GetObjectId()); VAR_NOTEMAP = NoteMap.Read(VAR_REVWALK.GetObjectReader(), VAR_REVCOMMIT); } VAR_NOTEMAP.Set(id, message, VAR_OBJECTINSERTER); CommitNoteMap(VAR_REVWALK, VAR_NOTEMAP, VAR_REVCOMMIT, VAR_OBJECTINSERTER, LITERAL_STRING); return VAR_NOTEMAP.GetNote(id); } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_OBJECTINSERTER.Release(); VAR_REVWALK.Release(); } }
public virtual DeleteNodegroupResponse METHOD_NAME(DeleteNodegroupRequest VAR_DELETENODEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNodegroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNodegroupResponseUnmarshaller.Instance; return Invoke<DeleteNodegroupResponse>(VAR_DELETENODEGROUPREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return _position < _limit; }
public int METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { if (this == VAR_ANYOBJECTID) { return LITERAL_INT; } int VAR_INT; VAR_INT = NB.CompareUInt32(w1, VAR_ANYOBJECTID.w1); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, VAR_ANYOBJECTID.w2); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, VAR_ANYOBJECTID.w3); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, VAR_ANYOBJECTID.w4); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, VAR_ANYOBJECTID.w5); }
public static java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[]) { return METHOD_NAME(VAR_INT[], LITERAL_INT, VAR_INT[].Length); }
public virtual ObjectId METHOD_NAME() { return newId; }
public virtual DescribeBrokerInstanceOptionsResponse METHOD_NAME(DescribeBrokerInstanceOptionsRequest VAR_DESCRIBEBROKERINSTANCEOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBrokerInstanceOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBrokerInstanceOptionsResponseUnmarshaller.Instance; return Invoke<DescribeBrokerInstanceOptionsResponse>(VAR_DESCRIBEBROKERINSTANCEOPTIONSREQUEST, VAR_VAR); }
public virtual GetDASHStreamingSessionURLResponse METHOD_NAME(GetDASHStreamingSessionURLRequest VAR_GETDASHSTREAMINGSESSIONURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDASHStreamingSessionURLRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDASHStreamingSessionURLResponseUnmarshaller.Instance; return Invoke<GetDASHStreamingSessionURLResponse>(VAR_GETDASHSTREAMINGSESSIONURLREQUEST, VAR_VAR); }
public virtual CancelJobResponse METHOD_NAME(CancelJobRequest VAR_CANCELJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelJobResponseUnmarshaller.Instance; return Invoke<CancelJobResponse>(VAR_CANCELJOBREQUEST, VAR_VAR); }
public virtual ListExperimentsResponse METHOD_NAME(ListExperimentsRequest VAR_LISTEXPERIMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListExperimentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListExperimentsResponseUnmarshaller.Instance; return Invoke<ListExperimentsResponse>(VAR_LISTEXPERIMENTSREQUEST, VAR_VAR); }
public virtual CreateSubnetGroupResponse METHOD_NAME(CreateSubnetGroupRequest VAR_CREATESUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateSubnetGroupResponse>(VAR_CREATESUBNETGROUPREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + m_weight + LITERAL_STRING; }
public virtual Executor METHOD_NAME() { return executor; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { throw Invalid(); }
public StandardQueryParser(Analyzer VAR_ANALYZER) : this() { this.Analyzer = VAR_ANALYZER; }
public IndexedUDFFinder(params UDFFinder[] VAR_UDFFINDER[]) : base(usedToolPacks) { _funcMap = new Dictionary<int, String>(); }
public static int METHOD_NAME(RefEval VAR_REFEVAL, IMatchPredicate VAR_IMATCHPREDICATE) { int VAR_INT = LITERAL_INT; for (int sIx = VAR_REFEVAL.FirstSheetIndex; sIx <= VAR_REFEVAL.LastSheetIndex; sIx++) { ValueEval VAR_VALUEEVAL = VAR_REFEVAL.GetInnerValueEval(sIx); if (VAR_IMATCHPREDICATE.Matches(VAR_VALUEEVAL)) { VAR_INT++; } } return VAR_INT; }
public NameXPxg(int VAR_INT, String VAR_STRING, String VAR_STRING) { this.VAR_INT = VAR_INT; this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; }
public MergeInfo(int VAR_INT, long VAR_LONG, bool VAR_BOOL, int VAR_INT) { this.TotalDocCount = VAR_INT; this.EstimatedMergeBytes = VAR_LONG; this.IsExternal = VAR_BOOL; this.MergeMaxNumSegments = VAR_INT; }
public virtual CreateHsmClientCertificateResponse METHOD_NAME(CreateHsmClientCertificateRequest VAR_CREATEHSMCLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHsmClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHsmClientCertificateResponseUnmarshaller.Instance; return Invoke<CreateHsmClientCertificateResponse>(VAR_CREATEHSMCLIENTCERTIFICATEREQUEST, VAR_VAR); }
public virtual IToken METHOD_NAME() { IToken VAR_ITOKEN = CurrentToken; if (VAR_ITOKEN.Type != Eof) { ((ITokenStream)InputStream).METHOD_NAME(); } bool VAR_BOOL = _parseListeners != LITERAL_NULL && _parseListeners.Count != LITERAL_INT; if (_buildParseTrees || VAR_BOOL) { if (_errHandler.InErrorRecoveryMode(this)) { IErrorNode VAR_IERRORNODE = _ctx.AddErrorNode(VAR_ITOKEN); if (_parseListeners != LITERAL_NULL) { foreach (IParseTreeListener listener in _parseListeners) { listener.VisitErrorNode(VAR_IERRORNODE); } } } else { ITerminalNode VAR_ITERMINALNODE = _ctx.AddChild(VAR_ITOKEN); if (_parseListeners != LITERAL_NULL) { foreach (IParseTreeListener listener in _parseListeners) { listener.VisitTerminal(VAR_ITERMINALNODE); } } } } return VAR_ITOKEN; }
public override bool METHOD_NAME(BytesRef VAR_BYTESREF) { int VAR_INT = FindTerm(VAR_BYTESREF); if (VAR_INT >= LITERAL_INT) { termOrd = VAR_INT; SetTerm(); return true; } else { return false; } }
public virtual DescribeEgressOnlyInternetGatewaysResponse METHOD_NAME(DescribeEgressOnlyInternetGatewaysRequest VAR_DESCRIBEEGRESSONLYINTERNETGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEgressOnlyInternetGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEgressOnlyInternetGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeEgressOnlyInternetGatewaysResponse>(VAR_DESCRIBEEGRESSONLYINTERNETGATEWAYSREQUEST, VAR_VAR); }
public virtual Ref METHOD_NAME() { Ref VAR_REF = GetTarget(); while (VAR_REF.IsSymbolic()) { VAR_REF = VAR_REF.GetTarget(); } return VAR_REF; }
public virtual void METHOD_NAME(QueryParserTokenManager VAR_QUERYPARSERTOKENMANAGER) { TokenSource = VAR_QUERYPARSERTOKENMANAGER; Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public virtual ListStacksResponse METHOD_NAME() { return METHOD_NAME(new ListStacksRequest()); }
public virtual PutInstancePublicPortsResponse METHOD_NAME(PutInstancePublicPortsRequest VAR_PUTINSTANCEPUBLICPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutInstancePublicPortsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutInstancePublicPortsResponseUnmarshaller.Instance; return Invoke<PutInstancePublicPortsResponse>(VAR_PUTINSTANCEPUBLICPORTSREQUEST, VAR_VAR); }
public virtual GetConfigurationSetResponse METHOD_NAME(GetConfigurationSetRequest VAR_GETCONFIGURATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConfigurationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConfigurationSetResponseUnmarshaller.Instance; return Invoke<GetConfigurationSetResponse>(VAR_GETCONFIGURATIONSETREQUEST, VAR_VAR); }
public static XmlElement METHOD_NAME(XmlElement VAR_XMLELEMENT) { XmlElement VAR_XMLELEMENT = GetFirstChildElement(VAR_XMLELEMENT); if (LITERAL_NULL == VAR_XMLELEMENT) { throw new ParserException(VAR_XMLELEMENT.ToString() + LITERAL_STRING); } return VAR_XMLELEMENT; }
public override string METHOD_NAME() { return LITERAL_STRING + @ref + LITERAL_STRING + cmd + LITERAL_STRING + cnt + LITERAL_STRING + skip + LITERAL_STRING; }
public static long METHOD_NAME(byte[] VAR_BYTE[]) { int VAR_INT = LITERAL_INT; long VAR_LONG = LITERAL_INT; int VAR_INT; int VAR_INT = LITERAL_INT; do { VAR_INT = VAR_BYTE[][VAR_INT++] & unchecked((int)(LITERAL_INT)); VAR_LONG |= ((long)(VAR_INT & unchecked((int)(LITERAL_INT)))) << VAR_INT; VAR_INT += LITERAL_INT; } while ((VAR_INT & unchecked((int)(LITERAL_INT))) != LITERAL_INT); return VAR_LONG; }
public virtual VerifyEmailIdentityResponse METHOD_NAME(VerifyEmailIdentityRequest VAR_VERIFYEMAILIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = VerifyEmailIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = VerifyEmailIdentityResponseUnmarshaller.Instance; return Invoke<VerifyEmailIdentityResponse>(VAR_VERIFYEMAILIDENTITYREQUEST, VAR_VAR); }
public virtual CreateInvalidationResponse METHOD_NAME(CreateInvalidationRequest VAR_CREATEINVALIDATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInvalidationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInvalidationResponseUnmarshaller.Instance; return Invoke<CreateInvalidationResponse>(VAR_CREATEINVALIDATIONREQUEST, VAR_VAR); }
public ListGroupsForUserRequest(string VAR_STRING) { _userName = VAR_STRING; }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_stream_pos); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_bucket_sst_offset); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_zero); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (typeof(QueryValueSource) != VAR_OBJECT.GetType()) { return false; } var VAR_VAR = VAR_OBJECT as QueryValueSource; if (VAR_VAR == LITERAL_NULL) return false; return this.q.METHOD_NAME(VAR_VAR.q) && this.defVal == VAR_VAR.defVal; }
public void METHOD_NAME(E VAR_E) { iterator.METHOD_NAME(VAR_E); subList.sizeChanged(true); end++; }
public virtual SessionToken METHOD_NAME(string VAR_STRING) { lock (padlock) { EnsureOpen(); if (currentRevision == LITERAL_NULL) return LITERAL_NULL; if (VAR_STRING != LITERAL_NULL && currentRevision.Revision.CompareTo(VAR_STRING) <= LITERAL_INT) return LITERAL_NULL; currentRevision.IncRef(); string VAR_STRING = sessionToken.IncrementAndGet().ToString(); SessionToken VAR_SESSIONTOKEN = new SessionToken(VAR_STRING, currentRevision.Revision); sessions[VAR_STRING] = new ReplicationSession(VAR_SESSIONTOKEN, currentRevision); return VAR_SESSIONTOKEN; } }
public virtual void METHOD_NAME(string[] VAR_STRING[]) { this.VAR_STRING[] = VAR_STRING[]; }
public FormulaRecordAggregate METHOD_NAME(int VAR_INT, int VAR_INT) { FormulaRecord VAR_FORMULARECORD = new FormulaRecord(); VAR_FORMULARECORD.Row = (VAR_INT); VAR_FORMULARECORD.Column = ((short)VAR_INT); return new FormulaRecordAggregate(VAR_FORMULARECORD, LITERAL_NULL, _sharedValueManager); }
public virtual DetectSyntaxResponse METHOD_NAME(DetectSyntaxRequest VAR_DETECTSYNTAXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectSyntaxRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectSyntaxResponseUnmarshaller.Instance; return Invoke<DetectSyntaxResponse>(VAR_DETECTSYNTAXREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length < LITERAL_INT || VAR_VALUEEVAL[].Length > LITERAL_INT) { return ErrorEval.VALUE_INVALID; } int VAR_INT = VAR_OPERATIONEVALUATIONCONTEXT.RowIndex; int VAR_INT = VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex; double VAR_DOUBLE, VAR_DOUBLE; double[] VAR_DOUBLE[]; try { VAR_DOUBLE = this.evaluator.EvaluateDateArg(VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); VAR_DOUBLE = this.evaluator.EvaluateDateArg(VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); if (VAR_DOUBLE > VAR_DOUBLE) { return ErrorEval.NAME_INVALID; } ValueEval VAR_VALUEEVAL = VAR_VALUEEVAL[].Length == LITERAL_INT ? VAR_VALUEEVAL[][LITERAL_INT] : LITERAL_NULL; VAR_DOUBLE[] = this.evaluator.EvaluateDatesArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); return new NumberEval(WorkdayCalculator.instance.CalculateWorkdays(VAR_DOUBLE, VAR_DOUBLE, VAR_DOUBLE[])); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } }
public HSSFDataValidationHelper(HSSFSheet VAR_HSSFSHEET) : base() { this.VAR_HSSFSHEET = VAR_HSSFSHEET; }
public SyncFacePicturesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public static char[] METHOD_NAME(int VAR_INT) { return ToHexChars(VAR_INT, LITERAL_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + this.phase + LITERAL_STRING + this.bytesUsed + LITERAL_STRING; }
public virtual void METHOD_NAME(int VAR_INT) { LazyInit(); p = AdjustSeekIndex(VAR_INT); }
public virtual CreateTransitGatewayPeeringAttachmentResponse METHOD_NAME(CreateTransitGatewayPeeringAttachmentRequest VAR_CREATETRANSITGATEWAYPEERINGATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayPeeringAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayPeeringAttachmentResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayPeeringAttachmentResponse>(VAR_CREATETRANSITGATEWAYPEERINGATTACHMENTREQUEST, VAR_VAR); }
public static BytesRef METHOD_NAME(BytesRef VAR_BYTESREF) { BytesRef VAR_BYTESREF = new BytesRef(); VAR_BYTESREF.CopyBytes(VAR_BYTESREF); return VAR_BYTESREF; }
public TokenCollector(int VAR_INT) { _ptgs = new Ptg[VAR_INT]; _offset = LITERAL_INT; }
public static string[] METHOD_NAME(string VAR_STRING) { List<string> VAR_LIST<STRING> = new List<string>(); DateFormatTokenizer VAR_DATEFORMATTOKENIZER = new DateFormatTokenizer(VAR_STRING); string VAR_STRING; while ((VAR_STRING = VAR_DATEFORMATTOKENIZER.GetNextToken()) != LITERAL_NULL) { VAR_LIST<STRING>.Add(VAR_STRING); } return VAR_LIST<STRING>.ToArray(); }
public virtual DescribeNatGatewaysResponse METHOD_NAME(DescribeNatGatewaysRequest VAR_DESCRIBENATGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNatGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNatGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeNatGatewaysResponse>(VAR_DESCRIBENATGATEWAYSREQUEST, VAR_VAR); }
public virtual ResetImageAttributeResponse METHOD_NAME(ResetImageAttributeRequest VAR_RESETIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetImageAttributeResponseUnmarshaller.Instance; return Invoke<ResetImageAttributeResponse>(VAR_RESETIMAGEATTRIBUTEREQUEST, VAR_VAR); }
public void METHOD_NAME(bool VAR_BOOL) { field_1_options = horizontalBorder.SetShortBoolean(field_1_options, VAR_BOOL); }
public virtual ModifyReplicationGroupResponse METHOD_NAME(ModifyReplicationGroupRequest VAR_MODIFYREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyReplicationGroupResponseUnmarshaller.Instance; return Invoke<ModifyReplicationGroupResponse>(VAR_MODIFYREPLICATIONGROUPREQUEST, VAR_VAR); }
public override bool METHOD_NAME(char[] VAR_CHAR[]) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return false; }
public virtual GetIntegrationsResponse METHOD_NAME(GetIntegrationsRequest VAR_GETINTEGRATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIntegrationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIntegrationsResponseUnmarshaller.Instance; return Invoke<GetIntegrationsResponse>(VAR_GETINTEGRATIONSREQUEST, VAR_VAR); }
public LabelRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_row = VAR_RECORDINPUTSTREAM.ReadUShort(); field_2_column = VAR_RECORDINPUTSTREAM.ReadUShort(); field_3_xf_index = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_string_len = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_unicode_flag = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); if (field_4_string_len > LITERAL_INT) { if (IsUncompressedUnicode) { field_6_value = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(field_4_string_len); } else { field_6_value = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(field_4_string_len); } } else { field_6_value = LITERAL_STRING; } if (VAR_RECORDINPUTSTREAM.Remaining > LITERAL_INT) { logger.Log(POILogger.INFO, LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING + HexDump.ToHex(VAR_RECORDINPUTSTREAM.ReadRemainder())); } }
public virtual NGit.Api.SubmoduleAddCommand METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; return this; }
public override byte METHOD_NAME() { if (currentBlockUpto == outerInstance.blockSize) { NextBlock(); } return (byte)currentBlock[currentBlockUpto++]; }
public virtual TestAlarmResponse METHOD_NAME(TestAlarmRequest VAR_TESTALARMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestAlarmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestAlarmResponseUnmarshaller.Instance; return Invoke<TestAlarmResponse>(VAR_TESTALARMREQUEST, VAR_VAR); }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { int VAR_INT = _mergedRegions.Count; if (VAR_INT < LITERAL_INT) { return; } int VAR_INT = VAR_INT / MAX_MERGED_REGIONS; int VAR_INT = VAR_INT % MAX_MERGED_REGIONS; CellRangeAddress[] VAR_CELLRANGEADDRESS[] = (CellRangeAddress[])_mergedRegions.ToArray(); for (int i = LITERAL_INT; i < VAR_INT; i++) { int VAR_INT = i * MAX_MERGED_REGIONS; VAR_RECORDVISITOR.VisitRecord(new MergeCellsRecord(VAR_CELLRANGEADDRESS[], VAR_INT, MAX_MERGED_REGIONS)); } if (VAR_INT > LITERAL_INT) { int VAR_INT = VAR_INT * MAX_MERGED_REGIONS; VAR_RECORDVISITOR.VisitRecord(new MergeCellsRecord(VAR_CELLRANGEADDRESS[], VAR_INT, VAR_INT)); } }
public CharArrayWriter() { buf = new char[LITERAL_INT]; @lock = buf; }
public SendEmailRequest(string VAR_STRING, Destination VAR_DESTINATION, Message VAR_MESSAGE) { _source = VAR_STRING; _destination = VAR_DESTINATION; _message = VAR_MESSAGE; }
public virtual DescribeReservedNodesResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedNodesRequest()); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_options)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual StopProjectVersionResponse METHOD_NAME(StopProjectVersionRequest VAR_STOPPROJECTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopProjectVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopProjectVersionResponseUnmarshaller.Instance; return Invoke<StopProjectVersionResponse>(VAR_STOPPROJECTVERSIONREQUEST, VAR_VAR); }
public virtual CreateCacheClusterResponse METHOD_NAME(CreateCacheClusterRequest VAR_CREATECACHECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCacheClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCacheClusterResponseUnmarshaller.Instance; return Invoke<CreateCacheClusterResponse>(VAR_CREATECACHECLUSTERREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if ((VAR_OBJECT is LabelAndValue) == false) { return false; } LabelAndValue VAR_LABELANDVALUE = (LabelAndValue)VAR_OBJECT; return Label.METHOD_NAME(VAR_LABELANDVALUE.Label, StringComparison.Ordinal) && Value.METHOD_NAME(VAR_LABELANDVALUE.Value); }
public JobFlowInstancesDetail(string VAR_STRING, string VAR_STRING, int VAR_INT) { _masterInstanceType = VAR_STRING; _slaveInstanceType = VAR_STRING; _instanceCount = VAR_INT; }
public override bool METHOD_NAME() { int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; VAR_INT = m_cursor; do { if (!r_mark_regions()) { goto lab0; } } while (false); lab0: m_cursor = VAR_INT; m_limit_backward = m_cursor; m_cursor = m_limit; VAR_INT = m_limit - m_cursor; do { if (!r_attached_pronoun()) { goto lab1; } } while (false); lab1: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { do { VAR_INT = m_limit - m_cursor; do { if (!r_standard_suffix()) { goto lab4; } goto lab3; } while (false); lab4: m_cursor = m_limit - VAR_INT; if (!r_verb_suffix()) { goto lab2; } } while (false); lab3: ; } while (false); lab2: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_residual_suffix()) { goto lab5; } } while (false); lab5: m_cursor = m_limit - VAR_INT; m_cursor = m_limit_backward; VAR_INT = m_cursor; do { if (!r_cleaning()) { goto lab6; } } while (false); lab6: m_cursor = VAR_INT; return true; }
public HSSFPictureData(EscherBlipRecord VAR_ESCHERBLIPRECORD) { this.VAR_ESCHERBLIPRECORD = VAR_ESCHERBLIPRECORD; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_colors.Count).Append(LITERAL_CHAR); for (int k = LITERAL_INT; k < field_2_colors.Count; k++) { PColor VAR_PCOLOR = (PColor)field_2_colors[k]; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(k).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(VAR_PCOLOR.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); } }
public string[] METHOD_NAME(java.io.FilenameFilter VAR_JAVA.IO.FILENAMEFILTER) { string[] VAR_STRING[] = METHOD_NAME(); if (VAR_JAVA.IO.FILENAMEFILTER == LITERAL_NULL || VAR_STRING[] == LITERAL_NULL) { return VAR_STRING[]; } java.util.List<string> VAR_JAVA.UTIL.LIST<STRING> = new java.util.ArrayList<string>(VAR_STRING[].Length); foreach (string filename in VAR_STRING[]) { if (VAR_JAVA.IO.FILENAMEFILTER.accept(this, filename)) { VAR_JAVA.UTIL.LIST<STRING>.add(filename); } } return VAR_JAVA.UTIL.LIST<STRING>.toArray(new string[VAR_JAVA.UTIL.LIST<STRING>.size()]); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { String VAR_STRING; int VAR_INT; try { VAR_STRING = TextFunction.EvaluateStringArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_INT = TextFunction.EvaluateIntArg(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } String VAR_STRING; if (_isLeft) { VAR_STRING = VAR_STRING.Substring(LITERAL_INT, Math.Min(VAR_STRING.Length, VAR_INT)); } else { VAR_STRING = VAR_STRING.Substring(Math.Max(LITERAL_INT, VAR_STRING.Length - VAR_INT)); } return new StringEval(VAR_STRING); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(reserved.Length); VAR_ILITTLEENDIANOUTPUT.Write(reserved); }
public HadoopJarStepConfig(string VAR_STRING) { _jar = VAR_STRING; }
public override java.io.Writer METHOD_NAME(char VAR_CHAR) { write(VAR_CHAR); return this; }
public virtual GetChannelsResponse METHOD_NAME(GetChannelsRequest VAR_GETCHANNELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetChannelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetChannelsResponseUnmarshaller.Instance; return Invoke<GetChannelsResponse>(VAR_GETCHANNELSREQUEST, VAR_VAR); }
public java.io.File METHOD_NAME() { string VAR_STRING = getParent(); if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } return new java.io.File(VAR_STRING); }
public java.net.URI METHOD_NAME(string VAR_STRING) { return METHOD_NAME(create(VAR_STRING)); }
public static Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(int VAR_INT, int VAR_INT) { Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = new Antlr4.Runtime.Misc.IntervalSet(); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.Add(VAR_INT, VAR_INT); return VAR_ANTLR4.RUNTIME.MISC.INTERVALSET; }
public virtual void METHOD_NAME(int VAR_INT) { compressionLevel = VAR_INT; }
public void METHOD_NAME() { offset = LITERAL_INT; length = LITERAL_INT; lastTrailingHighSurrogate = (char)LITERAL_INT; }
public AttributeValue(string VAR_STRING) { _s = VAR_STRING; }
public Token(int VAR_INT, int VAR_INT) { CheckOffsets(VAR_INT, VAR_INT); startOffset = VAR_INT; endOffset = VAR_INT; }
if (serializerClasses == LITERAL_NULL) { throw new org.xmlpull.v1.XmlPullParserException(LITERAL_STRING + classNamesLocation); } if (serializerClasses.size() == LITERAL_INT) { throw new org.xmlpull.v1.XmlPullParserException(LITERAL_STRING + classNamesLocation); } java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); { for (int i = LITERAL_INT; i < serializerClasses.size(); i++) { System.Type VAR_SYSTEM.TYPE = (System.Type)serializerClasses.get(i); try { org.xmlpull.v1.XmlSerializer VAR_ORG.XMLPULL.V1.XMLSERIALIZER = (org.xmlpull.v1.XmlSerializer)System.Activator.CreateInstance(VAR_SYSTEM.TYPE); return VAR_ORG.XMLPULL.V1.XMLSERIALIZER; } catch (System.Exception ex) { VAR_JAVA.LANG.STRINGBUILDER.append(VAR_SYSTEM.TYPE.FullName + LITERAL_STRING + ex.ToString() + LITERAL_STRING); } } } throw new org.xmlpull.v1.XmlPullParserException(LITERAL_STRING + VAR_JAVA.LANG.STRINGBUILDER);
public virtual UpdateDomainContactPrivacyResponse METHOD_NAME(UpdateDomainContactPrivacyRequest VAR_UPDATEDOMAINCONTACTPRIVACYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainContactPrivacyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainContactPrivacyResponseUnmarshaller.Instance; return Invoke<UpdateDomainContactPrivacyResponse>(VAR_UPDATEDOMAINCONTACTPRIVACYREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual DescribeStaleSecurityGroupsResponse METHOD_NAME(DescribeStaleSecurityGroupsRequest VAR_DESCRIBESTALESECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStaleSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStaleSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeStaleSecurityGroupsResponse>(VAR_DESCRIBESTALESECURITYGROUPSREQUEST, VAR_VAR); }
public virtual DisassociateWebsiteCertificateAuthorityResponse METHOD_NAME(DisassociateWebsiteCertificateAuthorityRequest VAR_DISASSOCIATEWEBSITECERTIFICATEAUTHORITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateWebsiteCertificateAuthorityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateWebsiteCertificateAuthorityResponseUnmarshaller.Instance; return Invoke<DisassociateWebsiteCertificateAuthorityResponse>(VAR_DISASSOCIATEWEBSITECERTIFICATEAUTHORITYREQUEST, VAR_VAR); }
public virtual DeleteTransitGatewayVpcAttachmentResponse METHOD_NAME(DeleteTransitGatewayVpcAttachmentRequest VAR_DELETETRANSITGATEWAYVPCATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayVpcAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayVpcAttachmentResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayVpcAttachmentResponse>(VAR_DELETETRANSITGATEWAYVPCATTACHMENTREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME(TreeFormatter VAR_TREEFORMATTER) { return VAR_TREEFORMATTER.ComputeId(this); }
public static bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, string VAR_STRING) { int VAR_INT = VAR_STRING.Length; if (VAR_INT > VAR_INT) { return false; } for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_CHAR[][i] != VAR_STRING[i]) { return false; } } return true; }
public virtual UpdateBatchPredictionResponse METHOD_NAME(UpdateBatchPredictionRequest VAR_UPDATEBATCHPREDICTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBatchPredictionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBatchPredictionResponseUnmarshaller.Instance; return Invoke<UpdateBatchPredictionResponse>(VAR_UPDATEBATCHPREDICTIONREQUEST, VAR_VAR); }
public void METHOD_NAME(RevFlag VAR_REVFLAG) { flags &= ~VAR_REVFLAG.mask; }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT || VAR_INT < LITERAL_INT) throw new TokenMgrError(LITERAL_STRING + VAR_INT + LITERAL_STRING, TokenMgrError.INVALID_LEXICAL_STATE); elsecurLexState = VAR_INT; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ColumnCount).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(RowCount).Append(LITERAL_STRING); for (int x = LITERAL_INT; x < ColumnCount; x++) { for (int y = LITERAL_INT; y < RowCount; y++) { Object VAR_OBJECT = _arrayValues.GetValue(GetValueIndex(x, y)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(x).Append(LITERAL_STRING).Append(y).Append(LITERAL_STRING).Append(VAR_OBJECT).Append(LITERAL_STRING); } } return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ObjectId METHOD_NAME() { return headId; }
public virtual GetAssociatedIpv6PoolCidrsResponse METHOD_NAME(GetAssociatedIpv6PoolCidrsRequest VAR_GETASSOCIATEDIPV6POOLCIDRSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAssociatedIpv6PoolCidrsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAssociatedIpv6PoolCidrsResponseUnmarshaller.Instance; return Invoke<GetAssociatedIpv6PoolCidrsResponse>(VAR_GETASSOCIATEDIPV6POOLCIDRSREQUEST, VAR_VAR); }
public void METHOD_NAME(ICell VAR_ICELL) { switch (_cellType) { case CellType.Blank: VAR_ICELL.SetCellType(CellType.Blank); return; case CellType.Numeric: VAR_ICELL.SetCellValue(_numberValue); return; case CellType.Boolean: VAR_ICELL.SetCellValue(_boolValue); return; case CellType.String: VAR_ICELL.SetCellValue(_stringValue); return; case CellType.Error: VAR_ICELL.SetCellErrorValue((byte)_errorValue); return; } throw new InvalidOperationException(LITERAL_STRING + _cellType + LITERAL_STRING); }
public virtual DescribeLaunchTemplateVersionsResponse METHOD_NAME(DescribeLaunchTemplateVersionsRequest VAR_DESCRIBELAUNCHTEMPLATEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLaunchTemplateVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLaunchTemplateVersionsResponseUnmarshaller.Instance; return Invoke<DescribeLaunchTemplateVersionsResponse>(VAR_DESCRIBELAUNCHTEMPLATEVERSIONSREQUEST, VAR_VAR); }
public static DVConstraint METHOD_NAME(String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } return new DVConstraint(ValidationType.FORMULA, OperatorType.IGNORED, VAR_STRING, LITERAL_NULL, double.NaN, double.NaN, LITERAL_NULL); }
public virtual DeleteProjectVersionResponse METHOD_NAME(DeleteProjectVersionRequest VAR_DELETEPROJECTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteProjectVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteProjectVersionResponseUnmarshaller.Instance; return Invoke<DeleteProjectVersionResponse>(VAR_DELETEPROJECTVERSIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return TermText; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_reserved0)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(_engineId)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return resourceDescription; }
public static int METHOD_NAME(ValueEval VAR_VALUEEVAL, IMatchPredicate VAR_IMATCHPREDICATE) { if (VAR_VALUEEVAL == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } if (VAR_VALUEEVAL is ThreeDEval) { return CountUtils.CountMatchingCellsInArea((ThreeDEval)VAR_VALUEEVAL, VAR_IMATCHPREDICATE); } if (VAR_VALUEEVAL is TwoDEval) { throw new ArgumentException(LITERAL_STRING); } if (VAR_VALUEEVAL is RefEval) { return CountUtils.CountMatchingCellsInRef((RefEval)VAR_VALUEEVAL, VAR_IMATCHPREDICATE); } return VAR_IMATCHPREDICATE.Matches(VAR_VALUEEVAL) ? LITERAL_INT : LITERAL_INT; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { while (VAR_INT < VAR_INT) { VAR_INT = ParseFile(VAR_BYTE[], VAR_INT, VAR_INT); } }
public virtual ListQueuesResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new ListQueuesRequest(); VAR_VAR.QueueNamePrefix = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual DescribeVolumeAttributeResponse METHOD_NAME(DescribeVolumeAttributeRequest VAR_DESCRIBEVOLUMEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVolumeAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVolumeAttributeResponseUnmarshaller.Instance; return Invoke<DescribeVolumeAttributeResponse>(VAR_DESCRIBEVOLUMEATTRIBUTEREQUEST, VAR_VAR); }
public override Trie METHOD_NAME(Trie VAR_TRIE) { IList<string> VAR_ILIST<STRING> = VAR_TRIE.cmds; IList<Row> VAR_ILIST<ROW> = new List<Row>(); IList<Row> VAR_ILIST<ROW> = VAR_TRIE.VAR_ILIST<ROW>; int[] VAR_INT[] = new int[VAR_ILIST<ROW>.Count]; for (int j = VAR_ILIST<ROW>.Count - LITERAL_INT; j >= LITERAL_INT; j--) { LiftUp(VAR_ILIST<ROW>[j], VAR_ILIST<ROW>); } Arrays.Fill(VAR_INT[], -LITERAL_INT); VAR_ILIST<ROW> = RemoveGaps(VAR_TRIE.root, VAR_ILIST<ROW>, new List<Row>(), VAR_INT[]); return new Trie(VAR_TRIE.forward, VAR_INT[][VAR_TRIE.root], VAR_ILIST<STRING>, VAR_ILIST<ROW>); }
public virtual WorkingTreeOptions METHOD_NAME() { return state.options; }
public virtual SendInvitationResponse METHOD_NAME(SendInvitationRequest VAR_SENDINVITATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendInvitationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendInvitationResponseUnmarshaller.Instance; return Invoke<SendInvitationResponse>(VAR_SENDINVITATIONREQUEST, VAR_VAR); }
public virtual DeleteAlarmsResponse METHOD_NAME(DeleteAlarmsRequest VAR_DELETEALARMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAlarmsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAlarmsResponseUnmarshaller.Instance; return Invoke<DeleteAlarmsResponse>(VAR_DELETEALARMSREQUEST, VAR_VAR); }
public static void METHOD_NAME(string[] VAR_STRING[]) { FSDirectory VAR_FSDIRECTORY = LITERAL_NULL; string VAR_STRING = LITERAL_NULL; string VAR_STRING = LITERAL_NULL; if (VAR_STRING[].Length == LITERAL_INT) { VAR_FSDIRECTORY = FSDirectory.Open(new DirectoryInfo(VAR_STRING[][LITERAL_INT])); VAR_STRING = VAR_STRING[][LITERAL_INT]; VAR_STRING = VAR_STRING[][LITERAL_INT]; } else { throw new ArgumentException(); } TermInfo(VAR_FSDIRECTORY, new Term(VAR_STRING, VAR_STRING)); }
public virtual ModifyDBSnapshotAttributeResponse METHOD_NAME(ModifyDBSnapshotAttributeRequest VAR_MODIFYDBSNAPSHOTATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBSnapshotAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBSnapshotAttributeResponseUnmarshaller.Instance; return Invoke<ModifyDBSnapshotAttributeResponse>(VAR_MODIFYDBSNAPSHOTATTRIBUTEREQUEST, VAR_VAR); }
public static string METHOD_NAME(java.io.DataInput VAR_JAVA.IO.DATAINPUT) { throw new System.NotImplementedException(); }
public virtual E METHOD_NAME(int VAR_INT) { lock (this) { E VAR_E = (E)elements[VAR_INT]; removeRange(VAR_INT, VAR_INT + LITERAL_INT); return VAR_E; } }
public byte[] METHOD_NAME(int VAR_INT) { int VAR_INT = GetActualSizeOfElements(SizeOfElements); byte[] VAR_BYTE[] = new byte[VAR_INT]; Array.Copy(_complexData, FIXED_SIZE + VAR_INT * VAR_INT, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); return VAR_BYTE[]; }
public override string METHOD_NAME(string VAR_STRING, AlibabaCloudCredentials VAR_ALIBABACLOUDCREDENTIALS) { return METHOD_NAME(VAR_STRING, VAR_ALIBABACLOUDCREDENTIALS.GetAccessKeyId()); }
public void METHOD_NAME(ByteBuffer VAR_BYTEBUFFER) { VAR_BYTEBUFFER.Write(Serialize()); }
public virtual void METHOD_NAME(SshSessionFactory VAR_SSHSESSIONFACTORY) { if (VAR_SSHSESSIONFACTORY == LITERAL_NULL) { throw new ArgumentNullException(JGitText.Get().theFactoryMustNotBeNull); } if (sock != LITERAL_NULL) { throw new InvalidOperationException(JGitText.Get().anSSHSessionHasBeenAlreadyCreated); } sch = VAR_SSHSESSIONFACTORY; }
public PipedReader(java.io.PipedWriter VAR_JAVA.IO.PIPEDWRITER) { throw new System.NotImplementedException(); }
public virtual RawText METHOD_NAME() { return currentSource.sourceText; }
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (VAR_INT > VAR_INT) { throw new System.ArgumentException(); } int VAR_INT = VAR_INT[].Length; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(); } int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = System.Math.Min(VAR_INT, VAR_INT - VAR_INT); int[] VAR_INT[] = new int[VAR_INT]; System.Array.Copy(VAR_INT[], VAR_INT, VAR_INT[], LITERAL_INT, VAR_INT); return VAR_INT[]; }
public override bool METHOD_NAME() { return false; }
public virtual ProgressMonitor METHOD_NAME() { return monitor; }
public Content(string VAR_STRING) { _data = VAR_STRING; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return map.Put(VAR_OBJECT); }
public virtual string METHOD_NAME() { return lockMessage; }
public virtual E METHOD_NAME() { if (index > from) { return (E)snapshot[--index]; } else { throw new java.util.NoSuchElementException(); } }
public virtual InviteUsersResponse METHOD_NAME(InviteUsersRequest VAR_INVITEUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InviteUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InviteUsersResponseUnmarshaller.Instance; return Invoke<InviteUsersResponse>(VAR_INVITEUSERSREQUEST, VAR_VAR); }
protected internal override bool METHOD_NAME(ShardRef VAR_SHARDREF, ShardRef VAR_SHARDREF) { Debug.Assert(VAR_SHARDREF != VAR_SHARDREF); float VAR_FLOAT = shardHits[VAR_SHARDREF.ShardIndex][VAR_SHARDREF.HitIndex].Score; float VAR_FLOAT = shardHits[VAR_SHARDREF.ShardIndex][VAR_SHARDREF.HitIndex].Score; if (VAR_FLOAT < VAR_FLOAT) { return false; } else if (VAR_FLOAT > VAR_FLOAT) { return true; } else { if (VAR_SHARDREF.ShardIndex < VAR_SHARDREF.ShardIndex) { return true; } else if (VAR_SHARDREF.ShardIndex > VAR_SHARDREF.ShardIndex) { return false; } else { Debug.Assert(VAR_SHARDREF.HitIndex != VAR_SHARDREF.HitIndex); return VAR_SHARDREF.HitIndex < VAR_SHARDREF.HitIndex; } } }
public ListSubscriptionsRequest(string VAR_STRING) { _nextToken = VAR_STRING; }
public virtual RemoveTagsFromResourceResponse METHOD_NAME(RemoveTagsFromResourceRequest VAR_REMOVETAGSFROMRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTagsFromResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTagsFromResourceResponseUnmarshaller.Instance; return Invoke<RemoveTagsFromResourceResponse>(VAR_REMOVETAGSFROMRESOURCEREQUEST, VAR_VAR); }
public virtual ListHostedZonesResponse METHOD_NAME() { return METHOD_NAME(new ListHostedZonesRequest()); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); if (IsSemiVolatile) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } if (IsSpace) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append((field_2_data >> LITERAL_INT) & LITERAL_INT); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_data & LITERAL_INT).Append(LITERAL_STRING); } if (IsOptimizedIf) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Data); } else if (IsOptimizedChoose) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Data); } else if (IsSkip) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Data); } else if (IsSum) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } else if (IsBaxcel) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = double.NaN; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length > LITERAL_INT) { VAR_DOUBLE = Math.Sqrt(devsq(VAR_DOUBLE[]) / (VAR_DOUBLE[].Length - LITERAL_INT)); } return VAR_DOUBLE; }
public virtual GetVoiceConnectorLoggingConfigurationResponse METHOD_NAME(GetVoiceConnectorLoggingConfigurationRequest VAR_GETVOICECONNECTORLOGGINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorLoggingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorLoggingConfigurationResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorLoggingConfigurationResponse>(VAR_GETVOICECONNECTORLOGGINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual GetQueueUrlResponse METHOD_NAME(GetQueueUrlRequest VAR_GETQUEUEURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQueueUrlRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQueueUrlResponseUnmarshaller.Instance; return Invoke<GetQueueUrlResponse>(VAR_GETQUEUEURLREQUEST, VAR_VAR); }
public TblPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_first_row = VAR_ILITTLEENDIANINPUT.ReadUShort(); field_2_first_col = VAR_ILITTLEENDIANINPUT.ReadUShort(); }
public long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (PackedInt32s.Reader reader in subReaders) { VAR_LONG += reader.METHOD_NAME(); } return VAR_LONG; }
public virtual CreateInternetGatewayResponse METHOD_NAME(CreateInternetGatewayRequest VAR_CREATEINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInternetGatewayResponseUnmarshaller.Instance; return Invoke<CreateInternetGatewayResponse>(VAR_CREATEINTERNETGATEWAYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { this._input = LITERAL_NULL; this._tokenFactorySourcePair = Tuple.Create((ITokenSource)this, _input); Reset(); this._input = VAR_ICHARSTREAM; this._tokenFactorySourcePair = Tuple.Create((ITokenSource)this, _input); }
public ExpPtg(int VAR_INT, int VAR_INT) { this.field_1_first_row = (short)VAR_INT; this.field_2_first_col = (short)VAR_INT; }
public virtual int METHOD_NAME() { int VAR_INT = refCount; Debug.Assert(VAR_INT >= LITERAL_INT); return VAR_INT; }
public virtual object[] METHOD_NAME() { int VAR_INT = size(); int VAR_INT = LITERAL_INT; java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = iterator(); object[] VAR_OBJECT[] = new object[VAR_INT]; while (VAR_INT < VAR_INT) { VAR_OBJECT[][VAR_INT++] = VAR_JAVA.UTIL.ITERATOR<E>.next(); } return VAR_OBJECT[]; }
public override string METHOD_NAME() { return Utils.Join(LITERAL_STRING, opnds); }
public bool METHOD_NAME() { return deleteQueue.AnyChanges(); }
public override java.nio.DoubleBuffer METHOD_NAME() { java.nio.DoubleToByteBufferAdapter VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER = new java.nio.DoubleToByteBufferAdapter(byteBuffer.METHOD_NAME()); VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER._mark = _mark; VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER.byteBuffer._order = byteBuffer._order; return VAR_JAVA.NIO.DOUBLETOBYTEBUFFERADAPTER; }
public virtual GetTelemetryMetadataResponse METHOD_NAME(GetTelemetryMetadataRequest VAR_GETTELEMETRYMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTelemetryMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTelemetryMetadataResponseUnmarshaller.Instance; return Invoke<GetTelemetryMetadataResponse>(VAR_GETTELEMETRYMETADATAREQUEST, VAR_VAR); }
public ExternalBookBlock(RecordStream VAR_RECORDSTREAM) { _externalBookRecord = (SupBookRecord)VAR_RECORDSTREAM.GetNext(); ArrayList VAR_ARRAYLIST = new ArrayList(); while (VAR_RECORDSTREAM.PeekNextClass() == typeof(ExternalNameRecord)) { VAR_ARRAYLIST.Add(VAR_RECORDSTREAM.GetNext()); } _externalNameRecords = (ExternalNameRecord[])VAR_ARRAYLIST.ToArray(typeof(ExternalNameRecord)); VAR_ARRAYLIST.Clear(); while (VAR_RECORDSTREAM.PeekNextClass() == typeof(CRNCountRecord)) { VAR_ARRAYLIST.Add(new CRNBlock(VAR_RECORDSTREAM)); } _crnBlocks = (CRNBlock[])VAR_ARRAYLIST.ToArray(typeof(CRNBlock)); }
public virtual StartDeliveryStreamEncryptionResponse METHOD_NAME(StartDeliveryStreamEncryptionRequest VAR_STARTDELIVERYSTREAMENCRYPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDeliveryStreamEncryptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDeliveryStreamEncryptionResponseUnmarshaller.Instance; return Invoke<StartDeliveryStreamEncryptionResponse>(VAR_STARTDELIVERYSTREAMENCRYPTIONREQUEST, VAR_VAR); }
public static double METHOD_NAME(DateTime VAR_DATETIME, bool VAR_BOOL) { if ((!VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT) || (VAR_BOOL && VAR_DATETIME.Year < LITERAL_INT)) { return BAD_DATE; } DateTime VAR_DATETIME; if (VAR_BOOL) { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } else { VAR_DATETIME = new DateTime(LITERAL_INT, LITERAL_INT, LITERAL_INT); } double VAR_DOUBLE = (VAR_DATETIME - VAR_DATETIME).TotalDays + LITERAL_INT; if (!VAR_BOOL && VAR_DOUBLE >= LITERAL_INT) { VAR_DOUBLE++; } else if (VAR_BOOL) { VAR_DOUBLE--; } return VAR_DOUBLE; }
public virtual UpdateFleetAttributesResponse METHOD_NAME(UpdateFleetAttributesRequest VAR_UPDATEFLEETATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFleetAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFleetAttributesResponseUnmarshaller.Instance; return Invoke<UpdateFleetAttributesResponse>(VAR_UPDATEFLEETATTRIBUTESREQUEST, VAR_VAR); }
public virtual Explanation METHOD_NAME(CollectionStatistics VAR_COLLECTIONSTATISTICS, TermStatistics VAR_TERMSTATISTICS) { long VAR_LONG = VAR_TERMSTATISTICS.DocFreq; long VAR_LONG = VAR_COLLECTIONSTATISTICS.MaxDoc; float VAR_FLOAT = Idf(VAR_LONG, VAR_LONG); return new Explanation(VAR_FLOAT, LITERAL_STRING + VAR_LONG + LITERAL_STRING + VAR_LONG + LITERAL_STRING); }
public virtual CreateGroupMembershipResponse METHOD_NAME(CreateGroupMembershipRequest VAR_CREATEGROUPMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGroupMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGroupMembershipResponseUnmarshaller.Instance; return Invoke<CreateGroupMembershipResponse>(VAR_CREATEGROUPMEMBERSHIPREQUEST, VAR_VAR); }
public GrowableWriter(int VAR_INT, int VAR_INT, float VAR_FLOAT) { this.VAR_FLOAT = VAR_FLOAT; current = PackedInt32s.GetMutable(VAR_INT, VAR_INT, this.VAR_FLOAT); currentMask = Mask(current.BitsPerValue); }
public virtual AddJobFlowStepsResponse METHOD_NAME(AddJobFlowStepsRequest VAR_ADDJOBFLOWSTEPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddJobFlowStepsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddJobFlowStepsResponseUnmarshaller.Instance; return Invoke<AddJobFlowStepsResponse>(VAR_ADDJOBFLOWSTEPSREQUEST, VAR_VAR); }
public RecalcIdRecord() { _reserved0 = LITERAL_INT; _engineId = LITERAL_INT; }
public bool METHOD_NAME() { matchFound = matchesImpl(address, input, matchOffsets); if (matchFound) { findPos = matchOffsets[LITERAL_INT]; } return matchFound; }
public FieldMaskingSpanQuery(SpanQuery VAR_SPANQUERY, string VAR_STRING) { this.VAR_SPANQUERY = VAR_SPANQUERY; this.field = VAR_STRING; }
public virtual void METHOD_NAME(float VAR_FLOAT) { METHOD_NAME(VAR_FLOAT.ToString()); }
public int METHOD_NAME(EscherBSERecord VAR_ESCHERBSERECORD) { CreateDrawingGroup(); escherBSERecords.Add(VAR_ESCHERBSERECORD); int VAR_INT = FindFirstRecordLocBySid(DrawingGroupRecord.sid); DrawingGroupRecord VAR_DRAWINGGROUPRECORD = (DrawingGroupRecord)Records[VAR_INT]; EscherContainerRecord VAR_ESCHERCONTAINERRECORD = (EscherContainerRecord)VAR_DRAWINGGROUPRECORD.GetEscherRecord(LITERAL_INT); EscherContainerRecord VAR_ESCHERCONTAINERRECORD; if (VAR_ESCHERCONTAINERRECORD.GetChild(LITERAL_INT).RecordId == EscherContainerRecord.BSTORE_CONTAINER) { VAR_ESCHERCONTAINERRECORD = (EscherContainerRecord)VAR_ESCHERCONTAINERRECORD.GetChild(LITERAL_INT); } else { VAR_ESCHERCONTAINERRECORD = new EscherContainerRecord(); VAR_ESCHERCONTAINERRECORD.RecordId = EscherContainerRecord.BSTORE_CONTAINER; List<EscherRecord> VAR_LIST<ESCHERRECORD> = VAR_ESCHERCONTAINERRECORD.ChildRecords; VAR_LIST<ESCHERRECORD>.Insert(LITERAL_INT, VAR_ESCHERCONTAINERRECORD); VAR_ESCHERCONTAINERRECORD.ChildRecords = (VAR_LIST<ESCHERRECORD>); } VAR_ESCHERCONTAINERRECORD.Options = (short)((escherBSERecords.Count << LITERAL_INT) | LITERAL_INT); VAR_ESCHERCONTAINERRECORD.AddChildRecord(VAR_ESCHERBSERECORD); return escherBSERecords.Count; }
public CreateLoadBalancerListenersRequest(string VAR_STRING, List<Listener> VAR_LIST<LISTENER>) { _loadBalancerName = VAR_STRING; _listeners = VAR_LIST<LISTENER>; }
public virtual DeleteDBClusterEndpointResponse METHOD_NAME(DeleteDBClusterEndpointRequest VAR_DELETEDBCLUSTERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBClusterEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBClusterEndpointResponseUnmarshaller.Instance; return Invoke<DeleteDBClusterEndpointResponse>(VAR_DELETEDBCLUSTERENDPOINTREQUEST, VAR_VAR); }
public virtual DescribeIngestionResponse METHOD_NAME(DescribeIngestionRequest VAR_DESCRIBEINGESTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIngestionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIngestionResponseUnmarshaller.Instance; return Invoke<DescribeIngestionResponse>(VAR_DESCRIBEINGESTIONREQUEST, VAR_VAR); }
public virtual PutCompositeAlarmResponse METHOD_NAME(PutCompositeAlarmRequest VAR_PUTCOMPOSITEALARMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutCompositeAlarmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutCompositeAlarmResponseUnmarshaller.Instance; return Invoke<PutCompositeAlarmResponse>(VAR_PUTCOMPOSITEALARMREQUEST, VAR_VAR); }
public override ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE) { IList<IParseTree> VAR_ILIST<IPARSETREE> = new List<IParseTree>(); foreach (ITree c in Trees.GetChildren(VAR_IPARSETREE)) { if (c is ParserRuleContext) { ParserRuleContext VAR_PARSERRULECONTEXT = (ParserRuleContext)c; if ((VAR_PARSERRULECONTEXT.RuleIndex == ruleIndex && !invert) || (VAR_PARSERRULECONTEXT.RuleIndex != ruleIndex && invert)) { VAR_ILIST<IPARSETREE>.Add(VAR_PARSERRULECONTEXT); } } } return VAR_ILIST<IPARSETREE>; }
public virtual CreateKeyPairResponse METHOD_NAME(CreateKeyPairRequest VAR_CREATEKEYPAIRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateKeyPairRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateKeyPairResponseUnmarshaller.Instance; return Invoke<CreateKeyPairResponse>(VAR_CREATEKEYPAIRREQUEST, VAR_VAR); }
public virtual NGit.Api.DiffCommand METHOD_NAME(AbstractTreeIterator VAR_ABSTRACTTREEITERATOR) { this.VAR_ABSTRACTTREEITERATOR = VAR_ABSTRACTTREEITERATOR; return this; }
public virtual GetDeploymentConfigResponse METHOD_NAME(GetDeploymentConfigRequest VAR_GETDEPLOYMENTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentConfigResponseUnmarshaller.Instance; return Invoke<GetDeploymentConfigResponse>(VAR_GETDEPLOYMENTCONFIGREQUEST, VAR_VAR); }
public static void METHOD_NAME(List<RecordBase> VAR_LIST<RECORDBASE>, RecordBase VAR_RECORDBASE) { int VAR_INT = FindSheetInsertPos(VAR_LIST<RECORDBASE>, VAR_RECORDBASE.GetType()); VAR_LIST<RECORDBASE>.Insert(VAR_INT, VAR_RECORDBASE); }
public void METHOD_NAME(State VAR_STATE) { if (VAR_STATE == LITERAL_NULL) { return; } do { if (!attributeImpls.ContainsKey(VAR_STATE.attribute.GetType())) { throw new ArgumentException(LITERAL_STRING + VAR_STATE.attribute.GetType().Name + LITERAL_STRING); } VAR_STATE.attribute.CopyTo(attributeImpls[VAR_STATE.attribute.GetType()]); VAR_STATE = VAR_STATE.next; } while (VAR_STATE != LITERAL_NULL); }
public virtual SendVoiceMessageResponse METHOD_NAME(SendVoiceMessageRequest VAR_SENDVOICEMESSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendVoiceMessageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendVoiceMessageResponseUnmarshaller.Instance; return Invoke<SendVoiceMessageResponse>(VAR_SENDVOICEMESSAGEREQUEST, VAR_VAR); }
public virtual DescribeLoadBalancersResponse METHOD_NAME() { return METHOD_NAME(new DescribeLoadBalancersRequest()); }
public virtual DisassociateTransitGatewayRouteTableResponse METHOD_NAME(DisassociateTransitGatewayRouteTableRequest VAR_DISASSOCIATETRANSITGATEWAYROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateTransitGatewayRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateTransitGatewayRouteTableResponseUnmarshaller.Instance; return Invoke<DisassociateTransitGatewayRouteTableResponse>(VAR_DISASSOCIATETRANSITGATEWAYROUTETABLEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(Directory VAR_DIRECTORY) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); int VAR_INT = Merges.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_INT + i).Append(LITERAL_STRING).Append(Merges[i].METHOD_NAME(VAR_DIRECTORY)); } return VAR_STRINGBUILDER.ToString(); }
public virtual DetachNetworkInterfaceResponse METHOD_NAME(DetachNetworkInterfaceRequest VAR_DETACHNETWORKINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachNetworkInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<DetachNetworkInterfaceResponse>(VAR_DETACHNETWORKINTERFACEREQUEST, VAR_VAR); }
public virtual ObjectInserter METHOD_NAME() { return ObjectDatabase.NewInserter(); }
public Type METHOD_NAME() { return _c.DeclaringType; }
public StringBufferInputStream(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } buffer = VAR_STRING; count = VAR_STRING.Length; }
public DeletedRef3DPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_index_extern_sheet = VAR_ILITTLEENDIANINPUT.ReadUShort(); unused1 = VAR_ILITTLEENDIANINPUT.ReadInt(); }
public CellRangeAddress METHOD_NAME(int VAR_INT) { CheckIndex(VAR_INT); return (CellRangeAddress)_mergedRegions[VAR_INT]; }
public virtual bool METHOD_NAME(RefSpec VAR_REFSPEC) { return push.Remove(VAR_REFSPEC); }
public virtual CreateJobResponse METHOD_NAME(CreateJobRequest VAR_CREATEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateJobResponseUnmarshaller.Instance; return Invoke<CreateJobResponse>(VAR_CREATEJOBREQUEST, VAR_VAR); }
public virtual CreateResourceResponse METHOD_NAME(CreateResourceRequest VAR_CREATERESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateResourceResponseUnmarshaller.Instance; return Invoke<CreateResourceResponse>(VAR_CREATERESOURCEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return LITERAL_STRING + TERM + LITERAL_STRING + LITERAL_STRING + CT + LITERAL_STRING + LITERAL_STRING + RV + LITERAL_STRING + LITERAL_STRING + R1 + LITERAL_STRING + LITERAL_STRING + R2 + LITERAL_STRING; }
public virtual VerifyDomainIdentityResponse METHOD_NAME(VerifyDomainIdentityRequest VAR_VERIFYDOMAINIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = VerifyDomainIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = VerifyDomainIdentityResponseUnmarshaller.Instance; return Invoke<VerifyDomainIdentityResponse>(VAR_VERIFYDOMAINIDENTITYREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { CheckIndex(VAR_INT); _mergedRegions.RemoveAt(VAR_INT); }
public static Record[] METHOD_NAME(RecordInputStream VAR_RECORDINPUTSTREAM) { Record VAR_RECORD = CreateSingleRecord(VAR_RECORDINPUTSTREAM); if (VAR_RECORD is DBCellRecord) { return new Record[] { LITERAL_NULL, }; } if (VAR_RECORD is RKRecord) { return new Record[] { ConvertToNumberRecord((RKRecord)VAR_RECORD), }; } if (VAR_RECORD is MulRKRecord) { return ConvertRKRecords((MulRKRecord)VAR_RECORD); } return new Record[] { VAR_RECORD, }; }
public virtual DeleteIpGroupResponse METHOD_NAME(DeleteIpGroupRequest VAR_DELETEIPGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIpGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIpGroupResponseUnmarshaller.Instance; return Invoke<DeleteIpGroupResponse>(VAR_DELETEIPGROUPREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException e) { return e.GetErrorEval(); } if (VAR_DOUBLE == LITERAL_INT) { return NumberEval.ZERO; } return new NumberEval(-VAR_DOUBLE); }
public override string METHOD_NAME() { return LITERAL_STRING + ruleIndex + LITERAL_STRING + actionIndex; }
public virtual StopFleetResponse METHOD_NAME(StopFleetRequest VAR_STOPFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopFleetResponseUnmarshaller.Instance; return Invoke<StopFleetResponse>(VAR_STOPFLEETREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return (LITERAL_STRING + termtext.Utf8ToString() + LITERAL_STRING + DocFreq + LITERAL_STRING + TotalTermFreq); }
public Token METHOD_NAME() { if (Token.Next != LITERAL_NULL) Token = Token.Next; else Token = Token.Next = TokenSource.METHOD_NAME(); jj_ntk = -LITERAL_INT; jj_gen++; return Token; }
public virtual GetLabelDetectionResponse METHOD_NAME(GetLabelDetectionRequest VAR_GETLABELDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLabelDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLabelDetectionResponseUnmarshaller.Instance; return Invoke<GetLabelDetectionResponse>(VAR_GETLABELDETECTIONREQUEST, VAR_VAR); }
public virtual IndexCommit METHOD_NAME(long VAR_LONG) { lock (this) { return m_indexCommits[VAR_LONG]; } }
public virtual ListMetricsResponse METHOD_NAME(ListMetricsRequest VAR_LISTMETRICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMetricsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMetricsResponseUnmarshaller.Instance; return Invoke<ListMetricsResponse>(VAR_LISTMETRICSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { throw new NotSupportedException(LITERAL_STRING); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { checkIndex(VAR_INT, libcore.io.SizeOf.CHAR); libcore.io.Memory.pokeShort(backingArray, offset + VAR_INT, (short)VAR_CHAR, _order); return this; }
public virtual CreateBasePathMappingResponse METHOD_NAME(CreateBasePathMappingRequest VAR_CREATEBASEPATHMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBasePathMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBasePathMappingResponseUnmarshaller.Instance; return Invoke<CreateBasePathMappingResponse>(VAR_CREATEBASEPATHMAPPINGREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, char[] VAR_CHAR[]) { lock (this) { insert0(VAR_INT, VAR_CHAR[]); return this; } }
public virtual DescribeDBInstancesResponse METHOD_NAME(DescribeDBInstancesRequest VAR_DESCRIBEDBINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBInstancesResponseUnmarshaller.Instance; return Invoke<DescribeDBInstancesResponse>(VAR_DESCRIBEDBINSTANCESREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public virtual bool METHOD_NAME(E VAR_E) { throw new System.NotSupportedException(); }
public virtual ICollection<TrackingRefUpdate> METHOD_NAME() { return Sharpen.Collections.UnmodifiableCollection(updates.Values); }
public ConfirmProductInstanceRequest(string VAR_STRING, string VAR_STRING) { _productCode = VAR_STRING; _instanceId = VAR_STRING; }
public AnalyzerFactory(IList<CharFilterFactory> VAR_ILIST<CHARFILTERFACTORY>, TokenizerFactory VAR_TOKENIZERFACTORY, IList<TokenFilterFactory> VAR_ILIST<TOKENFILTERFACTORY>) { this.VAR_ILIST<CHARFILTERFACTORY> = VAR_ILIST<CHARFILTERFACTORY>; Debug.Assert(LITERAL_NULL != VAR_TOKENIZERFACTORY); this.VAR_TOKENIZERFACTORY = VAR_TOKENIZERFACTORY; this.VAR_ILIST<TOKENFILTERFACTORY> = VAR_ILIST<TOKENFILTERFACTORY>; }
public virtual DeleteRestApiResponse METHOD_NAME(DeleteRestApiRequest VAR_DELETERESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRestApiResponseUnmarshaller.Instance; return Invoke<DeleteRestApiResponse>(VAR_DELETERESTAPIREQUEST, VAR_VAR); }
public java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Protect).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = LITERAL_NULL == VAR_STRING ? LITERAL_STRING : VAR_STRING; }
public virtual java.util.ListIterator<E> METHOD_NAME() { lock (mutex) { return list.METHOD_NAME(); } }
public FileOutputStream(java.io.File VAR_JAVA.IO.FILE) : this(file, false) { throw new System.NotImplementedException(); }
public virtual SetInstanceHealthResponse METHOD_NAME(SetInstanceHealthRequest VAR_SETINSTANCEHEALTHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetInstanceHealthRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetInstanceHealthResponseUnmarshaller.Instance; return Invoke<SetInstanceHealthResponse>(VAR_SETINSTANCEHEALTHREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return this.type == TYPE_UNDERFLOW; }
public virtual PutRecordsResponse METHOD_NAME(PutRecordsRequest VAR_PUTRECORDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRecordsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRecordsResponseUnmarshaller.Instance; return Invoke<PutRecordsResponse>(VAR_PUTRECORDSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { lock (this) { return mIndeterminate; } }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K) { return this.subMap(default(K), java.util.TreeMap.Bound.NO_BOUND, VAR_K, java.util.TreeMap.Bound.EXCLUSIVE); }
public bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } bool VAR_BOOL = !AreValuesEqual(_value, VAR_VALUEEVAL); _value = VAR_VALUEEVAL; return VAR_BOOL; }
public virtual ListTablesResponse METHOD_NAME() { return METHOD_NAME(new ListTablesRequest()); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } int VAR_INT; try { VAR_INT = EvaluateArgParity(VAR_VALUEEVAL[][LITERAL_INT], VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex); } catch (EvaluationException e) { return e.GetErrorEval(); } return BoolEval.ValueOf(VAR_INT == _desiredParity); }
public char METHOD_NAME(int VAR_INT) { return (char)(buffer[startPtr + VAR_INT] & unchecked((int)(LITERAL_INT))); }
public CFHeaderRecord(CellRangeAddress[] VAR_CELLRANGEADDRESS[], int VAR_INT) { CellRangeAddress[] VAR_CELLRANGEADDRESS[] = VAR_CELLRANGEADDRESS[]; CellRangeAddress[] VAR_CELLRANGEADDRESS[] = CellRangeUtil.MergeCellRanges(VAR_CELLRANGEADDRESS[]); CellRanges = VAR_CELLRANGEADDRESS[]; field_1_numcf = VAR_INT; }
public LayoutParams(int VAR_INT, int VAR_INT) : base(width, height) { weight = LITERAL_INT; }
public override string METHOD_NAME() { return LITERAL_STRING + Format + LITERAL_STRING + BitsPerValue + LITERAL_STRING; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; VAR_SRNDQUERY = FieldsQuery(); Jj_consume_token(LITERAL_INT); { if (true) return VAR_SRNDQUERY; } throw new Exception(LITERAL_STRING); }
public ObjectId METHOD_NAME() { if (GetType() == typeof(ObjectId)) { return (ObjectId)this; } return new ObjectId(this); }
public virtual DescribeReservedCacheNodesResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedCacheNodesRequest()); }
public java.lang.StringBuilder METHOD_NAME(char[] VAR_CHAR[]) { append0(VAR_CHAR[]); return this; }
public bool METHOD_NAME(char VAR_CHAR) { return start <= VAR_CHAR && VAR_CHAR <= end; }
public DetachVolumeRequest(string VAR_STRING) { _volumeId = VAR_STRING; }
public PersonIdent METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.Committer(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return LITERAL_NULL; } return RawParseUtils.ParsePersonIdent(VAR_BYTE[], VAR_INT); }
public SnowballPorterFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { language = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, LITERAL_STRING); wordFiles = Get(VAR_IDICTIONARY<STRING, STRING>, PROTECTED_TOKENS); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public override string METHOD_NAME(int VAR_INT, int VAR_INT) { switch (VAR_INT) { case BreakIterator.WordIdeo: return WORD_IDEO; case BreakIterator.WordKana: return VAR_INT == UScript.Hiragana ? WORD_HIRAGANA : WORD_KATAKANA; case BreakIterator.WordLetter: return VAR_INT == UScript.Hangul ? WORD_HANGUL : WORD_LETTER; case BreakIterator.WordNumber: return WORD_NUMBER; default: return LITERAL_STRING; } }
public static TopDocs METHOD_NAME(Sort VAR_SORT, int VAR_INT, TopDocs[] VAR_TOPDOCS[]) { return METHOD_NAME(VAR_SORT, LITERAL_INT, VAR_INT, VAR_TOPDOCS[]); }
public virtual EnableDomainTransferLockResponse METHOD_NAME(EnableDomainTransferLockRequest VAR_ENABLEDOMAINTRANSFERLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableDomainTransferLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableDomainTransferLockResponseUnmarshaller.Instance; return Invoke<EnableDomainTransferLockResponse>(VAR_ENABLEDOMAINTRANSFERLOCKREQUEST, VAR_VAR); }
public virtual DeleteConfigurationProfileResponse METHOD_NAME(DeleteConfigurationProfileRequest VAR_DELETECONFIGURATIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConfigurationProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConfigurationProfileResponseUnmarshaller.Instance; return Invoke<DeleteConfigurationProfileResponse>(VAR_DELETECONFIGURATIONPROFILEREQUEST, VAR_VAR); }
public virtual DescribeExpressionsResponse METHOD_NAME(DescribeExpressionsRequest VAR_DESCRIBEEXPRESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeExpressionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeExpressionsResponseUnmarshaller.Instance; return Invoke<DescribeExpressionsResponse>(VAR_DESCRIBEEXPRESSIONSREQUEST, VAR_VAR); }
public Ptg[] METHOD_NAME() { return _ptgs; }
public virtual GetDistributionConfigResponse METHOD_NAME(GetDistributionConfigRequest VAR_GETDISTRIBUTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDistributionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDistributionConfigResponseUnmarshaller.Instance; return Invoke<GetDistributionConfigResponse>(VAR_GETDISTRIBUTIONCONFIGREQUEST, VAR_VAR); }
public virtual java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); }
public virtual GetMetricWidgetImageResponse METHOD_NAME(GetMetricWidgetImageRequest VAR_GETMETRICWIDGETIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMetricWidgetImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMetricWidgetImageResponseUnmarshaller.Instance; return Invoke<GetMetricWidgetImageResponse>(VAR_GETMETRICWIDGETIMAGEREQUEST, VAR_VAR); }
public virtual UpdateVoiceConnectorGroupResponse METHOD_NAME(UpdateVoiceConnectorGroupRequest VAR_UPDATEVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<UpdateVoiceConnectorGroupResponse>(VAR_UPDATEVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public void METHOD_NAME(SortField VAR_SORTFIELD) { map[VAR_SORTFIELD.Field] = VAR_SORTFIELD; }
public virtual Daemon METHOD_NAME() { return daemon; }
public virtual CreateVpcPeeringConnectionResponse METHOD_NAME(CreateVpcPeeringConnectionRequest VAR_CREATEVPCPEERINGCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcPeeringConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcPeeringConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpcPeeringConnectionResponse>(VAR_CREATEVPCPEERINGCONNECTIONREQUEST, VAR_VAR); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual DescribeExclusionsResponse METHOD_NAME(DescribeExclusionsRequest VAR_DESCRIBEEXCLUSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeExclusionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeExclusionsResponseUnmarshaller.Instance; return Invoke<DescribeExclusionsResponse>(VAR_DESCRIBEEXCLUSIONSREQUEST, VAR_VAR); }
public virtual SearchNetworkProfilesResponse METHOD_NAME(SearchNetworkProfilesRequest VAR_SEARCHNETWORKPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchNetworkProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchNetworkProfilesResponseUnmarshaller.Instance; return Invoke<SearchNetworkProfilesResponse>(VAR_SEARCHNETWORKPROFILESREQUEST, VAR_VAR); }
public RefDirectory.LooseRef METHOD_NAME(ObjectIdRef VAR_OBJECTIDREF) { throw new NGit.Errors.NotSupportedException(); }
public virtual void METHOD_NAME(float VAR_FLOAT) { METHOD_NAME(VAR_FLOAT.ToString()); }
public PurchaseReservedInstancesOfferingRequest(string VAR_STRING, int VAR_INT) { _reservedInstancesOfferingId = VAR_STRING; _instanceCount = VAR_INT; }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(diff.METHOD_NAME()); }
public virtual string METHOD_NAME() { return tag; }
public virtual void METHOD_NAME(FieldConfig VAR_FIELDCONFIG) { DateTools.Resolution? VAR_DATETOOLS.RESOLUTION? = LITERAL_NULL; IDictionary<string, DateTools.Resolution?> VAR_IDICTIONARY<STRING, DATETOOLS.RESOLUTION?> = this.config.Get(ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP); if (VAR_IDICTIONARY<STRING, DATETOOLS.RESOLUTION?> != LITERAL_NULL) { VAR_IDICTIONARY<STRING, DATETOOLS.RESOLUTION?>.TryGetValue(VAR_FIELDCONFIG.Field, out VAR_DATETOOLS.RESOLUTION?); } if (VAR_DATETOOLS.RESOLUTION? == LITERAL_NULL) { VAR_DATETOOLS.RESOLUTION? = this.config.Get(ConfigurationKeys.DATE_RESOLUTION); } if (VAR_DATETOOLS.RESOLUTION? != LITERAL_NULL) { VAR_FIELDCONFIG.Set(ConfigurationKeys.DATE_RESOLUTION, VAR_DATETOOLS.RESOLUTION?.Value); } }
public override String METHOD_NAME() { return Value.ToString(CultureInfo.InvariantCulture); }
public virtual IBits METHOD_NAME() { return matchingGroupHeads; }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); int VAR_INT = VAR_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); VAR_INT += LITERAL_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, RecordId); VAR_INT += LITERAL_INT; int VAR_INT = RecordSize - LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_1_color1); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_2_color2); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_3_color3); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_4_color4); VAR_INT += LITERAL_INT; VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return RecordSize; }
public override bool METHOD_NAME(E VAR_E) { return backingMap.put(VAR_E, true) == LITERAL_NULL; }
public virtual void METHOD_NAME(int VAR_INT) { this.binaryFileThreshold = VAR_INT; }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); pauseMSec = (long)(LITERAL_INT * float.Parse(VAR_STRING, CultureInfo.InvariantCulture)); }
public PerfTask(PerfRunData VAR_PERFRUNDATA) : this() { this.VAR_PERFRUNDATA = VAR_PERFRUNDATA; Config VAR_CONFIG = VAR_PERFRUNDATA.Config; this.maxDepthLogStart = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_INT); string VAR_STRING = LITERAL_STRING; string VAR_STRING = LITERAL_STRING + name; if (VAR_CONFIG.Get(VAR_STRING, LITERAL_NULL) != LITERAL_NULL) { VAR_STRING = VAR_STRING; } m_logStep = VAR_CONFIG.Get(VAR_STRING, DEFAULT_LOG_STEP); if (m_logStep <= LITERAL_INT) { m_logStep = int.MaxValue; } }
public override void METHOD_NAME(double VAR_DOUBLE) { this.VAR_DOUBLE = VAR_DOUBLE; if (VAR_DOUBLE == LITERAL_INT) nsPerByte = LITERAL_INT; elsensPerByte = LITERAL_INT / (LITERAL_INT * LITERAL_INT * VAR_DOUBLE); }
public ConfirmSubscriptionRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _token = VAR_STRING; _authenticateOnUnsubscribe = VAR_STRING; }
public virtual string METHOD_NAME() { return hostName; }
public virtual StartMonitoringMemberResponse METHOD_NAME(StartMonitoringMemberRequest VAR_STARTMONITORINGMEMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMonitoringMemberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMonitoringMemberResponseUnmarshaller.Instance; return Invoke<StartMonitoringMemberResponse>(VAR_STARTMONITORINGMEMBERREQUEST, VAR_VAR); }
public EscherProperty METHOD_NAME(int VAR_INT) { foreach (EscherProperty prop in properties) { if (prop.PropertyNumber == VAR_INT) { return prop; } } return LITERAL_NULL; }
public virtual bool METHOD_NAME() { return expectedOldObjectId != LITERAL_NULL; }
public int METHOD_NAME(ScoreTerm VAR_SCORETERM) { if (this.Boost == VAR_SCORETERM.Boost) { return TermComp.Compare(VAR_SCORETERM.Bytes, this.Bytes); } else { return this.Boost.METHOD_NAME(VAR_SCORETERM.Boost); } }
public override TwoDEval METHOD_NAME(int VAR_INT) { if (VAR_INT >= Width) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + Width + LITERAL_STRING); } int VAR_INT = FirstColumn + VAR_INT; return new LazyAreaEval(FirstRow, VAR_INT, LastRow, VAR_INT, _evaluator); }
public BytesRef METHOD_NAME() { if (done) { return LITERAL_NULL; } bool VAR_BOOL = false; BytesRef VAR_BYTESREF; try { string VAR_STRING; if ((VAR_STRING = outerInstance.@in.ReadLine()) != LITERAL_NULL) { spare.CopyChars(VAR_STRING); VAR_BYTESREF = spare; } else { done = true; IOUtils.Dispose(outerInstance.@in); VAR_BYTESREF = LITERAL_NULL; } VAR_BOOL = true; } finally { if (!VAR_BOOL) { IOUtils.DisposeWhileHandlingException(outerInstance.@in); } } return VAR_BYTESREF; }
public override bool METHOD_NAME() { return path.METHOD_NAME(); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_STRING + compressionMode + LITERAL_STRING + chunkSize + LITERAL_STRING; }
public virtual ApplyPendingMaintenanceActionResponse METHOD_NAME(ApplyPendingMaintenanceActionRequest VAR_APPLYPENDINGMAINTENANCEACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ApplyPendingMaintenanceActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ApplyPendingMaintenanceActionResponseUnmarshaller.Instance; return Invoke<ApplyPendingMaintenanceActionResponse>(VAR_APPLYPENDINGMAINTENANCEACTIONREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(AbbreviatedObjectId VAR_ABBREVIATEDOBJECTID) { return VAR_ABBREVIATEDOBJECTID.PrefixCompare(this) == LITERAL_INT; }
public SerializingRecordVisitor(byte[] VAR_BYTE[], int VAR_INT) { _data = VAR_BYTE[]; _startOffset = VAR_INT; _countBytesWritten = LITERAL_INT; }
public static TreeFilter METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>) { if (VAR_ICOLLECTION<STRING>.IsEmpty()) { throw new ArgumentException(JGitText.Get().atLeastOnePathIsRequired); } PathFilter[] VAR_PATHFILTER[] = new PathFilter[VAR_ICOLLECTION<STRING>.Count]; int VAR_INT = LITERAL_INT; foreach (string s in VAR_ICOLLECTION<STRING>) { VAR_PATHFILTER[][VAR_INT++] = PathFilter.Create(s); } return Create(VAR_PATHFILTER[]); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(DefaultCountry); VAR_ILITTLEENDIANOUTPUT.WriteShort(CurrentCountry); }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (mutex) { return list.METHOD_NAME(VAR_OBJECT); } }
public CellFormatter(String VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public override ObjectId METHOD_NAME() { return resultTree; }
public override object METHOD_NAME() { return new DrillDownQuery(config, query, drillDownDims); }
public sealed override java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void METHOD_NAME(long VAR_LONG) { throw new System.NotImplementedException(); }
public virtual AuthorizeSecurityGroupEgressResponse METHOD_NAME(AuthorizeSecurityGroupEgressRequest VAR_AUTHORIZESECURITYGROUPEGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeSecurityGroupEgressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeSecurityGroupEgressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupEgressResponse>(VAR_AUTHORIZESECURITYGROUPEGRESSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(E VAR_E) { throw new System.NotSupportedException(); }
public static string METHOD_NAME(string VAR_STRING) { string VAR_STRING; posTranslations.TryGetValue(VAR_STRING, out VAR_STRING); return VAR_STRING; }
public AnalyticsTagPredicate(Tag VAR_TAG) { this.VAR_TAG = VAR_TAG; }
public virtual string METHOD_NAME(Parser VAR_PARSER) { List<string> VAR_LIST<STRING> = new List<string>(VAR_PARSER.GetRuleInvocationStack(this)); VAR_LIST<STRING>.Reverse(); return LITERAL_STRING + VAR_LIST<STRING> + LITERAL_STRING + LITERAL_STRING + _start + LITERAL_STRING + _stop + LITERAL_CHAR; }
public override java.nio.CharBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_CHAR; return this; }
public virtual CreateComponentResponse METHOD_NAME(CreateComponentRequest VAR_CREATECOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateComponentResponseUnmarshaller.Instance; return Invoke<CreateComponentResponse>(VAR_CREATECOMPONENTREQUEST, VAR_VAR); }
public RuleWithSuffixExceptions(string VAR_STRING, int VAR_INT, string VAR_STRING, string[] VAR_STRING[]) : base(suffix, min, replacement) { for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (!VAR_STRING[][i].EndsWith(VAR_STRING, StringComparison.Ordinal)) { throw new Exception(LITERAL_STRING + VAR_STRING[][i] + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } } this.m_exceptions = new char[VAR_STRING[].Length][]; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { this.m_exceptions[i] = VAR_STRING[][i].ToCharArray(); } }
public virtual DescribeVpnGatewaysResponse METHOD_NAME(DescribeVpnGatewaysRequest VAR_DESCRIBEVPNGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpnGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpnGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeVpnGatewaysResponse>(VAR_DESCRIBEVPNGATEWAYSREQUEST, VAR_VAR); }
public HSSFClientAnchor(EscherClientAnchorRecord VAR_ESCHERCLIENTANCHORRECORD) { this._escherClientAnchor = VAR_ESCHERCLIENTANCHORRECORD; }
public virtual void METHOD_NAME() { stopNow = true; }
public override string METHOD_NAME() { return LITERAL_STRING + name + LITERAL_STRING; }
public virtual GetRelationalDatabasesResponse METHOD_NAME(GetRelationalDatabasesRequest VAR_GETRELATIONALDATABASESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabasesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabasesResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabasesResponse>(VAR_GETRELATIONALDATABASESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(IRevision VAR_IREVISION) { IndexRevision VAR_INDEXREVISION = (IndexRevision)VAR_IREVISION; return commit.METHOD_NAME(VAR_INDEXREVISION.commit); }
public PredPrediction(SemanticContext VAR_SEMANTICCONTEXT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_SEMANTICCONTEXT = VAR_SEMANTICCONTEXT; }
public virtual ListMeetingTagsResponse METHOD_NAME(ListMeetingTagsRequest VAR_LISTMEETINGTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListMeetingTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListMeetingTagsResponseUnmarshaller.Instance; return Invoke<ListMeetingTagsResponse>(VAR_LISTMEETINGTAGSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new NorwegianMinimalStemFilter(VAR_TOKENSTREAM, flags); }
public virtual ImportInstanceResponse METHOD_NAME(ImportInstanceRequest VAR_IMPORTINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportInstanceResponseUnmarshaller.Instance; return Invoke<ImportInstanceResponse>(VAR_IMPORTINSTANCEREQUEST, VAR_VAR); }
public void METHOD_NAME(CodepageRecord VAR_CODEPAGERECORD) { this.VAR_CODEPAGERECORD = VAR_CODEPAGERECORD; }
public override java.util.Collection<V> METHOD_NAME() { java.util.Collection<V> VAR_JAVA.UTIL.COLLECTION<V> = _values; return (VAR_JAVA.UTIL.COLLECTION<V> != LITERAL_NULL) ? VAR_JAVA.UTIL.COLLECTION<V> : (_values = new java.util.HashMap<K, V>.Values(this)); }
public virtual UpdateRulesOfIpGroupResponse METHOD_NAME(UpdateRulesOfIpGroupRequest VAR_UPDATERULESOFIPGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRulesOfIpGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRulesOfIpGroupResponseUnmarshaller.Instance; return Invoke<UpdateRulesOfIpGroupResponse>(VAR_UPDATERULESOFIPGROUPREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + outputs + LITERAL_STRING; }
public static TreeFilter METHOD_NAME(TreeFilter VAR_TREEFILTER, TreeFilter VAR_TREEFILTER) { if (VAR_TREEFILTER == ALL || VAR_TREEFILTER == ALL) { return ALL; } return new OrTreeFilter.Binary(VAR_TREEFILTER, VAR_TREEFILTER); }
public virtual UntagQueueResponse METHOD_NAME(UntagQueueRequest VAR_UNTAGQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagQueueResponseUnmarshaller.Instance; return Invoke<UntagQueueResponse>(VAR_UNTAGQUEUEREQUEST, VAR_VAR); }
public sealed override double METHOD_NAME(int VAR_INT) { return Sharpen.Util.LongBitsToDouble(getLong(VAR_INT)); }
public override V METHOD_NAME() { return this.nextEntry().value; }
public IntervalSet(params int[] VAR_INT[]) { if (VAR_INT[] == LITERAL_NULL) { intervals = new ArrayList<Interval>(LITERAL_INT); } else { intervals = new ArrayList<Interval>(VAR_INT[].Length); foreach (int e in VAR_INT[]) { Add(e); } } }
public void METHOD_NAME(NoViableAltException VAR_NOVIABLEALTEXCEPTION) { System.Console.Error.WriteLine(LITERAL_STRING); foreach (ATNConfig c in VAR_NOVIABLEALTEXCEPTION.DeadEndConfigs.configs) { String VAR_STRING = LITERAL_STRING; if (c.state.NumberOfTransitions > LITERAL_INT) { Transition VAR_TRANSITION = c.state.Transition(LITERAL_INT); if (VAR_TRANSITION is AtomTransition) { AtomTransition VAR_ATOMTRANSITION = (AtomTransition)VAR_TRANSITION; VAR_STRING = LITERAL_STRING + GetTokenName(VAR_ATOMTRANSITION.token); } else if (VAR_TRANSITION is SetTransition) { SetTransition VAR_SETTRANSITION = (SetTransition)VAR_TRANSITION; bool VAR_BOOL = VAR_SETTRANSITION is NotSetTransition; VAR_STRING = (VAR_BOOL ? LITERAL_STRING : LITERAL_STRING) + LITERAL_STRING + VAR_SETTRANSITION.set.ToString(); } } System.Console.Error.WriteLine(c.ToString(parser, true) + LITERAL_STRING + VAR_STRING); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (IsExternalReferences) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_2_encoded_url).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_number_of_sheets).Append(LITERAL_STRING); foreach (String sheetname in field_3_sheet_names) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(sheetname).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); } else if (_isAddInFunctions) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(field_1_number_of_sheets); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_cbFContinued)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(_linkPtg.METHOD_NAME()).Append(_linkPtg.RVAType).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_cLines)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_iSel)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_idEdit)).Append(LITERAL_STRING); if (_dropData != LITERAL_NULL) VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(_dropData.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static QualityStats METHOD_NAME(QualityStats[] VAR_QUALITYSTATS[]) { QualityStats VAR_QUALITYSTATS = new QualityStats(LITERAL_INT, LITERAL_INT); if (VAR_QUALITYSTATS[].Length == LITERAL_INT) { return VAR_QUALITYSTATS; } int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_QUALITYSTATS[].Length; i++) { VAR_QUALITYSTATS.searchTime += VAR_QUALITYSTATS[][i].searchTime; VAR_QUALITYSTATS.docNamesExtractTime += VAR_QUALITYSTATS[][i].docNamesExtractTime; if (VAR_QUALITYSTATS[][i].maxGoodPoints > LITERAL_INT) { VAR_INT++; VAR_QUALITYSTATS.numGoodPoints += VAR_QUALITYSTATS[][i].numGoodPoints; VAR_QUALITYSTATS.numPoints += VAR_QUALITYSTATS[][i].numPoints; VAR_QUALITYSTATS.pReleventSum += VAR_QUALITYSTATS[][i].GetAvp(); VAR_QUALITYSTATS.recall += VAR_QUALITYSTATS[][i].recall; VAR_QUALITYSTATS.mrr += VAR_QUALITYSTATS[][i].MRR; VAR_QUALITYSTATS.maxGoodPoints += VAR_QUALITYSTATS[][i].maxGoodPoints; for (int j = LITERAL_INT; j < VAR_QUALITYSTATS.pAt.Length; j++) { VAR_QUALITYSTATS.pAt[j] += VAR_QUALITYSTATS[][i].GetPrecisionAt(j); } } } Debug.Assert(VAR_INT > LITERAL_INT, LITERAL_STRING); VAR_QUALITYSTATS.searchTime /= VAR_QUALITYSTATS[].Length; VAR_QUALITYSTATS.docNamesExtractTime /= VAR_QUALITYSTATS[].Length; VAR_QUALITYSTATS.numGoodPoints /= VAR_INT; VAR_QUALITYSTATS.numPoints /= VAR_INT; VAR_QUALITYSTATS.recall /= VAR_INT; VAR_QUALITYSTATS.mrr /= VAR_INT; VAR_QUALITYSTATS.maxGoodPoints /= VAR_INT; for (int j = LITERAL_INT; j < VAR_QUALITYSTATS.pAt.Length; j++) { VAR_QUALITYSTATS.pAt[j] /= VAR_INT; } VAR_QUALITYSTATS.pReleventSum /= VAR_INT; VAR_QUALITYSTATS.pReleventSum *= VAR_QUALITYSTATS.maxGoodPoints; return VAR_QUALITYSTATS; }
public virtual string METHOD_NAME() { return user; }
public override int[] METHOD_NAME() { boost = LITERAL_NULL; termState = LITERAL_NULL; return base.METHOD_NAME(); }
public virtual DescribeApplicationSnapshotResponse METHOD_NAME(DescribeApplicationSnapshotRequest VAR_DESCRIBEAPPLICATIONSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeApplicationSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeApplicationSnapshotResponseUnmarshaller.Instance; return Invoke<DescribeApplicationSnapshotResponse>(VAR_DESCRIBEAPPLICATIONSNAPSHOTREQUEST, VAR_VAR); }
public FormatAndBits(Format VAR_FORMAT, int VAR_INT) { this.Format = VAR_FORMAT; this.BitsPerValue = VAR_INT; }
public NPOI.SS.UserModel.IName METHOD_NAME(int VAR_INT) { int VAR_INT = names.Count; if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (VAR_INT - LITERAL_INT) + LITERAL_STRING); } HSSFName VAR_HSSFNAME = names[VAR_INT]; return VAR_HSSFNAME; }
public virtual void METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length != Constants.OBJECT_ID_STRING_LENGTH) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidId, VAR_STRING)); } FromHexString(Constants.EncodeASCII(VAR_STRING), LITERAL_INT); }
public virtual DescribeTableRestoreStatusResponse METHOD_NAME(DescribeTableRestoreStatusRequest VAR_DESCRIBETABLERESTORESTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTableRestoreStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTableRestoreStatusResponseUnmarshaller.Instance; return Invoke<DescribeTableRestoreStatusResponse>(VAR_DESCRIBETABLERESTORESTATUSREQUEST, VAR_VAR); }
public Edit(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { beginA = VAR_INT; endA = VAR_INT; beginB = VAR_INT; endB = VAR_INT; }
public virtual UpdateDomainEndpointOptionsResponse METHOD_NAME(UpdateDomainEndpointOptionsRequest VAR_UPDATEDOMAINENDPOINTOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainEndpointOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainEndpointOptionsResponseUnmarshaller.Instance; return Invoke<UpdateDomainEndpointOptionsResponse>(VAR_UPDATEDOMAINENDPOINTOPTIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsKey(VAR_OBJECT); }
public virtual ParseTreePattern METHOD_NAME(string VAR_STRING, int VAR_INT, Lexer VAR_LEXER) { ParseTreePatternMatcher VAR_PARSETREEPATTERNMATCHER = new ParseTreePatternMatcher(VAR_LEXER, this); return VAR_PARSETREEPATTERNMATCHER.Compile(VAR_STRING, VAR_INT); }
public MalformedInputException(int VAR_INT) { this.inputLength = VAR_INT; }
public virtual void METHOD_NAME() { upto = LITERAL_INT; @in.METHOD_NAME(); }
public override string METHOD_NAME() { return name; }
public DeletePhotoStoreRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual CreateGlobalClusterResponse METHOD_NAME(CreateGlobalClusterRequest VAR_CREATEGLOBALCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGlobalClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGlobalClusterResponseUnmarshaller.Instance; return Invoke<CreateGlobalClusterResponse>(VAR_CREATEGLOBALCLUSTERREQUEST, VAR_VAR); }
public SimpleImmutableEntry(K VAR_K, V VAR_V) { key = VAR_K; value = VAR_V; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(ChartGroupIndex)).Append(LITERAL_STRING).Append(ChartGroupIndex).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING + path.METHOD_NAME(); }
public OpenNLPLemmatizerFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { dictionaryFile = Get(VAR_IDICTIONARY<STRING, STRING>, DICTIONARY); lemmatizerModelFile = Get(VAR_IDICTIONARY<STRING, STRING>, LEMMATIZER_MODEL); if (dictionaryFile == LITERAL_NULL && lemmatizerModelFile == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING + DICTIONARY + LITERAL_STRING + LEMMATIZER_MODEL + LITERAL_STRING); } if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public System.Uri BaseUri { get; set; }
public virtual void METHOD_NAME(FormatError VAR_FORMATERROR) { errors.AddItem(VAR_FORMATERROR); }
public virtual UpdateUserResponse METHOD_NAME(UpdateUserRequest VAR_UPDATEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserResponseUnmarshaller.Instance; return Invoke<UpdateUserResponse>(VAR_UPDATEUSERREQUEST, VAR_VAR); }
public virtual DeletePartnerEventSourceResponse METHOD_NAME(DeletePartnerEventSourceRequest VAR_DELETEPARTNEREVENTSOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePartnerEventSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePartnerEventSourceResponseUnmarshaller.Instance; return Invoke<DeletePartnerEventSourceResponse>(VAR_DELETEPARTNEREVENTSOURCEREQUEST, VAR_VAR); }
public virtual ListClosedWorkflowExecutionsResponse METHOD_NAME(ListClosedWorkflowExecutionsRequest VAR_LISTCLOSEDWORKFLOWEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListClosedWorkflowExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListClosedWorkflowExecutionsResponseUnmarshaller.Instance; return Invoke<ListClosedWorkflowExecutionsResponse>(VAR_LISTCLOSEDWORKFLOWEXECUTIONSREQUEST, VAR_VAR); }
public IFontFormatting METHOD_NAME() { return GetFontFormatting(true); }
public SimpleFragmenter(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual DeleteEmailIdentityResponse METHOD_NAME(DeleteEmailIdentityRequest VAR_DELETEEMAILIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEmailIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEmailIdentityResponseUnmarshaller.Instance; return Invoke<DeleteEmailIdentityResponse>(VAR_DELETEEMAILIDENTITYREQUEST, VAR_VAR); }
public virtual ListScriptsResponse METHOD_NAME(ListScriptsRequest VAR_LISTSCRIPTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListScriptsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListScriptsResponseUnmarshaller.Instance; return Invoke<ListScriptsResponse>(VAR_LISTSCRIPTSREQUEST, VAR_VAR); }
public SnowballFilter(TokenStream VAR_TOKENSTREAM, SnowballProgram VAR_SNOWBALLPROGRAM) : base(input) { this.VAR_SNOWBALLPROGRAM = VAR_SNOWBALLPROGRAM; this.termAtt = AddAttribute<ICharTermAttribute>(); this.keywordAttr = AddAttribute<IKeywordAttribute>(); }
public virtual DeleteFlowLogsResponse METHOD_NAME(DeleteFlowLogsRequest VAR_DELETEFLOWLOGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFlowLogsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFlowLogsResponseUnmarshaller.Instance; return Invoke<DeleteFlowLogsResponse>(VAR_DELETEFLOWLOGSREQUEST, VAR_VAR); }
public virtual CreateIdentityPoolResponse METHOD_NAME(CreateIdentityPoolRequest VAR_CREATEIDENTITYPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIdentityPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIdentityPoolResponseUnmarshaller.Instance; return Invoke<CreateIdentityPoolResponse>(VAR_CREATEIDENTITYPOOLREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { var VAR_VAR = GetSubQueriesEnumerator(); while (VAR_VAR.MoveNext()) { var VAR_VAR = VAR_VAR.Current; if (VAR_VAR is IDistanceSubQuery) { var VAR_VAR = VAR_VAR.Current as IDistanceSubQuery; string VAR_STRING = VAR_VAR.METHOD_NAME(); if (VAR_STRING != LITERAL_NULL) { return VAR_STRING; } } else { return LITERAL_STRING + OperatorName + LITERAL_STRING + VAR_VAR.ToString(); } } return LITERAL_NULL; }
public static string METHOD_NAME(ITree VAR_ITREE, IList<string> VAR_ILIST<STRING>) { if (VAR_ILIST<STRING> != LITERAL_NULL) { if (VAR_ITREE is RuleContext) { int VAR_INT = ((RuleContext)VAR_ITREE).RuleIndex; string VAR_STRING = VAR_ILIST<STRING>[VAR_INT]; int VAR_INT = ((RuleContext)VAR_ITREE).getAltNumber(); if (VAR_INT != Atn.ATN.INVALID_ALT_NUMBER) { return VAR_STRING + LITERAL_STRING + VAR_INT; } return VAR_STRING; } else { if (VAR_ITREE is IErrorNode) { return VAR_ITREE.ToString(); } else { if (VAR_ITREE is ITerminalNode) { IToken VAR_ITOKEN = ((ITerminalNode)VAR_ITREE).Symbol; if (VAR_ITOKEN != LITERAL_NULL) { string VAR_STRING = VAR_ITOKEN.Text; return VAR_STRING; } } } } } object VAR_OBJECT = VAR_ITREE.Payload; if (VAR_OBJECT is IToken) { return ((IToken)VAR_OBJECT).Text; } return VAR_ITREE.Payload.ToString(); }
public override int METHOD_NAME() { if (sentenceStarts.Length > LITERAL_INT) { currentSentence = sentenceStarts.Length - LITERAL_INT; text.SetIndex(text.EndIndex); } else { currentSentence = LITERAL_INT; text.SetIndex(text.BeginIndex); } return Current; }
public NPOI.SS.UserModel.IRichTextString METHOD_NAME(String VAR_STRING) { return new HSSFRichTextString(VAR_STRING); }
public PushbackReader(java.io.Reader VAR_JAVA.IO.READER) : base(@in) { buf = new char[LITERAL_INT]; pos = LITERAL_INT; }
public virtual IList<IParseTree> METHOD_NAME(string VAR_STRING) { IList<IParseTree> VAR_ILIST<IPARSETREE> = labels.Get(VAR_STRING); if (VAR_ILIST<IPARSETREE> == LITERAL_NULL) { return Sharpen.Collections.EmptyList<IParseTree>(); } return VAR_ILIST<IPARSETREE>; }
public InternalWorkbook METHOD_NAME() { return CreateStubWorkbook(GetExternSheetRecords(), GetBoundSheetRecords(), GetSSTRecord()); }
public ReactivatePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual PollForDecisionTaskResponse METHOD_NAME(PollForDecisionTaskRequest VAR_POLLFORDECISIONTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PollForDecisionTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PollForDecisionTaskResponseUnmarshaller.Instance; return Invoke<PollForDecisionTaskResponse>(VAR_POLLFORDECISIONTASKREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Sid + PtgClass); WriteCoordinates(VAR_ILITTLEENDIANOUTPUT); }
public virtual Ref METHOD_NAME() { return target; }
public virtual CreateTagsResponse METHOD_NAME(CreateTagsRequest VAR_CREATETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTagsResponseUnmarshaller.Instance; return Invoke<CreateTagsResponse>(VAR_CREATETAGSREQUEST, VAR_VAR); }
public virtual UpdateUserPhoneConfigResponse METHOD_NAME(UpdateUserPhoneConfigRequest VAR_UPDATEUSERPHONECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserPhoneConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserPhoneConfigResponseUnmarshaller.Instance; return Invoke<UpdateUserPhoneConfigResponse>(VAR_UPDATEUSERPHONECONFIGREQUEST, VAR_VAR); }
public virtual PersonIdent METHOD_NAME(int VAR_INT) { return sourceAuthors[VAR_INT]; }
public virtual void METHOD_NAME(int VAR_INT) { NB.EncodeInt32(info, infoOffset + P_SIZE, VAR_INT); }
public GetServerCertificateRequest(string VAR_STRING) { _serverCertificateName = VAR_STRING; }
public virtual CreateStreamingDistributionWithTagsResponse METHOD_NAME(CreateStreamingDistributionWithTagsRequest VAR_CREATESTREAMINGDISTRIBUTIONWITHTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStreamingDistributionWithTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStreamingDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionWithTagsResponse>(VAR_CREATESTREAMINGDISTRIBUTIONWITHTAGSREQUEST, VAR_VAR); }
public virtual DescribeNotificationSubscriptionsResponse METHOD_NAME(DescribeNotificationSubscriptionsRequest VAR_DESCRIBENOTIFICATIONSUBSCRIPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNotificationSubscriptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNotificationSubscriptionsResponseUnmarshaller.Instance; return Invoke<DescribeNotificationSubscriptionsResponse>(VAR_DESCRIBENOTIFICATIONSUBSCRIPTIONSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(verOriginator)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(verOriginator)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rgCFRTID.Length)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; if (VAR_VALUEEVAL is RefEval) { VAR_DOUBLE = CountUtils.CountMatchingCellsInRef((RefEval)VAR_VALUEEVAL, predicate); } else if (VAR_VALUEEVAL is ThreeDEval) { VAR_DOUBLE = CountUtils.CountMatchingCellsInArea((ThreeDEval)VAR_VALUEEVAL, predicate); } else { throw new ArgumentException(LITERAL_STRING + VAR_VALUEEVAL.GetType().Name + LITERAL_STRING); } return new NumberEval(VAR_DOUBLE); }
public virtual UpdateRestApiResponse METHOD_NAME(UpdateRestApiRequest VAR_UPDATERESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRestApiResponseUnmarshaller.Instance; return Invoke<UpdateRestApiResponse>(VAR_UPDATERESTAPIREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return this._enclosing._size; }
public EscherSimpleProperty(short VAR_SHORT, bool VAR_BOOL, bool VAR_BOOL, int VAR_INT) : base(propertyNumber, isComplex, isBlipId) { this.VAR_INT = VAR_INT; }
public static bool METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case ViewDefinitionRecord.VAR_INT: case DrawingRecord.VAR_INT: case DrawingSelectionRecord.VAR_INT: case ObjRecord.VAR_INT: case TextObjectRecord.VAR_INT: case ColumnInfoRecord.VAR_INT: case GutsRecord.VAR_INT: case WindowOneRecord.VAR_INT: case WindowTwoRecord.VAR_INT: return true; case DVALRecord.VAR_INT: return true; case EOFRecord.VAR_INT: throw new InvalidOperationException(LITERAL_STRING); } return PageSettingsBlock.IsComponentRecord(VAR_INT); }
public RegistrantProfileRealNameVerificationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual CreateProfileResponse METHOD_NAME(CreateProfileRequest VAR_CREATEPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateProfileResponseUnmarshaller.Instance; return Invoke<CreateProfileResponse>(VAR_CREATEPROFILEREQUEST, VAR_VAR); }
public virtual ObjectId METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { MessageDigest VAR_MESSAGEDIGEST = Digest(); VAR_MESSAGEDIGEST.Update(Constants.EncodedTypeString(VAR_INT)); VAR_MESSAGEDIGEST.Update(unchecked((byte)LITERAL_CHAR)); VAR_MESSAGEDIGEST.Update(Constants.EncodeASCII(VAR_INT)); VAR_MESSAGEDIGEST.Update(unchecked((byte)LITERAL_INT)); VAR_MESSAGEDIGEST.Update(VAR_BYTE[], VAR_INT, VAR_INT); return ObjectId.FromRaw(VAR_MESSAGEDIGEST.Digest()); }
public override Object METHOD_NAME() { EndSubRecord VAR_ENDSUBRECORD = new EndSubRecord(); return VAR_ENDSUBRECORD; }
public SearchRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual IInputIterator METHOD_NAME() { try { return new FileIterator(this); } catch (IOException e) { throw new Exception(e.ToString(), e); } }
public sealed override long METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return backingArray[offset + _position++]; }
public virtual void METHOD_NAME(int VAR_INT) { mThumbOffset = VAR_INT; invalidate(); }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { if (!VAR_BYTESREF.Equals(term_Renamed)) { state.CopyFrom(VAR_TERMSTATE); term_Renamed = BytesRef.DeepCopyOf(VAR_BYTESREF); seekPending = true; } }
public virtual GetFilterResponse METHOD_NAME(GetFilterRequest VAR_GETFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFilterResponseUnmarshaller.Instance; return Invoke<GetFilterResponse>(VAR_GETFILTERREQUEST, VAR_VAR); }
public static FontDetails METHOD_NAME(String VAR_STRING, Properties VAR_PROPERTIES) { String VAR_STRING = VAR_PROPERTIES[BuildFontHeightProperty(VAR_STRING)]; String VAR_STRING = VAR_PROPERTIES[BuildFontWidthsProperty(VAR_STRING)]; String VAR_STRING = VAR_PROPERTIES[BuildFontCharsProperty(VAR_STRING)]; if (VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } int VAR_INT = int.Parse(VAR_STRING, CultureInfo.InvariantCulture); FontDetails VAR_FONTDETAILS = new FontDetails(VAR_STRING, VAR_INT); String[] VAR_STRING[] = Split(VAR_STRING, LITERAL_STRING, -LITERAL_INT); String[] VAR_STRING[] = Split(VAR_STRING, LITERAL_STRING, -LITERAL_INT); if (VAR_STRING[].Length != VAR_STRING[].Length) throw new Exception(LITERAL_STRING + VAR_STRING); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (VAR_STRING[][i].Trim().Length != LITERAL_INT) VAR_FONTDETAILS.AddChar(VAR_STRING[][i].Trim()[LITERAL_INT], int.Parse(VAR_STRING[][i], CultureInfo.InvariantCulture)); } return VAR_FONTDETAILS; }
public static void METHOD_NAME(String VAR_STRING, Function VAR_FUNCTION) { FunctionMetadata VAR_FUNCTIONMETADATA = FunctionMetadataRegistry.GetFunctionByName(VAR_STRING); if (VAR_FUNCTIONMETADATA == LITERAL_NULL) { if (AnalysisToolPak.IsATPFunction(VAR_STRING)) { throw new ArgumentException(VAR_STRING + LITERAL_STRING + LITERAL_STRING); } else { throw new ArgumentException(LITERAL_STRING + VAR_STRING); } } int VAR_INT = VAR_FUNCTIONMETADATA.Index; if (functions[VAR_INT] is NotImplementedFunction) { functions[VAR_INT] = VAR_FUNCTION; } else { throw new ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } }
public SortedSetDocValuesField(string VAR_STRING, BytesRef VAR_BYTESREF) : base(name, TYPE) { FieldsData = VAR_BYTESREF; }
public static TreeFilter METHOD_NAME(TreeFilter[] VAR_TREEFILTER[]) { if (VAR_TREEFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_TREEFILTER[][LITERAL_INT], VAR_TREEFILTER[][LITERAL_INT]); } if (VAR_TREEFILTER[].Length < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[VAR_TREEFILTER[].Length]; System.Array.Copy(VAR_TREEFILTER[], LITERAL_INT, VAR_TREEFILTER[], LITERAL_INT, VAR_TREEFILTER[].Length); return new OrTreeFilter.List(VAR_TREEFILTER[]); }
public override V METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { java.util.HashMap.HashMapEntry<K, V> VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> = entryForNullKey; return VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V> == LITERAL_NULL ? default(V) : VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>.value; } int VAR_INT = VAR_OBJECT.GetHashCode(); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT ^= ((int)(((uint)VAR_INT) >> LITERAL_INT)) ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = table; { for (java.util.HashMap.HashMapEntry<K, V> e_1 = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][VAR_INT & (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length - LITERAL_INT)]; e_1 != LITERAL_NULL; e_1 = e_1.next) { K VAR_K = e_1.VAR_OBJECT; if (Sharpen.Util.Equals(VAR_K, VAR_OBJECT) || (e_1.VAR_INT == VAR_INT && VAR_OBJECT.Equals(VAR_K))) { return e_1.value; } } } return default(V); }
public virtual bool METHOD_NAME(int VAR_INT) { return sourceLines[VAR_INT] != LITERAL_INT; }
public virtual CreateBotResponse METHOD_NAME(CreateBotRequest VAR_CREATEBOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBotResponseUnmarshaller.Instance; return Invoke<CreateBotResponse>(VAR_CREATEBOTREQUEST, VAR_VAR); }
public virtual UpdateMethodResponseResponse METHOD_NAME(UpdateMethodResponseRequest VAR_UPDATEMETHODRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMethodResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMethodResponseResponseUnmarshaller.Instance; return Invoke<UpdateMethodResponseResponse>(VAR_UPDATEMETHODRESPONSEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(string VAR_STRING) { return map.Put(VAR_STRING); }
public String METHOD_NAME(IVocabulary VAR_IVOCABULARY) { if (s0 == LITERAL_NULL) { return LITERAL_STRING; } DFASerializer VAR_DFASERIALIZER = new DFASerializer(this, VAR_IVOCABULARY); return VAR_DFASERIALIZER.METHOD_NAME(); }
public virtual CreateApiKeyResponse METHOD_NAME(CreateApiKeyRequest VAR_CREATEAPIKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateApiKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateApiKeyResponseUnmarshaller.Instance; return Invoke<CreateApiKeyResponse>(VAR_CREATEAPIKEYREQUEST, VAR_VAR); }
public virtual DetachTypedLinkResponse METHOD_NAME(DetachTypedLinkRequest VAR_DETACHTYPEDLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachTypedLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachTypedLinkResponseUnmarshaller.Instance; return Invoke<DetachTypedLinkResponse>(VAR_DETACHTYPEDLINKREQUEST, VAR_VAR); }
public ExternSheetRecord[] METHOD_NAME() { return (ExternSheetRecord[])externSheetRecords.ToArray(typeof(ExternSheetRecord)); }
public virtual DescribeNetworkInterfaceAttributeResponse METHOD_NAME(DescribeNetworkInterfaceAttributeRequest VAR_DESCRIBENETWORKINTERFACEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNetworkInterfaceAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNetworkInterfaceAttributeResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfaceAttributeResponse>(VAR_DESCRIBENETWORKINTERFACEATTRIBUTEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_tabids.Length).Append(LITERAL_STRING); for (int k = LITERAL_INT; k < _tabids.Length; k++) { VAR_STRINGBUILDER.Append(LITERAL_STRING + k + LITERAL_STRING).Append(_tabids[k]).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override long METHOD_NAME() { long VAR_LONG = (postingsReader != LITERAL_NULL) ? postingsReader.METHOD_NAME() : LITERAL_INT; VAR_LONG += (indexReader != LITERAL_NULL) ? indexReader.METHOD_NAME() : LITERAL_INT; return VAR_LONG; }
public override java.nio.ByteBuffer METHOD_NAME(byte VAR_BYTE) { throw new java.nio.ReadOnlyBufferException(); }
public RecognizePetRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public virtual ImportRestApiResponse METHOD_NAME(ImportRestApiRequest VAR_IMPORTRESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportRestApiResponseUnmarshaller.Instance; return Invoke<ImportRestApiResponse>(VAR_IMPORTRESTAPIREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_anchorId); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_link1); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_link2); }
public DescribeSnapshotAttributeRequest(string VAR_STRING, SnapshotAttributeName VAR_SNAPSHOTATTRIBUTENAME) { _snapshotId = VAR_STRING; _attribute = VAR_SNAPSHOTATTRIBUTENAME; }
public virtual IToken METHOD_NAME(Parser VAR_PARSER) { IToken VAR_ITOKEN = SingleTokenDeletion(VAR_PARSER); if (VAR_ITOKEN != LITERAL_NULL) { VAR_PARSER.Consume(); return VAR_ITOKEN; } if (SingleTokenInsertion(VAR_PARSER)) { return GetMissingSymbol(VAR_PARSER); } throw new InputMismatchException(VAR_PARSER); }
public MultiCategoryListsFacetsExample() { config.SetIndexFieldName(LITERAL_STRING, LITERAL_STRING); config.SetIndexFieldName(LITERAL_STRING, LITERAL_STRING); config.SetHierarchical(LITERAL_STRING, true); }
public virtual GetAddressBookResponse METHOD_NAME(GetAddressBookRequest VAR_GETADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAddressBookResponseUnmarshaller.Instance; return Invoke<GetAddressBookResponse>(VAR_GETADDRESSBOOKREQUEST, VAR_VAR); }
public PatternFormatting() { field_15_pattern_style = (short)LITERAL_INT; field_16_pattern_color_indexes = (short)LITERAL_INT; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); Double VAR_DOUBLE = OperandResolver.ParseDouble(VAR_STRING); if (double.IsNaN(VAR_DOUBLE)) { return ErrorEval.VALUE_INVALID; } ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); Double VAR_DOUBLE = OperandResolver.ParseDouble(VAR_STRING); if (double.IsNaN(VAR_DOUBLE)) { return ErrorEval.VALUE_INVALID; } int VAR_INT = NumberComparer.Compare(VAR_DOUBLE, VAR_DOUBLE); return VAR_INT == LITERAL_INT ? ONE : ZERO; }
public sealed override double METHOD_NAME() { return Sharpen.Util.LongBitsToDouble(getLong()); }
public Principal(string VAR_STRING, string VAR_STRING, bool VAR_BOOL) { this.VAR_STRING = VAR_STRING; if (VAR_BOOL) { VAR_STRING = VAR_STRING.Replace(LITERAL_STRING, LITERAL_STRING); } this.VAR_STRING = VAR_STRING; }
public virtual ListJobsResponse METHOD_NAME() { return METHOD_NAME(new ListJobsRequest()); }
public override java.nio.CharBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = new java.nio.CharToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.CHARBUFFER; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_BYTE[].Length; if (VAR_INT == LITERAL_INT) { VAR_INT += LITERAL_INT; } while (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] != LITERAL_CHAR) { VAR_INT = NextLF(VAR_BYTE[], VAR_INT); } if (VAR_INT < VAR_INT && VAR_BYTE[][VAR_INT] == LITERAL_CHAR) { return VAR_INT + LITERAL_INT; } return -LITERAL_INT; }
public virtual RebootBrokerResponse METHOD_NAME(RebootBrokerRequest VAR_REBOOTBROKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootBrokerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootBrokerResponseUnmarshaller.Instance; return Invoke<RebootBrokerResponse>(VAR_REBOOTBROKERREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { if (VAR_INT >= _externSheetRecord.NumOfRefs || VAR_INT < LITERAL_INT) { return -LITERAL_INT; } return _externSheetRecord.GetLastSheetIndexFromRefIndex(VAR_INT); }
public virtual RemoveTagsFromOnPremisesInstancesResponse METHOD_NAME(RemoveTagsFromOnPremisesInstancesRequest VAR_REMOVETAGSFROMONPREMISESINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTagsFromOnPremisesInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTagsFromOnPremisesInstancesResponseUnmarshaller.Instance; return Invoke<RemoveTagsFromOnPremisesInstancesResponse>(VAR_REMOVETAGSFROMONPREMISESINSTANCESREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { return Next(VAR_BYTE[], VAR_INT, LITERAL_CHAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is DrillDownQuery)) { return false; } DrillDownQuery VAR_DRILLDOWNQUERY = (DrillDownQuery)VAR_OBJECT; return query.METHOD_NAME(VAR_DRILLDOWNQUERY.query) && base.METHOD_NAME(VAR_DRILLDOWNQUERY); }
public override void METHOD_NAME(ReceiveCommand.Result VAR_RECEIVECOMMAND.RESULT) { this._enclosing.result = this.Decode(VAR_RECEIVECOMMAND.RESULT); base.METHOD_NAME(VAR_RECEIVECOMMAND.RESULT); }
public virtual UpdateIAMPolicyAssignmentResponse METHOD_NAME(UpdateIAMPolicyAssignmentRequest VAR_UPDATEIAMPOLICYASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateIAMPolicyAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateIAMPolicyAssignmentResponseUnmarshaller.Instance; return Invoke<UpdateIAMPolicyAssignmentResponse>(VAR_UPDATEIAMPOLICYASSIGNMENTREQUEST, VAR_VAR); }
public virtual ExportImageResponse METHOD_NAME(ExportImageRequest VAR_EXPORTIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportImageResponseUnmarshaller.Instance; return Invoke<ExportImageResponse>(VAR_EXPORTIMAGEREQUEST, VAR_VAR); }
public virtual ListTopicsDetectionJobsResponse METHOD_NAME(ListTopicsDetectionJobsRequest VAR_LISTTOPICSDETECTIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTopicsDetectionJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTopicsDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListTopicsDetectionJobsResponse>(VAR_LISTTOPICSDETECTIONJOBSREQUEST, VAR_VAR); }
public static java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_INT[].Length, VAR_INT, VAR_INT); java.nio.IntBuffer VAR_JAVA.NIO.INTBUFFER = new java.nio.ReadWriteIntArrayBuffer(VAR_INT[]); VAR_JAVA.NIO.INTBUFFER._position = VAR_INT; VAR_JAVA.NIO.INTBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.INTBUFFER; }
public virtual ListDeploymentTargetsResponse METHOD_NAME(ListDeploymentTargetsRequest VAR_LISTDEPLOYMENTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentTargetsResponseUnmarshaller.Instance; return Invoke<ListDeploymentTargetsResponse>(VAR_LISTDEPLOYMENTTARGETSREQUEST, VAR_VAR); }
public HSSFTextbox METHOD_NAME(HSSFChildAnchor VAR_HSSFCHILDANCHOR) { HSSFTextbox VAR_HSSFTEXTBOX = new HSSFTextbox(this, VAR_HSSFCHILDANCHOR); VAR_HSSFTEXTBOX.Parent = this; VAR_HSSFTEXTBOX.Anchor = VAR_HSSFCHILDANCHOR; shapes.Add(VAR_HSSFTEXTBOX); OnCreate(VAR_HSSFTEXTBOX); return VAR_HSSFTEXTBOX; }
public virtual CreateStreamProcessorResponse METHOD_NAME(CreateStreamProcessorRequest VAR_CREATESTREAMPROCESSORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStreamProcessorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStreamProcessorResponseUnmarshaller.Instance; return Invoke<CreateStreamProcessorResponse>(VAR_CREATESTREAMPROCESSORREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { return (VAR_INT - m_suffix.Length >= m_min && StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, m_suffix)); }
public void METHOD_NAME(bool VAR_BOOL, bool VAR_BOOL) { bool VAR_BOOL = VAR_BOOL || VAR_BOOL; fontFormatting.IsItalic = VAR_BOOL; fontFormatting.IsBold = VAR_BOOL; fontFormatting.IsFontStyleModified = VAR_BOOL; fontFormatting.IsFontWeightModified = VAR_BOOL; }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual CreateEntityRecognizerResponse METHOD_NAME(CreateEntityRecognizerRequest VAR_CREATEENTITYRECOGNIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEntityRecognizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEntityRecognizerResponseUnmarshaller.Instance; return Invoke<CreateEntityRecognizerResponse>(VAR_CREATEENTITYRECOGNIZERREQUEST, VAR_VAR); }
public virtual DescribeContributorInsightsResponse METHOD_NAME(DescribeContributorInsightsRequest VAR_DESCRIBECONTRIBUTORINSIGHTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeContributorInsightsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeContributorInsightsResponseUnmarshaller.Instance; return Invoke<DescribeContributorInsightsResponse>(VAR_DESCRIBECONTRIBUTORINSIGHTSREQUEST, VAR_VAR); }
public virtual CreateLaunchConfigurationResponse METHOD_NAME(CreateLaunchConfigurationRequest VAR_CREATELAUNCHCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLaunchConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLaunchConfigurationResponseUnmarshaller.Instance; return Invoke<CreateLaunchConfigurationResponse>(VAR_CREATELAUNCHCONFIGURATIONREQUEST, VAR_VAR); }
public override int METHOD_NAME() { throw new System.NotImplementedException(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new LimitTokenCountFilter(VAR_TOKENSTREAM, maxTokenCount, consumeAllTokens); }
public override java.nio.CharBuffer METHOD_NAME() { return duplicate(); }
public virtual GetConsoleScreenshotResponse METHOD_NAME(GetConsoleScreenshotRequest VAR_GETCONSOLESCREENSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConsoleScreenshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConsoleScreenshotResponseUnmarshaller.Instance; return Invoke<GetConsoleScreenshotResponse>(VAR_GETCONSOLESCREENSHOTREQUEST, VAR_VAR); }
public DrawingRecordForBiffViewer(DrawingRecord VAR_DRAWINGRECORD) : base(ConvertToInputStream(r)) { ConvertRawBytesToEscherRecords(); }
public bool METHOD_NAME() { return this.pos >= LITERAL_INT; }
public NotImplemented(String VAR_STRING) { _functionName = VAR_STRING; }
public virtual UpdateDirectoryConfigResponse METHOD_NAME(UpdateDirectoryConfigRequest VAR_UPDATEDIRECTORYCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDirectoryConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDirectoryConfigResponseUnmarshaller.Instance; return Invoke<UpdateDirectoryConfigResponse>(VAR_UPDATEDIRECTORYCONFIGREQUEST, VAR_VAR); }
public virtual DeleteQualificationTypeResponse METHOD_NAME(DeleteQualificationTypeRequest VAR_DELETEQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteQualificationTypeResponseUnmarshaller.Instance; return Invoke<DeleteQualificationTypeResponse>(VAR_DELETEQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { throw new System.NotSupportedException(); }
public virtual int METHOD_NAME() { return offset = pool.NewSlice(FIRST_LEVEL_SIZE) + pool.Int32Offset; }
public override void METHOD_NAME() { if (!mNoInvalidate) { base.METHOD_NAME(); } }
public virtual IList<FacetEntry> METHOD_NAME(int VAR_INT, int VAR_INT) { List<FacetEntry> VAR_LIST<FACETENTRY> = new List<FacetEntry>(); int VAR_INT = LITERAL_INT; int VAR_INT = LITERAL_INT; foreach (FacetEntry facetEntry in facetEntries) { if (VAR_INT < VAR_INT) { VAR_INT++; continue; } if (VAR_INT++ >= VAR_INT) { break; } VAR_LIST<FACETENTRY>.Add(facetEntry); } return VAR_LIST<FACETENTRY>; }
public static java.nio.charset.CoderResult METHOD_NAME(int VAR_INT) { lock (typeof(CoderResult)) { if (VAR_INT > LITERAL_INT) { int VAR_INT = Sharpen.Util.IntValueOf(VAR_INT); lock (_unmappableErrors) { java.nio.charset.CoderResult VAR_JAVA.NIO.CHARSET.CODERRESULT = _unmappableErrors.get(VAR_INT); if (VAR_JAVA.NIO.CHARSET.CODERRESULT == LITERAL_NULL) { VAR_JAVA.NIO.CHARSET.CODERRESULT = new java.nio.charset.CoderResult(TYPE_UNMAPPABLE_CHAR, VAR_INT); _unmappableErrors.put(VAR_INT, VAR_JAVA.NIO.CHARSET.CODERRESULT); } return VAR_JAVA.NIO.CHARSET.CODERRESULT; } } throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } }
public virtual UpdateDetectorVersionStatusResponse METHOD_NAME(UpdateDetectorVersionStatusRequest VAR_UPDATEDETECTORVERSIONSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDetectorVersionStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDetectorVersionStatusResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionStatusResponse>(VAR_UPDATEDETECTORVERSIONSTATUSREQUEST, VAR_VAR); }
public void METHOD_NAME() { iterator.METHOD_NAME(); subList.sizeChanged(false); end--; }
public void METHOD_NAME(char VAR_CHAR, int VAR_INT) { Cell VAR_CELL = At(VAR_CHAR); if (VAR_CELL == LITERAL_NULL) { VAR_CELL = new Cell(); VAR_CELL.VAR_INT = VAR_INT; cells[VAR_CHAR] = VAR_CELL; } else { VAR_CELL.VAR_INT = VAR_INT; } }
public QueryNodeProcessorPipeline(QueryConfigHandler VAR_QUERYCONFIGHANDLER) { this.queryConfig = VAR_QUERYCONFIGHANDLER; }
public IllegalFormatPrecisionException(int VAR_INT) { this.VAR_INT = VAR_INT; }
public sealed override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return libcore.util.Objects.equal(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), key) && libcore.util.Objects.equal(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue(), value); }
public virtual ObjectId METHOD_NAME() { return oldValue; }
public virtual AuthorizeIpRulesResponse METHOD_NAME(AuthorizeIpRulesRequest VAR_AUTHORIZEIPRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeIpRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeIpRulesResponseUnmarshaller.Instance; return Invoke<AuthorizeIpRulesResponse>(VAR_AUTHORIZEIPRULESREQUEST, VAR_VAR); }
public GetPrivateAccessUrlsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public override int METHOD_NAME() { return this._enclosing._size; }
public virtual PutConfigurationSetTrackingOptionsResponse METHOD_NAME(PutConfigurationSetTrackingOptionsRequest VAR_PUTCONFIGURATIONSETTRACKINGOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConfigurationSetTrackingOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConfigurationSetTrackingOptionsResponseUnmarshaller.Instance; return Invoke<PutConfigurationSetTrackingOptionsResponse>(VAR_PUTCONFIGURATIONSETTRACKINGOPTIONSREQUEST, VAR_VAR); }
public static NGit.ObjectId METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { return FromHexString(VAR_BYTE[], VAR_INT); }
public virtual GetRelationalDatabaseResponse METHOD_NAME(GetRelationalDatabaseRequest VAR_GETRELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseResponse>(VAR_GETRELATIONALDATABASEREQUEST, VAR_VAR); }
public JschSession(Session VAR_SESSION, URIish VAR_URIISH) { sock = VAR_SESSION; this.VAR_URIISH = VAR_URIISH; }
public virtual SetCognitoEventsResponse METHOD_NAME(SetCognitoEventsRequest VAR_SETCOGNITOEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetCognitoEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetCognitoEventsResponseUnmarshaller.Instance; return Invoke<SetCognitoEventsResponse>(VAR_SETCOGNITOEVENTSREQUEST, VAR_VAR); }
public virtual BatchDetectEntitiesResponse METHOD_NAME(BatchDetectEntitiesRequest VAR_BATCHDETECTENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDetectEntitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDetectEntitiesResponseUnmarshaller.Instance; return Invoke<BatchDetectEntitiesResponse>(VAR_BATCHDETECTENTITIESREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT, VAR_INT); } }
public virtual GenerateClientCertificateResponse METHOD_NAME(GenerateClientCertificateRequest VAR_GENERATECLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GenerateClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GenerateClientCertificateResponseUnmarshaller.Instance; return Invoke<GenerateClientCertificateResponse>(VAR_GENERATECLIENTCERTIFICATEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { throw new System.NotImplementedException(); }
public static void METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT, int VAR_INT) { java.util.Arrays.checkStartAndEnd(VAR_INT[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_INT[][i] = VAR_INT; } } }
public char METHOD_NAME(int VAR_INT) { return zzBuffer[zzStartRead + VAR_INT]; }
public virtual void METHOD_NAME(int VAR_INT) { _modeStack.Push(_mode); Mode(VAR_INT); }
public virtual ICollection<string> METHOD_NAME() { return capabilities; }
public virtual DescribeReservedInstancesListingsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedInstancesListingsRequest()); }
public virtual RegisterInstanceEventNotificationAttributesResponse METHOD_NAME(RegisterInstanceEventNotificationAttributesRequest VAR_REGISTERINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterInstanceEventNotificationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterInstanceEventNotificationAttributesResponseUnmarshaller.Instance; return Invoke<RegisterInstanceEventNotificationAttributesResponse>(VAR_REGISTERINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST, VAR_VAR); }
public virtual PutRuleResponse METHOD_NAME(PutRuleRequest VAR_PUTRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRuleResponseUnmarshaller.Instance; return Invoke<PutRuleResponse>(VAR_PUTRULEREQUEST, VAR_VAR); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_BYTE[].Length < VAR_INT) { byte[] VAR_BYTE[] = new byte[Oversize(VAR_INT, LITERAL_INT)]; Array.Copy(VAR_BYTE[], LITERAL_INT, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); return VAR_BYTE[]; } else { return VAR_BYTE[]; } }
public virtual NGit.Api.CleanCommand METHOD_NAME(ICollection<string> VAR_ICOLLECTION<STRING>) { this.VAR_ICOLLECTION<STRING> = VAR_ICOLLECTION<STRING>; return this; }
protected internal override int METHOD_NAME(double VAR_DOUBLE) { var VAR_VAR = new GeohashPrefixTree(m_ctx, GeohashPrefixTree.MaxLevelsPossible); return VAR_VAR.METHOD_NAME(VAR_DOUBLE); }
public virtual StartDocumentTextDetectionResponse METHOD_NAME(StartDocumentTextDetectionRequest VAR_STARTDOCUMENTTEXTDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDocumentTextDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDocumentTextDetectionResponseUnmarshaller.Instance; return Invoke<StartDocumentTextDetectionResponse>(VAR_STARTDOCUMENTTEXTDETECTIONREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return line; }
public ValueEval METHOD_NAME(int VAR_INT) { if (VAR_INT > _size) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + (_size - LITERAL_INT) + LITERAL_STRING); } return _tableArray.GetRelativeValue(_rowIndex, VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(FormatIndex)).Append(LITERAL_STRING).Append(FormatIndex).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
protected internal SubmoduleSyncCommand(Repository VAR_REPOSITORY) : base(repo) { paths = new AList<string>(); }
public virtual RegisterWorkflowTypeResponse METHOD_NAME(RegisterWorkflowTypeRequest VAR_REGISTERWORKFLOWTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterWorkflowTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterWorkflowTypeResponseUnmarshaller.Instance; return Invoke<RegisterWorkflowTypeResponse>(VAR_REGISTERWORKFLOWTYPEREQUEST, VAR_VAR); }
public UnescapedCharSequence(char[] VAR_CHAR[], bool[] VAR_BOOL[], int VAR_INT, int VAR_INT) { this.VAR_CHAR[] = new char[VAR_INT]; this.VAR_BOOL[] = new bool[VAR_INT]; System.Array.Copy(VAR_CHAR[], VAR_INT, this.VAR_CHAR[], LITERAL_INT, VAR_INT); System.Array.Copy(VAR_BOOL[], VAR_INT, this.VAR_BOOL[], LITERAL_INT, VAR_INT); }
public virtual CreateDatasetGroupResponse METHOD_NAME(CreateDatasetGroupRequest VAR_CREATEDATASETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDatasetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDatasetGroupResponseUnmarshaller.Instance; return Invoke<CreateDatasetGroupResponse>(VAR_CREATEDATASETGROUPREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (VAR_OBJECT == LITERAL_NULL) return false; if (GetType() != VAR_OBJECT.GetType()) return false; FieldVals VAR_FIELDVALS = (FieldVals)VAR_OBJECT; if (fieldName == LITERAL_NULL) { if (VAR_FIELDVALS.fieldName != LITERAL_NULL) return false; } else if (!fieldName.METHOD_NAME(VAR_FIELDVALS.fieldName, StringComparison.Ordinal)) return false; if (J2N.BitConversion.SingleToInt32Bits(minSimilarity) != J2N.BitConversion.SingleToInt32Bits(VAR_FIELDVALS.minSimilarity)) return false; if (prefixLength != VAR_FIELDVALS.prefixLength) return false; if (queryString == LITERAL_NULL) { if (VAR_FIELDVALS.queryString != LITERAL_NULL) return false; } else if (!queryString.METHOD_NAME(VAR_FIELDVALS.queryString, StringComparison.Ordinal)) return false; return true; }
public virtual BuildSuggestersResponse METHOD_NAME(BuildSuggestersRequest VAR_BUILDSUGGESTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BuildSuggestersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BuildSuggestersResponseUnmarshaller.Instance; return Invoke<BuildSuggestersResponse>(VAR_BUILDSUGGESTERSREQUEST, VAR_VAR); }
public virtual GetRelationalDatabaseBundlesResponse METHOD_NAME(GetRelationalDatabaseBundlesRequest VAR_GETRELATIONALDATABASEBUNDLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseBundlesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseBundlesResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseBundlesResponse>(VAR_GETRELATIONALDATABASEBUNDLESREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return messageBuffer != LITERAL_NULL ? messageBuffer.ToString() : string.Empty; }
public DelimitedPayloadTokenFilter(TokenStream VAR_TOKENSTREAM, char VAR_CHAR, IPayloadEncoder VAR_IPAYLOADENCODER) : base(input) { this.VAR_CHAR = VAR_CHAR; this.VAR_IPAYLOADENCODER = VAR_IPAYLOADENCODER; termAtt = AddAttribute<ICharTermAttribute>(); payAtt = AddAttribute<IPayloadAttribute>(); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { CellReference VAR_CELLREFERENCE = new CellReference(VAR_INT, VAR_INT, true, true); String VAR_STRING = VAR_CELLREFERENCE.FormatAsString(); VAR_CELLREFERENCE = new CellReference(VAR_INT, VAR_INT, true, true); VAR_STRING = VAR_STRING + LITERAL_STRING + VAR_CELLREFERENCE.FormatAsString(); METHOD_NAME(VAR_INT, VAR_STRING); }
public void METHOD_NAME() { int VAR_INT = _significand.BitLength(); int VAR_INT = VAR_INT - C_64; if (VAR_INT == LITERAL_INT) { return; } if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } _binaryExponent += VAR_INT; if (VAR_INT > LITERAL_INT) { int VAR_INT = (VAR_INT - LITERAL_INT) & LITERAL_INT; _significand = _significand >> (VAR_INT); VAR_INT -= VAR_INT; VAR_INT -= VAR_INT; } if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(); } _significand = Rounder.Round(_significand, VAR_INT); if (_significand.BitLength() > VAR_INT) { VAR_INT++; _binaryExponent++; } _significand = _significand >> (VAR_INT); }
public ObjRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { byte[] VAR_BYTE[] = VAR_RECORDINPUTSTREAM.ReadRemainder(); if (LittleEndian.GetUShort(VAR_BYTE[], LITERAL_INT) != CommonObjectDataSubRecord.sid) { _uninterpretedData = VAR_BYTE[]; subrecords = LITERAL_NULL; return; } subrecords = new List<SubRecord>(); using (MemoryStream bais = new MemoryStream(VAR_BYTE[])) { LittleEndianInputStream VAR_LITTLEENDIANINPUTSTREAM = new LittleEndianInputStream(bais); CommonObjectDataSubRecord VAR_COMMONOBJECTDATASUBRECORD = (CommonObjectDataSubRecord)SubRecord.CreateSubRecord(VAR_LITTLEENDIANINPUTSTREAM, LITERAL_INT); subrecords.Add(VAR_COMMONOBJECTDATASUBRECORD); while (true) { SubRecord VAR_SUBRECORD = SubRecord.CreateSubRecord(VAR_LITTLEENDIANINPUTSTREAM, VAR_COMMONOBJECTDATASUBRECORD.ObjectType); subrecords.Add(VAR_SUBRECORD); if (VAR_SUBRECORD.IsTerminating) { break; } } int VAR_INT = VAR_LITTLEENDIANINPUTSTREAM.Available(); if (VAR_INT > LITERAL_INT) { _isPaddedToQuadByteMultiple = VAR_BYTE[].Length % MAX_PAD_ALIGNMENT == LITERAL_INT; if (VAR_INT >= (_isPaddedToQuadByteMultiple ? MAX_PAD_ALIGNMENT : NORMAL_PAD_ALIGNMENT)) { if (!CanPaddingBeDiscarded(VAR_BYTE[], VAR_INT)) { String VAR_STRING = LITERAL_STRING + VAR_INT + LITERAL_STRING + HexDump.ToHex(VAR_BYTE[]); throw new RecordFormatException(VAR_STRING); } _isPaddedToQuadByteMultiple = false; } } else { _isPaddedToQuadByteMultiple = false; } _uninterpretedData = LITERAL_NULL; } }
public FrenchLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual int METHOD_NAME() { return elements.Length; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.IntBuffer)) { return false; } java.nio.IntBuffer VAR_JAVA.NIO.INTBUFFER = (java.nio.IntBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.INTBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.INTBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { VAR_BOOL = get(VAR_INT++) == VAR_JAVA.NIO.INTBUFFER.get(VAR_INT++); } return VAR_BOOL; }
public static void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, char VAR_CHAR) { java.util.Arrays.checkStartAndEnd(VAR_CHAR[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_CHAR[][i] = VAR_CHAR; } } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(GetCalcMode())).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(string VAR_STRING) { m_current = VAR_STRING.ToCharArray(); m_cursor = LITERAL_INT; m_limit = VAR_STRING.Length; m_limit_backward = LITERAL_INT; m_bra = m_cursor; m_ket = m_limit; }
public override java.nio.ShortBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_SHORT; return this; }
public virtual DeleteEventSubscriptionResponse METHOD_NAME(DeleteEventSubscriptionRequest VAR_DELETEEVENTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventSubscriptionResponseUnmarshaller.Instance; return Invoke<DeleteEventSubscriptionResponse>(VAR_DELETEEVENTSUBSCRIPTIONREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public NumericDocValuesField(string VAR_STRING, long VAR_LONG) : base(name, TYPE) { FieldsData = new Int64(VAR_LONG); }
public AddTagsRequest(string VAR_STRING) { _resourceId = VAR_STRING; }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = GetRefEvaluatorForCurrentSheet(); return new LazyRefEval(VAR_INT, VAR_INT, VAR_SHEETRANGEEVALUATOR); }
public virtual DescribeTaskDefinitionResponse METHOD_NAME(DescribeTaskDefinitionRequest VAR_DESCRIBETASKDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTaskDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTaskDefinitionResponseUnmarshaller.Instance; return Invoke<DescribeTaskDefinitionResponse>(VAR_DESCRIBETASKDEFINITIONREQUEST, VAR_VAR); }
public void METHOD_NAME() { if (count > LITERAL_INT) { ArrayUtil.TimSort(points, LITERAL_INT, count); } }
public static RevFilter METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME.GetTime()); }
public virtual void METHOD_NAME(E VAR_E) { throw new System.NotSupportedException(); }
public EscherDggRecord METHOD_NAME() { return dgg; }
public virtual ListenerHandle METHOD_NAME(ConfigChangedListener VAR_CONFIGCHANGEDLISTENER) { return AddListener<ConfigChangedListener>(VAR_CONFIGCHANGEDLISTENER); }
public virtual DetectSentimentResponse METHOD_NAME(DetectSentimentRequest VAR_DETECTSENTIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectSentimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectSentimentResponseUnmarshaller.Instance; return Invoke<DetectSentimentResponse>(VAR_DETECTSENTIMENTREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public override Object METHOD_NAME() { return new HeaderRecord(this.Text); }
public virtual CreateEndpointConfigResponse METHOD_NAME(CreateEndpointConfigRequest VAR_CREATEENDPOINTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEndpointConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEndpointConfigResponseUnmarshaller.Instance; return Invoke<CreateEndpointConfigResponse>(VAR_CREATEENDPOINTCONFIGREQUEST, VAR_VAR); }
public virtual android.view.animation.Interpolator METHOD_NAME() { return mInterpolator; }
public virtual GetSolutionMetricsResponse METHOD_NAME(GetSolutionMetricsRequest VAR_GETSOLUTIONMETRICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSolutionMetricsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSolutionMetricsResponseUnmarshaller.Instance; return Invoke<GetSolutionMetricsResponse>(VAR_GETSOLUTIONMETRICSREQUEST, VAR_VAR); }
public virtual StopActivityStreamResponse METHOD_NAME(StopActivityStreamRequest VAR_STOPACTIVITYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopActivityStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopActivityStreamResponseUnmarshaller.Instance; return Invoke<StopActivityStreamResponse>(VAR_STOPACTIVITYSTREAMREQUEST, VAR_VAR); }
public virtual ListTypedLinkFacetAttributesResponse METHOD_NAME(ListTypedLinkFacetAttributesRequest VAR_LISTTYPEDLINKFACETATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTypedLinkFacetAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTypedLinkFacetAttributesResponseUnmarshaller.Instance; return Invoke<ListTypedLinkFacetAttributesResponse>(VAR_LISTTYPEDLINKFACETATTRIBUTESREQUEST, VAR_VAR); }
public virtual ListSentimentDetectionJobsResponse METHOD_NAME(ListSentimentDetectionJobsRequest VAR_LISTSENTIMENTDETECTIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSentimentDetectionJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSentimentDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListSentimentDetectionJobsResponse>(VAR_LISTSENTIMENTDETECTIONJOBSREQUEST, VAR_VAR); }
public virtual GetAccountSendingEnabledResponse METHOD_NAME(GetAccountSendingEnabledRequest VAR_GETACCOUNTSENDINGENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAccountSendingEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAccountSendingEnabledResponseUnmarshaller.Instance; return Invoke<GetAccountSendingEnabledResponse>(VAR_GETACCOUNTSENDINGENABLEDREQUEST, VAR_VAR); }
public static int METHOD_NAME(String VAR_STRING) { String VAR_STRING; if (string.Compare(VAR_STRING, (LITERAL_STRING), StringComparison.OrdinalIgnoreCase) == LITERAL_INT) { VAR_STRING = LITERAL_STRING; } else { VAR_STRING = VAR_STRING; } for (int i = LITERAL_INT; i < _formats.Length; i++) { if (VAR_STRING.Equals(_formats[i])) { return i; } } return -LITERAL_INT; }
public override void METHOD_NAME(StringBuilder VAR_STRINGBUILDER, Object VAR_OBJECT) { FormatValue(VAR_STRINGBUILDER, VAR_OBJECT); }
public virtual BatchCheckLayerAvailabilityResponse METHOD_NAME(BatchCheckLayerAvailabilityRequest VAR_BATCHCHECKLAYERAVAILABILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchCheckLayerAvailabilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchCheckLayerAvailabilityResponseUnmarshaller.Instance; return Invoke<BatchCheckLayerAvailabilityResponse>(VAR_BATCHCHECKLAYERAVAILABILITYREQUEST, VAR_VAR); }
public void METHOD_NAME() { subrecords.Clear(); }
public override IList<Ref> METHOD_NAME() { CheckCallable(); IDictionary<string, Ref> VAR_IDICTIONARY<STRING, REF>; IList<Ref> VAR_ILIST<REF> = new AList<Ref>(); RevWalk VAR_REVWALK = new RevWalk(repo); try { VAR_IDICTIONARY<STRING, REF> = repo.RefDatabase.GetRefs(Constants.R_TAGS); foreach (Ref @ref in VAR_IDICTIONARY<STRING, REF>.Values) { VAR_ILIST<REF>.AddItem(@ref); } } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_REVWALK.Release(); } VAR_ILIST<REF>.Sort(new _IComparer_92()); SetCallable(false); return VAR_ILIST<REF>; }
public virtual void METHOD_NAME() { lock (this) { cache.METHOD_NAME(); } }
public virtual int METHOD_NAME(E VAR_E, int VAR_INT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_E, VAR_OBJECT[], VAR_INT, VAR_OBJECT[].Length); }
public override string METHOD_NAME(string VAR_STRING, TokenGroup VAR_TOKENGROUP) { if (VAR_TOKENGROUP.TotalScore == LITERAL_INT) return VAR_STRING; float VAR_FLOAT = VAR_TOKENGROUP.TotalScore; if (VAR_FLOAT == LITERAL_INT) { return VAR_STRING; } var VAR_VAR = new StringBuilder(VAR_STRING.Length + EXTRA); VAR_VAR.Append(LITERAL_STRING); if (m_highlightForeground) { VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(GetForegroundColorString(VAR_FLOAT)); VAR_VAR.Append(LITERAL_STRING); } if (m_highlightBackground) { VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(GetBackgroundColorString(VAR_FLOAT)); VAR_VAR.Append(LITERAL_STRING); } VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(VAR_STRING); VAR_VAR.Append(LITERAL_STRING); return VAR_VAR.ToString(); }
public PasswordRecord METHOD_NAME() { return _passwordRecord; }
public override object METHOD_NAME() { SlicedIndexInput VAR_SLICEDINDEXINPUT = (SlicedIndexInput)base.METHOD_NAME(); VAR_SLICEDINDEXINPUT.@base = (IndexInput)@base.METHOD_NAME(); VAR_SLICEDINDEXINPUT.fileOffset = fileOffset; VAR_SLICEDINDEXINPUT.length = length; return VAR_SLICEDINDEXINPUT; }
public virtual int METHOD_NAME(int VAR_INT) { return sourceLines[VAR_INT] - LITERAL_INT; }
public virtual DeleteResolverRuleResponse METHOD_NAME(DeleteResolverRuleRequest VAR_DELETERESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteResolverRuleResponseUnmarshaller.Instance; return Invoke<DeleteResolverRuleResponse>(VAR_DELETERESOLVERRULEREQUEST, VAR_VAR); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE, int VAR_INT) { return PMT(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, VAR_INT) - IPMT(VAR_DOUBLE, VAR_INT, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, VAR_INT); }
public override java.util.Set<K> METHOD_NAME() { return this.navigableKeySet(); }
public override bool METHOD_NAME() { int VAR_INT; int VAR_INT; if (!r_more_than_one_syllable_word()) { return false; } m_limit_backward = m_cursor; m_cursor = m_limit; VAR_INT = m_limit - m_cursor; do { if (!r_stem_nominal_verb_suffixes()) { goto lab0; } } while (false); lab0: m_cursor = m_limit - VAR_INT; if (!(B_continue_stemming_noun_suffixes)) { return false; } VAR_INT = m_limit - m_cursor; do { if (!r_stem_noun_suffixes()) { goto lab1; } } while (false); lab1: m_cursor = m_limit - VAR_INT; m_cursor = m_limit_backward; if (!r_postlude()) { return false; } return true; }
public virtual ListShardsResponse METHOD_NAME(ListShardsRequest VAR_LISTSHARDSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListShardsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListShardsResponseUnmarshaller.Instance; return Invoke<ListShardsResponse>(VAR_LISTSHARDSREQUEST, VAR_VAR); }
public SearcherAndTaxonomy(IndexSearcher VAR_INDEXSEARCHER, DirectoryTaxonomyReader VAR_DIRECTORYTAXONOMYREADER) { this.Searcher = VAR_INDEXSEARCHER; this.TaxonomyReader = VAR_DIRECTORYTAXONOMYREADER; }
public override TreeFilter METHOD_NAME() { return this; }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return map.Put(VAR_OBJECT); }
public Position METHOD_NAME(int VAR_INT) { while (VAR_INT >= nextPos) { if (count == positions.Length) { Position[] VAR_POSITION[] = new Position[ArrayUtil.Oversize(LITERAL_INT + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; System.Array.Copy(positions, nextWrite, VAR_POSITION[], LITERAL_INT, positions.Length - nextWrite); System.Array.Copy(positions, LITERAL_INT, VAR_POSITION[], positions.Length - nextWrite, nextWrite); for (int i = positions.Length; i < VAR_POSITION[].Length; i++) { VAR_POSITION[][i] = new Position(); } nextWrite = positions.Length; positions = VAR_POSITION[]; } if (nextWrite == positions.Length) { nextWrite = LITERAL_INT; } Debug.Assert(positions[nextWrite].count == LITERAL_INT); positions[nextWrite++].VAR_INT = nextPos++; count++; } Debug.Assert(InBounds(VAR_INT)); int VAR_INT = GetIndex(VAR_INT); Debug.Assert(positions[VAR_INT].VAR_INT == VAR_INT); return positions[VAR_INT]; }
public override void METHOD_NAME() { lock (this) { pos = LITERAL_INT; } }
public override void METHOD_NAME(FacetsConfig VAR_FACETSCONFIG) { for (int i = LITERAL_INT; i < maxDims; i++) { VAR_FACETSCONFIG.SetHierarchical(i.ToString(CultureInfo.InvariantCulture), true); VAR_FACETSCONFIG.SetMultiValued(i.ToString(CultureInfo.InvariantCulture), true); } }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) return false; if (VAR_OBJECT == this) return true; if (VAR_OBJECT.GetType() != GetType()) return false; HSSFClientAnchor VAR_HSSFCLIENTANCHOR = (HSSFClientAnchor)VAR_OBJECT; return VAR_HSSFCLIENTANCHOR.Col1 == Col1 && VAR_HSSFCLIENTANCHOR.Col2 == Col2 && VAR_HSSFCLIENTANCHOR.Dx1 == Dx1 && VAR_HSSFCLIENTANCHOR.Dx2 == Dx2 && VAR_HSSFCLIENTANCHOR.Dy1 == Dy1 && VAR_HSSFCLIENTANCHOR.Dy2 == Dy2 && VAR_HSSFCLIENTANCHOR.Row1 == Row1 && VAR_HSSFCLIENTANCHOR.Row2 == Row2 && VAR_HSSFCLIENTANCHOR.AnchorType == AnchorType; }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(diff.METHOD_NAME()); }
public static IndexWriterConfig METHOD_NAME(Config VAR_CONFIG, PerfRunData VAR_PERFRUNDATA, OpenMode VAR_OPENMODE, IndexCommit VAR_INDEXCOMMIT) { LuceneVersion VAR_LUCENEVERSION = (LuceneVersion)Enum.Parse(typeof(LuceneVersion), VAR_CONFIG.Get(LITERAL_STRING, LuceneVersion.LUCENE_48.ToString())); IndexWriterConfig VAR_INDEXWRITERCONFIG = new IndexWriterConfig(VAR_LUCENEVERSION, VAR_PERFRUNDATA.Analyzer); VAR_INDEXWRITERCONFIG.OpenMode = VAR_OPENMODE; IndexDeletionPolicy VAR_INDEXDELETIONPOLICY = GetIndexDeletionPolicy(VAR_CONFIG); VAR_INDEXWRITERCONFIG.IndexDeletionPolicy = VAR_INDEXDELETIONPOLICY; if (VAR_INDEXCOMMIT != LITERAL_NULL) VAR_INDEXWRITERCONFIG.IndexCommit = VAR_INDEXCOMMIT; string VAR_STRING = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_STRING); if (VAR_STRING.Contains(LITERAL_STRING)) { VAR_STRING = LITERAL_STRING; } Type VAR_TYPE = Type.GetType(VAR_STRING); if (VAR_TYPE == LITERAL_NULL) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } else if (VAR_TYPE.Equals(typeof(NoMergeScheduler))) { VAR_INDEXWRITERCONFIG.MergeScheduler = NoMergeScheduler.INSTANCE; } else { try { VAR_INDEXWRITERCONFIG.MergeScheduler = (IMergeScheduler)Activator.CreateInstance(VAR_TYPE); } catch (Exception e) { } } }
public virtual GetCapacityReservationUsageResponse METHOD_NAME(GetCapacityReservationUsageRequest VAR_GETCAPACITYRESERVATIONUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCapacityReservationUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCapacityReservationUsageResponseUnmarshaller.Instance; return Invoke<GetCapacityReservationUsageResponse>(VAR_GETCAPACITYRESERVATIONUSAGEREQUEST, VAR_VAR); }
public void METHOD_NAME(HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { cfAggregate.METHOD_NAME(VAR_HSSFCONDITIONALFORMATTINGRULE.CfRuleRecord); }
public DocState(bool VAR_BOOL, FieldType VAR_FIELDTYPE, FieldType VAR_FIELDTYPE) { this.VAR_BOOL = VAR_BOOL; if (VAR_BOOL) { fields = new Dictionary<string, Field>(); numericFields = new Dictionary<string, Field>(); fields[BODY_FIELD] = new Field(BODY_FIELD, LITERAL_STRING, VAR_FIELDTYPE); fields[TITLE_FIELD] = new Field(TITLE_FIELD, LITERAL_STRING, VAR_FIELDTYPE); fields[DATE_FIELD] = new Field(DATE_FIELD, LITERAL_STRING, VAR_FIELDTYPE); fields[ID_FIELD] = new StringField(ID_FIELD, LITERAL_STRING, Field.Store.YES); fields[NAME_FIELD] = new Field(NAME_FIELD, LITERAL_STRING, VAR_FIELDTYPE); numericFields[DATE_MSEC_FIELD] = new Int64Field(DATE_MSEC_FIELD, LITERAL_INT, Field.Store.NO); numericFields[TIME_SEC_FIELD] = new Int32Field(TIME_SEC_FIELD, LITERAL_INT, Field.Store.NO); doc = new Document(); } else { numericFields = LITERAL_NULL; fields = LITERAL_NULL; doc = LITERAL_NULL; } }
public virtual char[] METHOD_NAME() { return value; }
public void METHOD_NAME(NameCommentRecord VAR_NAMECOMMENTRECORD) { if (commentRecords.ContainsValue(VAR_NAMECOMMENTRECORD)) { foreach (KeyValuePair<string, NameCommentRecord> entry in commentRecords) { if (entry.Value.Equals(VAR_NAMECOMMENTRECORD)) { commentRecords.Remove(entry.Key); break; } } } commentRecords[VAR_NAMECOMMENTRECORD.NameText] = VAR_NAMECOMMENTRECORD; }
public CompleteMultipartUploadRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _vaultName = VAR_STRING; _uploadId = VAR_STRING; _archiveSize = VAR_STRING; _checksum = VAR_STRING; }
public virtual Query METHOD_NAME(XmlElement VAR_XMLELEMENT) { IQueryBuilder VAR_IQUERYBUILDER; if (!builders.TryGetValue(VAR_XMLELEMENT.Name, out VAR_IQUERYBUILDER) || VAR_IQUERYBUILDER == LITERAL_NULL) { throw new ParserException(LITERAL_STRING + VAR_XMLELEMENT.Name); } return VAR_IQUERYBUILDER.METHOD_NAME(VAR_XMLELEMENT); }
public static double METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, double VAR_DOUBLE, bool VAR_BOOL) { double VAR_DOUBLE = LITERAL_INT; if (VAR_DOUBLE == LITERAL_INT) { VAR_DOUBLE = -LITERAL_INT * (VAR_DOUBLE + VAR_DOUBLE) / VAR_DOUBLE; } else { double VAR_DOUBLE = VAR_DOUBLE + LITERAL_INT; double VAR_DOUBLE = (VAR_BOOL ? VAR_DOUBLE : LITERAL_INT) * VAR_DOUBLE / VAR_DOUBLE; double VAR_DOUBLE = ((VAR_DOUBLE - VAR_DOUBLE) < LITERAL_INT) ? Math.Log(VAR_DOUBLE - VAR_DOUBLE) : Math.Log(VAR_DOUBLE - VAR_DOUBLE); double VAR_DOUBLE = ((VAR_DOUBLE - VAR_DOUBLE) < LITERAL_INT) ? Math.Log(-VAR_DOUBLE - VAR_DOUBLE) : Math.Log(VAR_DOUBLE + VAR_DOUBLE); double VAR_DOUBLE = Math.Log(VAR_DOUBLE); VAR_DOUBLE = (VAR_DOUBLE - VAR_DOUBLE) / VAR_DOUBLE; } return VAR_DOUBLE; }
public AndQueryNode(IList<IQueryNode> VAR_ILIST<IQUERYNODE>) : base(clauses) { if ((VAR_ILIST<IQUERYNODE> == LITERAL_NULL) || (VAR_ILIST<IQUERYNODE>.Count == LITERAL_INT)) { throw new ArgumentException(LITERAL_STRING); } }
public SeriesListRecord(short[] VAR_SHORT[]) { field_1_seriesNumbers = VAR_SHORT[]; }
public override string METHOD_NAME() { return value + LITERAL_STRING + begin + LITERAL_STRING + end; }
public override string METHOD_NAME() { return LITERAL_STRING + this.QueryConfigHandler + LITERAL_STRING; }
public virtual DescribeActivitiesResponse METHOD_NAME(DescribeActivitiesRequest VAR_DESCRIBEACTIVITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeActivitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeActivitiesResponseUnmarshaller.Instance; return Invoke<DescribeActivitiesResponse>(VAR_DESCRIBEACTIVITIESREQUEST, VAR_VAR); }
public int METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(_nColumns - LITERAL_INT); VAR_ILITTLEENDIANOUTPUT.WriteShort(_nRows - LITERAL_INT); ConstantValueParser.Encode(VAR_ILITTLEENDIANOUTPUT, _arrayValues); return LITERAL_INT + ConstantValueParser.GetEncodedSize(_arrayValues); }
public virtual DescribeFleetMetadataResponse METHOD_NAME(DescribeFleetMetadataRequest VAR_DESCRIBEFLEETMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetMetadataResponseUnmarshaller.Instance; return Invoke<DescribeFleetMetadataResponse>(VAR_DESCRIBEFLEETMETADATAREQUEST, VAR_VAR); }
public virtual ModifyGlobalClusterResponse METHOD_NAME(ModifyGlobalClusterRequest VAR_MODIFYGLOBALCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyGlobalClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyGlobalClusterResponseUnmarshaller.Instance; return Invoke<ModifyGlobalClusterResponse>(VAR_MODIFYGLOBALCLUSTERREQUEST, VAR_VAR); }
public virtual DescribeIdentityIdFormatResponse METHOD_NAME(DescribeIdentityIdFormatRequest VAR_DESCRIBEIDENTITYIDFORMATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityIdFormatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityIdFormatResponseUnmarshaller.Instance; return Invoke<DescribeIdentityIdFormatResponse>(VAR_DESCRIBEIDENTITYIDFORMATREQUEST, VAR_VAR); }
public virtual ListUserGroupsResponse METHOD_NAME(ListUserGroupsRequest VAR_LISTUSERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListUserGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListUserGroupsResponseUnmarshaller.Instance; return Invoke<ListUserGroupsResponse>(VAR_LISTUSERGROUPSREQUEST, VAR_VAR); }
public virtual NGit.Api.RevertCommand METHOD_NAME(string VAR_STRING, AnyObjectId VAR_ANYOBJECTID) { return METHOD_NAME(new ObjectIdRef.Unpeeled(RefStorage.LOOSE, VAR_STRING, VAR_ANYOBJECTID.Copy())); }
public BeiderMorseFilter(TokenStream VAR_TOKENSTREAM, PhoneticEngine VAR_PHONETICENGINE, LanguageSet VAR_LANGUAGESET) : base(input) { this.VAR_PHONETICENGINE = VAR_PHONETICENGINE; this.VAR_LANGUAGESET = VAR_LANGUAGESET; this.termAtt = AddAttribute<ICharTermAttribute>(); this.posIncAtt = AddAttribute<IPositionIncrementAttribute>(); }
public virtual ListUsersResponse METHOD_NAME(ListUsersRequest VAR_LISTUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListUsersResponseUnmarshaller.Instance; return Invoke<ListUsersResponse>(VAR_LISTUSERSREQUEST, VAR_VAR); }
public PutUserPolicyRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _userName = VAR_STRING; _policyName = VAR_STRING; _policyDocument = VAR_STRING; }
public override void METHOD_NAME() { lock (this) { base.METHOD_NAME(); } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Windowing); }
public AreaValueArray(TwoDEval VAR_TWODEVAL) : base(ae.Width * ae.Height) { _ae = VAR_TWODEVAL; _width = VAR_TWODEVAL.Width; }
public virtual RegisterOnPremisesInstanceResponse METHOD_NAME(RegisterOnPremisesInstanceRequest VAR_REGISTERONPREMISESINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterOnPremisesInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterOnPremisesInstanceResponseUnmarshaller.Instance; return Invoke<RegisterOnPremisesInstanceResponse>(VAR_REGISTERONPREMISESINSTANCEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(unused)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual LsRemoteCommand METHOD_NAME() { return new LsRemoteCommand(repo); }
public virtual bool METHOD_NAME() { return Stage == STAGE_0; }
public virtual StopEntitiesDetectionJobResponse METHOD_NAME(StopEntitiesDetectionJobRequest VAR_STOPENTITIESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopEntitiesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopEntitiesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopEntitiesDetectionJobResponse>(VAR_STOPENTITIESDETECTIONJOBREQUEST, VAR_VAR); }
public sealed override int METHOD_NAME() { return protectedArrayOffset(); }
public SetVaultNotificationsRequest(string VAR_STRING, string VAR_STRING, VaultNotificationConfig VAR_VAULTNOTIFICATIONCONFIG) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _vaultNotificationConfig = VAR_VAULTNOTIFICATIONCONFIG; }
public int METHOD_NAME(IConditionalFormatting VAR_ICONDITIONALFORMATTING) { CFRecordsAggregate VAR_CFRECORDSAGGREGATE = ((HSSFConditionalFormatting)VAR_ICONDITIONALFORMATTING).CFRecordsAggregate.CloneCFAggregate(); return _conditionalFormattingTable.Add(VAR_CFRECORDSAGGREGATE); }
public MemAreaPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_reserved = VAR_ILITTLEENDIANINPUT.ReadInt(); field_2_subex_len = VAR_ILITTLEENDIANINPUT.ReadShort(); }
public virtual DescribeScalingActivitiesResponse METHOD_NAME() { return METHOD_NAME(new DescribeScalingActivitiesRequest()); }
public virtual StopApplicationResponse METHOD_NAME(StopApplicationRequest VAR_STOPAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopApplicationResponseUnmarshaller.Instance; return Invoke<StopApplicationResponse>(VAR_STOPAPPLICATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(long VAR_LONG) { throw new NotSupportedException(); }
public virtual DescribeLocalGatewayRouteTableVpcAssociationsResponse METHOD_NAME(DescribeLocalGatewayRouteTableVpcAssociationsRequest VAR_DESCRIBELOCALGATEWAYROUTETABLEVPCASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewayRouteTableVpcAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewayRouteTableVpcAssociationsResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayRouteTableVpcAssociationsResponse>(VAR_DESCRIBELOCALGATEWAYROUTETABLEVPCASSOCIATIONSREQUEST, VAR_VAR); }
public ErrorEval METHOD_NAME() { return _errorEval; }
public virtual DeleteNetworkInterfaceResponse METHOD_NAME(DeleteNetworkInterfaceRequest VAR_DELETENETWORKINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNetworkInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteNetworkInterfaceResponse>(VAR_DELETENETWORKINTERFACEREQUEST, VAR_VAR); }
public Group(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING, DateTime VAR_DATETIME) { _path = VAR_STRING; _groupName = VAR_STRING; _groupId = VAR_STRING; _arn = VAR_STRING; _createDate = VAR_DATETIME; }
public void METHOD_NAME(int VAR_INT) { if (linkTable.NumNames > VAR_INT) { int VAR_INT = FindFirstRecordLocBySid(NameRecord.sid); records.Remove(VAR_INT + VAR_INT); linkTable.METHOD_NAME(VAR_INT); } }
public BaseFragListBuilder(int VAR_INT) { if (VAR_INT < LITERAL_INT) throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); this.VAR_INT = VAR_INT; this.minFragCharSize = Math.Max(LITERAL_INT, VAR_INT * MIN_FRAG_CHAR_SIZE_FACTOR); }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { return new PatternReplaceCharFilter(pattern, replacement, maxBlockChars, blockDelimiters, VAR_TEXTREADER); }
public override java.util.Iterator<K> METHOD_NAME() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public virtual CreatePushTemplateResponse METHOD_NAME(CreatePushTemplateRequest VAR_CREATEPUSHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePushTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePushTemplateResponseUnmarshaller.Instance; return Invoke<CreatePushTemplateResponse>(VAR_CREATEPUSHTEMPLATEREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_EDITTIME); }
public virtual ListReusableDelegationSetsResponse METHOD_NAME() { return METHOD_NAME(new ListReusableDelegationSetsRequest()); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } if (VAR_OBJECT is AttributeSource other) { if (HasAttributes) { if (!other.HasAttributes) { return false; } if (this.attributeImpls.Count != other.attributeImpls.Count) { return false; } State VAR_STATE = this.GetCurrentState(); State VAR_STATE = other.GetCurrentState(); while (VAR_STATE != LITERAL_NULL && VAR_STATE != LITERAL_NULL) { if (VAR_STATE.attribute.GetType() != VAR_STATE.attribute.GetType() || !VAR_STATE.attribute.METHOD_NAME(VAR_STATE.attribute)) { return false; } VAR_STATE = VAR_STATE.next; VAR_STATE = VAR_STATE.next; } return true; } else { return !other.HasAttributes; } } else { return false; } }
public static String METHOD_NAME(double VAR_DOUBLE) { return RawDoubleBitsToText(BitConverter.DoubleToInt64Bits(VAR_DOUBLE)); }
public void METHOD_NAME(ICell VAR_ICELL) { _bookEvaluator.NotifyUpdateCell(new HSSFEvaluationCell(VAR_ICELL)); }
public virtual Ref METHOD_NAME() { return @ref; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); foreach (Block b in blocks) { VAR_STRINGBUILDER.Append(b.chars, LITERAL_INT, b.length); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public QueryNodeError(IMessage VAR_IMESSAGE) : base(message.Key) { this.VAR_IMESSAGE = VAR_IMESSAGE; }
public virtual GetRelationalDatabaseMasterUserPasswordResponse METHOD_NAME(GetRelationalDatabaseMasterUserPasswordRequest VAR_GETRELATIONALDATABASEMASTERUSERPASSWORDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseMasterUserPasswordRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseMasterUserPasswordResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseMasterUserPasswordResponse>(VAR_GETRELATIONALDATABASEMASTERUSERPASSWORDREQUEST, VAR_VAR); }
public LuceneDictionary(IndexReader VAR_INDEXREADER, string VAR_STRING) { this.VAR_INDEXREADER = VAR_INDEXREADER; this.VAR_STRING = VAR_STRING; }
public virtual CreateRuleResponse METHOD_NAME(CreateRuleRequest VAR_CREATERULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRuleResponseUnmarshaller.Instance; return Invoke<CreateRuleResponse>(VAR_CREATERULEREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(errorCheck); }
public virtual DescribeAlarmHistoryResponse METHOD_NAME() { return METHOD_NAME(new DescribeAlarmHistoryRequest()); }
public virtual DescribeVpcClassicLinkDnsSupportResponse METHOD_NAME(DescribeVpcClassicLinkDnsSupportRequest VAR_DESCRIBEVPCCLASSICLINKDNSSUPPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcClassicLinkDnsSupportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcClassicLinkDnsSupportResponseUnmarshaller.Instance; return Invoke<DescribeVpcClassicLinkDnsSupportResponse>(VAR_DESCRIBEVPCCLASSICLINKDNSSUPPORTREQUEST, VAR_VAR); }
public static char METHOD_NAME(char VAR_CHAR) { return VAR_CHAR <= LITERAL_CHAR ? LC[VAR_CHAR] : VAR_CHAR; }
public string[] METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return METHOD_NAME(VAR_JAVA.LANG.CHARSEQUENCE, LITERAL_INT); }
public virtual void METHOD_NAME() { lock (this) { if (executed) { throw new InvalidOperationException(LITERAL_STRING); } executed = true; runData.SetStartTimeMillis(); algorithm.METHOD_NAME(); } }
public V METHOD_NAME() { return value; }
public override Object METHOD_NAME() { VCenterRecord VAR_VCENTERRECORD = new VCenterRecord(); VAR_VCENTERRECORD.field_1_vcenter = field_1_vcenter; return VAR_VCENTERRECORD; }
public virtual void METHOD_NAME(IRevision VAR_IREVISION) { throw new NotSupportedException(LITERAL_STRING); }
public override bool METHOD_NAME() { return a.METHOD_NAME() || b.METHOD_NAME(); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is NGit.Transport.URIish)) { return false; } NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = (NGit.Transport.URIish)VAR_OBJECT; if (!Eq(GetScheme(), VAR_NGIT.TRANSPORT.URIISH.GetScheme())) { return false; } if (!Eq(GetUser(), VAR_NGIT.TRANSPORT.URIISH.GetUser())) { return false; } if (!Eq(GetPass(), VAR_NGIT.TRANSPORT.URIISH.GetPass())) { return false; } if (!Eq(GetHost(), VAR_NGIT.TRANSPORT.URIISH.GetHost())) { return false; } if (GetPort() != VAR_NGIT.TRANSPORT.URIISH.GetPort()) { return false; } if (!Eq(GetPath(), VAR_NGIT.TRANSPORT.URIISH.GetPath())) { return false; } return true; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new LowerCaseFilter(m_luceneMatchVersion, VAR_TOKENSTREAM); }
public override string METHOD_NAME() { return LITERAL_STRING + Version + LITERAL_STRING + SourceFiles; }
public static double METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL == BlankEval.instance) { return LITERAL_INT; } if (VAR_VALUEEVAL is NumericValueEval) { return ((NumericValueEval)VAR_VALUEEVAL).NumberValue; } if (VAR_VALUEEVAL is StringEval) { double VAR_DOUBLE = ParseDouble(((StringEval)VAR_VALUEEVAL).StringValue); if (double.IsNaN(VAR_DOUBLE)) { throw EvaluationException.InvalidValue(); } return VAR_DOUBLE; } throw new Exception(LITERAL_STRING + VAR_VALUEEVAL.GetType().Name + LITERAL_STRING); }
public virtual SetQueueAttributesResponse METHOD_NAME(SetQueueAttributesRequest VAR_SETQUEUEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetQueueAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetQueueAttributesResponseUnmarshaller.Instance; return Invoke<SetQueueAttributesResponse>(VAR_SETQUEUEATTRIBUTESREQUEST, VAR_VAR); }
public virtual E METHOD_NAME() { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink.previous; if (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { return VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data; } throw new java.util.NoSuchElementException(); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsKey(VAR_OBJECT); }
public virtual CreateLoadBalancerListenersResponse METHOD_NAME(CreateLoadBalancerListenersRequest VAR_CREATELOADBALANCERLISTENERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLoadBalancerListenersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLoadBalancerListenersResponseUnmarshaller.Instance; return Invoke<CreateLoadBalancerListenersResponse>(VAR_CREATELOADBALANCERLISTENERSREQUEST, VAR_VAR); }
public virtual RebootWorkspacesResponse METHOD_NAME(RebootWorkspacesRequest VAR_REBOOTWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootWorkspacesResponseUnmarshaller.Instance; return Invoke<RebootWorkspacesResponse>(VAR_REBOOTWORKSPACESREQUEST, VAR_VAR); }
public sealed override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return key.METHOD_NAME(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey()) && value.METHOD_NAME(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public DeleteCustomerGatewayRequest(string VAR_STRING) { _customerGatewayId = VAR_STRING; }
public override string METHOD_NAME() { return FileMode + LITERAL_STRING + Length + LITERAL_STRING + LastModified + LITERAL_STRING + GetObjectId() + LITERAL_STRING + Stage + LITERAL_STRING + PathString + LITERAL_STRING; }
public virtual StartDocumentAnalysisResponse METHOD_NAME(StartDocumentAnalysisRequest VAR_STARTDOCUMENTANALYSISREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDocumentAnalysisRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<StartDocumentAnalysisResponse>(VAR_STARTDOCUMENTANALYSISREQUEST, VAR_VAR); }
public virtual UpdatePhoneNumberSettingsResponse METHOD_NAME(UpdatePhoneNumberSettingsRequest VAR_UPDATEPHONENUMBERSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePhoneNumberSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<UpdatePhoneNumberSettingsResponse>(VAR_UPDATEPHONENUMBERSETTINGSREQUEST, VAR_VAR); }
public virtual BatchStopUpdateActionResponse METHOD_NAME(BatchStopUpdateActionRequest VAR_BATCHSTOPUPDATEACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchStopUpdateActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchStopUpdateActionResponseUnmarshaller.Instance; return Invoke<BatchStopUpdateActionResponse>(VAR_BATCHSTOPUPDATEACTIONREQUEST, VAR_VAR); }
public void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { this.VAR_CHAR[] = VAR_CHAR[]; this.VAR_INT = VAR_INT; this.index = VAR_INT; this.VAR_INT = VAR_INT; this.limit = VAR_INT + VAR_INT; }
public virtual CreateHyperParameterTuningJobResponse METHOD_NAME(CreateHyperParameterTuningJobRequest VAR_CREATEHYPERPARAMETERTUNINGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHyperParameterTuningJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHyperParameterTuningJobResponseUnmarshaller.Instance; return Invoke<CreateHyperParameterTuningJobResponse>(VAR_CREATEHYPERPARAMETERTUNINGJOBREQUEST, VAR_VAR); }
public TermsEnumIndex(TermsEnum VAR_TERMSENUM, int VAR_INT) { this.TermsEnum = VAR_TERMSENUM; this.SubIndex = VAR_INT; }
public virtual UnarchiveFindingsResponse METHOD_NAME(UnarchiveFindingsRequest VAR_UNARCHIVEFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnarchiveFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnarchiveFindingsResponseUnmarshaller.Instance; return Invoke<UnarchiveFindingsResponse>(VAR_UNARCHIVEFINDINGSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(SortField VAR_SORTFIELD) { this.fields = new SortField[] { VAR_SORTFIELD }; }
public virtual CreateBusinessReportScheduleResponse METHOD_NAME(CreateBusinessReportScheduleRequest VAR_CREATEBUSINESSREPORTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBusinessReportScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBusinessReportScheduleResponseUnmarshaller.Instance; return Invoke<CreateBusinessReportScheduleResponse>(VAR_CREATEBUSINESSREPORTSCHEDULEREQUEST, VAR_VAR); }
public virtual GetIPSetResponse METHOD_NAME(GetIPSetRequest VAR_GETIPSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIPSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIPSetResponseUnmarshaller.Instance; return Invoke<GetIPSetResponse>(VAR_GETIPSETREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, PropertiesSize); int VAR_INT = VAR_INT + LITERAL_INT; foreach (EscherProperty property in properties) { VAR_INT += property.SerializeSimplePart(VAR_BYTE[], VAR_INT); } foreach (EscherProperty property in properties) { VAR_INT += property.SerializeComplexPart(VAR_BYTE[], VAR_INT); } VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public virtual ListTagsForVaultResponse METHOD_NAME(ListTagsForVaultRequest VAR_LISTTAGSFORVAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForVaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForVaultResponseUnmarshaller.Instance; return Invoke<ListTagsForVaultResponse>(VAR_LISTTAGSFORVAULTREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return deltaCacheSize; }
public int METHOD_NAME() { return _limit - _position; }
public virtual DescribeReservedInstancesResponse METHOD_NAME(DescribeReservedInstancesRequest VAR_DESCRIBERESERVEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedInstancesResponseUnmarshaller.Instance; return Invoke<DescribeReservedInstancesResponse>(VAR_DESCRIBERESERVEDINSTANCESREQUEST, VAR_VAR); }
public PostRealTimeDeviceDataRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public ScandinavianFoldingFilter(TokenStream VAR_TOKENSTREAM) : base(input) { charTermAttribute = AddAttribute<ICharTermAttribute>(); }
public virtual SetLoadBalancerPoliciesForBackendServerResponse METHOD_NAME(SetLoadBalancerPoliciesForBackendServerRequest VAR_SETLOADBALANCERPOLICIESFORBACKENDSERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetLoadBalancerPoliciesForBackendServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller.Instance; return Invoke<SetLoadBalancerPoliciesForBackendServerResponse>(VAR_SETLOADBALANCERPOLICIESFORBACKENDSERVERREQUEST, VAR_VAR); }
public virtual ImportSnapshotResponse METHOD_NAME(ImportSnapshotRequest VAR_IMPORTSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportSnapshotResponseUnmarshaller.Instance; return Invoke<ImportSnapshotResponse>(VAR_IMPORTSNAPSHOTREQUEST, VAR_VAR); }
public void METHOD_NAME(CellRangeAddress VAR_CELLRANGEADDRESS) { _list.Add(VAR_CELLRANGEADDRESS); }
public override java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.INT); byteBuffer.position(_position * libcore.io.SizeOf.INT); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_INT[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_INT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual DeleteInsightRulesResponse METHOD_NAME(DeleteInsightRulesRequest VAR_DELETEINSIGHTRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInsightRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInsightRulesResponseUnmarshaller.Instance; return Invoke<DeleteInsightRulesResponse>(VAR_DELETEINSIGHTRULESREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { field_5_stream_id = VAR_INT; }
public virtual StartVpcEndpointServicePrivateDnsVerificationResponse METHOD_NAME(StartVpcEndpointServicePrivateDnsVerificationRequest VAR_STARTVPCENDPOINTSERVICEPRIVATEDNSVERIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartVpcEndpointServicePrivateDnsVerificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartVpcEndpointServicePrivateDnsVerificationResponseUnmarshaller.Instance; return Invoke<StartVpcEndpointServicePrivateDnsVerificationResponse>(VAR_STARTVPCENDPOINTSERVICEPRIVATEDNSVERIFICATIONREQUEST, VAR_VAR); }
public SSTRecord() { field_1_num_strings = LITERAL_INT; field_2_num_unique_strings = LITERAL_INT; field_3_strings = new IntMapper<UnicodeString>(); deserializer = new SSTDeserializer(field_3_strings); }
public virtual void METHOD_NAME() { points.Clear(); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { PositionTrackingVisitor VAR_POSITIONTRACKINGVISITOR = new PositionTrackingVisitor(VAR_RECORDVISITOR, LITERAL_INT); int VAR_INT = this.RowBlockCount; for (int blockIndex = LITERAL_INT; blockIndex < VAR_INT; blockIndex++) { int VAR_INT = LITERAL_INT; int VAR_INT = VisitRowRecordsForBlock(blockIndex, VAR_RECORDVISITOR); VAR_INT += VAR_INT; int VAR_INT = GetStartRowNumberForBlock(blockIndex); int VAR_INT = GetEndRowNumberForBlock(blockIndex); DBCellRecord VAR_DBCELLRECORD = new DBCellRecord(); int VAR_INT = (VAR_INT - RowRecord.ENCODED_SIZE); for (int row = VAR_INT; row <= VAR_INT; row++) { if (_valuesAgg.RowHasCells(row)) { VAR_POSITIONTRACKINGVISITOR.Position = LITERAL_INT; _valuesAgg.VisitCellsForRow(row, VAR_POSITIONTRACKINGVISITOR); int VAR_INT = VAR_POSITIONTRACKINGVISITOR.Position; VAR_INT += VAR_INT; VAR_DBCELLRECORD.AddCellOffset((short)VAR_INT); VAR_INT = VAR_INT; } } VAR_DBCELLRECORD.RowOffset = (VAR_INT); VAR_RECORDVISITOR.VisitRecord(VAR_DBCELLRECORD); } for (int i = LITERAL_INT; i < _unknownRecords.Count; i++) { VAR_RECORDVISITOR.VisitRecord((Record)_unknownRecords[i]); } }
public virtual ListDatasetsResponse METHOD_NAME(ListDatasetsRequest VAR_LISTDATASETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDatasetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDatasetsResponseUnmarshaller.Instance; return Invoke<ListDatasetsResponse>(VAR_LISTDATASETSREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_VALUEEVAL, DEFAULT_ARG3); }
public override int METHOD_NAME() { return a.Length; }
public ICell METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, book.MissingCellPolicy); }
public String METHOD_NAME(IFormulaRenderingWorkbook VAR_IFORMULARENDERINGWORKBOOK) { return ExternSheetNameResolver.PrependSheetName(VAR_IFORMULARENDERINGWORKBOOK, field_1_index_extern_sheet, HSSFErrorConstants.GetText(HSSFErrorConstants.ERROR_REF)); }
public virtual int METHOD_NAME(string VAR_STRING) { return GetExactMatchStartingFromRootArc(LITERAL_INT, new BytesRef(VAR_STRING)); }
public virtual DeleteAuthorizerResponse METHOD_NAME(DeleteAuthorizerRequest VAR_DELETEAUTHORIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAuthorizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAuthorizerResponseUnmarshaller.Instance; return Invoke<DeleteAuthorizerResponse>(VAR_DELETEAUTHORIZERREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { String VAR_STRING = OperandResolver.CoerceValueToString(VAR_VALUEEVAL); try { return new NumberEval(BaseNumberUtils.ConvertToDecimal(VAR_STRING, OCTAL_BASE, MAX_NUMBER_OF_PLACES)); } catch (ArgumentException) { return ErrorEval.NUM_ERROR; } }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_hcenter); }
public virtual EnableEnhancedMonitoringResponse METHOD_NAME(EnableEnhancedMonitoringRequest VAR_ENABLEENHANCEDMONITORINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableEnhancedMonitoringRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableEnhancedMonitoringResponseUnmarshaller.Instance; return Invoke<EnableEnhancedMonitoringResponse>(VAR_ENABLEENHANCEDMONITORINGREQUEST, VAR_VAR); }
public virtual ListDeliveryStreamsResponse METHOD_NAME(ListDeliveryStreamsRequest VAR_LISTDELIVERYSTREAMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeliveryStreamsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeliveryStreamsResponseUnmarshaller.Instance; return Invoke<ListDeliveryStreamsResponse>(VAR_LISTDELIVERYSTREAMSREQUEST, VAR_VAR); }
public virtual DetachVolumeResponse METHOD_NAME(DetachVolumeRequest VAR_DETACHVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachVolumeResponseUnmarshaller.Instance; return Invoke<DetachVolumeResponse>(VAR_DETACHVOLUMEREQUEST, VAR_VAR); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_15_pattern_style); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_16_pattern_color_indexes); }
public void METHOD_NAME(bool VAR_BOOL) { field_1_options = showSeriesKey.SetShortBoolean(field_1_options, VAR_BOOL); }
public GermanNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static bool METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { IEnumerator<BitSet> VAR_IENUMERATOR<BITSET> = VAR_IENUMERABLE<BITSET>.GetEnumerator(); VAR_IENUMERATOR<BITSET>.MoveNext(); BitSet VAR_BITSET = VAR_IENUMERATOR<BITSET>.Current; while (VAR_IENUMERATOR<BITSET>.MoveNext()) { BitSet VAR_BITSET = VAR_IENUMERATOR<BITSET>.Current; if (!VAR_BITSET.Equals(VAR_BITSET)) { return false; } } return true; }
public CellRangeAddressList(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); _list = new ArrayList(VAR_INT); for (int k = LITERAL_INT; k < VAR_INT; k++) { _list.Add(new CellRangeAddress(VAR_RECORDINPUTSTREAM)); } }
public override bool METHOD_NAME() { return @in.METHOD_NAME(); }
public virtual RestoreDBInstanceFromS3Response METHOD_NAME(RestoreDBInstanceFromS3Request VAR_RESTOREDBINSTANCEFROMS3REQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBInstanceFromS3RequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBInstanceFromS3ResponseUnmarshaller.Instance; return Invoke<RestoreDBInstanceFromS3Response>(VAR_RESTOREDBINSTANCEFROMS3REQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.FloatBuffer)) { return false; } java.nio.FloatBuffer VAR_JAVA.NIO.FLOATBUFFER = (java.nio.FloatBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.FLOATBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.FLOATBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { float VAR_FLOAT = get(VAR_INT++); float VAR_FLOAT = VAR_JAVA.NIO.FLOATBUFFER.get(VAR_INT++); VAR_BOOL = VAR_FLOAT == VAR_FLOAT || (VAR_FLOAT != VAR_FLOAT && VAR_FLOAT != VAR_FLOAT); } return VAR_BOOL; }
public static void METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT, float VAR_FLOAT) { java.util.Arrays.checkStartAndEnd(VAR_FLOAT[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_FLOAT[][i] = VAR_FLOAT; } } }
public virtual DescribeReceiptRuleResponse METHOD_NAME(DescribeReceiptRuleRequest VAR_DESCRIBERECEIPTRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReceiptRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReceiptRuleResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleResponse>(VAR_DESCRIBERECEIPTRULEREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return base.METHOD_NAME() + LITERAL_STRING + m_prefix; }
public virtual float METHOD_NAME(int VAR_INT, int VAR_INT) { float VAR_FLOAT = k1 * ((LITERAL_INT - b) + b * (VAR_INT / pivot)); return VAR_INT / (VAR_INT + VAR_FLOAT); }
public virtual DescribeModelResponse METHOD_NAME(DescribeModelRequest VAR_DESCRIBEMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeModelResponseUnmarshaller.Instance; return Invoke<DescribeModelResponse>(VAR_DESCRIBEMODELREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return true; }
public virtual ListEndpointConfigsResponse METHOD_NAME(ListEndpointConfigsRequest VAR_LISTENDPOINTCONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEndpointConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEndpointConfigsResponseUnmarshaller.Instance; return Invoke<ListEndpointConfigsResponse>(VAR_LISTENDPOINTCONFIGSREQUEST, VAR_VAR); }
public virtual DescribeDBProxyTargetGroupsResponse METHOD_NAME(DescribeDBProxyTargetGroupsRequest VAR_DESCRIBEDBPROXYTARGETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBProxyTargetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBProxyTargetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeDBProxyTargetGroupsResponse>(VAR_DESCRIBEDBPROXYTARGETGROUPSREQUEST, VAR_VAR); }
public long METHOD_NAME(DiffEntry.Side VAR_DIFFENTRY.SIDE, DiffEntry VAR_DIFFENTRY) { switch (VAR_DIFFENTRY.SIDE) { case DiffEntry.Side.OLD: { return oldSource.METHOD_NAME(VAR_DIFFENTRY.oldPath, VAR_DIFFENTRY.oldId.ToObjectId()); } case DiffEntry.Side.NEW: { return newSource.METHOD_NAME(VAR_DIFFENTRY.newPath, VAR_DIFFENTRY.newId.ToObjectId()); } default: { throw new ArgumentException(); } } }
public virtual DisassociateGlobalReplicationGroupResponse METHOD_NAME(DisassociateGlobalReplicationGroupRequest VAR_DISASSOCIATEGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<DisassociateGlobalReplicationGroupResponse>(VAR_DISASSOCIATEGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public static void METHOD_NAME(DataOutput VAR_DATAOUTPUT, string VAR_STRING, int VAR_INT) { BytesRef VAR_BYTESREF = new BytesRef(VAR_STRING); if (VAR_BYTESREF.Length != VAR_STRING.Length || VAR_BYTESREF.Length >= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } VAR_DATAOUTPUT.WriteInt32(CODEC_MAGIC); VAR_DATAOUTPUT.WriteString(VAR_STRING); VAR_DATAOUTPUT.WriteInt32(VAR_INT); }
public async Task<AzureOperationResponse<IEnumerable<DedicatedCapacity>>> METHOD_NAME(string VAR_STRING, Dictionary<string, List<string>> VAR_DICTIONARY<STRING, LIST<STRING>> = LITERAL_NULL, CancellationToken VAR_CANCELLATIONTOKEN = default(CancellationToken)) { return await innerCapacityOperations.METHOD_NAME(VAR_STRING, VAR_DICTIONARY<STRING, LIST<STRING>>, VAR_CANCELLATIONTOKEN).ConfigureAwait(false); }
public virtual DescribeIpGroupsResponse METHOD_NAME(DescribeIpGroupsRequest VAR_DESCRIBEIPGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIpGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIpGroupsResponseUnmarshaller.Instance; return Invoke<DescribeIpGroupsResponse>(VAR_DESCRIBEIPGROUPSREQUEST, VAR_VAR); }
public java.nio.charset.CoderResult METHOD_NAME(java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER) { if (status != END && status != READY) { throw new System.InvalidOperationException(); } java.nio.charset.CoderResult VAR_JAVA.NIO.CHARSET.CODERRESULT = implFlush(VAR_JAVA.NIO.BYTEBUFFER); if (VAR_JAVA.NIO.CHARSET.CODERRESULT == java.nio.charset.CoderResult.UNDERFLOW) { status = FLUSH; } return VAR_JAVA.NIO.CHARSET.CODERRESULT; }
public Edit.Type METHOD_NAME() { if (beginA < endA) { if (beginB < endB) { return Edit.Type.REPLACE; } else { return Edit.Type.DELETE; } } else { if (beginB < endB) { return Edit.Type.INSERT; } else { return Edit.Type.EMPTY; } } }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public virtual DescribeHsmConfigurationsResponse METHOD_NAME(DescribeHsmConfigurationsRequest VAR_DESCRIBEHSMCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHsmConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHsmConfigurationsResponseUnmarshaller.Instance; return Invoke<DescribeHsmConfigurationsResponse>(VAR_DESCRIBEHSMCONFIGURATIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.DoubleBuffer)) { return false; } java.nio.DoubleBuffer VAR_JAVA.NIO.DOUBLEBUFFER = (java.nio.DoubleBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.DOUBLEBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.DOUBLEBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { double VAR_DOUBLE = get(VAR_INT++); double VAR_DOUBLE = VAR_JAVA.NIO.DOUBLEBUFFER.get(VAR_INT++); VAR_BOOL = VAR_DOUBLE == VAR_DOUBLE || (VAR_DOUBLE != VAR_DOUBLE && VAR_DOUBLE != VAR_DOUBLE); } return VAR_BOOL; }
public virtual int METHOD_NAME() { return length; }
public FeatProtection() { securityDescriptor = new byte[LITERAL_INT]; }
public virtual DeleteNotificationConfigurationResponse METHOD_NAME(DeleteNotificationConfigurationRequest VAR_DELETENOTIFICATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNotificationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNotificationConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteNotificationConfigurationResponse>(VAR_DELETENOTIFICATIONCONFIGURATIONREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, LITERAL_INT); }
public HSSFAnchor(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { CreateEscherAnchor(); this.Dx1 = VAR_INT; this.Dy1 = VAR_INT; this.Dx2 = VAR_INT; this.Dy2 = VAR_INT; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], DEFAULT_ARG3, DEFAULT_ARG4); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], DEFAULT_ARG4); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public Toffs(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public virtual GetDocumentationVersionResponse METHOD_NAME(GetDocumentationVersionRequest VAR_GETDOCUMENTATIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentationVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentationVersionResponseUnmarshaller.Instance; return Invoke<GetDocumentationVersionResponse>(VAR_GETDOCUMENTATIONVERSIONREQUEST, VAR_VAR); }
public static short[] METHOD_NAME(short[] VAR_SHORT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_SHORT[].Length < VAR_INT) { short[] VAR_SHORT[] = new short[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT16)]; Array.Copy(VAR_SHORT[], LITERAL_INT, VAR_SHORT[], LITERAL_INT, VAR_SHORT[].Length); return VAR_SHORT[]; } else { return VAR_SHORT[]; } }
public virtual PurchaseProvisionedCapacityResponse METHOD_NAME(PurchaseProvisionedCapacityRequest VAR_PURCHASEPROVISIONEDCAPACITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseProvisionedCapacityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseProvisionedCapacityResponseUnmarshaller.Instance; return Invoke<PurchaseProvisionedCapacityResponse>(VAR_PURCHASEPROVISIONEDCAPACITYREQUEST, VAR_VAR); }
public virtual ListenerHandle METHOD_NAME(RefsChangedListener VAR_REFSCHANGEDLISTENER) { return AddListener<RefsChangedListener>(VAR_REFSCHANGEDLISTENER); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public virtual DeleteGcmChannelResponse METHOD_NAME(DeleteGcmChannelRequest VAR_DELETEGCMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGcmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGcmChannelResponseUnmarshaller.Instance; return Invoke<DeleteGcmChannelResponse>(VAR_DELETEGCMCHANNELREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + item; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (ptr == data.Length) { return -LITERAL_INT; } int VAR_INT = Math.Min(Available(), VAR_INT); System.Array.Copy(data, ptr, VAR_BYTE[], VAR_INT, VAR_INT); ptr += VAR_INT; return VAR_INT; }
public static string METHOD_NAME(byte VAR_BYTE) { return METHOD_NAME((long)VAR_BYTE, LITERAL_INT); }
public virtual DeleteFieldLevelEncryptionConfigResponse METHOD_NAME(DeleteFieldLevelEncryptionConfigRequest VAR_DELETEFIELDLEVELENCRYPTIONCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFieldLevelEncryptionConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<DeleteFieldLevelEncryptionConfigResponse>(VAR_DELETEFIELDLEVELENCRYPTIONCONFIGREQUEST, VAR_VAR); }
public AmazonS3EncryptionClient(AWSCredentials VAR_AWSCREDENTIALS, EncryptionMaterials VAR_ENCRYPTIONMATERIALS) : base(credentials) { this.EncryptionMaterials = VAR_ENCRYPTIONMATERIALS; S3CryptoConfig = new AmazonS3CryptoConfiguration(); }
public FontDetails(String VAR_STRING, int VAR_INT) { this.VAR_STRING = VAR_STRING; this.VAR_INT = VAR_INT; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LESSTHAN); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public sealed override string METHOD_NAME() { return Sharpen.StringHelper.CopyValueOf(backingArray, offset + _position, remaining()); }
public WriteRequest(PutRequest VAR_PUTREQUEST) { _putRequest = VAR_PUTREQUEST; }
public static string METHOD_NAME(byte VAR_BYTE) { return METHOD_NAME((long)VAR_BYTE, LITERAL_INT); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { return pluralStep.Apply(VAR_CHAR[], VAR_INT); }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { try { out1.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); } catch (IOException e) { throw new RuntimeException(e); } }
public ICollection METHOD_NAME() { return dictionaryNameToID.Keys; }
public virtual BatchGetDeploymentsResponse METHOD_NAME(BatchGetDeploymentsRequest VAR_BATCHGETDEPLOYMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetDeploymentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetDeploymentsResponseUnmarshaller.Instance; return Invoke<BatchGetDeploymentsResponse>(VAR_BATCHGETDEPLOYMENTSREQUEST, VAR_VAR); }
public QueryScorer(Query VAR_QUERY, string VAR_STRING, string VAR_STRING) { this.VAR_STRING = VAR_STRING.Intern(); Init(VAR_QUERY, VAR_STRING, LITERAL_NULL, true); }
public override long METHOD_NAME() { current = fstEnum.METHOD_NAME(); if (current == LITERAL_NULL) { return -LITERAL_INT; } else { if (current.Output.HasValue) { return current.Output.Value; } else { throw new NullReferenceException(LITERAL_STRING); } } }
public virtual GetApplicationDateRangeKpiResponse METHOD_NAME(GetApplicationDateRangeKpiRequest VAR_GETAPPLICATIONDATERANGEKPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApplicationDateRangeKpiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApplicationDateRangeKpiResponseUnmarshaller.Instance; return Invoke<GetApplicationDateRangeKpiResponse>(VAR_GETAPPLICATIONDATERANGEKPIREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GalicianStemFilter(VAR_TOKENSTREAM); }
public virtual ListHostedZonesResponse METHOD_NAME(ListHostedZonesRequest VAR_LISTHOSTEDZONESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListHostedZonesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListHostedZonesResponseUnmarshaller.Instance; return Invoke<ListHostedZonesResponse>(VAR_LISTHOSTEDZONESREQUEST, VAR_VAR); }
public int METHOD_NAME() { return depth; }
public WindowTwoRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining; field_1_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_top_row = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_left_col = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_header_color = VAR_RECORDINPUTSTREAM.ReadInt(); if (VAR_INT > LITERAL_INT) { field_5_page_break_zoom = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_normal_zoom = VAR_RECORDINPUTSTREAM.ReadShort(); } if (VAR_INT > LITERAL_INT) { field_7_reserved = VAR_RECORDINPUTSTREAM.ReadInt(); } }
public virtual GetUsageResponse METHOD_NAME(GetUsageRequest VAR_GETUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUsageResponseUnmarshaller.Instance; return Invoke<GetUsageResponse>(VAR_GETUSAGEREQUEST, VAR_VAR); }
public override void METHOD_NAME(Config VAR_CONFIG) { base.METHOD_NAME(VAR_CONFIG); keepImages = VAR_CONFIG.Get(LITERAL_STRING, true); string VAR_STRING = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_NULL); if (VAR_STRING != LITERAL_NULL) { file = new FileInfo(VAR_STRING); } }
public ListSubscriptionsByTopicRequest(string VAR_STRING) { _topicArn = VAR_STRING; }
public ListTablesRequest(string VAR_STRING, int VAR_INT) { _exclusiveStartTableName = VAR_STRING; _limit = VAR_INT; }
public override string METHOD_NAME() { return Start + LITERAL_STRING + End; }
public sealed override float METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public override java.nio.LongBuffer METHOD_NAME() { return copy(this, _mark); }
public virtual ListManagedSchemaArnsResponse METHOD_NAME(ListManagedSchemaArnsRequest VAR_LISTMANAGEDSCHEMAARNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListManagedSchemaArnsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListManagedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListManagedSchemaArnsResponse>(VAR_LISTMANAGEDSCHEMAARNSREQUEST, VAR_VAR); }
public virtual DescribeSpotPriceHistoryResponse METHOD_NAME(DescribeSpotPriceHistoryRequest VAR_DESCRIBESPOTPRICEHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSpotPriceHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSpotPriceHistoryResponseUnmarshaller.Instance; return Invoke<DescribeSpotPriceHistoryResponse>(VAR_DESCRIBESPOTPRICEHISTORYREQUEST, VAR_VAR); }
public virtual ListDevelopmentSchemaArnsResponse METHOD_NAME(ListDevelopmentSchemaArnsRequest VAR_LISTDEVELOPMENTSCHEMAARNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDevelopmentSchemaArnsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDevelopmentSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListDevelopmentSchemaArnsResponse>(VAR_LISTDEVELOPMENTSCHEMAARNSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (!(VAR_OBJECT is ATNConfig)) { return false; } return this.METHOD_NAME((ATNConfig)VAR_OBJECT); }
public virtual DeleteEventsConfigurationResponse METHOD_NAME(DeleteEventsConfigurationRequest VAR_DELETEEVENTSCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventsConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventsConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteEventsConfigurationResponse>(VAR_DELETEEVENTSCONFIGURATIONREQUEST, VAR_VAR); }
public static short METHOD_NAME(double VAR_DOUBLE) { return (short)((VAR_DOUBLE == LITERAL_INT) ? LITERAL_INT : (VAR_DOUBLE < LITERAL_INT) ? -LITERAL_INT : LITERAL_INT); }
public void METHOD_NAME(string VAR_STRING) { this.VAR_STRING = LITERAL_NULL == VAR_STRING ? new char[LITERAL_INT] : VAR_STRING.ToCharArray(); }
public virtual UpdateDestinationResponse METHOD_NAME(UpdateDestinationRequest VAR_UPDATEDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDestinationResponseUnmarshaller.Instance; return Invoke<UpdateDestinationResponse>(VAR_UPDATEDESTINATIONREQUEST, VAR_VAR); }
public virtual CreateEmailIdentityResponse METHOD_NAME(CreateEmailIdentityRequest VAR_CREATEEMAILIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEmailIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEmailIdentityResponseUnmarshaller.Instance; return Invoke<CreateEmailIdentityResponse>(VAR_CREATEEMAILIDENTITYREQUEST, VAR_VAR); }
public virtual PersonIdent METHOD_NAME() { return currentSource.GetAuthor(); }
public virtual StartMonitoringMembersResponse METHOD_NAME(StartMonitoringMembersRequest VAR_STARTMONITORINGMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMonitoringMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMonitoringMembersResponseUnmarshaller.Instance; return Invoke<StartMonitoringMembersResponse>(VAR_STARTMONITORINGMEMBERSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public PersianNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public void METHOD_NAME(Row VAR_ROW, IList<Row> VAR_ILIST<ROW>) { foreach (Cell c in VAR_ROW.cells.Values) { if (c.@ref >= LITERAL_INT) { Row VAR_ROW = VAR_ILIST<ROW>[c.@ref]; int VAR_INT = VAR_ROW.UniformCmd(changeSkip); if (VAR_INT >= LITERAL_INT) { if (VAR_INT == c.cmd) { if (changeSkip) { if (c.skip != VAR_ROW.uniformSkip + LITERAL_INT) { continue; } c.skip = VAR_ROW.uniformSkip + LITERAL_INT; } else { c.skip = LITERAL_INT; } c.cnt += VAR_ROW.uniformCnt; c.@ref = -LITERAL_INT; } else if (c.cmd < LITERAL_INT) { c.cnt = VAR_ROW.uniformCnt; c.cmd = VAR_INT; c.@ref = -LITERAL_INT; if (changeSkip) { c.skip = VAR_ROW.uniformSkip + LITERAL_INT; } else { c.skip = LITERAL_INT; } } } } } }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); Ref VAR_REF = this; while (VAR_REF.IsSymbolic()) { VAR_STRINGBUILDER.Append(VAR_REF.GetName()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_REF = VAR_REF.GetTarget(); } VAR_STRINGBUILDER.Append(VAR_REF.GetName()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(ObjectId.METHOD_NAME(VAR_REF.GetObjectId())); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual RemoveAllResourcePermissionsResponse METHOD_NAME(RemoveAllResourcePermissionsRequest VAR_REMOVEALLRESOURCEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveAllResourcePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveAllResourcePermissionsResponseUnmarshaller.Instance; return Invoke<RemoveAllResourcePermissionsResponse>(VAR_REMOVEALLRESOURCEPERMISSIONSREQUEST, VAR_VAR); }
public virtual DescribeResourceGroupsResponse METHOD_NAME(DescribeResourceGroupsRequest VAR_DESCRIBERESOURCEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeResourceGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeResourceGroupsResponseUnmarshaller.Instance; return Invoke<DescribeResourceGroupsResponse>(VAR_DESCRIBERESOURCEGROUPSREQUEST, VAR_VAR); }
public virtual SpatialArgs METHOD_NAME(string VAR_STRING, SpatialContext VAR_SPATIALCONTEXT) { int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); int VAR_INT = VAR_STRING.LastIndexOf(LITERAL_CHAR); if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new ParseException(LITERAL_STRING + VAR_STRING, -LITERAL_INT); } SpatialOperation VAR_SPATIALOPERATION = SpatialOperation.Get(VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT).Trim()); string VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT, VAR_INT - (VAR_INT + LITERAL_INT)).Trim(); if (VAR_STRING.Length < LITERAL_INT) { throw new ParseException(LITERAL_STRING + VAR_STRING, VAR_INT + LITERAL_INT); } var VAR_VAR = ParseShape(VAR_STRING, VAR_SPATIALCONTEXT); var VAR_VAR = NewSpatialArgs(VAR_SPATIALOPERATION, VAR_VAR); if (VAR_STRING.Length > (VAR_INT + LITERAL_INT)) { VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT).Trim(); if (VAR_STRING.Length > LITERAL_INT) { IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING> = ParseMap(VAR_STRING); ReadNameValuePairs(VAR_VAR, VAR_IDICTIONARY<STRING, STRING>); if (!VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } } } VAR_VAR.Validate(); return VAR_VAR; }
public virtual bool METHOD_NAME() { int VAR_INT = GetFormat(); return VAR_INT == PACK_DELTA || VAR_INT == PACK_WHOLE; }
public virtual PutModelResponse METHOD_NAME(PutModelRequest VAR_PUTMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutModelResponseUnmarshaller.Instance; return Invoke<PutModelResponse>(VAR_PUTMODELREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return stateNumber.METHOD_NAME(); }
public virtual CreatePlayerSessionResponse METHOD_NAME(CreatePlayerSessionRequest VAR_CREATEPLAYERSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePlayerSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePlayerSessionResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionResponse>(VAR_CREATEPLAYERSESSIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(field_1_majorTickType); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_2_minorTickType); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_3_labelPosition); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_4_background); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_5_labelColorRgb); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_6_zero1); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_7_zero2); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_8_zero3); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_9_zero4); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_10_options); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_11_tickColor); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_12_zero5); }
public virtual ModifyVpcTenancyResponse METHOD_NAME(ModifyVpcTenancyRequest VAR_MODIFYVPCTENANCYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcTenancyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcTenancyResponseUnmarshaller.Instance; return Invoke<ModifyVpcTenancyResponse>(VAR_MODIFYVPCTENANCYREQUEST, VAR_VAR); }
public virtual GetBasePathMappingsResponse METHOD_NAME(GetBasePathMappingsRequest VAR_GETBASEPATHMAPPINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBasePathMappingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBasePathMappingsResponseUnmarshaller.Instance; return Invoke<GetBasePathMappingsResponse>(VAR_GETBASEPATHMAPPINGSREQUEST, VAR_VAR); }
public void METHOD_NAME(BytesRef VAR_BYTESREF) { if (closed) { throw new InvalidOperationException(); } buffer.Append(VAR_BYTESREF); }
public void METHOD_NAME(ICell VAR_ICELL) { _bookEvaluator.METHOD_NAME(new HSSFEvaluationCell(VAR_ICELL)); }
public virtual AddApplicationReferenceDataSourceResponse METHOD_NAME(AddApplicationReferenceDataSourceRequest VAR_ADDAPPLICATIONREFERENCEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationReferenceDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<AddApplicationReferenceDataSourceResponse>(VAR_ADDAPPLICATIONREFERENCEDATASOURCEREQUEST, VAR_VAR); }
public NIOFSIndexInput(string VAR_STRING, FileStream VAR_FILESTREAM, long VAR_LONG, long VAR_LONG, int VAR_INT) : base(resourceDesc, bufferSize) { this.m_channel = VAR_FILESTREAM; this.m_off = VAR_LONG; this.m_end = VAR_LONG + VAR_LONG; this.isClone = true; }
public override java.util.Iterator<K> METHOD_NAME() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new IndonesianStemFilter(VAR_TOKENSTREAM, stemDerivational); }
public virtual NGit.Api.SubmoduleStatusCommand METHOD_NAME(string VAR_STRING) { paths.AddItem(VAR_STRING); return this; }
public virtual PutInsightRuleResponse METHOD_NAME(PutInsightRuleRequest VAR_PUTINSIGHTRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutInsightRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutInsightRuleResponseUnmarshaller.Instance; return Invoke<PutInsightRuleResponse>(VAR_PUTINSIGHTRULEREQUEST, VAR_VAR); }
public JapaneseReadingFormFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { useRomaji = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, ROMAJI_PARAM, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetVpcLinkResponse METHOD_NAME(GetVpcLinkRequest VAR_GETVPCLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVpcLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVpcLinkResponseUnmarshaller.Instance; return Invoke<GetVpcLinkResponse>(VAR_GETVPCLINKREQUEST, VAR_VAR); }
public bool METHOD_NAME(bool VAR_BOOL) { switch (_code) { case NONE: case EQ: return VAR_BOOL; case NE: return !VAR_BOOL; } throw new Exception(LITERAL_STRING + _representation + LITERAL_STRING); }
public virtual int METHOD_NAME() { return end; }
public override string METHOD_NAME() { if (@string != LITERAL_NULL) { return @string; } java.lang.StringBuilder VAR_JAVA.LANG.STRINGBUILDER = new java.lang.StringBuilder(); if (scheme != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(scheme); VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); } if (opaque) { VAR_JAVA.LANG.STRINGBUILDER.append(schemeSpecificPart); } else { if (authority != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_STRING); VAR_JAVA.LANG.STRINGBUILDER.append(authority); } if (path != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(path); } if (query != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); VAR_JAVA.LANG.STRINGBUILDER.append(query); } } if (fragment != LITERAL_NULL) { VAR_JAVA.LANG.STRINGBUILDER.append(LITERAL_CHAR); VAR_JAVA.LANG.STRINGBUILDER.append(fragment); } @string = VAR_JAVA.LANG.STRINGBUILDER.METHOD_NAME(); return @string; }
public static NGit.ObjectId METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = NB.DecodeInt32(VAR_BYTE[], VAR_INT); int VAR_INT = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); int VAR_INT = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); int VAR_INT = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); int VAR_INT = NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT); return new NGit.ObjectId(VAR_INT, VAR_INT, VAR_INT, VAR_INT, VAR_INT); }
public virtual int METHOD_NAME(QualityQuery VAR_QUALITYQUERY) { QRelJudgement VAR_QRELJUDGEMENT; if (judgements.TryGetValue(VAR_QUALITYQUERY.QueryID, out VAR_QRELJUDGEMENT) && VAR_QRELJUDGEMENT != LITERAL_NULL) { return VAR_QRELJUDGEMENT.METHOD_NAME; } return LITERAL_INT; }
public static HashFunction METHOD_NAME(int VAR_INT) { if (VAR_INT < VERSION_START) throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VERSION_START); if (VAR_INT > VERSION_CURRENT) throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VERSION_CURRENT); return MurmurHash2.INSTANCE; }
public void METHOD_NAME(ICell VAR_ICELL) { if (VAR_ICELL == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } METHOD_NAME((HSSFCell)VAR_ICELL, true); }
public CreatePlacementGroupRequest(string VAR_STRING, PlacementStrategy VAR_PLACEMENTSTRATEGY) { _groupName = VAR_STRING; _strategy = VAR_PLACEMENTSTRATEGY; }
public virtual PutManagedScalingPolicyResponse METHOD_NAME(PutManagedScalingPolicyRequest VAR_PUTMANAGEDSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutManagedScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutManagedScalingPolicyResponseUnmarshaller.Instance; return Invoke<PutManagedScalingPolicyResponse>(VAR_PUTMANAGEDSCALINGPOLICYREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(vs)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual Trie METHOD_NAME(Reduce VAR_REDUCE) { return VAR_REDUCE.Optimize(this); }
public override object METHOD_NAME() { return CloneViaReserialise(); }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); commitUserData = new Dictionary<string, string>(); commitUserData[OpenReaderTask.USER_DATA] = VAR_STRING; }
public virtual string METHOD_NAME() { return srcRef; }
public string METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.CommitMessage(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return string.Empty; } System.Text.Encoding VAR_SYSTEM.TEXT.ENCODING = RawParseUtils.ParseEncoding(VAR_BYTE[]); int VAR_INT = RawParseUtils.EndOfParagraph(VAR_BYTE[], VAR_INT); string VAR_STRING = RawParseUtils.Decode(VAR_SYSTEM.TEXT.ENCODING, VAR_BYTE[], VAR_INT, VAR_INT); if (HasLF(VAR_BYTE[], VAR_INT, VAR_INT)) { VAR_STRING = VAR_STRING.Replace(LITERAL_CHAR, LITERAL_CHAR); } return VAR_STRING; }
public static Boolean? METHOD_NAME(ValueEval VAR_VALUEEVAL, bool VAR_BOOL) { if (VAR_VALUEEVAL == LITERAL_NULL || VAR_VALUEEVAL == BlankEval.instance) { return LITERAL_NULL; } if (VAR_VALUEEVAL is BoolEval) { return ((BoolEval)VAR_VALUEEVAL).BooleanValue; } if (VAR_VALUEEVAL is StringEval) { if (VAR_BOOL) { return LITERAL_NULL; } String VAR_STRING = ((StringEval)VAR_VALUEEVAL).StringValue; if (VAR_STRING.Equals(LITERAL_STRING, StringComparison.OrdinalIgnoreCase)) { return true; } if (VAR_STRING.Equals(LITERAL_STRING, StringComparison.OrdinalIgnoreCase)) { return false; } throw new EvaluationException(ErrorEval.VALUE_INVALID); } if (VAR_VALUEEVAL is NumericValueEval) { NumericValueEval VAR_NUMERICVALUEEVAL = (NumericValueEval)VAR_VALUEEVAL; double VAR_DOUBLE = VAR_NUMERICVALUEEVAL.NumberValue; if (Double.IsNaN(VAR_DOUBLE)) { throw new EvaluationException(ErrorEval.VALUE_INVALID); } return VAR_DOUBLE != LITERAL_INT; } if (VAR_VALUEEVAL is ErrorEval) { throw new EvaluationException((ErrorEval)VAR_VALUEEVAL); } throw new InvalidOperationException(LITERAL_STRING + VAR_VALUEEVAL.GetType().Name + LITERAL_STRING); }
public virtual IList<IndexCommit> METHOD_NAME() { lock (this) { return new List<IndexCommit>(m_indexCommits.Values); } }
public static int METHOD_NAME(int VAR_INT, int[] VAR_INT[]) { int VAR_INT = VAR_INT[].Length; int VAR_INT = LITERAL_INT; int VAR_INT = VAR_INT - LITERAL_INT; while (VAR_INT >= VAR_INT) { int VAR_INT = (int)((uint)(VAR_INT + VAR_INT) >> LITERAL_INT); int VAR_INT = VAR_INT[][VAR_INT]; if (VAR_INT < VAR_INT) { VAR_INT = VAR_INT - LITERAL_INT; } else if (VAR_INT > VAR_INT) { VAR_INT = VAR_INT + LITERAL_INT; } else { while (VAR_INT + LITERAL_INT < VAR_INT && VAR_INT[][VAR_INT + LITERAL_INT] == VAR_INT) { VAR_INT++; } return VAR_INT; } } return VAR_INT; }
public static DateTime METHOD_NAME(double VAR_DOUBLE, bool VAR_BOOL) { return GetJavaCalendar(VAR_DOUBLE, VAR_BOOL, false); }
public virtual string METHOD_NAME(string VAR_STRING) { Row VAR_ROW = GetRow(root); int VAR_INT; string VAR_STRING = LITERAL_NULL; StrEnum VAR_STRENUM = new StrEnum(VAR_STRING, forward); for (int i = LITERAL_INT; i < VAR_STRING.Length - LITERAL_INT; i++) { char VAR_CHAR = VAR_STRENUM.Next(); VAR_INT = VAR_ROW.GetCmd(VAR_CHAR); if (VAR_INT >= LITERAL_INT) { VAR_STRING = cmds[VAR_INT]; } VAR_INT = VAR_ROW.GetRef(VAR_CHAR); if (VAR_INT >= LITERAL_INT) { VAR_ROW = GetRow(VAR_INT); } else { return VAR_STRING; } } VAR_INT = VAR_ROW.GetCmd(VAR_STRENUM.Next()); return (VAR_INT >= LITERAL_INT) ? cmds[VAR_INT] : VAR_STRING; }
public Hashtable(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } if (VAR_INT == LITERAL_INT) { java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = (java.util.Hashtable.HashtableEntry<K, V>[])EMPTY_TABLE; table = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[]; threshold = -LITERAL_INT; return; } if (VAR_INT < java.util.Hashtable.MINIMUM_CAPACITY) { VAR_INT = java.util.Hashtable.MINIMUM_CAPACITY; } else { if (VAR_INT > java.util.Hashtable.MAXIMUM_CAPACITY) { VAR_INT = java.util.Hashtable.MAXIMUM_CAPACITY; } else { VAR_INT = roundUpToPowerOfTwo(VAR_INT); } } makeTable(VAR_INT); }
public virtual void METHOD_NAME() { heads.Clear(); Sharpen.Collections.AddAll(heads, headsStartValue); }
public virtual CreatePlacementGroupResponse METHOD_NAME(CreatePlacementGroupRequest VAR_CREATEPLACEMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePlacementGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePlacementGroupResponseUnmarshaller.Instance; return Invoke<CreatePlacementGroupResponse>(VAR_CREATEPLACEMENTGROUPREQUEST, VAR_VAR); }
public float METHOD_NAME() { return _maxCharsPerByte; }
public static string METHOD_NAME(DateTime VAR_DATETIME) { if (LITERAL_NULL == VAR_DATETIME) { VAR_DATETIME = DateTime.UtcNow; } return VAR_DATETIME.ToUniversalTime().GetDateTimeFormats(LITERAL_CHAR)[LITERAL_INT]; }
public virtual ListContributorInsightsResponse METHOD_NAME(ListContributorInsightsRequest VAR_LISTCONTRIBUTORINSIGHTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListContributorInsightsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListContributorInsightsResponseUnmarshaller.Instance; return Invoke<ListContributorInsightsResponse>(VAR_LISTCONTRIBUTORINSIGHTSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { packedGitOpenFiles = VAR_INT; }
public virtual FailoverDBClusterResponse METHOD_NAME(FailoverDBClusterRequest VAR_FAILOVERDBCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = FailoverDBClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = FailoverDBClusterResponseUnmarshaller.Instance; return Invoke<FailoverDBClusterResponse>(VAR_FAILOVERDBCLUSTERREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { insert0(VAR_INT, System.Convert.ToString(VAR_DOUBLE)); return this; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { futureHeader.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); VAR_ILITTLEENDIANOUTPUT.WriteShort(isf_sharedFeatureType); VAR_ILITTLEENDIANOUTPUT.WriteByte(reserved1); VAR_ILITTLEENDIANOUTPUT.WriteInt((int)reserved2); VAR_ILITTLEENDIANOUTPUT.WriteShort(cellRefs.Length); VAR_ILITTLEENDIANOUTPUT.WriteInt((int)cbFeatData); VAR_ILITTLEENDIANOUTPUT.WriteShort(reserved3); for (int i = LITERAL_INT; i < cellRefs.Length; i++) { cellRefs[i].METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } sharedFeature.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { throw new System.NotImplementedException(); }
public virtual DisassociateWebsiteAuthorizationProviderResponse METHOD_NAME(DisassociateWebsiteAuthorizationProviderRequest VAR_DISASSOCIATEWEBSITEAUTHORIZATIONPROVIDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateWebsiteAuthorizationProviderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<DisassociateWebsiteAuthorizationProviderResponse>(VAR_DISASSOCIATEWEBSITEAUTHORIZATIONPROVIDERREQUEST, VAR_VAR); }
public byte[] METHOD_NAME() { byte[] VAR_BYTE[] = new byte[RecordSize]; METHOD_NAME(LITERAL_INT, VAR_BYTE[]); return VAR_BYTE[]; }
public ICell METHOD_NAME() { if (hasNext()) return _cells[pos++]; else throw new NullReferenceException(); }
public static short[] METHOD_NAME(short[] VAR_SHORT[]) { return METHOD_NAME(VAR_SHORT[], LITERAL_INT + VAR_SHORT[].Length); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, string VAR_STRING) { lock (this) { insert0(VAR_INT, VAR_STRING); return this; } }
public virtual DescribeDomainResponse METHOD_NAME(DescribeDomainRequest VAR_DESCRIBEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(VAR_DESCRIBEDOMAINREQUEST, VAR_VAR); }
public void METHOD_NAME() { this.METHOD_NAME(true, true); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_reserved); }
public virtual int METHOD_NAME() { return startOffset; }
public override string[] METHOD_NAME() { lock (this) { ISet<string> VAR_ISET<STRING> = new JCG.HashSet<string>(); foreach (string f in cache.METHOD_NAME()) { VAR_ISET<STRING>.Add(f); } try { foreach (string f in @delegate.METHOD_NAME()) { VAR_ISET<STRING>.Add(f); } } catch (DirectoryNotFoundException) { if (VAR_ISET<STRING>.Count == LITERAL_INT) { throw; } } return VAR_ISET<STRING>.ToArray(); } }
public byte METHOD_NAME(byte VAR_BYTE) { return (byte)this.Clear(VAR_BYTE); }
public ScenarioProtectRecord METHOD_NAME() { return _scenarioProtectRecord; }
public NPOI.SS.UserModel.IRow METHOD_NAME(int VAR_INT) { HSSFRow VAR_HSSFROW = new HSSFRow(_workbook, this, VAR_INT); VAR_HSSFROW.Height = (DefaultRowHeight); VAR_HSSFROW.RowRecord.BadFontHeight = (false); AddRow(VAR_HSSFROW, true); return VAR_HSSFROW; }
public virtual ListQueryExecutionsResponse METHOD_NAME(ListQueryExecutionsRequest VAR_LISTQUERYEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQueryExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQueryExecutionsResponseUnmarshaller.Instance; return Invoke<ListQueryExecutionsResponse>(VAR_LISTQUERYEXECUTIONSREQUEST, VAR_VAR); }
public virtual DeleteSuppressedDestinationResponse METHOD_NAME(DeleteSuppressedDestinationRequest VAR_DELETESUPPRESSEDDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSuppressedDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSuppressedDestinationResponseUnmarshaller.Instance; return Invoke<DeleteSuppressedDestinationResponse>(VAR_DELETESUPPRESSEDDESTINATIONREQUEST, VAR_VAR); }
public override CharsRef METHOD_NAME(CharsRef VAR_CHARSREF, CharsRef VAR_CHARSREF) { Debug.Assert(VAR_CHARSREF != LITERAL_NULL); Debug.Assert(VAR_CHARSREF != LITERAL_NULL); if (VAR_CHARSREF == NO_OUTPUT) { return VAR_CHARSREF; } else if (VAR_CHARSREF.Length == VAR_CHARSREF.Length) { return NO_OUTPUT; } else { Debug.Assert(VAR_CHARSREF.Length < VAR_CHARSREF.Length, LITERAL_STRING + VAR_CHARSREF.Length + LITERAL_STRING + VAR_CHARSREF.Length); Debug.Assert(VAR_CHARSREF.Length > LITERAL_INT); return new CharsRef(VAR_CHARSREF.Chars, VAR_CHARSREF.Offset + VAR_CHARSREF.Length, VAR_CHARSREF.Length - VAR_CHARSREF.Length); } }
public virtual RequestCancelWorkflowExecutionResponse METHOD_NAME(RequestCancelWorkflowExecutionRequest VAR_REQUESTCANCELWORKFLOWEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RequestCancelWorkflowExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RequestCancelWorkflowExecutionResponseUnmarshaller.Instance; return Invoke<RequestCancelWorkflowExecutionResponse>(VAR_REQUESTCANCELWORKFLOWEXECUTIONREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } var VAR_VAR = VAR_OBJECT as Arn; if (VAR_VAR == LITERAL_NULL) { return false; } if (!Partition.METHOD_NAME(VAR_VAR.Partition)) { return false; } if (!Service.METHOD_NAME(VAR_VAR.Service)) { return false; } if (Region != VAR_VAR.Region) { return false; } if (AccountId != VAR_VAR.AccountId) { return false; } return Resource.METHOD_NAME(VAR_VAR.Resource); }
public virtual UpdateDataSetPermissionsResponse METHOD_NAME(UpdateDataSetPermissionsRequest VAR_UPDATEDATASETPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDataSetPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDataSetPermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSetPermissionsResponse>(VAR_UPDATEDATASETPERMISSIONSREQUEST, VAR_VAR); }
public virtual DeleteCloudFrontOriginAccessIdentityResponse METHOD_NAME(DeleteCloudFrontOriginAccessIdentityRequest VAR_DELETECLOUDFRONTORIGINACCESSIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCloudFrontOriginAccessIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<DeleteCloudFrontOriginAccessIdentityResponse>(VAR_DELETECLOUDFRONTORIGINACCESSIDENTITYREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PortugueseMinimalStemFilter(VAR_TOKENSTREAM); }
public virtual PutDashboardResponse METHOD_NAME(PutDashboardRequest VAR_PUTDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutDashboardResponseUnmarshaller.Instance; return Invoke<PutDashboardResponse>(VAR_PUTDASHBOARDREQUEST, VAR_VAR); }
public void METHOD_NAME(char VAR_CHAR, int VAR_INT) { charWidths[VAR_CHAR] = VAR_INT; }
public virtual DeleteRoomSkillParameterResponse METHOD_NAME(DeleteRoomSkillParameterRequest VAR_DELETEROOMSKILLPARAMETERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRoomSkillParameterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRoomSkillParameterResponseUnmarshaller.Instance; return Invoke<DeleteRoomSkillParameterResponse>(VAR_DELETEROOMSKILLPARAMETERREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(string VAR_STRING, string VAR_STRING) { string[] VAR_STRING[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_STRING[] = (string[])VAR_OBJECT; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_STRING; } if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return VAR_STRING; } else if (VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT || VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT) { return VAR_STRING; } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_STRING[] = PropToStringArray(VAR_STRING); valByRound[VAR_STRING] = VAR_STRING[]; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; }
public virtual DescribeDBClusterSnapshotAttributesResponse METHOD_NAME(DescribeDBClusterSnapshotAttributesRequest VAR_DESCRIBEDBCLUSTERSNAPSHOTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBClusterSnapshotAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBClusterSnapshotAttributesResponseUnmarshaller.Instance; return Invoke<DescribeDBClusterSnapshotAttributesResponse>(VAR_DESCRIBEDBCLUSTERSNAPSHOTATTRIBUTESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(FileHeader VAR_FILEHEADER) { files.AddItem(VAR_FILEHEADER); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ItalianLightStemFilter(VAR_TOKENSTREAM); }
public LinkedHashMap() { init(); accessOrder = false; }
public virtual DeleteStackInstancesResponse METHOD_NAME(DeleteStackInstancesRequest VAR_DELETESTACKINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStackInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStackInstancesResponseUnmarshaller.Instance; return Invoke<DeleteStackInstancesResponse>(VAR_DELETESTACKINSTANCESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME() + LITERAL_STRING + b.METHOD_NAME() + LITERAL_STRING; }
public StringWriter() { buf = new java.lang.StringBuffer(LITERAL_INT); @lock = buf; }
public virtual IList<MatchingDocs> METHOD_NAME() { return base.GetMatchingDocs(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HCenter).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetEbsEncryptionByDefaultResponse METHOD_NAME(GetEbsEncryptionByDefaultRequest VAR_GETEBSENCRYPTIONBYDEFAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEbsEncryptionByDefaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEbsEncryptionByDefaultResponseUnmarshaller.Instance; return Invoke<GetEbsEncryptionByDefaultResponse>(VAR_GETEBSENCRYPTIONBYDEFAULTREQUEST, VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public int METHOD_NAME(char VAR_CHAR) { object VAR_OBJECT = charWidths[VAR_CHAR]; if (VAR_OBJECT == LITERAL_NULL) return LITERAL_CHAR == VAR_CHAR ? LITERAL_INT : METHOD_NAME(LITERAL_CHAR); else return (int)VAR_OBJECT; }
public virtual DescribeSecurityGroupReferencesResponse METHOD_NAME(DescribeSecurityGroupReferencesRequest VAR_DESCRIBESECURITYGROUPREFERENCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSecurityGroupReferencesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSecurityGroupReferencesResponseUnmarshaller.Instance; return Invoke<DescribeSecurityGroupReferencesResponse>(VAR_DESCRIBESECURITYGROUPREFERENCESREQUEST, VAR_VAR); }
public virtual V METHOD_NAME() { return value; }
public EscherContainerRecord METHOD_NAME() { for (IEnumerator it = escherRecords.GetEnumerator(); it.MoveNext();) { Object VAR_OBJECT = it.Current; if (VAR_OBJECT is EscherContainerRecord) { return (EscherContainerRecord)VAR_OBJECT; } } return LITERAL_NULL; }
public bool METHOD_NAME(HSSFShape VAR_HSSFSHAPE) { bool VAR_BOOL = GetEscherContainer().RemoveChildRecord(VAR_HSSFSHAPE.GetEscherContainer()); if (VAR_BOOL) { VAR_HSSFSHAPE.AfterRemove(this.Patriarch); shapes.Remove(VAR_HSSFSHAPE); } return VAR_BOOL; }
public bool METHOD_NAME(String VAR_STRING, String VAR_STRING) { return linkTable.METHOD_NAME(VAR_STRING, VAR_STRING); }
public override string METHOD_NAME() { return LITERAL_STRING + Prefix.Utf8ToString(); }
public static string METHOD_NAME(string[] VAR_STRING[]) { return METHOD_NAME(VAR_STRING[], VAR_STRING[].Length); }
public bool METHOD_NAME(int VAR_INT, int VAR_INT) { CellRangeAddress8Bit VAR_CELLRANGEADDRESS8BIT = _range; return VAR_CELLRANGEADDRESS8BIT.FirstRow <= VAR_INT && VAR_CELLRANGEADDRESS8BIT.LastRow >= VAR_INT && VAR_CELLRANGEADDRESS8BIT.FirstColumn <= VAR_INT && VAR_CELLRANGEADDRESS8BIT.LastColumn >= VAR_INT; }
public virtual RmCommand METHOD_NAME() { return new RmCommand(repo); }
public static string[] METHOD_NAME(string VAR_STRING) { bool VAR_BOOL = false; List<string> VAR_LIST<STRING> = new List<string>(); int VAR_INT = LITERAL_INT; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR == QUOTE) { VAR_BOOL = !VAR_BOOL; VAR_INT++; } if (VAR_CHAR == COMMA && !VAR_BOOL) { string VAR_STRING = VAR_STRINGBUILDER.ToString(); VAR_STRING = UnQuoteUnEscape(VAR_STRING); VAR_LIST<STRING>.Add(VAR_STRING); VAR_STRINGBUILDER.Length = LITERAL_INT; continue; } VAR_STRINGBUILDER.Append(VAR_CHAR); } VAR_LIST<STRING>.Add(VAR_STRINGBUILDER.ToString()); if (VAR_INT % LITERAL_INT != LITERAL_INT) { return new string[LITERAL_INT]; } return VAR_LIST<STRING>.ToArray(); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual void METHOD_NAME(java.io.PipedOutputStream VAR_JAVA.IO.PIPEDOUTPUTSTREAM) { throw new System.NotImplementedException(); }
public WeightedPhraseInfo(ICollection<WeightedPhraseInfo> VAR_ICOLLECTION<WEIGHTEDPHRASEINFO>) { IEnumerator<Toffs>[] VAR_IENUMERATOR<TOFFS>[] = new IEnumerator<Toffs>[VAR_ICOLLECTION<WEIGHTEDPHRASEINFO>.Count]; try { using (IEnumerator<WeightedPhraseInfo> toMergeItr = VAR_ICOLLECTION<WEIGHTEDPHRASEINFO>.GetEnumerator()) { if (!toMergeItr.MoveNext()) { throw new ArgumentException(LITERAL_STRING); } WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO = toMergeItr.Current; termsInfos = new List<TermInfo>(); seqnum = VAR_WEIGHTEDPHRASEINFO.seqnum; boost = VAR_WEIGHTEDPHRASEINFO.boost; VAR_IENUMERATOR<TOFFS>[][LITERAL_INT] = VAR_WEIGHTEDPHRASEINFO.termsOffsets.GetEnumerator(); int VAR_INT = LITERAL_INT; while (toMergeItr.MoveNext()) { WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO = toMergeItr.Current; boost += VAR_WEIGHTEDPHRASEINFO.boost; termsInfos.AddRange(VAR_WEIGHTEDPHRASEINFO.termsInfos); VAR_IENUMERATOR<TOFFS>[][VAR_INT++] = VAR_WEIGHTEDPHRASEINFO.termsOffsets.GetEnumerator(); } using (MergedIterator<Toffs> itr = new MergedIterator<Toffs>(false, VAR_IENUMERATOR<TOFFS>[])) { termsOffsets = new List<Toffs>(); if (!itr.MoveNext()) { return; } Toffs VAR_TOFFS = itr.Current; while (itr.MoveNext()) { Toffs VAR_TOFFS = itr.Current; if (VAR_TOFFS.StartOffset <= VAR_TOFFS.EndOffset) { VAR_TOFFS.EndOffset = Math.Max(VAR_TOFFS.EndOffset, VAR_TOFFS.EndOffset); } else { termsOffsets.Add(VAR_TOFFS); VAR_TOFFS = VAR_TOFFS; } } termsOffsets.Add(VAR_TOFFS); } } } finally { foreach (var allToff in VAR_IENUMERATOR<TOFFS>[]) { allToff.Dispose(); } } }
public virtual DescribeLoadBalancerPolicyTypesResponse METHOD_NAME(DescribeLoadBalancerPolicyTypesRequest VAR_DESCRIBELOADBALANCERPOLICYTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoadBalancerPolicyTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoadBalancerPolicyTypesResponseUnmarshaller.Instance; return Invoke<DescribeLoadBalancerPolicyTypesResponse>(VAR_DESCRIBELOADBALANCERPOLICYTYPESREQUEST, VAR_VAR); }
public override java.util.MapClass.Entry<K, V> METHOD_NAME() { return this.nextEntry(); }
public int METHOD_NAME(char VAR_CHAR) { Cell VAR_CELL = At(VAR_CHAR); return (VAR_CELL == LITERAL_NULL) ? -LITERAL_INT : VAR_CELL.cmd; }
public int METHOD_NAME() { int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); int VAR_INT = _in.ReadUByte(); return (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT) + (VAR_INT << LITERAL_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + base.METHOD_NAME(); }
public override Explanation METHOD_NAME(int VAR_INT, Explanation VAR_EXPLANATION) { return outerInstance.METHOD_NAME(stats, VAR_INT, VAR_EXPLANATION, norms == LITERAL_NULL ? LITERAL_FLOAT : outerInstance.DecodeNormValue((byte)norms.Get(VAR_INT))); }
public static ListenerList METHOD_NAME() { return globalListeners; }
public virtual GetInvitationsCountResponse METHOD_NAME(GetInvitationsCountRequest VAR_GETINVITATIONSCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInvitationsCountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInvitationsCountResponseUnmarshaller.Instance; return Invoke<GetInvitationsCountResponse>(VAR_GETINVITATIONSCOUNTREQUEST, VAR_VAR); }
public static bool METHOD_NAME(float[] VAR_FLOAT[], float[] VAR_FLOAT[]) { if (VAR_FLOAT[] == VAR_FLOAT[]) { return true; } if (VAR_FLOAT[] == LITERAL_NULL || VAR_FLOAT[] == LITERAL_NULL || VAR_FLOAT[].Length != VAR_FLOAT[].Length) { return false; } { for (int i = LITERAL_INT; i < VAR_FLOAT[].Length; i++) { if (Sharpen.Util.FloatToIntBits(VAR_FLOAT[][i]) != Sharpen.Util.FloatToIntBits(VAR_FLOAT[][i])) { return false; } } } return true; }
public virtual V METHOD_NAME(V VAR_V) { if ((object)VAR_V == LITERAL_NULL) { throw new System.ArgumentNullException(); } V VAR_V = this.VAR_V; this.VAR_V = VAR_V; return VAR_V; }
public override bool METHOD_NAME() { return this._enclosing._size == LITERAL_INT; }
public void METHOD_NAME(CellRangeAddressBase VAR_CELLRANGEADDRESSBASE) { int VAR_INT = SetVerticalCellRange(dataCategoryLabels, VAR_CELLRANGEADDRESSBASE); series.NumCategories = (short)VAR_INT; }
public SrndQuery METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<SrndQuery> VAR_ILIST<SRNDQUERY> = LITERAL_NULL; Token VAR_TOKEN = LITERAL_NULL; VAR_SRNDQUERY = AndQuery(); while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.OR: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_2; } VAR_TOKEN = Jj_consume_token(RegexpToken.OR); if (VAR_ILIST<SRNDQUERY> == LITERAL_NULL) { VAR_ILIST<SRNDQUERY> = new List<SrndQuery>(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); } VAR_SRNDQUERY = AndQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); } label_2: { if (true) return (VAR_ILIST<SRNDQUERY> == LITERAL_NULL) ? VAR_SRNDQUERY : GetOrQuery(VAR_ILIST<SRNDQUERY>, true, VAR_TOKEN); } throw new Exception(LITERAL_STRING); }
public virtual DeleteScheduledActionResponse METHOD_NAME(DeleteScheduledActionRequest VAR_DELETESCHEDULEDACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteScheduledActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<DeleteScheduledActionResponse>(VAR_DELETESCHEDULEDACTIONREQUEST, VAR_VAR); }
public virtual java.nio.CharBuffer METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT < VAR_INT || VAR_INT > VAR_STRING.Length) { throw new System.IndexOutOfRangeException(LITERAL_STRING + VAR_STRING.Length + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT); } if (VAR_INT - VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT; i++) { METHOD_NAME(VAR_STRING[i]); } } return this; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rt); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.WriteShort(iObjectKind); VAR_ILITTLEENDIANOUTPUT.Write(unused); }
public ChangeInfo(string VAR_STRING, ChangeStatus VAR_CHANGESTATUS, DateTime VAR_DATETIME) { _id = VAR_STRING; _status = VAR_CHANGESTATUS; _submittedAt = VAR_DATETIME; }
public SwedishLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public ErrorMatcher(int VAR_INT, CmpOp VAR_CMPOP) : base(operator1) { ; _value = VAR_INT; }
public static java.io.Console METHOD_NAME() { return console; }
public virtual UpdateTrialComponentResponse METHOD_NAME(UpdateTrialComponentRequest VAR_UPDATETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTrialComponentResponseUnmarshaller.Instance; return Invoke<UpdateTrialComponentResponse>(VAR_UPDATETRIALCOMPONENTREQUEST, VAR_VAR); }
public virtual NGit.Api.AddCommand METHOD_NAME(WorkingTreeIterator VAR_WORKINGTREEITERATOR) { workingTreeIterator = VAR_WORKINGTREEITERATOR; return this; }
public RefWriter(IDictionary<string, Ref> VAR_IDICTIONARY<STRING, REF>) { if (VAR_IDICTIONARY<STRING, REF> is RefMap) { this.VAR_IDICTIONARY<STRING, REF> = VAR_IDICTIONARY<STRING, REF>.Values; } else { this.VAR_IDICTIONARY<STRING, REF> = RefComparator.Sort(VAR_IDICTIONARY<STRING, REF>.Values); } }
public LazyAreaEval(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR) : base(evaluator, firstRowIndex, firstColumnIndex, lastRowIndex, lastColumnIndex) { _evaluator = VAR_SHEETRANGEEVALUATOR; }
public virtual BatchSuspendUserResponse METHOD_NAME(BatchSuspendUserRequest VAR_BATCHSUSPENDUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchSuspendUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchSuspendUserResponseUnmarshaller.Instance; return Invoke<BatchSuspendUserResponse>(VAR_BATCHSUSPENDUSERREQUEST, VAR_VAR); }
public CreateVpnGatewayRequest(GatewayType VAR_GATEWAYTYPE) { _type = VAR_GATEWAYTYPE; }
public virtual BundleInstanceResponse METHOD_NAME(BundleInstanceRequest VAR_BUNDLEINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BundleInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BundleInstanceResponseUnmarshaller.Instance; return Invoke<BundleInstanceResponse>(VAR_BUNDLEINSTANCEREQUEST, VAR_VAR); }
public virtual ListDeploymentsResponse METHOD_NAME(ListDeploymentsRequest VAR_LISTDEPLOYMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentsResponseUnmarshaller.Instance; return Invoke<ListDeploymentsResponse>(VAR_LISTDEPLOYMENTSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + path.METHOD_NAME() + LITERAL_STRING + LITERAL_STRING + ANY_DIFF.METHOD_NAME() + LITERAL_STRING; }
public virtual DetectFacesResponse METHOD_NAME(DetectFacesRequest VAR_DETECTFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectFacesResponseUnmarshaller.Instance; return Invoke<DetectFacesResponse>(VAR_DETECTFACESREQUEST, VAR_VAR); }
public virtual GetRegionsResponse METHOD_NAME(GetRegionsRequest VAR_GETREGIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRegionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRegionsResponseUnmarshaller.Instance; return Invoke<GetRegionsResponse>(VAR_GETREGIONSREQUEST, VAR_VAR); }
public WikipediaTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME(String VAR_STRING) { int VAR_INT = -LITERAL_INT; for (int k = LITERAL_INT; k < boundsheets.Count; k++) { String VAR_STRING = GetSheetName(k); if (VAR_STRING.Equals(VAR_STRING, StringComparison.OrdinalIgnoreCase)) { VAR_INT = k; break; } } return VAR_INT; }
public PagedBytesDataInput METHOD_NAME() { if (!frozen) { throw new InvalidOperationException(LITERAL_STRING); } return new PagedBytesDataInput(this); }
public virtual AddTagsToResourceResponse METHOD_NAME(AddTagsToResourceRequest VAR_ADDTAGSTORESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddTagsToResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddTagsToResourceResponseUnmarshaller.Instance; return Invoke<AddTagsToResourceResponse>(VAR_ADDTAGSTORESOURCEREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } if (VAR_INT == LITERAL_INT) { return LITERAL_INT; } int VAR_INT = VAR_INT >> LITERAL_INT; if (VAR_INT < LITERAL_INT) { VAR_INT = LITERAL_INT; } int VAR_INT = VAR_INT + VAR_INT; if (VAR_INT + LITERAL_INT < LITERAL_INT) { return int.MaxValue; } if (Constants.RUNTIME_IS_64BIT) { switch (VAR_INT) { case LITERAL_INT: return (VAR_INT + LITERAL_INT) & LITERAL_INT; case LITERAL_INT: return (VAR_INT + LITERAL_INT) & LITERAL_INT; case LITERAL_INT: return (VAR_INT + LITERAL_INT) & LITERAL_INT; case LITERAL_INT: default: return VAR_INT; } } else { switch (VAR_INT) { case LITERAL_INT: return (VAR_INT + LITERAL_INT) & LITERAL_INT; case LITERAL_INT: return (VAR_INT + LITERAL_INT) & LITERAL_INT; case LITERAL_INT: case LITERAL_INT: default: return VAR_INT; } } }
public virtual Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(IIntSet VAR_IINTSET) { if (VAR_IINTSET == LITERAL_NULL || VAR_IINTSET.IsNil) { return LITERAL_NULL; } Antlr4.Runtime.Misc.IntervalSet VAR_ANTLR4.RUNTIME.MISC.INTERVALSET; if (VAR_IINTSET is Antlr4.Runtime.Misc.IntervalSet) { VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = (Antlr4.Runtime.Misc.IntervalSet)VAR_IINTSET; } else { VAR_ANTLR4.RUNTIME.MISC.INTERVALSET = new Antlr4.Runtime.Misc.IntervalSet(); VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.AddAll(VAR_IINTSET); } return VAR_ANTLR4.RUNTIME.MISC.INTERVALSET.Subtract(this); }
public virtual NGit.BatchRefUpdate METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { if (VAR_STRING == LITERAL_NULL && !VAR_BOOL) { DisableRefLog(); } else { if (VAR_STRING == LITERAL_NULL && VAR_BOOL) { refLogMessage = string.Empty; refLogIncludeResult = true; } else { refLogMessage = VAR_STRING; refLogIncludeResult = VAR_BOOL; } } return this; }
public virtual GetApnsVoipSandboxChannelResponse METHOD_NAME(GetApnsVoipSandboxChannelRequest VAR_GETAPNSVOIPSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApnsVoipSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApnsVoipSandboxChannelResponseUnmarshaller.Instance; return Invoke<GetApnsVoipSandboxChannelResponse>(VAR_GETAPNSVOIPSANDBOXCHANNELREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ArabicNormalizationFilter(VAR_TOKENSTREAM); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsValue(VAR_OBJECT); }
public virtual bool METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public override long METHOD_NAME(int VAR_INT) { return LITERAL_INT; }
public virtual DescribeSecurityGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeSecurityGroupsRequest()); }
public ListPartsRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _uploadId = VAR_STRING; }
public GetCloudFrontOriginAccessIdentityRequest(string VAR_STRING) { _id = VAR_STRING; }
public virtual DescribeAlarmHistoryResponse METHOD_NAME(DescribeAlarmHistoryRequest VAR_DESCRIBEALARMHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAlarmHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAlarmHistoryResponseUnmarshaller.Instance; return Invoke<DescribeAlarmHistoryResponse>(VAR_DESCRIBEALARMHISTORYREQUEST, VAR_VAR); }
public DescribeJobRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _jobId = VAR_STRING; }
public virtual NGit.Api.DeleteTagCommand METHOD_NAME(params string[] VAR_STRING[]) { CheckCallable(); this.VAR_STRING[].Clear(); foreach (string tagName in VAR_STRING[]) { this.VAR_STRING[].AddItem(tagName); } return this; }
public virtual ListVoiceConnectorGroupsResponse METHOD_NAME(ListVoiceConnectorGroupsRequest VAR_LISTVOICECONNECTORGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVoiceConnectorGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVoiceConnectorGroupsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorGroupsResponse>(VAR_LISTVOICECONNECTORGROUPSREQUEST, VAR_VAR); }
public Intercept() { func = new LinearRegressionFunction(LinearRegressionFunction.FUNCTION.INTERCEPT); }
public virtual ProvisionByoipCidrResponse METHOD_NAME(ProvisionByoipCidrRequest VAR_PROVISIONBYOIPCIDRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ProvisionByoipCidrRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ProvisionByoipCidrResponseUnmarshaller.Instance; return Invoke<ProvisionByoipCidrResponse>(VAR_PROVISIONBYOIPCIDRREQUEST, VAR_VAR); }
public virtual BatchGetApplicationRevisionsResponse METHOD_NAME(BatchGetApplicationRevisionsRequest VAR_BATCHGETAPPLICATIONREVISIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetApplicationRevisionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetApplicationRevisionsResponseUnmarshaller.Instance; return Invoke<BatchGetApplicationRevisionsResponse>(VAR_BATCHGETAPPLICATIONREVISIONSREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT; if (VAR_INT == -LITERAL_INT) return; if (!IsRowGroupCollapsed(VAR_INT)) return; int VAR_INT = FindStartOfRowOutlineGroup(VAR_INT); RowRecord VAR_ROWRECORD = GetRow(VAR_INT); int VAR_INT = FindEndOfRowOutlineGroup(VAR_INT); if (!IsRowGroupHiddenByParent(VAR_INT)) { for (int i = VAR_INT; i <= VAR_INT; i++) { if (VAR_ROWRECORD.OutlineLevel == GetRow(i).OutlineLevel) GetRow(i).ZeroHeight = (false); else if (!IsRowGroupCollapsed(i)) GetRow(i).ZeroHeight = (false); } } GetRow(VAR_INT + LITERAL_INT).Colapsed = (false); }
public virtual GetSendQuotaResponse METHOD_NAME(GetSendQuotaRequest VAR_GETSENDQUOTAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSendQuotaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSendQuotaResponseUnmarshaller.Instance; return Invoke<GetSendQuotaResponse>(VAR_GETSENDQUOTAREQUEST, VAR_VAR); }
public FeatFormulaErr2(RecordInputStream VAR_RECORDINPUTSTREAM) { errorCheck = VAR_RECORDINPUTSTREAM.ReadInt(); }
public virtual DefineAnalysisSchemeResponse METHOD_NAME(DefineAnalysisSchemeRequest VAR_DEFINEANALYSISSCHEMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DefineAnalysisSchemeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DefineAnalysisSchemeResponseUnmarshaller.Instance; return Invoke<DefineAnalysisSchemeResponse>(VAR_DEFINEANALYSISSCHEMEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is IrishStemmer; }
public UTF8Sequence() { bytes = new UTF8Byte[LITERAL_INT]; for (int i = LITERAL_INT; i < LITERAL_INT; i++) { bytes[i] = new UTF8Byte(); } }
public ListPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual RegisterStreamConsumerResponse METHOD_NAME(RegisterStreamConsumerRequest VAR_REGISTERSTREAMCONSUMERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterStreamConsumerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterStreamConsumerResponseUnmarshaller.Instance; return Invoke<RegisterStreamConsumerResponse>(VAR_REGISTERSTREAMCONSUMERREQUEST, VAR_VAR); }
public Formula METHOD_NAME() { return this; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT == LITERAL_NULL) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } MergeInfo VAR_MERGEINFO = (MergeInfo)VAR_OBJECT; if (EstimatedMergeBytes != VAR_MERGEINFO.EstimatedMergeBytes) { return false; } if (IsExternal != VAR_MERGEINFO.IsExternal) { return false; } if (MergeMaxNumSegments != VAR_MERGEINFO.MergeMaxNumSegments) { return false; } if (TotalDocCount != VAR_MERGEINFO.TotalDocCount) { return false; } return true; }
public override float METHOD_NAME(int VAR_INT, float VAR_FLOAT) { float VAR_FLOAT = LITERAL_FLOAT; foreach (SimScorer subScorer in subScorers) { VAR_FLOAT += subScorer.METHOD_NAME(VAR_INT, VAR_FLOAT); } return VAR_FLOAT; }
public AddTagsRequest(string VAR_STRING, List<Tag> VAR_LIST<TAG>) { _resourceId = VAR_STRING; _tags = VAR_LIST<TAG>; }
public virtual DescribeEC2InstanceLimitsResponse METHOD_NAME(DescribeEC2InstanceLimitsRequest VAR_DESCRIBEEC2INSTANCELIMITSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEC2InstanceLimitsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEC2InstanceLimitsResponseUnmarshaller.Instance; return Invoke<DescribeEC2InstanceLimitsResponse>(VAR_DESCRIBEEC2INSTANCELIMITSREQUEST, VAR_VAR); }
public virtual NGit.Blame.BlameGenerator METHOD_NAME(bool VAR_BOOL) { if (VAR_BOOL) { renameDetector = new RenameDetector(GetRepository()); } else { renameDetector = LITERAL_NULL; } return this; }
public virtual GetStagesResponse METHOD_NAME(GetStagesRequest VAR_GETSTAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStagesResponseUnmarshaller.Instance; return Invoke<GetStagesResponse>(VAR_GETSTAGESREQUEST, VAR_VAR); }
public void METHOD_NAME(Ptg[] VAR_PTG[]) { field_5_name_definition = Formula.Create(VAR_PTG[]); }
public int METHOD_NAME(int VAR_INT) { return RIGHT_ID; }
public GetChangeRequest(string VAR_STRING) { _id = VAR_STRING; }
public RegisterPhotoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual void METHOD_NAME() { _type = TokenTypes.METHOD_NAME; }
public java.nio.Buffer METHOD_NAME(int VAR_INT) { positionImpl(VAR_INT); return this; }
public ScenarioProtectRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_protect = VAR_RECORDINPUTSTREAM.ReadShort(); }
public static TopDocs METHOD_NAME(Sort VAR_SORT, int VAR_INT, TopDocs[] VAR_TOPDOCS[]) { return METHOD_NAME(VAR_SORT, LITERAL_INT, VAR_INT, VAR_TOPDOCS[]); }
public LexerModeAction(int VAR_INT) { this.VAR_INT = VAR_INT; }
public override bool METHOD_NAME(FilePath VAR_FILEPATH) { return false; }
public override int METHOD_NAME(int VAR_INT) { if (VAR_INT < text.BeginIndex || VAR_INT > text.EndIndex) { throw new ArgumentException(LITERAL_STRING); } else if (LITERAL_INT == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); currentSentence = LITERAL_INT; return Done; } else if (VAR_INT < sentenceStarts[LITERAL_INT]) { text.SetIndex(text.BeginIndex); currentSentence = LITERAL_INT; return Done; } else { currentSentence = sentenceStarts.Length / LITERAL_INT; MoveToSentenceAt(VAR_INT, LITERAL_INT, sentenceStarts.Length - LITERAL_INT); if (LITERAL_INT == currentSentence) { text.SetIndex(text.BeginIndex); return Done; } else { text.SetIndex(sentenceStarts[--currentSentence]); return Current; } } }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { throw new RecordFormatException(LITERAL_STRING); }
public virtual DetachObjectResponse METHOD_NAME(DetachObjectRequest VAR_DETACHOBJECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachObjectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachObjectResponseUnmarshaller.Instance; return Invoke<DetachObjectResponse>(VAR_DETACHOBJECTREQUEST, VAR_VAR); }
public virtual DescribeWorkflowTypeResponse METHOD_NAME(DescribeWorkflowTypeRequest VAR_DESCRIBEWORKFLOWTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkflowTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkflowTypeResponseUnmarshaller.Instance; return Invoke<DescribeWorkflowTypeResponse>(VAR_DESCRIBEWORKFLOWTYPEREQUEST, VAR_VAR); }
public static void METHOD_NAME() { sentenceModels.Clear(); tokenizerModels.Clear(); posTaggerModels.Clear(); chunkerModels.Clear(); nerModels.Clear(); lemmaDictionaries.Clear(); }
public static string METHOD_NAME(string VAR_STRING) { return VAR_STRING + LockFile.SUFFIX; }
public virtual DeleteComponentResponse METHOD_NAME(DeleteComponentRequest VAR_DELETECOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteComponentResponseUnmarshaller.Instance; return Invoke<DeleteComponentResponse>(VAR_DELETECOMPONENTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(field_1_xf_index)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsBuiltin ? LITERAL_STRING : LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(XFIndex)).Append(LITERAL_STRING); if (IsBuiltin) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_2_builtin_style)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_3_outline_style_level)).Append(LITERAL_STRING); } else { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Name).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeAuditStreamConfigurationResponse METHOD_NAME(DescribeAuditStreamConfigurationRequest VAR_DESCRIBEAUDITSTREAMCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAuditStreamConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAuditStreamConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeAuditStreamConfigurationResponse>(VAR_DESCRIBEAUDITSTREAMCONFIGURATIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { var VAR_VAR = GetChildren(); if (VAR_VAR == LITERAL_NULL || VAR_VAR.Count == LITERAL_INT) return LITERAL_STRING + this.field + LITERAL_STRING + this.minimumMatchingmElements + LITERAL_STRING; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING + this.field + LITERAL_STRING + this.minimumMatchingmElements + LITERAL_STRING); foreach (IQueryNode clause in VAR_VAR) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(clause.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual AssociateSkillWithSkillGroupResponse METHOD_NAME(AssociateSkillWithSkillGroupRequest VAR_ASSOCIATESKILLWITHSKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateSkillWithSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateSkillWithSkillGroupResponseUnmarshaller.Instance; return Invoke<AssociateSkillWithSkillGroupResponse>(VAR_ASSOCIATESKILLWITHSKILLGROUPREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return this.fetchedFrom; }
public static Counter METHOD_NAME(bool VAR_BOOL) { return VAR_BOOL ? (Counter)new AtomicCounter() : new SerialCounter(); }
public override java.nio.FloatBuffer METHOD_NAME() { return new java.nio.ReadWriteFloatArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual ListProcessingJobsResponse METHOD_NAME(ListProcessingJobsRequest VAR_LISTPROCESSINGJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProcessingJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProcessingJobsResponseUnmarshaller.Instance; return Invoke<ListProcessingJobsResponse>(VAR_LISTPROCESSINGJOBSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RecognitionException VAR_RECOGNITIONEXCEPTION) { _input.Consume(); }
public virtual CreateTemplateAliasResponse METHOD_NAME(CreateTemplateAliasRequest VAR_CREATETEMPLATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTemplateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTemplateAliasResponseUnmarshaller.Instance; return Invoke<CreateTemplateAliasResponse>(VAR_CREATETEMPLATEALIASREQUEST, VAR_VAR); }
public java.nio.Buffer METHOD_NAME() { if (_mark == UNSET_MARK) { throw new java.nio.InvalidMarkException(LITERAL_STRING); } _position = _mark; return this; }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this) { return (VAR_OBJECT is java.util.Map<K, V>) && entrySet().METHOD_NAME(((java.util.Map<object, object>)VAR_OBJECT).entrySet()); } }
public virtual TagResourceResponse METHOD_NAME(TagResourceRequest VAR_TAGRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TagResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(VAR_TAGRESOURCEREQUEST, VAR_VAR); }
public override BytesRef METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { Debug.Assert(VAR_BYTESREF != LITERAL_NULL); Debug.Assert(VAR_BYTESREF != LITERAL_NULL); int VAR_INT = VAR_BYTESREF.Offset; int VAR_INT = VAR_BYTESREF.Offset; int VAR_INT = VAR_INT + Math.Min(VAR_BYTESREF.Length, VAR_BYTESREF.Length); while (VAR_INT < VAR_INT) { if (VAR_BYTESREF.Bytes[VAR_INT] != VAR_BYTESREF.Bytes[VAR_INT]) { break; } VAR_INT++; VAR_INT++; } if (VAR_INT == VAR_BYTESREF.Offset) { return NO_OUTPUT; } else if (VAR_INT == VAR_BYTESREF.Offset + VAR_BYTESREF.Length) { return VAR_BYTESREF; } else if (VAR_INT == VAR_BYTESREF.Offset + VAR_BYTESREF.Length) { return VAR_BYTESREF; } else { return new BytesRef(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_INT - VAR_BYTESREF.Offset); } }
public virtual E METHOD_NAME() { return getFirstImpl(); }
public virtual ObjectId METHOD_NAME(ObjectInserter VAR_OBJECTINSERTER) { if (buf != LITERAL_NULL) { return VAR_OBJECTINSERTER.IdFor(Constants.OBJ_TREE, buf, LITERAL_INT, ptr); } long VAR_LONG = overflowBuffer.Length(); try { return VAR_OBJECTINSERTER.IdFor(Constants.OBJ_TREE, VAR_LONG, overflowBuffer.OpenInputStream()); } catch (IOException e) { throw new RuntimeException(e); } }
public virtual TransferDomainResponse METHOD_NAME(TransferDomainRequest VAR_TRANSFERDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TransferDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TransferDomainResponseUnmarshaller.Instance; return Invoke<TransferDomainResponse>(VAR_TRANSFERDOMAINREQUEST, VAR_VAR); }
public override string METHOD_NAME() { lock (@lock) { return new string (buf, LITERAL_INT, count); } }
public virtual DescribeReservedNodeOfferingsResponse METHOD_NAME(DescribeReservedNodeOfferingsRequest VAR_DESCRIBERESERVEDNODEOFFERINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReservedNodeOfferingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReservedNodeOfferingsResponseUnmarshaller.Instance; return Invoke<DescribeReservedNodeOfferingsResponse>(VAR_DESCRIBERESERVEDNODEOFFERINGSREQUEST, VAR_VAR); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (!term.Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_STRINGBUILDER.Append(term.Field); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(term.Text()); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override java.nio.IntBuffer METHOD_NAME() { java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.IntToByteBufferAdapter VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER = new java.nio.IntToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._mark = _mark; return VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(ChartGroupIndex)).Append(LITERAL_STRING).Append(ChartGroupIndex).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual bool METHOD_NAME(URIish VAR_URIISH) { return METHOD_NAME(VAR_URIISH, LITERAL_NULL, LITERAL_NULL); }
public virtual GetImportJobResponse METHOD_NAME(GetImportJobRequest VAR_GETIMPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetImportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetImportJobResponseUnmarshaller.Instance; return Invoke<GetImportJobResponse>(VAR_GETIMPORTJOBREQUEST, VAR_VAR); }
public virtual LookupDeveloperIdentityResponse METHOD_NAME(LookupDeveloperIdentityRequest VAR_LOOKUPDEVELOPERIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = LookupDeveloperIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = LookupDeveloperIdentityResponseUnmarshaller.Instance; return Invoke<LookupDeveloperIdentityResponse>(VAR_LOOKUPDEVELOPERIDENTITYREQUEST, VAR_VAR); }
public override java.nio.FloatBuffer METHOD_NAME(float VAR_FLOAT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_FLOAT; return this; }
public RefModeRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_mode = VAR_RECORDINPUTSTREAM.ReadShort(); }
public BulkOperationPackedSingleBlock(int VAR_INT) { this.VAR_INT = VAR_INT; this.valueCount = LITERAL_INT / VAR_INT; this.mask = (LITERAL_INT << VAR_INT) - LITERAL_INT; }
public static string METHOD_NAME(DateTime VAR_DATETIME, Resolution VAR_RESOLUTION) { return TimeToString(VAR_DATETIME.Ticks / TimeSpan.TicksPerMillisecond, VAR_RESOLUTION); }
public virtual DescribeUserHierarchyStructureResponse METHOD_NAME(DescribeUserHierarchyStructureRequest VAR_DESCRIBEUSERHIERARCHYSTRUCTUREREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUserHierarchyStructureRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUserHierarchyStructureResponseUnmarshaller.Instance; return Invoke<DescribeUserHierarchyStructureResponse>(VAR_DESCRIBEUSERHIERARCHYSTRUCTUREREQUEST, VAR_VAR); }
public virtual GetDomainsResponse METHOD_NAME(GetDomainsRequest VAR_GETDOMAINSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainsResponseUnmarshaller.Instance; return Invoke<GetDomainsResponse>(VAR_GETDOMAINSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return streamFileThreshold; }
public virtual BatchGetDeploymentInstancesResponse METHOD_NAME(BatchGetDeploymentInstancesRequest VAR_BATCHGETDEPLOYMENTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetDeploymentInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetDeploymentInstancesResponseUnmarshaller.Instance; return Invoke<BatchGetDeploymentInstancesResponse>(VAR_BATCHGETDEPLOYMENTINSTANCESREQUEST, VAR_VAR); }
public virtual GetIdentityVerificationAttributesResponse METHOD_NAME(GetIdentityVerificationAttributesRequest VAR_GETIDENTITYVERIFICATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityVerificationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityVerificationAttributesResponseUnmarshaller.Instance; return Invoke<GetIdentityVerificationAttributesResponse>(VAR_GETIDENTITYVERIFICATIONATTRIBUTESREQUEST, VAR_VAR); }
public LittleEndianOutputStream(Stream VAR_STREAM) { this.VAR_STREAM = VAR_STREAM; }
public virtual GetDeploymentGroupResponse METHOD_NAME(GetDeploymentGroupRequest VAR_GETDEPLOYMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDeploymentGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDeploymentGroupResponseUnmarshaller.Instance; return Invoke<GetDeploymentGroupResponse>(VAR_GETDEPLOYMENTGROUPREQUEST, VAR_VAR); }
public override bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return false; }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { registry.TryGetValue(name.ToUpperInvariant(), out clazz); if (clazz == LITERAL_NULL) { clazz = ResolveEncoder(name, VAR_IRESOURCELOADER); } if (maxCodeLength != LITERAL_NULL) { try { setMaxCodeLenMethod = clazz.GetMethod(LITERAL_STRING); } catch (Exception e) { throw new ArgumentException(LITERAL_STRING + name + LITERAL_STRING + clazz + LITERAL_STRING + MAX_CODE_LENGTH, e); } } GetEncoder(); }
public virtual DescribeOrganizationConfigurationResponse METHOD_NAME(DescribeOrganizationConfigurationRequest VAR_DESCRIBEORGANIZATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOrganizationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOrganizationConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeOrganizationConfigurationResponse>(VAR_DESCRIBEORGANIZATIONCONFIGURATIONREQUEST, VAR_VAR); }
public override AbbreviatedObjectId METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public virtual UpdateRuleMetadataResponse METHOD_NAME(UpdateRuleMetadataRequest VAR_UPDATERULEMETADATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRuleMetadataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRuleMetadataResponseUnmarshaller.Instance; return Invoke<UpdateRuleMetadataResponse>(VAR_UPDATERULEMETADATAREQUEST, VAR_VAR); }
public K METHOD_NAME(K VAR_K) { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.findBounded(VAR_K, java.util.TreeMap.Relation.LOWER); return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> != LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey() : default(K); }
public override Object METHOD_NAME() { FtCfSubRecord VAR_FTCFSUBRECORD = new FtCfSubRecord(); VAR_FTCFSUBRECORD.flags = this.flags; return VAR_FTCFSUBRECORD; }
public override Object METHOD_NAME() { HCenterRecord VAR_HCENTERRECORD = new HCenterRecord(); VAR_HCENTERRECORD.field_1_hcenter = field_1_hcenter; return VAR_HCENTERRECORD; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_foregroundColor); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_2_backgroundColor); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_pattern); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_formatFlags); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_5_forecolorIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_backcolorIndex); }
public virtual GetDashboardEmbedUrlResponse METHOD_NAME(GetDashboardEmbedUrlRequest VAR_GETDASHBOARDEMBEDURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDashboardEmbedUrlRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDashboardEmbedUrlResponseUnmarshaller.Instance; return Invoke<GetDashboardEmbedUrlResponse>(VAR_GETDASHBOARDEMBEDURLREQUEST, VAR_VAR); }
public override BinaryDocValues METHOD_NAME(string VAR_STRING) { return LITERAL_NULL; }
public override RevFilter METHOD_NAME() { RevFilter[] VAR_REVFILTER[] = new RevFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_REVFILTER[].Length; i++) { VAR_REVFILTER[][i] = subfilters[i].METHOD_NAME(); } return new OrRevFilter.List(VAR_REVFILTER[]); }
public virtual DeleteApnsVoipSandboxChannelResponse METHOD_NAME(DeleteApnsVoipSandboxChannelRequest VAR_DELETEAPNSVOIPSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApnsVoipSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApnsVoipSandboxChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipSandboxChannelResponse>(VAR_DELETEAPNSVOIPSANDBOXCHANNELREQUEST, VAR_VAR); }
public override FreeRefFunction METHOD_NAME(String VAR_STRING) { if (!_functionsByName.ContainsKey(VAR_STRING.ToUpper())) return LITERAL_NULL; return _functionsByName[VAR_STRING.ToUpper()]; }
public Credentials(string VAR_STRING, string VAR_STRING, string VAR_STRING, DateTime VAR_DATETIME) { _accessKeyId = VAR_STRING; _secretAccessKey = VAR_STRING; _sessionToken = VAR_STRING; _expiration = VAR_DATETIME; }
public ReadTask(PerfRunData VAR_PERFRUNDATA) : base(runData) { if (WithSearch) { queryMaker = GetQueryMaker(); } else { queryMaker = LITERAL_NULL; } }
public virtual int METHOD_NAME(string VAR_STRING) { return LITERAL_INT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(_option_flags); SerializeUnicodeString(_promptTitle, VAR_ILITTLEENDIANOUTPUT); SerializeUnicodeString(_errorTitle, VAR_ILITTLEENDIANOUTPUT); SerializeUnicodeString(_promptText, VAR_ILITTLEENDIANOUTPUT); SerializeUnicodeString(_errorText, VAR_ILITTLEENDIANOUTPUT); VAR_ILITTLEENDIANOUTPUT.WriteShort(_formula1.EncodedTokenSize); VAR_ILITTLEENDIANOUTPUT.WriteShort(_not_used_1); _formula1.SerializeTokens(VAR_ILITTLEENDIANOUTPUT); VAR_ILITTLEENDIANOUTPUT.WriteShort(_formula2.EncodedTokenSize); VAR_ILITTLEENDIANOUTPUT.WriteShort(_not_used_2); _formula2.SerializeTokens(VAR_ILITTLEENDIANOUTPUT); _regions.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(PrintHeaders).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetConferencePreferenceResponse METHOD_NAME(GetConferencePreferenceRequest VAR_GETCONFERENCEPREFERENCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConferencePreferenceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConferencePreferenceResponseUnmarshaller.Instance; return Invoke<GetConferencePreferenceResponse>(VAR_GETCONFERENCEPREFERENCEREQUEST, VAR_VAR); }
public static BitSet METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { BitSet VAR_BITSET = new BitSet(); foreach (BitSet alts in VAR_IENUMERABLE<BITSET>) { VAR_BITSET.Or(alts); } return VAR_BITSET; }
public virtual ListTrafficPolicyInstancesResponse METHOD_NAME(ListTrafficPolicyInstancesRequest VAR_LISTTRAFFICPOLICYINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrafficPolicyInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrafficPolicyInstancesResponseUnmarshaller.Instance; return Invoke<ListTrafficPolicyInstancesResponse>(VAR_LISTTRAFFICPOLICYINSTANCESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(Repository VAR_REPOSITORY) { repository = VAR_REPOSITORY; }
public StandardSyntaxParser(StandardSyntaxParserTokenManager VAR_STANDARDSYNTAXPARSERTOKENMANAGER) { TokenSource = VAR_STANDARDSYNTAXPARSERTOKENMANAGER; Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public virtual ModifyDBClusterEndpointResponse METHOD_NAME(ModifyDBClusterEndpointRequest VAR_MODIFYDBCLUSTERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBClusterEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBClusterEndpointResponseUnmarshaller.Instance; return Invoke<ModifyDBClusterEndpointResponse>(VAR_MODIFYDBCLUSTERENDPOINTREQUEST, VAR_VAR); }
public virtual DescribeTransitGatewaysResponse METHOD_NAME(DescribeTransitGatewaysRequest VAR_DESCRIBETRANSITGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewaysResponse>(VAR_DESCRIBETRANSITGATEWAYSREQUEST, VAR_VAR); }
public GetSimilarPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual GetProposalResponse METHOD_NAME(GetProposalRequest VAR_GETPROPOSALREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetProposalRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetProposalResponseUnmarshaller.Instance; return Invoke<GetProposalResponse>(VAR_GETPROPOSALREQUEST, VAR_VAR); }
public AddJobFlowStepsRequest(string VAR_STRING) { _jobFlowId = VAR_STRING; }
public StartInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public virtual GetRawMessageContentResponse METHOD_NAME(GetRawMessageContentRequest VAR_GETRAWMESSAGECONTENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRawMessageContentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRawMessageContentResponseUnmarshaller.Instance; return Invoke<GetRawMessageContentResponse>(VAR_GETRAWMESSAGECONTENTREQUEST, VAR_VAR); }
public virtual RevCommit METHOD_NAME() { return pending.METHOD_NAME(); }
public IList<SrndQuery> METHOD_NAME() { SrndQuery VAR_SRNDQUERY; IList<SrndQuery> VAR_ILIST<SRNDQUERY> = new List<SrndQuery>(); Jj_consume_token(RegexpToken.LPAREN); VAR_SRNDQUERY = FieldsQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); while (true) { Jj_consume_token(RegexpToken.COMMA); VAR_SRNDQUERY = FieldsQuery(); VAR_ILIST<SRNDQUERY>.Add(VAR_SRNDQUERY); switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.COMMA: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_7; } } label_7: Jj_consume_token(RegexpToken.RPAREN); { if (true) return VAR_ILIST<SRNDQUERY>; } throw new Exception(LITERAL_STRING); }
public virtual bool METHOD_NAME(long VAR_LONG) { for (int i = LITERAL_INT; i < count; i++) { if (entries[i] == VAR_LONG) { return true; } } return false; }
public static bool METHOD_NAME(string VAR_STRING, string VAR_STRING) { return VAR_STRING.EndsWith(LITERAL_STRING + VAR_STRING, StringComparison.Ordinal); }
public override ObjectId METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { return Delegate().METHOD_NAME(VAR_INT, VAR_BYTE[], VAR_INT, VAR_INT); }
public virtual void METHOD_NAME() { parent.METHOD_NAME(this); }
public virtual DisassociateDeviceFromRoomResponse METHOD_NAME(DisassociateDeviceFromRoomRequest VAR_DISASSOCIATEDEVICEFROMROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateDeviceFromRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateDeviceFromRoomResponseUnmarshaller.Instance; return Invoke<DisassociateDeviceFromRoomResponse>(VAR_DISASSOCIATEDEVICEFROMROOMREQUEST, VAR_VAR); }
public Modifier METHOD_NAME() { Modifier VAR_MODIFIER = Modifier.MOD_NONE; switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.NOT: case RegexpToken.PLUS: case RegexpToken.MINUS: switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.PLUS: Jj_consume_token(RegexpToken.PLUS); VAR_MODIFIER = Modifier.MOD_REQ; break; case RegexpToken.MINUS: Jj_consume_token(RegexpToken.MINUS); VAR_MODIFIER = Modifier.MOD_NOT; break; case RegexpToken.NOT: Jj_consume_token(RegexpToken.NOT); VAR_MODIFIER = Modifier.MOD_NOT; break; default: jj_la1[LITERAL_INT] = jj_gen; Jj_consume_token(-LITERAL_INT); throw new ParseException(); } break; default: jj_la1[LITERAL_INT] = jj_gen; break; } { if (true) return VAR_MODIFIER; } throw new Exception(LITERAL_STRING); }
public NGit.Revwalk.RevCommit METHOD_NAME(int VAR_INT) { return parents[VAR_INT]; }
public bool METHOD_NAME() { return iterator.previousIndex() >= start; }
public virtual TerminateWorkspacesResponse METHOD_NAME(TerminateWorkspacesRequest VAR_TERMINATEWORKSPACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TerminateWorkspacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TerminateWorkspacesResponseUnmarshaller.Instance; return Invoke<TerminateWorkspacesResponse>(VAR_TERMINATEWORKSPACESREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return Current().GetLastModified(); }
public virtual CancelConversionTaskResponse METHOD_NAME(CancelConversionTaskRequest VAR_CANCELCONVERSIONTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelConversionTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelConversionTaskResponseUnmarshaller.Instance; return Invoke<CancelConversionTaskResponse>(VAR_CANCELCONVERSIONTASKREQUEST, VAR_VAR); }
public InfoSubRecord(int VAR_INT, int VAR_INT) { field_1_stream_pos = VAR_INT; field_2_bucket_sst_offset = VAR_INT; }
public virtual bool METHOD_NAME(char[] VAR_CHAR[]) { return map.ContainsKey(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public override String METHOD_NAME() { return LITERAL_STRING + ch + LITERAL_STRING + pos; }
public Step(string VAR_STRING, Rule[] VAR_RULE[], int VAR_INT, string[] VAR_STRING[]) { this.m_name = VAR_STRING; this.m_rules = VAR_RULE[]; if (VAR_INT == LITERAL_INT) { VAR_INT = int.MaxValue; foreach (Rule r in VAR_RULE[]) { VAR_INT = Math.Min(VAR_INT, r.m_min + r.m_suffix.Length); } } this.m_min = VAR_INT; if (VAR_STRING[] == LITERAL_NULL || VAR_STRING[].Length == LITERAL_INT) { this.m_suffixes = LITERAL_NULL; } else { this.m_suffixes = new char[VAR_STRING[].Length][]; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { this.m_suffixes[i] = VAR_STRING[][i].ToCharArray(); } } }
public virtual E METHOD_NAME(int VAR_INT, E VAR_E) { int VAR_INT = binarySearch(mKeys, LITERAL_INT, mSize, VAR_INT); if (VAR_INT < LITERAL_INT || mValues[VAR_INT] == DELETED) { return VAR_E; } else { return (E)mValues[VAR_INT]; } }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { if (VAR_VALUEEVAL[].Length != LITERAL_INT) { return ErrorEval.VALUE_INVALID; } return METHOD_NAME(VAR_INT, VAR_INT); }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT, int VAR_INT, int VAR_INT) { State = VAR_INT; _precedenceStack.Add(VAR_INT); _ctx = VAR_PARSERRULECONTEXT; _ctx.Start = _input.LT(LITERAL_INT); if (_parseListeners != LITERAL_NULL) { TriggerEnterRuleEvent(); } }
public virtual IncreaseNodeGroupsInGlobalReplicationGroupResponse METHOD_NAME(IncreaseNodeGroupsInGlobalReplicationGroupRequest VAR_INCREASENODEGROUPSINGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<IncreaseNodeGroupsInGlobalReplicationGroupResponse>(VAR_INCREASENODEGROUPSINGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public static String METHOD_NAME(String VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING.Length + LITERAL_INT); AppendFormat(VAR_STRINGBUILDER, VAR_STRING); return VAR_STRINGBUILDER.ToString(); }
public virtual DescribeTerminationPolicyTypesResponse METHOD_NAME(DescribeTerminationPolicyTypesRequest VAR_DESCRIBETERMINATIONPOLICYTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTerminationPolicyTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTerminationPolicyTypesResponseUnmarshaller.Instance; return Invoke<DescribeTerminationPolicyTypesResponse>(VAR_DESCRIBETERMINATIONPOLICYTYPESREQUEST, VAR_VAR); }
public virtual DescribeScheduledActionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeScheduledActionsRequest()); }
public virtual bool METHOD_NAME(int VAR_INT, int VAR_INT) { for (; VAR_INT < VAR_INT; VAR_INT++) { if (sourceLines[VAR_INT] == LITERAL_INT) { return false; } } return true; }
public virtual ListImportsResponse METHOD_NAME(ListImportsRequest VAR_LISTIMPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListImportsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListImportsResponseUnmarshaller.Instance; return Invoke<ListImportsResponse>(VAR_LISTIMPORTSREQUEST, VAR_VAR); }
public virtual DescribeInterconnectsResponse METHOD_NAME() { return METHOD_NAME(new DescribeInterconnectsRequest()); }
public virtual DeleteEventSubscriptionResponse METHOD_NAME(DeleteEventSubscriptionRequest VAR_DELETEEVENTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventSubscriptionResponseUnmarshaller.Instance; return Invoke<DeleteEventSubscriptionResponse>(VAR_DELETEEVENTSUBSCRIPTIONREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); int VAR_INT = _thedata.Length; LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT); Array.Copy(_thedata, LITERAL_INT, VAR_BYTE[], VAR_INT + LITERAL_INT, _thedata.Length); int VAR_INT = VAR_INT + LITERAL_INT + _thedata.Length; VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); int VAR_INT = VAR_INT - VAR_INT; if (VAR_INT != RecordSize) throw new RecordFormatException(VAR_INT + LITERAL_STRING + RecordSize); return VAR_INT; }
public override void METHOD_NAME(int VAR_INT) { lock (@lock) { expand(LITERAL_INT); buf[count++] = (char)VAR_INT; } }
public DeletedRef3DPtg(int VAR_INT) { field_1_index_extern_sheet = VAR_INT; unused1 = LITERAL_INT; }
public IndexUpgrader(Directory VAR_DIRECTORY, IndexWriterConfig VAR_INDEXWRITERCONFIG, bool VAR_BOOL) { this.VAR_DIRECTORY = VAR_DIRECTORY; this.VAR_INDEXWRITERCONFIG = VAR_INDEXWRITERCONFIG; this.VAR_BOOL = VAR_BOOL; }
public DetachVpnGatewayRequest(string VAR_STRING, string VAR_STRING) { _vpnGatewayId = VAR_STRING; _vpcId = VAR_STRING; }
public RebootInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public virtual E METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public virtual DescribeInstanceAttributeResponse METHOD_NAME(DescribeInstanceAttributeRequest VAR_DESCRIBEINSTANCEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstanceAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstanceAttributeResponseUnmarshaller.Instance; return Invoke<DescribeInstanceAttributeResponse>(VAR_DESCRIBEINSTANCEATTRIBUTEREQUEST, VAR_VAR); }
public void METHOD_NAME(ICellStyle VAR_ICELLSTYLE) { if (VAR_ICELLSTYLE is HSSFCellStyle) { this.METHOD_NAME((HSSFCellStyle)VAR_ICELLSTYLE); } else { throw new ArgumentException(LITERAL_STRING); } }
public virtual string METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual GetDataEndpointResponse METHOD_NAME(GetDataEndpointRequest VAR_GETDATAENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDataEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDataEndpointResponseUnmarshaller.Instance; return Invoke<GetDataEndpointResponse>(VAR_GETDATAENDPOINTREQUEST, VAR_VAR); }
public virtual AddApplicationOutputResponse METHOD_NAME(AddApplicationOutputRequest VAR_ADDAPPLICATIONOUTPUTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddApplicationOutputRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddApplicationOutputResponseUnmarshaller.Instance; return Invoke<AddApplicationOutputResponse>(VAR_ADDAPPLICATIONOUTPUTREQUEST, VAR_VAR); }
public LargeObjectException(AnyObjectId VAR_ANYOBJECTID) { SetObjectId(VAR_ANYOBJECTID); }
public virtual void METHOD_NAME() { if (n < array.Length) { char[] VAR_CHAR[] = new char[n]; System.Array.Copy(array, LITERAL_INT, VAR_CHAR[], LITERAL_INT, n); array = VAR_CHAR[]; } }
public virtual UpdateFacetResponse METHOD_NAME(UpdateFacetRequest VAR_UPDATEFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFacetResponseUnmarshaller.Instance; return Invoke<UpdateFacetResponse>(VAR_UPDATEFACETREQUEST, VAR_VAR); }
public DeleteDomainRequest(string VAR_STRING) { _domainName = VAR_STRING; }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId, surfaceForm, offset, length); }
public override java.nio.FloatBuffer METHOD_NAME() { System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining()); _position = _limit - _position; _limit = _capacity; _mark = UNSET_MARK; return this; }
public override string METHOD_NAME() { return base.METHOD_NAME(); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { EnsureCapacity(VAR_LONG); current.METHOD_NAME(VAR_INT, VAR_LONG); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { String VAR_STRING = Username; bool VAR_BOOL = StringUtil.HasMultibyte(VAR_STRING); VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_STRING.Length); VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_BOOL ? LITERAL_INT : LITERAL_INT); if (VAR_BOOL) { StringUtil.PutUnicodeLE(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(VAR_STRING, VAR_ILITTLEENDIANOUTPUT); } int VAR_INT = LITERAL_INT + VAR_STRING.Length * (VAR_BOOL ? LITERAL_INT : LITERAL_INT); int VAR_INT = DATA_SIZE - VAR_INT; VAR_ILITTLEENDIANOUTPUT.Write(PADDING, LITERAL_INT, VAR_INT); }
public new bool METHOD_NAME() { return false; }
public ListJobsRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public SheetRefEvaluator METHOD_NAME(int VAR_INT) { if (VAR_INT < _firstSheetIndex || VAR_INT > _lastSheetIndex) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + _firstSheetIndex + LITERAL_STRING + _lastSheetIndex); } return _sheetEvaluators[VAR_INT - _firstSheetIndex]; }
public static string[] METHOD_NAME(string VAR_STRING) { IList<string> VAR_ILIST<STRING> = new List<string>(); int VAR_INT = VAR_STRING.Length; if (VAR_INT == LITERAL_INT) { return new string[LITERAL_INT]; } char[] VAR_CHAR[] = new char[VAR_INT]; int VAR_INT = LITERAL_INT; bool VAR_BOOL = false; for (int i = LITERAL_INT; i < VAR_INT; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_BOOL) { VAR_CHAR[][VAR_INT++] = VAR_CHAR; VAR_BOOL = false; } else if (VAR_CHAR == ESCAPE_CHAR) { VAR_BOOL = true; } else if (VAR_CHAR == DELIM_CHAR) { VAR_ILIST<STRING>.Add(new string (VAR_CHAR[], LITERAL_INT, VAR_INT)); VAR_INT = LITERAL_INT; } else { VAR_CHAR[][VAR_INT++] = VAR_CHAR; } } VAR_ILIST<STRING>.Add(new string (VAR_CHAR[], LITERAL_INT, VAR_INT)); Debug.Assert(!VAR_BOOL); return VAR_ILIST<STRING>.ToArray(); }
public virtual CreateDirectConnectGatewayResponse METHOD_NAME(CreateDirectConnectGatewayRequest VAR_CREATEDIRECTCONNECTGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDirectConnectGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDirectConnectGatewayResponseUnmarshaller.Instance; return Invoke<CreateDirectConnectGatewayResponse>(VAR_CREATEDIRECTCONNECTGATEWAYREQUEST, VAR_VAR); }
public virtual GetMLModelResponse METHOD_NAME(GetMLModelRequest VAR_GETMLMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMLModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMLModelResponseUnmarshaller.Instance; return Invoke<GetMLModelResponse>(VAR_GETMLMODELREQUEST, VAR_VAR); }
public bool METHOD_NAME() { if (Bytes == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } if (Length < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING + Length); } if (Length > Bytes.Length) { throw new InvalidOperationException(LITERAL_STRING + Length + LITERAL_STRING + Bytes.Length); } if (Offset < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING + Offset); } if (Offset > Bytes.Length) { throw new InvalidOperationException(LITERAL_STRING + Offset + LITERAL_STRING + Bytes.Length); } if (Offset + Length < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING + Offset + LITERAL_STRING + Length); } if (Offset + Length > Bytes.Length) { throw new InvalidOperationException(LITERAL_STRING + Offset + LITERAL_STRING + Length + LITERAL_STRING + Bytes.Length); } return true; }
public override string METHOD_NAME() { return Name; }
public virtual DescribeIAMPolicyAssignmentResponse METHOD_NAME(DescribeIAMPolicyAssignmentRequest VAR_DESCRIBEIAMPOLICYASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIAMPolicyAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIAMPolicyAssignmentResponseUnmarshaller.Instance; return Invoke<DescribeIAMPolicyAssignmentResponse>(VAR_DESCRIBEIAMPOLICYASSIGNMENTREQUEST, VAR_VAR); }
protected internal virtual bool METHOD_NAME() { return refLogIncludeResult; }
public virtual DeleteStreamingDistributionResponse METHOD_NAME(DeleteStreamingDistributionRequest VAR_DELETESTREAMINGDISTRIBUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteStreamingDistributionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteStreamingDistributionResponseUnmarshaller.Instance; return Invoke<DeleteStreamingDistributionResponse>(VAR_DELETESTREAMINGDISTRIBUTIONREQUEST, VAR_VAR); }
public RawSubStringPattern(string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().cannotMatchOnEmptyString); } needleString = VAR_STRING; byte[] VAR_BYTE[] = Constants.Encode(VAR_STRING); needle = new byte[VAR_BYTE[].Length]; for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { needle[i] = Lc(VAR_BYTE[][i]); } }
public virtual ListRulesResponse METHOD_NAME(ListRulesRequest VAR_LISTRULESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRulesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRulesResponseUnmarshaller.Instance; return Invoke<ListRulesResponse>(VAR_LISTRULESREQUEST, VAR_VAR); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual SendMessageResponse METHOD_NAME(string VAR_STRING, string VAR_STRING) { var VAR_VAR = new SendMessageRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.MessageBody = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public static double METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME, false); }
public override string METHOD_NAME() { return markedUpText.METHOD_NAME(TextStartPos, TextEndPos - TextStartPos); }
public virtual ModifyInstancePlacementResponse METHOD_NAME(ModifyInstancePlacementRequest VAR_MODIFYINSTANCEPLACEMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstancePlacementRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstancePlacementResponseUnmarshaller.Instance; return Invoke<ModifyInstancePlacementResponse>(VAR_MODIFYINSTANCEPLACEMENTREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING, Dictionary<string, string> VAR_DICTIONARY<STRING, STRING>) { var VAR_VAR = VAR_STRING; foreach (var entry in VAR_DICTIONARY<STRING, STRING>) { var VAR_VAR = entry.Key; var VAR_VAR = entry.Value; var VAR_VAR = LITERAL_STRING + VAR_VAR + LITERAL_STRING; VAR_VAR = VAR_VAR.Replace(VAR_VAR, VAR_VAR); } return VAR_VAR; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public DeleteMetricFilterRequest(string VAR_STRING, string VAR_STRING) { _logGroupName = VAR_STRING; _filterName = VAR_STRING; }
public virtual char METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual DescribeInstanceStatusResponse METHOD_NAME(DescribeInstanceStatusRequest VAR_DESCRIBEINSTANCESTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstanceStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstanceStatusResponseUnmarshaller.Instance; return Invoke<DescribeInstanceStatusResponse>(VAR_DESCRIBEINSTANCESTATUSREQUEST, VAR_VAR); }
public virtual BatchDeleteAttributesResponse METHOD_NAME(BatchDeleteAttributesRequest VAR_BATCHDELETEATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDeleteAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDeleteAttributesResponseUnmarshaller.Instance; return Invoke<BatchDeleteAttributesResponse>(VAR_BATCHDELETEATTRIBUTESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.fieldName + LITERAL_STRING + base.METHOD_NAME() + LITERAL_STRING; }
public virtual ListDeploymentGroupsResponse METHOD_NAME(ListDeploymentGroupsRequest VAR_LISTDEPLOYMENTGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeploymentGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeploymentGroupsResponseUnmarshaller.Instance; return Invoke<ListDeploymentGroupsResponse>(VAR_LISTDEPLOYMENTGROUPSREQUEST, VAR_VAR); }
public CellGeneralFormatter() : base(LITERAL_STRING) { ; }
public BloomFilteredTerms(Terms VAR_TERMS, FuzzySet VAR_FUZZYSET) { _delegateTerms = VAR_TERMS; _filter = VAR_FUZZYSET; }
public virtual int METHOD_NAME(int VAR_INT) { return bytes[VAR_INT].Bits; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerChannelAction)) { return false; } } return channel == ((Antlr4.Runtime.Atn.LexerChannelAction)VAR_OBJECT).channel; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(Value); }
public virtual ExecuteChangeSetResponse METHOD_NAME(ExecuteChangeSetRequest VAR_EXECUTECHANGESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExecuteChangeSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExecuteChangeSetResponseUnmarshaller.Instance; return Invoke<ExecuteChangeSetResponse>(VAR_EXECUTECHANGESETREQUEST, VAR_VAR); }
public virtual StartInstanceResponse METHOD_NAME(StartInstanceRequest VAR_STARTINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartInstanceResponseUnmarshaller.Instance; return Invoke<StartInstanceResponse>(VAR_STARTINSTANCEREQUEST, VAR_VAR); }
public CapitalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); bool VAR_BOOL = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, KEEP_IGNORE_CASE, false); ICollection<string> VAR_ICOLLECTION<STRING> = GetSet(VAR_IDICTIONARY<STRING, STRING>, KEEP); if (VAR_ICOLLECTION<STRING> != LITERAL_NULL) { keep = new CharArraySet(m_luceneMatchVersion, LITERAL_INT, VAR_BOOL); keep.UnionWith(VAR_ICOLLECTION<STRING>); } VAR_ICOLLECTION<STRING> = GetSet(VAR_IDICTIONARY<STRING, STRING>, OK_PREFIX); if (VAR_ICOLLECTION<STRING> != LITERAL_NULL) { okPrefix = new List<char[]>(); foreach (string item in VAR_ICOLLECTION<STRING>) { okPrefix.Add(item.ToCharArray()); } } minWordLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, MIN_WORD_LENGTH, LITERAL_INT); maxWordCount = GetInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT); maxTokenLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); onlyFirstWord = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, ONLY_FIRST_WORD, true); forceFirstLetter = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, FORCE_FIRST_LETTER, true); culture = GetCulture(VAR_IDICTIONARY<STRING, STRING>, CULTURE, LITERAL_NULL); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public static long[] METHOD_NAME(long[] VAR_LONG[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_LONG[], LITERAL_INT, VAR_INT); }
public override string METHOD_NAME() { return this.@ref.METHOD_NAME(); }
public virtual ListNetworksResponse METHOD_NAME(ListNetworksRequest VAR_LISTNETWORKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNetworksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNetworksResponseUnmarshaller.Instance; return Invoke<ListNetworksResponse>(VAR_LISTNETWORKSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL = VAR_VALUEEVAL; if (VAR_VALUEEVAL is RefEval) { RefEval VAR_REFEVAL = (RefEval)VAR_VALUEEVAL; VAR_VALUEEVAL = VAR_REFEVAL.GetInnerValueEval(VAR_REFEVAL.FirstSheetIndex); } else if (VAR_VALUEEVAL is AreaEval) { VAR_VALUEEVAL = ((AreaEval)VAR_VALUEEVAL).GetRelativeValue(LITERAL_INT, LITERAL_INT); } if (VAR_VALUEEVAL is StringEval) { return VAR_VALUEEVAL; } if (VAR_VALUEEVAL is ErrorEval) { return VAR_VALUEEVAL; } return StringEval.EMPTY_INSTANCE; }
public virtual StopNotebookInstanceResponse METHOD_NAME(StopNotebookInstanceRequest VAR_STOPNOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopNotebookInstanceResponseUnmarshaller.Instance; return Invoke<StopNotebookInstanceResponse>(VAR_STOPNOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, short VAR_SHORT) { if (VAR_INT > VAR_INT) throw new ArgumentException(LITERAL_STRING); if (VAR_INT < LITERAL_INT || VAR_INT > Length) throw new ArgumentException(LITERAL_STRING); if (VAR_INT == VAR_INT) return; short VAR_SHORT = NO_FONT; if (VAR_INT != Length) { VAR_SHORT = this.GetFontAtIndex(VAR_INT); } _string = CloneStringIfRequired(); System.Collections.Generic.List<UnicodeString.FormatRun> VAR_SYSTEM.COLLECTIONS.GENERIC.LIST<UNICODESTRING.FORMATRUN> = _string.FormatIterator(); ArrayList VAR_ARRAYLIST = new ArrayList(); if (VAR_SYSTEM.COLLECTIONS.GENERIC.LIST<UNICODESTRING.FORMATRUN> != LITERAL_NULL) { IEnumerator<UnicodeString.FormatRun> VAR_IENUMERATOR<UNICODESTRING.FORMATRUN> = VAR_SYSTEM.COLLECTIONS.GENERIC.LIST<UNICODESTRING.FORMATRUN>.GetEnumerator(); while (VAR_IENUMERATOR<UNICODESTRING.FORMATRUN>.MoveNext()) { UnicodeString.FormatRun VAR_UNICODESTRING.FORMATRUN = VAR_IENUMERATOR<UNICODESTRING.FORMATRUN>.Current; if ((VAR_UNICODESTRING.FORMATRUN.CharacterPos >= VAR_INT) && (VAR_UNICODESTRING.FORMATRUN.CharacterPos < VAR_INT)) { VAR_ARRAYLIST.Add(VAR_UNICODESTRING.FORMATRUN); } } } foreach (UnicodeString.FormatRun fr in VAR_ARRAYLIST) { _string.RemoveFormatRun(fr); } _string.AddFormatRun(new UnicodeString.FormatRun((short)VAR_INT, VAR_SHORT)); if (VAR_INT != Length) _string.AddFormatRun(new UnicodeString.FormatRun((short)VAR_INT, VAR_SHORT)); AddToSSTIfRequired(); }
public virtual int METHOD_NAME() { throw new System.NotImplementedException(); }
public override Iterable<RevCommit> METHOD_NAME() { CheckCallable(); if (pathFilters.Count > LITERAL_INT) { walk.SetTreeFilter(AndTreeFilter.Create(PathFilterGroup.Create(pathFilters), TreeFilter.ANY_DIFF)); } if (skip > -LITERAL_INT && maxCount > -LITERAL_INT) { walk.SetRevFilter(AndRevFilter.Create(SkipRevFilter.Create(skip), MaxCountRevFilter.Create(maxCount))); } else { if (skip > -LITERAL_INT) { walk.SetRevFilter(SkipRevFilter.Create(skip)); } else { if (maxCount > -LITERAL_INT) { walk.SetRevFilter(MaxCountRevFilter.Create(maxCount)); } } } if (!startSpecified) { try { ObjectId VAR_OBJECTID = repo.Resolve(Constants.HEAD); if (VAR_OBJECTID == LITERAL_NULL) { throw new NoHeadException(JGitText.Get().noHEADExistsAndNoExplicitStartingRevisionWasSpecified); } Add(VAR_OBJECTID); } catch (IOException e) { throw new JGitInternalException(JGitText.Get().anExceptionOccurredWhileTryingToAddTheIdOfHEAD, e); } } SetCallable(false); return walk; }
public HyphenationCompoundWordTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); dictFile = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); encoding = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); hypFile = Require(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); minWordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE); minSubwordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE); maxSubwordSize = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE); onlyLongestMatch = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DeleteTerminologyResponse METHOD_NAME(DeleteTerminologyRequest VAR_DELETETERMINOLOGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTerminologyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTerminologyResponseUnmarshaller.Instance; return Invoke<DeleteTerminologyResponse>(VAR_DELETETERMINOLOGYREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual GetObjectAttributesResponse METHOD_NAME(GetObjectAttributesRequest VAR_GETOBJECTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetObjectAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetObjectAttributesResponseUnmarshaller.Instance; return Invoke<GetObjectAttributesResponse>(VAR_GETOBJECTATTRIBUTESREQUEST, VAR_VAR); }
public override RevWalk METHOD_NAME() { throw new NotSupportedException(MessageFormat.Format(JGitText.Get().isAStaticFlagAndHasNorevWalkInstance, ToString())); }
public virtual DescribeKeyPairsResponse METHOD_NAME(DescribeKeyPairsRequest VAR_DESCRIBEKEYPAIRSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeKeyPairsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeKeyPairsResponseUnmarshaller.Instance; return Invoke<DescribeKeyPairsResponse>(VAR_DESCRIBEKEYPAIRSREQUEST, VAR_VAR); }
public virtual byte[] METHOD_NAME() { return Build(); }
public virtual void METHOD_NAME(int VAR_INT) { indexVersion = VAR_INT; }
public IgnoreNode() { rules = new AList<IgnoreRule>(); }
public virtual TreeFilter METHOD_NAME() { return NotTreeFilter.Create(this); }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF + LITERAL_INT * RamUsageEstimator.NUM_BYTES_INT32) + RamUsageEstimator.SizeOf(data) + positions.METHOD_NAME() + wordNums.METHOD_NAME(); }
public override string METHOD_NAME() { return Exists ? ToObject().METHOD_NAME() : LITERAL_STRING; }
public override int METHOD_NAME() { throw new System.NotImplementedException(); }
public UnicodeMapping(String VAR_STRING, String VAR_STRING) { entityName = LITERAL_STRING + VAR_STRING + LITERAL_STRING; resolvedValue = VAR_STRING; }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT; Break VAR_BREAK = (Break)_breakMap[VAR_INT]; _breaks.Remove(VAR_BREAK); _breakMap.Remove(VAR_INT); }
public override void METHOD_NAME(int VAR_INT, int VAR_INT) { CheckRange(VAR_INT, VAR_INT); if (VAR_INT - VAR_INT <= LITERAL_INT) { return; } Reset(VAR_INT, VAR_INT); do { EnsureInvariants(); PushRunLen(NextRun()); } while (RunEnd(LITERAL_INT) < VAR_INT); ExhaustStack(); Debug.Assert(RunEnd(LITERAL_INT) == VAR_INT); }
public virtual FilePath METHOD_NAME() { return directory; }
public PositionTrackingVisitor(RecordVisitor VAR_RECORDVISITOR, int VAR_INT) { _rv = VAR_RECORDVISITOR; _position = VAR_INT; }
public T METHOD_NAME() { return top; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(SheetName); if (lastSheetName != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(lastSheetName); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatReferenceAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual NGit.Api.SubmoduleSyncCommand METHOD_NAME(string VAR_STRING) { paths.AddItem(VAR_STRING); return this; }
public override int METHOD_NAME() { return this._enclosing._size; }
public DeleteNamespaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public GeoRestriction(GeoRestrictionType VAR_GEORESTRICTIONTYPE) { _restrictionType = VAR_GEORESTRICTIONTYPE; }
public RecognizeEntityRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT; VAR_INT = NB.CompareUInt32(w1, NB.DecodeInt32(VAR_BYTE[], VAR_INT)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, NB.DecodeInt32(VAR_BYTE[], VAR_INT + LITERAL_INT)); }
public SendMessageRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public SelectRequest(string VAR_STRING) { _selectExpression = VAR_STRING; }
public override Object METHOD_NAME() { TopMarginRecord VAR_TOPMARGINRECORD = new TopMarginRecord(); VAR_TOPMARGINRECORD.field_1_margin = this.field_1_margin; return VAR_TOPMARGINRECORD; }
public virtual GetStaticIpsResponse METHOD_NAME(GetStaticIpsRequest VAR_GETSTATICIPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetStaticIpsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetStaticIpsResponseUnmarshaller.Instance; return Invoke<GetStaticIpsResponse>(VAR_GETSTATICIPSREQUEST, VAR_VAR); }
StringBuilder VAR_STRINGBUILDER = new StringBuilder(); int VAR_INT = SectionCount; VAR_STRINGBUILDER.Append(GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ByteOrder); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ClassID); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Format); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(OSVersion); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_INT); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (Section section in Sections) { VAR_STRINGBUILDER.Append(section.METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME();
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { return VAR_INT; } int VAR_INT = VAR_INT; VAR_INT = Rule0(VAR_CHAR[], VAR_INT); VAR_INT = Rule1(VAR_CHAR[], VAR_INT); VAR_INT = Rule2(VAR_CHAR[], VAR_INT); VAR_INT = Rule3(VAR_CHAR[], VAR_INT); VAR_INT = Rule4(VAR_CHAR[], VAR_INT); VAR_INT = Rule5(VAR_CHAR[], VAR_INT); VAR_INT = Rule6(VAR_CHAR[], VAR_INT); VAR_INT = Rule7(VAR_CHAR[], VAR_INT); VAR_INT = Rule8(VAR_CHAR[], VAR_INT); VAR_INT = Rule9(VAR_CHAR[], VAR_INT); VAR_INT = Rule10(VAR_CHAR[], VAR_INT); VAR_INT = Rule11(VAR_CHAR[], VAR_INT); VAR_INT = Rule12(VAR_CHAR[], VAR_INT); VAR_INT = Rule13(VAR_CHAR[], VAR_INT); VAR_INT = Rule14(VAR_CHAR[], VAR_INT); VAR_INT = Rule15(VAR_CHAR[], VAR_INT); VAR_INT = Rule16(VAR_CHAR[], VAR_INT); VAR_INT = Rule17(VAR_CHAR[], VAR_INT); VAR_INT = Rule18(VAR_CHAR[], VAR_INT); VAR_INT = Rule19(VAR_CHAR[], VAR_INT); VAR_INT = Rule20(VAR_CHAR[], VAR_INT); if (VAR_INT == VAR_INT) { VAR_INT = Rule21(VAR_CHAR[], VAR_INT); } return Rule22(VAR_CHAR[], VAR_INT); }
public virtual CreateStreamingURLResponse METHOD_NAME(CreateStreamingURLRequest VAR_CREATESTREAMINGURLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStreamingURLRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStreamingURLResponseUnmarshaller.Instance; return Invoke<CreateStreamingURLResponse>(VAR_CREATESTREAMINGURLREQUEST, VAR_VAR); }
public IBSimilarity(Distribution VAR_DISTRIBUTION, Lambda VAR_LAMBDA, Normalization VAR_NORMALIZATION) { this.m_distribution = VAR_DISTRIBUTION; this.m_lambda = VAR_LAMBDA; this.m_normalization = VAR_NORMALIZATION; }
public virtual GetBatchPredictionResponse METHOD_NAME(GetBatchPredictionRequest VAR_GETBATCHPREDICTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBatchPredictionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBatchPredictionResponseUnmarshaller.Instance; return Invoke<GetBatchPredictionResponse>(VAR_GETBATCHPREDICTIONREQUEST, VAR_VAR); }
public virtual StartInstancesResponse METHOD_NAME(StartInstancesRequest VAR_STARTINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartInstancesResponseUnmarshaller.Instance; return Invoke<StartInstancesResponse>(VAR_STARTINSTANCESREQUEST, VAR_VAR); }
public virtual DescribeLoadBalancerAttributesResponse METHOD_NAME(DescribeLoadBalancerAttributesRequest VAR_DESCRIBELOADBALANCERATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoadBalancerAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<DescribeLoadBalancerAttributesResponse>(VAR_DESCRIBELOADBALANCERATTRIBUTESREQUEST, VAR_VAR); }
public Filter(int VAR_INT, long VAR_LONG, InputStream VAR_INPUTSTREAM) { this.VAR_INT = VAR_INT; this.VAR_LONG = VAR_LONG; this.VAR_INPUTSTREAM = VAR_INPUTSTREAM; }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId, surfaceForm, offset, length); }
public virtual Search.Query METHOD_NAME(BasicQueryFactory VAR_BASICQUERYFACTORY) { if (fieldNames.Count == LITERAL_INT) { return q.MakeLuceneQueryFieldNoBoost(fieldNames.FirstOrDefault(), VAR_BASICQUERYFACTORY); } else { List<SrndQuery> VAR_LIST<SRNDQUERY> = new List<SrndQuery>(); foreach (var fieldName in fieldNames) { var VAR_VAR = (SrndQuery)q.Clone(); VAR_LIST<SRNDQUERY>.Add(new FieldsQuery(VAR_VAR, fieldName, fieldOp)); } OrQuery VAR_ORQUERY = new OrQuery(VAR_LIST<SRNDQUERY>, true, orOperatorName); return VAR_ORQUERY.MakeLuceneQueryField(LITERAL_NULL, VAR_BASICQUERYFACTORY); } }
public virtual SetVisibleToAllUsersResponse METHOD_NAME(SetVisibleToAllUsersRequest VAR_SETVISIBLETOALLUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetVisibleToAllUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetVisibleToAllUsersResponseUnmarshaller.Instance; return Invoke<SetVisibleToAllUsersResponse>(VAR_SETVISIBLETOALLUSERSREQUEST, VAR_VAR); }
public virtual GetBotResponse METHOD_NAME(GetBotRequest VAR_GETBOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBotResponseUnmarshaller.Instance; return Invoke<GetBotResponse>(VAR_GETBOTREQUEST, VAR_VAR); }
public virtual UpdateApnsSandboxChannelResponse METHOD_NAME(UpdateApnsSandboxChannelRequest VAR_UPDATEAPNSSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApnsSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApnsSandboxChannelResponseUnmarshaller.Instance; return Invoke<UpdateApnsSandboxChannelResponse>(VAR_UPDATEAPNSSANDBOXCHANNELREQUEST, VAR_VAR); }
public virtual CreateRouteResponse METHOD_NAME(CreateRouteRequest VAR_CREATEROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRouteResponseUnmarshaller.Instance; return Invoke<CreateRouteResponse>(VAR_CREATEROUTEREQUEST, VAR_VAR); }
public override FreeRefFunction METHOD_NAME(String VAR_STRING) { FreeRefFunction VAR_FREEREFFUNCTION = base.METHOD_NAME(VAR_STRING); if (VAR_FREEREFFUNCTION != LITERAL_NULL) { int VAR_INT = GetFunctionIndex(VAR_STRING); _funcMap[VAR_INT] = VAR_STRING; } return VAR_FREEREFFUNCTION; }
public virtual bool METHOD_NAME() { return value == minValue; }
public virtual TerminateInstanceInAutoScalingGroupResponse METHOD_NAME(TerminateInstanceInAutoScalingGroupRequest VAR_TERMINATEINSTANCEINAUTOSCALINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TerminateInstanceInAutoScalingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TerminateInstanceInAutoScalingGroupResponseUnmarshaller.Instance; return Invoke<TerminateInstanceInAutoScalingGroupResponse>(VAR_TERMINATEINSTANCEINAUTOSCALINGGROUPREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(this.Options).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(this.HorizontalPos).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(this.VerticalPos).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(this.ObjectID)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(this.DVRecNo)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static Token METHOD_NAME(int VAR_INT, string VAR_STRING) { switch (VAR_INT) { default: return new Token(VAR_INT, VAR_STRING); } }
public ATNConfig(ATNState VAR_ATNSTATE, int VAR_INT, PredictionContext VAR_PREDICTIONCONTEXT, SemanticContext VAR_SEMANTICCONTEXT) { this.VAR_ATNSTATE = VAR_ATNSTATE; this.VAR_INT = VAR_INT; this.VAR_PREDICTIONCONTEXT = VAR_PREDICTIONCONTEXT; this.VAR_SEMANTICCONTEXT = VAR_SEMANTICCONTEXT; }
public IDataValidationConstraint METHOD_NAME(String VAR_STRING) { return DVConstraint.METHOD_NAME(VAR_STRING); }
public virtual FailoverGlobalReplicationGroupResponse METHOD_NAME(FailoverGlobalReplicationGroupRequest VAR_FAILOVERGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = FailoverGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = FailoverGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<FailoverGlobalReplicationGroupResponse>(VAR_FAILOVERGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public virtual BatchPutAttributesResponse METHOD_NAME(BatchPutAttributesRequest VAR_BATCHPUTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchPutAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchPutAttributesResponseUnmarshaller.Instance; return Invoke<BatchPutAttributesResponse>(VAR_BATCHPUTATTRIBUTESREQUEST, VAR_VAR); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_INT & LITERAL_INT; int VAR_INT = VAR_INT << LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER) { return index; }
public int METHOD_NAME(object VAR_OBJECT) { bool VAR_BOOL; int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; object VAR_OBJECT; VAR_INT = VAR_INT = findIndex(VAR_OBJECT, keys); if (keys[VAR_INT] != VAR_OBJECT) { return -LITERAL_INT; } VAR_INT = values[VAR_INT]; int VAR_INT = keys.Length; while (true) { VAR_INT = (VAR_INT + LITERAL_INT) % VAR_INT; VAR_OBJECT = keys[VAR_INT]; if (VAR_OBJECT == LITERAL_NULL) { break; } VAR_INT = getModuloHash(VAR_OBJECT, VAR_INT); VAR_BOOL = VAR_INT > VAR_INT; if (VAR_INT < VAR_INT) { VAR_BOOL = VAR_BOOL || (VAR_INT <= VAR_INT); } else { VAR_BOOL = VAR_BOOL && (VAR_INT <= VAR_INT); } if (!VAR_BOOL) { keys[VAR_INT] = VAR_OBJECT; values[VAR_INT] = values[VAR_INT]; VAR_INT = VAR_INT; } } size--; keys[VAR_INT] = LITERAL_NULL; values[VAR_INT] = -LITERAL_INT; return VAR_INT; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_INT > VAR_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT, VAR_DOUBLE[].Length); }
public ICollection<Ref> METHOD_NAME() { return advertisedRefs.Values; }
public DocFreqValueSource(string VAR_STRING, string VAR_STRING, string VAR_STRING, BytesRef VAR_BYTESREF) { this.m_field = VAR_STRING; this.m_val = VAR_STRING; this.m_indexedField = VAR_STRING; this.m_indexedBytes = VAR_BYTESREF; }
public string METHOD_NAME() { return IndexFileNames.FileNameFromGeneration(IndexFileNames.SEGMENTS, LITERAL_STRING, lastGeneration); }
public Listener(string VAR_STRING, int VAR_INT, int VAR_INT) { _protocol = VAR_STRING; _loadBalancerPort = VAR_INT; _instancePort = VAR_INT; }
public virtual GetCurrentUserResponse METHOD_NAME(GetCurrentUserRequest VAR_GETCURRENTUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCurrentUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCurrentUserResponseUnmarshaller.Instance; return Invoke<GetCurrentUserResponse>(VAR_GETCURRENTUSERREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + GetDirectory() + LITERAL_STRING; }
public IllegalFormatWidthException(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual string METHOD_NAME() { return this.token; }
public virtual UpdatePhoneNumberResponse METHOD_NAME(UpdatePhoneNumberRequest VAR_UPDATEPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePhoneNumberResponseUnmarshaller.Instance; return Invoke<UpdatePhoneNumberResponse>(VAR_UPDATEPHONENUMBERREQUEST, VAR_VAR); }
public IIndexableField METHOD_NAME(string VAR_STRING) { foreach (IIndexableField field in fields) { if (field.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { return field; } } return LITERAL_NULL; }
public virtual DisableDomainTransferLockResponse METHOD_NAME(DisableDomainTransferLockRequest VAR_DISABLEDOMAINTRANSFERLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableDomainTransferLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableDomainTransferLockResponseUnmarshaller.Instance; return Invoke<DisableDomainTransferLockResponse>(VAR_DISABLEDOMAINTRANSFERLOCKREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { PrintHeadersRecord VAR_PRINTHEADERSRECORD = new PrintHeadersRecord(); VAR_PRINTHEADERSRECORD.field_1_print_headers = field_1_print_headers; return VAR_PRINTHEADERSRECORD; }
public virtual UpdateDataSourceResponse METHOD_NAME(UpdateDataSourceRequest VAR_UPDATEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDataSourceResponseUnmarshaller.Instance; return Invoke<UpdateDataSourceResponse>(VAR_UPDATEDATASOURCEREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { if (_modeStack.Count == LITERAL_INT) { throw new InvalidOperationException(); } int VAR_INT = _modeStack.Pop(); Mode(VAR_INT); return _mode; }
public ExternalSheet METHOD_NAME(int VAR_INT) { ExternalSheet VAR_EXTERNALSHEET = _iBook.METHOD_NAME(VAR_INT); if (VAR_EXTERNALSHEET == LITERAL_NULL) { int VAR_INT = ConvertFromExternSheetIndex(VAR_INT); if (VAR_INT == -LITERAL_INT) { return LITERAL_NULL; } if (VAR_INT == -LITERAL_INT) { return LITERAL_NULL; } String VAR_STRING = GetSheetName(VAR_INT); int VAR_INT = _iBook.GetLastSheetIndexFromExternSheetIndex(VAR_INT); if (VAR_INT == VAR_INT) { VAR_EXTERNALSHEET = new ExternalSheet(LITERAL_NULL, VAR_STRING); } else { String VAR_STRING = GetSheetName(VAR_INT); VAR_EXTERNALSHEET = new ExternalSheetRange(LITERAL_NULL, VAR_STRING, VAR_STRING); } } return VAR_EXTERNALSHEET; }
public static NGit.Notes.NoteMap METHOD_NAME() { NGit.Notes.NoteMap VAR_NGIT.NOTES.NOTEMAP = new NGit.Notes.NoteMap(LITERAL_NULL); VAR_NGIT.NOTES.NOTEMAP.root = new LeafBucket(LITERAL_INT); return VAR_NGIT.NOTES.NOTEMAP; }
public virtual object[] METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public virtual NGit.Api.TagCommand METHOD_NAME(RevObject VAR_REVOBJECT) { this.VAR_REVOBJECT = VAR_REVOBJECT; return this; }
public static void METHOD_NAME() { cache.ClearAll(); }
public int METHOD_NAME(int[] VAR_INT[], int VAR_INT) { int VAR_INT; VAR_INT = NB.CompareUInt32(w1, Mask(LITERAL_INT, VAR_INT[][VAR_INT])); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, Mask(LITERAL_INT, VAR_INT[][VAR_INT + LITERAL_INT])); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, Mask(LITERAL_INT, VAR_INT[][VAR_INT + LITERAL_INT])); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, Mask(LITERAL_INT, VAR_INT[][VAR_INT + LITERAL_INT])); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, Mask(LITERAL_INT, VAR_INT[][VAR_INT + LITERAL_INT])); }
public override java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).METHOD_NAME(VAR_LONG[], VAR_INT, VAR_INT); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).METHOD_NAME(VAR_LONG[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public MoPenDeleteGroupRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual ApplyResult METHOD_NAME(FilePath VAR_FILEPATH) { updatedFiles.AddItem(VAR_FILEPATH); return this; }
public virtual T METHOD_NAME(T VAR_T) { if (size < maxSize) { Add(VAR_T); return default(T); } else if (size > LITERAL_INT && !LessThan(VAR_T, heap[LITERAL_INT])) { T VAR_T = heap[LITERAL_INT]; heap[LITERAL_INT] = VAR_T; UpdateTop(); return VAR_T; } else { return VAR_T; } }
public virtual bool METHOD_NAME(object VAR_OBJECT) { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = iterator(); if (VAR_OBJECT != LITERAL_NULL) { while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { if (VAR_OBJECT.Equals(VAR_JAVA.UTIL.ITERATOR<E>.next())) { return true; } } } else { while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { if ((object)VAR_JAVA.UTIL.ITERATOR<E>.next() == LITERAL_NULL) { return true; } } } return false; }
public virtual UploadDocumentsResponse METHOD_NAME(UploadDocumentsRequest VAR_UPLOADDOCUMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UploadDocumentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UploadDocumentsResponseUnmarshaller.Instance; return Invoke<UploadDocumentsResponse>(VAR_UPLOADDOCUMENTSREQUEST, VAR_VAR); }
public string METHOD_NAME() { return legacyCredential.AccessKeyId; }
public static string METHOD_NAME(short VAR_SHORT) { return METHOD_NAME((long)VAR_SHORT, LITERAL_INT); }
public virtual string METHOD_NAME(IToken VAR_ITOKEN, IToken VAR_ITOKEN) { if (VAR_ITOKEN != LITERAL_NULL && VAR_ITOKEN != LITERAL_NULL) { return METHOD_NAME(Interval.Of(VAR_ITOKEN.TokenIndex, VAR_ITOKEN.TokenIndex)); } return string.Empty; }
public static ValueVector METHOD_NAME(TwoDEval VAR_TWODEVAL, int VAR_INT) { return new ColumnVector((AreaEval)VAR_TWODEVAL, VAR_INT); }
public virtual AcceptDomainTransferFromAnotherAwsAccountResponse METHOD_NAME(AcceptDomainTransferFromAnotherAwsAccountRequest VAR_ACCEPTDOMAINTRANSFERFROMANOTHERAWSACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller.Instance; return Invoke<AcceptDomainTransferFromAnotherAwsAccountResponse>(VAR_ACCEPTDOMAINTRANSFERFROMANOTHERAWSACCOUNTREQUEST, VAR_VAR); }
public virtual StartDeviceSyncResponse METHOD_NAME(StartDeviceSyncRequest VAR_STARTDEVICESYNCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDeviceSyncRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDeviceSyncResponseUnmarshaller.Instance; return Invoke<StartDeviceSyncResponse>(VAR_STARTDEVICESYNCREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this.isInBounds(VAR_OBJECT) && this._enclosing.METHOD_NAME(VAR_OBJECT); }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public virtual DescribeWorkspacesResponse METHOD_NAME() { var VAR_VAR = new DescribeWorkspacesRequest(); return METHOD_NAME(VAR_VAR); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual RemoveFromGlobalClusterResponse METHOD_NAME(RemoveFromGlobalClusterRequest VAR_REMOVEFROMGLOBALCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveFromGlobalClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveFromGlobalClusterResponseUnmarshaller.Instance; return Invoke<RemoveFromGlobalClusterResponse>(VAR_REMOVEFROMGLOBALCLUSTERREQUEST, VAR_VAR); }
public virtual IDictionary<string, MergeResult<Sequence>> METHOD_NAME() { return mergeResults; }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = ParseBase10(VAR_BYTE[], VAR_INT, LITERAL_NULL); int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT / LITERAL_INT; return VAR_INT * LITERAL_INT + VAR_INT; }
public override string METHOD_NAME() { lock (this._enclosing) { return base.METHOD_NAME(); } }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public override FS METHOD_NAME() { return new NGit.Util.FS_Win32(this); }
public virtual byte[] METHOD_NAME() { if (buf != LITERAL_NULL) { byte[] VAR_BYTE[] = new byte[ptr]; System.Array.Copy(buf, LITERAL_INT, VAR_BYTE[], LITERAL_INT, ptr); return VAR_BYTE[]; } try { return overflowBuffer.METHOD_NAME(); } catch (IOException err) { throw new RuntimeException(err); } }
public override AreaEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { AreaI VAR_AREAI = new OffsetArea(FirstRow, FirstColumn, VAR_INT, VAR_INT, VAR_INT, VAR_INT); return new LazyAreaEval(VAR_AREAI, _evaluator); }
public virtual TerminateJobFlowsResponse METHOD_NAME(TerminateJobFlowsRequest VAR_TERMINATEJOBFLOWSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TerminateJobFlowsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TerminateJobFlowsResponseUnmarshaller.Instance; return Invoke<TerminateJobFlowsResponse>(VAR_TERMINATEJOBFLOWSREQUEST, VAR_VAR); }
public CreateTopicRequest(string VAR_STRING) { _name = VAR_STRING; }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = count - (nextPos - VAR_INT); Debug.Assert(VAR_INT >= LITERAL_INT); Debug.Assert(VAR_INT <= count); int VAR_INT = nextWrite - count; if (VAR_INT < LITERAL_INT) { VAR_INT += positions.Length; } for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_INT == positions.Length) { VAR_INT = LITERAL_INT; } positions[VAR_INT].Reset(); VAR_INT++; } count -= VAR_INT; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { var VAR_VAR = new LengthFilter(m_luceneMatchVersion, enablePositionIncrements, VAR_TOKENSTREAM, min, max); return VAR_VAR; }
public StandardQueryParser() : base(new StandardQueryConfigHandler(), new StandardSyntaxParser(), new StandardQueryNodeProcessorPipeline(LITERAL_NULL), new StandardQueryTreeBuilder()) { EnablePositionIncrements = true; }
public GetUserSourceRepoRefListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public static java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_LONG[].Length, VAR_INT, VAR_INT); java.nio.LongBuffer VAR_JAVA.NIO.LONGBUFFER = new java.nio.ReadWriteLongArrayBuffer(VAR_LONG[]); VAR_JAVA.NIO.LONGBUFFER._position = VAR_INT; VAR_JAVA.NIO.LONGBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.LONGBUFFER; }
public UpperCaseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual ListNotesCommand METHOD_NAME() { return new ListNotesCommand(repo); }
public virtual bool METHOD_NAME() { int VAR_INT = lines.Get(lines.Size() - LITERAL_INT); if (VAR_INT == LITERAL_INT) { return true; } return content[VAR_INT - LITERAL_INT] != LITERAL_CHAR; }
public virtual CreateDashboardResponse METHOD_NAME(CreateDashboardRequest VAR_CREATEDASHBOARDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDashboardRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDashboardResponseUnmarshaller.Instance; return Invoke<CreateDashboardResponse>(VAR_CREATEDASHBOARDREQUEST, VAR_VAR); }
public override void METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { METHOD_NAME(Sharpen.StringHelper.Substring(VAR_STRING, VAR_INT, VAR_INT + VAR_INT).ToCharArray()); }
public UpdateNamespaceAuthorizationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public virtual DescribeStreamResponse METHOD_NAME(DescribeStreamRequest VAR_DESCRIBESTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStreamResponseUnmarshaller.Instance; return Invoke<DescribeStreamResponse>(VAR_DESCRIBESTREAMREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } lock (@lock) { checkNotClosed(); this.VAR_INT = VAR_INT; _mark = pos; } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | (VAR_INT << LITERAL_INT) | VAR_INT; } }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, channel); }
public string METHOD_NAME() { int VAR_INT = path.LastIndexOf(separator); return (VAR_INT < LITERAL_INT) ? path : Sharpen.StringHelper.Substring(path, VAR_INT + LITERAL_INT, path.Length); }
public virtual TestInvokeMethodResponse METHOD_NAME(TestInvokeMethodRequest VAR_TESTINVOKEMETHODREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestInvokeMethodRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestInvokeMethodResponseUnmarshaller.Instance; return Invoke<TestInvokeMethodResponse>(VAR_TESTINVOKEMETHODREQUEST, VAR_VAR); }
public void METHOD_NAME() { for (State state = GetCurrentState(); state != LITERAL_NULL; state = state.next) { state.attribute.Clear(); } }
public virtual ListRecipesResponse METHOD_NAME(ListRecipesRequest VAR_LISTRECIPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListRecipesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListRecipesResponseUnmarshaller.Instance; return Invoke<ListRecipesResponse>(VAR_LISTRECIPESREQUEST, VAR_VAR); }
public override void METHOD_NAME(CharacterIterator VAR_CHARACTERITERATOR) { text = VAR_CHARACTERITERATOR; text.SetIndex(text.BeginIndex); currentSentence = LITERAL_INT; Span[] VAR_SPAN[] = sentenceOp.SplitSentences(CharacterIteratorToString()); sentenceStarts = new int[VAR_SPAN[].Length]; for (int i = LITERAL_INT; i < VAR_SPAN[].Length; ++i) { sentenceStarts[i] = VAR_SPAN[][i].getStart() + text.BeginIndex; } }
public virtual string METHOD_NAME(string VAR_STRING, IList<string> VAR_ILIST<STRING>) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING); if (!VAR_STRING.EndsWith(LITERAL_STRING) && VAR_STRING.Length != LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); foreach (string conflictingPath in VAR_ILIST<STRING>) { VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(conflictingPath).Append(LITERAL_CHAR); } return VAR_STRINGBUILDER.ToString(); }
public virtual bool METHOD_NAME(int VAR_INT) { return bits.SafeGet(VAR_INT); }
public virtual DescribeTaskSetsResponse METHOD_NAME(DescribeTaskSetsRequest VAR_DESCRIBETASKSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTaskSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTaskSetsResponseUnmarshaller.Instance; return Invoke<DescribeTaskSetsResponse>(VAR_DESCRIBETASKSETSREQUEST, VAR_VAR); }
public void METHOD_NAME(FormulaRecordAggregate VAR_FORMULARECORDAGGREGATE) { if (_numberOfFormulas == LITERAL_INT) { if (_firstCell.Row != VAR_FORMULARECORDAGGREGATE.Row || _firstCell.Col != VAR_FORMULARECORDAGGREGATE.Column) { throw new InvalidOperationException(LITERAL_STRING); } } if (_numberOfFormulas >= _frAggs.Length) { throw new Exception(LITERAL_STRING); } _frAggs[_numberOfFormulas++] = VAR_FORMULARECORDAGGREGATE; }
public PacketLineOutRefAdvertiser(PacketLineOut VAR_PACKETLINEOUT) { pckOut = VAR_PACKETLINEOUT; }
public virtual UpdateDataSetResponse METHOD_NAME(UpdateDataSetRequest VAR_UPDATEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDataSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDataSetResponseUnmarshaller.Instance; return Invoke<UpdateDataSetResponse>(VAR_UPDATEDATASETREQUEST, VAR_VAR); }
public virtual ListKeyPhrasesDetectionJobsResponse METHOD_NAME(ListKeyPhrasesDetectionJobsRequest VAR_LISTKEYPHRASESDETECTIONJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListKeyPhrasesDetectionJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListKeyPhrasesDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListKeyPhrasesDetectionJobsResponse>(VAR_LISTKEYPHRASESDETECTIONJOBSREQUEST, VAR_VAR); }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public VaultNotificationConfig(string VAR_STRING, List<string> VAR_LIST<STRING>) { _snsTopic = VAR_STRING; _events = VAR_LIST<STRING>; }
public virtual string[] METHOD_NAME(string[] VAR_STRING[], string[] VAR_STRING[]) { string[] VAR_STRING[] = LITERAL_NULL; string[] VAR_STRING[] = LITERAL_NULL; if (dictionaryLemmatizer != LITERAL_NULL) { VAR_STRING[] = dictionaryLemmatizer.lemmatize(VAR_STRING[], VAR_STRING[]); for (int i = LITERAL_INT; i < VAR_STRING[].Length; ++i) { if (VAR_STRING[][i].Equals(LITERAL_STRING)) { if (lemmatizerME != LITERAL_NULL) { if (VAR_STRING[] == LITERAL_NULL) { VAR_STRING[] = lemmatizerME.lemmatize(VAR_STRING[], VAR_STRING[]); } if (LITERAL_STRING.Equals(VAR_STRING[][i])) { VAR_STRING[][i] = VAR_STRING[][i]; } else { VAR_STRING[][i] = VAR_STRING[][i]; } } else { VAR_STRING[][i] = VAR_STRING[][i]; } } } } else { VAR_STRING[] = lemmatizerME.lemmatize(VAR_STRING[], VAR_STRING[]); for (int i = LITERAL_INT; i < VAR_STRING[].Length; ++i) { if (LITERAL_STRING.Equals(VAR_STRING[][i])) { VAR_STRING[][i] = VAR_STRING[][i]; } } VAR_STRING[] = VAR_STRING[]; } return VAR_STRING[]; }
public PaletteRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { short VAR_SHORT = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_colors = new List<PColor>(VAR_SHORT); for (int k = LITERAL_INT; k < VAR_SHORT; k++) { field_2_colors.Add(new PColor(VAR_RECORDINPUTSTREAM)); } }
public GetJobOutputRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; _jobId = VAR_STRING; _range = VAR_STRING; }
public ISigner METHOD_NAME() { return LITERAL_NULL; }
public static int METHOD_NAME(BytesRef VAR_BYTESREF) { int VAR_INT = VAR_BYTESREF.Offset; int VAR_INT = VAR_INT + VAR_BYTESREF.Length; var VAR_VAR = VAR_BYTESREF.Bytes; int VAR_INT = LITERAL_INT; for (; VAR_INT < VAR_INT; VAR_INT++) { int VAR_INT = VAR_VAR[VAR_INT] & LITERAL_INT; if (VAR_INT < LITERAL_INT) { VAR_INT += LITERAL_INT; continue; } if (VAR_INT >= LITERAL_INT) { if (VAR_INT < LITERAL_INT) { VAR_INT += LITERAL_INT; continue; } if (VAR_INT < LITERAL_INT) { VAR_INT += LITERAL_INT; continue; } if (VAR_INT < LITERAL_INT) { VAR_INT += LITERAL_INT; continue; } } throw new ArgumentException(); } if (VAR_INT > VAR_INT) throw new ArgumentException(); return VAR_INT; }
public static Type METHOD_NAME(int VAR_INT) { I_RecordCreator VAR_I_RECORDCREATOR = _recordCreatorsById[(short)VAR_INT]; if (VAR_I_RECORDCREATOR == LITERAL_NULL) { return LITERAL_NULL; } return VAR_I_RECORDCREATOR.METHOD_NAME(); }
public WriteAccessRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { if (VAR_RECORDINPUTSTREAM.Remaining > DATA_SIZE) { throw new RecordFormatException(LITERAL_STRING + DATA_SIZE + LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING); } int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUByte(); if (VAR_INT > DATA_SIZE || (VAR_INT & LITERAL_INT) != LITERAL_INT) { byte[] VAR_BYTE[] = new byte[LITERAL_INT + VAR_RECORDINPUTSTREAM.Remaining]; LittleEndian.PutUShort(VAR_BYTE[], LITERAL_INT, VAR_INT); LittleEndian.PutByte(VAR_BYTE[], LITERAL_INT, VAR_INT); VAR_RECORDINPUTSTREAM.ReadFully(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length - LITERAL_INT); char[] VAR_CHAR[] = new char[VAR_BYTE[].Length]; for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { VAR_CHAR[][i] = (char)VAR_BYTE[][i]; } String VAR_STRING = new String(VAR_CHAR[]); Username = VAR_STRING.Trim(); return; } String VAR_STRING; if ((VAR_INT & LITERAL_INT) == LITERAL_INT) { VAR_STRING = StringUtil.ReadCompressedUnicode(VAR_RECORDINPUTSTREAM, VAR_INT); } else { VAR_STRING = StringUtil.ReadUnicodeLE(VAR_RECORDINPUTSTREAM, VAR_INT); } field_1_username = VAR_STRING.Trim(); int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining; while (VAR_INT > LITERAL_INT) { VAR_RECORDINPUTSTREAM.ReadUByte(); VAR_INT--; } }
public FontBasisRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_xBasis = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_yBasis = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_heightBasis = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_scale = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_indexToFontTable = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual string METHOD_NAME(string VAR_STRING) { return VAR_STRING; }
public PathEdit(string VAR_STRING) { path = Constants.Encode(VAR_STRING); }
public virtual bool METHOD_NAME(char[] VAR_CHAR[]) { return map.Put(VAR_CHAR[]); }
public virtual ResolveAliasResponse METHOD_NAME(ResolveAliasRequest VAR_RESOLVEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResolveAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResolveAliasResponseUnmarshaller.Instance; return Invoke<ResolveAliasResponse>(VAR_RESOLVEALIASREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new GreekStemFilter(VAR_TOKENSTREAM); }
public DescribeCacheSecurityGroupsRequest(string VAR_STRING) { _cacheSecurityGroupName = VAR_STRING; }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { _le.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); _rc4.Xor(VAR_BYTE[], VAR_INT, VAR_INT); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_BYTE[], LITERAL_INT, VAR_INT); }
public virtual DeleteDomainNameResponse METHOD_NAME(DeleteDomainNameRequest VAR_DELETEDOMAINNAMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDomainNameRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDomainNameResponseUnmarshaller.Instance; return Invoke<DeleteDomainNameResponse>(VAR_DELETEDOMAINNAMEREQUEST, VAR_VAR); }
public virtual DecreaseNodeGroupsInGlobalReplicationGroupResponse METHOD_NAME(DecreaseNodeGroupsInGlobalReplicationGroupRequest VAR_DECREASENODEGROUPSINGLOBALREPLICATIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller.Instance; return Invoke<DecreaseNodeGroupsInGlobalReplicationGroupResponse>(VAR_DECREASENODEGROUPSINGLOBALREPLICATIONGROUPREQUEST, VAR_VAR); }
public SelectRequest(string VAR_STRING, bool VAR_BOOL) { _selectExpression = VAR_STRING; _consistentRead = VAR_BOOL; }
public virtual NGit.Api.SubmoduleAddCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public virtual PutRestApiResponse METHOD_NAME(PutRestApiRequest VAR_PUTRESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRestApiResponseUnmarshaller.Instance; return Invoke<PutRestApiResponse>(VAR_PUTRESTAPIREQUEST, VAR_VAR); }
public Ptg METHOD_NAME(CellReference VAR_CELLREFERENCE, SheetIdentifier VAR_SHEETIDENTIFIER) { int VAR_INT = GetSheetExtIx(VAR_SHEETIDENTIFIER); return new Ref3DPtg(VAR_CELLREFERENCE, VAR_INT); }
public virtual CreateRequestValidatorResponse METHOD_NAME(CreateRequestValidatorRequest VAR_CREATEREQUESTVALIDATORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRequestValidatorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRequestValidatorResponseUnmarshaller.Instance; return Invoke<CreateRequestValidatorResponse>(VAR_CREATEREQUESTVALIDATORREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME() { return copy(this, _mark); }
public virtual void METHOD_NAME(int VAR_INT) { packedGitWindowSize = VAR_INT; }
public virtual DisassociateMembershipResponse METHOD_NAME(DisassociateMembershipRequest VAR_DISASSOCIATEMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateMembershipResponseUnmarshaller.Instance; return Invoke<DisassociateMembershipResponse>(VAR_DISASSOCIATEMEMBERSHIPREQUEST, VAR_VAR); }
public override void METHOD_NAME(TextReader VAR_TEXTREADER) { int VAR_INT = LITERAL_INT; TextReader VAR_TEXTREADER = VAR_TEXTREADER; try { string VAR_STRING = LITERAL_NULL; string VAR_STRING = LITERAL_STRING; CharsRef[] VAR_CHARSREF[] = new CharsRef[LITERAL_INT]; int VAR_INT = LITERAL_INT; while ((VAR_STRING = VAR_TEXTREADER.ReadLine()) != LITERAL_NULL) { VAR_INT++; string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, LITERAL_INT); if (!VAR_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { AddInternal(VAR_CHARSREF[], VAR_INT); VAR_INT = LITERAL_INT; } if (VAR_CHARSREF[].Length <= VAR_INT + LITERAL_INT) { CharsRef[] VAR_CHARSREF[] = new CharsRef[VAR_CHARSREF[].Length * LITERAL_INT]; Array.Copy(VAR_CHARSREF[], LITERAL_INT, VAR_CHARSREF[], LITERAL_INT, VAR_INT); VAR_CHARSREF[] = VAR_CHARSREF[]; } VAR_CHARSREF[][VAR_INT] = ParseSynonym(VAR_STRING, VAR_CHARSREF[][VAR_INT]); VAR_INT++; VAR_STRING = VAR_STRING; } AddInternal(VAR_CHARSREF[], VAR_INT); } catch (System.ArgumentException e) { throw new Exception(LITERAL_STRING + VAR_INT.ToString(), e); } finally { VAR_TEXTREADER.Dispose(); } }
public string[] METHOD_NAME() { return listImpl(path); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(rt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(grbitFrt)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(iObjectKind)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(reserved)).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static RevFilter METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME.GetTime()); }
public static XmlElement METHOD_NAME(XmlElement VAR_XMLELEMENT) { for (XmlNode kid = VAR_XMLELEMENT.FirstChild; kid != LITERAL_NULL; kid = kid.NextSibling) { if (kid.NodeType == XmlNodeType.Element) { return (XmlElement)kid; } } return LITERAL_NULL; }
public virtual bool METHOD_NAME(E VAR_E) { lock (mutex) { return c.METHOD_NAME(VAR_E); } }
public LongMap() { table = CreateArray<V>(LITERAL_INT); growAt = (int)(table.Length * LOAD_FACTOR); }
public virtual ClaimGameServerResponse METHOD_NAME(ClaimGameServerRequest VAR_CLAIMGAMESERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ClaimGameServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ClaimGameServerResponseUnmarshaller.Instance; return Invoke<ClaimGameServerResponse>(VAR_CLAIMGAMESERVERREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE = LITERAL_INT; try { VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } double VAR_DOUBLE = LITERAL_INT; try { VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } if (VAR_DOUBLE == LITERAL_INT) { return ErrorEval.DIV_ZERO; } return new NumberEval(((int)(VAR_DOUBLE / VAR_DOUBLE))); }
public override V METHOD_NAME(K VAR_K, V VAR_V) { lock (this) { if ((object)VAR_V == LITERAL_NULL) { throw new System.ArgumentNullException(); } int VAR_INT = secondaryHash(VAR_K.GetHashCode()); java.util.Hashtable.HashtableEntry<K, V>[] VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = table; int VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length - LITERAL_INT); java.util.Hashtable.HashtableEntry<K, V> VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT]; { for (java.util.Hashtable.HashtableEntry<K, V> e = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>; e != LITERAL_NULL; e = e.next) { if (e.VAR_INT == VAR_INT && VAR_K.Equals(e.VAR_K)) { V VAR_V = e.VAR_V; e.VAR_V = VAR_V; return VAR_V; } } } modCount++; if (_size++ > threshold) { rehash(); VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[] = doubleCapacity(); VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[].Length - LITERAL_INT); VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V> = VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT]; } VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>[][VAR_INT] = new java.util.Hashtable.HashtableEntry<K, V>(VAR_K, VAR_V, VAR_INT, VAR_JAVA.UTIL.HASHTABLE.HASHTABLEENTRY<K, V>); return default(V); } }
public virtual DescribeAutoScalingNotificationTypesResponse METHOD_NAME(DescribeAutoScalingNotificationTypesRequest VAR_DESCRIBEAUTOSCALINGNOTIFICATIONTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAutoScalingNotificationTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAutoScalingNotificationTypesResponseUnmarshaller.Instance; return Invoke<DescribeAutoScalingNotificationTypesResponse>(VAR_DESCRIBEAUTOSCALINGNOTIFICATIONTYPESREQUEST, VAR_VAR); }
public ScandinavianFoldingFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public void METHOD_NAME() { lock (this.mBlock) { if (this.mParseState != LITERAL_NULL) { this.mParseState.Dispose(); this.mParseState = LITERAL_NULL; this.mBlock.decOpenCountLocked(); } } }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual ListAssessmentRunsResponse METHOD_NAME(ListAssessmentRunsRequest VAR_LISTASSESSMENTRUNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssessmentRunsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssessmentRunsResponseUnmarshaller.Instance; return Invoke<ListAssessmentRunsResponse>(VAR_LISTASSESSMENTRUNSREQUEST, VAR_VAR); }
public override java.nio.ShortBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public virtual DeleteAssessmentRunResponse METHOD_NAME(DeleteAssessmentRunRequest VAR_DELETEASSESSMENTRUNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAssessmentRunRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAssessmentRunResponseUnmarshaller.Instance; return Invoke<DeleteAssessmentRunResponse>(VAR_DELETEASSESSMENTRUNREQUEST, VAR_VAR); }
public virtual GetAppsResponse METHOD_NAME(GetAppsRequest VAR_GETAPPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAppsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAppsResponseUnmarshaller.Instance; return Invoke<GetAppsResponse>(VAR_GETAPPSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(string VAR_STRING, TokenGroup VAR_TOKENGROUP) { if (VAR_TOKENGROUP.TotalScore == LITERAL_INT) return VAR_STRING; float VAR_FLOAT = VAR_TOKENGROUP.TotalScore; if (VAR_FLOAT == LITERAL_INT) { return VAR_STRING; } var VAR_VAR = new StringBuilder(); VAR_VAR.Append(LITERAL_STRING); if (m_highlightForeground) { VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(GetForegroundColorString(VAR_FLOAT)); VAR_VAR.Append(LITERAL_STRING); } if (m_highlightBackground) { VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(GetBackgroundColorString(VAR_FLOAT)); VAR_VAR.Append(LITERAL_STRING); } VAR_VAR.Append(LITERAL_STRING); VAR_VAR.Append(VAR_STRING); VAR_VAR.Append(LITERAL_STRING); return VAR_VAR.ToString(); }
public PendingTerm(BytesRef VAR_BYTESREF, BlockTermState VAR_BLOCKTERMSTATE) : base(true) { this.Term = VAR_BYTESREF; this.State = VAR_BLOCKTERMSTATE; }
public override java.nio.IntBuffer METHOD_NAME() { java.nio.IntToByteBufferAdapter VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER = new java.nio.IntToByteBufferAdapter(byteBuffer.METHOD_NAME()); VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER._mark = _mark; VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER.byteBuffer._order = byteBuffer._order; return VAR_JAVA.NIO.INTTOBYTEBUFFERADAPTER; }
public void METHOD_NAME(RevCommit VAR_REVCOMMIT, RevFlag VAR_REVFLAG) { RevCommit[] VAR_REVCOMMIT[] = VAR_REVCOMMIT.parents; if (VAR_REVCOMMIT[] == LITERAL_NULL) { return; } foreach (RevCommit p in VAR_REVCOMMIT[]) { Add(p, VAR_REVFLAG); } }
public IndicNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ListTasksResponse METHOD_NAME(ListTasksRequest VAR_LISTTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTasksResponseUnmarshaller.Instance; return Invoke<ListTasksResponse>(VAR_LISTTASKSREQUEST, VAR_VAR); }
public virtual ListTemplateAliasesResponse METHOD_NAME(ListTemplateAliasesRequest VAR_LISTTEMPLATEALIASESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTemplateAliasesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTemplateAliasesResponseUnmarshaller.Instance; return Invoke<ListTemplateAliasesResponse>(VAR_LISTTEMPLATEALIASESREQUEST, VAR_VAR); }
public virtual DescribeEventCategoriesResponse METHOD_NAME() { return METHOD_NAME(new DescribeEventCategoriesRequest()); }
public static java.io.File METHOD_NAME(string VAR_STRING, string VAR_STRING) { throw new System.NotImplementedException(); }
public LabelAndValue(string VAR_STRING, float VAR_FLOAT) { this.Label = VAR_STRING; this.Value = VAR_FLOAT; this.TypeOfValue = typeof(float); }
public string METHOD_NAME(int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { return GetFeature(VAR_INT, LITERAL_INT); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new CodepointCountFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, min, max); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(task.GetName()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(count); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(elapsed); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(IInputIterator VAR_IINPUTITERATOR) { if (VAR_IINPUTITERATOR.HasPayloads) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_IINPUTITERATOR.HasContexts) { throw new System.ArgumentException(LITERAL_STRING); } root = new TernaryTreeNode(); if (VAR_IINPUTITERATOR.Comparer != BytesRef.UTF8SortedAsUTF16Comparer) { VAR_IINPUTITERATOR = new SortedInputIterator(VAR_IINPUTITERATOR, BytesRef.UTF8SortedAsUTF16Comparer); } List<string> VAR_LIST<STRING> = new List<string>(); List<object> VAR_LIST<OBJECT> = new List<object>(); BytesRef VAR_BYTESREF; CharsRef VAR_CHARSREF = new CharsRef(); while ((VAR_BYTESREF = VAR_IINPUTITERATOR.Next()) != LITERAL_NULL) { VAR_CHARSREF.Grow(VAR_BYTESREF.Length); UnicodeUtil.UTF8toUTF16(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Length, VAR_CHARSREF); VAR_LIST<STRING>.Add(VAR_CHARSREF.ToString()); VAR_LIST<OBJECT>.Add(VAR_IINPUTITERATOR.Weight); } autocomplete.BalancedTree(VAR_LIST<STRING>.ToArray(), VAR_LIST<OBJECT>.ToArray(), LITERAL_INT, VAR_LIST<STRING>.Count - LITERAL_INT, root); }
public virtual void METHOD_NAME(bool VAR_BOOL) { allowThin = VAR_BOOL; }
public PhRun(int VAR_INT, int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public virtual void METHOD_NAME(string VAR_STRING, RevBlob VAR_REVBLOB) { METHOD_NAME(VAR_STRING, FileMode.REGULAR_FILE, VAR_REVBLOB); }
public virtual CreateHostedZoneResponse METHOD_NAME(CreateHostedZoneRequest VAR_CREATEHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHostedZoneResponseUnmarshaller.Instance; return Invoke<CreateHostedZoneResponse>(VAR_CREATEHOSTEDZONEREQUEST, VAR_VAR); }
public virtual ListFacetAttributesResponse METHOD_NAME(ListFacetAttributesRequest VAR_LISTFACETATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFacetAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFacetAttributesResponseUnmarshaller.Instance; return Invoke<ListFacetAttributesResponse>(VAR_LISTFACETATTRIBUTESREQUEST, VAR_VAR); }
public virtual GetTrafficPolicyInstanceCountResponse METHOD_NAME(GetTrafficPolicyInstanceCountRequest VAR_GETTRAFFICPOLICYINSTANCECOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTrafficPolicyInstanceCountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTrafficPolicyInstanceCountResponseUnmarshaller.Instance; return Invoke<GetTrafficPolicyInstanceCountResponse>(VAR_GETTRAFFICPOLICYINSTANCECOUNTREQUEST, VAR_VAR); }
public virtual ModifyTrafficMirrorSessionResponse METHOD_NAME(ModifyTrafficMirrorSessionRequest VAR_MODIFYTRAFFICMIRRORSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyTrafficMirrorSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyTrafficMirrorSessionResponseUnmarshaller.Instance; return Invoke<ModifyTrafficMirrorSessionResponse>(VAR_MODIFYTRAFFICMIRRORSESSIONREQUEST, VAR_VAR); }
public virtual DescribeDefaultClusterParametersResponse METHOD_NAME(DescribeDefaultClusterParametersRequest VAR_DESCRIBEDEFAULTCLUSTERPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDefaultClusterParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDefaultClusterParametersResponseUnmarshaller.Instance; return Invoke<DescribeDefaultClusterParametersResponse>(VAR_DESCRIBEDEFAULTCLUSTERPARAMETERSREQUEST, VAR_VAR); }
public ConsoleWriter(java.io.OutputStream VAR_JAVA.IO.OUTPUTSTREAM) : base(@out, true) { @lock = CONSOLE_LOCK; }
public override MutableValue METHOD_NAME() { MutableValueBool VAR_MUTABLEVALUEBOOL = new MutableValueBool(); VAR_MUTABLEVALUEBOOL.Value = this.Value; VAR_MUTABLEVALUEBOOL.Exists = this.Exists; return VAR_MUTABLEVALUEBOOL; }
public PatternTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { m_pattern = GetPattern(VAR_IDICTIONARY<STRING, STRING>, PATTERN); m_group = GetInt32(VAR_IDICTIONARY<STRING, STRING>, GROUP, -LITERAL_INT); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE, IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE) { return METHOD_NAME(VAR_CELLRANGEADDRESS[], new HSSFConditionalFormattingRule[] { (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE, (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE }); }
public Credential(string VAR_STRING, string VAR_STRING, string VAR_STRING) { AccessKeyId = VAR_STRING; AccessSecret = VAR_STRING; SecurityToken = VAR_STRING; RefreshDate = new DateTime(); }
public void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; ends.count = LITERAL_INT; starts.count = LITERAL_INT; }
public BottomMarginRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_margin = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public void METHOD_NAME(string VAR_STRING) { for (int i = fields.Count - LITERAL_INT; i >= LITERAL_INT; i--) { IIndexableField VAR_IINDEXABLEFIELD = fields[i]; if (VAR_IINDEXABLEFIELD.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { fields.Remove(VAR_IINDEXABLEFIELD); } } }
public override IToken METHOD_NAME(int VAR_INT) { LazyInit(); if (VAR_INT == LITERAL_INT) { return LITERAL_NULL; } if (VAR_INT < LITERAL_INT) { return Lb(-VAR_INT); } int VAR_INT = p; int VAR_INT = LITERAL_INT; while (VAR_INT < VAR_INT) { if (Sync(VAR_INT + LITERAL_INT)) { VAR_INT = NextTokenOnChannel(VAR_INT + LITERAL_INT, channel); } VAR_INT++; } return tokens[VAR_INT]; }
public override java.nio.FloatBuffer METHOD_NAME(float VAR_FLOAT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putFloat(_position++ * libcore.io.SizeOf.FLOAT, VAR_FLOAT); return this; }
public ExternalNameEval(IEvaluationName VAR_IEVALUATIONNAME) { _name = VAR_IEVALUATIONNAME; }
public virtual GetLoadBalancerMetricDataResponse METHOD_NAME(GetLoadBalancerMetricDataRequest VAR_GETLOADBALANCERMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLoadBalancerMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLoadBalancerMetricDataResponseUnmarshaller.Instance; return Invoke<GetLoadBalancerMetricDataResponse>(VAR_GETLOADBALANCERMETRICDATAREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return resultPath.GetPath(); }
public RefWriter(ICollection<Ref> VAR_ICOLLECTION<REF>) { this.VAR_ICOLLECTION<REF> = RefComparator.Sort(VAR_ICOLLECTION<REF>); }
public HSSFWorkbook METHOD_NAME() { HSSFWorkbook VAR_HSSFWORKBOOK = HSSFWorkbook.Create(GetStubWorkbook()); foreach (BoundSheetRecord bsr in boundSheetRecords) { VAR_HSSFWORKBOOK.CreateSheet(bsr.Sheetname); } return VAR_HSSFWORKBOOK; }
public static SupBookRecord METHOD_NAME(String VAR_STRING, String[] VAR_STRING[]) { return new SupBookRecord(VAR_STRING, VAR_STRING[]); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } for (int i = LITERAL_INT; i < m_maxLevels - LITERAL_INT; i++) { if (VAR_DOUBLE > levelW[i] && VAR_DOUBLE > levelH[i]) { return i + LITERAL_INT; } } return m_maxLevels; }
public MissingCellDummyRecord(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public static TokenizerFactory METHOD_NAME(string VAR_STRING, IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) { return loader.NewInstance(VAR_STRING, VAR_IDICTIONARY<STRING, STRING>); }
public java.nio.ByteBuffer METHOD_NAME(java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER) { if (VAR_JAVA.NIO.CHARBUFFER.remaining() == LITERAL_INT) { return java.nio.ByteBuffer.allocate(LITERAL_INT); } reset(); int VAR_INT = (int)(VAR_JAVA.NIO.CHARBUFFER.remaining() * _averageBytesPerChar); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = java.nio.ByteBuffer.allocate(VAR_INT); java.nio.charset.CoderResult VAR_JAVA.NIO.CHARSET.CODERRESULT = LITERAL_NULL; while (true) { VAR_JAVA.NIO.CHARSET.CODERRESULT = METHOD_NAME(VAR_JAVA.NIO.CHARBUFFER, VAR_JAVA.NIO.BYTEBUFFER, false); if (VAR_JAVA.NIO.CHARSET.CODERRESULT == java.nio.charset.CoderResult.UNDERFLOW) { break; } else { if (VAR_JAVA.NIO.CHARSET.CODERRESULT == java.nio.charset.CoderResult.OVERFLOW) { VAR_JAVA.NIO.BYTEBUFFER = allocateMore(VAR_JAVA.NIO.BYTEBUFFER); continue; } } checkCoderResult(VAR_JAVA.NIO.CHARSET.CODERRESULT); } VAR_JAVA.NIO.CHARSET.CODERRESULT = METHOD_NAME(VAR_JAVA.NIO.CHARBUFFER, VAR_JAVA.NIO.BYTEBUFFER, true); checkCoderResult(VAR_JAVA.NIO.CHARSET.CODERRESULT); while (true) { VAR_JAVA.NIO.CHARSET.CODERRESULT = flush(VAR_JAVA.NIO.BYTEBUFFER); if (VAR_JAVA.NIO.CHARSET.CODERRESULT == java.nio.charset.CoderResult.UNDERFLOW) { VAR_JAVA.NIO.BYTEBUFFER.flip(); break; } else { if (VAR_JAVA.NIO.CHARSET.CODERRESULT == java.nio.charset.CoderResult.OVERFLOW) { VAR_JAVA.NIO.BYTEBUFFER = allocateMore(VAR_JAVA.NIO.BYTEBUFFER); continue; } } checkCoderResult(VAR_JAVA.NIO.CHARSET.CODERRESULT); VAR_JAVA.NIO.BYTEBUFFER.flip(); if (VAR_JAVA.NIO.CHARSET.CODERRESULT.isMalformed()) { throw new java.nio.charset.MalformedInputException(VAR_JAVA.NIO.CHARSET.CODERRESULT.VAR_INT()); } else { if (VAR_JAVA.NIO.CHARSET.CODERRESULT.isUnmappable()) { throw new java.nio.charset.UnmappableCharacterException(VAR_JAVA.NIO.CHARSET.CODERRESULT.VAR_INT()); } } break; } status = READY; finished = true; return VAR_JAVA.NIO.BYTEBUFFER; }
public TextProgressMonitor(TextWriter VAR_TEXTWRITER) { this.VAR_TEXTWRITER = VAR_TEXTWRITER; this.write = true; }
public virtual string METHOD_NAME(string VAR_STRING, string VAR_STRING) { string[] VAR_STRING[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_STRING[] = (string[])VAR_OBJECT; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_STRING; } if (VAR_STRING == LITERAL_NULL) { return LITERAL_NULL; } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return VAR_STRING; } else if (VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT || VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal) >= LITERAL_INT) { return VAR_STRING; } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_STRING[] = PropToStringArray(VAR_STRING); valByRound[VAR_STRING] = VAR_STRING[]; return VAR_STRING[][roundNumber % VAR_STRING[].Length]; }
public RefDirectory.LooseRef METHOD_NAME(ObjectIdRef VAR_OBJECTIDREF) { if (VAR_OBJECTIDREF.GetPeeledObjectId() != LITERAL_NULL) { return new RefDirectory.LoosePeeledTag(snapShot, GetName(), GetObjectId(), VAR_OBJECTIDREF.GetPeeledObjectId()); } else { return new RefDirectory.LooseNonTag(snapShot, GetName(), GetObjectId()); } }
public override IList<Ref> METHOD_NAME() { CheckCallable(); IDictionary<string, Ref> VAR_IDICTIONARY<STRING, REF>; try { if (listMode == ListMode.HEAD) { VAR_IDICTIONARY<STRING, REF> = repo.RefDatabase.GetRefs(Constants.R_HEADS); } else { if (listMode == ListBranchCommand.ListMode.REMOTE) { VAR_IDICTIONARY<STRING, REF> = repo.RefDatabase.GetRefs(Constants.R_REMOTES); } else { VAR_IDICTIONARY<STRING, REF> = new Dictionary<string, Ref>(repo.RefDatabase.GetRefs(Constants.R_HEADS)); VAR_IDICTIONARY<STRING, REF>.PutAll(repo.RefDatabase.GetRefs(Constants.R_REMOTES)); } } } catch (IOException e) { throw new JGitInternalException(e.Message, e); } IList<Ref> VAR_ILIST<REF> = new AList<Ref>(); Sharpen.Collections.AddAll(VAR_ILIST<REF>, VAR_IDICTIONARY<STRING, REF>.Values); VAR_ILIST<REF>.Sort(new _IComparer_111()); SetCallable(false); return VAR_ILIST<REF>; }
public void METHOD_NAME(long VAR_LONG) { WriteContinueIfRequired(LITERAL_INT); _ulrOutput.METHOD_NAME(VAR_LONG); }
public virtual UpdateSmsTemplateResponse METHOD_NAME(UpdateSmsTemplateRequest VAR_UPDATESMSTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSmsTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSmsTemplateResponseUnmarshaller.Instance; return Invoke<UpdateSmsTemplateResponse>(VAR_UPDATESMSTEMPLATEREQUEST, VAR_VAR); }
public virtual DeletePlacementGroupResponse METHOD_NAME(DeletePlacementGroupRequest VAR_DELETEPLACEMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePlacementGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePlacementGroupResponseUnmarshaller.Instance; return Invoke<DeletePlacementGroupResponse>(VAR_DELETEPLACEMENTGROUPREQUEST, VAR_VAR); }
public virtual StartApplicationResponse METHOD_NAME(StartApplicationRequest VAR_STARTAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartApplicationResponseUnmarshaller.Instance; return Invoke<StartApplicationResponse>(VAR_STARTAPPLICATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual int METHOD_NAME() { return port; }
public override int METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getInt(_position++ * libcore.io.SizeOf.INT); }
public java.util.MapClass.Entry<K, V> METHOD_NAME() { java.util.TreeMap.Node<K, V> VAR_JAVA.UTIL.TREEMAP.NODE<K, V> = this.endpoint(false); if (VAR_JAVA.UTIL.TREEMAP.NODE<K, V> != LITERAL_NULL) { this._enclosing.removeInternal(VAR_JAVA.UTIL.TREEMAP.NODE<K, V>); } return this._enclosing.immutableCopy(VAR_JAVA.UTIL.TREEMAP.NODE<K, V>); }
public virtual RebootRelationalDatabaseResponse METHOD_NAME(RebootRelationalDatabaseRequest VAR_REBOOTRELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<RebootRelationalDatabaseResponse>(VAR_REBOOTRELATIONALDATABASEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); AsFormulaString(VAR_STRINGBUILDER); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual BulkPublishResponse METHOD_NAME(BulkPublishRequest VAR_BULKPUBLISHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BulkPublishRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BulkPublishResponseUnmarshaller.Instance; return Invoke<BulkPublishResponse>(VAR_BULKPUBLISHREQUEST, VAR_VAR); }
public static string METHOD_NAME() { return LITERAL_STRING + DateTime.UtcNow.currentTimeMillis(); }
public virtual CompleteLifecycleActionResponse METHOD_NAME(CompleteLifecycleActionRequest VAR_COMPLETELIFECYCLEACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CompleteLifecycleActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CompleteLifecycleActionResponseUnmarshaller.Instance; return Invoke<CompleteLifecycleActionResponse>(VAR_COMPLETELIFECYCLEACTIONREQUEST, VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], StandardSyntaxParserConstants.TokenImage); }
public virtual NGit.Storage.Pack.ObjectToPack METHOD_NAME() { if (deltaBase is NGit.Storage.Pack.ObjectToPack) { return (NGit.Storage.Pack.ObjectToPack)deltaBase; } return LITERAL_NULL; }
public virtual GetQueryExecutionResponse METHOD_NAME(GetQueryExecutionRequest VAR_GETQUERYEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQueryExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQueryExecutionResponseUnmarshaller.Instance; return Invoke<GetQueryExecutionResponse>(VAR_GETQUERYEXECUTIONREQUEST, VAR_VAR); }
public int METHOD_NAME(FontRecord VAR_FONTRECORD) { for (int i = LITERAL_INT; i <= numfonts; i++) { FontRecord VAR_FONTRECORD = (FontRecord)records[(records.Fontpos - (numfonts - LITERAL_INT)) + i]; if (VAR_FONTRECORD == VAR_FONTRECORD) { if (i > LITERAL_INT) { return (i + LITERAL_INT); } return i; } } throw new ArgumentException(LITERAL_STRING); }
public void METHOD_NAME(FieldInfos VAR_FIELDINFOS) { foreach (FieldInfo fieldInfo in VAR_FIELDINFOS) { METHOD_NAME(fieldInfo); } }
public virtual DescribeDominantLanguageDetectionJobResponse METHOD_NAME(DescribeDominantLanguageDetectionJobRequest VAR_DESCRIBEDOMINANTLANGUAGEDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDominantLanguageDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeDominantLanguageDetectionJobResponse>(VAR_DESCRIBEDOMINANTLANGUAGEDETECTIONJOBREQUEST, VAR_VAR); }
public virtual DescribeReservedInstancesModificationsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReservedInstancesModificationsRequest()); }
public virtual NGit.Api.DiffCommand METHOD_NAME(OutputStream VAR_OUTPUTSTREAM) { this.VAR_OUTPUTSTREAM = VAR_OUTPUTSTREAM; return this; }
public override ObjectId METHOD_NAME() { return new ObjectId(this); }
public static short[] METHOD_NAME() { if (_allKnownRecordSIDs == LITERAL_NULL) { short[] VAR_SHORT[] = new short[_recordCreatorsById.Count]; int VAR_INT = LITERAL_INT; foreach (KeyValuePair<short, I_RecordCreator> kv in _recordCreatorsById) { VAR_SHORT[][VAR_INT++] = kv.Key; } Array.Sort(VAR_SHORT[]); _allKnownRecordSIDs = VAR_SHORT[]; } return (short[])_allKnownRecordSIDs.Clone(); }
public PredictionContext METHOD_NAME(PredictionContext VAR_PREDICTIONCONTEXT) { if (sharedContextCache == LITERAL_NULL) return VAR_PREDICTIONCONTEXT; lock (sharedContextCache) { PredictionContext.IdentityHashMap VAR_PREDICTIONCONTEXT.IDENTITYHASHMAP = new PredictionContext.IdentityHashMap(); return PredictionContext.GetCachedContext(VAR_PREDICTIONCONTEXT, sharedContextCache, VAR_PREDICTIONCONTEXT.IDENTITYHASHMAP); } }
public virtual CreateStageResponse METHOD_NAME(CreateStageRequest VAR_CREATESTAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStageResponseUnmarshaller.Instance; return Invoke<CreateStageResponse>(VAR_CREATESTAGEREQUEST, VAR_VAR); }
public static NGit.Diff.EditList METHOD_NAME(Edit VAR_EDIT) { NGit.Diff.EditList VAR_NGIT.DIFF.EDITLIST = new NGit.Diff.EditList(LITERAL_INT); VAR_NGIT.DIFF.EDITLIST.AddItem(VAR_EDIT); return VAR_NGIT.DIFF.EDITLIST; }
public virtual ModifySnapshotScheduleResponse METHOD_NAME(ModifySnapshotScheduleRequest VAR_MODIFYSNAPSHOTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySnapshotScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySnapshotScheduleResponseUnmarshaller.Instance; return Invoke<ModifySnapshotScheduleResponse>(VAR_MODIFYSNAPSHOTSCHEDULEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return elements.Length == LITERAL_INT; }
public void METHOD_NAME(BytesRef VAR_BYTESREF, BytesRef VAR_BYTESREF) { int VAR_INT = blockSize - upto; if (VAR_BYTESREF.Length > VAR_INT || currentBlock == LITERAL_NULL) { if (currentBlock != LITERAL_NULL) { blocks.Add(currentBlock); blockEnd.Add(upto); didSkipBytes = true; } currentBlock = new byte[blockSize]; upto = LITERAL_INT; VAR_INT = blockSize; Debug.Assert(VAR_BYTESREF.Length <= blockSize); } VAR_BYTESREF.Bytes = currentBlock; VAR_BYTESREF.Offset = upto; VAR_BYTESREF.Length = VAR_BYTESREF.Length; Array.METHOD_NAME(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, currentBlock, upto, VAR_BYTESREF.Length); upto += VAR_BYTESREF.Length; }
public override void METHOD_NAME(int VAR_INT, E VAR_E) { listIterator(VAR_INT).METHOD_NAME(VAR_E); }
public CreateKeyPairRequest(string VAR_STRING) { _keyName = VAR_STRING; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = new java.util.LinkedList<E>.ReverseLinkIterator<E>(this, this); return removeOneOccurrence(VAR_OBJECT, VAR_JAVA.UTIL.ITERATOR<E>); }
public virtual int METHOD_NAME(int VAR_INT) { return mKeys[VAR_INT]; }
public virtual void METHOD_NAME(string VAR_STRING, bool VAR_BOOL) { lock (this) { if (!fieldTypes.TryGetValue(VAR_STRING, out DimConfig fieldType)) { fieldTypes[VAR_STRING] = new DimConfig { IsHierarchical = VAR_BOOL }; } else { fieldType.IsHierarchical = VAR_BOOL; } } }
public virtual ObjectId METHOD_NAME() { return oldObjectId; }
public static string METHOD_NAME(ITree VAR_ITREE, IList<string> VAR_ILIST<STRING>) { string VAR_STRING = Utils.EscapeWhitespace(GetNodeText(VAR_ITREE, VAR_ILIST<STRING>), false); if (VAR_ITREE.ChildCount == LITERAL_INT) { return VAR_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRING = Utils.EscapeWhitespace(GetNodeText(VAR_ITREE, VAR_ILIST<STRING>), false); VAR_STRINGBUILDER.Append(VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_CHAR); for (int i = LITERAL_INT; i < VAR_ITREE.ChildCount; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_ITREE.GetChild(i), VAR_ILIST<STRING>)); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.ToString(); }
public virtual java.util.NavigableSet<E> METHOD_NAME(E VAR_E, bool VAR_BOOL) { java.util.Comparator<E> VAR_JAVA.UTIL.COMPARATOR<E> = backingMap.comparator(); if (VAR_JAVA.UTIL.COMPARATOR<E> == LITERAL_NULL) { ((java.lang.Comparable<E>)VAR_E).compareTo(VAR_E); } else { VAR_JAVA.UTIL.COMPARATOR<E>.compare(VAR_E, VAR_E); } return new java.util.TreeSet<E>(backingMap.headMap(VAR_E, VAR_BOOL)); }
public static ContentSource METHOD_NAME(ObjectReader VAR_OBJECTREADER) { return new ContentSource.ObjectReaderSource(VAR_OBJECTREADER); }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual ListSkillsStoreSkillsByCategoryResponse METHOD_NAME(ListSkillsStoreSkillsByCategoryRequest VAR_LISTSKILLSSTORESKILLSBYCATEGORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSkillsStoreSkillsByCategoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSkillsStoreSkillsByCategoryResponseUnmarshaller.Instance; return Invoke<ListSkillsStoreSkillsByCategoryResponse>(VAR_LISTSKILLSSTORESKILLSBYCATEGORYREQUEST, VAR_VAR); }
public Ref METHOD_NAME(string VAR_STRING) { return advertisedRefs.Get(VAR_STRING); }
public virtual ModifyInstanceGroupsResponse METHOD_NAME(ModifyInstanceGroupsRequest VAR_MODIFYINSTANCEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceGroupsResponseUnmarshaller.Instance; return Invoke<ModifyInstanceGroupsResponse>(VAR_MODIFYINSTANCEGROUPSREQUEST, VAR_VAR); }
public override object METHOD_NAME() { return Exists ? new DateTime(Value) as object : LITERAL_NULL; }
public virtual DescribeDBInstanceAutomatedBackupsResponse METHOD_NAME(DescribeDBInstanceAutomatedBackupsRequest VAR_DESCRIBEDBINSTANCEAUTOMATEDBACKUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBInstanceAutomatedBackupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBInstanceAutomatedBackupsResponseUnmarshaller.Instance; return Invoke<DescribeDBInstanceAutomatedBackupsResponse>(VAR_DESCRIBEDBINSTANCEAUTOMATEDBACKUPSREQUEST, VAR_VAR); }
public virtual PreviewAgentsResponse METHOD_NAME(PreviewAgentsRequest VAR_PREVIEWAGENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PreviewAgentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PreviewAgentsResponseUnmarshaller.Instance; return Invoke<PreviewAgentsResponse>(VAR_PREVIEWAGENTSREQUEST, VAR_VAR); }
public QueryGroupUsersRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual DescribeOptionGroupsResponse METHOD_NAME(DescribeOptionGroupsRequest VAR_DESCRIBEOPTIONGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOptionGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOptionGroupsResponseUnmarshaller.Instance; return Invoke<DescribeOptionGroupsResponse>(VAR_DESCRIBEOPTIONGROUPSREQUEST, VAR_VAR); }
public virtual UpdateGroupResponse METHOD_NAME(UpdateGroupRequest VAR_UPDATEGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGroupResponseUnmarshaller.Instance; return Invoke<UpdateGroupResponse>(VAR_UPDATEGROUPREQUEST, VAR_VAR); }
public UpdateSigningCertificateRequest(string VAR_STRING, StatusType VAR_STATUSTYPE) { _certificateId = VAR_STRING; _status = VAR_STATUSTYPE; }
public virtual CreateInstancesResponse METHOD_NAME(CreateInstancesRequest VAR_CREATEINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInstancesResponseUnmarshaller.Instance; return Invoke<CreateInstancesResponse>(VAR_CREATEINSTANCESREQUEST, VAR_VAR); }
public static int METHOD_NAME(int VAR_INT) { return LITERAL_INT + (LITERAL_INT * VAR_INT); }
public virtual StopStreamEncryptionResponse METHOD_NAME(StopStreamEncryptionRequest VAR_STOPSTREAMENCRYPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopStreamEncryptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopStreamEncryptionResponseUnmarshaller.Instance; return Invoke<StopStreamEncryptionResponse>(VAR_STOPSTREAMENCRYPTIONREQUEST, VAR_VAR); }
public virtual GetPredictionResponse METHOD_NAME(GetPredictionRequest VAR_GETPREDICTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetPredictionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetPredictionResponseUnmarshaller.Instance; return Invoke<GetPredictionResponse>(VAR_GETPREDICTIONREQUEST, VAR_VAR); }
public virtual ModifyWorkspacePropertiesResponse METHOD_NAME(ModifyWorkspacePropertiesRequest VAR_MODIFYWORKSPACEPROPERTIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyWorkspacePropertiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyWorkspacePropertiesResponseUnmarshaller.Instance; return Invoke<ModifyWorkspacePropertiesResponse>(VAR_MODIFYWORKSPACEPROPERTIESREQUEST, VAR_VAR); }
public override void METHOD_NAME(TermState VAR_TERMSTATE) { Debug.Assert(VAR_TERMSTATE is BlockTermState, LITERAL_STRING + VAR_TERMSTATE.GetType().Name); BlockTermState VAR_BLOCKTERMSTATE = (BlockTermState)VAR_TERMSTATE; base.METHOD_NAME(VAR_TERMSTATE); DocFreq = VAR_BLOCKTERMSTATE.DocFreq; TotalTermFreq = VAR_BLOCKTERMSTATE.TotalTermFreq; TermBlockOrd = VAR_BLOCKTERMSTATE.TermBlockOrd; BlockFilePointer = VAR_BLOCKTERMSTATE.BlockFilePointer; }
public virtual string METHOD_NAME() { return line; }
public static void METHOD_NAME(Inflater VAR_INFLATER) { if (VAR_INFLATER != LITERAL_NULL) { VAR_INFLATER.Reset(); if (ReleaseImpl(VAR_INFLATER)) { VAR_INFLATER.Finish(); } } }
public virtual EnumSet<RevSort> METHOD_NAME() { return sorting.Clone(); }
public virtual bool METHOD_NAME(RefSpec VAR_REFSPEC) { return fetch.Remove(VAR_REFSPEC); }
public override java.nio.CharBuffer METHOD_NAME(char VAR_CHAR) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_CHAR; return this; }
public virtual int METHOD_NAME() { return (perMin ? rate : LITERAL_INT * rate); }
public DescribeDBParametersRequest(string VAR_STRING) { _dbParameterGroupName = VAR_STRING; }
public virtual DeleteNodeResponse METHOD_NAME(DeleteNodeRequest VAR_DELETENODEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNodeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNodeResponseUnmarshaller.Instance; return Invoke<DeleteNodeResponse>(VAR_DELETENODEREQUEST, VAR_VAR); }
public virtual java.util.List<E> METHOD_NAME(int VAR_INT, int VAR_INT) { object[] VAR_OBJECT[] = elements; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT || VAR_INT > VAR_OBJECT[].Length) { throw new System.IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_OBJECT[].Length); } return new java.util.concurrent.CopyOnWriteArrayList<E>.CowSubList(this, VAR_OBJECT[], VAR_INT, VAR_INT); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public virtual RebootClusterResponse METHOD_NAME(RebootClusterRequest VAR_REBOOTCLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootClusterResponseUnmarshaller.Instance; return Invoke<RebootClusterResponse>(VAR_REBOOTCLUSTERREQUEST, VAR_VAR); }
public void METHOD_NAME(bool VAR_BOOL) { field_1_options = border.SetShortBoolean(field_1_options, VAR_BOOL); }
public virtual DescribeExportTasksResponse METHOD_NAME(DescribeExportTasksRequest VAR_DESCRIBEEXPORTTASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeExportTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeExportTasksResponseUnmarshaller.Instance; return Invoke<DescribeExportTasksResponse>(VAR_DESCRIBEEXPORTTASKSREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { SeriesLabelsRecord VAR_SERIESLABELSRECORD = new SeriesLabelsRecord(); VAR_SERIESLABELSRECORD.field_1_formatFlags = field_1_formatFlags; return VAR_SERIESLABELSRECORD; }
public string METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.TagMessage(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return string.Empty; } Encoding VAR_ENCODING = RawParseUtils.ParseEncoding(VAR_BYTE[]); int VAR_INT = RawParseUtils.EndOfParagraph(VAR_BYTE[], VAR_INT); string VAR_STRING = RawParseUtils.Decode(VAR_ENCODING, VAR_BYTE[], VAR_INT, VAR_INT); if (RevCommit.HasLF(VAR_BYTE[], VAR_INT, VAR_INT)) { VAR_STRING = VAR_STRING.Replace(LITERAL_CHAR, LITERAL_CHAR); } return VAR_STRING; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (IsOperatorInfix) { InfixToString(VAR_STRINGBUILDER); } else { PrefixToString(VAR_STRINGBUILDER); } WeightToString(VAR_STRINGBUILDER); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual string METHOD_NAME() { return preferredAuthentications; }
public virtual int METHOD_NAME() { return elements.Length; }
public virtual ListPartnerEventSourcesResponse METHOD_NAME(ListPartnerEventSourcesRequest VAR_LISTPARTNEREVENTSOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPartnerEventSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPartnerEventSourcesResponseUnmarshaller.Instance; return Invoke<ListPartnerEventSourcesResponse>(VAR_LISTPARTNEREVENTSOURCESREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_BYTE[].Length, VAR_INT, VAR_INT); lock (this) { if (@out == LITERAL_NULL) { setError(); return; } try { @out.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); if (autoFlush) { flush(); } } catch (System.IO.IOException) { setError(); } } }
public ListRegisteredTagsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteDBSubnetGroupResponse METHOD_NAME(DeleteDBSubnetGroupRequest VAR_DELETEDBSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteDBSubnetGroupResponse>(VAR_DELETEDBSUBNETGROUPREQUEST, VAR_VAR); }
public PacketLineOut(OutputStream VAR_OUTPUTSTREAM) { @out = VAR_OUTPUTSTREAM; lenbuffer = new byte[LITERAL_INT]; flushOnEnd = true; }
public void METHOD_NAME(StringBuilder VAR_STRINGBUILDER) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_isxvi)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_isxvd)); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_idObj)); VAR_STRINGBUILDER.Append(LITERAL_CHAR); }
public InterfaceHdrRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _codepage = VAR_RECORDINPUTSTREAM.ReadShort(); }
public DescribeVaultRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if (pendingPairs.ContainsKey(VAR_STRING)) { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } pendingPairs[VAR_STRING] = VAR_STRING; }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } else if (!(VAR_OBJECT is ArrayPredictionContext)) { return false; } if (this.GetHashCode() != VAR_OBJECT.GetHashCode()) { return false; } ArrayPredictionContext VAR_ARRAYPREDICTIONCONTEXT = (ArrayPredictionContext)VAR_OBJECT; return Arrays.METHOD_NAME(returnStates, VAR_ARRAYPREDICTIONCONTEXT.returnStates) && Arrays.METHOD_NAME(parents, VAR_ARRAYPREDICTIONCONTEXT.parents); }
public byte[] METHOD_NAME() { if (arrays.Count == LITERAL_INT) { return LITERAL_NULL; } else if (arrays.Count > LITERAL_INT) { int VAR_INT = LITERAL_INT; foreach (byte[] array in arrays) { VAR_INT += array.Length; } byte[] VAR_BYTE[] = new byte[VAR_INT]; int VAR_INT = LITERAL_INT; foreach (byte[] array in arrays) { Array.Copy(array, LITERAL_INT, VAR_BYTE[], VAR_INT, array.Length); VAR_INT += array.Length; } arrays.Clear(); arrays.Add(VAR_BYTE[]); } return arrays[(LITERAL_INT)]; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = field_1_seriesNumbers.Length; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_seriesNumbers[i]); } }
public virtual bool METHOD_NAME(URIish VAR_URIISH) { return pushURIs.Remove(VAR_URIISH); }
public java.lang.StringBuilder METHOD_NAME(string VAR_STRING) { append0(VAR_STRING); return this; }
public override void METHOD_NAME() { lock (this) { flush(); if (@out != LITERAL_NULL) { try { @out.METHOD_NAME(); @out = LITERAL_NULL; } catch (System.IO.IOException) { setError(); } } } }
public BytesRef[] METHOD_NAME(string VAR_STRING) { var VAR_VAR = new List<BytesRef>(); foreach (IIndexableField field in fields) { if (field.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { BytesRef VAR_BYTESREF = field.GetBinaryValue(); if (VAR_BYTESREF != LITERAL_NULL) { VAR_VAR.Add(VAR_BYTESREF); } } } return VAR_VAR.ToArray(); }
public void METHOD_NAME(int VAR_INT) { bufferPosition -= VAR_INT; }
public void METHOD_NAME(EscherRecord VAR_ESCHERRECORD) { ChildRecords.Add(VAR_ESCHERRECORD); }
public virtual DeleteExpressionResponse METHOD_NAME(DeleteExpressionRequest VAR_DELETEEXPRESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteExpressionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteExpressionResponseUnmarshaller.Instance; return Invoke<DeleteExpressionResponse>(VAR_DELETEEXPRESSIONREQUEST, VAR_VAR); }
public virtual ReorderReceiptRuleSetResponse METHOD_NAME(ReorderReceiptRuleSetRequest VAR_REORDERRECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReorderReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReorderReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<ReorderReceiptRuleSetResponse>(VAR_REORDERRECEIPTRULESETREQUEST, VAR_VAR); }
public FtrHeader(RecordInputStream VAR_RECORDINPUTSTREAM) { recordType = VAR_RECORDINPUTSTREAM.ReadShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadShort(); reserved = new byte[LITERAL_INT]; VAR_RECORDINPUTSTREAM.Read(reserved, LITERAL_INT, LITERAL_INT); }
public virtual PutVoiceConnectorProxyResponse METHOD_NAME(PutVoiceConnectorProxyRequest VAR_PUTVOICECONNECTORPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorProxyResponse>(VAR_PUTVOICECONNECTORPROXYREQUEST, VAR_VAR); }
public virtual DescribeDataSourcePermissionsResponse METHOD_NAME(DescribeDataSourcePermissionsRequest VAR_DESCRIBEDATASOURCEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataSourcePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDataSourcePermissionsResponse>(VAR_DESCRIBEDATASOURCEPERMISSIONSREQUEST, VAR_VAR); }
public sealed override char METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public virtual ListTablesResponse METHOD_NAME(string VAR_STRING) { var VAR_VAR = new ListTablesRequest(); VAR_VAR.ExclusiveStartTableName = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public override string METHOD_NAME() { return TokenString + (IsLeaf ? ((char)LEAF_BYTE).METHOD_NAME() : string.Empty); }
public virtual RefUpdate.Result METHOD_NAME() { return result; }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE, IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE) { return METHOD_NAME(VAR_CELLRANGEADDRESS[], new HSSFConditionalFormattingRule[] { (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE, (HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE }); }
public virtual DescribeImageBuildersResponse METHOD_NAME(DescribeImageBuildersRequest VAR_DESCRIBEIMAGEBUILDERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeImageBuildersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeImageBuildersResponseUnmarshaller.Instance; return Invoke<DescribeImageBuildersResponse>(VAR_DESCRIBEIMAGEBUILDERSREQUEST, VAR_VAR); }
public virtual DescribeMountTargetsResponse METHOD_NAME(DescribeMountTargetsRequest VAR_DESCRIBEMOUNTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMountTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMountTargetsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetsResponse>(VAR_DESCRIBEMOUNTTARGETSREQUEST, VAR_VAR); }
public virtual UpdateClientCertificateResponse METHOD_NAME(UpdateClientCertificateRequest VAR_UPDATECLIENTCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateClientCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateClientCertificateResponseUnmarshaller.Instance; return Invoke<UpdateClientCertificateResponse>(VAR_UPDATECLIENTCERTIFICATEREQUEST, VAR_VAR); }
public String METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE) { int VAR_INT = GetFormatIndex(VAR_CELLVALUERECORDINTERFACE); if (VAR_INT == -LITERAL_INT) { return LITERAL_NULL; } return METHOD_NAME(VAR_INT); }
public virtual void METHOD_NAME() { w1 = LITERAL_INT; w2 = LITERAL_INT; w3 = LITERAL_INT; w4 = LITERAL_INT; w5 = LITERAL_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is TurkishStemmer; }
public virtual void METHOD_NAME() { refLogMessage = LITERAL_NULL; refLogIncludeResult = false; }
public virtual ListPublicKeysResponse METHOD_NAME(ListPublicKeysRequest VAR_LISTPUBLICKEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPublicKeysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPublicKeysResponseUnmarshaller.Instance; return Invoke<ListPublicKeysResponse>(VAR_LISTPUBLICKEYSREQUEST, VAR_VAR); }
public virtual CreateDhcpOptionsResponse METHOD_NAME(CreateDhcpOptionsRequest VAR_CREATEDHCPOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDhcpOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDhcpOptionsResponseUnmarshaller.Instance; return Invoke<CreateDhcpOptionsResponse>(VAR_CREATEDHCPOPTIONSREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ASCIIFoldingFilter(VAR_TOKENSTREAM, preserveOriginal); }
public BlockList(int VAR_INT) { int VAR_INT = ToDirectoryIndex(VAR_INT); if ((VAR_INT & BLOCK_MASK) != LITERAL_INT || VAR_INT == LITERAL_INT) { VAR_INT++; } directory = NGit.Util.BlockList<T>.NewDirectory(VAR_INT); directory[LITERAL_INT] = NGit.Util.BlockList<T>.NewBlock(); tailBlock = directory[LITERAL_INT]; }
public override int METHOD_NAME() { return this._enclosing._size; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { CellRangeAddress VAR_CELLRANGEADDRESS = new CellRangeAddress(VAR_INT, VAR_INT, VAR_INT, VAR_INT); METHOD_NAME(VAR_CELLRANGEADDRESS); }
public virtual DescribeCacheEngineVersionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeCacheEngineVersionsRequest()); }
public virtual DeleteEndpointConfigResponse METHOD_NAME(DeleteEndpointConfigRequest VAR_DELETEENDPOINTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEndpointConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEndpointConfigResponseUnmarshaller.Instance; return Invoke<DeleteEndpointConfigResponse>(VAR_DELETEENDPOINTCONFIGREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT) { int VAR_INT = linkTable.GetFirstInternalSheetIndexForExtIndex(VAR_INT); return FindSheetNameFromIndex(VAR_INT); }
public override void METHOD_NAME(MutableValue VAR_MUTABLEVALUE) { MutableValueBool VAR_MUTABLEVALUEBOOL = (MutableValueBool)VAR_MUTABLEVALUE; Value = VAR_MUTABLEVALUEBOOL.Value; Exists = VAR_MUTABLEVALUEBOOL.Exists; }
public virtual void METHOD_NAME(IQueryNode VAR_IQUERYNODE) { List<IQueryNode> VAR_LIST<IQUERYNODE> = new List<IQueryNode>(); VAR_LIST<IQUERYNODE>.Add(VAR_IQUERYNODE); this.Set(VAR_LIST<IQUERYNODE>); }
public virtual void METHOD_NAME(DateTools.Resolution VAR_DATETOOLS.RESOLUTION) { QueryConfigHandler.Set(ConfigurationKeys.DATE_RESOLUTION, VAR_DATETOOLS.RESOLUTION); }
public static bool METHOD_NAME(int[] VAR_INT[], int VAR_INT) { foreach (int element in VAR_INT[]) { if (element == VAR_INT) { return true; } } return false; }
public virtual ListLogPatternsResponse METHOD_NAME(ListLogPatternsRequest VAR_LISTLOGPATTERNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLogPatternsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLogPatternsResponseUnmarshaller.Instance; return Invoke<ListLogPatternsResponse>(VAR_LISTLOGPATTERNSREQUEST, VAR_VAR); }
public virtual BatchDeleteImageResponse METHOD_NAME(BatchDeleteImageRequest VAR_BATCHDELETEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDeleteImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDeleteImageResponseUnmarshaller.Instance; return Invoke<BatchDeleteImageResponse>(VAR_BATCHDELETEIMAGEREQUEST, VAR_VAR); }
public override void METHOD_NAME(long VAR_LONG) { throw new NotSupportedException(); }
public RightMarginRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_margin = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public virtual bool METHOD_NAME() { return false; }
public virtual RestorePhoneNumberResponse METHOD_NAME(RestorePhoneNumberRequest VAR_RESTOREPHONENUMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestorePhoneNumberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestorePhoneNumberResponseUnmarshaller.Instance; return Invoke<RestorePhoneNumberResponse>(VAR_RESTOREPHONENUMBERREQUEST, VAR_VAR); }
public virtual TestRenderTemplateResponse METHOD_NAME(TestRenderTemplateRequest VAR_TESTRENDERTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TestRenderTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TestRenderTemplateResponseUnmarshaller.Instance; return Invoke<TestRenderTemplateResponse>(VAR_TESTRENDERTEMPLATEREQUEST, VAR_VAR); }
public virtual RevTag METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevTag VAR_REVTAG = (RevTag)objects.Get(VAR_ANYOBJECTID); if (VAR_REVTAG == LITERAL_NULL) { VAR_REVTAG = new RevTag(VAR_ANYOBJECTID); objects.Add(VAR_REVTAG); } return VAR_REVTAG; }
public virtual Query METHOD_NAME(XmlElement VAR_XMLELEMENT) { string VAR_STRING = DOMUtils.GetText(VAR_XMLELEMENT); try { Query VAR_QUERY = LITERAL_NULL; if (unSafeParser != LITERAL_NULL) { lock (unSafeParser) { VAR_QUERY = unSafeParser.Parse(VAR_STRING); } } else { string VAR_STRING = DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, defaultField); QueryParser VAR_QUERYPARSER = CreateQueryParser(VAR_STRING, analyzer); VAR_QUERY = VAR_QUERYPARSER.Parse(VAR_STRING); } VAR_QUERY.Boost = DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, LITERAL_FLOAT); return VAR_QUERY; } catch (ParseException e1) { throw new ParserException(e1.Message); } }
public virtual CreateNetworkAclResponse METHOD_NAME(CreateNetworkAclRequest VAR_CREATENETWORKACLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkAclRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkAclResponseUnmarshaller.Instance; return Invoke<CreateNetworkAclResponse>(VAR_CREATENETWORKACLREQUEST, VAR_VAR); }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY, bool VAR_BOOL) { return ((ThreeWayMerger)METHOD_NAME(VAR_REPOSITORY)); }
public BufferedWriter(java.io.Writer VAR_JAVA.IO.WRITER, int VAR_INT) : base(@out) { if (VAR_INT <= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_JAVA.IO.WRITER = VAR_JAVA.IO.WRITER; this.buf = new char[VAR_INT]; }
public virtual ListConfigurationHistoryResponse METHOD_NAME(ListConfigurationHistoryRequest VAR_LISTCONFIGURATIONHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListConfigurationHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListConfigurationHistoryResponseUnmarshaller.Instance; return Invoke<ListConfigurationHistoryResponse>(VAR_LISTCONFIGURATIONHISTORYREQUEST, VAR_VAR); }
public IRequest METHOD_NAME(GetChangeRequest VAR_GETCHANGEREQUEST) { var VAR_VAR = new DefaultRequest(VAR_GETCHANGEREQUEST, LITERAL_STRING); VAR_VAR.HttpMethod = LITERAL_STRING; if (!VAR_GETCHANGEREQUEST.IsSetId()) throw new AmazonRoute53Exception(LITERAL_STRING); VAR_VAR.AddPathResource(LITERAL_STRING, StringUtils.FromString(VAR_GETCHANGEREQUEST.Id)); VAR_VAR.ResourcePath = LITERAL_STRING; VAR_VAR.MarshallerVersion = LITERAL_INT; return VAR_VAR; }
public override byte[] METHOD_NAME() { throw new LargeObjectException(id); }
public virtual ModifyInstanceCreditSpecificationResponse METHOD_NAME(ModifyInstanceCreditSpecificationRequest VAR_MODIFYINSTANCECREDITSPECIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceCreditSpecificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceCreditSpecificationResponseUnmarshaller.Instance; return Invoke<ModifyInstanceCreditSpecificationResponse>(VAR_MODIFYINSTANCECREDITSPECIFICATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(RevCommit VAR_REVCOMMIT) { BlockRevQueue.Block VAR_BLOCKREVQUEUE.BLOCK = head; if (VAR_BLOCKREVQUEUE.BLOCK == LITERAL_NULL || !VAR_BLOCKREVQUEUE.BLOCK.CanUnpop()) { VAR_BLOCKREVQUEUE.BLOCK = free.NewBlock(); VAR_BLOCKREVQUEUE.BLOCK.ResetToEnd(); VAR_BLOCKREVQUEUE.BLOCK.next = head; head = VAR_BLOCKREVQUEUE.BLOCK; } VAR_BLOCKREVQUEUE.BLOCK.Unpop(VAR_REVCOMMIT); }
public virtual SpanTermQuery METHOD_NAME(Term VAR_TERM) { CheckMax(); return new SpanTermQuery(VAR_TERM); }
public StringWriter(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } buf = new java.lang.StringBuffer(VAR_INT); @lock = buf; }
public override string METHOD_NAME() { return base.METHOD_NAME() + LITERAL_STRING + patternText + LITERAL_STRING; }
public ATNConfig METHOD_NAME(ATNConfig VAR_ATNCONFIG, PrecedencePredicateTransition VAR_PRECEDENCEPREDICATETRANSITION, bool VAR_BOOL, bool VAR_BOOL, bool VAR_BOOL) { if (debug) { ConsoleWriteLine(LITERAL_STRING + VAR_BOOL + LITERAL_STRING + VAR_PRECEDENCEPREDICATETRANSITION.precedence + LITERAL_STRING + LITERAL_STRING); if (parser != LITERAL_NULL) { ConsoleWriteLine(LITERAL_STRING + parser.GetRuleInvocationStack()); } } ATNConfig VAR_ATNCONFIG = LITERAL_NULL; if (VAR_BOOL && VAR_BOOL) { if (VAR_BOOL) { int VAR_INT = input.Index; input.Seek(startIndex); bool VAR_BOOL = EvalSemanticContext(VAR_PRECEDENCEPREDICATETRANSITION.Predicate, context, VAR_ATNCONFIG.alt, VAR_BOOL); input.Seek(VAR_INT); if (VAR_BOOL) { VAR_ATNCONFIG = new ATNConfig(VAR_ATNCONFIG, VAR_PRECEDENCEPREDICATETRANSITION.target); } } else { SemanticContext VAR_SEMANTICCONTEXT = SemanticContext.AndOp(VAR_ATNCONFIG.semanticContext, VAR_PRECEDENCEPREDICATETRANSITION.Predicate); VAR_ATNCONFIG = new ATNConfig(VAR_ATNCONFIG, VAR_PRECEDENCEPREDICATETRANSITION.target, VAR_SEMANTICCONTEXT); } } else { VAR_ATNCONFIG = new ATNConfig(VAR_ATNCONFIG, VAR_PRECEDENCEPREDICATETRANSITION.target); } if (debug) ConsoleWriteLine(LITERAL_STRING + VAR_ATNCONFIG); return VAR_ATNCONFIG; }
public virtual GetDomainStatisticsReportResponse METHOD_NAME(GetDomainStatisticsReportRequest VAR_GETDOMAINSTATISTICSREPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainStatisticsReportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainStatisticsReportResponseUnmarshaller.Instance; return Invoke<GetDomainStatisticsReportResponse>(VAR_GETDOMAINSTATISTICSREPORTREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!base.METHOD_NAME(VAR_OBJECT)) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } TermRangeQuery VAR_TERMRANGEQUERY = (TermRangeQuery)VAR_OBJECT; if (includeLower != VAR_TERMRANGEQUERY.includeLower) { return false; } if (includeUpper != VAR_TERMRANGEQUERY.includeUpper) { return false; } if (lowerTerm == LITERAL_NULL) { if (VAR_TERMRANGEQUERY.lowerTerm != LITERAL_NULL) { return false; } } else if (!lowerTerm.METHOD_NAME(VAR_TERMRANGEQUERY.lowerTerm)) { return false; } if (upperTerm == LITERAL_NULL) { if (VAR_TERMRANGEQUERY.upperTerm != LITERAL_NULL) { return false; } } else if (!upperTerm.METHOD_NAME(VAR_TERMRANGEQUERY.upperTerm)) { return false; } return true; }
public virtual DescribeTransitGatewayRouteTablesResponse METHOD_NAME(DescribeTransitGatewayRouteTablesRequest VAR_DESCRIBETRANSITGATEWAYROUTETABLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewayRouteTablesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewayRouteTablesResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayRouteTablesResponse>(VAR_DESCRIBETRANSITGATEWAYROUTETABLESREQUEST, VAR_VAR); }
public BootstrapActionConfig METHOD_NAME() { if (replace) { args.Add(LITERAL_STRING); } return new BootstrapActionConfig { Name = LITERAL_STRING, ScriptBootstrapAction = new ScriptBootstrapActionConfig { Path = string.Format(CultureInfo.InvariantCulture, LITERAL_STRING), Args = args } }; }
public virtual bool METHOD_NAME(byte[] VAR_BYTE[]) { if (decoder == LITERAL_NULL) { decoder = cs.newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPORT); decoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPORT); } java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = java.nio.ByteBuffer.wrap(VAR_BYTE[]); java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = java.nio.CharBuffer.allocate((int)(VAR_BYTE[].Length * decoder.maxCharsPerByte())); java.nio.charset.CoderResult VAR_JAVA.NIO.CHARSET.CODERRESULT = decoder.decode(VAR_JAVA.NIO.BYTEBUFFER, VAR_JAVA.NIO.CHARBUFFER, true); return !VAR_JAVA.NIO.CHARSET.CODERRESULT.isError(); }
public virtual UpdatePipelineResponse METHOD_NAME(UpdatePipelineRequest VAR_UPDATEPIPELINEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePipelineRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePipelineResponseUnmarshaller.Instance; return Invoke<UpdatePipelineResponse>(VAR_UPDATEPIPELINEREQUEST, VAR_VAR); }
public bool METHOD_NAME() { int VAR_INT = _significand.BitLength() - C_64; return _significand.CompareTo(BI_MIN_BASE.ShiftLeft(VAR_INT)) > LITERAL_INT; }
public virtual AssociateContactWithAddressBookResponse METHOD_NAME(AssociateContactWithAddressBookRequest VAR_ASSOCIATECONTACTWITHADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateContactWithAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateContactWithAddressBookResponseUnmarshaller.Instance; return Invoke<AssociateContactWithAddressBookResponse>(VAR_ASSOCIATECONTACTWITHADDRESSBOOKREQUEST, VAR_VAR); }
public virtual DeleteFolderResponse METHOD_NAME(DeleteFolderRequest VAR_DELETEFOLDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFolderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFolderResponseUnmarshaller.Instance; return Invoke<DeleteFolderResponse>(VAR_DELETEFOLDERREQUEST, VAR_VAR); }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public virtual DescribeJobFlowsResponse METHOD_NAME() { return METHOD_NAME(new DescribeJobFlowsRequest()); }
public override float METHOD_NAME(float VAR_FLOAT) { return BaselineTf(VAR_FLOAT); }
public virtual DescribePublishingDestinationResponse METHOD_NAME(DescribePublishingDestinationRequest VAR_DESCRIBEPUBLISHINGDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePublishingDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePublishingDestinationResponseUnmarshaller.Instance; return Invoke<DescribePublishingDestinationResponse>(VAR_DESCRIBEPUBLISHINGDESTINATIONREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { return LEFT_ID; }
public static NormalisedDecimal METHOD_NAME(BigInteger VAR_BIGINTEGER, int VAR_INT) { int VAR_INT; if (VAR_INT > LITERAL_INT || VAR_INT < LITERAL_INT) { int VAR_INT = (LITERAL_INT << LITERAL_INT) - VAR_INT * LOG_BASE_10_OF_2_TIMES_2_POW_20; VAR_INT += C_2_POW_19; VAR_INT = -(VAR_INT >> LITERAL_INT); } else { VAR_INT = LITERAL_INT; } MutableFPNumber VAR_MUTABLEFPNUMBER = new MutableFPNumber(VAR_BIGINTEGER, VAR_INT); if (VAR_INT != LITERAL_INT) { VAR_MUTABLEFPNUMBER.multiplyByPowerOfTen(-VAR_INT); } switch (VAR_MUTABLEFPNUMBER.Get64BitNormalisedExponent()) { case LITERAL_INT: if (VAR_MUTABLEFPNUMBER.IsAboveMinRep()) { break; } goto case LITERAL_INT; case LITERAL_INT: case LITERAL_INT: VAR_MUTABLEFPNUMBER.multiplyByPowerOfTen(LITERAL_INT); VAR_INT--; break; case LITERAL_INT: case LITERAL_INT: break; case LITERAL_INT: if (VAR_MUTABLEFPNUMBER.IsBelowMaxRep()) { break; } goto case LITERAL_INT; case LITERAL_INT: VAR_MUTABLEFPNUMBER.multiplyByPowerOfTen(-LITERAL_INT); VAR_INT++; break; default: throw new InvalidOperationException(LITERAL_STRING + VAR_MUTABLEFPNUMBER.Get64BitNormalisedExponent() + LITERAL_STRING); } VAR_MUTABLEFPNUMBER.Normalise64bit(); return VAR_MUTABLEFPNUMBER.CreateNormalisedDecimal(VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + minIncl + LITERAL_STRING + maxIncl + LITERAL_STRING; }
public virtual void METHOD_NAME(PersonIdent VAR_PERSONIDENT) { destination.METHOD_NAME(VAR_PERSONIDENT); }
public void METHOD_NAME(int VAR_INT) { zzLexicalState = VAR_INT; }
public Trie(bool VAR_BOOL) { rows.Add(new Row()); root = LITERAL_INT; this.VAR_BOOL = VAR_BOOL; }
public DeleteTagsRequest(List<string> VAR_LIST<STRING>) { _resources = VAR_LIST<STRING>; }
public override Object METHOD_NAME() { ObjectProtectRecord VAR_OBJECTPROTECTRECORD = new ObjectProtectRecord(); VAR_OBJECTPROTECTRECORD.field_1_protect = field_1_protect; return VAR_OBJECTPROTECTRECORD; }
public static FuncVarPtg METHOD_NAME(String VAR_STRING, int VAR_INT) { return METHOD_NAME(VAR_INT, LookupIndex(VAR_STRING)); }
public virtual void METHOD_NAME() { this.processors.METHOD_NAME(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteDouble(Value); }
public NullReader(int VAR_INT) { this.VAR_INT = VAR_INT; }
public virtual CreateVaultResponse METHOD_NAME(CreateVaultRequest VAR_CREATEVAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVaultResponseUnmarshaller.Instance; return Invoke<CreateVaultResponse>(VAR_CREATEVAULTREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, E VAR_E) { object[] VAR_OBJECT[] = array; int VAR_INT = _size; if (VAR_INT > VAR_INT || VAR_INT < LITERAL_INT) { throwIndexOutOfBoundsException(VAR_INT, VAR_INT); } if (VAR_INT < VAR_OBJECT[].Length) { System.Array.Copy(VAR_OBJECT[], VAR_INT, VAR_OBJECT[], VAR_INT + LITERAL_INT, VAR_INT - VAR_INT); } else { object[] VAR_OBJECT[] = new object[newCapacity(VAR_INT)]; System.Array.Copy(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[], LITERAL_INT, VAR_INT); System.Array.Copy(VAR_OBJECT[], VAR_INT, VAR_OBJECT[], VAR_INT + LITERAL_INT, VAR_INT - VAR_INT); array = VAR_OBJECT[] = VAR_OBJECT[]; } VAR_OBJECT[][VAR_INT] = VAR_E; _size = VAR_INT + LITERAL_INT; modCount++; }
public override int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (pos < size) { VAR_INT = Math.Min(VAR_INT, size - pos); s.CopyTo(pos, VAR_CHAR[], VAR_INT, pos + VAR_INT - pos); pos += VAR_INT; return VAR_INT; } else { s = LITERAL_NULL; return -LITERAL_INT; } }
public virtual DeleteDeploymentResponse METHOD_NAME(DeleteDeploymentRequest VAR_DELETEDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeploymentResponseUnmarshaller.Instance; return Invoke<DeleteDeploymentResponse>(VAR_DELETEDEPLOYMENTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_STRING + m_bitsPerValue + LITERAL_STRING + Count + LITERAL_STRING + blocks.Length + LITERAL_STRING; }
public VectorValueSource(IList<ValueSource> VAR_ILIST<VALUESOURCE>) { this.m_sources = VAR_ILIST<VALUESOURCE>; }
public HSSFShape(HSSFShape VAR_HSSFSHAPE, HSSFAnchor VAR_HSSFANCHOR) { this.VAR_HSSFSHAPE = VAR_HSSFSHAPE; this.VAR_HSSFANCHOR = VAR_HSSFANCHOR; this._escherContainer = CreateSpContainer(); _optRecord = (EscherOptRecord)_escherContainer.GetChildById(EscherOptRecord.RECORD_ID); _objRecord = CreateObjRecord(); }
public GalicianMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DescribeFpgaImageAttributeResponse METHOD_NAME(DescribeFpgaImageAttributeRequest VAR_DESCRIBEFPGAIMAGEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFpgaImageAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFpgaImageAttributeResponseUnmarshaller.Instance; return Invoke<DescribeFpgaImageAttributeResponse>(VAR_DESCRIBEFPGAIMAGEATTRIBUTEREQUEST, VAR_VAR); }
public override ValueFiller METHOD_NAME() { return new ValueFillerAnonymousInnerClassHelper(this); }
public static int METHOD_NAME(int VAR_INT, object VAR_OBJECT) { return METHOD_NAME(VAR_INT, VAR_OBJECT != LITERAL_NULL ? VAR_OBJECT.GetHashCode() : LITERAL_INT); }
public virtual DescribeModelVersionsResponse METHOD_NAME(DescribeModelVersionsRequest VAR_DESCRIBEMODELVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeModelVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeModelVersionsResponseUnmarshaller.Instance; return Invoke<DescribeModelVersionsResponse>(VAR_DESCRIBEMODELVERSIONSREQUEST, VAR_VAR); }
public static IndexCommit METHOD_NAME(Store.Directory VAR_STORE.DIRECTORY, string VAR_STRING) { IList<IndexCommit> VAR_ILIST<INDEXCOMMIT> = DirectoryReader.ListCommits(VAR_STORE.DIRECTORY); foreach (IndexCommit ic in VAR_ILIST<INDEXCOMMIT>) { IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING> = ic.UserData; string VAR_STRING = LITERAL_NULL; if (VAR_IDICTIONARY<STRING, STRING> != LITERAL_NULL) { VAR_IDICTIONARY<STRING, STRING>.TryGetValue(USER_DATA, out VAR_STRING); } if (VAR_STRING != LITERAL_NULL && VAR_STRING.Equals(VAR_STRING, StringComparison.Ordinal)) { return ic; } } throw new IOException(LITERAL_STRING + VAR_STRING); }
public IndexEnum(FST<long?> VAR_FST<LONG?>) { fstEnum = new BytesRefFSTEnum<long?>(VAR_FST<LONG?>); }
public HSSFEvaluationSheet(HSSFSheet VAR_HSSFSHEET) { _hs = VAR_HSSFSHEET; }
public virtual void METHOD_NAME(int VAR_INT) { if (upto == buffer.Length) { Flush(); } buffer[upto++] = (byte)VAR_INT; }
public virtual PutPartnerEventsResponse METHOD_NAME(PutPartnerEventsRequest VAR_PUTPARTNEREVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutPartnerEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutPartnerEventsResponseUnmarshaller.Instance; return Invoke<PutPartnerEventsResponse>(VAR_PUTPARTNEREVENTSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return thin; }
public virtual string METHOD_NAME() { return ToString(); }
public PackConfig(Repository VAR_REPOSITORY) { FromConfig(VAR_REPOSITORY.GetConfig()); }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual ListTrafficPolicyInstancesByHostedZoneResponse METHOD_NAME(ListTrafficPolicyInstancesByHostedZoneRequest VAR_LISTTRAFFICPOLICYINSTANCESBYHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrafficPolicyInstancesByHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller.Instance; return Invoke<ListTrafficPolicyInstancesByHostedZoneResponse>(VAR_LISTTRAFFICPOLICYINSTANCESBYHOSTEDZONEREQUEST, VAR_VAR); }
public EscherRecord METHOD_NAME(short VAR_SHORT) { return METHOD_NAME(VAR_SHORT, EscherRecords); }
public virtual byte[] METHOD_NAME() { return path; }
public void METHOD_NAME(Font VAR_FONT) { font = VAR_FONT; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (int)((uint)VAR_INT >> LITERAL_INT); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); VAR_INT[][VAR_INT++] = VAR_INT & LITERAL_INT; } }
public bool METHOD_NAME() { return anchoringBounds; }
public void METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[], int VAR_INT) { int VAR_INT = FindBiggest(VAR_INT[]); int VAR_INT = FindBiggest(VAR_INT[]); int VAR_INT = FindSmallest(VAR_INT[]); int VAR_INT = FindSmallest(VAR_INT[]); HSSFPolygon VAR_HSSFPOLYGON = escherGroup.CreatePolygon(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT, VAR_INT)); VAR_HSSFPOLYGON.SetPolygonDrawArea(VAR_INT - VAR_INT, VAR_INT - VAR_INT); VAR_HSSFPOLYGON.SetPoints(AddToAll(VAR_INT[], -VAR_INT), AddToAll(VAR_INT[], -VAR_INT)); VAR_HSSFPOLYGON.SetLineStyleColor(foreground.R, foreground.G, foreground.B); VAR_HSSFPOLYGON.LineWidth = (LITERAL_INT); VAR_HSSFPOLYGON.IsNoFill = (true); }
public new string METHOD_NAME() { return GetCredentials().METHOD_NAME(); }
public virtual PutDedicatedIpWarmupAttributesResponse METHOD_NAME(PutDedicatedIpWarmupAttributesRequest VAR_PUTDEDICATEDIPWARMUPATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutDedicatedIpWarmupAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutDedicatedIpWarmupAttributesResponseUnmarshaller.Instance; return Invoke<PutDedicatedIpWarmupAttributesResponse>(VAR_PUTDEDICATEDIPWARMUPATTRIBUTESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char VAR_CHAR) { METHOD_NAME(VAR_CHAR.ToString()); }
public virtual string METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, LITERAL_STRING); }
public virtual CompareFacesResponse METHOD_NAME(CompareFacesRequest VAR_COMPAREFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CompareFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CompareFacesResponseUnmarshaller.Instance; return Invoke<CompareFacesResponse>(VAR_COMPAREFACESREQUEST, VAR_VAR); }
public PatchFormatException(IList<FormatError> VAR_ILIST<FORMATERROR>) : base(MessageFormat.Format(JGitText.Get().patchFormatException, errors)) { this.VAR_ILIST<FORMATERROR> = VAR_ILIST<FORMATERROR>; }
public virtual string METHOD_NAME() { sb.Append(FormatTrailer()); return sb.ToString(); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } for (int i = LITERAL_INT; i < m_maxLevels - LITERAL_INT; i++) { if (VAR_DOUBLE > levelW[i] && VAR_DOUBLE > levelH[i]) { return i + LITERAL_INT; } } return m_maxLevels; }
public override int[] METHOD_NAME() { int[] VAR_INT[] = base.METHOD_NAME(); boost = new float[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_SINGLE)]; termState = new TermContext[ArrayUtil.Oversize(VAR_INT[].Length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)]; Debug.Assert(termState.Length >= VAR_INT[].Length && boost.Length >= VAR_INT[].Length); return VAR_INT[]; }
public void METHOD_NAME(TextReader VAR_TEXTREADER) { zzReader = VAR_TEXTREADER; zzAtBOL = true; zzAtEOF = false; zzEOFDone = false; zzEndRead = zzStartRead = LITERAL_INT; zzCurrentPos = zzMarkedPos = LITERAL_INT; yyline = yyChar = yycolumn = LITERAL_INT; zzLexicalState = YYINITIAL; if (zzBuffer.Length > ZZ_BUFFERSIZE) { zzBuffer = new char[ZZ_BUFFERSIZE]; } }
public override void METHOD_NAME(string VAR_STRING) { throw new NotSupportedException(); }
public virtual StopTrainingDocumentClassifierResponse METHOD_NAME(StopTrainingDocumentClassifierRequest VAR_STOPTRAININGDOCUMENTCLASSIFIERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTrainingDocumentClassifierRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTrainingDocumentClassifierResponseUnmarshaller.Instance; return Invoke<StopTrainingDocumentClassifierResponse>(VAR_STOPTRAININGDOCUMENTCLASSIFIERREQUEST, VAR_VAR); }
public TermStats(int VAR_INT, long VAR_LONG) { this.DocFreq = VAR_INT; this.TotalTermFreq = VAR_LONG; }
public virtual GetAuthorizersResponse METHOD_NAME(GetAuthorizersRequest VAR_GETAUTHORIZERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetAuthorizersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetAuthorizersResponseUnmarshaller.Instance; return Invoke<GetAuthorizersResponse>(VAR_GETAUTHORIZERSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RepositoryEvent VAR_REPOSITORYEVENT) { IList<ListenerHandle> VAR_ILIST<LISTENERHANDLE> = lists.Get(VAR_REPOSITORYEVENT.GetListenerType()); if (VAR_ILIST<LISTENERHANDLE> != LITERAL_NULL) { foreach (ListenerHandle handle in VAR_ILIST<LISTENERHANDLE>) { VAR_REPOSITORYEVENT.METHOD_NAME(handle.listener); } } }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(include.METHOD_NAME(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(exclude.METHOD_NAME(VAR_STRING)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Convert.METHOD_NAME(pre)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Convert.METHOD_NAME(post)); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual SearchGameSessionsResponse METHOD_NAME(SearchGameSessionsRequest VAR_SEARCHGAMESESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchGameSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchGameSessionsResponseUnmarshaller.Instance; return Invoke<SearchGameSessionsResponse>(VAR_SEARCHGAMESESSIONSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { return VAR_INT; } for (int i = LITERAL_INT; i < VAR_INT; i++) { switch (VAR_CHAR[][i]) { case LITERAL_CHAR: case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; case LITERAL_CHAR: VAR_CHAR[][i] = LITERAL_CHAR; break; } } VAR_INT = Step1(VAR_CHAR[], VAR_INT); VAR_INT = Step2(VAR_CHAR[], VAR_INT); VAR_INT = Step3(VAR_CHAR[], VAR_INT); VAR_INT = Norm1(VAR_CHAR[], VAR_INT); VAR_INT = Norm2(VAR_CHAR[], VAR_INT); return VAR_INT; }
public virtual PutConfigurationSetReputationOptionsResponse METHOD_NAME(PutConfigurationSetReputationOptionsRequest VAR_PUTCONFIGURATIONSETREPUTATIONOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConfigurationSetReputationOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConfigurationSetReputationOptionsResponseUnmarshaller.Instance; return Invoke<PutConfigurationSetReputationOptionsResponse>(VAR_PUTCONFIGURATIONSETREPUTATIONOPTIONSREQUEST, VAR_VAR); }
public virtual ListAttendeeTagsResponse METHOD_NAME(ListAttendeeTagsRequest VAR_LISTATTENDEETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAttendeeTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAttendeeTagsResponseUnmarshaller.Instance; return Invoke<ListAttendeeTagsResponse>(VAR_LISTATTENDEETAGSREQUEST, VAR_VAR); }
public static void METHOD_NAME(String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } int VAR_INT = VAR_STRING.Length; if (VAR_INT < LITERAL_INT || VAR_INT > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } for (int i = LITERAL_INT; i < VAR_INT; i++) { char VAR_CHAR = VAR_STRING[i]; switch (VAR_CHAR) { case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: break; default: continue; } throw new ArgumentException(LITERAL_STRING + VAR_CHAR + LITERAL_STRING + i + LITERAL_STRING + VAR_STRING + LITERAL_STRING); } if (VAR_STRING[LITERAL_INT] == LITERAL_CHAR || VAR_STRING[VAR_INT - LITERAL_INT] == LITERAL_CHAR) { throw new ArgumentException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } }
public long METHOD_NAME() { return outerInstance.GetPointer(); }
public virtual void METHOD_NAME(DataOutput VAR_DATAOUTPUT) { Debug.Assert(VAR_DATAOUTPUT != LITERAL_NULL); this.m_out = VAR_DATAOUTPUT; m_off = LITERAL_INT; m_ord = LITERAL_INT; m_finished = false; }
public override string METHOD_NAME(string VAR_STRING) { var VAR_VAR = new StringBuilder(); if (!term.Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_VAR.Append(term.Field); VAR_VAR.Append(LITERAL_STRING); } VAR_VAR.Append(term.Text()); VAR_VAR.Append(LITERAL_CHAR); VAR_VAR.Append(Convert.METHOD_NAME(maxEdits)); VAR_VAR.Append(ToStringUtils.Boost(Boost)); return VAR_VAR.METHOD_NAME(); }
public override RevFilter METHOD_NAME() { return new NGit.Revwalk.Filter.MaxCountRevFilter(maxCount); }
public virtual DisableUserResponse METHOD_NAME(DisableUserRequest VAR_DISABLEUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableUserResponseUnmarshaller.Instance; return Invoke<DisableUserResponse>(VAR_DISABLEUSERREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; ExtendStringToMatchByOneCharacter(VAR_CHAR); } }
public virtual StopTrainingJobResponse METHOD_NAME(StopTrainingJobRequest VAR_STOPTRAININGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopTrainingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopTrainingJobResponseUnmarshaller.Instance; return Invoke<StopTrainingJobResponse>(VAR_STOPTRAININGJOBREQUEST, VAR_VAR); }
public override IndexInput METHOD_NAME(string VAR_STRING, IOContext VAR_IOCONTEXT) { lock (this) { EnsureOpen(); Debug.Assert(!openForWrite); string VAR_STRING = IndexFileNames.StripSegmentName(VAR_STRING); if (!entries.TryGetValue(VAR_STRING, out FileEntry entry) || entry == LITERAL_NULL) { throw new FileNotFoundException(LITERAL_STRING + VAR_STRING + LITERAL_STRING + VAR_STRING + LITERAL_STRING + string.Format(J2N.Text.StringFormatter.InvariantCulture, LITERAL_STRING, entries.Keys) + LITERAL_STRING); } return handle.OpenSlice(VAR_STRING, entry.Offset, entry.Length); } }
public virtual GetSnowballUsageResponse METHOD_NAME(GetSnowballUsageRequest VAR_GETSNOWBALLUSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSnowballUsageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSnowballUsageResponseUnmarshaller.Instance; return Invoke<GetSnowballUsageResponse>(VAR_GETSNOWBALLUSAGEREQUEST, VAR_VAR); }
public virtual DeleteUserProfileResponse METHOD_NAME(DeleteUserProfileRequest VAR_DELETEUSERPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUserProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUserProfileResponseUnmarshaller.Instance; return Invoke<DeleteUserProfileResponse>(VAR_DELETEUSERPROFILEREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(ConfigLine VAR_CONFIGLINE, ConfigLine VAR_CONFIGLINE) { var VAR_VAR = Compare2(VAR_CONFIGLINE.section, VAR_CONFIGLINE.subsection, VAR_CONFIGLINE.name, VAR_CONFIGLINE.section, VAR_CONFIGLINE.subsection, VAR_CONFIGLINE.name); return VAR_VAR != LITERAL_INT ? VAR_VAR : string.CompareOrdinal(VAR_CONFIGLINE.VAR_VAR, VAR_CONFIGLINE.VAR_VAR); }
public override java.nio.LongBuffer METHOD_NAME() { return duplicate(); }
public IComment METHOD_NAME(IClientAnchor VAR_ICLIENTANCHOR) { return CreateComment((HSSFAnchor)VAR_ICLIENTANCHOR); }
public CollatedTermAttributeImpl(Collator VAR_COLLATOR) { this.VAR_COLLATOR = (Collator)VAR_COLLATOR.Clone(); }
public virtual UpdatePipelineStatusResponse METHOD_NAME(UpdatePipelineStatusRequest VAR_UPDATEPIPELINESTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdatePipelineStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdatePipelineStatusResponseUnmarshaller.Instance; return Invoke<UpdatePipelineStatusResponse>(VAR_UPDATEPIPELINESTATUSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], StringBuilder VAR_STRINGBUILDER) { ToHexCharArray(VAR_CHAR[]); VAR_STRINGBUILDER.Append(VAR_CHAR[], LITERAL_INT, Constants.OBJECT_ID_STRING_LENGTH); }
public FST.BytesReader METHOD_NAME() { if (fst == LITERAL_NULL) { return LITERAL_NULL; } else { return fst.METHOD_NAME(); } }
public virtual CreateRouteTableResponse METHOD_NAME(CreateRouteTableRequest VAR_CREATEROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRouteTableResponseUnmarshaller.Instance; return Invoke<CreateRouteTableResponse>(VAR_CREATEROUTETABLEREQUEST, VAR_VAR); }
public override string METHOD_NAME(string VAR_STRING) { return LITERAL_STRING + _childQuery + LITERAL_STRING; }
public virtual DisassociateClientVpnTargetNetworkResponse METHOD_NAME(DisassociateClientVpnTargetNetworkRequest VAR_DISASSOCIATECLIENTVPNTARGETNETWORKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateClientVpnTargetNetworkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateClientVpnTargetNetworkResponseUnmarshaller.Instance; return Invoke<DisassociateClientVpnTargetNetworkResponse>(VAR_DISASSOCIATECLIENTVPNTARGETNETWORKREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + GetValueString() + LITERAL_STRING + LITERAL_STRING + GetChild().METHOD_NAME() + LITERAL_STRING; }
public virtual GetExportJobsResponse METHOD_NAME(GetExportJobsRequest VAR_GETEXPORTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExportJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExportJobsResponseUnmarshaller.Instance; return Invoke<GetExportJobsResponse>(VAR_GETEXPORTJOBSREQUEST, VAR_VAR); }
public virtual UpdateBaiduChannelResponse METHOD_NAME(UpdateBaiduChannelRequest VAR_UPDATEBAIDUCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBaiduChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBaiduChannelResponseUnmarshaller.Instance; return Invoke<UpdateBaiduChannelResponse>(VAR_UPDATEBAIDUCHANNELREQUEST, VAR_VAR); }
public virtual ImportApiResponse METHOD_NAME(ImportApiRequest VAR_IMPORTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportApiResponseUnmarshaller.Instance; return Invoke<ImportApiResponse>(VAR_IMPORTAPIREQUEST, VAR_VAR); }
public override int METHOD_NAME() { lock (this) { return pos < count ? buffer[pos++] & unchecked((int)(LITERAL_INT)) : -LITERAL_INT; } }
public virtual GetUserResponse METHOD_NAME(GetUserRequest VAR_GETUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUserResponseUnmarshaller.Instance; return Invoke<GetUserResponse>(VAR_GETUSERREQUEST, VAR_VAR); }
public virtual GetHealthCheckLastFailureReasonResponse METHOD_NAME(GetHealthCheckLastFailureReasonRequest VAR_GETHEALTHCHECKLASTFAILUREREASONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHealthCheckLastFailureReasonRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHealthCheckLastFailureReasonResponseUnmarshaller.Instance; return Invoke<GetHealthCheckLastFailureReasonResponse>(VAR_GETHEALTHCHECKLASTFAILUREREASONREQUEST, VAR_VAR); }
public string METHOD_NAME() { return query; }
public static void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT, long VAR_LONG) { java.util.Arrays.checkStartAndEnd(VAR_LONG[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_LONG[][i] = VAR_LONG; } } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is StatePair) { StatePair VAR_STATEPAIR = (StatePair)VAR_OBJECT; return VAR_STATEPAIR.S1 == S1 && VAR_STATEPAIR.S2 == S2; } else { return false; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(GetString()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ExecutePolicyResponse METHOD_NAME(ExecutePolicyRequest VAR_EXECUTEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExecutePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExecutePolicyResponseUnmarshaller.Instance; return Invoke<ExecutePolicyResponse>(VAR_EXECUTEPOLICYREQUEST, VAR_VAR); }
public virtual UpdateEmailTemplateResponse METHOD_NAME(UpdateEmailTemplateRequest VAR_UPDATEEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEmailTemplateResponseUnmarshaller.Instance; return Invoke<UpdateEmailTemplateResponse>(VAR_UPDATEEMAILTEMPLATEREQUEST, VAR_VAR); }
public bool METHOD_NAME(Object VAR_OBJECT) { CustomProperty VAR_CUSTOMPROPERTY = (CustomProperty)VAR_OBJECT; String VAR_STRING = VAR_CUSTOMPROPERTY.Name; String VAR_STRING = this.Name; bool VAR_BOOL = true; if (VAR_STRING == LITERAL_NULL) VAR_BOOL = VAR_STRING == LITERAL_NULL; elseequalNames = VAR_STRING.Equals(VAR_STRING); return VAR_BOOL && VAR_CUSTOMPROPERTY.ID == this.ID && VAR_CUSTOMPROPERTY.Type == this.Type && VAR_CUSTOMPROPERTY.Value.Equals(this.Value); }
public DuplicateFormatFlagsException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } flags = VAR_STRING; }
public override void METHOD_NAME(int VAR_INT) { lock (this) { marklimit = VAR_INT; markpos = pos; } }
public int METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { int VAR_INT; VAR_INT = NB.CompareUInt32(w1, Mask(LITERAL_INT, VAR_ANYOBJECTID.w1)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w2, Mask(LITERAL_INT, VAR_ANYOBJECTID.w2)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w3, Mask(LITERAL_INT, VAR_ANYOBJECTID.w3)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = NB.CompareUInt32(w4, Mask(LITERAL_INT, VAR_ANYOBJECTID.w4)); if (VAR_INT != LITERAL_INT) { return VAR_INT; } return NB.CompareUInt32(w5, Mask(LITERAL_INT, VAR_ANYOBJECTID.w5)); }
public virtual UpdateRequestValidatorResponse METHOD_NAME(UpdateRequestValidatorRequest VAR_UPDATEREQUESTVALIDATORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRequestValidatorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRequestValidatorResponseUnmarshaller.Instance; return Invoke<UpdateRequestValidatorResponse>(VAR_UPDATEREQUESTVALIDATORREQUEST, VAR_VAR); }
public Extensions(char VAR_CHAR) { this.VAR_CHAR = VAR_CHAR; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new EnglishMinimalStemFilter(VAR_TOKENSTREAM); }
public virtual QueryText METHOD_NAME(int VAR_INT) { return values[VAR_INT]; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(_data.Length); VAR_ILITTLEENDIANOUTPUT.Write(_data); }
public virtual void METHOD_NAME(QueryConfigHandler VAR_QUERYCONFIGHANDLER) { this.queryConfig = VAR_QUERYCONFIGHANDLER; foreach (IQueryNodeProcessor processor in this.processors) { processor.METHOD_NAME(this.queryConfig); } }
public virtual DeleteGameSessionQueueResponse METHOD_NAME(DeleteGameSessionQueueRequest VAR_DELETEGAMESESSIONQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGameSessionQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGameSessionQueueResponseUnmarshaller.Instance; return Invoke<DeleteGameSessionQueueResponse>(VAR_DELETEGAMESESSIONQUEUEREQUEST, VAR_VAR); }
public List<DFAState> METHOD_NAME() { List<DFAState> VAR_LIST<DFASTATE> = new List<DFAState>(states.Keys); VAR_LIST<DFASTATE>.Sort((x, y) => x.stateNumber - y.stateNumber); return VAR_LIST<DFASTATE>; }
public static CmpOp METHOD_NAME(String VAR_STRING) { int VAR_INT = VAR_STRING.Length; if (VAR_INT < LITERAL_INT) { return OP_NONE; } char VAR_CHAR = VAR_STRING[LITERAL_INT]; switch (VAR_CHAR) { case LITERAL_CHAR: return OP_EQ; case LITERAL_CHAR: if (VAR_INT > LITERAL_INT) { switch (VAR_STRING[LITERAL_INT]) { case LITERAL_CHAR: return OP_GE; } } return OP_GT; case LITERAL_CHAR: if (VAR_INT > LITERAL_INT) { switch (VAR_STRING[LITERAL_INT]) { case LITERAL_CHAR: return OP_LE; case LITERAL_CHAR: return OP_NE; } } return OP_LT; } return OP_NONE; }
public void METHOD_NAME(char[] VAR_CHAR[], int[] VAR_INT[]) { for (int i = LITERAL_INT; i < VAR_CHAR[].Length; i++) { if (VAR_CHAR[][i] != LITERAL_CHAR) { charWidths[VAR_CHAR[][i]] = VAR_INT[][i]; } } }
public override java.nio.ShortBuffer METHOD_NAME() { return copy(this, _mark); }
public virtual void METHOD_NAME(bool VAR_BOOL) { features.put(org.xmlpull.v1.XmlPullParserClass.FEATURE_VALIDATION, VAR_BOOL); }
public async Task<AzureOperationResponse<DedicatedCapacity>> METHOD_NAME(string VAR_STRING, string VAR_STRING, DedicatedCapacity VAR_DEDICATEDCAPACITY, Dictionary<string, List<string>> VAR_DICTIONARY<STRING, LIST<STRING>> = LITERAL_NULL, CancellationToken VAR_CANCELLATIONTOKEN = default(CancellationToken)) { return await innerCapacityOperations.METHOD_NAME(VAR_STRING, VAR_STRING, VAR_DEDICATEDCAPACITY, VAR_DICTIONARY<STRING, LIST<STRING>>, VAR_CANCELLATIONTOKEN).ConfigureAwait(false); }
public virtual CancelIngestionResponse METHOD_NAME(CancelIngestionRequest VAR_CANCELINGESTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelIngestionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelIngestionResponseUnmarshaller.Instance; return Invoke<CancelIngestionResponse>(VAR_CANCELINGESTIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { encoding = Sharpen.Extensions.GetEncoding(VAR_STRING); }
public virtual DeleteTemplateAliasResponse METHOD_NAME(DeleteTemplateAliasRequest VAR_DELETETEMPLATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTemplateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTemplateAliasResponseUnmarshaller.Instance; return Invoke<DeleteTemplateAliasResponse>(VAR_DELETETEMPLATEALIASREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT, int VAR_INT, InternalWorkbook VAR_INTERNALWORKBOOK) { int VAR_INT = _externSheetRecord.GetExtbookIndexFromRefIndex(VAR_INT); int VAR_INT = _externSheetRecord.GetFirstSheetIndexFromRefIndex(VAR_INT); if (VAR_INT == -LITERAL_INT) { throw new RuntimeException(LITERAL_STRING); } ExternalBookBlock VAR_EXTERNALBOOKBLOCK = _externalBookBlocks[VAR_INT]; if (VAR_EXTERNALBOOKBLOCK._externalNameRecords.Length > VAR_INT) { return _externalBookBlocks[VAR_INT].GetNameText(VAR_INT); } else if (VAR_INT == -LITERAL_INT) { NameRecord VAR_NAMERECORD = GetNameRecord(VAR_INT); int VAR_INT = VAR_NAMERECORD.SheetNumber; StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (VAR_INT > LITERAL_INT) { String VAR_STRING = VAR_INTERNALWORKBOOK.GetSheetName(VAR_INT - LITERAL_INT); SheetNameFormatter.AppendFormat(VAR_STRINGBUILDER, VAR_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(VAR_NAMERECORD.NameText); return VAR_STRINGBUILDER.ToString(); } else { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + _externalBookBlocks.Length); } }
public virtual IPAddress METHOD_NAME() { return peer; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } else { if (!(VAR_OBJECT is Antlr4.Runtime.Atn.LexerTypeAction)) { return false; } } return type == ((Antlr4.Runtime.Atn.LexerTypeAction)VAR_OBJECT).type; }
public RefValueArray(RefEval VAR_REFEVAL) : base(ref1.NumberOfSheets) { _ref = VAR_REFEVAL; _width = VAR_REFEVAL.NumberOfSheets; }
public static NGit.Api.Git METHOD_NAME(Repository VAR_REPOSITORY) { return new NGit.Api.Git(VAR_REPOSITORY); }
public int METHOD_NAME() { return _binaryExponent + _significand.BitLength() - C_64; }
public GetRepoWebhookRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public override object METHOD_NAME(object VAR_OBJECT, object VAR_OBJECT) { IList<T> VAR_ILIST<T> = new JCG.List<T>(); if (!(VAR_OBJECT is IList<T> firstList)) { VAR_ILIST<T>.Add((T)VAR_OBJECT); } else { foreach (T value in firstList) { VAR_ILIST<T>.Add(value); } } if (!(VAR_OBJECT is IList<T> secondList)) { VAR_ILIST<T>.Add((T)VAR_OBJECT); } else { foreach (T value in secondList) { VAR_ILIST<T>.Add(value); } } return VAR_ILIST<T>; }
public virtual UpdateThreatIntelSetResponse METHOD_NAME(UpdateThreatIntelSetRequest VAR_UPDATETHREATINTELSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateThreatIntelSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateThreatIntelSetResponseUnmarshaller.Instance; return Invoke<UpdateThreatIntelSetResponse>(VAR_UPDATETHREATINTELSETREQUEST, VAR_VAR); }
public sealed override float METHOD_NAME(int VAR_INT) { return Sharpen.Util.IntBitsToFloat(getInt(VAR_INT)); }
public SortingFields(Fields VAR_FIELDS, FieldInfos VAR_FIELDINFOS, Sorter.DocMap VAR_SORTER.DOCMAP) : base(input) { this.VAR_SORTER.DOCMAP = VAR_SORTER.DOCMAP; this.VAR_FIELDINFOS = VAR_FIELDINFOS; }
public static SupBookRecord METHOD_NAME() { return new SupBookRecord(true, (short)LITERAL_INT); }
public virtual ImportClientVpnClientCertificateRevocationListResponse METHOD_NAME(ImportClientVpnClientCertificateRevocationListRequest VAR_IMPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportClientVpnClientCertificateRevocationListRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportClientVpnClientCertificateRevocationListResponseUnmarshaller.Instance; return Invoke<ImportClientVpnClientCertificateRevocationListResponse>(VAR_IMPORTCLIENTVPNCLIENTCERTIFICATEREVOCATIONLISTREQUEST, VAR_VAR); }
public virtual GetVoiceConnectorOriginationResponse METHOD_NAME(GetVoiceConnectorOriginationRequest VAR_GETVOICECONNECTORORIGINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorOriginationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorOriginationResponse>(VAR_GETVOICECONNECTORORIGINATIONREQUEST, VAR_VAR); }
public virtual GetTypedLinkFacetInformationResponse METHOD_NAME(GetTypedLinkFacetInformationRequest VAR_GETTYPEDLINKFACETINFORMATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTypedLinkFacetInformationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTypedLinkFacetInformationResponseUnmarshaller.Instance; return Invoke<GetTypedLinkFacetInformationResponse>(VAR_GETTYPEDLINKFACETINFORMATIONREQUEST, VAR_VAR); }
public PhraseSlopQueryNode(IQueryNode VAR_IQUERYNODE, int VAR_INT) { if (VAR_IQUERYNODE == LITERAL_NULL) { throw new QueryNodeError(new Message(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, LITERAL_STRING, LITERAL_STRING)); } this.VAR_INT = VAR_INT; IsLeaf = false; Allocate(); Add(VAR_IQUERYNODE); }
public virtual UpdateDeploymentGroupResponse METHOD_NAME(UpdateDeploymentGroupRequest VAR_UPDATEDEPLOYMENTGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDeploymentGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDeploymentGroupResponseUnmarshaller.Instance; return Invoke<UpdateDeploymentGroupResponse>(VAR_UPDATEDEPLOYMENTGROUPREQUEST, VAR_VAR); }
public DeleteVaultNotificationsRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public override bool METHOD_NAME(object VAR_OBJECT) { return this._enclosing.containsKey(VAR_OBJECT); }
public virtual int METHOD_NAME(string VAR_STRING, int VAR_INT) { int[] VAR_INT[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_INT[] = (int[])VAR_OBJECT; return VAR_INT[][roundNumber % VAR_INT[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_INT.ToString(CultureInfo.InvariantCulture); } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return int.Parse(VAR_STRING, CultureInfo.InvariantCulture); } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_INT[] = PropToInt32Array(VAR_STRING); valByRound[VAR_STRING] = VAR_INT[]; return VAR_INT[][roundNumber % VAR_INT[].Length]; }
public virtual DeleteGitHubAccountTokenResponse METHOD_NAME(DeleteGitHubAccountTokenRequest VAR_DELETEGITHUBACCOUNTTOKENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGitHubAccountTokenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGitHubAccountTokenResponseUnmarshaller.Instance; return Invoke<DeleteGitHubAccountTokenResponse>(VAR_DELETEGITHUBACCOUNTTOKENREQUEST, VAR_VAR); }
public GetPasswordDataRequest(string VAR_STRING) { _instanceId = VAR_STRING; }
public GetCloudFrontOriginAccessIdentityConfigRequest(string VAR_STRING) { _id = VAR_STRING; }
public void METHOD_NAME(long VAR_LONG) { if (VAR_LONG < LITERAL_INT || VAR_LONG > LITERAL_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_LONG = VAR_LONG; }
public IQueryNode METHOD_NAME(string VAR_STRING) { IQueryNode VAR_IQUERYNODE; Modifier VAR_MODIFIER; VAR_MODIFIER = Modifiers(); VAR_IQUERYNODE = Clause(VAR_STRING); if (VAR_MODIFIER != Modifier.MOD_NONE) { VAR_IQUERYNODE = new ModifierQueryNode(VAR_IQUERYNODE, VAR_MODIFIER); } { if (true) return VAR_IQUERYNODE; } throw new Exception(LITERAL_STRING); }
public virtual AbbreviatedObjectId METHOD_NAME(int VAR_INT) { return oldIds[VAR_INT]; }
public HttpRequest(string VAR_STRING, Dictionary<string, string> VAR_DICTIONARY<STRING, STRING>) { Url = VAR_STRING; if (LITERAL_NULL != VAR_DICTIONARY<STRING, STRING>) { Headers = VAR_DICTIONARY<STRING, STRING>; } }
public virtual AcceptInvitationResponse METHOD_NAME(AcceptInvitationRequest VAR_ACCEPTINVITATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptInvitationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptInvitationResponseUnmarshaller.Instance; return Invoke<AcceptInvitationResponse>(VAR_ACCEPTINVITATIONREQUEST, VAR_VAR); }
public int METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE) { ExtendedFormatRecord VAR_EXTENDEDFORMATRECORD = (ExtendedFormatRecord)xfRecords[VAR_CELLVALUERECORDINTERFACE.XFIndex]; if (VAR_EXTENDEDFORMATRECORD == LITERAL_NULL) { logger.Log(POILogger.ERROR, LITERAL_STRING + VAR_CELLVALUERECORDINTERFACE.Row + LITERAL_STRING + VAR_CELLVALUERECORDINTERFACE.Column + LITERAL_STRING + VAR_CELLVALUERECORDINTERFACE.XFIndex + LITERAL_STRING); return -LITERAL_INT; } return VAR_EXTENDEDFORMATRECORD.FormatIndex; }
public FilePath METHOD_NAME() { return path; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_INT[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_INT[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(this.GetType().Name); VAR_STRINGBUILDER.Append(LITERAL_STRING); if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(ExternalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(firstSheetName); if (lastSheetName != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(lastSheetName); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatReferenceAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual NGit.Api.PushCommand METHOD_NAME(IList<RefSpec> VAR_ILIST<REFSPEC>) { CheckCallable(); this.refSpecs.Clear(); Sharpen.Collections.AddAll(this.refSpecs, VAR_ILIST<REFSPEC>); return this; }
public static bool METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT) { if (VAR_INT > FIRST_FEW_BYTES) { VAR_INT = FIRST_FEW_BYTES; } for (int ptr = LITERAL_INT; ptr < VAR_INT; ptr++) { if (VAR_BYTE[][ptr] == LITERAL_CHAR) { return true; } } return false; }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public virtual PackWriter.PackingPhase METHOD_NAME() { return this.phase; }
public object METHOD_NAME() { State VAR_STATE = new State(); VAR_STATE.attribute = (Attribute)attribute.METHOD_NAME(); if (next != LITERAL_NULL) { VAR_STATE.next = (State)next.METHOD_NAME(); } return VAR_STATE; }
public static double METHOD_NAME(double VAR_DOUBLE) { return Math.Log(Math.Sqrt(VAR_DOUBLE * VAR_DOUBLE - LITERAL_INT) + VAR_DOUBLE); }
public virtual GetSearchSuggestionsResponse METHOD_NAME(GetSearchSuggestionsRequest VAR_GETSEARCHSUGGESTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSearchSuggestionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSearchSuggestionsResponseUnmarshaller.Instance; return Invoke<GetSearchSuggestionsResponse>(VAR_GETSEARCHSUGGESTIONSREQUEST, VAR_VAR); }
public static DateTime METHOD_NAME(double VAR_DOUBLE, bool VAR_BOOL, TimeZone VAR_TIMEZONE) { return GetJavaCalendar(VAR_DOUBLE, VAR_BOOL, false); }
public virtual ListVerifiedEmailAddressesResponse METHOD_NAME(ListVerifiedEmailAddressesRequest VAR_LISTVERIFIEDEMAILADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVerifiedEmailAddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVerifiedEmailAddressesResponseUnmarshaller.Instance; return Invoke<ListVerifiedEmailAddressesResponse>(VAR_LISTVERIFIEDEMAILADDRESSESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(QualityQuery VAR_QUALITYQUERY) { try { int VAR_INT = int.Parse(queryID, CultureInfo.InvariantCulture); int VAR_INT = int.Parse(VAR_QUALITYQUERY.queryID, CultureInfo.InvariantCulture); return VAR_INT - VAR_INT; } catch (FormatException) { return queryID.CompareToOrdinal(VAR_QUALITYQUERY.queryID); } }
public virtual void METHOD_NAME(bool VAR_BOOL) { exportAll = VAR_BOOL; }
public LexerATNConfig(LexerATNConfig VAR_LEXERATNCONFIG, ATNState VAR_ATNSTATE, PredictionContext VAR_PREDICTIONCONTEXT) : base(c, state, context, c.semanticContext) { this.lexerActionExecutor = VAR_LEXERATNCONFIG.lexerActionExecutor; this.passedThroughNonGreedyDecision = checkNonGreedyDecision(VAR_LEXERATNCONFIG, VAR_ATNSTATE); }
public virtual DescribeScheduledActionsResponse METHOD_NAME(DescribeScheduledActionsRequest VAR_DESCRIBESCHEDULEDACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScheduledActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScheduledActionsResponseUnmarshaller.Instance; return Invoke<DescribeScheduledActionsResponse>(VAR_DESCRIBESCHEDULEDACTIONSREQUEST, VAR_VAR); }
public bool METHOD_NAME(ColumnInfoRecord VAR_COLUMNINFORECORD) { return _last_col == VAR_COLUMNINFORECORD._first_col - LITERAL_INT; }
public QueryScorer(Query VAR_QUERY, IndexReader VAR_INDEXREADER, string VAR_STRING, string VAR_STRING) { this.VAR_STRING = VAR_STRING.Intern(); Init(VAR_QUERY, VAR_STRING, VAR_INDEXREADER, true); }
public virtual CreateConfigurationSetTrackingOptionsResponse METHOD_NAME(CreateConfigurationSetTrackingOptionsRequest VAR_CREATECONFIGURATIONSETTRACKINGOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConfigurationSetTrackingOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConfigurationSetTrackingOptionsResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetTrackingOptionsResponse>(VAR_CREATECONFIGURATIONSETTRACKINGOPTIONSREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT, VAR_INT); } }
public override void METHOD_NAME(char[] VAR_CHAR[]) { METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public virtual GetSdkResponse METHOD_NAME(GetSdkRequest VAR_GETSDKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSdkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSdkResponseUnmarshaller.Instance; return Invoke<GetSdkResponse>(VAR_GETSDKREQUEST, VAR_VAR); }
public virtual PutEmailIdentityDkimAttributesResponse METHOD_NAME(PutEmailIdentityDkimAttributesRequest VAR_PUTEMAILIDENTITYDKIMATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEmailIdentityDkimAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEmailIdentityDkimAttributesResponseUnmarshaller.Instance; return Invoke<PutEmailIdentityDkimAttributesResponse>(VAR_PUTEMAILIDENTITYDKIMATTRIBUTESREQUEST, VAR_VAR); }
public virtual DescribeWorkflowExecutionResponse METHOD_NAME(DescribeWorkflowExecutionRequest VAR_DESCRIBEWORKFLOWEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkflowExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkflowExecutionResponseUnmarshaller.Instance; return Invoke<DescribeWorkflowExecutionResponse>(VAR_DESCRIBEWORKFLOWEXECUTIONREQUEST, VAR_VAR); }
public CloudFrontOriginAccessIdentityConfig(string VAR_STRING) { _callerReference = VAR_STRING; }
public string METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT, string VAR_STRING) { { for (int i = VAR_INT; i < VAR_INT;) { char VAR_CHAR = VAR_STRING[i]; if ((VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || (VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || (VAR_CHAR >= LITERAL_CHAR && VAR_CHAR <= LITERAL_CHAR) || isRetained(VAR_CHAR)) { i++; } else { if (VAR_CHAR == LITERAL_CHAR) { if (i + LITERAL_INT >= VAR_INT) { throw new java.net.URISyntaxException(VAR_STRING, LITERAL_STRING + VAR_STRING, i); } int VAR_INT = hexToInt(VAR_STRING[i + LITERAL_INT]); int VAR_INT = hexToInt(VAR_STRING[i + LITERAL_INT]); if (VAR_INT == -LITERAL_INT || VAR_INT == -LITERAL_INT) { throw new java.net.URISyntaxException(VAR_STRING, LITERAL_STRING + Sharpen.StringHelper.Substring(VAR_STRING, i, i + LITERAL_INT) + LITERAL_STRING + VAR_STRING, i); } i += LITERAL_INT; } else { throw new java.net.URISyntaxException(VAR_STRING, LITERAL_STRING + VAR_STRING, i); } } } } return Sharpen.StringHelper.Substring(VAR_STRING, VAR_INT, VAR_INT); }
public UnbufferedCharStream(TextReader VAR_TEXTREADER, int VAR_INT) : this(bufferSize) { this.VAR_TEXTREADER = VAR_TEXTREADER; Fill(LITERAL_INT); }
public ContinuableRecordInput(RecordInputStream VAR_RECORDINPUTSTREAM) { _in = VAR_RECORDINPUTSTREAM; }
public override object METHOD_NAME() { if (_input == LITERAL_NULL) { throw new ObjectDisposedException(this.GetType().GetTypeInfo().FullName, LITERAL_STRING); } return new SimpleTextStoredFieldsReader(_offsets, (IndexInput)_input.METHOD_NAME(), _fieldInfos); }
public Initial(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { _reserved0 = VAR_ILITTLEENDIANINPUT.ReadInt(); _reserved1 = VAR_ILITTLEENDIANINPUT.ReadUShort(); _reserved2 = VAR_ILITTLEENDIANINPUT.ReadUByte(); }
public virtual int METHOD_NAME() { lock (this) { return mIndeterminate ? LITERAL_INT : mProgress; } }
public virtual CreateNamedQueryResponse METHOD_NAME(CreateNamedQueryRequest VAR_CREATENAMEDQUERYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNamedQueryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNamedQueryResponseUnmarshaller.Instance; return Invoke<CreateNamedQueryResponse>(VAR_CREATENAMEDQUERYREQUEST, VAR_VAR); }
public static java.nio.DoubleBuffer METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } return new java.nio.ReadWriteDoubleArrayBuffer(VAR_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(this.GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_operator.Representation); VAR_STRINGBUILDER.Append(ValueText); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override java.nio.LongBuffer METHOD_NAME() { return java.nio.ReadOnlyLongArrayBuffer.copy(this, _mark); }
public virtual CreateFlowDefinitionResponse METHOD_NAME(CreateFlowDefinitionRequest VAR_CREATEFLOWDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFlowDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFlowDefinitionResponseUnmarshaller.Instance; return Invoke<CreateFlowDefinitionResponse>(VAR_CREATEFLOWDEFINITIONREQUEST, VAR_VAR); }
public virtual GetOpenIdTokenResponse METHOD_NAME(GetOpenIdTokenRequest VAR_GETOPENIDTOKENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOpenIdTokenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOpenIdTokenResponseUnmarshaller.Instance; return Invoke<GetOpenIdTokenResponse>(VAR_GETOPENIDTOKENREQUEST, VAR_VAR); }
public virtual GetDocumentationPartResponse METHOD_NAME(GetDocumentationPartRequest VAR_GETDOCUMENTATIONPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentationPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentationPartResponseUnmarshaller.Instance; return Invoke<GetDocumentationPartResponse>(VAR_GETDOCUMENTATIONPARTREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_VALUEEVAL[].Length; if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); ValueEval[] VAR_VALUEEVAL[] = new ValueEval[VAR_VALUEEVAL[].Length - LITERAL_INT]; Array.Copy(VAR_VALUEEVAL[], LITERAL_INT, VAR_VALUEEVAL[], LITERAL_INT, VAR_VALUEEVAL[].Length); double[] VAR_DOUBLE[] = AggregateFunction.ValueCollector.CollectValues(VAR_VALUEEVAL[]); double VAR_DOUBLE = FinanceLib.npv(VAR_DOUBLE, VAR_DOUBLE[]); NumericFunction.CheckValue(VAR_DOUBLE); return new NumberEval(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public String METHOD_NAME() { switch (blip.RecordId) { case EscherMetafileBlip.RECORD_ID_WMF: return LITERAL_STRING; case EscherMetafileBlip.RECORD_ID_EMF: return LITERAL_STRING; case EscherMetafileBlip.RECORD_ID_PICT: return LITERAL_STRING; case EscherBitmapBlip.RECORD_ID_PNG: return LITERAL_STRING; case EscherBitmapBlip.RECORD_ID_JPEG: return LITERAL_STRING; case EscherBitmapBlip.RECORD_ID_DIB: return LITERAL_STRING; default: return LITERAL_STRING; } }
public AsyncResponsePostRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public static RevFilter METHOD_NAME(long VAR_LONG, long VAR_LONG) { return new CommitTimeRevFilterBetween(VAR_LONG, VAR_LONG); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public override Sharpen.Iterator<T> METHOD_NAME() { return new BlockList<T>.MyIterator(this); }
public void METHOD_NAME(int[] VAR_INT[], long[] VAR_LONG[]) { this.VAR_INT[] = VAR_INT[]; this.VAR_LONG[] = VAR_LONG[]; }
public virtual ObjectId METHOD_NAME() { return @object; }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, FileName, Length); }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT) { SheetRefEvaluator VAR_SHEETREFEVALUATOR = _evaluator.GetSheetEvaluator(_evaluator.FirstSheetIndex); return VAR_SHEETREFEVALUATOR.METHOD_NAME(FirstRow + VAR_INT, FirstColumn + VAR_INT); }
public virtual DeleteCollectionResponse METHOD_NAME(DeleteCollectionRequest VAR_DELETECOLLECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteCollectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteCollectionResponseUnmarshaller.Instance; return Invoke<DeleteCollectionResponse>(VAR_DELETECOLLECTIONREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { _out.METHOD_NAME(VAR_BYTE[]); _size += VAR_BYTE[].Length; }
public virtual android.graphics.drawable.Drawable METHOD_NAME() { return mIndeterminateDrawable; }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { CheckPosition(VAR_INT); System.Array.Copy(VAR_BYTE[], VAR_INT, _buf, _writeIndex, VAR_INT); _writeIndex += VAR_INT; }
public virtual ListWebsiteCertificateAuthoritiesResponse METHOD_NAME(ListWebsiteCertificateAuthoritiesRequest VAR_LISTWEBSITECERTIFICATEAUTHORITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWebsiteCertificateAuthoritiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWebsiteCertificateAuthoritiesResponseUnmarshaller.Instance; return Invoke<ListWebsiteCertificateAuthoritiesResponse>(VAR_LISTWEBSITECERTIFICATEAUTHORITIESREQUEST, VAR_VAR); }
public RevWalk(ObjectReader VAR_OBJECTREADER, int VAR_INT) : base(or) { this.VAR_INT = VAR_INT; this.UNSHALLOW = NewFlag(LITERAL_STRING); this.REINTERESTING = NewFlag(LITERAL_STRING); }
public DeleteLogStreamRequest(string VAR_STRING, string VAR_STRING) { _logGroupName = VAR_STRING; _logStreamName = VAR_STRING; }
public override java.io.Writer METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE == LITERAL_NULL) { VAR_JAVA.LANG.CHARSEQUENCE = java.lang.CharSequenceProxy.Wrap(LITERAL_STRING); } METHOD_NAME(VAR_JAVA.LANG.CHARSEQUENCE, LITERAL_INT, VAR_JAVA.LANG.CHARSEQUENCE.Length); return this; }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { count++; if (count % stepSize == LITERAL_INT) { if (count <= total) { monitor.Update(stepSize); } if (monitor.IsCancelled()) { throw StopWalkException.INSTANCE; } } return true; }
public virtual RevObject METHOD_NAME() { return id; }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; }
public virtual ListAutoMLJobsResponse METHOD_NAME(ListAutoMLJobsRequest VAR_LISTAUTOMLJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAutoMLJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAutoMLJobsResponseUnmarshaller.Instance; return Invoke<ListAutoMLJobsResponse>(VAR_LISTAUTOMLJOBSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, ISpanQueryBuilder VAR_ISPANQUERYBUILDER) { builders[VAR_STRING] = VAR_ISPANQUERYBUILDER; }
public virtual DescribeReplicationGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeReplicationGroupsRequest()); }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > MAX_ROW_INDEX) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + MAX_ROW_INDEX + LITERAL_STRING); } if (VAR_INT >= records.Length) { return; } records[VAR_INT] = LITERAL_NULL; }
public virtual DeleteProxySessionResponse METHOD_NAME(DeleteProxySessionRequest VAR_DELETEPROXYSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteProxySessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteProxySessionResponseUnmarshaller.Instance; return Invoke<DeleteProxySessionResponse>(VAR_DELETEPROXYSESSIONREQUEST, VAR_VAR); }
public virtual DescribePoliciesResponse METHOD_NAME() { return METHOD_NAME(new DescribePoliciesRequest()); }
public NumberFormatIndexRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_formatIndex = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual CreatePrivateVirtualInterfaceResponse METHOD_NAME(CreatePrivateVirtualInterfaceRequest VAR_CREATEPRIVATEVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePrivateVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePrivateVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<CreatePrivateVirtualInterfaceResponse>(VAR_CREATEPRIVATEVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual E METHOD_NAME(int VAR_INT) { return list.METHOD_NAME(VAR_INT); }
public string METHOD_NAME() { return decode(path); }
public static char[] METHOD_NAME(long VAR_LONG) { return ToHexChars(VAR_LONG, LITERAL_INT); }
public override RevFilter METHOD_NAME() { return new OrRevFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public virtual int METHOD_NAME(Toffs VAR_TOFFS) { int VAR_INT = StartOffset - VAR_TOFFS.StartOffset; if (VAR_INT != LITERAL_INT) { return VAR_INT; } return EndOffset - VAR_TOFFS.EndOffset; }
public virtual UpdateNetworkProfileResponse METHOD_NAME(UpdateNetworkProfileRequest VAR_UPDATENETWORKPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNetworkProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNetworkProfileResponseUnmarshaller.Instance; return Invoke<UpdateNetworkProfileResponse>(VAR_UPDATENETWORKPROFILEREQUEST, VAR_VAR); }
public virtual GetRelationalDatabaseParametersResponse METHOD_NAME(GetRelationalDatabaseParametersRequest VAR_GETRELATIONALDATABASEPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseParametersResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseParametersResponse>(VAR_GETRELATIONALDATABASEPARAMETERSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return indexOf(VAR_OBJECT, LITERAL_INT) != -LITERAL_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { return removeFirstOccurrenceImpl(VAR_OBJECT); }
public DConRefRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { if (VAR_RECORDINPUTSTREAM.Sid != sid) throw new RecordFormatException(LITERAL_STRING + VAR_RECORDINPUTSTREAM.Sid); firstRow = VAR_RECORDINPUTSTREAM.ReadUShort(); lastRow = VAR_RECORDINPUTSTREAM.ReadUShort(); firstCol = VAR_RECORDINPUTSTREAM.ReadUByte(); lastCol = VAR_RECORDINPUTSTREAM.ReadUByte(); charCount = VAR_RECORDINPUTSTREAM.ReadUShort(); charType = VAR_RECORDINPUTSTREAM.ReadUByte() & LITERAL_INT; int VAR_INT = charCount * (charType + LITERAL_INT); path = new byte[VAR_INT]; VAR_RECORDINPUTSTREAM.ReadFully(path); if (path[LITERAL_INT] == LITERAL_INT) _unused = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public int METHOD_NAME(IEvaluationSheet VAR_IEVALUATIONSHEET) { HSSFSheet VAR_HSSFSHEET = ((HSSFEvaluationSheet)VAR_IEVALUATIONSHEET).HSSFSheet; return _uBook.METHOD_NAME(VAR_HSSFSHEET); }
public override int METHOD_NAME(int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT); } }
public DeleteRepoBuildRuleRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public virtual UpdateEmailChannelResponse METHOD_NAME(UpdateEmailChannelRequest VAR_UPDATEEMAILCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateEmailChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateEmailChannelResponseUnmarshaller.Instance; return Invoke<UpdateEmailChannelResponse>(VAR_UPDATEEMAILCHANNELREQUEST, VAR_VAR); }
public TabIdRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _tabids = new short[VAR_RECORDINPUTSTREAM.Remaining / LITERAL_INT]; for (int k = LITERAL_INT; k < _tabids.Length; k++) { _tabids[k] = VAR_RECORDINPUTSTREAM.ReadShort(); } }
public override String METHOD_NAME() { return LITERAL_STRING; }
public virtual CreateConnectionResponse METHOD_NAME(CreateConnectionRequest VAR_CREATECONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateConnectionResponseUnmarshaller.Instance; return Invoke<CreateConnectionResponse>(VAR_CREATECONNECTIONREQUEST, VAR_VAR); }
public int METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE, double[] VAR_DOUBLE[]) { int VAR_INT = this.PastDaysOfWeek(VAR_DOUBLE, VAR_DOUBLE, DayOfWeek.Saturday); int VAR_INT = this.PastDaysOfWeek(VAR_DOUBLE, VAR_DOUBLE, DayOfWeek.Sunday); int VAR_INT = this.CalculateNonWeekendHolidays(VAR_DOUBLE, VAR_DOUBLE, VAR_DOUBLE[]); return (int)(VAR_DOUBLE - VAR_DOUBLE + LITERAL_INT) - VAR_INT - VAR_INT - VAR_INT; }
public IndexFormatTooNewException(string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT) : base(LITERAL_STRING + resourceDesc + LITERAL_STRING + version + LITERAL_STRING + minVersion + LITERAL_STRING + maxVersion + LITERAL_STRING) { Debug.Assert(VAR_STRING != LITERAL_NULL); }
public override void METHOD_NAME(DirCacheEntry VAR_DIRCACHEENTRY) { throw new NotSupportedException(JGitText.Get().noApplyInDelete); }
public virtual bool METHOD_NAME() { position += posIncAtt.PositionIncrement; if (waitForPos == position) { waitForPos = -LITERAL_INT; } else if (waitForPos != -LITERAL_INT) { return false; } WeightedSpanTerm VAR_WEIGHTEDSPANTERM = queryScorer.GetWeightedSpanTerm(termAtt.ToString()); if (VAR_WEIGHTEDSPANTERM != LITERAL_NULL) { IList<PositionSpan> VAR_ILIST<POSITIONSPAN> = VAR_WEIGHTEDSPANTERM.PositionSpans; for (int i = LITERAL_INT; i < VAR_ILIST<POSITIONSPAN>.Count; i++) { if (VAR_ILIST<POSITIONSPAN>[i].Start == position) { waitForPos = VAR_ILIST<POSITIONSPAN>[i].End + LITERAL_INT; break; } } } bool VAR_BOOL = offsetAtt.EndOffset >= (fragmentSize * currentNumFrags) && (textSize - offsetAtt.EndOffset) >= (int)((uint)fragmentSize >> LITERAL_INT); if (VAR_BOOL) { currentNumFrags++; } return VAR_BOOL; }
public virtual StopMatchmakingResponse METHOD_NAME(StopMatchmakingRequest VAR_STOPMATCHMAKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopMatchmakingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopMatchmakingResponseUnmarshaller.Instance; return Invoke<StopMatchmakingResponse>(VAR_STOPMATCHMAKINGREQUEST, VAR_VAR); }
public virtual DescribeClientVpnTargetNetworksResponse METHOD_NAME(DescribeClientVpnTargetNetworksRequest VAR_DESCRIBECLIENTVPNTARGETNETWORKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClientVpnTargetNetworksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClientVpnTargetNetworksResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnTargetNetworksResponse>(VAR_DESCRIBECLIENTVPNTARGETNETWORKSREQUEST, VAR_VAR); }
public override java.nio.FloatBuffer METHOD_NAME(java.nio.FloatBuffer VAR_JAVA.NIO.FLOATBUFFER) { throw new java.nio.ReadOnlyBufferException(); }
public sealed override java.nio.IntBuffer METHOD_NAME() { return java.nio.IntToByteBufferAdapter.METHOD_NAME(this); }
public virtual RemovePermissionResponse METHOD_NAME(string VAR_STRING, string VAR_STRING) { var VAR_VAR = new RemovePermissionRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.Label = VAR_STRING; return METHOD_NAME(VAR_VAR); }
public virtual void METHOD_NAME(IResourceLoader VAR_IRESOURCELOADER) { if (encoderClass.Equals(LITERAL_STRING, StringComparison.Ordinal)) { encoder = new SingleEncoder(); } else if (encoderClass.Equals(LITERAL_STRING, StringComparison.Ordinal)) { encoder = new IntegerEncoder(); } else if (encoderClass.Equals(LITERAL_STRING, StringComparison.Ordinal)) { encoder = new IdentityEncoder(); } else { encoder = VAR_IRESOURCELOADER.NewInstance<IPayloadEncoder>(encoderClass); } }
public virtual GetHealthCheckResponse METHOD_NAME(GetHealthCheckRequest VAR_GETHEALTHCHECKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHealthCheckRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHealthCheckResponseUnmarshaller.Instance; return Invoke<GetHealthCheckResponse>(VAR_GETHEALTHCHECKREQUEST, VAR_VAR); }
public virtual ListNotebookInstanceLifecycleConfigsResponse METHOD_NAME(ListNotebookInstanceLifecycleConfigsRequest VAR_LISTNOTEBOOKINSTANCELIFECYCLECONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNotebookInstanceLifecycleConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNotebookInstanceLifecycleConfigsResponseUnmarshaller.Instance; return Invoke<ListNotebookInstanceLifecycleConfigsResponse>(VAR_LISTNOTEBOOKINSTANCELIFECYCLECONFIGSREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { for (int i = LITERAL_INT; i < -VAR_INT; i++) { Previous(); } } else { for (int i = LITERAL_INT; i < VAR_INT; i++) { METHOD_NAME(); } } return Current; }
public static long METHOD_NAME(HeaderBlock VAR_HEADERBLOCK) { return METHOD_NAME(VAR_HEADERBLOCK.BigBlockSize, VAR_HEADERBLOCK.BATCount); }
public override String METHOD_NAME() { return LITERAL_STRING + _character + LITERAL_STRING + _fontIndex; }
public static float[] METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_FLOAT[].Length < VAR_INT) { float[] VAR_FLOAT[] = new float[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_SINGLE)]; Array.Copy(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); return VAR_FLOAT[]; } else { return VAR_FLOAT[]; } }
public String METHOD_NAME() { if (getDataFormatStringCache != LITERAL_NULL) { if (lastDateFormat == DataFormat && _workbook.Formats.Equals(lastFormats)) { return getDataFormatStringCache; } } lastFormats = _workbook.Formats; lastDateFormat = DataFormat; getDataFormatStringCache = METHOD_NAME(_workbook); return getDataFormatStringCache; }
public virtual UpdateSignalingChannelResponse METHOD_NAME(UpdateSignalingChannelRequest VAR_UPDATESIGNALINGCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSignalingChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSignalingChannelResponseUnmarshaller.Instance; return Invoke<UpdateSignalingChannelResponse>(VAR_UPDATESIGNALINGCHANNELREQUEST, VAR_VAR); }
public MoPenSendMqttMessageRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public TreeSet(java.util.SortedSet<E> VAR_JAVA.UTIL.SORTEDSET<E>) : this(set.comparator()) { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = VAR_JAVA.UTIL.SORTEDSET<E>.iterator(); while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { add(VAR_JAVA.UTIL.ITERATOR<E>.next()); } }
public virtual DisassociateMembersResponse METHOD_NAME(DisassociateMembersRequest VAR_DISASSOCIATEMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateMembersResponseUnmarshaller.Instance; return Invoke<DisassociateMembersResponse>(VAR_DISASSOCIATEMEMBERSREQUEST, VAR_VAR); }
public virtual DeleteVpcLinkResponse METHOD_NAME(DeleteVpcLinkRequest VAR_DELETEVPCLINKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcLinkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcLinkResponseUnmarshaller.Instance; return Invoke<DeleteVpcLinkResponse>(VAR_DELETEVPCLINKREQUEST, VAR_VAR); }
public virtual DescribeDBSnapshotsResponse METHOD_NAME() { return METHOD_NAME(new DescribeDBSnapshotsRequest()); }
public void METHOD_NAME() { if (_evaluationListener != LITERAL_NULL) { _evaluationListener.OnClearWholeCache(); } _plainCellCache.METHOD_NAME(); _formulaCellCache.METHOD_NAME(); }
public virtual void METHOD_NAME(DiffAlgorithm VAR_DIFFALGORITHM) { diffAlgorithm = VAR_DIFFALGORITHM; }
public DVALRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { this.field_1_options = VAR_RECORDINPUTSTREAM.ReadShort(); this.field_2_horiz_pos = VAR_RECORDINPUTSTREAM.ReadInt(); this.field_3_vert_pos = VAR_RECORDINPUTSTREAM.ReadInt(); this.field_cbo_id = VAR_RECORDINPUTSTREAM.ReadInt(); this.field_5_dv_no = VAR_RECORDINPUTSTREAM.ReadInt(); }
public override object METHOD_NAME() { throw new NotSupportedException(); }
public virtual OpenStringBuilder METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE, int VAR_INT, int VAR_INT) { EnsureCapacity(VAR_INT - VAR_INT); for (int i = VAR_INT; i < VAR_INT; i++) { UnsafeWrite(VAR_ICHARSEQUENCE[i]); } return this; }
public virtual DescribeJobFlowsResponse METHOD_NAME(DescribeJobFlowsRequest VAR_DESCRIBEJOBFLOWSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeJobFlowsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeJobFlowsResponseUnmarshaller.Instance; return Invoke<DescribeJobFlowsResponse>(VAR_DESCRIBEJOBFLOWSREQUEST, VAR_VAR); }
public LowerCaseFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual int METHOD_NAME(string VAR_STRING) { long VAR_LONG = long.Parse(VAR_STRING, NumberStyles.HexNumber); long VAR_LONG = commit.Generation; return VAR_LONG < VAR_LONG ? -LITERAL_INT : (VAR_LONG > VAR_LONG ? LITERAL_INT : LITERAL_INT); }
public virtual DisassociateResolverRuleResponse METHOD_NAME(DisassociateResolverRuleRequest VAR_DISASSOCIATERESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateResolverRuleResponseUnmarshaller.Instance; return Invoke<DisassociateResolverRuleResponse>(VAR_DISASSOCIATERESOLVERRULEREQUEST, VAR_VAR); }
public static bool METHOD_NAME(String VAR_STRING) { return !VAR_STRING.Equals(ISO_8859_1.GetString(ISO_8859_1.GetBytes(VAR_STRING))); }
public virtual DeleteApplicationCloudWatchLoggingOptionResponse METHOD_NAME(DeleteApplicationCloudWatchLoggingOptionRequest VAR_DELETEAPPLICATIONCLOUDWATCHLOGGINGOPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationCloudWatchLoggingOptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationCloudWatchLoggingOptionResponseUnmarshaller.Instance; return Invoke<DeleteApplicationCloudWatchLoggingOptionResponse>(VAR_DELETEAPPLICATIONCLOUDWATCHLOGGINGOPTIONREQUEST, VAR_VAR); }
public FreqProxPostingsArray(int VAR_INT, bool VAR_BOOL, bool VAR_BOOL, bool VAR_BOOL) : base(size) { if (VAR_BOOL) { termFreqs = new int[VAR_INT]; } lastDocIDs = new int[VAR_INT]; lastDocCodes = new int[VAR_INT]; if (VAR_BOOL) { lastPositions = new int[VAR_INT]; if (VAR_BOOL) { lastOffsets = new int[VAR_INT]; } } else { Debug.Assert(!VAR_BOOL); } }
public virtual IList<string> METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, defaultNumReturnValues); }
public virtual DescribeScalingPoliciesResponse METHOD_NAME(DescribeScalingPoliciesRequest VAR_DESCRIBESCALINGPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScalingPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScalingPoliciesResponseUnmarshaller.Instance; return Invoke<DescribeScalingPoliciesResponse>(VAR_DESCRIBESCALINGPOLICIESREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_row_offset); for (int k = LITERAL_INT; k < field_2_cell_offsets.Length; k++) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_cell_offsets[k]); } }
public UserSViewBegin(RecordInputStream VAR_RECORDINPUTSTREAM) { _rawData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public static RevFilter METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().cannotMatchOnEmptyString); } if (SubStringRevFilter.Safe(VAR_STRING)) { return new CommitterRevFilter.SubStringSearch(VAR_STRING); } return new CommitterRevFilter.PatternSearch(VAR_STRING); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(FontHeight); VAR_ILITTLEENDIANOUTPUT.WriteShort(Attributes); VAR_ILITTLEENDIANOUTPUT.WriteShort(ColorPaletteIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(BoldWeight); VAR_ILITTLEENDIANOUTPUT.WriteShort((int)SuperSubScript); VAR_ILITTLEENDIANOUTPUT.WriteByte((int)Underline); VAR_ILITTLEENDIANOUTPUT.WriteByte(Family); VAR_ILITTLEENDIANOUTPUT.WriteByte(Charset); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_9_zero); int VAR_INT = field_11_font_name.Length; VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_INT); bool VAR_BOOL = StringUtil.HasMultibyte(field_11_font_name); VAR_ILITTLEENDIANOUTPUT.WriteByte(VAR_BOOL ? LITERAL_INT : LITERAL_INT); if (VAR_INT > LITERAL_INT) { if (VAR_BOOL) { StringUtil.PutUnicodeLE(field_11_font_name, VAR_ILITTLEENDIANOUTPUT); } else { StringUtil.PutCompressedUnicode(field_11_font_name, VAR_ILITTLEENDIANOUTPUT); } } }
public virtual DescribeLaunchConfigurationsResponse METHOD_NAME(DescribeLaunchConfigurationsRequest VAR_DESCRIBELAUNCHCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLaunchConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLaunchConfigurationsResponseUnmarshaller.Instance; return Invoke<DescribeLaunchConfigurationsResponse>(VAR_DESCRIBELAUNCHCONFIGURATIONSREQUEST, VAR_VAR); }
public PathEdit(DirCacheEntry VAR_DIRCACHEENTRY) { path = VAR_DIRCACHEENTRY.path; }
public int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, int[] VAR_INT[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_INT;) { int VAR_INT = CodePointAt(VAR_CHAR[], VAR_INT + i, VAR_INT + VAR_INT); int VAR_INT = Character.CharCount(VAR_INT); VAR_INT[][VAR_INT + VAR_INT++] = VAR_INT; i += VAR_INT; } return VAR_INT; }
public virtual bool METHOD_NAME() { return this.remaining != LITERAL_INT; }
public virtual void METHOD_NAME() { if (LA(LITERAL_INT) == IntStreamConstants.EOF) { throw new InvalidOperationException(LITERAL_STRING); } lastChar = data[p]; if (p == n - LITERAL_INT && numMarkers == LITERAL_INT) { n = LITERAL_INT; p = -LITERAL_INT; lastCharBufferStart = lastChar; } p++; currentCharIndex++; Sync(LITERAL_INT); }
public FileOutputStream(string VAR_STRING) : this(path, false) { throw new System.NotImplementedException(); }
public FieldConfig(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new NGramTokenFilter(m_luceneMatchVersion, VAR_TOKENSTREAM, minGramSize, maxGramSize); }
public virtual DescribeCacheParameterGroupsResponse METHOD_NAME(DescribeCacheParameterGroupsRequest VAR_DESCRIBECACHEPARAMETERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCacheParameterGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCacheParameterGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheParameterGroupsResponse>(VAR_DESCRIBECACHEPARAMETERGROUPSREQUEST, VAR_VAR); }
public ApostropheFilter(TokenStream VAR_TOKENSTREAM) : base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public void METHOD_NAME(int VAR_INT) { WriteContinueIfRequired(LITERAL_INT); _ulrOutput.METHOD_NAME(VAR_INT); }
public java.lang.StringBuilder METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { appendNull(); } else { append0(VAR_OBJECT.ToString()); } return this; }
public virtual ListGatewayGroupsResponse METHOD_NAME(ListGatewayGroupsRequest VAR_LISTGATEWAYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGatewayGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGatewayGroupsResponseUnmarshaller.Instance; return Invoke<ListGatewayGroupsResponse>(VAR_LISTGATEWAYGROUPSREQUEST, VAR_VAR); }
public virtual AlibabaCloudCredentials METHOD_NAME() { try { if (credentials == LITERAL_NULL) { credentials = fetcher.Fetch(maxRetryTimes); } if (credentials.IsExpired()) { throw new ClientException(LITERAL_STRING, LITERAL_STRING); } if (!credentials.WillSoonExpire() || !credentials.ShouldRefresh()) { return credentials; } credentials = fetcher.Fetch(); return credentials; } catch (ClientException ex) { if (ex.ErrorCode.Equals(LITERAL_STRING) && ex.ErrorMessage.Equals(LITERAL_STRING)) { CommonLog.LogException(ex, ex.ErrorCode, ex.ErrorMessage); throw new ClientException(ex.ErrorCode, ex.ErrorMessage); } credentials.SetLastFailedRefreshTime(); } return credentials; }
public virtual DescribeVpnConnectionsResponse METHOD_NAME(DescribeVpnConnectionsRequest VAR_DESCRIBEVPNCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpnConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeVpnConnectionsResponse>(VAR_DESCRIBEVPNCONNECTIONSREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { checkPutBounds(LITERAL_INT, VAR_BYTE[].Length, VAR_INT, VAR_INT); System.Array.Copy(VAR_BYTE[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public virtual ListDistributionsResponse METHOD_NAME(ListDistributionsRequest VAR_LISTDISTRIBUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDistributionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDistributionsResponseUnmarshaller.Instance; return Invoke<ListDistributionsResponse>(VAR_LISTDISTRIBUTIONSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { if (m_params == LITERAL_NULL) { return name; } return new StringBuilder(name).Append(LITERAL_CHAR).Append(m_params).Append(LITERAL_CHAR).ToString(); }
public virtual DescribeTasksResponse METHOD_NAME(DescribeTasksRequest VAR_DESCRIBETASKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTasksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTasksResponseUnmarshaller.Instance; return Invoke<DescribeTasksResponse>(VAR_DESCRIBETASKSREQUEST, VAR_VAR); }
public virtual DescribeCacheSubnetGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeCacheSubnetGroupsRequest()); }
public override float METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getFloat(_position++ * libcore.io.SizeOf.FLOAT); }
public virtual NGit.Api.ShowNoteCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public virtual UpdateAuthorizerResponse METHOD_NAME(UpdateAuthorizerRequest VAR_UPDATEAUTHORIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAuthorizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAuthorizerResponseUnmarshaller.Instance; return Invoke<UpdateAuthorizerResponse>(VAR_UPDATEAUTHORIZERREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(int VAR_INT) { throw new System.NotSupportedException(); }
public UnknownRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _sid = VAR_RECORDINPUTSTREAM.Sid; _rawData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public java.util.regex.Matcher METHOD_NAME() { return METHOD_NAME(java.lang.CharSequenceProxy.Wrap(input), LITERAL_INT, input.Length); }
public virtual UpdateApnsVoipSandboxChannelResponse METHOD_NAME(UpdateApnsVoipSandboxChannelRequest VAR_UPDATEAPNSVOIPSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApnsVoipSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApnsVoipSandboxChannelResponseUnmarshaller.Instance; return Invoke<UpdateApnsVoipSandboxChannelResponse>(VAR_UPDATEAPNSVOIPSANDBOXCHANNELREQUEST, VAR_VAR); }
public virtual IntervalSet METHOD_NAME(ATNState VAR_ATNSTATE, RuleContext VAR_RULECONTEXT) { LL1Analyzer VAR_LL1ANALYZER = new LL1Analyzer(this); IntervalSet VAR_INTERVALSET = VAR_LL1ANALYZER.Look(VAR_ATNSTATE, VAR_RULECONTEXT); return VAR_INTERVALSET; }
public virtual ListTablesResponse METHOD_NAME(string VAR_STRING, int VAR_INT) { var VAR_VAR = new ListTablesRequest(); VAR_VAR.ExclusiveStartTableName = VAR_STRING; VAR_VAR.Limit = VAR_INT; return METHOD_NAME(VAR_VAR); }
public virtual DescribeIdentityResponse METHOD_NAME(DescribeIdentityRequest VAR_DESCRIBEIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIdentityResponseUnmarshaller.Instance; return Invoke<DescribeIdentityResponse>(VAR_DESCRIBEIDENTITYREQUEST, VAR_VAR); }
public IList<string> METHOD_NAME() { Token VAR_TOKEN; IList<string> VAR_ILIST<STRING> = LITERAL_NULL; while (true) { if (Jj_2_1(LITERAL_INT)) { ; } else { goto label_1; } VAR_TOKEN = Jj_consume_token(RegexpToken.TERM); Jj_consume_token(RegexpToken.COLON); if (VAR_ILIST<STRING> == LITERAL_NULL) { VAR_ILIST<STRING> = new List<string>(); } VAR_ILIST<STRING>.Add(VAR_TOKEN.Image); } label_1: { if (true) return VAR_ILIST<STRING>; } throw new Exception(LITERAL_STRING); }
public virtual SubmoduleAddCommand METHOD_NAME() { return new SubmoduleAddCommand(repo); }
public virtual DescribeTypeResponse METHOD_NAME(DescribeTypeRequest VAR_DESCRIBETYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTypeResponseUnmarshaller.Instance; return Invoke<DescribeTypeResponse>(VAR_DESCRIBETYPEREQUEST, VAR_VAR); }
public virtual UpdateCompanyNetworkConfigurationResponse METHOD_NAME(UpdateCompanyNetworkConfigurationRequest VAR_UPDATECOMPANYNETWORKCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateCompanyNetworkConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateCompanyNetworkConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateCompanyNetworkConfigurationResponse>(VAR_UPDATECOMPANYNETWORKCONFIGURATIONREQUEST, VAR_VAR); }
public string METHOD_NAME(string VAR_STRING) { foreach (IIndexableField field in fields) { if (field.Name.Equals(VAR_STRING, StringComparison.Ordinal) && field.GetStringValue() != LITERAL_NULL) { return field.GetStringValue(); } } return LITERAL_NULL; }
public override bool METHOD_NAME(object VAR_OBJECT) { MutableValueStr VAR_MUTABLEVALUESTR = (MutableValueStr)VAR_OBJECT; return Value.Equals(VAR_MUTABLEVALUESTR.Value) && Exists == VAR_MUTABLEVALUESTR.Exists; }
public void METHOD_NAME(RecordStream VAR_RECORDSTREAM) { while (VAR_RECORDSTREAM.PeekNextClass() == typeof(MergeCellsRecord)) { MergeCellsRecord VAR_MERGECELLSRECORD = (MergeCellsRecord)VAR_RECORDSTREAM.GetNext(); int VAR_INT = VAR_MERGECELLSRECORD.NumAreas; for (int i = LITERAL_INT; i < VAR_INT; i++) { _mergedRegions.Add(VAR_MERGECELLSRECORD.GetAreaAt(i)); } } }
public override int METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual RemoteRefUpdate.Status METHOD_NAME() { return status; }
public virtual string[] METHOD_NAME(string VAR_STRING) { int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; LITERAL_INT <= i && i < VAR_STRING.Length;) { int VAR_INT = DashEven(VAR_STRING, i); if (i == VAR_INT) { VAR_INT++; i = VAR_INT + LITERAL_INT; } else { VAR_INT++; i = VAR_INT; } } string[] VAR_STRING[] = new string[VAR_INT]; int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; LITERAL_INT <= i && i < VAR_STRING.Length;) { int VAR_INT = DashEven(VAR_STRING, i); if (i == VAR_INT) { VAR_STRING[][VAR_INT++] = VAR_STRING.Substring(i, LITERAL_INT); i = VAR_INT + LITERAL_INT; } else { VAR_STRING[][VAR_INT++] = (VAR_INT < LITERAL_INT) ? VAR_STRING.Substring(i, VAR_STRING.Length - i) : VAR_STRING.Substring(i, VAR_INT - i); i = VAR_INT; } } return VAR_STRING[]; }
public RevokeSecurityGroupIngressRequest(string VAR_STRING, List<IpPermission> VAR_LIST<IPPERMISSION>) { _groupName = VAR_STRING; _ipPermissions = VAR_LIST<IPPERMISSION>; }
public override Ref METHOD_NAME(object VAR_OBJECT) { string VAR_STRING = ToRefName((string)VAR_OBJECT); Ref VAR_REF = LITERAL_NULL; int VAR_INT; if (LITERAL_INT <= (VAR_INT = packed.Find(VAR_STRING))) { VAR_REF = packed.Get(VAR_STRING); packed = packed.METHOD_NAME(VAR_INT); sizeIsValid = false; } if (LITERAL_INT <= (VAR_INT = loose.Find(VAR_STRING))) { VAR_REF = loose.Get(VAR_STRING); loose = loose.METHOD_NAME(VAR_INT); sizeIsValid = false; } if (LITERAL_INT <= (VAR_INT = resolved.Find(VAR_STRING))) { VAR_REF = resolved.Get(VAR_STRING); resolved = resolved.METHOD_NAME(VAR_INT); sizeIsValid = false; } return VAR_REF; }
public virtual DescribeMLModelsResponse METHOD_NAME(DescribeMLModelsRequest VAR_DESCRIBEMLMODELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMLModelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMLModelsResponseUnmarshaller.Instance; return Invoke<DescribeMLModelsResponse>(VAR_DESCRIBEMLMODELSREQUEST, VAR_VAR); }
public string METHOD_NAME(int VAR_INT) { return LITERAL_NULL; }
public CreateVolumeRequest(string VAR_STRING, string VAR_STRING) { _availabilityZone = VAR_STRING; _snapshotId = VAR_STRING; }
public IDataValidationConstraint METHOD_NAME(int VAR_INT, String VAR_STRING, String VAR_STRING, String VAR_STRING) { return DVConstraint.METHOD_NAME(VAR_INT, VAR_STRING, VAR_STRING, VAR_STRING); }
public virtual CloneReceiptRuleSetResponse METHOD_NAME(CloneReceiptRuleSetRequest VAR_CLONERECEIPTRULESETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CloneReceiptRuleSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CloneReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<CloneReceiptRuleSetResponse>(VAR_CLONERECEIPTRULESETREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(string VAR_STRING) { return LITERAL_INT; }
public virtual long METHOD_NAME(char VAR_CHAR) { long VAR_LONG = LITERAL_INT; long VAR_LONG = unchecked((long)LITERAL_INT); VAR_LONG = (VAR_LONG ^ (VAR_CHAR & LITERAL_INT)) * VAR_LONG; VAR_LONG = (VAR_LONG ^ (VAR_CHAR >> LITERAL_INT)) * VAR_LONG; VAR_LONG += VAR_LONG << LITERAL_INT; VAR_LONG ^= VAR_LONG >> LITERAL_INT; VAR_LONG += VAR_LONG << LITERAL_INT; VAR_LONG ^= VAR_LONG >> LITERAL_INT; VAR_LONG += VAR_LONG << LITERAL_INT; return VAR_LONG; }
public java.nio.ByteBuffer METHOD_NAME(java.nio.ByteOrder VAR_JAVA.NIO.BYTEORDER) { orderImpl(VAR_JAVA.NIO.BYTEORDER); return this; }
public virtual DescribeAlarmsForMetricResponse METHOD_NAME(DescribeAlarmsForMetricRequest VAR_DESCRIBEALARMSFORMETRICREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAlarmsForMetricRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAlarmsForMetricResponseUnmarshaller.Instance; return Invoke<DescribeAlarmsForMetricResponse>(VAR_DESCRIBEALARMSFORMETRICREQUEST, VAR_VAR); }
public virtual TerminateWorkflowExecutionResponse METHOD_NAME(TerminateWorkflowExecutionRequest VAR_TERMINATEWORKFLOWEXECUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = TerminateWorkflowExecutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = TerminateWorkflowExecutionResponseUnmarshaller.Instance; return Invoke<TerminateWorkflowExecutionResponse>(VAR_TERMINATEWORKFLOWEXECUTIONREQUEST, VAR_VAR); }
public DistanceValueSource(PointVectorStrategy VAR_POINTVECTORSTRATEGY, IPoint VAR_IPOINT, double VAR_DOUBLE) { this.VAR_POINTVECTORSTRATEGY = VAR_POINTVECTORSTRATEGY; this.VAR_IPOINT = VAR_IPOINT; this.VAR_DOUBLE = VAR_DOUBLE; }
public virtual RenameBranchCommand METHOD_NAME() { return new RenameBranchCommand(repo); }
public override java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.INT); byteBuffer.position(_position * libcore.io.SizeOf.INT); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_INT[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_INT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual DescribeInstanceEventNotificationAttributesResponse METHOD_NAME(DescribeInstanceEventNotificationAttributesRequest VAR_DESCRIBEINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstanceEventNotificationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstanceEventNotificationAttributesResponseUnmarshaller.Instance; return Invoke<DescribeInstanceEventNotificationAttributesResponse>(VAR_DESCRIBEINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST, VAR_VAR); }
public void METHOD_NAME(string VAR_STRING, string VAR_STRING) { userAgentConfig.METHOD_NAME(VAR_STRING, VAR_STRING); }
public virtual string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (var i = LITERAL_INT; i < VAR_STRING.Length;) { var VAR_VAR = Char.ConvertToUtf32(VAR_STRING, i); VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_VAR)); i += (VAR_VAR > LITERAL_INT) ? LITERAL_INT : LITERAL_INT; } return VAR_STRINGBUILDER.ToString(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(XPosition).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(YPosition).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Width).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Height).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field5_grbit)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public GetQuotaRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteEventStreamResponse METHOD_NAME(DeleteEventStreamRequest VAR_DELETEEVENTSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEventStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEventStreamResponseUnmarshaller.Instance; return Invoke<DeleteEventStreamResponse>(VAR_DELETEEVENTSTREAMREQUEST, VAR_VAR); }
public GetPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual int METHOD_NAME() { return begin; }
public virtual void METHOD_NAME() { if (refCount <= LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } var VAR_VAR = refCount.DecrementAndGet(); if (VAR_VAR == LITERAL_INT) { bool VAR_BOOL = false; try { Revision.Release(); VAR_BOOL = true; } finally { if (!VAR_BOOL) { refCount.IncrementAndGet(); } } } else if (VAR_VAR < LITERAL_INT) { throw new InvalidOperationException(string.Format(LITERAL_STRING, VAR_VAR)); } }
public virtual DescribeDataSetPermissionsResponse METHOD_NAME(DescribeDataSetPermissionsRequest VAR_DESCRIBEDATASETPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataSetPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataSetPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDataSetPermissionsResponse>(VAR_DESCRIBEDATASETPERMISSIONSREQUEST, VAR_VAR); }
public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public TokenStreamToAutomaton() { this.preservePositionIncrements = true; }
public NameXPtg METHOD_NAME(String VAR_STRING) { int VAR_INT = -LITERAL_INT; ExternalBookBlock VAR_EXTERNALBOOKBLOCK = LITERAL_NULL; for (int i = LITERAL_INT; i < _externalBookBlocks.Length; i++) { SupBookRecord VAR_SUPBOOKRECORD = _externalBookBlocks[i].GetExternalBookRecord(); if (VAR_SUPBOOKRECORD.IsAddInFunctions) { VAR_EXTERNALBOOKBLOCK = _externalBookBlocks[i]; VAR_INT = i; break; } } if (VAR_EXTERNALBOOKBLOCK == LITERAL_NULL) { VAR_EXTERNALBOOKBLOCK = new ExternalBookBlock(); VAR_INT = ExtendExternalBookBlocks(VAR_EXTERNALBOOKBLOCK); int VAR_INT = FindFirstRecordLocBySid(ExternSheetRecord.sid); _workbookRecordList.Add(VAR_INT, VAR_EXTERNALBOOKBLOCK.GetExternalBookRecord()); _externSheetRecord.AddRef(_externalBookBlocks.Length - LITERAL_INT, -LITERAL_INT, -LITERAL_INT); } ExternalNameRecord VAR_EXTERNALNAMERECORD = new ExternalNameRecord(); VAR_EXTERNALNAMERECORD.Text = (VAR_STRING); VAR_EXTERNALNAMERECORD.SetParsedExpression(new Ptg[] { ErrPtg.REF_INVALID }); int VAR_INT = VAR_EXTERNALBOOKBLOCK.AddExternalName(VAR_EXTERNALNAMERECORD); int VAR_INT = LITERAL_INT; for (IEnumerator iterator = _workbookRecordList.GetEnumerator(); iterator.MoveNext(); VAR_INT++) { Record VAR_RECORD = (Record)iterator.Current; if (VAR_RECORD is SupBookRecord) { if (((SupBookRecord)VAR_RECORD).IsAddInFunctions) break; } } int VAR_INT = VAR_EXTERNALBOOKBLOCK.NumberOfNames; _workbookRecordList.Add(VAR_INT + VAR_INT, VAR_EXTERNALNAMERECORD); int VAR_INT = -LITERAL_INT; int VAR_INT = _externSheetRecord.GetRefIxForSheet(VAR_INT, VAR_INT, VAR_INT); return new NameXPtg(VAR_INT, VAR_INT); }
public static IndexReaderContext METHOD_NAME(IndexReaderContext VAR_INDEXREADERCONTEXT) { while (VAR_INDEXREADERCONTEXT.Parent != LITERAL_NULL) { VAR_INDEXREADERCONTEXT = VAR_INDEXREADERCONTEXT.Parent; } return VAR_INDEXREADERCONTEXT; }
public override java.nio.CharBuffer METHOD_NAME(char VAR_CHAR) { throw new java.nio.ReadOnlyBufferException(); }
public virtual DeleteLabelsResponse METHOD_NAME(DeleteLabelsRequest VAR_DELETELABELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLabelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLabelsResponseUnmarshaller.Instance; return Invoke<DeleteLabelsResponse>(VAR_DELETELABELSREQUEST, VAR_VAR); }
public virtual ListAlgorithmsResponse METHOD_NAME(ListAlgorithmsRequest VAR_LISTALGORITHMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAlgorithmsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAlgorithmsResponseUnmarshaller.Instance; return Invoke<ListAlgorithmsResponse>(VAR_LISTALGORITHMSREQUEST, VAR_VAR); }
public virtual NGit.Api.DiffCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual bool METHOD_NAME() { return force; }
public virtual DeleteVpcEndpointServiceConfigurationsResponse METHOD_NAME(DeleteVpcEndpointServiceConfigurationsRequest VAR_DELETEVPCENDPOINTSERVICECONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpcEndpointServiceConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpcEndpointServiceConfigurationsResponseUnmarshaller.Instance; return Invoke<DeleteVpcEndpointServiceConfigurationsResponse>(VAR_DELETEVPCENDPOINTSERVICECONFIGURATIONSREQUEST, VAR_VAR); }
public Field(string VAR_STRING, TokenStream VAR_TOKENSTREAM, FieldType VAR_FIELDTYPE) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } if (VAR_TOKENSTREAM == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } if (VAR_FIELDTYPE == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING, LITERAL_STRING); } if (!VAR_FIELDTYPE.IsIndexed || !VAR_FIELDTYPE.IsTokenized) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_FIELDTYPE.IsStored) { throw new System.ArgumentException(LITERAL_STRING); } this.m_name = VAR_STRING; this.FieldsData = LITERAL_NULL; this.m_tokenStream = VAR_TOKENSTREAM; this.m_type = VAR_FIELDTYPE; }
public virtual ListDeadLetterSourceQueuesResponse METHOD_NAME(ListDeadLetterSourceQueuesRequest VAR_LISTDEADLETTERSOURCEQUEUESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeadLetterSourceQueuesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeadLetterSourceQueuesResponseUnmarshaller.Instance; return Invoke<ListDeadLetterSourceQueuesResponse>(VAR_LISTDEADLETTERSOURCEQUEUESREQUEST, VAR_VAR); }
public BinaryDocValuesField(string VAR_STRING, BytesRef VAR_BYTESREF) : base(name, fType) { FieldsData = VAR_BYTESREF; }
public CreateVpnConnectionRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _type = VAR_STRING; _customerGatewayId = VAR_STRING; _vpnGatewayId = VAR_STRING; }
public virtual OpenInstancePublicPortsResponse METHOD_NAME(OpenInstancePublicPortsRequest VAR_OPENINSTANCEPUBLICPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = OpenInstancePublicPortsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = OpenInstancePublicPortsResponseUnmarshaller.Instance; return Invoke<OpenInstancePublicPortsResponse>(VAR_OPENINSTANCEPUBLICPORTSREQUEST, VAR_VAR); }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public InputIteratorWrapper(IBytesRefIterator VAR_IBYTESREFITERATOR) { this.VAR_IBYTESREFITERATOR = VAR_IBYTESREFITERATOR; }
public virtual CreateUserProfileResponse METHOD_NAME(CreateUserProfileRequest VAR_CREATEUSERPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateUserProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateUserProfileResponseUnmarshaller.Instance; return Invoke<CreateUserProfileResponse>(VAR_CREATEUSERPROFILEREQUEST, VAR_VAR); }
public virtual ImportWorkspaceImageResponse METHOD_NAME(ImportWorkspaceImageRequest VAR_IMPORTWORKSPACEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportWorkspaceImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportWorkspaceImageResponseUnmarshaller.Instance; return Invoke<ImportWorkspaceImageResponse>(VAR_IMPORTWORKSPACEIMAGEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { mState = STATE_IDLE; }
public virtual DescribeFleetHistoryResponse METHOD_NAME(DescribeFleetHistoryRequest VAR_DESCRIBEFLEETHISTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetHistoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetHistoryResponseUnmarshaller.Instance; return Invoke<DescribeFleetHistoryResponse>(VAR_DESCRIBEFLEETHISTORYREQUEST, VAR_VAR); }
public virtual ListGatewaysResponse METHOD_NAME(ListGatewaysRequest VAR_LISTGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGatewaysResponseUnmarshaller.Instance; return Invoke<ListGatewaysResponse>(VAR_LISTGATEWAYSREQUEST, VAR_VAR); }
public virtual CreateTrafficMirrorFilterResponse METHOD_NAME(CreateTrafficMirrorFilterRequest VAR_CREATETRAFFICMIRRORFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrafficMirrorFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrafficMirrorFilterResponseUnmarshaller.Instance; return Invoke<CreateTrafficMirrorFilterResponse>(VAR_CREATETRAFFICMIRRORFILTERREQUEST, VAR_VAR); }
public BytesRef(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { this.VAR_BYTE[] = VAR_BYTE[]; this.Offset = VAR_INT; this.Length = VAR_INT; Debug.Assert(IsValid()); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Sid + PtgClass); }
public BufferedChecksum(IChecksum VAR_ICHECKSUM, int VAR_INT) { this.VAR_ICHECKSUM = VAR_ICHECKSUM; this.buffer = new byte[VAR_INT]; }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(Add); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual TagCommand METHOD_NAME() { return new TagCommand(repo); }
public virtual DescribeClusterDbRevisionsResponse METHOD_NAME(DescribeClusterDbRevisionsRequest VAR_DESCRIBECLUSTERDBREVISIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterDbRevisionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterDbRevisionsResponseUnmarshaller.Instance; return Invoke<DescribeClusterDbRevisionsResponse>(VAR_DESCRIBECLUSTERDBREVISIONSREQUEST, VAR_VAR); }
public virtual StartImageScanResponse METHOD_NAME(StartImageScanRequest VAR_STARTIMAGESCANREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartImageScanRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartImageScanResponseUnmarshaller.Instance; return Invoke<StartImageScanResponse>(VAR_STARTIMAGESCANREQUEST, VAR_VAR); }
throw new NotImplementedException(LITERAL_STRING);
public virtual RestoreDBInstanceToPointInTimeResponse METHOD_NAME(RestoreDBInstanceToPointInTimeRequest VAR_RESTOREDBINSTANCETOPOINTINTIMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreDBInstanceToPointInTimeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreDBInstanceToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBInstanceToPointInTimeResponse>(VAR_RESTOREDBINSTANCETOPOINTINTIMEREQUEST, VAR_VAR); }
public bool METHOD_NAME(HSSFShape VAR_HSSFSHAPE) { bool VAR_BOOL = _mainSpgrContainer.RemoveChildRecord(VAR_HSSFSHAPE.GetEscherContainer()); if (VAR_BOOL) { VAR_HSSFSHAPE.AfterRemove(this); _shapes.Remove(VAR_HSSFSHAPE); } return VAR_BOOL; }
public static void METHOD_NAME(bool[] VAR_BOOL[], bool VAR_BOOL) { { for (int i = LITERAL_INT; i < VAR_BOOL[].Length; i++) { VAR_BOOL[][i] = VAR_BOOL; } } }
public virtual DeleteAssessmentTemplateResponse METHOD_NAME(DeleteAssessmentTemplateRequest VAR_DELETEASSESSMENTTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAssessmentTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAssessmentTemplateResponseUnmarshaller.Instance; return Invoke<DeleteAssessmentTemplateResponse>(VAR_DELETEASSESSMENTTEMPLATEREQUEST, VAR_VAR); }
public virtual StartMonitoringScheduleResponse METHOD_NAME(StartMonitoringScheduleRequest VAR_STARTMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<StartMonitoringScheduleResponse>(VAR_STARTMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { METHOD_NAME(VAR_INT.ToString()); }
public virtual PutRoomSkillParameterResponse METHOD_NAME(PutRoomSkillParameterRequest VAR_PUTROOMSKILLPARAMETERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRoomSkillParameterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRoomSkillParameterResponseUnmarshaller.Instance; return Invoke<PutRoomSkillParameterResponse>(VAR_PUTROOMSKILLPARAMETERREQUEST, VAR_VAR); }
public virtual DeleteDomainResponse METHOD_NAME(DeleteDomainRequest VAR_DELETEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDomainResponseUnmarshaller.Instance; return Invoke<DeleteDomainResponse>(VAR_DELETEDOMAINREQUEST, VAR_VAR); }
public virtual ModifyLaunchTemplateResponse METHOD_NAME(ModifyLaunchTemplateRequest VAR_MODIFYLAUNCHTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyLaunchTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyLaunchTemplateResponseUnmarshaller.Instance; return Invoke<ModifyLaunchTemplateResponse>(VAR_MODIFYLAUNCHTEMPLATEREQUEST, VAR_VAR); }
public virtual float METHOD_NAME(int VAR_INT) { Debug.Assert(IsSupported(VAR_INT)); return OverheadPerValue(VAR_INT) / VAR_INT; }
public virtual ObjectId METHOD_NAME() { return indexId; }
public override string METHOD_NAME(string VAR_STRING) { return LITERAL_STRING + LikeText; }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; VAR_LONG += (docIDs != LITERAL_NULL) ? RamUsageEstimator.SizeOf(docIDs) : LITERAL_INT; VAR_LONG += (freqs != LITERAL_NULL) ? RamUsageEstimator.SizeOf(freqs) : LITERAL_INT; if (positions != LITERAL_NULL) { foreach (int[] position in positions) { VAR_LONG += (position != LITERAL_NULL) ? RamUsageEstimator.SizeOf(position) : LITERAL_INT; } } if (payloads != LITERAL_NULL) { foreach (var payload in payloads) { if (payload != LITERAL_NULL) { foreach (var pload in payload) { VAR_LONG += (pload != LITERAL_NULL) ? RamUsageEstimator.SizeOf(pload) : LITERAL_INT; } } } } return VAR_LONG; }
public virtual void METHOD_NAME(bool VAR_BOOL) { this.needBaseObjectIds = VAR_BOOL; }
public virtual int METHOD_NAME() { return this.m_counter++; }
public override java.nio.FloatBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public int METHOD_NAME() { return endA - beginA; }
public virtual SearchDevicesResponse METHOD_NAME(SearchDevicesRequest VAR_SEARCHDEVICESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchDevicesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchDevicesResponseUnmarshaller.Instance; return Invoke<SearchDevicesResponse>(VAR_SEARCHDEVICESREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return dictionary.METHOD_NAME(wordId); }
public override TreeFilter METHOD_NAME() { return this; }
public virtual PurchaseReservedDBInstancesOfferingResponse METHOD_NAME(PurchaseReservedDBInstancesOfferingRequest VAR_PURCHASERESERVEDDBINSTANCESOFFERINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseReservedDBInstancesOfferingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseReservedDBInstancesOfferingResponseUnmarshaller.Instance; return Invoke<PurchaseReservedDBInstancesOfferingResponse>(VAR_PURCHASERESERVEDDBINSTANCESOFFERINGREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return base.Message; }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } if ((jj_la1_1[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][LITERAL_INT + j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], StandardSyntaxParserConstants.TokenImage); }
public int[] METHOD_NAME() { int[] VAR_INT[] = new int[_limit]; Array.Copy(_array, LITERAL_INT, VAR_INT[], LITERAL_INT, _limit); return VAR_INT[]; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], OperationEvaluationContext VAR_OPERATIONEVALUATIONCONTEXT) { if (VAR_VALUEEVAL[].Length == LITERAL_INT) { return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT]); } if (VAR_VALUEEVAL[].Length == LITERAL_INT) { return METHOD_NAME(VAR_OPERATIONEVALUATIONCONTEXT.RowIndex, VAR_OPERATIONEVALUATIONCONTEXT.ColumnIndex, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public virtual DescribeCustomerGatewaysResponse METHOD_NAME(DescribeCustomerGatewaysRequest VAR_DESCRIBECUSTOMERGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCustomerGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCustomerGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeCustomerGatewaysResponse>(VAR_DESCRIBECUSTOMERGATEWAYSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return Utf8.Utf8ToString() + LITERAL_STRING + Bucket.METHOD_NAME(LITERAL_STRING, CultureInfo.InvariantCulture); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public virtual void METHOD_NAME(TextFragment VAR_TEXTFRAGMENT) { uniqueTermsInFragment = new JCG.HashSet<string>(); currentTextFragment = VAR_TEXTFRAGMENT; totalScore = LITERAL_INT; }
public void METHOD_NAME(int VAR_INT, int VAR_INT) { SetPropertyValue(new EscherSimpleProperty(EscherProperties.GEOMETRY__RIGHT, VAR_INT)); SetPropertyValue(new EscherSimpleProperty(EscherProperties.GEOMETRY__BOTTOM, VAR_INT)); }
public virtual DeleteRouteSettingsResponse METHOD_NAME(DeleteRouteSettingsRequest VAR_DELETEROUTESETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRouteSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRouteSettingsResponseUnmarshaller.Instance; return Invoke<DeleteRouteSettingsResponse>(VAR_DELETEROUTESETTINGSREQUEST, VAR_VAR); }
public virtual NGit.Api.CherryPickCommand METHOD_NAME(string VAR_STRING, AnyObjectId VAR_ANYOBJECTID) { return METHOD_NAME(new ObjectIdRef.Unpeeled(RefStorage.LOOSE, VAR_STRING, VAR_ANYOBJECTID.Copy())); }
public short METHOD_NAME(String VAR_STRING, bool VAR_BOOL) { IEnumerator VAR_IENUMERATOR; for (VAR_IENUMERATOR = formats.GetEnumerator(); VAR_IENUMERATOR.MoveNext();) { FormatRecord VAR_FORMATRECORD = (FormatRecord)VAR_IENUMERATOR.Current; if (VAR_FORMATRECORD.FormatString.Equals(VAR_STRING)) { return (short)VAR_FORMATRECORD.IndexCode; } } if (VAR_BOOL) { return (short)CreateFormat(VAR_STRING); } return -LITERAL_INT; }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { MyEnumerator VAR_MYENUMERATOR = new MyEnumerator(ref records, VAR_INT, VAR_INT); int VAR_INT = LITERAL_INT; while (VAR_MYENUMERATOR.MoveNext()) { CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE = (CellValueRecordInterface)VAR_MYENUMERATOR.Current; int VAR_INT = VAR_CELLVALUERECORDINTERFACE.Row; if (VAR_INT > VAR_INT) break; if ((VAR_INT >= VAR_INT) && (VAR_INT <= VAR_INT)) VAR_INT += ((RecordBase)VAR_CELLVALUERECORDINTERFACE).RecordSize; } return VAR_INT; }
public override sealed bool METHOD_NAME() { if (it == LITERAL_NULL) { it = cachedStates.GetEnumerator(); } if (!it.MoveNext()) return false; var VAR_VAR = it.Current; RestoreState(VAR_VAR); return true; }
public virtual DeleteTemplateResponse METHOD_NAME(DeleteTemplateRequest VAR_DELETETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTemplateResponseUnmarshaller.Instance; return Invoke<DeleteTemplateResponse>(VAR_DELETETEMPLATEREQUEST, VAR_VAR); }
public virtual StartFaceSearchResponse METHOD_NAME(StartFaceSearchRequest VAR_STARTFACESEARCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartFaceSearchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartFaceSearchResponseUnmarshaller.Instance; return Invoke<StartFaceSearchResponse>(VAR_STARTFACESEARCHREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (VAR_INT == LITERAL_INT) { VAR_BYTE[][--VAR_INT] = (byte)(LITERAL_CHAR); return VAR_INT; } bool VAR_BOOL = VAR_INT < LITERAL_INT; if (VAR_BOOL) { VAR_INT = -VAR_INT; } while (VAR_INT != LITERAL_INT) { VAR_BYTE[][--VAR_INT] = base10byte[VAR_INT % LITERAL_INT]; VAR_INT /= LITERAL_INT; } if (VAR_BOOL) { VAR_BYTE[][--VAR_INT] = (byte)(LITERAL_CHAR); } return VAR_INT; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Index)).Append(LITERAL_STRING).Append(Index).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeDBSecurityGroupsResponse METHOD_NAME(DescribeDBSecurityGroupsRequest VAR_DESCRIBEDBSECURITYGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBSecurityGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeDBSecurityGroupsResponse>(VAR_DESCRIBEDBSECURITYGROUPSREQUEST, VAR_VAR); }
public virtual DeleteTrafficMirrorSessionResponse METHOD_NAME(DeleteTrafficMirrorSessionRequest VAR_DELETETRAFFICMIRRORSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficMirrorSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficMirrorSessionResponseUnmarshaller.Instance; return Invoke<DeleteTrafficMirrorSessionResponse>(VAR_DELETETRAFFICMIRRORSESSIONREQUEST, VAR_VAR); }
public override void METHOD_NAME() { int VAR_INT = ptr; int VAR_INT = cache.GetEntryCount(); if (VAR_INT < VAR_INT) { builder.Keep(VAR_INT, VAR_INT - VAR_INT); } }
public ExpandedDouble METHOD_NAME() { MutableFPNumber VAR_MUTABLEFPNUMBER = new MutableFPNumber(ComposeFrac(), LITERAL_INT); VAR_MUTABLEFPNUMBER.multiplyByPowerOfTen(_relativeDecimalExponent); VAR_MUTABLEFPNUMBER.Normalise64bit(); return VAR_MUTABLEFPNUMBER.CreateExpandedDouble(); }
public virtual PutLexiconResponse METHOD_NAME(PutLexiconRequest VAR_PUTLEXICONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutLexiconRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutLexiconResponseUnmarshaller.Instance; return Invoke<PutLexiconResponse>(VAR_PUTLEXICONREQUEST, VAR_VAR); }
public override int[] METHOD_NAME() { if (perField.postingsArray == LITERAL_NULL) { perField.postingsArray = perField.consumer.CreatePostingsArray(LITERAL_INT); bytesUsed.AddAndGet(perField.postingsArray.size * perField.postingsArray.BytesPerPosting()); } return perField.postingsArray.textStarts; }
public virtual DirCacheEntry METHOD_NAME() { return entry; }
public override bool METHOD_NAME(TreeWalk VAR_TREEWALK) { return VAR_TREEWALK.IsPathPrefix(pathRaw, pathRaw.Length) == LITERAL_INT; }
public void METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } if (this == NOOP || !ENABLED) { return; } string VAR_STRING = LITERAL_STRING + VAR_STRING + LITERAL_STRING; allocationSite = new System.Exception(VAR_STRING); }
public virtual IList<ParseTreeMatch> METHOD_NAME(IParseTree VAR_IPARSETREE, string VAR_STRING) { ICollection<IParseTree> VAR_ICOLLECTION<IPARSETREE> = XPath.METHOD_NAME(VAR_IPARSETREE, VAR_STRING, matcher.Parser); IList<ParseTreeMatch> VAR_ILIST<PARSETREEMATCH> = new List<ParseTreeMatch>(); foreach (IParseTree t in VAR_ICOLLECTION<IPARSETREE>) { ParseTreeMatch VAR_PARSETREEMATCH = Match(t); if (VAR_PARSETREEMATCH.Succeeded) { VAR_ILIST<PARSETREEMATCH>.Add(VAR_PARSETREEMATCH); } } return VAR_ILIST<PARSETREEMATCH>; }
public static bool METHOD_NAME(PredictionMode VAR_PREDICTIONMODE, ATNConfigSet VAR_ATNCONFIGSET) { if (AllConfigsInRuleStopStates(VAR_ATNCONFIGSET.configs)) { return true; } if (VAR_PREDICTIONMODE == PredictionMode.SLL) { if (VAR_ATNCONFIGSET.hasSemanticContext) { ATNConfigSet VAR_ATNCONFIGSET = new ATNConfigSet(); foreach (ATNConfig c in VAR_ATNCONFIGSET.configs) { VAR_ATNCONFIGSET.Add(new ATNConfig(c, SemanticContext.NONE)); } VAR_ATNCONFIGSET = VAR_ATNCONFIGSET; } } ICollection<BitSet> VAR_ICOLLECTION<BITSET> = GetConflictingAltSubsets(VAR_ATNCONFIGSET.configs); bool VAR_BOOL = HasConflictingAltSet(VAR_ICOLLECTION<BITSET>) && !HasStateAssociatedWithOneAlt(VAR_ATNCONFIGSET.configs); return VAR_BOOL; }
public virtual DescribeUpdateActionsResponse METHOD_NAME(DescribeUpdateActionsRequest VAR_DESCRIBEUPDATEACTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUpdateActionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUpdateActionsResponseUnmarshaller.Instance; return Invoke<DescribeUpdateActionsResponse>(VAR_DESCRIBEUPDATEACTIONSREQUEST, VAR_VAR); }
public HashMap() { table = (java.util.HashMap.HashMapEntry<K, V>[])EMPTY_TABLE; threshold = -LITERAL_INT; }
public virtual Trie METHOD_NAME(Trie VAR_TRIE) { IList<string> VAR_ILIST<STRING> = VAR_TRIE.cmds; IList<Row> VAR_ILIST<ROW> = new List<Row>(); IList<Row> VAR_ILIST<ROW> = VAR_TRIE.VAR_ILIST<ROW>; int[] VAR_INT[] = new int[VAR_ILIST<ROW>.Count]; Arrays.Fill(VAR_INT[], -LITERAL_INT); VAR_ILIST<ROW> = RemoveGaps(VAR_TRIE.root, VAR_ILIST<ROW>, new List<Row>(), VAR_INT[]); return new Trie(VAR_TRIE.forward, VAR_INT[][VAR_TRIE.root], VAR_ILIST<STRING>, VAR_ILIST<ROW>); }
public virtual CreateLifecyclePolicyResponse METHOD_NAME(CreateLifecyclePolicyRequest VAR_CREATELIFECYCLEPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLifecyclePolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<CreateLifecyclePolicyResponse>(VAR_CREATELIFECYCLEPOLICYREQUEST, VAR_VAR); }
public void METHOD_NAME(long VAR_LONG) { WriteInt((int)(VAR_LONG >> LITERAL_INT)); WriteInt((int)(VAR_LONG >> LITERAL_INT)); }
public virtual void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { this.m_buf = VAR_CHAR[]; this.m_len = VAR_INT; }
public HMMChineseTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override string METHOD_NAME() { return GetType().Name + LITERAL_STRING + fieldName + LITERAL_STRING + m_ctx; }
public virtual ResendContactReachabilityEmailResponse METHOD_NAME(ResendContactReachabilityEmailRequest VAR_RESENDCONTACTREACHABILITYEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResendContactReachabilityEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResendContactReachabilityEmailResponseUnmarshaller.Instance; return Invoke<ResendContactReachabilityEmailResponse>(VAR_RESENDCONTACTREACHABILITYEMAILREQUEST, VAR_VAR); }
public virtual GetApiKeyResponse METHOD_NAME(GetApiKeyRequest VAR_GETAPIKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApiKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApiKeyResponseUnmarshaller.Instance; return Invoke<GetApiKeyResponse>(VAR_GETAPIKEYREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { previousValue = value; if (value == LITERAL_INT) { value = outerInstance.minShingleSize; } else if (value == outerInstance.maxShingleSize) { Reset(); } else { ++value; } }
public int METHOD_NAME(CellRangeAddress[] VAR_CELLRANGEADDRESS[], HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { return METHOD_NAME(VAR_CELLRANGEADDRESS[], VAR_HSSFCONDITIONALFORMATTINGRULE == LITERAL_NULL ? LITERAL_NULL : new HSSFConditionalFormattingRule[] { VAR_HSSFCONDITIONALFORMATTINGRULE }); }
public virtual NGit.Api.RebaseCommand METHOD_NAME(RevCommit VAR_REVCOMMIT) { this.upstreamCommit = VAR_REVCOMMIT; this.upstreamCommitName = VAR_REVCOMMIT.Name; return this; }
public virtual GetDocumentTextDetectionResponse METHOD_NAME(GetDocumentTextDetectionRequest VAR_GETDOCUMENTTEXTDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDocumentTextDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDocumentTextDetectionResponseUnmarshaller.Instance; return Invoke<GetDocumentTextDetectionResponse>(VAR_GETDOCUMENTTEXTDETECTIONREQUEST, VAR_VAR); }
public CreateDBSecurityGroupRequest(string VAR_STRING, string VAR_STRING) { _dbSecurityGroupName = VAR_STRING; _dbSecurityGroupDescription = VAR_STRING; }
public override TextReader METHOD_NAME(TextReader VAR_TEXTREADER) { return new ICUNormalizer2CharFilter(VAR_TEXTREADER, normalizer); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, LITERAL_INT); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING) { object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { throw new Exception(LITERAL_STRING); } props[VAR_STRING] = VAR_STRING; }
public virtual DescribeFastSnapshotRestoresResponse METHOD_NAME(DescribeFastSnapshotRestoresRequest VAR_DESCRIBEFASTSNAPSHOTRESTORESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFastSnapshotRestoresRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFastSnapshotRestoresResponseUnmarshaller.Instance; return Invoke<DescribeFastSnapshotRestoresResponse>(VAR_DESCRIBEFASTSNAPSHOTRESTORESREQUEST, VAR_VAR); }
public virtual DescribeScheduledInstanceAvailabilityResponse METHOD_NAME(DescribeScheduledInstanceAvailabilityRequest VAR_DESCRIBESCHEDULEDINSTANCEAVAILABILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScheduledInstanceAvailabilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScheduledInstanceAvailabilityResponseUnmarshaller.Instance; return Invoke<DescribeScheduledInstanceAvailabilityResponse>(VAR_DESCRIBESCHEDULEDINSTANCEAVAILABILITYREQUEST, VAR_VAR); }
public virtual SendBonusResponse METHOD_NAME(SendBonusRequest VAR_SENDBONUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendBonusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendBonusResponseUnmarshaller.Instance; return Invoke<SendBonusResponse>(VAR_SENDBONUSREQUEST, VAR_VAR); }
public UnpackException(Exception VAR_EXCEPTION) : base(JGitText.Get().unpackException, why) { Sharpen.Extensions.InitCause(this, VAR_EXCEPTION); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public override java.util.Iterator<V> METHOD_NAME() { return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing); }
public virtual DescribeVpcEndpointServiceConfigurationsResponse METHOD_NAME(DescribeVpcEndpointServiceConfigurationsRequest VAR_DESCRIBEVPCENDPOINTSERVICECONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcEndpointServiceConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcEndpointServiceConfigurationsResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServiceConfigurationsResponse>(VAR_DESCRIBEVPCENDPOINTSERVICECONFIGURATIONSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(RawTextComparator VAR_RAWTEXTCOMPARATOR) { comparator = VAR_RAWTEXTCOMPARATOR; }
public override Object METHOD_NAME() { return this; }
public virtual DeleteServiceResponse METHOD_NAME(DeleteServiceRequest VAR_DELETESERVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteServiceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteServiceResponseUnmarshaller.Instance; return Invoke<DeleteServiceResponse>(VAR_DELETESERVICEREQUEST, VAR_VAR); }
public FormulaRecord() { field_8_parsed_expr = NPOI.SS.Formula.Formula.Create(Ptg.EMPTY_PTG_ARRAY); }
public virtual DescribeHsmClientCertificatesResponse METHOD_NAME(DescribeHsmClientCertificatesRequest VAR_DESCRIBEHSMCLIENTCERTIFICATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHsmClientCertificatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHsmClientCertificatesResponseUnmarshaller.Instance; return Invoke<DescribeHsmClientCertificatesResponse>(VAR_DESCRIBEHSMCLIENTCERTIFICATESREQUEST, VAR_VAR); }
public ICUTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { tailored = new Dictionary<int, string>(); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, RULEFILES); if (VAR_STRING != LITERAL_NULL) { IList<string> VAR_ILIST<STRING> = SplitFileNames(VAR_STRING); foreach (string scriptAndResourcePath in VAR_ILIST<STRING>) { int VAR_INT = scriptAndResourcePath.IndexOf(LITERAL_CHAR); string VAR_STRING = scriptAndResourcePath.Substring(LITERAL_INT, VAR_INT - LITERAL_INT).Trim(); string VAR_STRING = scriptAndResourcePath.Substring(VAR_INT + LITERAL_INT).Trim(); tailored[UChar.GetPropertyValueEnum(UProperty.Script, VAR_STRING)] = VAR_STRING; } } cjkAsWords = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); myanmarAsWords = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count != LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual SuspendProcessesResponse METHOD_NAME(SuspendProcessesRequest VAR_SUSPENDPROCESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SuspendProcessesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SuspendProcessesResponseUnmarshaller.Instance; return Invoke<SuspendProcessesResponse>(VAR_SUSPENDPROCESSESREQUEST, VAR_VAR); }
public virtual DescribeConfigurationRevisionResponse METHOD_NAME(DescribeConfigurationRevisionRequest VAR_DESCRIBECONFIGURATIONREVISIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConfigurationRevisionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConfigurationRevisionResponseUnmarshaller.Instance; return Invoke<DescribeConfigurationRevisionResponse>(VAR_DESCRIBECONFIGURATIONREVISIONREQUEST, VAR_VAR); }
public override RevFilter METHOD_NAME() { RevFilter[] VAR_REVFILTER[] = new RevFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_REVFILTER[].Length; i++) { VAR_REVFILTER[][i] = subfilters[i].METHOD_NAME(); } return new AndRevFilter.List(VAR_REVFILTER[]); }
public TabIdRecord() { _tabids = EMPTY_SHORT_ARRAY; }
public virtual IList<string> METHOD_NAME() { return conflictingPaths; }
public virtual void METHOD_NAME() { inDegree = LITERAL_INT; }
public DescribeJobFlowsRequest(List<string> VAR_LIST<STRING>) { _jobFlowIds = VAR_LIST<STRING>; }
public void METHOD_NAME() { int VAR_INT = refCount.DecrementAndGet(); if (VAR_INT == LITERAL_INT) { bool VAR_BOOL = false; try { Release(); VAR_BOOL = true; } finally { if (!VAR_BOOL) { refCount.IncrementAndGet(); } } } else if (VAR_INT < LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } }
public virtual DeleteMountTargetResponse METHOD_NAME(DeleteMountTargetRequest VAR_DELETEMOUNTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteMountTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteMountTargetResponseUnmarshaller.Instance; return Invoke<DeleteMountTargetResponse>(VAR_DELETEMOUNTTARGETREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(double VAR_DOUBLE) { METHOD_NAME(VAR_DOUBLE.ToString()); }
public virtual DescribeDBProxyTargetsResponse METHOD_NAME(DescribeDBProxyTargetsRequest VAR_DESCRIBEDBPROXYTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBProxyTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBProxyTargetsResponseUnmarshaller.Instance; return Invoke<DescribeDBProxyTargetsResponse>(VAR_DESCRIBEDBPROXYTARGETSREQUEST, VAR_VAR); }
public SrndQuery METHOD_NAME() { Token VAR_TOKEN; IList<SrndQuery> VAR_ILIST<SRNDQUERY>; switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.OR: VAR_TOKEN = Jj_consume_token(RegexpToken.OR); VAR_ILIST<SRNDQUERY> = FieldsQueryList(); { if (true) return GetOrQuery(VAR_ILIST<SRNDQUERY>, false, VAR_TOKEN); } case RegexpToken.AND: VAR_TOKEN = Jj_consume_token(RegexpToken.AND); VAR_ILIST<SRNDQUERY> = FieldsQueryList(); { if (true) return GetAndQuery(VAR_ILIST<SRNDQUERY>, false, VAR_TOKEN); } case RegexpToken.N: VAR_TOKEN = Jj_consume_token(RegexpToken.N); VAR_ILIST<SRNDQUERY> = FieldsQueryList(); { if (true) return GetDistanceQuery(VAR_ILIST<SRNDQUERY>, false, VAR_TOKEN, false); } case RegexpToken.W: VAR_TOKEN = Jj_consume_token(RegexpToken.W); VAR_ILIST<SRNDQUERY> = FieldsQueryList(); { if (true) return GetDistanceQuery(VAR_ILIST<SRNDQUERY>, false, VAR_TOKEN, true); } default: jj_la1[LITERAL_INT] = jj_gen; Jj_consume_token(-LITERAL_INT); throw new ParseException(); } throw new Exception(LITERAL_STRING); }
public virtual DeleteInstanceSnapshotResponse METHOD_NAME(DeleteInstanceSnapshotRequest VAR_DELETEINSTANCESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInstanceSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInstanceSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteInstanceSnapshotResponse>(VAR_DELETEINSTANCESNAPSHOTREQUEST, VAR_VAR); }
public java.util.MapClass.Entry<K, V> METHOD_NAME() { return this._enclosing.immutableCopy(this.endpoint(true)); }
public virtual DeregisterTransitGatewayMulticastGroupSourcesResponse METHOD_NAME(DeregisterTransitGatewayMulticastGroupSourcesRequest VAR_DEREGISTERTRANSITGATEWAYMULTICASTGROUPSOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterTransitGatewayMulticastGroupSourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupSourcesResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupSourcesResponse>(VAR_DEREGISTERTRANSITGATEWAYMULTICASTGROUPSOURCESREQUEST, VAR_VAR); }
public virtual ImportTerminologyResponse METHOD_NAME(ImportTerminologyRequest VAR_IMPORTTERMINOLOGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportTerminologyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportTerminologyResponseUnmarshaller.Instance; return Invoke<ImportTerminologyResponse>(VAR_IMPORTTERMINOLOGYREQUEST, VAR_VAR); }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE []) { byte[] VAR_BYTE[] = RawData; if (EscherRecords.Count == LITERAL_INT && VAR_BYTE[] != LITERAL_NULL) { return WriteData(VAR_INT, VAR_BYTE [], VAR_BYTE[]); } else { byte[] VAR_BYTE[] = new byte[RawDataSize]; int VAR_INT = LITERAL_INT; for (IEnumerator iterator = EscherRecords.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; VAR_INT += VAR_ESCHERRECORD.METHOD_NAME(VAR_INT, VAR_BYTE[], new NullEscherSerializationListener()); } return WriteData(VAR_INT, VAR_BYTE [], VAR_BYTE[]); } }
public virtual DescribeDBParameterGroupsResponse METHOD_NAME(DescribeDBParameterGroupsRequest VAR_DESCRIBEDBPARAMETERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBParameterGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBParameterGroupsResponseUnmarshaller.Instance; return Invoke<DescribeDBParameterGroupsResponse>(VAR_DESCRIBEDBPARAMETERGROUPSREQUEST, VAR_VAR); }
public static FuzzySet METHOD_NAME(int VAR_INT) { var VAR_VAR = GetNearestSetSize(VAR_INT); return new FuzzySet(new FixedBitSet(VAR_VAR + LITERAL_INT), VAR_VAR, HashFunctionForVersion(VERSION_CURRENT)); }
public BundleWriter(Repository VAR_REPOSITORY) { db = VAR_REPOSITORY; include = new SortedDictionary<string, ObjectId>(); assume = new HashSet<RevCommit>(); tagTargets = new HashSet<ObjectId>(); }
public virtual AssociateDomainResponse METHOD_NAME(AssociateDomainRequest VAR_ASSOCIATEDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateDomainResponseUnmarshaller.Instance; return Invoke<AssociateDomainResponse>(VAR_ASSOCIATEDOMAINREQUEST, VAR_VAR); }
public virtual GetInstancePortStatesResponse METHOD_NAME(GetInstancePortStatesRequest VAR_GETINSTANCEPORTSTATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstancePortStatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstancePortStatesResponseUnmarshaller.Instance; return Invoke<GetInstancePortStatesResponse>(VAR_GETINSTANCEPORTSTATESREQUEST, VAR_VAR); }
public SrndTruncQuery(string VAR_STRING, char VAR_CHAR, char VAR_CHAR) : base(false) { this.VAR_STRING = VAR_STRING; this.VAR_CHAR = VAR_CHAR; this.VAR_CHAR = VAR_CHAR; TruncatedToPrefixAndPattern(); }
public override sealed Explanation METHOD_NAME(BasicStats VAR_BASICSTATS) { Explanation VAR_EXPLANATION = new Explanation(); VAR_EXPLANATION.Description = this.GetType().Name + LITERAL_STRING; VAR_EXPLANATION.Value = CalculateLambda(VAR_BASICSTATS); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.DocFreq, LITERAL_STRING)); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.NumberOfDocuments, LITERAL_STRING)); return VAR_EXPLANATION; }
public virtual DeleteBaiduChannelResponse METHOD_NAME(DeleteBaiduChannelRequest VAR_DELETEBAIDUCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBaiduChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBaiduChannelResponseUnmarshaller.Instance; return Invoke<DeleteBaiduChannelResponse>(VAR_DELETEBAIDUCHANNELREQUEST, VAR_VAR); }
public virtual UnlinkDeveloperIdentityResponse METHOD_NAME(UnlinkDeveloperIdentityRequest VAR_UNLINKDEVELOPERIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnlinkDeveloperIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnlinkDeveloperIdentityResponseUnmarshaller.Instance; return Invoke<UnlinkDeveloperIdentityResponse>(VAR_UNLINKDEVELOPERIDENTITYREQUEST, VAR_VAR); }
public SimpleBoundaryScanner(int VAR_INT, char[] VAR_CHAR[]) { this.m_maxScan = VAR_INT; this.m_boundaryChars = new JCG.HashSet<char>(); this.m_boundaryChars.UnionWith(VAR_CHAR[]); }
public CreateLogGroupRequest(string VAR_STRING) { _logGroupName = VAR_STRING; }
public static ISet<string> METHOD_NAME() { return DefaultSetHolder.DEFAULT_STOP_TAGS; }
public virtual ModifyInstanceFleetResponse METHOD_NAME(ModifyInstanceFleetRequest VAR_MODIFYINSTANCEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyInstanceFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyInstanceFleetResponseUnmarshaller.Instance; return Invoke<ModifyInstanceFleetResponse>(VAR_MODIFYINSTANCEFLEETREQUEST, VAR_VAR); }
public void METHOD_NAME(IConditionalFormattingRule VAR_ICONDITIONALFORMATTINGRULE) { METHOD_NAME((HSSFConditionalFormattingRule)VAR_ICONDITIONALFORMATTINGRULE); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT || VAR_INT < LITERAL_INT) throw new TokenMgrError(LITERAL_STRING + VAR_INT + LITERAL_STRING, TokenMgrError.INVALID_LEXICAL_STATE); elsecurLexState = VAR_INT; }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_CHARCOUNT); }
public virtual CreateCapacityReservationResponse METHOD_NAME(CreateCapacityReservationRequest VAR_CREATECAPACITYRESERVATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCapacityReservationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCapacityReservationResponseUnmarshaller.Instance; return Invoke<CreateCapacityReservationResponse>(VAR_CREATECAPACITYRESERVATIONREQUEST, VAR_VAR); }
public StoredField(string VAR_STRING, long VAR_LONG) : base(name, TYPE) { FieldsData = new Int64(VAR_LONG); }
public virtual void METHOD_NAME(Parser VAR_PARSER) { ATNState VAR_ATNSTATE = VAR_PARSER.Interpreter.atn.states[VAR_PARSER.State]; if (InErrorRecoveryMode(VAR_PARSER)) { return; } ITokenStream VAR_ITOKENSTREAM = ((ITokenStream)VAR_PARSER.InputStream); int VAR_INT = VAR_ITOKENSTREAM.LA(LITERAL_INT); var VAR_VAR = VAR_PARSER.Atn.NextTokens(VAR_ATNSTATE); if (VAR_VAR.Contains(TokenConstants.EPSILON) || VAR_VAR.Contains(VAR_INT)) { return; } switch (VAR_ATNSTATE.StateType) { case StateType.BlockStart: case StateType.StarBlockStart: case StateType.PlusBlockStart: case StateType.StarLoopEntry: { if (SingleTokenDeletion(VAR_PARSER) != LITERAL_NULL) { return; } throw new InputMismatchException(VAR_PARSER); } case StateType.PlusLoopBack: case StateType.StarLoopBack: { ReportUnwantedToken(VAR_PARSER); IntervalSet VAR_INTERVALSET = VAR_PARSER.GetExpectedTokens(); IntervalSet VAR_INTERVALSET = VAR_INTERVALSET.Or(GetErrorRecoverySet(VAR_PARSER)); ConsumeUntil(VAR_PARSER, VAR_INTERVALSET); break; } default: { break; } } }
public override int METHOD_NAME() { if (_didNext || (_liveDocs != LITERAL_NULL && !_liveDocs.Get(LITERAL_INT))) return (_doc = NO_MORE_DOCS); _didNext = true; return (_doc = LITERAL_INT); }
public static System.Text.Encoding METHOD_NAME(byte[] VAR_BYTE[]) { int VAR_INT = Encoding(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return Constants.CHARSET; } int VAR_INT = NextLF(VAR_BYTE[], VAR_INT); string VAR_STRING = Decode(Constants.CHARSET, VAR_BYTE[], VAR_INT, VAR_INT - LITERAL_INT); try { return Sharpen.Extensions.GetEncoding(VAR_STRING); } catch (IllegalCharsetNameException badName) { System.Text.Encoding VAR_SYSTEM.TEXT.ENCODING = CharsetForAlias(VAR_STRING); if (VAR_SYSTEM.TEXT.ENCODING != LITERAL_NULL) { return VAR_SYSTEM.TEXT.ENCODING; } throw; } catch (UnsupportedCharsetException badName) { System.Text.Encoding VAR_SYSTEM.TEXT.ENCODING = CharsetForAlias(VAR_STRING); if (VAR_SYSTEM.TEXT.ENCODING != LITERAL_NULL) { return VAR_SYSTEM.TEXT.ENCODING; } throw; } }
public virtual java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_FLOAT[].Length, VAR_INT, VAR_INT); if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } { for (int i = VAR_INT; i < VAR_INT + VAR_INT; ++i) { METHOD_NAME(VAR_FLOAT[][i]); } } return this; }
public virtual BatchGetVariableResponse METHOD_NAME(BatchGetVariableRequest VAR_BATCHGETVARIABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetVariableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetVariableResponseUnmarshaller.Instance; return Invoke<BatchGetVariableResponse>(VAR_BATCHGETVARIABLEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { fixedTime = false; this.VAR_INT = VAR_INT; if (VAR_INT == REPEAT_EXHAUST) { if (IsParallel) { throw new Exception(LITERAL_STRING); } } SetSequenceName(); }
public static DefaultProfile METHOD_NAME() { if (LITERAL_NULL == _profile) { _profile = new DefaultProfile(); } return _profile; }
public override string METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { if (LITERAL_INT <= VAR_INT - VAR_INT && VAR_BYTE[][VAR_INT] == LITERAL_CHAR && VAR_BYTE[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { return Dq(VAR_BYTE[], VAR_INT + LITERAL_INT, VAR_INT - LITERAL_INT); } return RawParseUtils.Decode(Constants.CHARSET, VAR_BYTE[], VAR_INT, VAR_INT); }
public virtual ModifyCacheClusterResponse METHOD_NAME(ModifyCacheClusterRequest VAR_MODIFYCACHECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyCacheClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyCacheClusterResponseUnmarshaller.Instance; return Invoke<ModifyCacheClusterResponse>(VAR_MODIFYCACHECLUSTERREQUEST, VAR_VAR); }
public TreeFormatter(int VAR_INT) { buf = new byte[VAR_INT]; }
public virtual void METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); int VAR_INT = VAR_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); VAR_INT += LITERAL_INT; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, RecordId); VAR_INT += LITERAL_INT; int VAR_INT = RecordSize - LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, VAR_INT); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_1_shapeIdMax); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, NumIdClusters); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_3_numShapesSaved); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_4_drawingsSaved); VAR_INT += LITERAL_INT; for (int i = LITERAL_INT; i < field_5_fileIdClusters.Length; i++) { LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_5_fileIdClusters[i].DrawingGroupId); VAR_INT += LITERAL_INT; LittleEndian.PutInt(VAR_BYTE[], VAR_INT, field_5_fileIdClusters[i].NumShapeIdsUsed); VAR_INT += LITERAL_INT; } VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, RecordSize, this); return RecordSize; }
public LogDocMergePolicy() { m_minMergeSize = DEFAULT_MIN_MERGE_DOCS; m_maxMergeSize = long.MaxValue; m_maxMergeSizeForForcedMerge = long.MaxValue; }
public BM25Similarity() { this.k1 = LITERAL_FLOAT; this.b = LITERAL_FLOAT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(ExternSheetIndex); WriteCoordinates(VAR_ILITTLEENDIANOUTPUT); }
public string METHOD_NAME() { return AccessKeyId; }
public virtual PutLifecycleHookResponse METHOD_NAME(PutLifecycleHookRequest VAR_PUTLIFECYCLEHOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutLifecycleHookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutLifecycleHookResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookResponse>(VAR_PUTLIFECYCLEHOOKREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Gridset).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT * LITERAL_INT) / LITERAL_INT; }
public virtual int METHOD_NAME() { return mSize; }
public override String METHOD_NAME() { String VAR_STRING = GetBiffName(_sid); if (VAR_STRING == LITERAL_NULL) { VAR_STRING = LITERAL_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(StringUtil.ToHexString(_sid).ToUpper() + LITERAL_STRING); if (_rawData.Length > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_rawData)).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override int METHOD_NAME() { if (doc != LITERAL_INT) { throw new Exception(); } else if (i >= termFreq - LITERAL_INT) { throw new Exception(LITERAL_STRING); } ++i; if (payloadIndex != LITERAL_NULL) { payload.Offset = basePayloadOffset + payloadIndex[positionIndex + i]; payload.Length = payloadIndex[positionIndex + i + LITERAL_INT] - payloadIndex[positionIndex + i]; } if (positions == LITERAL_NULL) { return -LITERAL_INT; } else { return positions[positionIndex + i]; } }
public virtual MergeDeveloperIdentitiesResponse METHOD_NAME(MergeDeveloperIdentitiesRequest VAR_MERGEDEVELOPERIDENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = MergeDeveloperIdentitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = MergeDeveloperIdentitiesResponseUnmarshaller.Instance; return Invoke<MergeDeveloperIdentitiesResponse>(VAR_MERGEDEVELOPERIDENTITIESREQUEST, VAR_VAR); }
public CreateUserRequest(string VAR_STRING) { _userName = VAR_STRING; }
public virtual ReplaceNetworkAclEntryResponse METHOD_NAME(ReplaceNetworkAclEntryRequest VAR_REPLACENETWORKACLENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReplaceNetworkAclEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReplaceNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<ReplaceNetworkAclEntryResponse>(VAR_REPLACENETWORKACLENTRYREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return fastForward; }
public List<int> METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); List<int> VAR_LIST<INT> = new List<int>(); for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { long VAR_LONG = VAR_DECISIONINFO[][i].LL_Fallback; if (VAR_LONG > LITERAL_INT) VAR_LIST<INT>.Add(i); } return VAR_LIST<INT>; }
public virtual UpdateModelResponse METHOD_NAME(UpdateModelRequest VAR_UPDATEMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateModelResponseUnmarshaller.Instance; return Invoke<UpdateModelResponse>(VAR_UPDATEMODELREQUEST, VAR_VAR); }
public int METHOD_NAME() { return end; }
public virtual DeleteVPCAssociationAuthorizationResponse METHOD_NAME(DeleteVPCAssociationAuthorizationRequest VAR_DELETEVPCASSOCIATIONAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVPCAssociationAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVPCAssociationAuthorizationResponseUnmarshaller.Instance; return Invoke<DeleteVPCAssociationAuthorizationResponse>(VAR_DELETEVPCASSOCIATIONAUTHORIZATIONREQUEST, VAR_VAR); }
public virtual GetMediaResponse METHOD_NAME(GetMediaRequest VAR_GETMEDIAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMediaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMediaResponseUnmarshaller.Instance; return Invoke<GetMediaResponse>(VAR_GETMEDIAREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { return this; }
public virtual RestoreTableFromClusterSnapshotResponse METHOD_NAME(RestoreTableFromClusterSnapshotRequest VAR_RESTORETABLEFROMCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreTableFromClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreTableFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreTableFromClusterSnapshotResponse>(VAR_RESTORETABLEFROMCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; int VAR_INT = (VAR_INT >> LITERAL_INT) & LITERAL_INT; try { out1.WriteByte((byte)VAR_INT); out1.WriteByte((byte)VAR_INT); out1.WriteByte((byte)VAR_INT); out1.WriteByte((byte)VAR_INT); } catch (IOException e) { throw new RuntimeException(e); } }
public static Query METHOD_NAME(string[] VAR_STRING[], string[] VAR_STRING[], Analyzer VAR_ANALYZER) { if (VAR_STRING[].Length != VAR_STRING[].Length) throw new ArgumentException(LITERAL_STRING); BooleanQuery VAR_BOOLEANQUERY = new BooleanQuery(); StandardQueryParser VAR_STANDARDQUERYPARSER = new StandardQueryParser(); VAR_STANDARDQUERYPARSER.Analyzer = VAR_ANALYZER; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { Query VAR_QUERY = VAR_STANDARDQUERYPARSER.METHOD_NAME(VAR_STRING[][i], VAR_STRING[][i]); if (VAR_QUERY != LITERAL_NULL && (!(VAR_QUERY is BooleanQuery) || ((BooleanQuery)VAR_QUERY).Clauses.Count > LITERAL_INT)) { VAR_BOOLEANQUERY.Add(VAR_QUERY, Occur.SHOULD); } } return VAR_BOOLEANQUERY; }
public virtual UpdateQualificationTypeResponse METHOD_NAME(UpdateQualificationTypeRequest VAR_UPDATEQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateQualificationTypeResponseUnmarshaller.Instance; return Invoke<UpdateQualificationTypeResponse>(VAR_UPDATEQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_TEMPLATE); }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { int VAR_INT = VAR_VALUEEVAL[].Length - LITERAL_INT; if (VAR_INT < LITERAL_INT) { return ErrorEval.VALUE_INVALID; } Function VAR_FUNCTION; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL[][LITERAL_INT], VAR_INT, VAR_INT); int VAR_INT = OperandResolver.CoerceValueToInt(VAR_VALUEEVAL); VAR_FUNCTION = FindFunction(VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } ValueEval[] VAR_VALUEEVAL[] = new ValueEval[VAR_INT]; Array.Copy(VAR_VALUEEVAL[], LITERAL_INT, VAR_VALUEEVAL[], LITERAL_INT, VAR_INT); return VAR_FUNCTION.METHOD_NAME(VAR_VALUEEVAL[], VAR_INT, VAR_INT); }
public InstanceGroupConfig(InstanceRoleType VAR_INSTANCEROLETYPE, string VAR_STRING, int VAR_INT) { _instanceRole = VAR_INSTANCEROLETYPE; _instanceType = VAR_STRING; _instanceCount = VAR_INT; }
public LeftMarginRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_margin = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public virtual DescribeTrialComponentResponse METHOD_NAME(DescribeTrialComponentRequest VAR_DESCRIBETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTrialComponentResponseUnmarshaller.Instance; return Invoke<DescribeTrialComponentResponse>(VAR_DESCRIBETRIALCOMPONENTREQUEST, VAR_VAR); }
public virtual AssociateSubnetCidrBlockResponse METHOD_NAME(AssociateSubnetCidrBlockRequest VAR_ASSOCIATESUBNETCIDRBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateSubnetCidrBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateSubnetCidrBlockResponseUnmarshaller.Instance; return Invoke<AssociateSubnetCidrBlockResponse>(VAR_ASSOCIATESUBNETCIDRBLOCKREQUEST, VAR_VAR); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual GetQueueAttributesResponse METHOD_NAME(string VAR_STRING, List<string> VAR_LIST<STRING>) { var VAR_VAR = new GetQueueAttributesRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.AttributeNames = VAR_LIST<STRING>; return METHOD_NAME(VAR_VAR); }
public int METHOD_NAME() { return beginA; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override bool METHOD_NAME(object VAR_OBJECT) { return backingMap.containsKey(VAR_OBJECT); }
public override string METHOD_NAME() { return LITERAL_STRING + arc + LITERAL_STRING + state; }
public void METHOD_NAME() { List<HSSFShape> VAR_LIST<HSSFSHAPE> = new List<HSSFShape>(shapes); foreach (HSSFShape shape in VAR_LIST<HSSFSHAPE>) { RemoveShape(shape); } }
public override string METHOD_NAME() { return LITERAL_STRING + fieldAnalyzers + LITERAL_STRING + defaultAnalyzer + LITERAL_STRING; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_BYTE[].Length - (VAR_INT + LITERAL_INT); if (VAR_INT > VAR_INT) { VAR_INT = VAR_INT; } if (IsContainerRecord) { int VAR_INT = LITERAL_INT; _thedata = new byte[LITERAL_INT]; VAR_INT += LITERAL_INT; VAR_INT += LITERAL_INT; while (VAR_INT > LITERAL_INT) { EscherRecord VAR_ESCHERRECORD = VAR_IESCHERRECORDFACTORY.CreateRecord(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_ESCHERRECORD.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_IESCHERRECORDFACTORY); VAR_INT += VAR_INT; VAR_INT += VAR_INT; VAR_INT -= VAR_INT; ChildRecords.Add(VAR_ESCHERRECORD); } return VAR_INT; } else { _thedata = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT + LITERAL_INT, _thedata, LITERAL_INT, VAR_INT); return VAR_INT + LITERAL_INT; } }
public virtual AssociatePhoneNumberWithUserResponse METHOD_NAME(AssociatePhoneNumberWithUserRequest VAR_ASSOCIATEPHONENUMBERWITHUSERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociatePhoneNumberWithUserRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociatePhoneNumberWithUserResponseUnmarshaller.Instance; return Invoke<AssociatePhoneNumberWithUserResponse>(VAR_ASSOCIATEPHONENUMBERWITHUSERREQUEST, VAR_VAR); }
public virtual FieldQuery METHOD_NAME(Query VAR_QUERY) { try { return new FieldQuery(VAR_QUERY, LITERAL_NULL, phraseHighlight, fieldMatch); } catch (IOException e) { throw new Exception(e.ToString(), e); } }
public int METHOD_NAME() { return GetBATEntriesPerBlock() - LITERAL_INT; }
public static CellRangeAddress METHOD_NAME(CellRangeAddress VAR_CELLRANGEADDRESS, CellRangeAddress VAR_CELLRANGEADDRESS) { if (VAR_CELLRANGEADDRESS == LITERAL_NULL) { return VAR_CELLRANGEADDRESS.Copy(); } return new CellRangeAddress(lt(VAR_CELLRANGEADDRESS.FirstRow, VAR_CELLRANGEADDRESS.FirstRow) ? VAR_CELLRANGEADDRESS.FirstRow : VAR_CELLRANGEADDRESS.FirstRow, gt(VAR_CELLRANGEADDRESS.LastRow, VAR_CELLRANGEADDRESS.LastRow) ? VAR_CELLRANGEADDRESS.LastRow : VAR_CELLRANGEADDRESS.LastRow, lt(VAR_CELLRANGEADDRESS.FirstColumn, VAR_CELLRANGEADDRESS.FirstColumn) ? VAR_CELLRANGEADDRESS.FirstColumn : VAR_CELLRANGEADDRESS.FirstColumn, gt(VAR_CELLRANGEADDRESS.LastColumn, VAR_CELLRANGEADDRESS.LastColumn) ? VAR_CELLRANGEADDRESS.LastColumn : VAR_CELLRANGEADDRESS.LastColumn); }
public static char[] METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_CHAR[].Length < VAR_INT) { char[] VAR_CHAR[] = new char[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_CHAR)]; Array.Copy(VAR_CHAR[], LITERAL_INT, VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); return VAR_CHAR[]; } else { return VAR_CHAR[]; } }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { int VAR_INT = ((VAR_INT) << LITERAL_INT) | ((VAR_INT) << LITERAL_INT) | VAR_INT; SetPropertyValue(new EscherRGBProperty(EscherProperties.LINESTYLE__COLOR, VAR_INT)); }
public virtual CreateFileSystemResponse METHOD_NAME(CreateFileSystemRequest VAR_CREATEFILESYSTEMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFileSystemRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFileSystemResponseUnmarshaller.Instance; return Invoke<CreateFileSystemResponse>(VAR_CREATEFILESYSTEMREQUEST, VAR_VAR); }
public DeleteVaultRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public override ByteBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { if (VAR_LONG >= size) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_LONG + LITERAL_STRING + size); } int VAR_INT = (int)Math.Min(VAR_INT, size - VAR_LONG); return ByteBuffer.CreateBuffer(buffer, (int)VAR_LONG, VAR_INT); }
public virtual bool METHOD_NAME(RefSpec VAR_REFSPEC) { if (push.Contains(VAR_REFSPEC)) { return false; } return push.AddItem(VAR_REFSPEC); }
public virtual ViewBillingResponse METHOD_NAME(ViewBillingRequest VAR_VIEWBILLINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ViewBillingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ViewBillingResponseUnmarshaller.Instance; return Invoke<ViewBillingResponse>(VAR_VIEWBILLINGREQUEST, VAR_VAR); }
public sealed override char METHOD_NAME() { int VAR_INT = _position + libcore.io.SizeOf.CHAR; if (VAR_INT > _limit) { throw new java.nio.BufferUnderflowException(); } char VAR_CHAR = (char)libcore.io.Memory.peekShort(backingArray, offset + _position, _order); _position = VAR_INT; return VAR_CHAR; }
public override SpanQuery METHOD_NAME(XmlElement VAR_XMLELEMENT) { string VAR_STRING = DOMUtils.GetAttributeWithInheritanceOrFail(VAR_XMLELEMENT, LITERAL_STRING); string VAR_STRING = DOMUtils.GetNonBlankTextOrFail(VAR_XMLELEMENT); List<SpanQuery> VAR_LIST<SPANQUERY> = new List<SpanQuery>(); TokenStream VAR_TOKENSTREAM = LITERAL_NULL; try { VAR_TOKENSTREAM = analyzer.GetTokenStream(VAR_STRING, VAR_STRING); ITermToBytesRefAttribute VAR_ITERMTOBYTESREFATTRIBUTE = VAR_TOKENSTREAM.AddAttribute<ITermToBytesRefAttribute>(); BytesRef VAR_BYTESREF = VAR_ITERMTOBYTESREFATTRIBUTE.BytesRef; VAR_TOKENSTREAM.Reset(); while (VAR_TOKENSTREAM.IncrementToken()) { VAR_ITERMTOBYTESREFATTRIBUTE.FillBytesRef(); SpanTermQuery VAR_SPANTERMQUERY = new SpanTermQuery(new Term(VAR_STRING, BytesRef.DeepCopyOf(VAR_BYTESREF))); VAR_LIST<SPANQUERY>.Add(VAR_SPANTERMQUERY); } VAR_TOKENSTREAM.End(); SpanOrQuery VAR_SPANORQUERY = new SpanOrQuery(VAR_LIST<SPANQUERY>.ToArray()); VAR_SPANORQUERY.Boost = DOMUtils.GetAttribute(VAR_XMLELEMENT, LITERAL_STRING, LITERAL_FLOAT); return VAR_SPANORQUERY; } catch (IOException ioe) { throw new ParserException(LITERAL_STRING + VAR_STRING); } finally { IOUtils.DisposeWhileHandlingException(VAR_TOKENSTREAM); } }
public virtual UpdateGatewayResponse METHOD_NAME(UpdateGatewayRequest VAR_UPDATEGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGatewayResponseUnmarshaller.Instance; return Invoke<UpdateGatewayResponse>(VAR_UPDATEGATEWAYREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return specialCachedValue.GetBooleanValue(); }
public virtual DeleteIdentityPoolResponse METHOD_NAME(DeleteIdentityPoolRequest VAR_DELETEIDENTITYPOOLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIdentityPoolRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIdentityPoolResponseUnmarshaller.Instance; return Invoke<DeleteIdentityPoolResponse>(VAR_DELETEIDENTITYPOOLREQUEST, VAR_VAR); }
public virtual PutSuppressedDestinationResponse METHOD_NAME(PutSuppressedDestinationRequest VAR_PUTSUPPRESSEDDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutSuppressedDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutSuppressedDestinationResponseUnmarshaller.Instance; return Invoke<PutSuppressedDestinationResponse>(VAR_PUTSUPPRESSEDDESTINATIONREQUEST, VAR_VAR); }
public virtual PutEventsResponse METHOD_NAME(PutEventsRequest VAR_PUTEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEventsResponseUnmarshaller.Instance; return Invoke<PutEventsResponse>(VAR_PUTEVENTSREQUEST, VAR_VAR); }
public virtual GetRecommendationsResponse METHOD_NAME(GetRecommendationsRequest VAR_GETRECOMMENDATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRecommendationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRecommendationsResponseUnmarshaller.Instance; return Invoke<GetRecommendationsResponse>(VAR_GETRECOMMENDATIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (VAR_OBJECT is SegmentInfo) { SegmentInfo VAR_SEGMENTINFO = (SegmentInfo)VAR_OBJECT; return VAR_SEGMENTINFO.Dir == Dir && VAR_SEGMENTINFO.Name.METHOD_NAME(Name, StringComparison.Ordinal); } else { return false; } }
public NPOI.SS.UserModel.IDataFormat METHOD_NAME() { if (formatter == LITERAL_NULL) formatter = new HSSFDataFormat(workbook); return formatter; }
public UpdateFaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteDouble(MaxChange); }
public virtual ModifyVpcEndpointServicePermissionsResponse METHOD_NAME(ModifyVpcEndpointServicePermissionsRequest VAR_MODIFYVPCENDPOINTSERVICEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcEndpointServicePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcEndpointServicePermissionsResponseUnmarshaller.Instance; return Invoke<ModifyVpcEndpointServicePermissionsResponse>(VAR_MODIFYVPCENDPOINTSERVICEPERMISSIONSREQUEST, VAR_VAR); }
public virtual IntervalSet METHOD_NAME(ATNState VAR_ATNSTATE) { if (VAR_ATNSTATE.nextTokenWithinRule != LITERAL_NULL) { return VAR_ATNSTATE.nextTokenWithinRule; } VAR_ATNSTATE.nextTokenWithinRule = METHOD_NAME(VAR_ATNSTATE, LITERAL_NULL); VAR_ATNSTATE.nextTokenWithinRule.SetReadonly(true); return VAR_ATNSTATE.nextTokenWithinRule; }
public virtual GetResourceResponse METHOD_NAME(GetResourceRequest VAR_GETRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResourceResponseUnmarshaller.Instance; return Invoke<GetResourceResponse>(VAR_GETRESOURCEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_range.FormatAsString()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_guid.FormatAsString()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(this._linkOpts)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Label).Append(LITERAL_STRING); if ((_linkOpts & HLINK_TARGET_FRAME) != LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(TargetFrame).Append(LITERAL_STRING); } if ((_linkOpts & HLINK_URL) != LITERAL_INT && _moniker != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_moniker.FormatAsString()).Append(LITERAL_STRING); } if ((_linkOpts & HLINK_PLACE) != LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(TextMark).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Address).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateFacetResponse METHOD_NAME(CreateFacetRequest VAR_CREATEFACETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFacetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFacetResponseUnmarshaller.Instance; return Invoke<CreateFacetResponse>(VAR_CREATEFACETREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { int VAR_INT; object[] VAR_OBJECT[]; lock (mutex) { VAR_INT = list.size(); VAR_OBJECT[] = new object[VAR_INT]; list.toArray(VAR_OBJECT[]); } if (VAR_OBJECT != LITERAL_NULL) { { for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_OBJECT.Equals(VAR_OBJECT[][i])) { return i; } } } } else { { for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_OBJECT[][i] == LITERAL_NULL) { return i; } } } } return -LITERAL_INT; }
public static PrintOrientation METHOD_NAME(int VAR_INT) { return _table[VAR_INT]; }
public virtual DefineExpressionResponse METHOD_NAME(DefineExpressionRequest VAR_DEFINEEXPRESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DefineExpressionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DefineExpressionResponseUnmarshaller.Instance; return Invoke<DefineExpressionResponse>(VAR_DEFINEEXPRESSIONREQUEST, VAR_VAR); }
public override long METHOD_NAME() { if (lastModified == LITERAL_INT) { lastModified = file.LastModified(); } return lastModified; }
public override void METHOD_NAME() { buffer = LITERAL_NULL; size = -LITERAL_INT; }
public virtual StartEntitiesDetectionJobResponse METHOD_NAME(StartEntitiesDetectionJobRequest VAR_STARTENTITIESDETECTIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartEntitiesDetectionJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartEntitiesDetectionJobResponseUnmarshaller.Instance; return Invoke<StartEntitiesDetectionJobResponse>(VAR_STARTENTITIESDETECTIONJOBREQUEST, VAR_VAR); }
public bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (result == LITERAL_NULL) { result = VAR_VALUEEVAL; } else { result = ErrorEval.NUM_ERROR; return false; } return true; }
public TokenTagToken(string VAR_STRING, int VAR_INT, string VAR_STRING) : base(type) { this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; }
public void METHOD_NAME(bool VAR_BOOL, bool VAR_BOOL) { if (bufferUpto != -LITERAL_INT) { if (VAR_BOOL) { for (int i = LITERAL_INT; i < bufferUpto; i++) { Arrays.Fill(buffers[i], (byte)LITERAL_INT); } Arrays.Fill(buffers[bufferUpto], LITERAL_INT, ByteUpto, (byte)LITERAL_INT); } if (bufferUpto > LITERAL_INT || !VAR_BOOL) { int VAR_INT = VAR_BOOL ? LITERAL_INT : LITERAL_INT; allocator.RecycleByteBlocks(buffers, VAR_INT, LITERAL_INT + bufferUpto); Arrays.Fill(buffers, VAR_INT, LITERAL_INT + bufferUpto, LITERAL_NULL); } if (VAR_BOOL) { bufferUpto = LITERAL_INT; ByteUpto = LITERAL_INT; ByteOffset = LITERAL_INT; buffer = buffers[LITERAL_INT]; } else { bufferUpto = -LITERAL_INT; ByteUpto = BYTE_BLOCK_SIZE; ByteOffset = -BYTE_BLOCK_SIZE; buffer = LITERAL_NULL; } } }
public virtual UpdateExpirationForHITResponse METHOD_NAME(UpdateExpirationForHITRequest VAR_UPDATEEXPIRATIONFORHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateExpirationForHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateExpirationForHITResponseUnmarshaller.Instance; return Invoke<UpdateExpirationForHITResponse>(VAR_UPDATEEXPIRATIONFORHITREQUEST, VAR_VAR); }
public Policy(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public UpdateApplicationVersionRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _versionLabel = VAR_STRING; }
public string METHOD_NAME() { int VAR_INT = RawParseUtils.NextLF(buffer, valStart, LITERAL_CHAR); if (valEnd <= VAR_INT) { int VAR_INT = RawParseUtils.NextLF(buffer, valStart, LITERAL_CHAR); if (valStart < VAR_INT && VAR_INT < valEnd) { return GetValue(); } return LITERAL_NULL; } int VAR_INT = RawParseUtils.NextLF(buffer, VAR_INT, LITERAL_CHAR); if (valEnd < VAR_INT) { return LITERAL_NULL; } return RawParseUtils.Decode(enc, buffer, VAR_INT, VAR_INT - LITERAL_INT); }
public String METHOD_NAME(Object VAR_OBJECT) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); SimpleValue(VAR_STRINGBUILDER, VAR_OBJECT); return VAR_STRINGBUILDER.ToString(); }
public override RevFilter METHOD_NAME() { return new NGit.Revwalk.Filter.NotRevFilter(a.METHOD_NAME()); }
public static int METHOD_NAME(int VAR_INT, int VAR_INT) { VAR_INT = VAR_INT ^ (VAR_INT * LITERAL_INT); VAR_INT = VAR_INT ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT = VAR_INT * unchecked((int)(LITERAL_INT)); VAR_INT = VAR_INT ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); VAR_INT = VAR_INT * unchecked((int)(LITERAL_INT)); VAR_INT = VAR_INT ^ ((int)(((uint)VAR_INT) >> LITERAL_INT)); return VAR_INT; }
public StempelFilter(TokenStream VAR_TOKENSTREAM, StempelStemmer VAR_STEMPELSTEMMER, int VAR_INT) : base(@in) { this.VAR_STEMPELSTEMMER = VAR_STEMPELSTEMMER; this.VAR_INT = VAR_INT; this.termAtt = AddAttribute<ICharTermAttribute>(); this.keywordAtt = AddAttribute<IKeywordAttribute>(); }
public virtual GetIntegrationResponseResponse METHOD_NAME(GetIntegrationResponseRequest VAR_GETINTEGRATIONRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIntegrationResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIntegrationResponseResponseUnmarshaller.Instance; return Invoke<GetIntegrationResponseResponse>(VAR_GETINTEGRATIONRESPONSEREQUEST, VAR_VAR); }
public virtual PostToConnectionResponse METHOD_NAME(PostToConnectionRequest VAR_POSTTOCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PostToConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PostToConnectionResponseUnmarshaller.Instance; return Invoke<PostToConnectionResponse>(VAR_POSTTOCONNECTIONREQUEST, VAR_VAR); }
public TermRangeQueryNode(FieldQueryNode VAR_FIELDQUERYNODE, FieldQueryNode VAR_FIELDQUERYNODE, bool VAR_BOOL, bool VAR_BOOL) { SetBounds(VAR_FIELDQUERYNODE, VAR_FIELDQUERYNODE, VAR_BOOL, VAR_BOOL); }
protected internal QueryParser(ICharStream VAR_ICHARSTREAM) { TokenSource = new QueryParserTokenManager(VAR_ICHARSTREAM); Token = new Token(); jj_ntk = -LITERAL_INT; jj_gen = LITERAL_INT; for (int i = LITERAL_INT; i < LITERAL_INT; i++) jj_la1[i] = -LITERAL_INT; for (int i = LITERAL_INT; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls(); }
public virtual CreateSchemaResponse METHOD_NAME(CreateSchemaRequest VAR_CREATESCHEMAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSchemaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSchemaResponseUnmarshaller.Instance; return Invoke<CreateSchemaResponse>(VAR_CREATESCHEMAREQUEST, VAR_VAR); }
public override V METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_CHAR[] == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return default(V); }
public IList<CharsRef> METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING.ToCharArray(), VAR_STRING.Length); }
public virtual DeleteSmsTemplateResponse METHOD_NAME(DeleteSmsTemplateRequest VAR_DELETESMSTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSmsTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSmsTemplateResponseUnmarshaller.Instance; return Invoke<DeleteSmsTemplateResponse>(VAR_DELETESMSTEMPLATEREQUEST, VAR_VAR); }
public void METHOD_NAME(short VAR_SHORT) { field_1_password = VAR_SHORT; }
public virtual java.nio.CharBuffer METHOD_NAME(char VAR_CHAR) { return put(VAR_CHAR); }
public virtual PutVoiceConnectorLoggingConfigurationResponse METHOD_NAME(PutVoiceConnectorLoggingConfigurationRequest VAR_PUTVOICECONNECTORLOGGINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutVoiceConnectorLoggingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutVoiceConnectorLoggingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorLoggingConfigurationResponse>(VAR_PUTVOICECONNECTORLOGGINGCONFIGURATIONREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return path.Length > LITERAL_INT && path[LITERAL_INT] == separatorChar; }
public CreateSnapshotRequest(string VAR_STRING, string VAR_STRING) { _volumeId = VAR_STRING; _description = VAR_STRING; }
public static IReaderIterator METHOD_NAME(DataInput VAR_DATAINPUT, Format VAR_FORMAT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { CheckVersion(VAR_INT); return new PackedReaderIterator(VAR_FORMAT, VAR_INT, VAR_INT, VAR_INT, VAR_DATAINPUT, VAR_INT); }
public override java.nio.DoubleBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { throw new java.nio.ReadOnlyBufferException(); }
public virtual StashDropCommand METHOD_NAME() { return new StashDropCommand(repo); }
public virtual bool METHOD_NAME() { return this.type == TYPE_UNMAPPABLE_CHAR; }
public int METHOD_NAME() { CheckPosition(LITERAL_INT); return _buf[_ReadIndex++]; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (bitsPerValue > LITERAL_INT) { throw new System.NotSupportedException(LITERAL_STRING + bitsPerValue + LITERAL_STRING); } for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; VAR_INT = METHOD_NAME(VAR_LONG, VAR_INT[], VAR_INT); } }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public virtual UpdateAddressBookResponse METHOD_NAME(UpdateAddressBookRequest VAR_UPDATEADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAddressBookResponseUnmarshaller.Instance; return Invoke<UpdateAddressBookResponse>(VAR_UPDATEADDRESSBOOKREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + x + LITERAL_STRING + y + LITERAL_STRING; }
public virtual DescribeAccountAttributesResponse METHOD_NAME(DescribeAccountAttributesRequest VAR_DESCRIBEACCOUNTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAccountAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAccountAttributesResponseUnmarshaller.Instance; return Invoke<DescribeAccountAttributesResponse>(VAR_DESCRIBEACCOUNTATTRIBUTESREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(long VAR_LONG) { return new CommitTimeRevFilterBefore(VAR_LONG); }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { Debug.Assert(VAR_TERMSTATE != LITERAL_NULL && VAR_TERMSTATE is BlockTermState); Debug.Assert(!doOrd || ((BlockTermState)VAR_TERMSTATE).Ord < outerInstance.numTerms); state.CopyFrom(VAR_TERMSTATE); seekPending = true; indexIsCurrent = false; term.CopyBytes(VAR_BYTESREF); }
public virtual DescribeClusterParameterGroupsResponse METHOD_NAME(DescribeClusterParameterGroupsRequest VAR_DESCRIBECLUSTERPARAMETERGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeClusterParameterGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeClusterParameterGroupsResponseUnmarshaller.Instance; return Invoke<DescribeClusterParameterGroupsResponse>(VAR_DESCRIBECLUSTERPARAMETERGROUPSREQUEST, VAR_VAR); }
public virtual BatchGetApplicationsResponse METHOD_NAME(BatchGetApplicationsRequest VAR_BATCHGETAPPLICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetApplicationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetApplicationsResponseUnmarshaller.Instance; return Invoke<BatchGetApplicationsResponse>(VAR_BATCHGETAPPLICATIONSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME((Term[])item); }
public override FreeRefFunction METHOD_NAME(String VAR_STRING) { FreeRefFunction VAR_FREEREFFUNCTION; foreach (UDFFinder pack in _usedToolPacks) { VAR_FREEREFFUNCTION = pack.METHOD_NAME(VAR_STRING); if (VAR_FREEREFFUNCTION != LITERAL_NULL) { return VAR_FREEREFFUNCTION; } } return LITERAL_NULL; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Row)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Column)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(XFIndex)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field_4_string_len)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(field_5_unicode_flag)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Value).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static void METHOD_NAME(string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING)) { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING); } }
public bool METHOD_NAME() { return setWritable(false, false); }
public virtual CopyImageResponse METHOD_NAME(CopyImageRequest VAR_COPYIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyImageResponseUnmarshaller.Instance; return Invoke<CopyImageResponse>(VAR_COPYIMAGEREQUEST, VAR_VAR); }
public virtual CreateTrainingJobResponse METHOD_NAME(CreateTrainingJobRequest VAR_CREATETRAININGJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrainingJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrainingJobResponseUnmarshaller.Instance; return Invoke<CreateTrainingJobResponse>(VAR_CREATETRAININGJOBREQUEST, VAR_VAR); }
public virtual DescribeDomainsResponse METHOD_NAME(DescribeDomainsRequest VAR_DESCRIBEDOMAINSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDomainsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDomainsResponseUnmarshaller.Instance; return Invoke<DescribeDomainsResponse>(VAR_DESCRIBEDOMAINSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + n + LITERAL_STRING; }
public bool METHOD_NAME(ColumnInfoRecord VAR_COLUMNINFORECORD) { if (_xf_index != VAR_COLUMNINFORECORD._xf_index) { return false; } if (_options != VAR_COLUMNINFORECORD._options) { return false; } if (_col_width != VAR_COLUMNINFORECORD._col_width) { return false; } return true; }
public virtual AddCommand METHOD_NAME() { return new AddCommand(repo); }
public int METHOD_NAME() { return _limit; }
public override java.nio.CharBuffer METHOD_NAME() { return java.nio.ReadOnlyCharArrayBuffer.copy(this, _mark); }
public override bool METHOD_NAME(E VAR_E) { lock (this) { if (elementCount == elementData.Length) { growByOne(); } elementData[elementCount++] = VAR_E; modCount++; return true; } }
public virtual TSTNode METHOD_NAME(string VAR_STRING) { return METHOD_NAME(VAR_STRING, rootNode); }
public virtual GetEventStreamResponse METHOD_NAME(GetEventStreamRequest VAR_GETEVENTSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetEventStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetEventStreamResponseUnmarshaller.Instance; return Invoke<GetEventStreamResponse>(VAR_GETEVENTSTREAMREQUEST, VAR_VAR); }
public virtual SendMessageBatchResponse METHOD_NAME(SendMessageBatchRequest VAR_SENDMESSAGEBATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendMessageBatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendMessageBatchResponseUnmarshaller.Instance; return Invoke<SendMessageBatchResponse>(VAR_SENDMESSAGEBATCHREQUEST, VAR_VAR); }
public virtual DescribeDirectConnectGatewayAttachmentsResponse METHOD_NAME(DescribeDirectConnectGatewayAttachmentsRequest VAR_DESCRIBEDIRECTCONNECTGATEWAYATTACHMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDirectConnectGatewayAttachmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDirectConnectGatewayAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeDirectConnectGatewayAttachmentsResponse>(VAR_DESCRIBEDIRECTCONNECTGATEWAYATTACHMENTSREQUEST, VAR_VAR); }
public override object METHOD_NAME(object VAR_OBJECT, object VAR_OBJECT) { Debug.Assert(!(VAR_OBJECT is IList)); if (!(VAR_OBJECT is IList)) { return outputs.METHOD_NAME((T)VAR_OBJECT, (T)VAR_OBJECT); } else { IList VAR_ILIST = (IList)VAR_OBJECT; IList<T> VAR_ILIST<T> = new JCG.List<T>(VAR_ILIST.Count); foreach (object _output in VAR_ILIST) { VAR_ILIST<T>.METHOD_NAME(outputs.METHOD_NAME((T)VAR_OBJECT, (T)_output)); } return VAR_ILIST<T>; } }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_VALUEEVAL, VAR_VALUEEVAL, DEFAULT_ARG4); }
public static IList<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE, int VAR_INT, bool VAR_BOOL) { IList<IParseTree> VAR_ILIST<IPARSETREE> = new List<IParseTree>(); _findAllNodes(VAR_IPARSETREE, VAR_INT, VAR_BOOL, VAR_ILIST<IPARSETREE>); return VAR_ILIST<IPARSETREE>; }
public bool METHOD_NAME() { EscherOptRecord VAR_ESCHEROPTRECORD = (EscherOptRecord)_boundAggregate.FindFirstWithId(EscherOptRecord.RECORD_ID); if (VAR_ESCHEROPTRECORD == LITERAL_NULL) { return false; } for (IEnumerator it = VAR_ESCHEROPTRECORD.EscherProperties.GetEnumerator(); it.MoveNext();) { EscherProperty VAR_ESCHERPROPERTY = (EscherProperty)it.Current; if (VAR_ESCHERPROPERTY.PropertyNumber == LITERAL_INT && VAR_ESCHERPROPERTY.IsComplex) { EscherComplexProperty VAR_ESCHERCOMPLEXPROPERTY = (EscherComplexProperty)VAR_ESCHERPROPERTY; String VAR_STRING = StringUtil.GetFromUnicodeLE(VAR_ESCHERCOMPLEXPROPERTY.ComplexData); if (VAR_STRING.Equals(LITERAL_STRING)) { return true; } } } return false; }
public virtual int METHOD_NAME() { return w; }
public virtual StopInstanceResponse METHOD_NAME(StopInstanceRequest VAR_STOPINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopInstanceResponseUnmarshaller.Instance; return Invoke<StopInstanceResponse>(VAR_STOPINSTANCEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Range.METHOD_NAME()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ByteToHex(field_5_flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsAlwaysCalc).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.IntToHex(field_6_res)).Append(LITERAL_STRING); CellReference VAR_CELLREFERENCE = cr(field_7_rowInputRow, field_8_colInputRow); CellReference VAR_CELLREFERENCE = cr(field_9_rowInputCol, field_10_colInputCol); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLREFERENCE.FormatAsString()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLREFERENCE.FormatAsString()).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual RemoveTagsResponse METHOD_NAME(RemoveTagsRequest VAR_REMOVETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveTagsResponseUnmarshaller.Instance; return Invoke<RemoveTagsResponse>(VAR_REMOVETAGSREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { if (this.next == LITERAL_NULL) { this.next = this.Peek(); } return this.next != LITERAL_NULL; }
public virtual long METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return LITERAL_INT * Int64Count(VAR_INT, VAR_INT, VAR_INT); }
public GetQueueUrlRequest(string VAR_STRING) { _queueName = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, EscherRecord VAR_ESCHERRECORD) { escherRecords.Insert(VAR_INT, VAR_ESCHERRECORD); }
public virtual ListInstanceGroupsResponse METHOD_NAME(ListInstanceGroupsRequest VAR_LISTINSTANCEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListInstanceGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListInstanceGroupsResponseUnmarshaller.Instance; return Invoke<ListInstanceGroupsResponse>(VAR_LISTINSTANCEGROUPSREQUEST, VAR_VAR); }
public TruncateTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { var VAR_VAR = Get(VAR_IDICTIONARY<STRING, STRING>, PREFIX_LENGTH_KEY, LITERAL_STRING); prefixLength = sbyte.Parse(VAR_VAR, NumberStyles.Integer, CultureInfo.InvariantCulture); if (prefixLength < LITERAL_INT) { throw new System.ArgumentException(PREFIX_LENGTH_KEY + LITERAL_STRING + VAR_VAR); } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual GetDetectorResponse METHOD_NAME(GetDetectorRequest VAR_GETDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDetectorResponseUnmarshaller.Instance; return Invoke<GetDetectorResponse>(VAR_GETDETECTORREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { if (count < VAR_INT) { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } else { if (count == VAR_INT) { Add(VAR_INT); } else { entries[VAR_INT] = VAR_INT; } } }
public StatePair(State VAR_STATE, State VAR_STATE) { this.S1 = VAR_STATE; this.S2 = VAR_STATE; }
public virtual DetachDiskResponse METHOD_NAME(DetachDiskRequest VAR_DETACHDISKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachDiskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachDiskResponseUnmarshaller.Instance; return Invoke<DetachDiskResponse>(VAR_DETACHDISKREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { count = LITERAL_INT; }
public virtual java.util.ListIterator<E> METHOD_NAME() { lock (mutex) { return list.METHOD_NAME(); } }
public FieldDoc(int VAR_INT, float VAR_FLOAT, object[] VAR_OBJECT[], int VAR_INT) : base(doc, score, shardIndex) { this.VAR_OBJECT[] = VAR_OBJECT[]; }
public ResourceRecord(string VAR_STRING) { _value = VAR_STRING; }
public string METHOD_NAME() { return decode(authority); }
public override void METHOD_NAME() { throw new System.NotImplementedException(); }
public ListMultipartUploadsRequest(string VAR_STRING, string VAR_STRING) { _accountId = VAR_STRING; _vaultName = VAR_STRING; }
public virtual UpdateRouteResponseResponse METHOD_NAME(UpdateRouteResponseRequest VAR_UPDATEROUTERESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRouteResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRouteResponseResponseUnmarshaller.Instance; return Invoke<UpdateRouteResponseResponse>(VAR_UPDATEROUTERESPONSEREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return Get(VAR_OBJECT) != LITERAL_NULL; }
public SimpleRateLimiter(double VAR_DOUBLE) { SetMbPerSec(VAR_DOUBLE); }
public virtual void METHOD_NAME(RemoteSession VAR_REMOTESESSION) { VAR_REMOTESESSION.Disconnect(); }
public SetQuotaRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public ParserATNSimulator(Parser VAR_PARSER, ATN VAR_ATN, DFA[] VAR_DFA[], PredictionContextCache VAR_PREDICTIONCONTEXTCACHE) : base(atn, sharedContextCache) { this.VAR_PARSER = VAR_PARSER; this.VAR_DFA[] = VAR_DFA[]; }
public virtual void METHOD_NAME() { object[] VAR_OBJECT[] = this._enclosing.array; int VAR_INT = this.removalIndex; if (this._enclosing.modCount != this.expectedModCount) { throw new java.util.ConcurrentModificationException(); } if (VAR_INT < LITERAL_INT) { throw new System.InvalidOperationException(); } System.Array.Copy(VAR_OBJECT[], VAR_INT + LITERAL_INT, VAR_OBJECT[], VAR_INT, this.remaining); VAR_OBJECT[][--this._enclosing._size] = LITERAL_NULL; this.removalIndex = -LITERAL_INT; this.expectedModCount = ++this._enclosing.modCount; }
public T METHOD_NAME(int VAR_INT) { return elements[VAR_INT]; }
public virtual NGit.Api.StatusCommand METHOD_NAME(WorkingTreeIterator VAR_WORKINGTREEITERATOR) { this.VAR_WORKINGTREEITERATOR = VAR_WORKINGTREEITERATOR; return this; }
public virtual CharBlockArray METHOD_NAME(ICharSequence VAR_ICHARSEQUENCE) { return METHOD_NAME(VAR_ICHARSEQUENCE, LITERAL_INT, VAR_ICHARSEQUENCE.Length); }
public override void METHOD_NAME() { current.METHOD_NAME(); }
public override String METHOD_NAME() { return HSSFErrorConstants.GetText(field_1_error_code); }
public override Object METHOD_NAME() { FtPioGrbitSubRecord VAR_FTPIOGRBITSUBRECORD = new FtPioGrbitSubRecord(); VAR_FTPIOGRBITSUBRECORD.flags = this.flags; return VAR_FTPIOGRBITSUBRECORD; }
public PositionSpan(int VAR_INT, int VAR_INT) { this.Start = VAR_INT; this.End = VAR_INT; }
public override void METHOD_NAME(string VAR_STRING) { base.METHOD_NAME(VAR_STRING); StringTokenizer VAR_STRINGTOKENIZER = new StringTokenizer(VAR_STRING, LITERAL_STRING); while (VAR_STRINGTOKENIZER.MoveNext()) { string VAR_STRING = VAR_STRINGTOKENIZER.Current; StringTokenizer VAR_STRINGTOKENIZER = new StringTokenizer(VAR_STRING, LITERAL_STRING); string VAR_STRING = VAR_STRINGTOKENIZER.MoveNext() ? VAR_STRINGTOKENIZER.Current : string.Empty; string VAR_STRING = VAR_STRINGTOKENIZER.MoveNext() ? VAR_STRINGTOKENIZER.Current : string.Empty; if (VAR_STRING.Equals(LITERAL_STRING, StringComparison.Ordinal)) { if (VAR_STRING.Equals(LITERAL_STRING, StringComparison.OrdinalIgnoreCase)) impl = Implementation.ICU; else throw new Exception(LITERAL_STRING + VAR_STRING); } else { throw new Exception(LITERAL_STRING + VAR_STRING); } } }
public virtual DeleteBuildResponse METHOD_NAME(DeleteBuildRequest VAR_DELETEBUILDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteBuildRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteBuildResponseUnmarshaller.Instance; return Invoke<DeleteBuildResponse>(VAR_DELETEBUILDREQUEST, VAR_VAR); }
public virtual DescribeVolumeStatusResponse METHOD_NAME() { return METHOD_NAME(new DescribeVolumeStatusRequest()); }
public virtual string METHOD_NAME() { return f; }
public virtual NGit.Api.ShowNoteCommand METHOD_NAME(RevObject VAR_REVOBJECT) { CheckCallable(); this.VAR_REVOBJECT = VAR_REVOBJECT; return this; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new PatternReplaceFilter(VAR_TOKENSTREAM, pattern, replacement, replaceAll); }
public virtual void METHOD_NAME() { throw new System.NotImplementedException(); }
public Ptg METHOD_NAME(CellReference VAR_CELLREFERENCE, SheetIdentifier VAR_SHEETIDENTIFIER) { int VAR_INT = GetSheetExtIx(VAR_SHEETIDENTIFIER); return new Ref3DPtg(VAR_CELLREFERENCE, VAR_INT); }
public static void METHOD_NAME(bool[] VAR_BOOL[], int VAR_INT, int VAR_INT, bool VAR_BOOL) { java.util.Arrays.checkStartAndEnd(VAR_BOOL[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_BOOL[][i] = VAR_BOOL; } } }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new ICUFoldingFilter(VAR_TOKENSTREAM); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { return LITERAL_STRING; }
public virtual NGit.Api.StashCreateCommand METHOD_NAME(string VAR_STRING) { workingDirectoryMessage = VAR_STRING; return this; }
public SheetRangeEvaluator(int VAR_INT, SheetRefEvaluator VAR_SHEETREFEVALUATOR) : this(onlySheetIndex, onlySheetIndex, new SheetRefEvaluator[] { sheetEvaluator });
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_INT[].Length < VAR_INT) { int[] VAR_INT[] = new int[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(VAR_INT[], LITERAL_INT, VAR_INT[], LITERAL_INT, VAR_INT[].Length); return VAR_INT[]; } else { return VAR_INT[]; } }
public static RevFilter METHOD_NAME(ICollection<RevFilter> VAR_ICOLLECTION<REVFILTER>) { if (VAR_ICOLLECTION<REVFILTER>.Count < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } RevFilter[] VAR_REVFILTER[] = new RevFilter[VAR_ICOLLECTION<REVFILTER>.Count]; Sharpen.Collections.ToArray(VAR_ICOLLECTION<REVFILTER>, VAR_REVFILTER[]); if (VAR_REVFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_REVFILTER[][LITERAL_INT], VAR_REVFILTER[][LITERAL_INT]); } return new OrRevFilter.List(VAR_REVFILTER[]); }
public virtual DeregisterOnPremisesInstanceResponse METHOD_NAME(DeregisterOnPremisesInstanceRequest VAR_DEREGISTERONPREMISESINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterOnPremisesInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterOnPremisesInstanceResponseUnmarshaller.Instance; return Invoke<DeregisterOnPremisesInstanceResponse>(VAR_DEREGISTERONPREMISESINSTANCEREQUEST, VAR_VAR); }
public virtual ListDeliverabilityTestReportsResponse METHOD_NAME(ListDeliverabilityTestReportsRequest VAR_LISTDELIVERABILITYTESTREPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeliverabilityTestReportsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeliverabilityTestReportsResponseUnmarshaller.Instance; return Invoke<ListDeliverabilityTestReportsResponse>(VAR_LISTDELIVERABILITYTESTREPORTSREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = OperandResolver.CoerceValueToDouble(VAR_VALUEEVAL); } catch (EvaluationException) { return ErrorEval.VALUE_INVALID; } if (VAR_DOUBLE < LITERAL_INT) { return ErrorEval.NUM_ERROR; } int VAR_INT = (int)Math.Ceiling(VAR_DOUBLE); double VAR_DOUBLE; try { double[] VAR_DOUBLE[] = NPOI.SS.Formula.Functions.AggregateFunction.ValueCollector.CollectValues(VAR_VALUEEVAL); if (VAR_INT > VAR_DOUBLE[].Length) { return ErrorEval.NUM_ERROR; } VAR_DOUBLE = _isLarge ? StatsLib.kthLargest(VAR_DOUBLE[], VAR_INT) : StatsLib.kthSmallest(VAR_DOUBLE[], VAR_INT); NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public ByteArrayDataInput() { Reset(BytesRef.EMPTY_BYTES); }
public override java.nio.ByteBuffer METHOD_NAME(double VAR_DOUBLE) { throw new System.NotImplementedException(); }
public virtual ChangeMessageVisibilityResponse METHOD_NAME(ChangeMessageVisibilityRequest VAR_CHANGEMESSAGEVISIBILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ChangeMessageVisibilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ChangeMessageVisibilityResponseUnmarshaller.Instance; return Invoke<ChangeMessageVisibilityResponse>(VAR_CHANGEMESSAGEVISIBILITYREQUEST, VAR_VAR); }
public virtual UpdateWorkGroupResponse METHOD_NAME(UpdateWorkGroupRequest VAR_UPDATEWORKGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateWorkGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateWorkGroupResponseUnmarshaller.Instance; return Invoke<UpdateWorkGroupResponse>(VAR_UPDATEWORKGROUPREQUEST, VAR_VAR); }
public java.util.NavigableMap<K, V> METHOD_NAME(K VAR_K) { return this.subMap(VAR_K, java.util.TreeMap.Bound.INCLUSIVE, default(K), java.util.TreeMap.Bound.NO_BOUND); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual NGit.Api.BlameCommand METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { this.startCommit = VAR_ANYOBJECTID.ToObjectId(); return this; }
public virtual ModifyEbsDefaultKmsKeyIdResponse METHOD_NAME(ModifyEbsDefaultKmsKeyIdRequest VAR_MODIFYEBSDEFAULTKMSKEYIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyEbsDefaultKmsKeyIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyEbsDefaultKmsKeyIdResponseUnmarshaller.Instance; return Invoke<ModifyEbsDefaultKmsKeyIdResponse>(VAR_MODIFYEBSDEFAULTKMSKEYIDREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_AUTHOR); }
public override Ref METHOD_NAME(object VAR_OBJECT) { string VAR_STRING = ToRefName((string)VAR_OBJECT); Ref VAR_REF = resolved.METHOD_NAME(VAR_STRING); if (VAR_REF == LITERAL_NULL) { VAR_REF = loose.METHOD_NAME(VAR_STRING); } if (VAR_REF == LITERAL_NULL) { VAR_REF = packed.METHOD_NAME(VAR_STRING); } return VAR_REF; }
public int METHOD_NAME(IConditionalFormatting VAR_ICONDITIONALFORMATTING) { CFRecordsAggregate VAR_CFRECORDSAGGREGATE = ((HSSFConditionalFormatting)VAR_ICONDITIONALFORMATTING).CFRecordsAggregate.CloneCFAggregate(); return _conditionalFormattingTable.Add(VAR_CFRECORDSAGGREGATE); }
public sealed override string METHOD_NAME() { return GetType().FullName + LITERAL_STRING + this.canonicalName + LITERAL_STRING; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(Iterations); }
public virtual Query METHOD_NAME(IQueryNode VAR_IQUERYNODE) { if (!(VAR_IQUERYNODE is MatchAllDocsQueryNode)) { throw new QueryNodeException(new Message(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, VAR_IQUERYNODE.ToQueryString(new EscapeQuerySyntax()), VAR_IQUERYNODE.GetType().Name)); } return new MatchAllDocsQuery(); }
public virtual java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[]) { return METHOD_NAME(VAR_LONG[], LITERAL_INT, VAR_LONG[].Length); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public SpatialArgs(SpatialOperation VAR_SPATIALOPERATION, IShape VAR_ISHAPE) { if (VAR_SPATIALOPERATION == LITERAL_NULL || VAR_ISHAPE == LITERAL_NULL) throw new ArgumentException(LITERAL_STRING); this.Operation = VAR_SPATIALOPERATION; this.Shape = VAR_ISHAPE; }
public int METHOD_NAME(Completion VAR_COMPLETION) { return this.Utf8.METHOD_NAME(VAR_COMPLETION.Utf8); }
public virtual GetInstancesResponse METHOD_NAME(GetInstancesRequest VAR_GETINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstancesResponseUnmarshaller.Instance; return Invoke<GetInstancesResponse>(VAR_GETINSTANCESREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (text.Index == text.EndIndex || LITERAL_INT == sentenceStarts.Length) { return Done; } else if (currentSentence < sentenceStarts.Length - LITERAL_INT) { text.SetIndex(sentenceStarts[++currentSentence]); return Current; } else { return Last(); } }
public IClientAnchor METHOD_NAME(double VAR_DOUBLE, double VAR_DOUBLE) { ImageUtils.SetPreferredSize(this, VAR_DOUBLE, VAR_DOUBLE); return ClientAnchor; }
public virtual CreateTaskSetResponse METHOD_NAME(CreateTaskSetRequest VAR_CREATETASKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTaskSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTaskSetResponseUnmarshaller.Instance; return Invoke<CreateTaskSetResponse>(VAR_CREATETASKSETREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, float VAR_FLOAT) { return putInt(VAR_INT, Sharpen.Util.FloatToRawIntBits(VAR_FLOAT)); }
public static void METHOD_NAME(string[] VAR_STRING[]) { string VAR_STRING = LITERAL_NULL; int VAR_INT = DEFAULT_NUMTERMS; if (VAR_STRING[].Length == LITERAL_INT || VAR_STRING[].Length > LITERAL_INT) { throw new ArgumentException(); } Store.Directory VAR_STORE.DIRECTORY = FSDirectory.Open(new DirectoryInfo(VAR_STRING[][LITERAL_INT])); IComparer<TermStats> VAR_ICOMPARER<TERMSTATS> = new DocFreqComparer(); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { if (VAR_STRING[][i].Equals(LITERAL_STRING, StringComparison.Ordinal)) { VAR_ICOMPARER<TERMSTATS> = new TotalTermFreqComparer(); } else { if (!int.TryParse(VAR_STRING[][i], NumberStyles.Integer, CultureInfo.InvariantCulture, out VAR_INT)) VAR_STRING = VAR_STRING[][i]; } } using (IndexReader reader = DirectoryReader.Open(VAR_STORE.DIRECTORY)) { TermStats[] VAR_TERMSTATS[] = GetHighFreqTerms(reader, VAR_INT, VAR_STRING, VAR_ICOMPARER<TERMSTATS>); for (int i = LITERAL_INT; i < VAR_TERMSTATS[].Length; i++) { Console.WriteLine(LITERAL_STRING, VAR_TERMSTATS[][i].Field, VAR_TERMSTATS[][i].GetTermText(), VAR_TERMSTATS[][i].TotalTermFreq, VAR_TERMSTATS[][i].DocFreq); } } }
public static List<String> METHOD_NAME() { List<String> VAR_LIST<STRING> = new List<String>(); VAR_LIST<STRING>.AddRange(FunctionEval.METHOD_NAME()); VAR_LIST<STRING>.AddRange(AnalysisToolPak.METHOD_NAME()); return VAR_LIST<STRING>; }
public virtual CreateMeetingResponse METHOD_NAME(CreateMeetingRequest VAR_CREATEMEETINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMeetingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMeetingResponseUnmarshaller.Instance; return Invoke<CreateMeetingResponse>(VAR_CREATEMEETINGREQUEST, VAR_VAR); }
public override char METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return byteBuffer.getChar(VAR_INT * libcore.io.SizeOf.CHAR); }
public virtual GetInstanceSnapshotResponse METHOD_NAME(GetInstanceSnapshotRequest VAR_GETINSTANCESNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetInstanceSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetInstanceSnapshotResponseUnmarshaller.Instance; return Invoke<GetInstanceSnapshotResponse>(VAR_GETINSTANCESNAPSHOTREQUEST, VAR_VAR); }
public static IDictionary<string, int> METHOD_NAME(string[] VAR_STRING[]) { IDictionary<string, int> VAR_IDICTIONARY<STRING, INT> = new Dictionary<string, int>(); for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { VAR_IDICTIONARY<STRING, INT>[VAR_STRING[][i]] = i; } return VAR_IDICTIONARY<STRING, INT>; }
public virtual GetHealthCheckStatusResponse METHOD_NAME(GetHealthCheckStatusRequest VAR_GETHEALTHCHECKSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHealthCheckStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHealthCheckStatusResponseUnmarshaller.Instance; return Invoke<GetHealthCheckStatusResponse>(VAR_GETHEALTHCHECKSTATUSREQUEST, VAR_VAR); }
public virtual GetReusableDelegationSetResponse METHOD_NAME(GetReusableDelegationSetRequest VAR_GETREUSABLEDELEGATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetReusableDelegationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetReusableDelegationSetResponseUnmarshaller.Instance; return Invoke<GetReusableDelegationSetResponse>(VAR_GETREUSABLEDELEGATIONSETREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = VAR_INT - _firstRow; int VAR_INT = VAR_INT - _firstColumn; if (VAR_INT < LITERAL_INT || VAR_INT >= _nRows) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + _firstRow + LITERAL_STRING + _lastRow + LITERAL_STRING); } if (VAR_INT < LITERAL_INT || VAR_INT >= _nColumns) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + _firstColumn + LITERAL_STRING + VAR_INT + LITERAL_STRING); } return GetRelativeValue(VAR_INT, VAR_INT); }
public sealed override java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { throw new java.nio.ReadOnlyBufferException(); }
public override string METHOD_NAME() { var VAR_VAR = new StringBuilder(); VAR_VAR.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < fields.Count; i++) { IIndexableField VAR_IINDEXABLEFIELD = fields[i]; VAR_VAR.Append(VAR_IINDEXABLEFIELD.METHOD_NAME()); if (i != fields.Count - LITERAL_INT) { VAR_VAR.Append(LITERAL_STRING); } } VAR_VAR.Append(LITERAL_STRING); return VAR_VAR.METHOD_NAME(); }
public virtual StartMatchBackfillResponse METHOD_NAME(StartMatchBackfillRequest VAR_STARTMATCHBACKFILLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartMatchBackfillRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartMatchBackfillResponseUnmarshaller.Instance; return Invoke<StartMatchBackfillResponse>(VAR_STARTMATCHBACKFILLREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public virtual DeleteEmailTemplateResponse METHOD_NAME(DeleteEmailTemplateRequest VAR_DELETEEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEmailTemplateResponseUnmarshaller.Instance; return Invoke<DeleteEmailTemplateResponse>(VAR_DELETEEMAILTEMPLATEREQUEST, VAR_VAR); }
public virtual ListReceiptRuleSetsResponse METHOD_NAME(ListReceiptRuleSetsRequest VAR_LISTRECEIPTRULESETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListReceiptRuleSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListReceiptRuleSetsResponseUnmarshaller.Instance; return Invoke<ListReceiptRuleSetsResponse>(VAR_LISTRECEIPTRULESETSREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { int VAR_INT = FindEndOfRowOutlineGroup(VAR_INT) + LITERAL_INT; if (GetRow(VAR_INT) == LITERAL_NULL) return false; else return GetRow(VAR_INT).Colapsed; }
public virtual void METHOD_NAME(TreeFilter VAR_TREEFILTER) { pathFilter = VAR_TREEFILTER != LITERAL_NULL ? VAR_TREEFILTER : TreeFilter.ALL; }
public override int METHOD_NAME(int VAR_INT) { System.Diagnostics.Debug.Assert(VAR_INT == LITERAL_INT); return returnState; }
public virtual GroupingSearch METHOD_NAME(int VAR_INT) { this.VAR_INT = VAR_INT; return this; }
public void METHOD_NAME(string VAR_STRING) { for (int i = LITERAL_INT; i < fields.Count; i++) { IIndexableField VAR_IINDEXABLEFIELD = fields[i]; if (VAR_IINDEXABLEFIELD.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { fields.Remove(VAR_IINDEXABLEFIELD); return; } } }
public double? METHOD_NAME(string VAR_STRING) { if (LITERAL_NULL != DictionaryUtil.Get(ResponseDictionary, VAR_STRING)) { return double.Parse(DictionaryUtil.Get(ResponseDictionary, VAR_STRING)); } return LITERAL_NULL; }
public virtual DescribeLoadBalancersResponse METHOD_NAME(DescribeLoadBalancersRequest VAR_DESCRIBELOADBALANCERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoadBalancersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoadBalancersResponseUnmarshaller.Instance; return Invoke<DescribeLoadBalancersResponse>(VAR_DESCRIBELOADBALANCERSREQUEST, VAR_VAR); }
public virtual SpanQuery[] METHOD_NAME() { return clauses.ToArray(); }
public override Object METHOD_NAME() { return this; }
public PersonIdent METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.Tagger(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return LITERAL_NULL; } return RawParseUtils.ParsePersonIdent(VAR_BYTE[], VAR_INT); }
public NameRecord METHOD_NAME() { return AddName(new NameRecord()); }
public virtual void METHOD_NAME(int VAR_INT) { EnsureOpen(); cacheMissesUntilFill = VAR_INT; }
public override int METHOD_NAME(BytesRef VAR_BYTESREF) { return Hash32(VAR_BYTESREF.Bytes, VAR_BYTESREF.Offset, VAR_BYTESREF.Length); }
public override java.nio.DoubleBuffer METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.DOUBLE); byteBuffer.position(_position * libcore.io.SizeOf.DOUBLE); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_DOUBLE[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_DOUBLE[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { if (mSize != LITERAL_INT && VAR_INT <= mKeys[mSize - LITERAL_INT]) { put(VAR_INT, VAR_INT); return; } int VAR_INT = mSize; if (VAR_INT >= mKeys.Length) { int VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(VAR_INT + LITERAL_INT); int[] VAR_INT[] = new int[VAR_INT]; int[] VAR_INT[] = new int[VAR_INT]; System.Array.Copy(mKeys, LITERAL_INT, VAR_INT[], LITERAL_INT, mKeys.Length); System.Array.Copy(mValues, LITERAL_INT, VAR_INT[], LITERAL_INT, mValues.Length); mKeys = VAR_INT[]; mValues = VAR_INT[]; } mKeys[VAR_INT] = VAR_INT; mValues[VAR_INT] = VAR_INT; mSize = VAR_INT + LITERAL_INT; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); ValueEval VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); bool? VAR_BOOL? = OperandResolver.CoerceValueToBoolean(VAR_VALUEEVAL, false); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public QueryAllGroupsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (m_replacement.Length > LITERAL_INT) { Array.Copy(m_replacement, LITERAL_INT, VAR_CHAR[], VAR_INT - m_suffix.Length, m_replacement.Length); } return VAR_INT - m_suffix.Length + m_replacement.Length; }
public StandardSyntaxParserTokenManager(ICharStream VAR_ICHARSTREAM) { m_input_stream = VAR_ICHARSTREAM; }
public string METHOD_NAME() { byte[] VAR_BYTE[] = buffer; int VAR_INT = RawParseUtils.CommitMessage(VAR_BYTE[], LITERAL_INT); if (VAR_INT < LITERAL_INT) { return string.Empty; } System.Text.Encoding VAR_SYSTEM.TEXT.ENCODING = RawParseUtils.ParseEncoding(VAR_BYTE[]); return RawParseUtils.Decode(VAR_SYSTEM.TEXT.ENCODING, VAR_BYTE[], VAR_INT, VAR_BYTE[].Length); }
public IRequest METHOD_NAME(GetPublicAccessBlockRequest VAR_GETPUBLICACCESSBLOCKREQUEST) { IRequest VAR_IREQUEST = new DefaultRequest(VAR_GETPUBLICACCESSBLOCKREQUEST, LITERAL_STRING); VAR_IREQUEST.HttpMethod = LITERAL_STRING; if (string.IsNullOrEmpty(VAR_GETPUBLICACCESSBLOCKREQUEST.BucketName)) throw new System.ArgumentException(LITERAL_STRING, LITERAL_STRING); VAR_IREQUEST.MarshallerVersion = LITERAL_INT; VAR_IREQUEST.ResourcePath = string.Concat(LITERAL_STRING, S3Transforms.ToStringValue(VAR_GETPUBLICACCESSBLOCKREQUEST.BucketName)); VAR_IREQUEST.AddSubResource(LITERAL_STRING); VAR_IREQUEST.UseQueryString = true; return VAR_IREQUEST; }
public virtual ChangeTagsForResourceResponse METHOD_NAME(ChangeTagsForResourceRequest VAR_CHANGETAGSFORRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ChangeTagsForResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ChangeTagsForResourceResponseUnmarshaller.Instance; return Invoke<ChangeTagsForResourceResponse>(VAR_CHANGETAGSFORRESOURCEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char VAR_CHAR) { METHOD_NAME(VAR_CHAR.ToString()); }
public virtual RefUpdate.Result METHOD_NAME() { return result; }
public NPOI.SS.UserModel.IRow METHOD_NAME(int VAR_INT) { if (!rows.ContainsKey(VAR_INT)) return LITERAL_NULL; return (HSSFRow)rows[VAR_INT]; }
public override java.nio.LongBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.LongBuffer VAR_JAVA.NIO.LONGBUFFER = new java.nio.LongToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.LONGBUFFER; }
public virtual void METHOD_NAME(byte[] VAR_BYTE[], FileMode VAR_FILEMODE, AnyObjectId VAR_ANYOBJECTID) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length, VAR_FILEMODE, VAR_ANYOBJECTID); }
public override string METHOD_NAME() { return string.Format(LITERAL_STRING, mode); }
public virtual DescribeScriptResponse METHOD_NAME(DescribeScriptRequest VAR_DESCRIBESCRIPTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScriptRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScriptResponseUnmarshaller.Instance; return Invoke<DescribeScriptResponse>(VAR_DESCRIBESCRIPTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual RevokeCacheSecurityGroupIngressResponse METHOD_NAME(RevokeCacheSecurityGroupIngressRequest VAR_REVOKECACHESECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeCacheSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeCacheSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<RevokeCacheSecurityGroupIngressResponse>(VAR_REVOKECACHESECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public sealed override double METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return backingArray[offset + VAR_INT]; }
public virtual DeleteVoiceConnectorTerminationResponse METHOD_NAME(DeleteVoiceConnectorTerminationRequest VAR_DELETEVOICECONNECTORTERMINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorTerminationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorTerminationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorTerminationResponse>(VAR_DELETEVOICECONNECTORTERMINATIONREQUEST, VAR_VAR); }
public FileTreeIterator(Repository VAR_REPOSITORY) : this(repo.WorkTree, repo.FileSystem, repo.GetConfig().Get(WorkingTreeOptions.KEY)) { InitRootIterator(VAR_REPOSITORY); }
public ASCIIFoldingFilter(TokenStream VAR_TOKENSTREAM, bool VAR_BOOL) : base(input) { this.VAR_BOOL = VAR_BOOL; termAtt = AddAttribute<ICharTermAttribute>(); posIncAttr = AddAttribute<IPositionIncrementAttribute>(); }
public sealed override java.nio.CharBuffer METHOD_NAME() { return java.nio.CharToByteBufferAdapter.METHOD_NAME(this); }
public override Object METHOD_NAME() { return this; }
public virtual DescribeLifecycleHookTypesResponse METHOD_NAME(DescribeLifecycleHookTypesRequest VAR_DESCRIBELIFECYCLEHOOKTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLifecycleHookTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLifecycleHookTypesResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHookTypesResponse>(VAR_DESCRIBELIFECYCLEHOOKTYPESREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { if (!isOpen()) { return LITERAL_NULL; } return java.io.HistoricalCharsetNames.get(decoder.charset()); }
public virtual RespondDecisionTaskCompletedResponse METHOD_NAME(RespondDecisionTaskCompletedRequest VAR_RESPONDDECISIONTASKCOMPLETEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RespondDecisionTaskCompletedRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RespondDecisionTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondDecisionTaskCompletedResponse>(VAR_RESPONDDECISIONTASKCOMPLETEDREQUEST, VAR_VAR); }
public override void METHOD_NAME() { @in.METHOD_NAME(); }
public GetStreamingDistributionRequest(string VAR_STRING) { _id = VAR_STRING; }
public sealed override bool METHOD_NAME(object VAR_OBJECT) { return base.METHOD_NAME(VAR_OBJECT); }
public override string METHOD_NAME() { return LITERAL_STRING + this.phase + LITERAL_STRING + this.bytesUsed + LITERAL_STRING; }
public virtual GetDirectoryResponse METHOD_NAME(GetDirectoryRequest VAR_GETDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDirectoryResponseUnmarshaller.Instance; return Invoke<GetDirectoryResponse>(VAR_GETDIRECTORYREQUEST, VAR_VAR); }
public SoraniNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual CreateSolutionVersionResponse METHOD_NAME(CreateSolutionVersionRequest VAR_CREATESOLUTIONVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSolutionVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSolutionVersionResponseUnmarshaller.Instance; return Invoke<CreateSolutionVersionResponse>(VAR_CREATESOLUTIONVERSIONREQUEST, VAR_VAR); }
public virtual UpdateWorkteamResponse METHOD_NAME(UpdateWorkteamRequest VAR_UPDATEWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateWorkteamResponseUnmarshaller.Instance; return Invoke<UpdateWorkteamResponse>(VAR_UPDATEWORKTEAMREQUEST, VAR_VAR); }
public java.util.regex.Matcher METHOD_NAME(int VAR_INT, int VAR_INT) { return reset(java.lang.CharSequenceProxy.Wrap(input), VAR_INT, VAR_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } return false; }
public UpdateServerCertificateRequest(string VAR_STRING) { _serverCertificateName = VAR_STRING; }
public virtual int METHOD_NAME(int VAR_INT) { return mValues[VAR_INT]; }
public byte METHOD_NAME(char VAR_CHAR) { return characterCategoryMap[VAR_CHAR]; }
public int METHOD_NAME() { return _binaryExponent; }
public virtual long METHOD_NAME() { return offset; }
public virtual DescribeStackSetResponse METHOD_NAME(DescribeStackSetRequest VAR_DESCRIBESTACKSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStackSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStackSetResponseUnmarshaller.Instance; return Invoke<DescribeStackSetResponse>(VAR_DESCRIBESTACKSETREQUEST, VAR_VAR); }
public override E METHOD_NAME(int VAR_INT) { try { return listIterator(VAR_INT).next(); } catch (java.util.NoSuchElementException) { throw new System.IndexOutOfRangeException(); } }
public static bool METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case ProtectRecord.VAR_INT: case ObjectProtectRecord.VAR_INT: case ScenarioProtectRecord.VAR_INT: case PasswordRecord.VAR_INT: return true; } return false; }
public override long METHOD_NAME() { return main.METHOD_NAME(); }
public override String METHOD_NAME() { return LITERAL_STRING; }
public virtual bool METHOD_NAME(string VAR_STRING) { int VAR_INT = m_initial; int VAR_INT = VAR_STRING.Length; for (int i = LITERAL_INT, cp = LITERAL_INT; i < VAR_INT; i += Character.CharCount(cp)) { VAR_INT = Step(VAR_INT, cp = Character.CodePointAt(VAR_STRING, i)); if (VAR_INT == -LITERAL_INT) return false; } return m_accept[VAR_INT]; }
public virtual GetSchemaAsJsonResponse METHOD_NAME(GetSchemaAsJsonRequest VAR_GETSCHEMAASJSONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSchemaAsJsonRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSchemaAsJsonResponseUnmarshaller.Instance; return Invoke<GetSchemaAsJsonResponse>(VAR_GETSCHEMAASJSONREQUEST, VAR_VAR); }
public override T METHOD_NAME(int VAR_INT, T VAR_T) { if (VAR_INT < LITERAL_INT || size <= VAR_INT) { throw new IndexOutOfRangeException(VAR_INT.ToString()); } T[] VAR_T[] = directory[ToDirectoryIndex(VAR_INT)]; int VAR_INT = ToBlockIndex(VAR_INT); T VAR_T = VAR_T[][VAR_INT]; VAR_T[][VAR_INT] = VAR_T; return VAR_T; }
public virtual int METHOD_NAME(int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT > LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); Debug.Assert(VAR_INT >= LITERAL_INT && VAR_INT < Count); Debug.Assert(VAR_INT + VAR_INT <= VAR_LONG[].Length); int VAR_INT = Math.Min(Count - VAR_INT, VAR_INT); for (int i = VAR_INT, o = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i, ++o) { VAR_LONG[][o] = METHOD_NAME(i); } return VAR_INT; }
public virtual void METHOD_NAME(IParseTreeListener VAR_IPARSETREELISTENER) { if (VAR_IPARSETREELISTENER == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } if (_parseListeners == LITERAL_NULL) { _parseListeners = new List<IParseTreeListener>(); } this._parseListeners.Add(VAR_IPARSETREELISTENER); }
public virtual CreateQueryLoggingConfigResponse METHOD_NAME(CreateQueryLoggingConfigRequest VAR_CREATEQUERYLOGGINGCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateQueryLoggingConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateQueryLoggingConfigResponseUnmarshaller.Instance; return Invoke<CreateQueryLoggingConfigResponse>(VAR_CREATEQUERYLOGGINGCONFIGREQUEST, VAR_VAR); }
public virtual SetIdentityFeedbackForwardingEnabledResponse METHOD_NAME(SetIdentityFeedbackForwardingEnabledRequest VAR_SETIDENTITYFEEDBACKFORWARDINGENABLEDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetIdentityFeedbackForwardingEnabledRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetIdentityFeedbackForwardingEnabledResponseUnmarshaller.Instance; return Invoke<SetIdentityFeedbackForwardingEnabledResponse>(VAR_SETIDENTITYFEEDBACKFORWARDINGENABLEDREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { if (VAR_INT >= _values.Length) { throw new IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + LITERAL_STRING + _values.Length + LITERAL_STRING); } return _values[VAR_INT]; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == this) { return true; } if (!(VAR_OBJECT is java.util.List<E>)) { return false; } java.util.List<E> VAR_JAVA.UTIL.LIST<E> = (java.util.List<E>)VAR_OBJECT; int VAR_INT = _size; if (VAR_JAVA.UTIL.LIST<E>.size() != VAR_INT) { return false; } object[] VAR_OBJECT[] = array; if (VAR_JAVA.UTIL.LIST<E> is java.util.RandomAccess) { { for (int i = LITERAL_INT; i < VAR_INT; i++) { object VAR_OBJECT = VAR_OBJECT[][i]; object VAR_OBJECT = VAR_JAVA.UTIL.LIST<E>.get(i); if (VAR_OBJECT == LITERAL_NULL ? VAR_OBJECT != LITERAL_NULL : !VAR_OBJECT.METHOD_NAME(VAR_OBJECT)) { return false; } } } } else { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = VAR_JAVA.UTIL.LIST<E>.iterator(); { for (int i = LITERAL_INT; i < VAR_INT; i++) { object VAR_OBJECT = VAR_OBJECT[][i]; object VAR_OBJECT = VAR_JAVA.UTIL.ITERATOR<E>.next(); if (VAR_OBJECT == LITERAL_NULL ? VAR_OBJECT != LITERAL_NULL : !VAR_OBJECT.METHOD_NAME(VAR_OBJECT)) { return false; } } } } return true; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT == this || (VAR_OBJECT is ATNState && stateNumber == ((ATNState)VAR_OBJECT).stateNumber); }
public override EmptyTreeIterator METHOD_NAME() { byte[] VAR_BYTE[] = new byte[Math.Max(pathLen + LITERAL_INT, DEFAULT_PATH_SIZE)]; System.Array.Copy(path, LITERAL_INT, VAR_BYTE[], LITERAL_INT, pathLen); VAR_BYTE[][pathLen] = (byte)(LITERAL_CHAR); return new EmptyTreeIterator(this, VAR_BYTE[], pathLen + LITERAL_INT); }
public virtual bool METHOD_NAME() { return this.type == TYPE_OVERFLOW; }
public virtual ListQueueTagsResponse METHOD_NAME(ListQueueTagsRequest VAR_LISTQUEUETAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListQueueTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListQueueTagsResponseUnmarshaller.Instance; return Invoke<ListQueueTagsResponse>(VAR_LISTQUEUETAGSREQUEST, VAR_VAR); }
public BuyOriginPicturesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public static String METHOD_NAME(String VAR_STRING, char VAR_CHAR) { if (VAR_STRING == LITERAL_NULL) { return LITERAL_STRING; } if (VAR_STRING.Length < LITERAL_INT) { return LITERAL_STRING; } int VAR_INT = Math.Min(LITERAL_INT, VAR_STRING.Length); String VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT); StringBuilder VAR_STRINGBUILDER = new StringBuilder(VAR_STRING); for (int i = LITERAL_INT; i < VAR_INT; i++) { char VAR_CHAR = VAR_STRINGBUILDER[(i)]; switch (VAR_CHAR) { case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_STRINGBUILDER[i] = VAR_CHAR; break; case LITERAL_CHAR: if (i == LITERAL_INT || i == VAR_INT - LITERAL_INT) { VAR_STRINGBUILDER[i] = VAR_CHAR; } break; default: break; } } return VAR_STRINGBUILDER.ToString(); }
public virtual string METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual void METHOD_NAME(params ObjectId[] VAR_OBJECTID[]) { parentIds = new ObjectId[VAR_OBJECTID[].Length]; for (int i = LITERAL_INT; i < VAR_OBJECTID[].Length; i++) { parentIds[i] = VAR_OBJECTID[][i].Copy(); } }
public LexerATNConfig(LexerATNConfig VAR_LEXERATNCONFIG, ATNState VAR_ATNSTATE, LexerActionExecutor VAR_LEXERACTIONEXECUTOR) : base(c, state, c.context, c.semanticContext) { this.VAR_LEXERACTIONEXECUTOR = VAR_LEXERACTIONEXECUTOR; this.passedThroughNonGreedyDecision = checkNonGreedyDecision(VAR_LEXERATNCONFIG, VAR_ATNSTATE); }
public NormValueSource(string VAR_STRING) { this.m_field = VAR_STRING; }
public static bool METHOD_NAME(string VAR_STRING, string VAR_STRING) { if (VAR_STRING == VAR_STRING) { return true; } if (VAR_STRING.Length != VAR_STRING.Length) { return false; } for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { if (ToLowerCase(VAR_STRING[i]) != ToLowerCase(VAR_STRING[i])) { return false; } } return true; }
public override string METHOD_NAME() { return file.METHOD_NAME(); }
public virtual float METHOD_NAME(string VAR_STRING, string VAR_STRING) { int[] VAR_INT[] = Matches(VAR_STRING, VAR_STRING); float VAR_FLOAT = VAR_INT[][LITERAL_INT]; if (VAR_FLOAT == LITERAL_INT) { return LITERAL_FLOAT; } float VAR_FLOAT = ((VAR_FLOAT / VAR_STRING.Length + VAR_FLOAT / VAR_STRING.Length + (VAR_FLOAT - VAR_INT[][LITERAL_INT]) / VAR_FLOAT)) / LITERAL_INT; float VAR_FLOAT = VAR_FLOAT < Threshold ? VAR_FLOAT : VAR_FLOAT + Math.Min(LITERAL_FLOAT, LITERAL_FLOAT / VAR_INT[][LITERAL_INT]) * VAR_INT[][LITERAL_INT] * (LITERAL_INT - VAR_FLOAT); return VAR_FLOAT; }
public TokenGroup(TokenStream VAR_TOKENSTREAM) { offsetAtt = VAR_TOKENSTREAM.AddAttribute<IOffsetAttribute>(); termAtt = VAR_TOKENSTREAM.AddAttribute<ICharTermAttribute>(); }
public virtual string METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, VAR_INT + LITERAL_INT, true); }
public int METHOD_NAME() { return _countRead; }
public virtual CreateNetworkAclEntryResponse METHOD_NAME(CreateNetworkAclEntryRequest VAR_CREATENETWORKACLENTRYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateNetworkAclEntryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<CreateNetworkAclEntryResponse>(VAR_CREATENETWORKACLENTRYREQUEST, VAR_VAR); }
public BreakIteratorBoundaryScanner(BreakIterator VAR_BREAKITERATOR) { this.VAR_BREAKITERATOR = VAR_BREAKITERATOR; }
public override int METHOD_NAME(string VAR_STRING) { return GetWrappedAnalyzer(VAR_STRING).METHOD_NAME(VAR_STRING); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT + VAR_FLOAT[].Length); }
public ParseException(Token VAR_TOKEN, int[][] VAR_INT[][], string[] VAR_STRING[]) : base(new Message(QueryParserMessages.INVALID_SYNTAX, Initialize(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))) { this.CurrentToken = VAR_TOKEN; this.ExpectedTokenSequences = VAR_INT[][]; this.TokenImage = VAR_STRING[]; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeClustersResponse METHOD_NAME() { return METHOD_NAME(new DescribeClustersRequest()); }
public override void METHOD_NAME(double VAR_DOUBLE) { base.SetInt64Value(J2N.BitConversion.DoubleToRawInt64Bits(VAR_DOUBLE)); }
public virtual CreateSolutionResponse METHOD_NAME(CreateSolutionRequest VAR_CREATESOLUTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSolutionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSolutionResponseUnmarshaller.Instance; return Invoke<CreateSolutionResponse>(VAR_CREATESOLUTIONREQUEST, VAR_VAR); }
public static Packed64SingleBlock METHOD_NAME(int VAR_INT, int VAR_INT) { switch (VAR_INT) { case LITERAL_INT: return new Packed64SingleBlock1(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock2(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock3(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock4(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock5(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock6(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock7(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock8(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock9(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock10(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock12(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock16(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock21(VAR_INT); case LITERAL_INT: return new Packed64SingleBlock32(VAR_INT); default: throw new System.ArgumentException(LITERAL_STRING + LITERAL_INT); } }
public override object METHOD_NAME() { return new FieldAndTerm(this); }
public virtual DescribeAlgorithmResponse METHOD_NAME(DescribeAlgorithmRequest VAR_DESCRIBEALGORITHMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAlgorithmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAlgorithmResponseUnmarshaller.Instance; return Invoke<DescribeAlgorithmResponse>(VAR_DESCRIBEALGORITHMREQUEST, VAR_VAR); }
this.classname = className;
public virtual ExportTransitGatewayRoutesResponse METHOD_NAME(ExportTransitGatewayRoutesRequest VAR_EXPORTTRANSITGATEWAYROUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportTransitGatewayRoutesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportTransitGatewayRoutesResponseUnmarshaller.Instance; return Invoke<ExportTransitGatewayRoutesResponse>(VAR_EXPORTTRANSITGATEWAYROUTESREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { TokenStream VAR_TOKENSTREAM = new TypeTokenFilter(m_luceneMatchVersion, enablePositionIncrements, VAR_TOKENSTREAM, stopTypes, useWhitelist); return VAR_TOKENSTREAM; }
public void METHOD_NAME(TextReader VAR_TEXTREADER) { zzReader = VAR_TEXTREADER; zzAtBOL = true; zzAtEOF = false; zzEOFDone = false; zzEndRead = zzStartRead = LITERAL_INT; zzCurrentPos = zzMarkedPos = LITERAL_INT; yyline = yychar = yycolumn = LITERAL_INT; zzLexicalState = YYINITIAL; if (zzBuffer.Length > ZZ_BUFFERSIZE) zzBuffer = new char[ZZ_BUFFERSIZE]; }
public virtual int METHOD_NAME(SegmentInfoAndLevel VAR_SEGMENTINFOANDLEVEL) { return VAR_SEGMENTINFOANDLEVEL.level.METHOD_NAME(level); }
public FrenchMinimalStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public AreaErrPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { unused1 = VAR_ILITTLEENDIANINPUT.ReadInt(); unused2 = VAR_ILITTLEENDIANINPUT.ReadInt(); }
public virtual string METHOD_NAME() { return remoteTrackingBranch; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (VAR_OBJECT == LITERAL_NULL) return false; if (GetType() != VAR_OBJECT.GetType()) return false; FieldVals VAR_FIELDVALS = (FieldVals)VAR_OBJECT; if (fieldName == LITERAL_NULL) { if (VAR_FIELDVALS.fieldName != LITERAL_NULL) return false; } else if (!fieldName.METHOD_NAME(VAR_FIELDVALS.fieldName, StringComparison.Ordinal)) return false; if (J2N.BitConversion.SingleToInt32Bits(minSimilarity) != J2N.BitConversion.SingleToInt32Bits(VAR_FIELDVALS.minSimilarity)) return false; if (prefixLength != VAR_FIELDVALS.prefixLength) return false; if (queryString == LITERAL_NULL) { if (VAR_FIELDVALS.queryString != LITERAL_NULL) return false; } else if (!queryString.METHOD_NAME(VAR_FIELDVALS.queryString, StringComparison.Ordinal)) return false; return true; }
public virtual void METHOD_NAME(int VAR_INT) { maxChainLength = VAR_INT; }
public virtual DeleteReusableDelegationSetResponse METHOD_NAME(DeleteReusableDelegationSetRequest VAR_DELETEREUSABLEDELEGATIONSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteReusableDelegationSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteReusableDelegationSetResponseUnmarshaller.Instance; return Invoke<DeleteReusableDelegationSetResponse>(VAR_DELETEREUSABLEDELEGATIONSETREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public void METHOD_NAME(String VAR_STRING) { bool VAR_BOOL = StringUtil.HasMultibyte(VAR_STRING); int VAR_INT = LITERAL_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; if (VAR_BOOL) { VAR_INT |= LITERAL_INT; VAR_INT += LITERAL_INT; } WriteContinueIfRequired(VAR_INT); WriteByte(VAR_INT); WriteCharacterData(VAR_STRING, VAR_BOOL); }
public void METHOD_NAME() { if (LITERAL_INT + bufferUpto == buffers.Length) { var VAR_VAR = new byte[ArrayUtil.Oversize(buffers.Length + LITERAL_INT, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][]; Array.Copy(buffers, LITERAL_INT, VAR_VAR, LITERAL_INT, buffers.Length); buffers = VAR_VAR; } buffer = buffers[LITERAL_INT + bufferUpto] = allocator.GetByteBlock(); bufferUpto++; ByteUpto = LITERAL_INT; ByteOffset += BYTE_BLOCK_SIZE; }
public LruTaxonomyWriterCache(int VAR_INT, LRUType VAR_LRUTYPE) { if (VAR_LRUTYPE == LRUType.LRU_HASHED) { this.cache = new NameHashInt32CacheLRU(VAR_INT); } else { this.cache = new NameInt32CacheLRU(VAR_INT); } }
public bool METHOD_NAME() { return showSeriesKey.IsSet(field_1_options); }
public static string METHOD_NAME(byte[] VAR_BYTE[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR); for (int i = LITERAL_INT; i < VAR_BYTE[].Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(METHOD_NAME(VAR_BYTE[][i])); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.ToString(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_index_extern_sheet); WriteCoordinates(VAR_ILITTLEENDIANOUTPUT); }
public void METHOD_NAME() { _writer.METHOD_NAME(); }
public UsernamePasswordCredentialsProvider(string VAR_STRING, char[] VAR_CHAR[]) { this.VAR_STRING = VAR_STRING; this.VAR_CHAR[] = VAR_CHAR[]; }
public IList<string> METHOD_NAME(FooterKey VAR_FOOTERKEY) { IList<FooterLine> VAR_ILIST<FOOTERLINE> = METHOD_NAME(); if (VAR_ILIST<FOOTERLINE>.IsEmpty()) { return Sharpen.Collections.EmptyList<string>(); } AList<string> VAR_ALIST<STRING> = new AList<string>(VAR_ILIST<FOOTERLINE>.Count); foreach (FooterLine f in VAR_ILIST<FOOTERLINE>) { if (f.Matches(VAR_FOOTERKEY)) { VAR_ALIST<STRING>.AddItem(f.GetValue()); } } return VAR_ALIST<STRING>; }
public virtual RecordActivityTaskHeartbeatResponse METHOD_NAME(RecordActivityTaskHeartbeatRequest VAR_RECORDACTIVITYTASKHEARTBEATREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RecordActivityTaskHeartbeatRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RecordActivityTaskHeartbeatResponseUnmarshaller.Instance; return Invoke<RecordActivityTaskHeartbeatResponse>(VAR_RECORDACTIVITYTASKHEARTBEATREQUEST, VAR_VAR); }
public virtual DescribeStepResponse METHOD_NAME(DescribeStepRequest VAR_DESCRIBESTEPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeStepRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeStepResponseUnmarshaller.Instance; return Invoke<DescribeStepResponse>(VAR_DESCRIBESTEPREQUEST, VAR_VAR); }
public virtual DeleteMessageBatchResponse METHOD_NAME(string VAR_STRING, List<DeleteMessageBatchRequestEntry> VAR_LIST<DELETEMESSAGEBATCHREQUESTENTRY>) { var VAR_VAR = new DeleteMessageBatchRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.Entries = VAR_LIST<DELETEMESSAGEBATCHREQUESTENTRY>; return METHOD_NAME(VAR_VAR); }
public QueryScorer(Query VAR_QUERY, IndexReader VAR_INDEXREADER, string VAR_STRING) { Init(VAR_QUERY, VAR_STRING, VAR_INDEXREADER, true); }
public virtual CreateVpcPeeringAuthorizationResponse METHOD_NAME(CreateVpcPeeringAuthorizationRequest VAR_CREATEVPCPEERINGAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpcPeeringAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpcPeeringAuthorizationResponseUnmarshaller.Instance; return Invoke<CreateVpcPeeringAuthorizationResponse>(VAR_CREATEVPCPEERINGAUTHORIZATIONREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT != LITERAL_NULL) { foreach (E element in a) { if (VAR_OBJECT.Equals(element)) { return true; } } } else { foreach (E element in a) { if ((object)element == LITERAL_NULL) { return true; } } } return false; }
public virtual DescribeDBSubnetGroupsResponse METHOD_NAME(DescribeDBSubnetGroupsRequest VAR_DESCRIBEDBSUBNETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBSubnetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeDBSubnetGroupsResponse>(VAR_DESCRIBEDBSUBNETGROUPSREQUEST, VAR_VAR); }
public JobFlowExecutionStatusDetail(JobFlowExecutionState VAR_JOBFLOWEXECUTIONSTATE, DateTime VAR_DATETIME) { _state = VAR_JOBFLOWEXECUTIONSTATE; _creationDateTime = VAR_DATETIME; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public KeyValue(string VAR_STRING, string VAR_STRING) { _key = VAR_STRING; _value = VAR_STRING; }
public virtual void METHOD_NAME(object[] VAR_OBJECT[], object[] VAR_OBJECT[], int VAR_INT, int VAR_INT, TernaryTreeNode VAR_TERNARYTREENODE) { if (VAR_INT > VAR_INT) { return; } int VAR_INT = (VAR_INT + VAR_INT) / LITERAL_INT; VAR_TERNARYTREENODE = Insert(VAR_TERNARYTREENODE, (string)VAR_OBJECT[][VAR_INT], VAR_OBJECT[][VAR_INT], LITERAL_INT); METHOD_NAME(VAR_OBJECT[], VAR_OBJECT[], VAR_INT, VAR_INT - LITERAL_INT, VAR_TERNARYTREENODE); METHOD_NAME(VAR_OBJECT[], VAR_OBJECT[], VAR_INT + LITERAL_INT, VAR_INT, VAR_TERNARYTREENODE); }
public override Object METHOD_NAME() { PlotAreaRecord VAR_PLOTAREARECORD = new PlotAreaRecord(); return VAR_PLOTAREARECORD; }
public virtual DeleteSecurityConfigurationResponse METHOD_NAME(DeleteSecurityConfigurationRequest VAR_DELETESECURITYCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSecurityConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteSecurityConfigurationResponse>(VAR_DELETESECURITYCONFIGURATIONREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return mapEntry.METHOD_NAME(); }
public virtual byte[] METHOD_NAME(int VAR_INT) { if (!IsLarge()) { return METHOD_NAME(); } ObjectStream VAR_OBJECTSTREAM = OpenStream(); try { long VAR_LONG = VAR_OBJECTSTREAM.GetSize(); if (VAR_INT < VAR_LONG) { throw new LargeObjectException.ExceedsLimit(VAR_INT, VAR_LONG); } if (int.MaxValue < VAR_LONG) { throw new LargeObjectException.ExceedsByteArrayLimit(); } byte[] VAR_BYTE[]; try { VAR_BYTE[] = new byte[(int)VAR_LONG]; } catch (OutOfMemoryException notEnoughHeap) { throw new LargeObjectException.OutOfMemory(notEnoughHeap); } IOUtil.ReadFully(VAR_OBJECTSTREAM, VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); return VAR_BYTE[]; } finally { VAR_OBJECTSTREAM.Close(); } }
public virtual ListJobsByStatusResponse METHOD_NAME(ListJobsByStatusRequest VAR_LISTJOBSBYSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListJobsByStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListJobsByStatusResponseUnmarshaller.Instance; return Invoke<ListJobsByStatusResponse>(VAR_LISTJOBSBYSTATUSREQUEST, VAR_VAR); }
public virtual UpdateClusterVersionResponse METHOD_NAME(UpdateClusterVersionRequest VAR_UPDATECLUSTERVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateClusterVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateClusterVersionResponseUnmarshaller.Instance; return Invoke<UpdateClusterVersionResponse>(VAR_UPDATECLUSTERVERSIONREQUEST, VAR_VAR); }
public virtual NGit.Api.PushCommand METHOD_NAME(bool VAR_BOOL) { CheckCallable(); this.VAR_BOOL = VAR_BOOL; return this; }
public virtual ListStreamsResponse METHOD_NAME(ListStreamsRequest VAR_LISTSTREAMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStreamsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStreamsResponseUnmarshaller.Instance; return Invoke<ListStreamsResponse>(VAR_LISTSTREAMSREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { return this.wasEscaped[VAR_INT]; }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { newValue = VAR_ANYOBJECTID.Copy(); }
public virtual BatchRefUpdate METHOD_NAME() { return new BatchRefUpdate(this); }
public override string METHOD_NAME() { return LITERAL_STRING + arc + LITERAL_STRING + state; }
public virtual CreateTrafficMirrorFilterRuleResponse METHOD_NAME(CreateTrafficMirrorFilterRuleRequest VAR_CREATETRAFFICMIRRORFILTERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrafficMirrorFilterRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrafficMirrorFilterRuleResponseUnmarshaller.Instance; return Invoke<CreateTrafficMirrorFilterRuleResponse>(VAR_CREATETRAFFICMIRRORFILTERRULEREQUEST, VAR_VAR); }
public virtual SendEventResponse METHOD_NAME(SendEventRequest VAR_SENDEVENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendEventRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendEventResponseUnmarshaller.Instance; return Invoke<SendEventResponse>(VAR_SENDEVENTREQUEST, VAR_VAR); }
public MissingRowDummyRecord(int VAR_INT) { this.VAR_INT = VAR_INT; }
public int METHOD_NAME() { return endB - beginB; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_INT[][VAR_INT++] = (int)(((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT); } } }
public virtual void METHOD_NAME(int VAR_INT) { throw new System.NotImplementedException(); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public override K METHOD_NAME() { return this.nextEntry().key; }
public virtual DiffConfig.RenameDetectionType METHOD_NAME() { return renameDetectionType; }
public virtual ReplaceNetworkAclAssociationResponse METHOD_NAME(ReplaceNetworkAclAssociationRequest VAR_REPLACENETWORKACLASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReplaceNetworkAclAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReplaceNetworkAclAssociationResponseUnmarshaller.Instance; return Invoke<ReplaceNetworkAclAssociationResponse>(VAR_REPLACENETWORKACLASSOCIATIONREQUEST, VAR_VAR); }
public String METHOD_NAME() { return fontName; }
public ViewSourceRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { vs = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual bool METHOD_NAME() { return trackingRefUpdate != LITERAL_NULL; }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return set.Contains(VAR_INT); }
public ValueEval METHOD_NAME(IEvaluationCell VAR_IEVALUATIONCELL) { int VAR_INT = GetSheetIndex(VAR_IEVALUATIONCELL.Sheet); return EvaluateAny(VAR_IEVALUATIONCELL, VAR_INT, VAR_IEVALUATIONCELL.RowIndex, VAR_IEVALUATIONCELL.ColumnIndex, new EvaluationTracker(_cache)); }
public virtual AcceptTransitGatewayVpcAttachmentResponse METHOD_NAME(AcceptTransitGatewayVpcAttachmentRequest VAR_ACCEPTTRANSITGATEWAYVPCATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptTransitGatewayVpcAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptTransitGatewayVpcAttachmentResponseUnmarshaller.Instance; return Invoke<AcceptTransitGatewayVpcAttachmentResponse>(VAR_ACCEPTTRANSITGATEWAYVPCATTACHMENTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.schema + LITERAL_STRING + this.value + LITERAL_STRING; }
public static FuzzySet METHOD_NAME(int VAR_INT, float VAR_FLOAT) { var VAR_VAR = GetNearestSetSize(VAR_INT, VAR_FLOAT); return new FuzzySet(new FixedBitSet(VAR_VAR + LITERAL_INT), VAR_VAR, HashFunctionForVersion(VERSION_CURRENT)); }
public DeregisterInstancesFromLoadBalancerRequest(string VAR_STRING, List<Instance> VAR_LIST<INSTANCE>) { _loadBalancerName = VAR_STRING; _instances = VAR_LIST<INSTANCE>; }
public virtual DeleteIntegrationResponse METHOD_NAME(DeleteIntegrationRequest VAR_DELETEINTEGRATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIntegrationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIntegrationResponseUnmarshaller.Instance; return Invoke<DeleteIntegrationResponse>(VAR_DELETEINTEGRATIONREQUEST, VAR_VAR); }
public Ref3DPtg(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { field_1_index_extern_sheet = VAR_ILITTLEENDIANINPUT.ReadShort(); ReadCoordinates(VAR_ILITTLEENDIANINPUT); }
public virtual E METHOD_NAME() { lock (this) { try { return (E)elementData[elementCount - LITERAL_INT]; } catch (System.IndexOutOfRangeException) { throw new java.util.EmptyStackException(); } } }
public virtual CheckDomainTransferabilityResponse METHOD_NAME(CheckDomainTransferabilityRequest VAR_CHECKDOMAINTRANSFERABILITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CheckDomainTransferabilityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CheckDomainTransferabilityResponseUnmarshaller.Instance; return Invoke<CheckDomainTransferabilityResponse>(VAR_CHECKDOMAINTRANSFERABILITYREQUEST, VAR_VAR); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual InitiateJobResponse METHOD_NAME(InitiateJobRequest VAR_INITIATEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InitiateJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InitiateJobResponseUnmarshaller.Instance; return Invoke<InitiateJobResponse>(VAR_INITIATEJOBREQUEST, VAR_VAR); }
public StempelPolishStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Any()) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_LASTAUTHOR); }
public virtual void METHOD_NAME() { int VAR_INT = refCount.DecrementAndGet(); Debug.Assert(VAR_INT >= LITERAL_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + this.m_field + LITERAL_STRING + this.similarity + LITERAL_STRING + this.m_text + LITERAL_STRING; }
public static void METHOD_NAME(String VAR_STRING, ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { byte[] VAR_BYTE[] = ISO_8859_1.GetBytes(VAR_STRING); VAR_ILITTLEENDIANOUTPUT.Write(VAR_BYTE[]); }
public void METHOD_NAME(BytesRef VAR_BYTESREF) { var VAR_VAR = VAR_BYTESREF.Length; if (VAR_VAR == LITERAL_INT) { return; } int VAR_INT = VAR_BYTESREF.Offset; int VAR_INT = (VAR_VAR + ByteUpto) - BYTE_BLOCK_SIZE; do { if (VAR_INT <= LITERAL_INT) { Array.Copy(VAR_BYTESREF.Bytes, VAR_INT, buffer, ByteUpto, VAR_VAR); ByteUpto += VAR_VAR; break; } else { int VAR_INT = VAR_VAR - VAR_INT; if (VAR_INT > LITERAL_INT) { Array.Copy(VAR_BYTESREF.Bytes, VAR_INT, buffer, ByteUpto, VAR_INT); VAR_INT += VAR_INT; VAR_VAR -= VAR_INT; } NextBuffer(); VAR_INT = VAR_INT - BYTE_BLOCK_SIZE; } } while (true); }
public virtual GetBundlesResponse METHOD_NAME(GetBundlesRequest VAR_GETBUNDLESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBundlesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBundlesResponseUnmarshaller.Instance; return Invoke<GetBundlesResponse>(VAR_GETBUNDLESREQUEST, VAR_VAR); }
public virtual StopAssessmentRunResponse METHOD_NAME(StopAssessmentRunRequest VAR_STOPASSESSMENTRUNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopAssessmentRunRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopAssessmentRunResponseUnmarshaller.Instance; return Invoke<StopAssessmentRunResponse>(VAR_STOPASSESSMENTRUNREQUEST, VAR_VAR); }
public virtual CreateFolderResponse METHOD_NAME(CreateFolderRequest VAR_CREATEFOLDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFolderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFolderResponseUnmarshaller.Instance; return Invoke<CreateFolderResponse>(VAR_CREATEFOLDERREQUEST, VAR_VAR); }
public ChangeResourceRecordSetsRequest(string VAR_STRING, ChangeBatch VAR_CHANGEBATCH) { _hostedZoneId = VAR_STRING; _changeBatch = VAR_CHANGEBATCH; }
public virtual CreateDeploymentStrategyResponse METHOD_NAME(CreateDeploymentStrategyRequest VAR_CREATEDEPLOYMENTSTRATEGYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeploymentStrategyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeploymentStrategyResponseUnmarshaller.Instance; return Invoke<CreateDeploymentStrategyResponse>(VAR_CREATEDEPLOYMENTSTRATEGYREQUEST, VAR_VAR); }
public DeleteCacheClusterRequest(string VAR_STRING) { _cacheClusterId = VAR_STRING; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { switch (VAR_VALUEEVAL[].Length) { case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); case LITERAL_INT: return METHOD_NAME(VAR_INT, VAR_INT, VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT], VAR_VALUEEVAL[][LITERAL_INT]); } return ErrorEval.VALUE_INVALID; }
public virtual GroupingSearch METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public virtual string METHOD_NAME(string VAR_STRING) { byte[] VAR_BYTE[] = Constants.Encode(VAR_STRING); return METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public override bool METHOD_NAME() { return EntrySet().METHOD_NAME(); }
public override Search.Query METHOD_NAME(string VAR_STRING, BasicQueryFactory VAR_BASICQUERYFACTORY) { return SrndBooleanQuery.MakeBooleanQuery(MakeLuceneSubQueriesField(VAR_STRING, VAR_BASICQUERYFACTORY), Occur.MUST); }
public override long METHOD_NAME() { return data.Length; }
public virtual CreatePhoneNumberOrderResponse METHOD_NAME(CreatePhoneNumberOrderRequest VAR_CREATEPHONENUMBERORDERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePhoneNumberOrderRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePhoneNumberOrderResponseUnmarshaller.Instance; return Invoke<CreatePhoneNumberOrderResponse>(VAR_CREATEPHONENUMBERORDERREQUEST, VAR_VAR); }
public override java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_SHORT[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_SHORT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public virtual DetectModerationLabelsResponse METHOD_NAME(DetectModerationLabelsRequest VAR_DETECTMODERATIONLABELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectModerationLabelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectModerationLabelsResponseUnmarshaller.Instance; return Invoke<DetectModerationLabelsResponse>(VAR_DETECTMODERATIONLABELSREQUEST, VAR_VAR); }
public UncalcedRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _reserved = VAR_RECORDINPUTSTREAM.ReadShort(); }
public String METHOD_NAME(Match VAR_MATCH, String VAR_STRING, CellFormatType VAR_CELLFORMATTYPE, StringBuilder VAR_STRINGBUILDER) { int VAR_INT = VAR_STRINGBUILDER.Length; char VAR_CHAR = VAR_STRING[LITERAL_INT]; switch (VAR_CHAR) { case LITERAL_CHAR: if (VAR_STRING.Length < LITERAL_INT) break; if (_formatter.topmost != LITERAL_NULL) throw new ArgumentException(LITERAL_STRING); VAR_STRING = VAR_STRING.ToLower(); int VAR_INT = VAR_STRING.Length - LITERAL_INT; _formatter.topmost = _formatter.AssignSpec(VAR_STRING[LITERAL_INT], VAR_INT, VAR_INT); return VAR_STRING.Substring(LITERAL_INT, VAR_INT); case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: case LITERAL_CHAR: VAR_STRING = VAR_STRING.ToLower(); _formatter.AssignSpec(VAR_STRING[LITERAL_INT], VAR_INT, VAR_STRING.Length); return VAR_STRING; case LITERAL_CHAR: return LITERAL_STRING; case LITERAL_CHAR: VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_STRING.Length - LITERAL_INT); break; case LITERAL_CHAR: VAR_STRING = VAR_STRING.Substring(LITERAL_INT); break; case LITERAL_CHAR: if (VAR_STRING.Length > LITERAL_INT) VAR_STRING = CellFormatPart.ExpandChar(VAR_STRING); break; case LITERAL_CHAR: return LITERAL_NULL; } return VAR_STRING; }
public override long METHOD_NAME() { var VAR_VAR = ((_delegateFieldsProducer != LITERAL_NULL) ? _delegateFieldsProducer.METHOD_NAME() : LITERAL_INT); foreach (var entry in _bloomsByFieldName) { VAR_VAR += entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR; VAR_VAR += entry.Value.METHOD_NAME(); } return VAR_VAR; }
public CreateImageRequest(string VAR_STRING, string VAR_STRING) { _instanceId = VAR_STRING; _name = VAR_STRING; }
public virtual SendDiagnosticInterruptResponse METHOD_NAME(SendDiagnosticInterruptRequest VAR_SENDDIAGNOSTICINTERRUPTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendDiagnosticInterruptRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendDiagnosticInterruptResponseUnmarshaller.Instance; return Invoke<SendDiagnosticInterruptResponse>(VAR_SENDDIAGNOSTICINTERRUPTREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_OBJECT, VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public virtual AbortDocumentVersionUploadResponse METHOD_NAME(AbortDocumentVersionUploadRequest VAR_ABORTDOCUMENTVERSIONUPLOADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AbortDocumentVersionUploadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AbortDocumentVersionUploadResponseUnmarshaller.Instance; return Invoke<AbortDocumentVersionUploadResponse>(VAR_ABORTDOCUMENTVERSIONUPLOADREQUEST, VAR_VAR); }
public PaneInformation(short VAR_SHORT, short VAR_SHORT, short VAR_SHORT, short VAR_SHORT, byte VAR_BYTE, bool VAR_BOOL) { this.VAR_SHORT = VAR_SHORT; this.VAR_SHORT = VAR_SHORT; this.topRow = VAR_SHORT; this.leftColumn = VAR_SHORT; this.activePane = VAR_BYTE; this.VAR_BOOL = VAR_BOOL; }
public virtual DescribeScalingProcessTypesResponse METHOD_NAME(DescribeScalingProcessTypesRequest VAR_DESCRIBESCALINGPROCESSTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeScalingProcessTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeScalingProcessTypesResponseUnmarshaller.Instance; return Invoke<DescribeScalingProcessTypesResponse>(VAR_DESCRIBESCALINGPROCESSTYPESREQUEST, VAR_VAR); }
public static bool METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, char[] VAR_CHAR[]) { int VAR_INT = VAR_CHAR[].Length; if (VAR_INT > VAR_INT) { return false; } for (int i = VAR_INT - LITERAL_INT; i >= LITERAL_INT; i--) { if (VAR_CHAR[][VAR_INT - (VAR_INT - i)] != VAR_CHAR[][i]) { return false; } } return true; }
public void METHOD_NAME() { if (allocationSite == LITERAL_NULL || !ENABLED) { return; } string VAR_STRING = (LITERAL_STRING + LITERAL_STRING); REPORTER.report(VAR_STRING, allocationSite); }
public GetImageScanRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual ListSkillsStoreCategoriesResponse METHOD_NAME(ListSkillsStoreCategoriesRequest VAR_LISTSKILLSSTORECATEGORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSkillsStoreCategoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSkillsStoreCategoriesResponseUnmarshaller.Instance; return Invoke<ListSkillsStoreCategoriesResponse>(VAR_LISTSKILLSSTORECATEGORIESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return mBitmap.METHOD_NAME(); }
public void METHOD_NAME(short VAR_SHORT) { METHOD_NAME(LITERAL_INT, _string.CharCount, VAR_SHORT); }
public virtual DetectEntitiesResponse METHOD_NAME(DetectEntitiesRequest VAR_DETECTENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectEntitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectEntitiesResponseUnmarshaller.Instance; return Invoke<DetectEntitiesResponse>(VAR_DETECTENTITIESREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ByteBuffer VAR_BYTEBUFFER) { VAR_BYTEBUFFER.PutInt(w1); VAR_BYTEBUFFER.PutInt(w2); VAR_BYTEBUFFER.PutInt(w3); VAR_BYTEBUFFER.PutInt(w4); VAR_BYTEBUFFER.PutInt(w5); }
public sealed override object METHOD_NAME() { return protectedArray(); }
public override void METHOD_NAME(long VAR_LONG) { if (indexEnum == LITERAL_NULL) { throw new InvalidOperationException(LITERAL_STRING); } Debug.Assert(VAR_LONG < outerInstance.numTerms); input.Seek(indexEnum.Seek(VAR_LONG)); bool VAR_BOOL = NextBlock(); Debug.Assert(VAR_BOOL); indexIsCurrent = true; didIndexNext = false; blocksSinceSeek = LITERAL_INT; seekPending = false; state.Ord = indexEnum.Ord - LITERAL_INT; Debug.Assert(state.Ord >= -LITERAL_INT, LITERAL_STRING + state.Ord); term.CopyBytes(indexEnum.Term); int VAR_INT = (int)(VAR_LONG - state.Ord); while (VAR_INT > LITERAL_INT) { BytesRef VAR_BYTESREF = _next(); Debug.Assert(VAR_BYTESREF != LITERAL_NULL); VAR_INT--; Debug.Assert(indexIsCurrent); } }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR); int VAR_INT = Offset + Length; for (int i = Offset; i < VAR_INT; i++) { if (i > Offset) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append((bytes[i] & LITERAL_INT).METHOD_NAME(LITERAL_STRING)); } VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + fSD); VAR_STRINGBUILDER.Append(LITERAL_STRING + passwordVerifier); VAR_STRINGBUILDER.Append(LITERAL_STRING + title); VAR_STRINGBUILDER.Append(LITERAL_STRING + securityDescriptor.Length); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(int VAR_INT) { crc = VAR_INT; }
public DoubleRange(string VAR_STRING, double VAR_DOUBLE, bool VAR_BOOL, double VAR_DOUBLE, bool VAR_BOOL) : base(label) { this.Min = VAR_DOUBLE; this.Max = VAR_DOUBLE; this.MinInclusive = VAR_BOOL; this.MaxInclusive = VAR_BOOL; if (double.IsNaN(Min)) { throw new System.ArgumentException(LITERAL_STRING); } if (!VAR_BOOL) { VAR_DOUBLE += EPSILON; } if (double.IsNaN(Max)) { throw new System.ArgumentException(LITERAL_STRING); } if (!VAR_BOOL) { VAR_DOUBLE = VAR_DOUBLE -= EPSILON; } if (VAR_DOUBLE > VAR_DOUBLE) { FailNoMatch(); } this.minIncl = VAR_DOUBLE; this.maxIncl = VAR_DOUBLE; }
public int METHOD_NAME() { return bigBlockSize / LittleEndianConsts.INT_SIZE; }
public virtual CreatePublishingDestinationResponse METHOD_NAME(CreatePublishingDestinationRequest VAR_CREATEPUBLISHINGDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePublishingDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePublishingDestinationResponseUnmarshaller.Instance; return Invoke<CreatePublishingDestinationResponse>(VAR_CREATEPUBLISHINGDESTINATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(long VAR_LONG) { pos += (int)VAR_LONG; }
public override string METHOD_NAME() { return LITERAL_STRING + threshold + LITERAL_STRING; }
public virtual DeleteInvitationsResponse METHOD_NAME(DeleteInvitationsRequest VAR_DELETEINVITATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInvitationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInvitationsResponseUnmarshaller.Instance; return Invoke<DeleteInvitationsResponse>(VAR_DELETEINVITATIONSREQUEST, VAR_VAR); }
public DelimitedPayloadTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { encoderClass = Require(VAR_IDICTIONARY<STRING, STRING>, ENCODER_ATTR); delimiter = GetChar(VAR_IDICTIONARY<STRING, STRING>, DELIMITER_ATTR, LITERAL_CHAR); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual ListSmartHomeAppliancesResponse METHOD_NAME(ListSmartHomeAppliancesRequest VAR_LISTSMARTHOMEAPPLIANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListSmartHomeAppliancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListSmartHomeAppliancesResponseUnmarshaller.Instance; return Invoke<ListSmartHomeAppliancesResponse>(VAR_LISTSMARTHOMEAPPLIANCESREQUEST, VAR_VAR); }
public override void METHOD_NAME(ConfigChangedListener VAR_CONFIGCHANGEDLISTENER) { VAR_CONFIGCHANGEDLISTENER.OnConfigChanged(this); }
public java.io.File[] METHOD_NAME() { return filenamesToFiles(list()); }
public async Task<AzureOperationResponse<DedicatedCapacity>> METHOD_NAME(string VAR_STRING, string VAR_STRING, Dictionary<string, List<string>> VAR_DICTIONARY<STRING, LIST<STRING>> = LITERAL_NULL, CancellationToken VAR_CANCELLATIONTOKEN = default(CancellationToken)) { return await innerCapacityOperations.METHOD_NAME(VAR_STRING, VAR_STRING, VAR_DICTIONARY<STRING, LIST<STRING>>, VAR_CANCELLATIONTOKEN).ConfigureAwait(false); }
public override void METHOD_NAME(long VAR_LONG) { Debug.Assert(VAR_LONG < info.terms.Count); termUpto = (int)VAR_LONG; }
public virtual CreateTrialComponentResponse METHOD_NAME(CreateTrialComponentRequest VAR_CREATETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTrialComponentResponseUnmarshaller.Instance; return Invoke<CreateTrialComponentResponse>(VAR_CREATETRIALCOMPONENTREQUEST, VAR_VAR); }
public virtual UpdateResourceResponse METHOD_NAME(UpdateResourceRequest VAR_UPDATERESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateResourceResponseUnmarshaller.Instance; return Invoke<UpdateResourceResponse>(VAR_UPDATERESOURCEREQUEST, VAR_VAR); }
public long METHOD_NAME() { try { return channel.size(); } catch (IOException ioe) { throw new Exception(LITERAL_STRING + this, ioe); } }
public override char METHOD_NAME(int VAR_INT) { if (VAR_INT < BeginIndex || VAR_INT > EndIndex) { throw new ArgumentException(LITERAL_STRING + VAR_INT); } index = start + VAR_INT; return Current; }
public static bool METHOD_NAME(short VAR_SHORT, short VAR_SHORT) { if (VAR_SHORT >= EscherContainerRecord.DGG_CONTAINER && VAR_SHORT <= EscherContainerRecord.SOLVER_CONTAINER) { return true; } else { if (VAR_SHORT == EscherTextboxRecord.RECORD_ID) { return false; } else { return (VAR_SHORT & (short)LITERAL_INT) == (short)LITERAL_INT; } } }
public bool METHOD_NAME(string VAR_STRING) { Debug.Assert(IsLocked); return refCounts.TryGetValue(VAR_STRING, out RefCount value) ? value.count > LITERAL_INT : false; }
public void METHOD_NAME(IAcsClient VAR_IACSCLIENT) { stsClient = VAR_IACSCLIENT; }
public virtual AcceptMatchResponse METHOD_NAME(AcceptMatchRequest VAR_ACCEPTMATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptMatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptMatchResponseUnmarshaller.Instance; return Invoke<AcceptMatchResponse>(VAR_ACCEPTMATCHREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(JGitText.Get().skipMustBeNonNegative); } return new NGit.Revwalk.Filter.SkipRevFilter(VAR_INT); }
public virtual GetHITResponse METHOD_NAME(GetHITRequest VAR_GETHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetHITResponseUnmarshaller.Instance; return Invoke<GetHITResponse>(VAR_GETHITREQUEST, VAR_VAR); }
public virtual StopStreamProcessorResponse METHOD_NAME(StopStreamProcessorRequest VAR_STOPSTREAMPROCESSORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopStreamProcessorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopStreamProcessorResponseUnmarshaller.Instance; return Invoke<StopStreamProcessorResponse>(VAR_STOPSTREAMPROCESSORREQUEST, VAR_VAR); }
public static AttrPtg METHOD_NAME(int VAR_INT) { return new AttrPtg(optiIf.Set(LITERAL_INT), VAR_INT, LITERAL_NULL, -LITERAL_INT); }
public virtual DeleteIAMPolicyAssignmentResponse METHOD_NAME(DeleteIAMPolicyAssignmentRequest VAR_DELETEIAMPOLICYASSIGNMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIAMPolicyAssignmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIAMPolicyAssignmentResponseUnmarshaller.Instance; return Invoke<DeleteIAMPolicyAssignmentResponse>(VAR_DELETEIAMPOLICYASSIGNMENTREQUEST, VAR_VAR); }
public virtual UpdateCampaignResponse METHOD_NAME(UpdateCampaignRequest VAR_UPDATECAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateCampaignResponseUnmarshaller.Instance; return Invoke<UpdateCampaignResponse>(VAR_UPDATECAMPAIGNREQUEST, VAR_VAR); }
public virtual Antlr4.Runtime.Atn.LexerActionExecutor METHOD_NAME(int VAR_INT) { ILexerAction[] VAR_ILEXERACTION[] = LITERAL_NULL; for (int i = LITERAL_INT; i < lexerActions.Length; i++) { if (lexerActions[i].IsPositionDependent && !(lexerActions[i] is LexerIndexedCustomAction)) { if (VAR_ILEXERACTION[] == LITERAL_NULL) { VAR_ILEXERACTION[] = (ILexerAction[])lexerActions.Clone(); } VAR_ILEXERACTION[][i] = new LexerIndexedCustomAction(VAR_INT, lexerActions[i]); } } if (VAR_ILEXERACTION[] == LITERAL_NULL) { return this; } return new Antlr4.Runtime.Atn.LexerActionExecutor(VAR_ILEXERACTION[]); }
public void METHOD_NAME(String VAR_STRING, bool VAR_BOOL, bool VAR_BOOL) { if (VAR_STRING == LITERAL_NULL) { _passwordRecord = LITERAL_NULL; _protectRecord = LITERAL_NULL; _objectProtectRecord = LITERAL_NULL; _scenarioProtectRecord = LITERAL_NULL; return; } ProtectRecord VAR_PROTECTRECORD = this.Protect; PasswordRecord VAR_PASSWORDRECORD = this.Password; VAR_PROTECTRECORD.Protect = true; VAR_PASSWORDRECORD.Password = (PasswordRecord.HashPassword(VAR_STRING)); if (_objectProtectRecord == LITERAL_NULL && VAR_BOOL) { ObjectProtectRecord VAR_OBJECTPROTECTRECORD = CreateObjectProtect(); VAR_OBJECTPROTECTRECORD.Protect = (true); _objectProtectRecord = VAR_OBJECTPROTECTRECORD; } if (_scenarioProtectRecord == LITERAL_NULL && VAR_BOOL) { ScenarioProtectRecord VAR_SCENARIOPROTECTRECORD = CreateScenarioProtect(); VAR_SCENARIOPROTECTRECORD.Protect = (true); _scenarioProtectRecord = VAR_SCENARIOPROTECTRECORD; } }
public PackedDataOutput(DataOutput VAR_DATAOUTPUT) { this.VAR_DATAOUTPUT = VAR_DATAOUTPUT; current = LITERAL_INT; remainingBits = LITERAL_INT; }
public CFRuleRecord METHOD_NAME(int VAR_INT) { CheckRuleIndex(VAR_INT); return rules[VAR_INT]; }
public FieldCacheSource(string VAR_STRING) { this.m_field = VAR_STRING; }
public IndonesianStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { stemDerivational = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, true); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual bool METHOD_NAME(WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO) { int VAR_INT = StartOffset; int VAR_INT = EndOffset; int VAR_INT = VAR_WEIGHTEDPHRASEINFO.StartOffset; int VAR_INT = VAR_WEIGHTEDPHRASEINFO.EndOffset; if (VAR_INT <= VAR_INT && VAR_INT < VAR_INT) return true; if (VAR_INT < VAR_INT && VAR_INT <= VAR_INT) return true; if (VAR_INT <= VAR_INT && VAR_INT < VAR_INT) return true; if (VAR_INT < VAR_INT && VAR_INT <= VAR_INT) return true; return false; }
public MergeAlgorithm(DiffAlgorithm VAR_DIFFALGORITHM) { this.diffAlg = VAR_DIFFALGORITHM; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteInt(field_1_xAxisUpperLeft); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_2_yAxisUpperLeft); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_3_xSize); VAR_ILITTLEENDIANOUTPUT.WriteInt(field_4_ySize); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_5_type); VAR_ILITTLEENDIANOUTPUT.WriteByte(field_6_spacing); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_7_options); }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual java.nio.charset.CodingErrorAction METHOD_NAME() { return _unmappableCharacterAction; }
public virtual ISet<string> METHOD_NAME(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>, string VAR_STRING) { string VAR_STRING; if (VAR_IDICTIONARY<STRING, STRING>.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_IDICTIONARY<STRING, STRING>.Remove(VAR_STRING); ISet<string> VAR_ISET<STRING> = LITERAL_NULL; Match VAR_MATCH = ITEM_PATTERN.Match(VAR_STRING); if (VAR_MATCH.Success) { VAR_ISET<STRING> = new JCG.HashSet<string> { VAR_MATCH.Groups[LITERAL_INT].Value }; VAR_MATCH = VAR_MATCH.NextMatch(); while (VAR_MATCH.Success) { VAR_ISET<STRING>.Add(VAR_MATCH.Groups[LITERAL_INT].Value); VAR_MATCH = VAR_MATCH.NextMatch(); } } return VAR_ISET<STRING>; } return LITERAL_NULL; }
public override AbstractTreeIterator METHOD_NAME(ObjectReader VAR_OBJECTREADER) { if (currentSubtree == LITERAL_NULL) { throw new IncorrectObjectTypeException(EntryObjectId, Constants.TYPE_TREE); } return new NGit.Dircache.DirCacheIterator(this, currentSubtree); }
public virtual Explanation[] METHOD_NAME() { if (details == LITERAL_NULL) { return LITERAL_NULL; } return details.ToArray(); }
public override string METHOD_NAME() { string VAR_STRING = GetType().FullName; int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); VAR_STRING = Sharpen.Runtime.Substring(VAR_STRING, VAR_INT + LITERAL_INT, VAR_STRING.Length); return LITERAL_STRING + VAR_STRING + LITERAL_STRING + tokens.Get(this.VAR_INT) + LITERAL_STRING + text + LITERAL_STRING; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(Margin).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, LITERAL_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { object[] VAR_OBJECT[] = array; int VAR_INT = _size; if (VAR_OBJECT != LITERAL_NULL) { { for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_OBJECT.Equals(VAR_OBJECT[][i])) { System.Array.Copy(VAR_OBJECT[], i + LITERAL_INT, VAR_OBJECT[], i, --VAR_INT - i); VAR_OBJECT[][VAR_INT] = LITERAL_NULL; _size = VAR_INT; modCount++; return true; } } } } else { { for (int i = LITERAL_INT; i < VAR_INT; i++) { if (VAR_OBJECT[][i] == LITERAL_NULL) { System.Array.Copy(VAR_OBJECT[], i + LITERAL_INT, VAR_OBJECT[], i, --VAR_INT - i); VAR_OBJECT[][VAR_INT] = LITERAL_NULL; _size = VAR_INT; modCount++; return true; } } } } return false; }
public MergeCellsRecord(CellRangeAddress[] VAR_CELLRANGEADDRESS[], int VAR_INT, int VAR_INT) { _regions = VAR_CELLRANGEADDRESS[]; _startIndex = VAR_INT; _numberOfRegions = VAR_INT; }
public virtual ResizeClusterResponse METHOD_NAME(ResizeClusterRequest VAR_RESIZECLUSTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResizeClusterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResizeClusterResponseUnmarshaller.Instance; return Invoke<ResizeClusterResponse>(VAR_RESIZECLUSTERREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(int VAR_INT) { EnsureOpen(); if (VAR_INT >= nextID) { throw new System.IndexOutOfRangeException(LITERAL_STRING); } int[] VAR_INT[] = GetTaxoArrays().Parents; Debug.Assert(VAR_INT < VAR_INT[].Length, LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT[].Length + LITERAL_STRING); return VAR_INT[][VAR_INT]; }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual int METHOD_NAME(int VAR_INT) { int VAR_INT = n; int VAR_INT = array.Length; if (n + VAR_INT >= VAR_INT) { char[] VAR_CHAR[] = new char[VAR_INT + blockSize]; System.Array.Copy(array, LITERAL_INT, VAR_CHAR[], LITERAL_INT, VAR_INT); array = VAR_CHAR[]; } n += VAR_INT; return VAR_INT; }
public static string METHOD_NAME(string VAR_STRING) { string VAR_STRING; inflTypeTranslations.TryGetValue(VAR_STRING, out VAR_STRING); return VAR_STRING; }
public override Note METHOD_NAME() { CheckCallable(); RevWalk VAR_REVWALK = new RevWalk(repo); ObjectInserter VAR_OBJECTINSERTER = repo.NewObjectInserter(); NoteMap VAR_NOTEMAP = NoteMap.NewEmptyMap(); RevCommit VAR_REVCOMMIT = LITERAL_NULL; try { Ref VAR_REF = repo.GetRef(notesRef); if (VAR_REF != LITERAL_NULL) { VAR_REVCOMMIT = VAR_REVWALK.ParseCommit(VAR_REF.GetObjectId()); VAR_NOTEMAP = NoteMap.Read(VAR_REVWALK.GetObjectReader(), VAR_REVCOMMIT); } VAR_NOTEMAP.Set(id, LITERAL_NULL, VAR_OBJECTINSERTER); CommitNoteMap(VAR_REVWALK, VAR_NOTEMAP, VAR_REVCOMMIT, VAR_OBJECTINSERTER, LITERAL_STRING); return VAR_NOTEMAP.GetNote(id); } catch (IOException e) { throw new JGitInternalException(e.Message, e); } finally { VAR_OBJECTINSERTER.Release(); VAR_REVWALK.Release(); } }
public virtual string METHOD_NAME() { return newPath; }
public UserSViewBegin(byte[] VAR_BYTE[]) { _rawData = VAR_BYTE[]; }
public virtual CreateMountTargetResponse METHOD_NAME(CreateMountTargetRequest VAR_CREATEMOUNTTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMountTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMountTargetResponseUnmarshaller.Instance; return Invoke<CreateMountTargetResponse>(VAR_CREATEMOUNTTARGETREQUEST, VAR_VAR); }
public DeleteSubnetRequest(string VAR_STRING) { _subnetId = VAR_STRING; }
public void METHOD_NAME(String VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public char METHOD_NAME() { if (offset == end) { return java.text.CharacterIteratorClass.DONE; } return @string[offset]; }
public virtual void METHOD_NAME(long VAR_LONG) { if (count == entries.Length) { Grow(); } entries[count++] = VAR_LONG; }
public override java.nio.FloatBuffer METHOD_NAME(int VAR_INT, float VAR_FLOAT) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_FLOAT; return this; }
public ListGroupPoliciesRequest(string VAR_STRING) { _groupName = VAR_STRING; }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT <= LITERAL_INT) { SetDeltaCompress(false); } else { deltaSearchWindowSize = VAR_INT; } }
public override int METHOD_NAME() { if (idx >= size) { value = LITERAL_NULL; return doc = DocIdSetIterator.NO_MORE_DOCS; } doc = (int)docs.Get(idx); ++idx; while (idx < size && docs.Get(idx) == doc) { ++idx; } if (!docsWithField.Get((int)(idx - LITERAL_INT))) { value = LITERAL_NULL; } else { value = values.Get(idx - LITERAL_INT); } return doc; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { var VAR_VAR = VAR_BYTE[][VAR_INT++]; VAR_LONG[][VAR_INT++] = ((int)((uint)VAR_VAR >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = VAR_VAR & LITERAL_INT; } }
public int METHOD_NAME(String VAR_STRING) { int VAR_INT = -LITERAL_INT; for (int k = LITERAL_INT; k < names.Count; k++) { String VAR_STRING = GetNameName(k); if (VAR_STRING.Equals(VAR_STRING, StringComparison.OrdinalIgnoreCase)) { VAR_INT = k; break; } } return VAR_INT; }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT == currentCharIndex) { return; } if (VAR_INT > currentCharIndex) { Sync(VAR_INT - currentCharIndex); VAR_INT = Math.Min(VAR_INT, BufferStartIndex + n - LITERAL_INT); } int VAR_INT = VAR_INT - BufferStartIndex; if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT); } else { if (VAR_INT >= n) { throw new NotSupportedException(LITERAL_STRING + VAR_INT + LITERAL_STRING + BufferStartIndex + LITERAL_STRING + (BufferStartIndex + n)); } } p = VAR_INT; currentCharIndex = VAR_INT; if (p == LITERAL_INT) { lastChar = lastCharBufferStart; } else { lastChar = data[p - LITERAL_INT]; } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Array.Copy(data, pos, VAR_BYTE[], VAR_INT, VAR_INT); pos += VAR_INT; }
public virtual ListGraphsResponse METHOD_NAME(ListGraphsRequest VAR_LISTGRAPHSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListGraphsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListGraphsResponseUnmarshaller.Instance; return Invoke<ListGraphsResponse>(VAR_LISTGRAPHSREQUEST, VAR_VAR); }
public ATNDeserializer(ATNDeserializationOptions VAR_ATNDESERIALIZATIONOPTIONS) { if (VAR_ATNDESERIALIZATIONOPTIONS == LITERAL_NULL) { VAR_ATNDESERIALIZATIONOPTIONS = ATNDeserializationOptions.Default; } this.VAR_ATNDESERIALIZATIONOPTIONS = VAR_ATNDESERIALIZATIONOPTIONS; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int j = LITERAL_INT; j < VAR_INT; ++j) { VAR_INT[][VAR_INT++] = ((VAR_BYTE[][VAR_INT++] & LITERAL_INT) << LITERAL_INT) | (VAR_BYTE[][VAR_INT++] & LITERAL_INT); } }
public virtual NGit.Treewalk.CanonicalTreeParser METHOD_NAME() { return (NGit.Treewalk.CanonicalTreeParser)parent; }
public virtual DetectDominantLanguageResponse METHOD_NAME(DetectDominantLanguageRequest VAR_DETECTDOMINANTLANGUAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectDominantLanguageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectDominantLanguageResponseUnmarshaller.Instance; return Invoke<DetectDominantLanguageResponse>(VAR_DETECTDOMINANTLANGUAGEREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_PAGECOUNT); }
public E METHOD_NAME() { if (this.expectedModCount == this._enclosing.modCount) { try { E VAR_E = this._enclosing.get(this.pos); this.lastPosition = this.pos; this.pos--; return VAR_E; } catch (System.IndexOutOfRangeException) { throw new java.util.NoSuchElementException(); } } throw new java.util.ConcurrentModificationException(); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); for (int i = LITERAL_INT; i < subfilters.Length; i++) { if (i > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(subfilters[i].METHOD_NAME()); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override Object METHOD_NAME() { return new FooterRecord(this.Text); }
public virtual int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { return VAR_INT; } if (VAR_INT > LITERAL_INT && StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING)) { return VAR_INT - LITERAL_INT; } VAR_INT = RemoveArticle(VAR_CHAR[], VAR_INT); VAR_INT = RemovePlural(VAR_CHAR[], VAR_INT); if (VAR_INT > LITERAL_INT) { if (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING)) { VAR_INT--; } if (StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING) || StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING)) { VAR_INT--; } } if (VAR_INT > LITERAL_INT && StemmerUtil.EndsWith(VAR_CHAR[], VAR_INT, LITERAL_STRING)) { VAR_CHAR[][VAR_INT - LITERAL_INT] = LITERAL_CHAR; VAR_INT--; } if (VAR_INT > LITERAL_INT && VAR_CHAR[][VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_CHAR[][VAR_INT - LITERAL_INT] = VAR_CHAR[][VAR_INT - LITERAL_INT]; VAR_INT--; } return VAR_INT; }
public override java.lang.CharSequence METHOD_NAME(int VAR_INT, int VAR_INT) { lock (this) { return java.lang.CharSequenceProxy.Wrap(base.substring(VAR_INT, VAR_INT)); } }
public virtual DisableVpcClassicLinkDnsSupportResponse METHOD_NAME(DisableVpcClassicLinkDnsSupportRequest VAR_DISABLEVPCCLASSICLINKDNSSUPPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableVpcClassicLinkDnsSupportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableVpcClassicLinkDnsSupportResponseUnmarshaller.Instance; return Invoke<DisableVpcClassicLinkDnsSupportResponse>(VAR_DISABLEVPCCLASSICLINKDNSSUPPORTREQUEST, VAR_VAR); }
public static FormulaError METHOD_NAME(byte VAR_BYTE) { if (bmap.ContainsKey(VAR_BYTE)) return bmap[VAR_BYTE]; throw new ArgumentException(LITERAL_STRING + VAR_BYTE); }
public override void METHOD_NAME() { if (this.index == LITERAL_INT) { throw new InvalidOperationException(); } this._enclosing.METHOD_NAME(--this.index); this.dirIdx = BlockList<T>.ToDirectoryIndex(this.index); this.blkIdx = BlockList<T>.ToBlockIndex(this.index); this.block = this._enclosing.directory[this.dirIdx]; }
public String METHOD_NAME(CellValueRecordInterface VAR_CELLVALUERECORDINTERFACE) { double VAR_DOUBLE; if (VAR_CELLVALUERECORDINTERFACE is NumberRecord) { VAR_DOUBLE = ((NumberRecord)VAR_CELLVALUERECORDINTERFACE).Value; } else if (VAR_CELLVALUERECORDINTERFACE is FormulaRecord) { VAR_DOUBLE = ((FormulaRecord)VAR_CELLVALUERECORDINTERFACE).Value; } else { throw new ArgumentException(LITERAL_STRING + VAR_CELLVALUERECORDINTERFACE); } int VAR_INT = GetFormatIndex(VAR_CELLVALUERECORDINTERFACE); String VAR_STRING = GetFormatString(VAR_CELLVALUERECORDINTERFACE); if (VAR_STRING == LITERAL_NULL) { return VAR_DOUBLE.ToString(CultureInfo.InvariantCulture); } else { return formatter.FormatRawCellContents(VAR_DOUBLE, VAR_INT, VAR_STRING); } }
public java.lang.StringBuffer METHOD_NAME(object VAR_OBJECT) { lock (this) { if (VAR_OBJECT == LITERAL_NULL) { appendNull(); } else { append0(VAR_OBJECT.ToString()); } return this; } }
public virtual string METHOD_NAME() { return user; }
public virtual CreateGraphResponse METHOD_NAME(CreateGraphRequest VAR_CREATEGRAPHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateGraphRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateGraphResponseUnmarshaller.Instance; return Invoke<CreateGraphResponse>(VAR_CREATEGRAPHREQUEST, VAR_VAR); }
public static BytesRef METHOD_NAME(Int32sRef VAR_INT32SREF, BytesRef VAR_BYTESREF) { VAR_BYTESREF.Grow(VAR_INT32SREF.Length); for (int i = LITERAL_INT; i < VAR_INT32SREF.Length; i++) { int VAR_INT = VAR_INT32SREF.Int32s[i + VAR_INT32SREF.Offset]; Debug.Assert(VAR_INT >= sbyte.MinValue && VAR_INT <= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); VAR_BYTESREF.Bytes[i] = (byte)VAR_INT; } VAR_BYTESREF.Length = VAR_INT32SREF.Length; return VAR_BYTESREF; }
public sealed override java.nio.DoubleBuffer METHOD_NAME() { return java.nio.DoubleToByteBufferAdapter.METHOD_NAME(this); }
public static RevFilter METHOD_NAME(long VAR_LONG, long VAR_LONG) { return new CommitTimeRevFilterBetween(VAR_LONG, VAR_LONG); }
public override AreaEval METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { AreaI VAR_AREAI = new OffsetArea(Row, Column, VAR_INT, VAR_INT, VAR_INT, VAR_INT); return new LazyAreaEval(VAR_AREAI, _evaluator); }
public static void METHOD_NAME(String VAR_STRING, FreeRefFunction VAR_FREEREFFUNCTION) { AnalysisToolPak.METHOD_NAME(VAR_STRING, VAR_FREEREFFUNCTION); }
public virtual CreateAutoMLJobResponse METHOD_NAME(CreateAutoMLJobRequest VAR_CREATEAUTOMLJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAutoMLJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAutoMLJobResponseUnmarshaller.Instance; return Invoke<CreateAutoMLJobResponse>(VAR_CREATEAUTOMLJOBREQUEST, VAR_VAR); }
public virtual DefineIndexFieldResponse METHOD_NAME(DefineIndexFieldRequest VAR_DEFINEINDEXFIELDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DefineIndexFieldRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DefineIndexFieldResponseUnmarshaller.Instance; return Invoke<DefineIndexFieldResponse>(VAR_DEFINEINDEXFIELDREQUEST, VAR_VAR); }
public virtual ListDomainNamesResponse METHOD_NAME(ListDomainNamesRequest VAR_LISTDOMAINNAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDomainNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDomainNamesResponseUnmarshaller.Instance; return Invoke<ListDomainNamesResponse>(VAR_LISTDOMAINNAMESREQUEST, VAR_VAR); }
public override java.nio.CharBuffer METHOD_NAME(char VAR_CHAR) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putChar(_position++ * libcore.io.SizeOf.CHAR, VAR_CHAR); return this; }
public static NGit.Treewalk.Filter.PathFilter METHOD_NAME(string VAR_STRING) { while (VAR_STRING.EndsWith(LITERAL_STRING)) { VAR_STRING = Sharpen.Runtime.Substring(VAR_STRING, LITERAL_INT, VAR_STRING.Length - LITERAL_INT); } if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().emptyPathNotPermitted); } return new NGit.Treewalk.Filter.PathFilter(VAR_STRING); }
public sealed override string METHOD_NAME() { return Sharpen.StringHelper.CopyValueOf(backingArray, offset + _position, remaining()); }
public override char METHOD_NAME() { index = start; return Current; }
public void METHOD_NAME() { forwardPos = ArrayUtil.Grow(forwardPos, LITERAL_INT + forwardCount); forwardID = ArrayUtil.Grow(forwardID, LITERAL_INT + forwardCount); forwardIndex = ArrayUtil.Grow(forwardIndex, LITERAL_INT + forwardCount); JapaneseTokenizerType[] VAR_JAPANESETOKENIZERTYPE[] = new JapaneseTokenizerType[forwardPos.Length]; System.Array.Copy(forwardType, LITERAL_INT, VAR_JAPANESETOKENIZERTYPE[], LITERAL_INT, forwardType.Length); forwardType = VAR_JAPANESETOKENIZERTYPE[]; }
public virtual DescribeReplicationGroupsResponse METHOD_NAME(DescribeReplicationGroupsRequest VAR_DESCRIBEREPLICATIONGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeReplicationGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeReplicationGroupsResponseUnmarshaller.Instance; return Invoke<DescribeReplicationGroupsResponse>(VAR_DESCRIBEREPLICATIONGROUPSREQUEST, VAR_VAR); }
public int METHOD_NAME(T VAR_T) { if (!valueKeyMap.ContainsKey(VAR_T)) return -LITERAL_INT; return valueKeyMap[VAR_T]; }
public override String METHOD_NAME() { return LITERAL_STRING + pred + LITERAL_STRING + alt + LITERAL_STRING; }
public virtual DescribeRegionsResponse METHOD_NAME() { return METHOD_NAME(new DescribeRegionsRequest()); }
public virtual ModifyVpcEndpointConnectionNotificationResponse METHOD_NAME(ModifyVpcEndpointConnectionNotificationRequest VAR_MODIFYVPCENDPOINTCONNECTIONNOTIFICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpcEndpointConnectionNotificationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpcEndpointConnectionNotificationResponseUnmarshaller.Instance; return Invoke<ModifyVpcEndpointConnectionNotificationResponse>(VAR_MODIFYVPCENDPOINTCONNECTIONNOTIFICATIONREQUEST, VAR_VAR); }
public QueryPhraseMap(FieldQuery VAR_FIELDQUERY) { this.VAR_FIELDQUERY = VAR_FIELDQUERY; }
public virtual DescribeAssessmentTemplatesResponse METHOD_NAME(DescribeAssessmentTemplatesRequest VAR_DESCRIBEASSESSMENTTEMPLATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAssessmentTemplatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<DescribeAssessmentTemplatesResponse>(VAR_DESCRIBEASSESSMENTTEMPLATESREQUEST, VAR_VAR); }
public HunspellStemFilter(TokenStream VAR_TOKENSTREAM, Dictionary VAR_DICTIONARY, bool VAR_BOOL, bool VAR_BOOL) : base(input) { this.VAR_BOOL = VAR_BOOL && VAR_BOOL == false; this.stemmer = new Stemmer(VAR_DICTIONARY); this.VAR_BOOL = VAR_BOOL; termAtt = AddAttribute<ICharTermAttribute>(); posIncAtt = AddAttribute<IPositionIncrementAttribute>(); keywordAtt = AddAttribute<IKeywordAttribute>(); }
public NameCommentRecord METHOD_NAME(NameRecord VAR_NAMERECORD) { if (commentRecords.ContainsKey(VAR_NAMERECORD.NameText)) return commentRecords[VAR_NAMERECORD.NameText]; else return LITERAL_NULL; }
public ScanRequest(string VAR_STRING) { _tableName = VAR_STRING; }
public AliasTarget(string VAR_STRING, string VAR_STRING) { _hostedZoneId = VAR_STRING; _dnsName = VAR_STRING; }
public virtual ListOutgoingTypedLinksResponse METHOD_NAME(ListOutgoingTypedLinksRequest VAR_LISTOUTGOINGTYPEDLINKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOutgoingTypedLinksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOutgoingTypedLinksResponseUnmarshaller.Instance; return Invoke<ListOutgoingTypedLinksResponse>(VAR_LISTOUTGOINGTYPEDLINKSREQUEST, VAR_VAR); }
public virtual CreateHsmConfigurationResponse METHOD_NAME(CreateHsmConfigurationRequest VAR_CREATEHSMCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateHsmConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateHsmConfigurationResponseUnmarshaller.Instance; return Invoke<CreateHsmConfigurationResponse>(VAR_CREATEHSMCONFIGURATIONREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DisableDomainAutoRenewResponse METHOD_NAME(DisableDomainAutoRenewRequest VAR_DISABLEDOMAINAUTORENEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableDomainAutoRenewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableDomainAutoRenewResponseUnmarshaller.Instance; return Invoke<DisableDomainAutoRenewResponse>(VAR_DISABLEDOMAINAUTORENEWREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public virtual UpdateFindingsFeedbackResponse METHOD_NAME(UpdateFindingsFeedbackRequest VAR_UPDATEFINDINGSFEEDBACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFindingsFeedbackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFindingsFeedbackResponseUnmarshaller.Instance; return Invoke<UpdateFindingsFeedbackResponse>(VAR_UPDATEFINDINGSFEEDBACKREQUEST, VAR_VAR); }
public void METHOD_NAME(short VAR_SHORT, byte VAR_BYTE, byte VAR_BYTE, byte VAR_BYTE) { palette.SetColor(VAR_SHORT, VAR_BYTE, VAR_BYTE, VAR_BYTE); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(rt); VAR_ILITTLEENDIANOUTPUT.WriteShort(grbitFrt); VAR_ILITTLEENDIANOUTPUT.WriteByte(verOriginator); VAR_ILITTLEENDIANOUTPUT.WriteByte(verWriter); int VAR_INT = rgCFRTID.Length; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); for (int i = LITERAL_INT; i < VAR_INT; i++) { rgCFRTID[i].METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } }
public virtual RevokeInvitationResponse METHOD_NAME(RevokeInvitationRequest VAR_REVOKEINVITATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeInvitationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeInvitationResponseUnmarshaller.Instance; return Invoke<RevokeInvitationResponse>(VAR_REVOKEINVITATIONREQUEST, VAR_VAR); }
public virtual GetTextDetectionResponse METHOD_NAME(GetTextDetectionRequest VAR_GETTEXTDETECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTextDetectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTextDetectionResponseUnmarshaller.Instance; return Invoke<GetTextDetectionResponse>(VAR_GETTEXTDETECTIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT > value.Length) { int VAR_INT = value.Length * LITERAL_INT + LITERAL_INT; enlargeBuffer(System.Math.Max(VAR_INT, VAR_INT)); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual DisassociateAddressResponse METHOD_NAME(DisassociateAddressRequest VAR_DISASSOCIATEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateAddressResponseUnmarshaller.Instance; return Invoke<DisassociateAddressResponse>(VAR_DISASSOCIATEADDRESSREQUEST, VAR_VAR); }
public virtual NGit.Api.TagCommand METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; return this; }
public PageItemRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.Remaining; if (VAR_INT % FieldInfo.ENCODED_SIZE != LITERAL_INT) { throw new RecordFormatException(LITERAL_STRING + VAR_INT); } int VAR_INT = VAR_INT / FieldInfo.ENCODED_SIZE; FieldInfo[] VAR_FIELDINFO[] = new FieldInfo[VAR_INT]; for (int i = LITERAL_INT; i < VAR_FIELDINFO[].Length; i++) { VAR_FIELDINFO[][i] = new FieldInfo(VAR_RECORDINPUTSTREAM); } _fieldInfos = VAR_FIELDINFO[]; }
public XPathTokenElement(string VAR_STRING, int VAR_INT) : base(tokenName) { this.VAR_INT = VAR_INT; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return indexOf(VAR_OBJECT) != -LITERAL_INT; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_x); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_y); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_3_topRow); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_4_leftColumn); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_5_activePane); }
public StepExecutionStatusDetail(StepExecutionState VAR_STEPEXECUTIONSTATE, DateTime VAR_DATETIME) { _state = VAR_STEPEXECUTIONSTATE; _creationDateTime = VAR_DATETIME; }
public EditEventRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual PurchaseHostReservationResponse METHOD_NAME(PurchaseHostReservationRequest VAR_PURCHASEHOSTRESERVATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseHostReservationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseHostReservationResponseUnmarshaller.Instance; return Invoke<PurchaseHostReservationResponse>(VAR_PURCHASEHOSTRESERVATIONREQUEST, VAR_VAR); }
public virtual ConfirmPrivateVirtualInterfaceResponse METHOD_NAME(ConfirmPrivateVirtualInterfaceRequest VAR_CONFIRMPRIVATEVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfirmPrivateVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfirmPrivateVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<ConfirmPrivateVirtualInterfaceResponse>(VAR_CONFIRMPRIVATEVIRTUALINTERFACEREQUEST, VAR_VAR); }
public static int METHOD_NAME(long VAR_LONG) { long VAR_LONG = (int)VAR_LONG; if (numberToLength.Contains(VAR_LONG)) return -LITERAL_INT; long VAR_LONG = (long)numberToLength[VAR_LONG]; return Convert.ToInt32(VAR_LONG); }
public UnknownFormatFlagsException(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } flags = VAR_STRING; }
public bool METHOD_NAME() { return frozen; }
public PurchaseReservedDBInstancesOfferingRequest(string VAR_STRING) { _reservedDBInstancesOfferingId = VAR_STRING; }
public HeaderBlock(POIFSBigBlockSize VAR_POIFSBIGBLOCKSIZE) { this.VAR_POIFSBIGBLOCKSIZE = VAR_POIFSBIGBLOCKSIZE; _data = new byte[POIFSConstants.SMALLER_BIG_BLOCK_SIZE]; for (int i = LITERAL_INT; i < _data.Length; i++) _data[i] = _default_value; new LongField(_signature_offset, _signature, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new ShortField((int)LITERAL_INT, (short)LITERAL_INT, ref _data); new ShortField((int)LITERAL_INT, (short)LITERAL_INT, ref _data); new ShortField((int)LITERAL_INT, (short)-LITERAL_INT, ref _data); new ShortField(LITERAL_INT, VAR_POIFSBIGBLOCKSIZE.GetHeaderValue(), ref _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); new IntegerField(LITERAL_INT, LITERAL_INT, _data); _bat_count = LITERAL_INT; _sbat_count = LITERAL_INT; _xbat_count = LITERAL_INT; _property_start = POIFSConstants.END_OF_CHAIN; _sbat_start = POIFSConstants.END_OF_CHAIN; _xbat_start = POIFSConstants.END_OF_CHAIN; }
public virtual ListEventSubscriptionsResponse METHOD_NAME(ListEventSubscriptionsRequest VAR_LISTEVENTSUBSCRIPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEventSubscriptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEventSubscriptionsResponseUnmarshaller.Instance; return Invoke<ListEventSubscriptionsResponse>(VAR_LISTEVENTSUBSCRIPTIONSREQUEST, VAR_VAR); }
public virtual ListProxySessionsResponse METHOD_NAME(ListProxySessionsRequest VAR_LISTPROXYSESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProxySessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProxySessionsResponseUnmarshaller.Instance; return Invoke<ListProxySessionsResponse>(VAR_LISTPROXYSESSIONSREQUEST, VAR_VAR); }
public SimpleBoundaryScanner(int VAR_INT, ISet<char> VAR_ISET<CHAR>) { this.m_maxScan = VAR_INT; this.m_boundaryChars = VAR_ISET<CHAR>; }
public virtual ObjectId METHOD_NAME() { return GetLeaf().METHOD_NAME(); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { HSSFSimpleShape VAR_HSSFSIMPLESHAPE = escherGroup.CreateShape(new HSSFChildAnchor(VAR_INT, VAR_INT, VAR_INT, VAR_INT)); VAR_HSSFSIMPLESHAPE.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_LINE); VAR_HSSFSIMPLESHAPE.LineWidth = (VAR_INT); VAR_HSSFSIMPLESHAPE.SetLineStyleColor(foreground.R, foreground.G, foreground.B); }
public ReverseBytesReader(byte[] VAR_BYTE[]) { this.VAR_BYTE[] = VAR_BYTE[]; }
public virtual GetActiveNamesResponse METHOD_NAME(GetActiveNamesRequest VAR_GETACTIVENAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetActiveNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetActiveNamesResponseUnmarshaller.Instance; return Invoke<GetActiveNamesResponse>(VAR_GETACTIVENAMESREQUEST, VAR_VAR); }
public virtual MergeCommandResult METHOD_NAME() { return failingResult; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(FormatFlags)).Append(LITERAL_STRING).Append(FormatFlags).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsStacked).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsDisplayAsPercentage).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(IsShadow).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual BatchCreateVariableResponse METHOD_NAME(BatchCreateVariableRequest VAR_BATCHCREATEVARIABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchCreateVariableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchCreateVariableResponseUnmarshaller.Instance; return Invoke<BatchCreateVariableResponse>(VAR_BATCHCREATEVARIABLEREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return (flags & REUSE_AS_IS) != LITERAL_INT; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(PrintGridlines).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ApplySecurityGroupsToClientVpnTargetNetworkResponse METHOD_NAME(ApplySecurityGroupsToClientVpnTargetNetworkRequest VAR_APPLYSECURITYGROUPSTOCLIENTVPNTARGETNETWORKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ApplySecurityGroupsToClientVpnTargetNetworkRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ApplySecurityGroupsToClientVpnTargetNetworkResponseUnmarshaller.Instance; return Invoke<ApplySecurityGroupsToClientVpnTargetNetworkResponse>(VAR_APPLYSECURITYGROUPSTOCLIENTVPNTARGETNETWORKREQUEST, VAR_VAR); }
public virtual DetachInternetGatewayResponse METHOD_NAME(DetachInternetGatewayRequest VAR_DETACHINTERNETGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachInternetGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachInternetGatewayResponseUnmarshaller.Instance; return Invoke<DetachInternetGatewayResponse>(VAR_DETACHINTERNETGATEWAYREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME.GetTime()); }
public virtual DescribeCampaignResponse METHOD_NAME(DescribeCampaignRequest VAR_DESCRIBECAMPAIGNREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCampaignRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCampaignResponseUnmarshaller.Instance; return Invoke<DescribeCampaignResponse>(VAR_DESCRIBECAMPAIGNREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(FirstRow)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(LastRowAdd1)).Append(LITERAL_STRING); for (int k = LITERAL_INT; k < NumDbcells; k++) { VAR_STRINGBUILDER.Append(LITERAL_STRING + k + LITERAL_STRING).Append(StringUtil.ToHexString(GetDbcellAt(k))).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override Object METHOD_NAME() { return CloneViaReserialise(); }
public float METHOD_NAME() { return _averageCharsPerByte; }
public ListTimeLinePhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(FormatAsString()); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual RunTaskResponse METHOD_NAME(RunTaskRequest VAR_RUNTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RunTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RunTaskResponseUnmarshaller.Instance; return Invoke<RunTaskResponse>(VAR_RUNTASKREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(ICollector VAR_ICOLLECTOR) { this.VAR_ICOLLECTOR = VAR_ICOLLECTOR; }
public override string METHOD_NAME() { return Slice.METHOD_NAME() + LITERAL_STRING + DocsAndPositionsEnum; }
public virtual void METHOD_NAME(IFieldConfigListener VAR_IFIELDCONFIGLISTENER) { this.listeners.AddLast(VAR_IFIELDCONFIGLISTENER); }
public virtual RefUpdate.Result METHOD_NAME() { return result; }
public virtual ListNamedQueriesResponse METHOD_NAME(ListNamedQueriesRequest VAR_LISTNAMEDQUERIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListNamedQueriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListNamedQueriesResponseUnmarshaller.Instance; return Invoke<ListNamedQueriesResponse>(VAR_LISTNAMEDQUERIESREQUEST, VAR_VAR); }
public virtual NGit.Transport.URIish METHOD_NAME(int VAR_INT) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.port = VAR_INT > LITERAL_INT ? VAR_INT : -LITERAL_INT; return VAR_NGIT.TRANSPORT.URIISH; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(_flags); }
public virtual byte[] METHOD_NAME() { return buf; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual CopyDBParameterGroupResponse METHOD_NAME(CopyDBParameterGroupRequest VAR_COPYDBPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyDBParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyDBParameterGroupResponseUnmarshaller.Instance; return Invoke<CopyDBParameterGroupResponse>(VAR_COPYDBPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual PackedObjectInfo METHOD_NAME(int VAR_INT) { return entries[VAR_INT]; }
public CreateUserSourceAccountRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual DeleteApplicationVpcConfigurationResponse METHOD_NAME(DeleteApplicationVpcConfigurationRequest VAR_DELETEAPPLICATIONVPCCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationVpcConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationVpcConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteApplicationVpcConfigurationResponse>(VAR_DELETEAPPLICATIONVPCCONFIGURATIONREQUEST, VAR_VAR); }
public sealed override object METHOD_NAME() { return protectedArray(); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { throw new java.nio.ReadOnlyBufferException(); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_SUBJECT); }
public virtual BatchGetDeploymentGroupsResponse METHOD_NAME(BatchGetDeploymentGroupsRequest VAR_BATCHGETDEPLOYMENTGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetDeploymentGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetDeploymentGroupsResponseUnmarshaller.Instance; return Invoke<BatchGetDeploymentGroupsResponse>(VAR_BATCHGETDEPLOYMENTGROUPSREQUEST, VAR_VAR); }
public virtual DisassociateRepositoryResponse METHOD_NAME(DisassociateRepositoryRequest VAR_DISASSOCIATEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateRepositoryResponseUnmarshaller.Instance; return Invoke<DisassociateRepositoryResponse>(VAR_DISASSOCIATEREPOSITORYREQUEST, VAR_VAR); }
public virtual DescribeSpotPriceHistoryResponse METHOD_NAME() { return METHOD_NAME(new DescribeSpotPriceHistoryRequest()); }
public UpdateRepoSourceRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public bool METHOD_NAME() { if (string.IsNullOrEmpty(path)) { return false; } return getName().StartsWith(LITERAL_STRING); }
public PaneRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_x = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_y = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_topRow = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_leftColumn = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_activePane = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual StartGameSessionPlacementResponse METHOD_NAME(StartGameSessionPlacementRequest VAR_STARTGAMESESSIONPLACEMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartGameSessionPlacementRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartGameSessionPlacementResponseUnmarshaller.Instance; return Invoke<StartGameSessionPlacementResponse>(VAR_STARTGAMESESSIONPLACEMENTREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { DFA VAR_DFA = atnSimulator.decisionToDFA[VAR_INT]; return VAR_DFA.states.Count; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + LITERAL_INT; remainingData = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT, remainingData, LITERAL_INT, VAR_INT); return LITERAL_INT + VAR_INT; }
public virtual void METHOD_NAME(TextFragment VAR_TEXTFRAGMENT) { foundTerms = new JCG.HashSet<string>(); totalScore = LITERAL_INT; }
public override bool METHOD_NAME(ATNConfig VAR_ATNCONFIG) { if (this == VAR_ATNCONFIG) { return true; } else if (!(VAR_ATNCONFIG is LexerATNConfig)) { return false; } LexerATNConfig VAR_LEXERATNCONFIG = (LexerATNConfig)VAR_ATNCONFIG; if (passedThroughNonGreedyDecision != VAR_LEXERATNCONFIG.passedThroughNonGreedyDecision) { return false; } if (!(lexerActionExecutor == LITERAL_NULL ? VAR_LEXERATNCONFIG.lexerActionExecutor == LITERAL_NULL : lexerActionExecutor.METHOD_NAME(VAR_LEXERATNCONFIG.lexerActionExecutor))) { return false; } return base.METHOD_NAME(VAR_ATNCONFIG); }
public DescribeCacheParameterGroupsRequest(string VAR_STRING) { _cacheParameterGroupName = VAR_STRING; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString((int)FillPattern)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(FillForegroundColor)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(FillBackgroundColor)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is RepositoryCache.FileKey && path.METHOD_NAME(((RepositoryCache.FileKey)VAR_OBJECT).path); }
public virtual UntagAttendeeResponse METHOD_NAME(UntagAttendeeRequest VAR_UNTAGATTENDEEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagAttendeeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagAttendeeResponseUnmarshaller.Instance; return Invoke<UntagAttendeeResponse>(VAR_UNTAGATTENDEEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public MultiTerms(Terms[] VAR_TERMS[], ReaderSlice[] VAR_READERSLICE[]) { this.VAR_TERMS[] = VAR_TERMS[]; this.VAR_READERSLICE[] = VAR_READERSLICE[]; IComparer<BytesRef> VAR_ICOMPARER<BYTESREF> = LITERAL_NULL; Debug.Assert(VAR_TERMS[].Length > LITERAL_INT, LITERAL_STRING); bool VAR_BOOL = true; bool VAR_BOOL = true; bool VAR_BOOL = true; bool VAR_BOOL = false; for (int i = LITERAL_INT; i < VAR_TERMS[].Length; i++) { if (VAR_ICOMPARER<BYTESREF> == LITERAL_NULL) { VAR_ICOMPARER<BYTESREF> = VAR_TERMS[][i].Comparer; } else { IComparer<BytesRef> VAR_ICOMPARER<BYTESREF> = VAR_TERMS[][i].Comparer; if (VAR_ICOMPARER<BYTESREF> != LITERAL_NULL && !VAR_ICOMPARER<BYTESREF>.Equals(VAR_ICOMPARER<BYTESREF>)) { throw new InvalidOperationException(LITERAL_STRING); } } VAR_BOOL &= VAR_TERMS[][i].HasFreqs; VAR_BOOL &= VAR_TERMS[][i].HasOffsets; VAR_BOOL &= VAR_TERMS[][i].HasPositions; VAR_BOOL |= VAR_TERMS[][i].HasPayloads; } termComp = VAR_ICOMPARER<BYTESREF>; hasFreqs = VAR_BOOL; hasOffsets = VAR_BOOL; hasPositions = VAR_BOOL; hasPayloads = hasPositions && VAR_BOOL; }
public virtual DescribeGameSessionPlacementResponse METHOD_NAME(DescribeGameSessionPlacementRequest VAR_DESCRIBEGAMESESSIONPLACEMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeGameSessionPlacementRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeGameSessionPlacementResponseUnmarshaller.Instance; return Invoke<DescribeGameSessionPlacementResponse>(VAR_DESCRIBEGAMESESSIONPLACEMENTREQUEST, VAR_VAR); }
public SynonymMap(FST<BytesRef> VAR_FST<BYTESREF>, BytesRefHash VAR_BYTESREFHASH, int VAR_INT) { this.VAR_FST<BYTESREF> = VAR_FST<BYTESREF>; this.VAR_BYTESREFHASH = VAR_BYTESREFHASH; this.VAR_INT = VAR_INT; }
public virtual DeleteTrialComponentResponse METHOD_NAME(DeleteTrialComponentRequest VAR_DELETETRIALCOMPONENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrialComponentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrialComponentResponseUnmarshaller.Instance; return Invoke<DeleteTrialComponentResponse>(VAR_DELETETRIALCOMPONENTREQUEST, VAR_VAR); }
public RevisionSyntaxException(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public virtual void METHOD_NAME() { StartWorkers(LITERAL_INT); }
public virtual SubscribeToEventResponse METHOD_NAME(SubscribeToEventRequest VAR_SUBSCRIBETOEVENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SubscribeToEventRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SubscribeToEventResponseUnmarshaller.Instance; return Invoke<SubscribeToEventResponse>(VAR_SUBSCRIBETOEVENTREQUEST, VAR_VAR); }
public virtual PutScheduledUpdateGroupActionResponse METHOD_NAME(PutScheduledUpdateGroupActionRequest VAR_PUTSCHEDULEDUPDATEGROUPACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutScheduledUpdateGroupActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutScheduledUpdateGroupActionResponseUnmarshaller.Instance; return Invoke<PutScheduledUpdateGroupActionResponse>(VAR_PUTSCHEDULEDUPDATEGROUPACTIONREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (maxNumSegments == -LITERAL_INT) { throw new InvalidOperationException(LITERAL_STRING); } IndexWriter VAR_INDEXWRITER = RunData.IndexWriter; VAR_INDEXWRITER.ForceMerge(maxNumSegments); return LITERAL_INT; }
public String METHOD_NAME(int VAR_INT) { return _uBook.METHOD_NAME(VAR_INT); }
public virtual DescribeConnectionLoaResponse METHOD_NAME(DescribeConnectionLoaRequest VAR_DESCRIBECONNECTIONLOAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeConnectionLoaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeConnectionLoaResponseUnmarshaller.Instance; return Invoke<DescribeConnectionLoaResponse>(VAR_DESCRIBECONNECTIONLOAREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + StringUtil.ToHexString(Sid) + LITERAL_STRING + RecordSize + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + field_1_row + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + field_2_col + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + field_3_flags + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + field_4_shapeid + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + field_6_author + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public PipedInputStream(java.io.PipedOutputStream VAR_JAVA.IO.PIPEDOUTPUTSTREAM, int VAR_INT) : this(pipeSize) { throw new System.NotImplementedException(); }
public override string METHOD_NAME() { return GetDescription(); }
public Credential METHOD_NAME() { if (LITERAL_NULL == _credential && LITERAL_NULL != iCredentialProvider) { _credential = iCredentialProvider.Fresh(); } return _credential; }
public virtual CopyOptionGroupResponse METHOD_NAME(CopyOptionGroupRequest VAR_COPYOPTIONGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyOptionGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyOptionGroupResponseUnmarshaller.Instance; return Invoke<CopyOptionGroupResponse>(VAR_COPYOPTIONGROUPREQUEST, VAR_VAR); }
public InfoSubRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_stream_pos = VAR_RECORDINPUTSTREAM.ReadInt(); field_2_bucket_sst_offset = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_zero = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override TreeFilter METHOD_NAME() { TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_TREEFILTER[].Length; i++) { VAR_TREEFILTER[][i] = subfilters[i].METHOD_NAME(); } return new OrTreeFilter.List(VAR_TREEFILTER[]); }
public virtual SendAlexaOfferToMasterResponse METHOD_NAME(SendAlexaOfferToMasterRequest VAR_SENDALEXAOFFERTOMASTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendAlexaOfferToMasterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendAlexaOfferToMasterResponseUnmarshaller.Instance; return Invoke<SendAlexaOfferToMasterResponse>(VAR_SENDALEXAOFFERTOMASTERREQUEST, VAR_VAR); }
public virtual DescribeEndpointConfigResponse METHOD_NAME(DescribeEndpointConfigRequest VAR_DESCRIBEENDPOINTCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEndpointConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEndpointConfigResponseUnmarshaller.Instance; return Invoke<DescribeEndpointConfigResponse>(VAR_DESCRIBEENDPOINTCONFIGREQUEST, VAR_VAR); }
public virtual NGit.Api.PushCommand METHOD_NAME(ProgressMonitor VAR_PROGRESSMONITOR) { CheckCallable(); this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; return this; }
public override java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); if (byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).METHOD_NAME(VAR_FLOAT[], VAR_INT, VAR_INT); } else { ((java.nio.HeapByteBuffer)byteBuffer).METHOD_NAME(VAR_FLOAT[], VAR_INT, VAR_INT); } this._position += VAR_INT; return this; }
public override bool METHOD_NAME() { foreach (TreeFilter f in subfilters) { if (f.METHOD_NAME()) { return true; } } return false; }
public static void METHOD_NAME(String VAR_STRING, ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { byte[] VAR_BYTE[] = UTF16LE.GetBytes(VAR_STRING); VAR_ILITTLEENDIANOUTPUT.Write(VAR_BYTE[]); }
public virtual AcceptReservedNodeExchangeResponse METHOD_NAME(AcceptReservedNodeExchangeRequest VAR_ACCEPTRESERVEDNODEEXCHANGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AcceptReservedNodeExchangeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AcceptReservedNodeExchangeResponseUnmarshaller.Instance; return Invoke<AcceptReservedNodeExchangeResponse>(VAR_ACCEPTRESERVEDNODEEXCHANGEREQUEST, VAR_VAR); }
public virtual AuthorizeClusterSecurityGroupIngressResponse METHOD_NAME(AuthorizeClusterSecurityGroupIngressRequest VAR_AUTHORIZECLUSTERSECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeClusterSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeClusterSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeClusterSecurityGroupIngressResponse>(VAR_AUTHORIZECLUSTERSECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public virtual ListVaultsResponse METHOD_NAME(ListVaultsRequest VAR_LISTVAULTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListVaultsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListVaultsResponseUnmarshaller.Instance; return Invoke<ListVaultsResponse>(VAR_LISTVAULTSREQUEST, VAR_VAR); }
public void METHOD_NAME(UDFFinder VAR_UDFFINDER) { _usedToolPacks.METHOD_NAME(VAR_UDFFINDER); }
public virtual CreateRealtimeEndpointResponse METHOD_NAME(CreateRealtimeEndpointRequest VAR_CREATEREALTIMEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRealtimeEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRealtimeEndpointResponseUnmarshaller.Instance; return Invoke<CreateRealtimeEndpointResponse>(VAR_CREATEREALTIMEENDPOINTREQUEST, VAR_VAR); }
public void METHOD_NAME(IEvaluationListener VAR_IEVALUATIONLISTENER) { if (VAR_IEVALUATIONLISTENER == LITERAL_NULL) { METHOD_NAME(); } else { VAR_IEVALUATIONLISTENER.OnClearCachedValue(this); METHOD_NAME(VAR_IEVALUATIONLISTENER, LITERAL_INT); } }
public PageBreakRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); _breaks = new List<Break>(VAR_INT + LITERAL_INT); _breakMap = new Hashtable(); for (int k = LITERAL_INT; k < VAR_INT; k++) { Break VAR_BREAK = new Break(VAR_RECORDINPUTSTREAM); _breaks.Add(VAR_BREAK); _breakMap[VAR_BREAK.main] = VAR_BREAK; } }
public override string METHOD_NAME() { return Image; }
public void METHOD_NAME(double[] VAR_DOUBLE[]) { int VAR_INT = VAR_DOUBLE[].Length; EnsureCapacity(_Count + VAR_INT); Array.Copy(VAR_DOUBLE[], LITERAL_INT, _array, _Count, VAR_INT); _Count += VAR_INT; }
public FileInputStream(string VAR_STRING) : this(new java.io.File(path)) { throw new System.NotImplementedException(); }
public virtual SetDataRetrievalPolicyResponse METHOD_NAME(SetDataRetrievalPolicyRequest VAR_SETDATARETRIEVALPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetDataRetrievalPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetDataRetrievalPolicyResponseUnmarshaller.Instance; return Invoke<SetDataRetrievalPolicyResponse>(VAR_SETDATARETRIEVALPOLICYREQUEST, VAR_VAR); }
public ScoreDoc(int VAR_INT, float VAR_FLOAT, int VAR_INT) { this.Doc = VAR_INT; this.Score = VAR_FLOAT; this.ShardIndex = VAR_INT; }
public SpanNotQuery(SpanQuery VAR_SPANQUERY, SpanQuery VAR_SPANQUERY, int VAR_INT, int VAR_INT) { this.VAR_SPANQUERY = VAR_SPANQUERY; this.VAR_SPANQUERY = VAR_SPANQUERY; this.VAR_INT = (VAR_INT >= LITERAL_INT) ? VAR_INT : LITERAL_INT; this.VAR_INT = (VAR_INT >= LITERAL_INT) ? VAR_INT : LITERAL_INT; if (VAR_SPANQUERY.Field != LITERAL_NULL && VAR_SPANQUERY.Field != LITERAL_NULL && !VAR_SPANQUERY.Field.Equals(VAR_SPANQUERY.Field, StringComparison.Ordinal)) { throw new System.ArgumentException(LITERAL_STRING); } }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { if (_validationList.Count == LITERAL_INT) { return; } VAR_RECORDVISITOR.VisitRecord(_headerRec); for (int i = LITERAL_INT; i < _validationList.Count; i++) { VAR_RECORDVISITOR.VisitRecord((Record)_validationList[i]); } }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { _mergedRegions.Add(new CellRangeAddress(VAR_INT, VAR_INT, VAR_INT, VAR_INT)); }
public HungarianLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public int METHOD_NAME() { return _lei.ReadUShort(); }
public virtual DescribeAdjustmentTypesResponse METHOD_NAME(DescribeAdjustmentTypesRequest VAR_DESCRIBEADJUSTMENTTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAdjustmentTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAdjustmentTypesResponseUnmarshaller.Instance; return Invoke<DescribeAdjustmentTypesResponse>(VAR_DESCRIBEADJUSTMENTTYPESREQUEST, VAR_VAR); }
public virtual DefineSuggesterResponse METHOD_NAME(DefineSuggesterRequest VAR_DEFINESUGGESTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DefineSuggesterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DefineSuggesterResponseUnmarshaller.Instance; return Invoke<DefineSuggesterResponse>(VAR_DEFINESUGGESTERREQUEST, VAR_VAR); }
public virtual GetJourneyDateRangeKpiResponse METHOD_NAME(GetJourneyDateRangeKpiRequest VAR_GETJOURNEYDATERANGEKPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetJourneyDateRangeKpiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetJourneyDateRangeKpiResponseUnmarshaller.Instance; return Invoke<GetJourneyDateRangeKpiResponse>(VAR_GETJOURNEYDATERANGEKPIREQUEST, VAR_VAR); }
public virtual NGit.Api.PushCommand METHOD_NAME(string VAR_STRING) { if (LITERAL_INT <= VAR_STRING.IndexOf(LITERAL_CHAR)) { refSpecs.AddItem(new RefSpec(VAR_STRING)); } else { Ref VAR_REF; try { VAR_REF = repo.GetRef(VAR_STRING); } catch (IOException e) { throw new JGitInternalException(JGitText.Get().exceptionCaughtDuringExecutionOfPushCommand, e); } if (VAR_REF != LITERAL_NULL) { METHOD_NAME(VAR_REF); } } return this; }
public virtual DescribeDataSourceResponse METHOD_NAME(DescribeDataSourceRequest VAR_DESCRIBEDATASOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDataSourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDataSourceResponseUnmarshaller.Instance; return Invoke<DescribeDataSourceResponse>(VAR_DESCRIBEDATASOURCEREQUEST, VAR_VAR); }
public AutoCRLFInputStream(InputStream VAR_INPUTSTREAM, bool VAR_BOOL) { this.VAR_INPUTSTREAM = VAR_INPUTSTREAM; this.VAR_BOOL = VAR_BOOL; }
public byte[] METHOD_NAME() { return _rawData; }
public override java.nio.LongBuffer METHOD_NAME(java.nio.LongBuffer VAR_JAVA.NIO.LONGBUFFER) { throw new java.nio.ReadOnlyBufferException(); }
public virtual E METHOD_NAME(int VAR_INT, E VAR_E) { lock (mutex) { return list.METHOD_NAME(VAR_INT, VAR_E); } }
public override void METHOD_NAME() { base.METHOD_NAME(); if (mProgressDrawable != LITERAL_NULL) { mProgressDrawable.jumpToCurrentState(); } if (mIndeterminateDrawable != LITERAL_NULL) { mIndeterminateDrawable.jumpToCurrentState(); } }
public override bool METHOD_NAME(object VAR_OBJECT) { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink.next; if (VAR_OBJECT != LITERAL_NULL) { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { if (VAR_OBJECT.Equals(VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data)) { return true; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } else { while (VAR_JAVA.UTIL.LINKEDLIST.LINK<E> != voidLink) { if ((object)VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data == LITERAL_NULL) { return true; } VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } return false; }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_DOUBLE[], LITERAL_INT, VAR_INT); }
public virtual IndexSearcher METHOD_NAME(long VAR_LONG) { EnsureOpen(); Lazy<SearcherTracker> VAR_LAZY<SEARCHERTRACKER>; if (_searchers.TryGetValue(VAR_LONG, out VAR_LAZY<SEARCHERTRACKER>) && VAR_LAZY<SEARCHERTRACKER>.IsValueCreated && VAR_LAZY<SEARCHERTRACKER>.Value.Searcher.IndexReader.TryIncRef()) { return VAR_LAZY<SEARCHERTRACKER>.Value.Searcher; } return LITERAL_NULL; }
public void METHOD_NAME(double VAR_DOUBLE) { this.dateToBeFormatted = VAR_DOUBLE; }
public virtual CreateIntegrationResponseResponse METHOD_NAME(CreateIntegrationResponseRequest VAR_CREATEINTEGRATIONRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIntegrationResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIntegrationResponseResponseUnmarshaller.Instance; return Invoke<CreateIntegrationResponseResponse>(VAR_CREATEINTEGRATIONRESPONSEREQUEST, VAR_VAR); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public virtual void METHOD_NAME() { lock (this) { pendingDeleteCount = LITERAL_INT; DropMergingUpdates(); } }
public static int METHOD_NAME() { return LITERAL_INT; }
public DeleteDBParameterGroupRequest(string VAR_STRING) { _dbParameterGroupName = VAR_STRING; }
public virtual GetDedicatedIpsResponse METHOD_NAME(GetDedicatedIpsRequest VAR_GETDEDICATEDIPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDedicatedIpsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDedicatedIpsResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpsResponse>(VAR_GETDEDICATEDIPSREQUEST, VAR_VAR); }
public virtual DeleteArchiveResponse METHOD_NAME(DeleteArchiveRequest VAR_DELETEARCHIVEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteArchiveRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteArchiveResponseUnmarshaller.Instance; return Invoke<DeleteArchiveResponse>(VAR_DELETEARCHIVEREQUEST, VAR_VAR); }
public ResourceRecordSet(string VAR_STRING, RRType VAR_RRTYPE) { _name = VAR_STRING; _type = VAR_RRTYPE; }
public ArabicNormalizationFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ReceiveMessageResponse METHOD_NAME(ReceiveMessageRequest VAR_RECEIVEMESSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReceiveMessageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReceiveMessageResponseUnmarshaller.Instance; return Invoke<ReceiveMessageResponse>(VAR_RECEIVEMESSAGEREQUEST, VAR_VAR); }
public virtual string METHOD_NAME(string VAR_STRING) { Row VAR_ROW = GetRow(root); int VAR_INT; Cell VAR_CELL; int VAR_INT = -LITERAL_INT; StrEnum VAR_STRENUM = new StrEnum(VAR_STRING, forward); char VAR_CHAR; char VAR_CHAR; for (int i = LITERAL_INT; i < VAR_STRING.Length;) { VAR_CHAR = VAR_STRENUM.Next(); i++; VAR_CELL = VAR_ROW.At(VAR_CHAR); if (VAR_CELL == LITERAL_NULL) { return LITERAL_NULL; } VAR_INT = VAR_CELL.VAR_INT; for (int skip = VAR_CELL.skip; skip > LITERAL_INT; skip--) { if (i < VAR_STRING.Length) { VAR_CHAR = VAR_STRENUM.Next(); } else { return LITERAL_NULL; } i++; } VAR_INT = VAR_ROW.GetRef(VAR_CHAR); if (VAR_INT >= LITERAL_INT) { VAR_ROW = GetRow(VAR_INT); } else if (i < VAR_STRING.Length) { return LITERAL_NULL; } } return (VAR_INT == -LITERAL_INT) ? LITERAL_NULL : cmds[VAR_INT]; }
public virtual Span[] METHOD_NAME(string[] VAR_STRING[]) { Span[] VAR_SPAN[] = nameFinder.find(VAR_STRING[]); return VAR_SPAN[]; }
public override void METHOD_NAME() { used = false; }
public AnalyticsPrefixPredicate(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public override int METHOD_NAME() { return delegate1.METHOD_NAME(); }
public virtual CreateImportJobResponse METHOD_NAME(CreateImportJobRequest VAR_CREATEIMPORTJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateImportJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateImportJobResponseUnmarshaller.Instance; return Invoke<CreateImportJobResponse>(VAR_CREATEIMPORTJOBREQUEST, VAR_VAR); }
public virtual byte[] METHOD_NAME() { ByteArrayOutputStream VAR_BYTEARRAYOUTPUTSTREAM = new ByteArrayOutputStream(); OutputStreamWriter VAR_OUTPUTSTREAMWRITER = new OutputStreamWriter(VAR_BYTEARRAYOUTPUTSTREAM, Constants.CHARSET); try { VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); GetObjectId().CopyTo(VAR_OUTPUTSTREAMWRITER); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_CHAR); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); VAR_OUTPUTSTREAMWRITER.Write(Constants.TypeString(GetObjectType())); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); VAR_OUTPUTSTREAMWRITER.Write(GetTag()); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); if (GetTagger() != LITERAL_NULL) { VAR_OUTPUTSTREAMWRITER.Write(LITERAL_STRING); VAR_OUTPUTSTREAMWRITER.Write(GetTagger().ToExternalString()); VAR_OUTPUTSTREAMWRITER.Write(LITERAL_CHAR); } VAR_OUTPUTSTREAMWRITER.Write(LITERAL_CHAR); if (GetMessage() != LITERAL_NULL) { VAR_OUTPUTSTREAMWRITER.Write(GetMessage()); } VAR_OUTPUTSTREAMWRITER.Close(); } catch (IOException err) { throw new RuntimeException(err); } return VAR_BYTEARRAYOUTPUTSTREAM.ToByteArray(); }
public bool METHOD_NAME(ATNConfig VAR_ATNCONFIG, ATNConfig VAR_ATNCONFIG) { if (VAR_ATNCONFIG == VAR_ATNCONFIG) return true; if (VAR_ATNCONFIG == LITERAL_NULL || VAR_ATNCONFIG == LITERAL_NULL) return false; return VAR_ATNCONFIG.state.stateNumber == VAR_ATNCONFIG.state.stateNumber && VAR_ATNCONFIG.alt == VAR_ATNCONFIG.alt && VAR_ATNCONFIG.semanticContext.METHOD_NAME(VAR_ATNCONFIG.semanticContext); }
public virtual CreateMemberResponse METHOD_NAME(CreateMemberRequest VAR_CREATEMEMBERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMemberRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMemberResponseUnmarshaller.Instance; return Invoke<CreateMemberResponse>(VAR_CREATEMEMBERREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_PARCOUNT); }
public virtual DeleteDeliveryStreamResponse METHOD_NAME(DeleteDeliveryStreamRequest VAR_DELETEDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeliveryStreamResponseUnmarshaller.Instance; return Invoke<DeleteDeliveryStreamResponse>(VAR_DELETEDELIVERYSTREAMREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(JGitText.Get().maxCountMustBeNonNegative); } return new NGit.Revwalk.Filter.MaxCountRevFilter(VAR_INT); }
public virtual PeerVpcResponse METHOD_NAME(PeerVpcRequest VAR_PEERVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PeerVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PeerVpcResponseUnmarshaller.Instance; return Invoke<PeerVpcResponse>(VAR_PEERVPCREQUEST, VAR_VAR); }
public virtual GetResolverRuleResponse METHOD_NAME(GetResolverRuleRequest VAR_GETRESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetResolverRuleResponseUnmarshaller.Instance; return Invoke<GetResolverRuleResponse>(VAR_GETRESOLVERRULEREQUEST, VAR_VAR); }
public virtual DeleteScalingPolicyResponse METHOD_NAME(DeleteScalingPolicyRequest VAR_DELETESCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteScalingPolicyResponseUnmarshaller.Instance; return Invoke<DeleteScalingPolicyResponse>(VAR_DELETESCALINGPOLICYREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new SwedishLightStemFilter(VAR_TOKENSTREAM); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(RowNumber); VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstCol == -LITERAL_INT ? (short)LITERAL_INT : FirstCol); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastCol == -LITERAL_INT ? (short)LITERAL_INT : LastCol); VAR_ILITTLEENDIANOUTPUT.WriteShort(Height); VAR_ILITTLEENDIANOUTPUT.WriteShort(Optimize); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_reserved); VAR_ILITTLEENDIANOUTPUT.WriteShort(OptionFlags); VAR_ILITTLEENDIANOUTPUT.WriteShort(OptionFlags2); }
public virtual GetCredentialsForIdentityResponse METHOD_NAME(GetCredentialsForIdentityRequest VAR_GETCREDENTIALSFORIDENTITYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCredentialsForIdentityRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCredentialsForIdentityResponseUnmarshaller.Instance; return Invoke<GetCredentialsForIdentityResponse>(VAR_GETCREDENTIALSFORIDENTITYREQUEST, VAR_VAR); }
public virtual DeleteFileSystemResponse METHOD_NAME(DeleteFileSystemRequest VAR_DELETEFILESYSTEMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFileSystemRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFileSystemResponseUnmarshaller.Instance; return Invoke<DeleteFileSystemResponse>(VAR_DELETEFILESYSTEMREQUEST, VAR_VAR); }
public virtual DeleteGameServerGroupResponse METHOD_NAME(DeleteGameServerGroupRequest VAR_DELETEGAMESERVERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGameServerGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGameServerGroupResponseUnmarshaller.Instance; return Invoke<DeleteGameServerGroupResponse>(VAR_DELETEGAMESERVERGROUPREQUEST, VAR_VAR); }
public AutoCRLFOutputStream(OutputStream VAR_OUTPUTSTREAM) { this.VAR_OUTPUTSTREAM = VAR_OUTPUTSTREAM; }
public virtual DescribeLocationsResponse METHOD_NAME(DescribeLocationsRequest VAR_DESCRIBELOCATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocationsResponseUnmarshaller.Instance; return Invoke<DescribeLocationsResponse>(VAR_DESCRIBELOCATIONSREQUEST, VAR_VAR); }
public virtual CopyWorkspaceImageResponse METHOD_NAME(CopyWorkspaceImageRequest VAR_COPYWORKSPACEIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyWorkspaceImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyWorkspaceImageResponseUnmarshaller.Instance; return Invoke<CopyWorkspaceImageResponse>(VAR_COPYWORKSPACEIMAGEREQUEST, VAR_VAR); }
public virtual UpdateAliasResponse METHOD_NAME(UpdateAliasRequest VAR_UPDATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAliasResponseUnmarshaller.Instance; return Invoke<UpdateAliasResponse>(VAR_UPDATEALIASREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, char VAR_CHAR) { int VAR_INT = VAR_BYTE[].Length; while (VAR_INT < VAR_INT) { byte VAR_BYTE = VAR_BYTE[][VAR_INT++]; if (VAR_BYTE == VAR_CHAR || VAR_BYTE == LITERAL_CHAR) { return VAR_INT; } } return VAR_INT; }
public static long METHOD_NAME(ChecksumIndexInput VAR_CHECKSUMINDEXINPUT) { ValidateFooter(VAR_CHECKSUMINDEXINPUT); long VAR_LONG = VAR_CHECKSUMINDEXINPUT.Checksum; long VAR_LONG = VAR_CHECKSUMINDEXINPUT.ReadInt64(); if (VAR_LONG != VAR_LONG) { throw new System.IO.IOException(LITERAL_STRING + VAR_LONG.ToString(LITERAL_STRING) + LITERAL_STRING + VAR_LONG.ToString(LITERAL_STRING) + LITERAL_STRING + VAR_CHECKSUMINDEXINPUT + LITERAL_STRING); } if (VAR_CHECKSUMINDEXINPUT.GetFilePointer() != VAR_CHECKSUMINDEXINPUT.Length) { throw new System.IO.IOException(LITERAL_STRING + VAR_CHECKSUMINDEXINPUT.GetFilePointer() + LITERAL_STRING + VAR_CHECKSUMINDEXINPUT.Length + LITERAL_STRING + VAR_CHECKSUMINDEXINPUT + LITERAL_STRING); } return VAR_LONG; }
public virtual GetLoadBalancersResponse METHOD_NAME(GetLoadBalancersRequest VAR_GETLOADBALANCERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetLoadBalancersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetLoadBalancersResponseUnmarshaller.Instance; return Invoke<GetLoadBalancersResponse>(VAR_GETLOADBALANCERSREQUEST, VAR_VAR); }
public GetRepoListByNamespaceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual bool METHOD_NAME(IQueryNodeProcessor VAR_IQUERYNODEPROCESSOR) { this.processors.METHOD_NAME(VAR_IQUERYNODEPROCESSOR); bool VAR_BOOL = processors.Contains(VAR_IQUERYNODEPROCESSOR); if (VAR_BOOL) { VAR_IQUERYNODEPROCESSOR.SetQueryConfigHandler(this.queryConfig); } return VAR_BOOL; }
public virtual PutEventStreamResponse METHOD_NAME(PutEventStreamRequest VAR_PUTEVENTSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEventStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEventStreamResponseUnmarshaller.Instance; return Invoke<PutEventStreamResponse>(VAR_PUTEVENTSTREAMREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return renameLimit; }
public override char METHOD_NAME() { if (++index >= limit) { index = limit; return Done; } else { return Current; } }
public virtual ObjectId METHOD_NAME() { return deltaBase; }
public FieldType(FieldType VAR_FIELDTYPE) { this.indexed = VAR_FIELDTYPE.IsIndexed; this.stored = VAR_FIELDTYPE.IsStored; this.tokenized = VAR_FIELDTYPE.IsTokenized; this.storeTermVectors = VAR_FIELDTYPE.StoreTermVectors; this.storeTermVectorOffsets = VAR_FIELDTYPE.StoreTermVectorOffsets; this.storeTermVectorPositions = VAR_FIELDTYPE.StoreTermVectorPositions; this.storeTermVectorPayloads = VAR_FIELDTYPE.StoreTermVectorPayloads; this.omitNorms = VAR_FIELDTYPE.OmitNorms; this.indexOptions = VAR_FIELDTYPE.IndexOptions; this.docValueType = VAR_FIELDTYPE.DocValueType; this.numericType = VAR_FIELDTYPE.NumericType; }
public virtual RestoreWorkspaceResponse METHOD_NAME(RestoreWorkspaceRequest VAR_RESTOREWORKSPACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RestoreWorkspaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RestoreWorkspaceResponseUnmarshaller.Instance; return Invoke<RestoreWorkspaceResponse>(VAR_RESTOREWORKSPACEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Codepage)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public GetRepoTagsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public override Object METHOD_NAME() { return new ProtectRecord(_options); }
public virtual ModifyDBParameterGroupResponse METHOD_NAME(ModifyDBParameterGroupRequest VAR_MODIFYDBPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBParameterGroupResponseUnmarshaller.Instance; return Invoke<ModifyDBParameterGroupResponse>(VAR_MODIFYDBPARAMETERGROUPREQUEST, VAR_VAR); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public virtual ICollection<string> METHOD_NAME() { return GetState().METHOD_NAME(); }
public virtual UpdateProxySessionResponse METHOD_NAME(UpdateProxySessionRequest VAR_UPDATEPROXYSESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateProxySessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateProxySessionResponseUnmarshaller.Instance; return Invoke<UpdateProxySessionResponse>(VAR_UPDATEPROXYSESSIONREQUEST, VAR_VAR); }
public virtual double METHOD_NAME() { return maxGoodPoints == LITERAL_INT ? LITERAL_INT : pReleventSum / maxGoodPoints; }
public virtual ListCompatibleImagesResponse METHOD_NAME(ListCompatibleImagesRequest VAR_LISTCOMPATIBLEIMAGESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCompatibleImagesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCompatibleImagesResponseUnmarshaller.Instance; return Invoke<ListCompatibleImagesResponse>(VAR_LISTCOMPATIBLEIMAGESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { Region VAR_REGION = currentSource.regionList; return VAR_REGION.sourceStart + VAR_REGION.length; }
public override int METHOD_NAME() { char[] VAR_CHAR[] = new char[LITERAL_INT]; if (METHOD_NAME(VAR_CHAR[], LITERAL_INT, LITERAL_INT, false) != -LITERAL_INT) { return VAR_CHAR[][LITERAL_INT]; } return -LITERAL_INT; }
public virtual GetMediaForFragmentListResponse METHOD_NAME(GetMediaForFragmentListRequest VAR_GETMEDIAFORFRAGMENTLISTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMediaForFragmentListRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMediaForFragmentListResponseUnmarshaller.Instance; return Invoke<GetMediaForFragmentListResponse>(VAR_GETMEDIAFORFRAGMENTLISTREQUEST, VAR_VAR); }
public override WAH8DocIdSet METHOD_NAME() { if (this.wordNum != -LITERAL_INT) { AddWord(wordNum, (byte)word); } return base.METHOD_NAME(); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual ModifyScheduledActionResponse METHOD_NAME(ModifyScheduledActionRequest VAR_MODIFYSCHEDULEDACTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyScheduledActionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyScheduledActionResponseUnmarshaller.Instance; return Invoke<ModifyScheduledActionResponse>(VAR_MODIFYSCHEDULEDACTIONREQUEST, VAR_VAR); }
public CreateEventRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DeleteDirectoryResponse METHOD_NAME(DeleteDirectoryRequest VAR_DELETEDIRECTORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDirectoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDirectoryResponseUnmarshaller.Instance; return Invoke<DeleteDirectoryResponse>(VAR_DELETEDIRECTORYREQUEST, VAR_VAR); }
public static RevFilter METHOD_NAME(RevFilter VAR_REVFILTER, RevFilter VAR_REVFILTER) { if (VAR_REVFILTER == ALL) { return VAR_REVFILTER; } if (VAR_REVFILTER == ALL) { return VAR_REVFILTER; } return new AndRevFilter.Binary(VAR_REVFILTER, VAR_REVFILTER); }
public PasswordRecord(int VAR_INT) { field_1_password = VAR_INT; }
public CzechStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public CloseIgnoringInputStream(Stream VAR_STREAM) { _is = VAR_STREAM; }
public virtual ModifyClusterSnapshotResponse METHOD_NAME(ModifyClusterSnapshotRequest VAR_MODIFYCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyClusterSnapshotResponseUnmarshaller.Instance; return Invoke<ModifyClusterSnapshotResponse>(VAR_MODIFYCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(Parser VAR_PARSER) { return errorRecoveryMode; }
public FacetLabel(string VAR_STRING, string[] VAR_STRING[]) { Components = new string[LITERAL_INT + VAR_STRING[].Length]; Components[LITERAL_INT] = VAR_STRING; Array.Copy(VAR_STRING[], LITERAL_INT, Components, LITERAL_INT, VAR_STRING[].Length); Length = Components.Length; CheckComponents(); }
public virtual UntagStreamResponse METHOD_NAME(UntagStreamRequest VAR_UNTAGSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagStreamResponseUnmarshaller.Instance; return Invoke<UntagStreamResponse>(VAR_UNTAGSTREAMREQUEST, VAR_VAR); }
public override long METHOD_NAME(long VAR_LONG) { return count += VAR_LONG; }
public override int METHOD_NAME() { lock (@lock) { if (!isOpen()) { throw new System.IO.IOException(LITERAL_STRING); } char[] VAR_CHAR[] = new char[LITERAL_INT]; return METHOD_NAME(VAR_CHAR[], LITERAL_INT, LITERAL_INT) != -LITERAL_INT ? VAR_CHAR[][LITERAL_INT] : -LITERAL_INT; } }
public static int METHOD_NAME(int VAR_INT) { return VAR_INT * ENCODED_SIZE; }
public PrintStream(java.io.File VAR_JAVA.IO.FILE, string VAR_STRING) : base(new java.io.FileOutputStream(file)) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } if (!java.nio.charset.Charset.isSupported(VAR_STRING)) { throw new java.io.UnsupportedEncodingException(VAR_STRING); } encoding = VAR_STRING; }
public virtual E METHOD_NAME() { return _size == LITERAL_INT ? default(E) : removeFirst(); }
public override void METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { lock (@lock) { checkNotClosed(); if (VAR_CHAR[] == LITERAL_NULL) { throw new System.ArgumentNullException(LITERAL_STRING); } java.util.Arrays.checkOffsetAndCount(VAR_CHAR[].Length, VAR_INT, VAR_INT); if (pos == LITERAL_INT && VAR_INT >= this.buf.Length) { @out.METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); return; } int VAR_INT = this.buf.Length - pos; if (VAR_INT < VAR_INT) { VAR_INT = VAR_INT; } if (VAR_INT > LITERAL_INT) { System.Array.Copy(VAR_CHAR[], VAR_INT, this.buf, pos, VAR_INT); pos += VAR_INT; } if (pos == this.buf.Length) { @out.METHOD_NAME(this.buf, LITERAL_INT, this.buf.Length); pos = LITERAL_INT; if (VAR_INT > VAR_INT) { VAR_INT += VAR_INT; VAR_INT = VAR_INT - VAR_INT; if (VAR_INT >= this.buf.Length) { @out.METHOD_NAME(VAR_CHAR[], VAR_INT, VAR_INT); return; } System.Array.Copy(VAR_CHAR[], VAR_INT, this.buf, pos, VAR_INT); pos += VAR_INT; } } } }
public virtual string METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual CreateRoomMembershipResponse METHOD_NAME(CreateRoomMembershipRequest VAR_CREATEROOMMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRoomMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRoomMembershipResponseUnmarshaller.Instance; return Invoke<CreateRoomMembershipResponse>(VAR_CREATEROOMMEMBERSHIPREQUEST, VAR_VAR); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (KeyValuePair<string, FieldsProducer> entry in formats) { VAR_LONG += entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR; VAR_LONG += entry.Value.METHOD_NAME(); } return VAR_LONG; }
public int METHOD_NAME() { int VAR_INT = LITERAL_INT; DFA[] VAR_DFA[] = atnSimulator.decisionToDFA; for (int i = LITERAL_INT; i < VAR_DFA[].Length; i++) { VAR_INT += METHOD_NAME(i); } return VAR_INT; }
public static ICharStream METHOD_NAME(string VAR_STRING) { return new CodePointCharStream(VAR_STRING); }
public DeleteUserSourceAccountRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public static Proxy METHOD_NAME(ProxySelector VAR_PROXYSELECTOR, Uri VAR_URI) { try { return VAR_PROXYSELECTOR.Select(VAR_URI.ToURI())[LITERAL_INT]; } catch (URISyntaxException e) { ConnectException VAR_CONNECTEXCEPTION; VAR_CONNECTEXCEPTION = new ConnectException(MessageFormat.Format(JGitText.Get().cannotDetermineProxyFor, VAR_URI)); Sharpen.Extensions.InitCause(VAR_CONNECTEXCEPTION, e); throw VAR_CONNECTEXCEPTION; } }
public override string METHOD_NAME() { string VAR_STRING = LITERAL_NULL; switch (this.type) { case TYPE_UNDERFLOW: { VAR_STRING = LITERAL_STRING; break; } case TYPE_OVERFLOW: { VAR_STRING = LITERAL_STRING; break; } case TYPE_UNMAPPABLE_CHAR: { VAR_STRING = LITERAL_STRING + this._length; break; } case TYPE_MALFORMED_INPUT: { VAR_STRING = LITERAL_STRING + this._length; break; } default: { VAR_STRING = string.Empty; break; } } return GetType().FullName + LITERAL_STRING + VAR_STRING + LITERAL_STRING; }
public virtual PredictResponse METHOD_NAME(PredictRequest VAR_PREDICTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PredictRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PredictResponseUnmarshaller.Instance; return Invoke<PredictResponse>(VAR_PREDICTREQUEST, VAR_VAR); }
public Ptg METHOD_NAME(AreaReference VAR_AREAREFERENCE, SheetIdentifier VAR_SHEETIDENTIFIER) { int VAR_INT = GetSheetExtIx(VAR_SHEETIDENTIFIER); return new Area3DPtg(VAR_AREAREFERENCE, VAR_INT); }
public virtual DescribeMatchmakingResponse METHOD_NAME(DescribeMatchmakingRequest VAR_DESCRIBEMATCHMAKINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMatchmakingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMatchmakingResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingResponse>(VAR_DESCRIBEMATCHMAKINGREQUEST, VAR_VAR); }
public virtual DeleteDeviceUsageDataResponse METHOD_NAME(DeleteDeviceUsageDataRequest VAR_DELETEDEVICEUSAGEDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeviceUsageDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeviceUsageDataResponseUnmarshaller.Instance; return Invoke<DeleteDeviceUsageDataResponse>(VAR_DELETEDEVICEUSAGEDATAREQUEST, VAR_VAR); }
public void METHOD_NAME() { RecordBase VAR_RECORDBASE = LITERAL_NULL; for (IEnumerator<RecordBase> it = _sheet.Sheet.Records.GetEnumerator(); it.MoveNext();) { RecordBase VAR_RECORDBASE = it.Current; if (VAR_RECORDBASE is HyperlinkRecord) { HyperlinkRecord VAR_HYPERLINKRECORD = (HyperlinkRecord)VAR_RECORDBASE; if (VAR_HYPERLINKRECORD.FirstColumn == _record.Column && VAR_HYPERLINKRECORD.FirstRow == _record.Row) { VAR_RECORDBASE = VAR_RECORDBASE; break; } } } if (VAR_RECORDBASE != LITERAL_NULL) _sheet.Sheet.Records.Remove(VAR_RECORDBASE); }
public RegisterInstancesWithLoadBalancerRequest(string VAR_STRING, List<Instance> VAR_LIST<INSTANCE>) { _loadBalancerName = VAR_STRING; _instances = VAR_LIST<INSTANCE>; }
public virtual AssociateResolverRuleResponse METHOD_NAME(AssociateResolverRuleRequest VAR_ASSOCIATERESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateResolverRuleResponseUnmarshaller.Instance; return Invoke<AssociateResolverRuleResponse>(VAR_ASSOCIATERESOLVERRULEREQUEST, VAR_VAR); }
public override java.util.Set<java.util.MapClass.Entry<K, V>> METHOD_NAME() { throw new System.NotSupportedException(); }
public override TreeFilter METHOD_NAME() { return a; }
public virtual SearchProfilesResponse METHOD_NAME(SearchProfilesRequest VAR_SEARCHPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchProfilesResponseUnmarshaller.Instance; return Invoke<SearchProfilesResponse>(VAR_SEARCHPROFILESREQUEST, VAR_VAR); }
public virtual ModifyDBSubnetGroupResponse METHOD_NAME(ModifyDBSubnetGroupRequest VAR_MODIFYDBSUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyDBSubnetGroupResponse>(VAR_MODIFYDBSUBNETGROUPREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(string VAR_STRING) { string[] VAR_STRING[] = VAR_STRING.Split(LITERAL_CHAR).TrimEnd(); long VAR_LONG = long.Parse(VAR_STRING[][LITERAL_INT], NumberStyles.HexNumber); long VAR_LONG = long.Parse(VAR_STRING[][LITERAL_INT], NumberStyles.HexNumber); long VAR_LONG = indexCommit.Generation; long VAR_LONG = taxonomyCommit.Generation; if (VAR_LONG < VAR_LONG) return -LITERAL_INT; if (VAR_LONG > VAR_LONG) return LITERAL_INT; return VAR_LONG < VAR_LONG ? -LITERAL_INT : (VAR_LONG > VAR_LONG ? LITERAL_INT : LITERAL_INT); }
public LiteralValueSource(string VAR_STRING) { this.m_str = VAR_STRING; this.m_bytesRef = new BytesRef(VAR_STRING); }
public int METHOD_NAME(int VAR_INT) { return Operator.UnsignedRightShift(this.GetRawValue(VAR_INT), this._shift_count); }
public HSSFShapeGroup(HSSFShape VAR_HSSFSHAPE, HSSFAnchor VAR_HSSFANCHOR) : base(parent, anchor) { _spgrRecord = (EscherSpgrRecord)((EscherContainerRecord)GetEscherContainer().GetChild(LITERAL_INT)).GetChildById(EscherSpgrRecord.RECORD_ID); }
public override string METHOD_NAME() { return LITERAL_STRING + Name + LITERAL_STRING + data.Name + LITERAL_STRING; }
public virtual DeleteFpgaImageResponse METHOD_NAME(DeleteFpgaImageRequest VAR_DELETEFPGAIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFpgaImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFpgaImageResponseUnmarshaller.Instance; return Invoke<DeleteFpgaImageResponse>(VAR_DELETEFPGAIMAGEREQUEST, VAR_VAR); }
public virtual CreateAppCookieStickinessPolicyResponse METHOD_NAME(CreateAppCookieStickinessPolicyRequest VAR_CREATEAPPCOOKIESTICKINESSPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAppCookieStickinessPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAppCookieStickinessPolicyResponseUnmarshaller.Instance; return Invoke<CreateAppCookieStickinessPolicyResponse>(VAR_CREATEAPPCOOKIESTICKINESSPOLICYREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(this.Count).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override sealed void METHOD_NAME(int VAR_INT, int VAR_INT) { CheckRange(VAR_INT, VAR_INT); Quicksort(VAR_INT, VAR_INT, CeilLog2(VAR_INT - VAR_INT)); }
public virtual DescribeMonitoringScheduleResponse METHOD_NAME(DescribeMonitoringScheduleRequest VAR_DESCRIBEMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<DescribeMonitoringScheduleResponse>(VAR_DESCRIBEMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public HeaderLineParser(string[] VAR_STRING[]) : base(header) { posToF = new FieldName[VAR_STRING[].Length]; for (int i = LITERAL_INT; i < VAR_STRING[].Length; i++) { String VAR_STRING = VAR_STRING[][i]; if (DocMaker.NAME_FIELD.Equals(VAR_STRING, StringComparison.Ordinal)) { posToF[i] = FieldName.NAME; } else if (DocMaker.TITLE_FIELD.Equals(VAR_STRING, StringComparison.Ordinal)) { posToF[i] = FieldName.TITLE; } else if (DocMaker.DATE_FIELD.Equals(VAR_STRING, StringComparison.Ordinal)) { posToF[i] = FieldName.DATE; } else if (DocMaker.BODY_FIELD.Equals(VAR_STRING, StringComparison.Ordinal)) { posToF[i] = FieldName.BODY; } else { posToF[i] = FieldName.PROP; } } }
public void METHOD_NAME() { if (useHash) { map.Clear(); useHash = false; } count = LITERAL_INT; }
public StandardTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); maxTokenLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | VAR_LONG; } }
public virtual bool METHOD_NAME(RuleContext VAR_RULECONTEXT, int VAR_INT) { return true; }
public int METHOD_NAME() { return fSD; }
public static FunctionMetadata METHOD_NAME(int VAR_INT) { return GetInstance().GetFunctionByIndexInternal(VAR_INT); }
public override object METHOD_NAME() { return Exists ? Value.Utf8ToString() : LITERAL_NULL; }
public virtual GetDisksResponse METHOD_NAME(GetDisksRequest VAR_GETDISKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDisksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDisksResponseUnmarshaller.Instance; return Invoke<GetDisksResponse>(VAR_GETDISKSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return this.GetType().Name + LITERAL_STRING + compressionMode + LITERAL_STRING + chunkSize + LITERAL_STRING; }
public virtual DescribeVolumesModificationsResponse METHOD_NAME(DescribeVolumesModificationsRequest VAR_DESCRIBEVOLUMESMODIFICATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVolumesModificationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVolumesModificationsResponseUnmarshaller.Instance; return Invoke<DescribeVolumesModificationsResponse>(VAR_DESCRIBEVOLUMESMODIFICATIONSREQUEST, VAR_VAR); }
public override float METHOD_NAME(int VAR_INT, string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT, float VAR_FLOAT, float VAR_FLOAT) { return VAR_FLOAT + VAR_FLOAT; }
public StartRepoBuildRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public Instance(string VAR_STRING) { _instanceId = VAR_STRING; }
public virtual int METHOD_NAME() { int VAR_INT = LITERAL_INT; for (int i = Math.Max(LITERAL_INT, pathLen - LITERAL_INT); i < pathLen; i++) { byte VAR_BYTE = path[i]; if (VAR_BYTE != LITERAL_CHAR) { VAR_INT = ((int)(((uint)VAR_INT) >> LITERAL_INT)) + (VAR_BYTE << LITERAL_INT); } } return VAR_INT; }
public virtual NGit.Api.CreateBranchCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public static dalvik.system.CloseGuard.Reporter METHOD_NAME() { return REPORTER; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT, char[] VAR_CHAR[], int VAR_INT) { if (VAR_INT > count || VAR_INT > count || VAR_INT > VAR_INT) { throw startEndAndLength(VAR_INT, VAR_INT); } System.Array.Copy(value, VAR_INT, VAR_CHAR[], VAR_INT, VAR_INT - VAR_INT); }
public override java.nio.LongBuffer METHOD_NAME(long[] VAR_LONG[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferOverflowException(); } System.Array.Copy(VAR_LONG[], VAR_INT, backingArray, offset + _position, VAR_INT); _position += VAR_INT; return this; }
public virtual long METHOD_NAME() { return src.Length; }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public virtual GetCampaignVersionsResponse METHOD_NAME(GetCampaignVersionsRequest VAR_GETCAMPAIGNVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetCampaignVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetCampaignVersionsResponseUnmarshaller.Instance; return Invoke<GetCampaignVersionsResponse>(VAR_GETCAMPAIGNVERSIONSREQUEST, VAR_VAR); }
public long METHOD_NAME() { DecisionInfo[] VAR_DECISIONINFO[] = atnSimulator.getDecisionInfo(); long VAR_LONG = LITERAL_INT; for (int i = LITERAL_INT; i < VAR_DECISIONINFO[].Length; i++) { VAR_LONG += VAR_DECISIONINFO[][i].SLL_TotalLook; } return VAR_LONG; }
public static IRow METHOD_NAME(int VAR_INT, ISheet VAR_ISHEET) { IRow VAR_IROW = VAR_ISHEET.METHOD_NAME(VAR_INT); if (VAR_IROW == LITERAL_NULL) { VAR_IROW = VAR_ISHEET.CreateRow(VAR_INT); } return VAR_IROW; }
public virtual void METHOD_NAME() { doc = LITERAL_NULL; analyzer = LITERAL_NULL; }
public KeyPairCredentials(string VAR_STRING, string VAR_STRING) { if (string.IsNullOrEmpty(VAR_STRING) || string.IsNullOrEmpty(VAR_STRING)) { throw new ArgumentNullException(LITERAL_STRING); } this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; }
public override PredictionContext METHOD_NAME(int VAR_INT) { return parents[VAR_INT]; }
public java.lang.StringBuffer METHOD_NAME(string VAR_STRING) { lock (this) { append0(VAR_STRING); return this; } }
public void METHOD_NAME(byte VAR_BYTE, int VAR_INT) { NameRecord VAR_NAMERECORD = GetSpecificBuiltinRecord(VAR_BYTE, VAR_INT); if (VAR_NAMERECORD != LITERAL_NULL) { _definedNames.Remove(VAR_NAMERECORD); } }
public SharedFormulaGroup(SharedFormulaRecord VAR_SHAREDFORMULARECORD, CellReference VAR_CELLREFERENCE) { if (!VAR_SHAREDFORMULARECORD.IsInRange(VAR_CELLREFERENCE.Row, VAR_CELLREFERENCE.Col)) { throw new ArgumentException(LITERAL_STRING + VAR_CELLREFERENCE.FormatAsString() + LITERAL_STRING + VAR_SHAREDFORMULARECORD.Range.ToString() + LITERAL_STRING); } _sfr = VAR_SHAREDFORMULARECORD; _firstCell = VAR_CELLREFERENCE; int VAR_INT = VAR_SHAREDFORMULARECORD.LastColumn - VAR_SHAREDFORMULARECORD.FirstColumn + LITERAL_INT; int VAR_INT = VAR_SHAREDFORMULARECORD.LastRow - VAR_SHAREDFORMULARECORD.FirstRow + LITERAL_INT; _frAggs = new FormulaRecordAggregate[VAR_INT * VAR_INT]; _numberOfFormulas = LITERAL_INT; }
public void METHOD_NAME(short VAR_SHORT, short VAR_SHORT) { short VAR_SHORT = (short)LITERAL_INT; for (int idx = LITERAL_INT; idx < m_formats.Count; idx++) { CTFormat VAR_CTFORMAT = (CTFormat)m_formats[idx]; if (VAR_SHORT != LITERAL_INT) { VAR_CTFORMAT.Offset = ((short)(VAR_CTFORMAT.Offset + VAR_SHORT)); } else if ((VAR_SHORT == VAR_CTFORMAT.Offset) && (idx < (m_formats.Count - LITERAL_INT))) { CTFormat VAR_CTFORMAT = (CTFormat)m_formats[idx + LITERAL_INT]; VAR_SHORT = (short)(VAR_SHORT - (VAR_CTFORMAT.Offset - VAR_CTFORMAT.Offset)); } } }
public virtual AddInstanceGroupsResponse METHOD_NAME(AddInstanceGroupsRequest VAR_ADDINSTANCEGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddInstanceGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddInstanceGroupsResponseUnmarshaller.Instance; return Invoke<AddInstanceGroupsResponse>(VAR_ADDINSTANCEGROUPSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { if (ChildCount == LITERAL_INT) { return string.Empty; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < ChildCount; i++) { VAR_STRINGBUILDER.Append(GetChild(i).METHOD_NAME()); } return VAR_STRINGBUILDER.ToString(); }
public virtual ListCodeRepositoriesResponse METHOD_NAME(ListCodeRepositoriesRequest VAR_LISTCODEREPOSITORIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCodeRepositoriesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCodeRepositoriesResponseUnmarshaller.Instance; return Invoke<ListCodeRepositoriesResponse>(VAR_LISTCODEREPOSITORIESREQUEST, VAR_VAR); }
public LexerATNConfig(ATNState VAR_ATNSTATE, int VAR_INT, PredictionContext VAR_PREDICTIONCONTEXT) : base(state, alt, context) { this.passedThroughNonGreedyDecision = false; this.lexerActionExecutor = LITERAL_NULL; }
public int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { throw new RecordFormatException(LITERAL_STRING); }
public virtual GetSmsChannelResponse METHOD_NAME(GetSmsChannelRequest VAR_GETSMSCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSmsChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSmsChannelResponseUnmarshaller.Instance; return Invoke<GetSmsChannelResponse>(VAR_GETSMSCHANNELREQUEST, VAR_VAR); }
public Placement(string VAR_STRING) { _availabilityZone = VAR_STRING; }
public virtual ListStacksResponse METHOD_NAME(ListStacksRequest VAR_LISTSTACKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStacksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStacksResponseUnmarshaller.Instance; return Invoke<ListStacksResponse>(VAR_LISTSTACKSREQUEST, VAR_VAR); }
public virtual ListFieldLevelEncryptionConfigsResponse METHOD_NAME(ListFieldLevelEncryptionConfigsRequest VAR_LISTFIELDLEVELENCRYPTIONCONFIGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFieldLevelEncryptionConfigsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFieldLevelEncryptionConfigsResponseUnmarshaller.Instance; return Invoke<ListFieldLevelEncryptionConfigsResponse>(VAR_LISTFIELDLEVELENCRYPTIONCONFIGSREQUEST, VAR_VAR); }
public virtual CloseInstancePublicPortsResponse METHOD_NAME(CloseInstancePublicPortsRequest VAR_CLOSEINSTANCEPUBLICPORTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CloseInstancePublicPortsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CloseInstancePublicPortsResponseUnmarshaller.Instance; return Invoke<CloseInstancePublicPortsResponse>(VAR_CLOSEINSTANCEPUBLICPORTSREQUEST, VAR_VAR); }
public virtual DeleteTransitGatewayRouteTableResponse METHOD_NAME(DeleteTransitGatewayRouteTableRequest VAR_DELETETRANSITGATEWAYROUTETABLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayRouteTableRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayRouteTableResponse>(VAR_DELETETRANSITGATEWAYROUTETABLEREQUEST, VAR_VAR); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new StempelFilter(VAR_TOKENSTREAM, new StempelStemmer(PolishAnalyzer.DefaultTable)); }
public static double[] METHOD_NAME(double[] VAR_DOUBLE[]) { return METHOD_NAME(VAR_DOUBLE[], LITERAL_INT + VAR_DOUBLE[].Length); }
public DocFreqSorter(int VAR_INT) : base(maxDoc / LITERAL_INT) { this.tmpDocs = new int[VAR_INT / LITERAL_INT]; }
public virtual void METHOD_NAME(int VAR_INT, int VAR_INT) { METHOD_NAME(Interval.Of(VAR_INT, VAR_INT)); }
public void METHOD_NAME(HSSFCellStyle VAR_HSSFCELLSTYLE) { _format.METHOD_NAME(VAR_HSSFCELLSTYLE._format); if (_workbook != VAR_HSSFCELLSTYLE._workbook) { lastDateFormat = short.MinValue; lastFormats = LITERAL_NULL; getDataFormatStringCache = LITERAL_NULL; short VAR_SHORT = (short)_workbook.CreateFormat(VAR_HSSFCELLSTYLE.GetDataFormatString()); this.DataFormat = (VAR_SHORT); FontRecord VAR_FONTRECORD = _workbook.CreateNewFont(); VAR_FONTRECORD.METHOD_NAME(VAR_HSSFCELLSTYLE._workbook.GetFontRecordAt(VAR_HSSFCELLSTYLE.FontIndex)); HSSFFont VAR_HSSFFONT = new HSSFFont((short)_workbook.GetFontIndex(VAR_FONTRECORD), VAR_FONTRECORD); this.SetFont(VAR_HSSFFONT); } }
public virtual DeleteIdentitiesResponse METHOD_NAME(DeleteIdentitiesRequest VAR_DELETEIDENTITIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteIdentitiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteIdentitiesResponseUnmarshaller.Instance; return Invoke<DeleteIdentitiesResponse>(VAR_DELETEIDENTITIESREQUEST, VAR_VAR); }
public void METHOD_NAME() { int VAR_INT = ((buffer[limit] & LITERAL_INT) << LITERAL_INT) + ((buffer[LITERAL_INT + limit] & LITERAL_INT) << LITERAL_INT) + ((buffer[LITERAL_INT + limit] & LITERAL_INT) << LITERAL_INT) + (buffer[LITERAL_INT + limit] & LITERAL_INT); level = ByteBlockPool.NEXT_LEVEL_ARRAY[level]; int VAR_INT = ByteBlockPool.LEVEL_SIZE_ARRAY[level]; bufferUpto = VAR_INT / ByteBlockPool.BYTE_BLOCK_SIZE; BufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE; buffer = pool.Buffers[bufferUpto]; upto = VAR_INT & ByteBlockPool.BYTE_BLOCK_MASK; if (VAR_INT + VAR_INT >= EndIndex) { Debug.Assert(EndIndex - VAR_INT > LITERAL_INT); limit = EndIndex - BufferOffset; } else { limit = upto + VAR_INT - LITERAL_INT; } }
public DeleteMessageBatchRequest(string VAR_STRING, List<DeleteMessageBatchRequestEntry> VAR_LIST<DELETEMESSAGEBATCHREQUESTENTRY>) { _queueUrl = VAR_STRING; _entries = VAR_LIST<DELETEMESSAGEBATCHREQUESTENTRY>; }
public virtual PurchaseReservedCacheNodesOfferingResponse METHOD_NAME(PurchaseReservedCacheNodesOfferingRequest VAR_PURCHASERESERVEDCACHENODESOFFERINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseReservedCacheNodesOfferingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseReservedCacheNodesOfferingResponseUnmarshaller.Instance; return Invoke<PurchaseReservedCacheNodesOfferingResponse>(VAR_PURCHASERESERVEDCACHENODESOFFERINGREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { int VAR_INT = RawParseUtils.NextLF(buf, offset); return RawParseUtils.Decode(Constants.CHARSET, buf, offset, VAR_INT); }
public virtual DescribeNotificationConfigurationsResponse METHOD_NAME(DescribeNotificationConfigurationsRequest VAR_DESCRIBENOTIFICATIONCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNotificationConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNotificationConfigurationsResponseUnmarshaller.Instance; return Invoke<DescribeNotificationConfigurationsResponse>(VAR_DESCRIBENOTIFICATIONCONFIGURATIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.util.MapClass.Entry<K, V>)) { return false; } java.util.MapClass.Entry<object, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT> = (java.util.MapClass.Entry<object, object>)VAR_OBJECT; return this._enclosing.removeMapping(VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getKey(), VAR_JAVA.UTIL.MAPCLASS.ENTRY<OBJECT, OBJECT>.getValue()); }
public static byte[] METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], LITERAL_INT + VAR_BYTE[].Length); }
public IndexAndTaxonomyRevision(IndexWriter VAR_INDEXWRITER, SnapshotDirectoryTaxonomyWriter VAR_SNAPSHOTDIRECTORYTAXONOMYWRITER) { this.indexSdp = VAR_INDEXWRITER.Config.IndexDeletionPolicy as SnapshotDeletionPolicy; if (indexSdp == LITERAL_NULL) throw new ArgumentException(LITERAL_STRING, LITERAL_STRING); this.VAR_INDEXWRITER = VAR_INDEXWRITER; this.VAR_SNAPSHOTDIRECTORYTAXONOMYWRITER = VAR_SNAPSHOTDIRECTORYTAXONOMYWRITER; this.taxonomySdp = VAR_SNAPSHOTDIRECTORYTAXONOMYWRITER.DeletionPolicy; this.indexCommit = indexSdp.Snapshot(); this.taxonomyCommit = taxonomySdp.Snapshot(); this.version = RevisionVersion(indexCommit, taxonomyCommit); this.sourceFiles = RevisionFiles(indexCommit, taxonomyCommit); }
public override string METHOD_NAME() { lock (this) { return base.METHOD_NAME(); } }
public static int METHOD_NAME(object VAR_OBJECT) { return (VAR_OBJECT == LITERAL_NULL) ? LITERAL_INT : VAR_OBJECT.GetHashCode(); }
public virtual GetModelTemplateResponse METHOD_NAME(GetModelTemplateRequest VAR_GETMODELTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetModelTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetModelTemplateResponseUnmarshaller.Instance; return Invoke<GetModelTemplateResponse>(VAR_GETMODELTEMPLATEREQUEST, VAR_VAR); }
public XORShift64Random(long VAR_LONG) { x = VAR_LONG == LITERAL_INT ? LITERAL_INT : VAR_LONG; }
public HeaderFooterRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { _rawData = VAR_RECORDINPUTSTREAM.ReadRemainder(); }
public HSSFPolygon METHOD_NAME(IClientAnchor VAR_ICLIENTANCHOR) { HSSFPolygon VAR_HSSFPOLYGON = new HSSFPolygon(LITERAL_NULL, (HSSFAnchor)VAR_ICLIENTANCHOR); AddShape(VAR_HSSFPOLYGON); OnCreate(VAR_HSSFPOLYGON); return VAR_HSSFPOLYGON; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) { return false; } if (VAR_OBJECT is BytesRef) { return this.BytesEquals((BytesRef)VAR_OBJECT); } return false; }
public override void METHOD_NAME(long[] VAR_LONG[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_LONG[][VAR_INT++]; for (int shift = LITERAL_INT; shift >= LITERAL_INT; shift -= LITERAL_INT) { VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> shift)) & LITERAL_INT; } } }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[], EscherSerializationListener VAR_ESCHERSERIALIZATIONLISTENER) { VAR_ESCHERSERIALIZATIONLISTENER.BeforeRecordSerialize(VAR_INT, RecordId, this); if (remainingData == LITERAL_NULL) remainingData = new byte[LITERAL_INT]; LittleEndian.PutShort(VAR_BYTE[], VAR_INT, Options); LittleEndian.PutShort(VAR_BYTE[], VAR_INT + LITERAL_INT, RecordId); LittleEndian.PutInt(VAR_BYTE[], VAR_INT + LITERAL_INT, remainingData.Length); Array.Copy(remainingData, LITERAL_INT, VAR_BYTE[], VAR_INT + LITERAL_INT, remainingData.Length); int VAR_INT = VAR_INT + LITERAL_INT + remainingData.Length; VAR_ESCHERSERIALIZATIONLISTENER.AfterRecordSerialize(VAR_INT, RecordId, VAR_INT - VAR_INT, this); return VAR_INT - VAR_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!(VAR_OBJECT is SpanPositionRangeQuery)) { return false; } SpanPositionRangeQuery VAR_SPANPOSITIONRANGEQUERY = (SpanPositionRangeQuery)VAR_OBJECT; return this.m_end == VAR_SPANPOSITIONRANGEQUERY.m_end && this.m_start == VAR_SPANPOSITIONRANGEQUERY.m_start && this.m_match.METHOD_NAME(VAR_SPANPOSITIONRANGEQUERY.m_match) && this.Boost == VAR_SPANPOSITIONRANGEQUERY.Boost; }
public virtual CreateSignalingChannelResponse METHOD_NAME(CreateSignalingChannelRequest VAR_CREATESIGNALINGCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSignalingChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSignalingChannelResponseUnmarshaller.Instance; return Invoke<CreateSignalingChannelResponse>(VAR_CREATESIGNALINGCHANNELREQUEST, VAR_VAR); }
public IndexDiffFilter(int VAR_INT, int VAR_INT, bool VAR_BOOL) { this.dirCache = VAR_INT; this.workingTree = VAR_INT; this.VAR_BOOL = VAR_BOOL; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_STRING + this.GetType().Name + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_minMergeSize).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_mergeFactor).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_maxMergeSize).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_maxMergeSizeForForcedMerge).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_calibrateSizeByDeletes).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_maxMergeDocs).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(MaxCFSSegmentSizeMB).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(m_noCFSRatio); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static void METHOD_NAME(StringBuilder VAR_STRINGBUILDER, string VAR_STRING) { if (VAR_STRING == LITERAL_NULL || VAR_STRING.Length == LITERAL_INT) { return; } try { VAR_STRINGBUILDER.Append(URLEncoder.METHOD_NAME(VAR_STRING, LITERAL_STRING)); } catch (UnsupportedEncodingException e) { throw new RuntimeException(JGitText.Get().couldNotURLEncodeToUTF8, e); } }
public virtual DescribeTemplateResponse METHOD_NAME(DescribeTemplateRequest VAR_DESCRIBETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTemplateResponseUnmarshaller.Instance; return Invoke<DescribeTemplateResponse>(VAR_DESCRIBETEMPLATEREQUEST, VAR_VAR); }
public bool METHOD_NAME() { if (exists()) { return false; } if (mkdir()) { return true; } string VAR_STRING = getParent(); if (VAR_STRING == LITERAL_NULL) { return false; } return (new java.io.File(VAR_STRING).METHOD_NAME() && mkdir()); }
public HeaderBlock(Stream VAR_STREAM) { try { VAR_STREAM.Position = LITERAL_INT; PrivateHeaderBlock(ReadFirst512(VAR_STREAM)); if (bigBlockSize.GetBigBlockSize() != LITERAL_INT) { int VAR_INT = bigBlockSize.GetBigBlockSize() - LITERAL_INT; byte[] VAR_BYTE[] = new byte[VAR_INT]; IOUtils.ReadFully(VAR_STREAM, VAR_BYTE[]); } } catch (IOException ex) { throw ex; } }
public virtual void METHOD_NAME(LexerNoViableAltException VAR_LEXERNOVIABLEALTEXCEPTION) { if (_input.LA(LITERAL_INT) != IntStreamConstants.EOF) { Interpreter.Consume(_input); } }
public virtual E METHOD_NAME(int VAR_INT) { if (mGarbage) { gc(); } return (E)mValues[VAR_INT]; }
public virtual AttachToIndexResponse METHOD_NAME(AttachToIndexRequest VAR_ATTACHTOINDEXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AttachToIndexRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AttachToIndexResponseUnmarshaller.Instance; return Invoke<AttachToIndexResponse>(VAR_ATTACHTOINDEXREQUEST, VAR_VAR); }
public virtual CreateMembersResponse METHOD_NAME(CreateMembersRequest VAR_CREATEMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateMembersResponseUnmarshaller.Instance; return Invoke<CreateMembersResponse>(VAR_CREATEMEMBERSREQUEST, VAR_VAR); }
public override double METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getDouble(_position++ * libcore.io.SizeOf.DOUBLE); }
public virtual ListOpenWorkflowExecutionsResponse METHOD_NAME(ListOpenWorkflowExecutionsRequest VAR_LISTOPENWORKFLOWEXECUTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListOpenWorkflowExecutionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListOpenWorkflowExecutionsResponseUnmarshaller.Instance; return Invoke<ListOpenWorkflowExecutionsResponse>(VAR_LISTOPENWORKFLOWEXECUTIONSREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return values[LITERAL_INT].Value; }
public static int METHOD_NAME(double VAR_DOUBLE) { return (int)Math.Round(EMU_PER_POINT * VAR_DOUBLE); }
public virtual DeleteRequestValidatorResponse METHOD_NAME(DeleteRequestValidatorRequest VAR_DELETEREQUESTVALIDATORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRequestValidatorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRequestValidatorResponseUnmarshaller.Instance; return Invoke<DeleteRequestValidatorResponse>(VAR_DELETEREQUESTVALIDATORREQUEST, VAR_VAR); }
public virtual Repository METHOD_NAME(bool VAR_BOOL) { if (VAR_BOOL && !IsGitRepository(path, fs)) { throw new RepositoryNotFoundException(path); } return new FileRepository(path); }
public virtual GetOnPremisesInstanceResponse METHOD_NAME(GetOnPremisesInstanceRequest VAR_GETONPREMISESINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOnPremisesInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOnPremisesInstanceResponseUnmarshaller.Instance; return Invoke<GetOnPremisesInstanceResponse>(VAR_GETONPREMISESINSTANCEREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(startOffset).Append(LITERAL_CHAR).Append(endOffset).Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public short METHOD_NAME(int VAR_INT) { int VAR_INT = _string.FormatRunCount; UnicodeString.FormatRun VAR_UNICODESTRING.FORMATRUN = LITERAL_NULL; for (int i = LITERAL_INT; i < VAR_INT; i++) { UnicodeString.FormatRun VAR_UNICODESTRING.FORMATRUN = _string.GetFormatRun(i); if (VAR_UNICODESTRING.FORMATRUN.CharacterPos > VAR_INT) break; else VAR_UNICODESTRING.FORMATRUN = VAR_UNICODESTRING.FORMATRUN; } if (VAR_UNICODESTRING.FORMATRUN == LITERAL_NULL) return NO_FONT; else return VAR_UNICODESTRING.FORMATRUN.FontIndex; }
public virtual StopMonitoringMembersResponse METHOD_NAME(StopMonitoringMembersRequest VAR_STOPMONITORINGMEMBERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopMonitoringMembersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopMonitoringMembersResponseUnmarshaller.Instance; return Invoke<StopMonitoringMembersResponse>(VAR_STOPMONITORINGMEMBERSREQUEST, VAR_VAR); }
public virtual DetachLoadBalancerFromSubnetsResponse METHOD_NAME(DetachLoadBalancerFromSubnetsRequest VAR_DETACHLOADBALANCERFROMSUBNETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachLoadBalancerFromSubnetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachLoadBalancerFromSubnetsResponseUnmarshaller.Instance; return Invoke<DetachLoadBalancerFromSubnetsResponse>(VAR_DETACHLOADBALANCERFROMSUBNETSREQUEST, VAR_VAR); }
public ICell METHOD_NAME(int VAR_INT, MissingCellPolicy VAR_MISSINGCELLPOLICY) { ICell VAR_ICELL = RetrieveCell(VAR_INT); if (VAR_MISSINGCELLPOLICY == MissingCellPolicy.RETURN_NULL_AND_BLANK) { return VAR_ICELL; } if (VAR_MISSINGCELLPOLICY == MissingCellPolicy.RETURN_BLANK_AS_NULL) { if (VAR_ICELL == LITERAL_NULL) return VAR_ICELL; if (VAR_ICELL.CellType == CellType.Blank) { return LITERAL_NULL; } return VAR_ICELL; } if (VAR_MISSINGCELLPOLICY == MissingCellPolicy.CREATE_NULL_AS_BLANK) { if (VAR_ICELL == LITERAL_NULL) { return CreateCell(VAR_INT, CellType.Blank); } return VAR_ICELL; } throw new ArgumentException(LITERAL_STRING + VAR_MISSINGCELLPOLICY + LITERAL_STRING + VAR_MISSINGCELLPOLICY.id + LITERAL_STRING); }
public SimpleQQParser(string VAR_STRING, string VAR_STRING) : this(new string[] { qqName }, indexField);
public virtual Query METHOD_NAME(int VAR_INT) { throw new Exception(this + LITERAL_STRING); }
public java.lang.StringBuilder METHOD_NAME(int VAR_INT, float VAR_FLOAT) { insert0(VAR_INT, System.Convert.ToString(VAR_FLOAT)); return this; }
public override Type METHOD_NAME() { return typeof(ConfigChangedListener); }
public virtual AddPermissionResponse METHOD_NAME(AddPermissionRequest VAR_ADDPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddPermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddPermissionResponseUnmarshaller.Instance; return Invoke<AddPermissionResponse>(VAR_ADDPERMISSIONREQUEST, VAR_VAR); }
public override double METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return byteBuffer.getDouble(VAR_INT * libcore.io.SizeOf.DOUBLE); }
public NPOI.SS.UserModel.IDataFormat METHOD_NAME() { return dataFormat; }
public override TermData METHOD_NAME(TermData VAR_TERMDATA, TermData VAR_TERMDATA) { if (Equals(VAR_TERMDATA, NO_OUTPUT)) return VAR_TERMDATA; if (Equals(VAR_TERMDATA, NO_OUTPUT)) return VAR_TERMDATA; Debug.Assert(VAR_TERMDATA.longs.Length == VAR_TERMDATA.longs.Length); var VAR_VAR = LITERAL_INT; var VAR_VAR = new long[_longsSize]; while (VAR_VAR < _longsSize) { VAR_VAR[VAR_VAR] = VAR_TERMDATA.longs[VAR_VAR] + VAR_TERMDATA.longs[VAR_VAR]; VAR_VAR++; } TermData VAR_TERMDATA; if (VAR_TERMDATA.bytes != LITERAL_NULL || VAR_TERMDATA.docFreq > LITERAL_INT) { VAR_TERMDATA = new TermData(VAR_VAR, VAR_TERMDATA.bytes, VAR_TERMDATA.docFreq, VAR_TERMDATA.totalTermFreq); } else { VAR_TERMDATA = new TermData(VAR_VAR, VAR_TERMDATA.bytes, VAR_TERMDATA.docFreq, VAR_TERMDATA.totalTermFreq); } return VAR_TERMDATA; }
public FileSharingRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_Readonly = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_password = VAR_RECORDINPUTSTREAM.ReadShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadShort(); if (VAR_INT > LITERAL_INT) { field_3_username_unicode_options = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_3_username_value = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); if (field_3_username_value == LITERAL_NULL) { field_3_username_value = LITERAL_STRING; } } else { field_3_username_value = LITERAL_STRING; } }
public virtual float METHOD_NAME(BasicStats VAR_BASICSTATS) { return (VAR_BASICSTATS.TotalTermFreq + LITERAL_FLOAT) / (VAR_BASICSTATS.NumberOfFieldTokens + LITERAL_FLOAT); }
public StringCharacterIterator(string VAR_STRING) { @string = VAR_STRING; start = offset = LITERAL_INT; end = @string.Length; }
public virtual void METHOD_NAME(string VAR_STRING, TokenStream VAR_TOKENSTREAM) { position = -LITERAL_INT; currentNumFrags = LITERAL_INT; textSize = VAR_STRING.Length; termAtt = VAR_TOKENSTREAM.AddAttribute<ICharTermAttribute>(); posIncAtt = VAR_TOKENSTREAM.AddAttribute<IPositionIncrementAttribute>(); offsetAtt = VAR_TOKENSTREAM.AddAttribute<IOffsetAttribute>(); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public override string METHOD_NAME() { var VAR_VAR = new StringBuilder(); VAR_VAR.Append(LITERAL_STRING).Append(m_initial).Append(LITERAL_STRING); for (int i = LITERAL_INT; i < _size; i++) { VAR_VAR.Append(LITERAL_STRING + i); if (m_accept[i]) { VAR_VAR.Append(LITERAL_STRING); } else { VAR_VAR.Append(LITERAL_STRING); } for (int j = LITERAL_INT; j < _points.Length; j++) { int VAR_INT = m_transitions[i * _points.Length + j]; if (VAR_INT != -LITERAL_INT) { int VAR_INT = _points[j]; int VAR_INT; if (j + LITERAL_INT < _points.Length) { VAR_INT = (_points[j + LITERAL_INT] - LITERAL_INT); } else { VAR_INT = _maxInterval; } VAR_VAR.Append(LITERAL_STRING); Transition.AppendCharString(VAR_INT, VAR_VAR); if (VAR_INT != VAR_INT) { VAR_VAR.Append(LITERAL_STRING); Transition.AppendCharString(VAR_INT, VAR_VAR); } VAR_VAR.Append(LITERAL_STRING).Append(VAR_INT).Append(LITERAL_STRING); } } } return VAR_VAR.METHOD_NAME(); }
public override long METHOD_NAME(long VAR_LONG) { lock (this) { if (VAR_LONG <= LITERAL_INT) { return LITERAL_INT; } int VAR_INT; if (this.count - pos < VAR_LONG) { VAR_INT = this.count - pos; pos = this.count; } else { VAR_INT = (int)VAR_LONG; pos += (int)(VAR_LONG); } return VAR_INT; } }
public virtual java.util.ListIterator<E> METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public virtual CreateAddressBookResponse METHOD_NAME(CreateAddressBookRequest VAR_CREATEADDRESSBOOKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAddressBookRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAddressBookResponseUnmarshaller.Instance; return Invoke<CreateAddressBookResponse>(VAR_CREATEADDRESSBOOKREQUEST, VAR_VAR); }
public StreamCopyThread(InputStream VAR_INPUTSTREAM, OutputStream VAR_OUTPUTSTREAM) { SetName(Sharpen.Thread.CurrentThread().GetName() + LITERAL_STRING); src = VAR_INPUTSTREAM; dst = VAR_OUTPUTSTREAM; }
public AxisParentRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_axisType = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_x = VAR_RECORDINPUTSTREAM.ReadInt(); field_3_y = VAR_RECORDINPUTSTREAM.ReadInt(); field_4_width = VAR_RECORDINPUTSTREAM.ReadInt(); field_5_height = VAR_RECORDINPUTSTREAM.ReadInt(); }
public override FieldFragList METHOD_NAME(FieldPhraseList VAR_FIELDPHRASELIST, int VAR_INT) { return METHOD_NAME(VAR_FIELDPHRASELIST, new WeightedFieldFragList(VAR_INT), VAR_INT); }
public TrimFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { m_updateOffsets = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual void METHOD_NAME(TermInfo VAR_TERMINFO) { termList.Insert(LITERAL_INT, VAR_TERMINFO); }
public virtual DescribeNotebookInstanceResponse METHOD_NAME(DescribeNotebookInstanceRequest VAR_DESCRIBENOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeNotebookInstanceResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceResponse>(VAR_DESCRIBENOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public override String METHOD_NAME() { return LITERAL_STRING; }
public virtual NGit.Api.ApplyCommand METHOD_NAME(InputStream VAR_INPUTSTREAM) { CheckCallable(); this.VAR_INPUTSTREAM = VAR_INPUTSTREAM; return this; }
public virtual void METHOD_NAME(long VAR_LONG) { EncodeTS(P_CTIME, VAR_LONG); }
public static RevFilter METHOD_NAME(long VAR_LONG) { return new CommitTimeRevFilterBefore(VAR_LONG); }
public virtual void METHOD_NAME(string VAR_STRING) { capablities.AddItem(VAR_STRING); }
public StopInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public virtual CreateVpnGatewayResponse METHOD_NAME(CreateVpnGatewayRequest VAR_CREATEVPNGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVpnGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVpnGatewayResponseUnmarshaller.Instance; return Invoke<CreateVpnGatewayResponse>(VAR_CREATEVPNGATEWAYREQUEST, VAR_VAR); }
public virtual ResetCacheParameterGroupResponse METHOD_NAME(ResetCacheParameterGroupRequest VAR_RESETCACHEPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetCacheParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetCacheParameterGroupResponseUnmarshaller.Instance; return Invoke<ResetCacheParameterGroupResponse>(VAR_RESETCACHEPARAMETERGROUPREQUEST, VAR_VAR); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); double VAR_DOUBLE = SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); if (VAR_DOUBLE == LITERAL_INT) { if (!(this is SubtractEval)) { return NumberEval.ZERO; } } if (Double.IsNaN(VAR_DOUBLE) || Double.IsInfinity(VAR_DOUBLE)) { return ErrorEval.NUM_ERROR; } } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public PutMetricFilterRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING, List<MetricTransformation> VAR_LIST<METRICTRANSFORMATION>) { _logGroupName = VAR_STRING; _filterName = VAR_STRING; _filterPattern = VAR_STRING; _metricTransformations = VAR_LIST<METRICTRANSFORMATION>; }
public virtual E METHOD_NAME(int VAR_INT) { lock (mutex) { return list.METHOD_NAME(VAR_INT); } }
public IntPtg(int VAR_INT) { if (!IsInRange(VAR_INT)) { throw new ArgumentException(LITERAL_STRING + VAR_INT); } field_1_value = VAR_INT; }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public override long METHOD_NAME(int VAR_INT) { return VAR_INT; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { return putLong(VAR_INT, Sharpen.Util.DoubleToRawLongBits(VAR_DOUBLE)); }
public override void METHOD_NAME() { value = false; }
public CharVector(char[] VAR_CHAR[]) { blockSize = DEFAULT_BLOCK_SIZE; array = VAR_CHAR[]; n = VAR_CHAR[].Length; }
public UAX29URLEmailTokenizerFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); maxTokenLength = GetInt32(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual long METHOD_NAME() { return fst == LITERAL_NULL ? LITERAL_INT : fst.GetSizeInBytes(); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is java.nio.CharBuffer)) { return false; } java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER = (java.nio.CharBuffer)VAR_OBJECT; if (remaining() != VAR_JAVA.NIO.CHARBUFFER.remaining()) { return false; } int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.CHARBUFFER._position; bool VAR_BOOL = true; while (VAR_BOOL && (VAR_INT < _limit)) { VAR_BOOL = get(VAR_INT++) == VAR_JAVA.NIO.CHARBUFFER.get(VAR_INT++); } return VAR_BOOL; }
public virtual StartDeploymentResponse METHOD_NAME(StartDeploymentRequest VAR_STARTDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartDeploymentResponseUnmarshaller.Instance; return Invoke<StartDeploymentResponse>(VAR_STARTDEPLOYMENTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(Windowing)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual CreateModelResponse METHOD_NAME(CreateModelRequest VAR_CREATEMODELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateModelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateModelResponseUnmarshaller.Instance; return Invoke<CreateModelResponse>(VAR_CREATEMODELREQUEST, VAR_VAR); }
public override java.nio.DoubleBuffer METHOD_NAME(double VAR_DOUBLE) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } backingArray[offset + _position++] = VAR_DOUBLE; return this; }
public SimpleFacetsExample() { config.SetHierarchical(LITERAL_STRING, true); }
public virtual DeleteConnectionResponse METHOD_NAME(DeleteConnectionRequest VAR_DELETECONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteConnectionResponseUnmarshaller.Instance; return Invoke<DeleteConnectionResponse>(VAR_DELETECONNECTIONREQUEST, VAR_VAR); }
public String METHOD_NAME(int VAR_INT) { return _iBook.FindSheetFirstNameFromExternSheet(VAR_INT); }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT <= LITERAL_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidTimeout, Sharpen.Extensions.ValueOf(VAR_INT))); } Sharpen.Thread.Interrupted(); state.METHOD_NAME(VAR_INT); }
public T METHOD_NAME() { DownHeap(); return heap[LITERAL_INT]; }
public QueryNodeException(IMessage VAR_IMESSAGE) : base(message.Key) { this.m_message = VAR_IMESSAGE; }
public static double METHOD_NAME(int VAR_INT) { double VAR_DOUBLE = LITERAL_INT; if (VAR_INT >= LITERAL_INT) { if (VAR_INT <= LITERAL_INT) { for (int i = LITERAL_INT; i <= VAR_INT; i++) { VAR_DOUBLE *= i; } } else { VAR_DOUBLE = double.PositiveInfinity; } } else { VAR_DOUBLE = double.NaN; } return VAR_DOUBLE; }
public virtual void METHOD_NAME(RevSort VAR_REVSORT) { AssertNotStarted(); sorting.Clear(); sorting.AddItem(VAR_REVSORT); }
public virtual CreateAuthorizerResponse METHOD_NAME(CreateAuthorizerRequest VAR_CREATEAUTHORIZERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAuthorizerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAuthorizerResponseUnmarshaller.Instance; return Invoke<CreateAuthorizerResponse>(VAR_CREATEAUTHORIZERREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return deltaCompress; }
public virtual CreateWorkGroupResponse METHOD_NAME(CreateWorkGroupRequest VAR_CREATEWORKGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateWorkGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateWorkGroupResponseUnmarshaller.Instance; return Invoke<CreateWorkGroupResponse>(VAR_CREATEWORKGROUPREQUEST, VAR_VAR); }
public virtual BatchDetectSyntaxResponse METHOD_NAME(BatchDetectSyntaxRequest VAR_BATCHDETECTSYNTAXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDetectSyntaxRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDetectSyntaxResponseUnmarshaller.Instance; return Invoke<BatchDetectSyntaxResponse>(VAR_BATCHDETECTSYNTAXREQUEST, VAR_VAR); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_MANAGER); }
public ICollection METHOD_NAME() { return dictionaryNameToID.Keys; }
public virtual long METHOD_NAME(char VAR_CHAR) { long VAR_LONG = LITERAL_INT; long VAR_LONG = unchecked((long)LITERAL_INT); VAR_LONG = (VAR_LONG ^ (VAR_CHAR & LITERAL_INT)) * VAR_LONG; VAR_LONG = (VAR_LONG ^ (VAR_CHAR >> LITERAL_INT)) * VAR_LONG; VAR_LONG += VAR_LONG << LITERAL_INT; VAR_LONG ^= VAR_LONG >> LITERAL_INT; VAR_LONG += VAR_LONG << LITERAL_INT; VAR_LONG ^= VAR_LONG >> LITERAL_INT; VAR_LONG += VAR_LONG << LITERAL_INT; return VAR_LONG; }
public virtual PutScalingPolicyResponse METHOD_NAME(PutScalingPolicyRequest VAR_PUTSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutScalingPolicyResponseUnmarshaller.Instance; return Invoke<PutScalingPolicyResponse>(VAR_PUTSCALINGPOLICYREQUEST, VAR_VAR); }
public KeywordRepeatFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual void METHOD_NAME(IList<byte[]> VAR_ILIST<BYTE[]>) { var VAR_VAR = VAR_ILIST<BYTE[]>.ToArray(); METHOD_NAME(VAR_VAR, LITERAL_INT, VAR_VAR.Length); }
public virtual IList<IToken> METHOD_NAME(int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT < LITERAL_INT) { return LITERAL_NULL; } LazyInit(); IList<IToken> VAR_ILIST<ITOKEN> = new List<IToken>(); if (VAR_INT >= tokens.Count) { VAR_INT = tokens.Count - LITERAL_INT; } for (int i = VAR_INT; i <= VAR_INT; i++) { IToken VAR_ITOKEN = tokens[i]; if (VAR_ITOKEN.Type == TokenConstants.EOF) { break; } VAR_ILIST<ITOKEN>.Add(VAR_ITOKEN); } return VAR_ILIST<ITOKEN>; }
public override string METHOD_NAME() { return tokenName + LITERAL_STRING + Type; }
public static Automaton METHOD_NAME(ICollection<BytesRef> VAR_ICOLLECTION<BYTESREF>) { DaciukMihovAutomatonBuilder VAR_DACIUKMIHOVAUTOMATONBUILDER = new DaciukMihovAutomatonBuilder(); CharsRef VAR_CHARSREF = new CharsRef(); foreach (BytesRef b in VAR_ICOLLECTION<BYTESREF>) { UnicodeUtil.UTF8toUTF16(b, VAR_CHARSREF); VAR_DACIUKMIHOVAUTOMATONBUILDER.Add(VAR_CHARSREF); } return new Automaton { initial = Convert(VAR_DACIUKMIHOVAUTOMATONBUILDER.Complete(), new JCG.Dictionary<State, Lucene.Net.Util.Automaton.State>(IdentityEqualityComparer<State>.Default)), deterministic = true }; }
public Row METHOD_NAME(Row VAR_ROW, Row VAR_ROW) { Row VAR_ROW = new Row(); foreach (char ch in VAR_ROW.cells.Keys) { VAR_ROW.cells.TryGetValue(ch, out Cell a); Cell VAR_CELL = !VAR_ROW.cells.TryGetValue(ch, out Cell b) || (b == LITERAL_NULL) ? new Cell(a) : METHOD_NAME(a, b); if (VAR_CELL == LITERAL_NULL) { return LITERAL_NULL; } VAR_ROW.cells[ch] = VAR_CELL; } foreach (char ch in VAR_ROW.cells.Keys) { if (VAR_ROW.At(ch) != LITERAL_NULL) { continue; } VAR_ROW.cells[ch] = VAR_ROW.At(ch); } return VAR_ROW; }
public virtual E METHOD_NAME() { return peekFirstImpl(); }
public static int METHOD_NAME(HttpURLConnection VAR_HTTPURLCONNECTION) { try { return VAR_HTTPURLCONNECTION.GetResponseCode(); } catch (ConnectException ce) { string VAR_STRING = VAR_HTTPURLCONNECTION.GetURL().GetHost(); if (LITERAL_STRING.Equals(ce.Message)) { throw new ConnectException(MessageFormat.Format(JGitText.Get().connectionTimeOut, VAR_STRING)); } throw new ConnectException(ce.Message + LITERAL_STRING + VAR_STRING); } }
public virtual GetConfigurationResponse METHOD_NAME(GetConfigurationRequest VAR_GETCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConfigurationResponseUnmarshaller.Instance; return Invoke<GetConfigurationResponse>(VAR_GETCONFIGURATIONREQUEST, VAR_VAR); }
public static List<String> METHOD_NAME() { List<String> VAR_LIST<STRING> = new List<String>(); VAR_LIST<STRING>.AddRange(FunctionEval.METHOD_NAME()); VAR_LIST<STRING>.AddRange(AnalysisToolPak.METHOD_NAME()); return VAR_LIST<STRING>; }
public PerFieldAnalyzerWrapper(Analyzer VAR_ANALYZER, IDictionary<string, Analyzer> VAR_IDICTIONARY<STRING, ANALYZER>) : base(PER_FIELD_REUSE_STRATEGY) { this.VAR_ANALYZER = VAR_ANALYZER; this.VAR_IDICTIONARY<STRING, ANALYZER> = VAR_IDICTIONARY<STRING, ANALYZER> ?? new JCG.Dictionary<string, Analyzer>(); }
public virtual DeletePublishingDestinationResponse METHOD_NAME(DeletePublishingDestinationRequest VAR_DELETEPUBLISHINGDESTINATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeletePublishingDestinationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeletePublishingDestinationResponseUnmarshaller.Instance; return Invoke<DeletePublishingDestinationResponse>(VAR_DELETEPUBLISHINGDESTINATIONREQUEST, VAR_VAR); }
public virtual GetSendStatisticsResponse METHOD_NAME(GetSendStatisticsRequest VAR_GETSENDSTATISTICSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSendStatisticsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSendStatisticsResponseUnmarshaller.Instance; return Invoke<GetSendStatisticsResponse>(VAR_GETSENDSTATISTICSREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { if (Logger.Check(POILogger.WARN)) Logger.Log(POILogger.WARN, LITERAL_STRING); }
public AreaErrPtg() { unused1 = LITERAL_INT; unused2 = LITERAL_INT; }
public virtual GetUserSettingsResponse METHOD_NAME(GetUserSettingsRequest VAR_GETUSERSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUserSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUserSettingsResponseUnmarshaller.Instance; return Invoke<GetUserSettingsResponse>(VAR_GETUSERSETTINGSREQUEST, VAR_VAR); }
public static string METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT != LITERAL_NULL) { return VAR_OBJECT.METHOD_NAME(); } else { return LITERAL_NULL; } }
public string METHOD_NAME() { return accessKeySecret; }
public override ICollection<IParseTree> METHOD_NAME(IParseTree VAR_IPARSETREE) { IList<IParseTree> VAR_ILIST<IPARSETREE> = new List<IParseTree>(); foreach (ITree c in Trees.GetChildren(VAR_IPARSETREE)) { if (c is ITerminalNode) { ITerminalNode VAR_ITERMINALNODE = (ITerminalNode)c; if ((VAR_ITERMINALNODE.Symbol.Type == tokenType && !invert) || (VAR_ITERMINALNODE.Symbol.Type != tokenType && invert)) { VAR_ILIST<IPARSETREE>.Add(VAR_ITERMINALNODE); } } } return VAR_ILIST<IPARSETREE>; }
public virtual IsVpcPeeredResponse METHOD_NAME(IsVpcPeeredRequest VAR_ISVPCPEEREDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = IsVpcPeeredRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = IsVpcPeeredResponseUnmarshaller.Instance; return Invoke<IsVpcPeeredResponse>(VAR_ISVPCPEEREDREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + ShardIndex + LITERAL_STRING + HitIndex + LITERAL_STRING; }
public TerminateJobFlowsRequest(List<string> VAR_LIST<STRING>) { _jobFlowIds = VAR_LIST<STRING>; }
public DatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_options = VAR_RECORDINPUTSTREAM.ReadShort(); }
public void METHOD_NAME(int VAR_INT) { int VAR_INT = records.Xfpos - (numxfs - LITERAL_INT) + VAR_INT; records.Remove(VAR_INT); numxfs--; }
public virtual double METHOD_NAME(string VAR_STRING, double VAR_DOUBLE) { double[] VAR_DOUBLE[]; object VAR_OBJECT; if (valByRound.TryGetValue(VAR_STRING, out VAR_OBJECT) && VAR_OBJECT != LITERAL_NULL) { VAR_DOUBLE[] = (double[])VAR_OBJECT; return VAR_DOUBLE[][roundNumber % VAR_DOUBLE[].Length]; } string VAR_STRING; if (!props.TryGetValue(VAR_STRING, out VAR_STRING)) { VAR_STRING = VAR_DOUBLE.ToString(CultureInfo.InvariantCulture); } if (VAR_STRING.IndexOf(LITERAL_CHAR) < LITERAL_INT) { return double.Parse(VAR_STRING, CultureInfo.InvariantCulture); } int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); string VAR_STRING = VAR_STRING.Substring(LITERAL_INT, VAR_INT - LITERAL_INT); VAR_STRING = VAR_STRING.Substring(VAR_INT + LITERAL_INT); colForValByRound[VAR_STRING] = VAR_STRING; VAR_DOUBLE[] = PropToDoubleArray(VAR_STRING); valByRound[VAR_STRING] = VAR_DOUBLE[]; return VAR_DOUBLE[][roundNumber % VAR_DOUBLE[].Length]; }
public BlockPackedReaderIterator(DataInput VAR_DATAINPUT, int VAR_INT, int VAR_INT, long VAR_LONG) { PackedInt32s.CheckBlockSize(VAR_INT, AbstractBlockPackedWriter.MIN_BLOCK_SIZE, AbstractBlockPackedWriter.MAX_BLOCK_SIZE); this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; this.values = new long[VAR_INT]; this.valuesRef = new Int64sRef(this.values, LITERAL_INT, LITERAL_INT); Reset(VAR_DATAINPUT, VAR_LONG); }
public override void METHOD_NAME() { if (!First) { ptr = treeStart; if (!Eof) { ParseEntry(); } } }
public override BytesRef METHOD_NAME() { if (payloadLength == LITERAL_INT) { return LITERAL_NULL; } else { return payload; } }
public virtual void METHOD_NAME(bool VAR_BOOL) { lock (this) { if ((!mOnlyIndeterminate || !mIndeterminate) && VAR_BOOL != mIndeterminate) { mIndeterminate = VAR_BOOL; if (VAR_BOOL) { mCurrentDrawable = mIndeterminateDrawable; startAnimation(); } else { mCurrentDrawable = mProgressDrawable; stopAnimation(); } } } }
public void METHOD_NAME(ICell VAR_ICELL) { _bookEvaluator.METHOD_NAME(new HSSFEvaluationCell(VAR_ICELL)); }
public override bool METHOD_NAME(object VAR_OBJECT) { var VAR_VAR = VAR_OBJECT as FieldCacheSource; if (VAR_VAR == LITERAL_NULL) { return false; } return m_field.METHOD_NAME(VAR_VAR.m_field, StringComparison.Ordinal) && m_cache == VAR_VAR.m_cache; }
public virtual DescribeLoaResponse METHOD_NAME(DescribeLoaRequest VAR_DESCRIBELOAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoaRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoaResponseUnmarshaller.Instance; return Invoke<DescribeLoaResponse>(VAR_DESCRIBELOAREQUEST, VAR_VAR); }
public override K METHOD_NAME() { return this.nextEntry().key; }
public virtual ListFleetsResponse METHOD_NAME(ListFleetsRequest VAR_LISTFLEETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFleetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFleetsResponseUnmarshaller.Instance; return Invoke<ListFleetsResponse>(VAR_LISTFLEETSREQUEST, VAR_VAR); }
public DelegationSet(List<string> VAR_LIST<STRING>) { _nameServers = VAR_LIST<STRING>; }
public virtual GetKeyPairsResponse METHOD_NAME(GetKeyPairsRequest VAR_GETKEYPAIRSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetKeyPairsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetKeyPairsResponseUnmarshaller.Instance; return Invoke<GetKeyPairsResponse>(VAR_GETKEYPAIRSREQUEST, VAR_VAR); }
public virtual PurchaseReservedNodeOfferingResponse METHOD_NAME(PurchaseReservedNodeOfferingRequest VAR_PURCHASERESERVEDNODEOFFERINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseReservedNodeOfferingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseReservedNodeOfferingResponseUnmarshaller.Instance; return Invoke<PurchaseReservedNodeOfferingResponse>(VAR_PURCHASERESERVEDNODEOFFERINGREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return password; }
public virtual string METHOD_NAME(string VAR_STRING) { string VAR_STRING; nameValPairs.TryGetValue(VAR_STRING, out VAR_STRING); return VAR_STRING; }
public static string METHOD_NAME(byte[] VAR_BYTE[]) { return METHOD_NAME(VAR_BYTE[], true); }
public Token(int VAR_INT, string VAR_STRING) { this.Kind = VAR_INT; this.Image = VAR_STRING; }
public ArrayRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { _options = VAR_RECORDINPUTSTREAM.ReadUShort(); _field3notUsed = VAR_RECORDINPUTSTREAM.ReadInt(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUShort(); int VAR_INT = VAR_RECORDINPUTSTREAM.Available(); _formula = NPOI.SS.Formula.Formula.Read(VAR_INT, VAR_RECORDINPUTSTREAM, VAR_INT); }
public BootstrapActionConfig(string VAR_STRING, ScriptBootstrapActionConfig VAR_SCRIPTBOOTSTRAPACTIONCONFIG) { _name = VAR_STRING; _scriptBootstrapAction = VAR_SCRIPTBOOTSTRAPACTIONCONFIG; }
public virtual CreateLoadBalancerPolicyResponse METHOD_NAME(CreateLoadBalancerPolicyRequest VAR_CREATELOADBALANCERPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLoadBalancerPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLoadBalancerPolicyResponseUnmarshaller.Instance; return Invoke<CreateLoadBalancerPolicyResponse>(VAR_CREATELOADBALANCERPOLICYREQUEST, VAR_VAR); }
public static string METHOD_NAME(byte VAR_BYTE) { return METHOD_NAME((long)VAR_BYTE, LITERAL_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + Arrays.METHOD_NAME(subs) + LITERAL_STRING; }
public PayloadSpanUtil(IndexReaderContext VAR_INDEXREADERCONTEXT) { this.VAR_INDEXREADERCONTEXT = VAR_INDEXREADERCONTEXT; }
public virtual IList<FormatError> METHOD_NAME() { return errors; }
public NormalisedDecimal METHOD_NAME(int VAR_INT) { int VAR_INT = _binaryExponent - LITERAL_INT; int VAR_INT = (_significand.IntValue() << VAR_INT) & LITERAL_INT; long VAR_LONG = (_significand >> (C_64 - _binaryExponent - LITERAL_INT)).LongValue(); return new NormalisedDecimal(VAR_LONG, VAR_INT, VAR_INT); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(MINUS); VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); return VAR_STRINGBUILDER.ToString(); }
public virtual ListStackSetOperationResultsResponse METHOD_NAME(ListStackSetOperationResultsRequest VAR_LISTSTACKSETOPERATIONRESULTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStackSetOperationResultsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStackSetOperationResultsResponseUnmarshaller.Instance; return Invoke<ListStackSetOperationResultsResponse>(VAR_LISTSTACKSETOPERATIONRESULTSREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING, params object[] VAR_OBJECT[]) { return METHOD_NAME(VAR_STRING, CultureInfo.CurrentUICulture, VAR_OBJECT[]); }
public string METHOD_NAME(bool VAR_BOOL) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); ReflectWith(new AttributeReflectorAnonymousInnerClassHelper(this, VAR_BOOL, VAR_STRINGBUILDER)); return VAR_STRINGBUILDER.ToString(); }
public CellRangeAddressBase METHOD_NAME() { return GetCellRange(dataValues); }
public virtual DescribeMatchmakingConfigurationsResponse METHOD_NAME(DescribeMatchmakingConfigurationsRequest VAR_DESCRIBEMATCHMAKINGCONFIGURATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeMatchmakingConfigurationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeMatchmakingConfigurationsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingConfigurationsResponse>(VAR_DESCRIBEMATCHMAKINGCONFIGURATIONSREQUEST, VAR_VAR); }
public override char METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getChar(_position++ * libcore.io.SizeOf.CHAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(length).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(flags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual PutConfigurationSetSuppressionOptionsResponse METHOD_NAME(PutConfigurationSetSuppressionOptionsRequest VAR_PUTCONFIGURATIONSETSUPPRESSIONOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutConfigurationSetSuppressionOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutConfigurationSetSuppressionOptionsResponseUnmarshaller.Instance; return Invoke<PutConfigurationSetSuppressionOptionsResponse>(VAR_PUTCONFIGURATIONSETSUPPRESSIONOPTIONSREQUEST, VAR_VAR); }
public virtual ListProposalVotesResponse METHOD_NAME(ListProposalVotesRequest VAR_LISTPROPOSALVOTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListProposalVotesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListProposalVotesResponseUnmarshaller.Instance; return Invoke<ListProposalVotesResponse>(VAR_LISTPROPOSALVOTESREQUEST, VAR_VAR); }
public SheetRangeEvaluator METHOD_NAME() { SheetRefEvaluator VAR_SHEETREFEVALUATOR = new SheetRefEvaluator(_bookEvaluator, _tracker, _sheetIndex); return new SheetRangeEvaluator(_sheetIndex, VAR_SHEETREFEVALUATOR); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (FieldIndexData entry in fields.Values) { VAR_LONG += entry.METHOD_NAME(); } return VAR_LONG; }
public DataLabelExtensionRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { rt = VAR_RECORDINPUTSTREAM.ReadShort(); grbitFrt = VAR_RECORDINPUTSTREAM.ReadShort(); VAR_RECORDINPUTSTREAM.ReadFully(unused); }
public virtual ArchiveFindingsResponse METHOD_NAME(ArchiveFindingsRequest VAR_ARCHIVEFINDINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ArchiveFindingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ArchiveFindingsResponseUnmarshaller.Instance; return Invoke<ArchiveFindingsResponse>(VAR_ARCHIVEFINDINGSREQUEST, VAR_VAR); }
public ChartSubstreamRecordAggregate(RecordStream VAR_RECORDSTREAM) { _bofRec = (BOFRecord)VAR_RECORDSTREAM.GetNext(); List<RecordBase> VAR_LIST<RECORDBASE> = new List<RecordBase>(); while (VAR_RECORDSTREAM.PeekNextClass() != typeof(EOFRecord)) { Type VAR_TYPE = VAR_RECORDSTREAM.PeekNextClass(); if (PageSettingsBlock.IsComponentRecord(VAR_RECORDSTREAM.PeekNextSid())) { if (_psBlock != LITERAL_NULL) { if (VAR_RECORDSTREAM.PeekNextSid() == HeaderFooterRecord.sid) { _psBlock.AddLateHeaderFooter((HeaderFooterRecord)VAR_RECORDSTREAM.GetNext()); continue; } throw new InvalidDataException(LITERAL_STRING); } _psBlock = new PageSettingsBlock(VAR_RECORDSTREAM); VAR_LIST<RECORDBASE>.Add(_psBlock); continue; } VAR_LIST<RECORDBASE>.Add(VAR_RECORDSTREAM.GetNext()); } _recs = VAR_LIST<RECORDBASE>; Record VAR_RECORD = VAR_RECORDSTREAM.GetNext(); if (!(VAR_RECORD is EOFRecord)) { throw new InvalidOperationException(LITERAL_STRING); } }
public virtual CreateSnapshotsResponse METHOD_NAME(CreateSnapshotsRequest VAR_CREATESNAPSHOTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateSnapshotsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateSnapshotsResponseUnmarshaller.Instance; return Invoke<CreateSnapshotsResponse>(VAR_CREATESNAPSHOTSREQUEST, VAR_VAR); }
public override String METHOD_NAME() { return LITERAL_STRING; }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public UnmonitorInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public static Inflater METHOD_NAME() { Inflater VAR_INFLATER = GetImpl(); return VAR_INFLATER != LITERAL_NULL ? VAR_INFLATER : new Inflater(false); }
public override long METHOD_NAME(int VAR_INT) { checkIndex(VAR_INT); return byteBuffer.getLong(VAR_INT * libcore.io.SizeOf.LONG); }
public virtual Antlr4.Runtime.Misc.IntervalSet METHOD_NAME(int VAR_INT, int VAR_INT) { return this.METHOD_NAME(Antlr4.Runtime.Misc.IntervalSet.Of(VAR_INT, VAR_INT)); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING + LITERAL_STRING).Append(Field).Append(LITERAL_STRING); if (IsReverse) VAR_STRINGBUILDER.Append(LITERAL_CHAR); if (MissingValue != LITERAL_NULL) { VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(MissingValue); } VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(selector); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DescribeTrafficMirrorSessionsResponse METHOD_NAME(DescribeTrafficMirrorSessionsRequest VAR_DESCRIBETRAFFICMIRRORSESSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTrafficMirrorSessionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTrafficMirrorSessionsResponseUnmarshaller.Instance; return Invoke<DescribeTrafficMirrorSessionsResponse>(VAR_DESCRIBETRAFFICMIRRORSESSIONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return byteBuffer.METHOD_NAME(); }
public virtual ICollection<string> METHOD_NAME() { return Sharpen.Collections.UnmodifiableSet(diff.METHOD_NAME()); }
public virtual ListDeviceEventsResponse METHOD_NAME(ListDeviceEventsRequest VAR_LISTDEVICEEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListDeviceEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListDeviceEventsResponseUnmarshaller.Instance; return Invoke<ListDeviceEventsResponse>(VAR_LISTDEVICEEVENTSREQUEST, VAR_VAR); }
public override bool METHOD_NAME() { return this._enclosing.METHOD_NAME(); }
public EscherSimpleProperty(short VAR_SHORT, int VAR_INT) : base(id) { this.VAR_INT = VAR_INT; }
public PointPrefixTreeFieldCacheProvider(SpatialPrefixTree VAR_SPATIALPREFIXTREE, string VAR_STRING, int VAR_INT) : base(shapeField, defaultSize) { this.VAR_SPATIALPREFIXTREE = VAR_SPATIALPREFIXTREE; }
public override void METHOD_NAME(byte VAR_BYTE) { Debug.Assert(pos < limit); bytes[pos++] = VAR_BYTE; }
public virtual DescribeTransitGatewayPeeringAttachmentsResponse METHOD_NAME(DescribeTransitGatewayPeeringAttachmentsRequest VAR_DESCRIBETRANSITGATEWAYPEERINGATTACHMENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewayPeeringAttachmentsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewayPeeringAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayPeeringAttachmentsResponse>(VAR_DESCRIBETRANSITGATEWAYPEERINGATTACHMENTSREQUEST, VAR_VAR); }
public override ICollection<KeyValuePair<string, Ref>> METHOD_NAME() { if (entrySet == LITERAL_NULL) { entrySet = new _AbstractSet_223(this); } return entrySet; }
public ValueEval METHOD_NAME(ValueEval[] VAR_VALUEEVAL[], int VAR_INT, int VAR_INT) { try { return EvaluateFunc(VAR_VALUEEVAL[], VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } }
public CreateConfigurationTemplateRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _templateName = VAR_STRING; }
public virtual GetUsagePlansResponse METHOD_NAME(GetUsagePlansRequest VAR_GETUSAGEPLANSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUsagePlansRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUsagePlansResponseUnmarshaller.Instance; return Invoke<GetUsagePlansResponse>(VAR_GETUSAGEPLANSREQUEST, VAR_VAR); }
public static int METHOD_NAME(Ptg[] VAR_PTG[], byte[] VAR_BYTE[], int VAR_INT) { int VAR_INT = VAR_PTG[].Length; LittleEndianByteArrayOutputStream VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM = new LittleEndianByteArrayOutputStream(VAR_BYTE[], VAR_INT); ArrayList VAR_ARRAYLIST = LITERAL_NULL; for (int k = LITERAL_INT; k < VAR_INT; k++) { Ptg VAR_PTG = VAR_PTG[][k]; VAR_PTG.Write(VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM); if (VAR_PTG is ArrayPtg) { if (VAR_ARRAYLIST == LITERAL_NULL) { VAR_ARRAYLIST = new ArrayList(LITERAL_INT); } VAR_ARRAYLIST.Add(VAR_PTG); } } if (VAR_ARRAYLIST != LITERAL_NULL) { for (int i = LITERAL_INT; i < VAR_ARRAYLIST.Count; i++) { ArrayPtg VAR_ARRAYPTG = (ArrayPtg)VAR_ARRAYLIST[i]; VAR_ARRAYPTG.WriteTokenValueBytes(VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM); } } return VAR_LITTLEENDIANBYTEARRAYOUTPUTSTREAM.WriteIndex - VAR_INT; ; }
public override int METHOD_NAME() { return lines.METHOD_NAME() - LITERAL_INT; }
public NumberRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { field_4_value = VAR_RECORDINPUTSTREAM.ReadDouble(); }
public virtual UnpeerVpcResponse METHOD_NAME(UnpeerVpcRequest VAR_UNPEERVPCREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnpeerVpcRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnpeerVpcResponseUnmarshaller.Instance; return Invoke<UnpeerVpcResponse>(VAR_UNPEERVPCREQUEST, VAR_VAR); }
public virtual DescribeTransitGatewayMulticastDomainsResponse METHOD_NAME(DescribeTransitGatewayMulticastDomainsRequest VAR_DESCRIBETRANSITGATEWAYMULTICASTDOMAINSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeTransitGatewayMulticastDomainsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeTransitGatewayMulticastDomainsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayMulticastDomainsResponse>(VAR_DESCRIBETRANSITGATEWAYMULTICASTDOMAINSREQUEST, VAR_VAR); }
public Break METHOD_NAME(int VAR_INT) { return (Break)_breakMap[VAR_INT]; }
public IPatternFormatting METHOD_NAME() { return METHOD_NAME(false); }
public virtual FileMode METHOD_NAME(DiffEntry.Side VAR_DIFFENTRY.SIDE) { return VAR_DIFFENTRY.SIDE == DiffEntry.Side.OLD ? GetOldMode() : GetNewMode(); }
public java.lang.StringBuffer METHOD_NAME(bool VAR_BOOL) { return METHOD_NAME(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); }
public override bool METHOD_NAME() { return false; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { java.util.Iterator<E> VAR_JAVA.UTIL.ITERATOR<E> = iterator(); if (VAR_OBJECT != LITERAL_NULL) { while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { if (VAR_OBJECT.Equals(VAR_JAVA.UTIL.ITERATOR<E>.next())) { VAR_JAVA.UTIL.ITERATOR<E>.METHOD_NAME(); return true; } } } else { while (VAR_JAVA.UTIL.ITERATOR<E>.hasNext()) { if (VAR_JAVA.UTIL.ITERATOR<E>.next() == LITERAL_NULL) { VAR_JAVA.UTIL.ITERATOR<E>.METHOD_NAME(); return true; } } } return false; }
public virtual object METHOD_NAME(string VAR_STRING) { return trie.METHOD_NAME(VAR_STRING); }
public virtual SubmoduleInitCommand METHOD_NAME() { return new SubmoduleInitCommand(repo); }
public virtual GetRepositoryPolicyResponse METHOD_NAME(GetRepositoryPolicyRequest VAR_GETREPOSITORYPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRepositoryPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRepositoryPolicyResponseUnmarshaller.Instance; return Invoke<GetRepositoryPolicyResponse>(VAR_GETREPOSITORYPOLICYREQUEST, VAR_VAR); }
public IPicture METHOD_NAME(IClientAnchor VAR_ICLIENTANCHOR, int VAR_INT) { return METHOD_NAME((HSSFClientAnchor)VAR_ICLIENTANCHOR, VAR_INT); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = LITERAL_INT; VAR_INT += LITERAL_INT; while (VAR_INT > LITERAL_INT && VAR_INT < VAR_BYTE[].Length) { EscherRecord VAR_ESCHERRECORD = VAR_IESCHERRECORDFACTORY.CreateRecord(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_ESCHERRECORD.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_IESCHERRECORDFACTORY); VAR_INT += VAR_INT; VAR_INT += VAR_INT; VAR_INT -= VAR_INT; AddChildRecord(VAR_ESCHERRECORD); if (VAR_INT >= VAR_BYTE[].Length && VAR_INT > LITERAL_INT) { _remainingLength = VAR_INT; log.Log(POILogger.WARN, LITERAL_STRING + VAR_INT + LITERAL_STRING); } } return VAR_INT; }
public override void METHOD_NAME(string VAR_STRING, string VAR_STRING, string VAR_STRING, IAttributes VAR_IATTRIBUTES) { int VAR_INT = GetElementType(VAR_STRING); switch (VAR_INT) { case PAGE: title = LITERAL_NULL; body = LITERAL_NULL; time = LITERAL_NULL; id = LITERAL_NULL; break; case BODY: case DATE: case TITLE: case ID: contents.Length = LITERAL_INT; break; default: break; } }
public virtual AbbreviatedObjectId METHOD_NAME(int VAR_INT) { int VAR_INT = AbbreviatedObjectId.Mask(VAR_INT, LITERAL_INT, w1); int VAR_INT = AbbreviatedObjectId.Mask(VAR_INT, LITERAL_INT, w2); int VAR_INT = AbbreviatedObjectId.Mask(VAR_INT, LITERAL_INT, w3); int VAR_INT = AbbreviatedObjectId.Mask(VAR_INT, LITERAL_INT, w4); int VAR_INT = AbbreviatedObjectId.Mask(VAR_INT, LITERAL_INT, w5); return new AbbreviatedObjectId(VAR_INT, VAR_INT, VAR_INT, VAR_INT, VAR_INT, VAR_INT); }
public override string METHOD_NAME() { return LITERAL_STRING + precedence + LITERAL_STRING; }
public override java.nio.IntBuffer METHOD_NAME(java.nio.IntBuffer VAR_JAVA.NIO.INTBUFFER) { throw new java.nio.ReadOnlyBufferException(); }
public static NGit.Treewalk.Filter.PathSuffixFilter METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().emptyPathNotPermitted); } return new NGit.Treewalk.Filter.PathSuffixFilter(VAR_STRING); }
public static ICell METHOD_NAME(IRow VAR_IROW, int VAR_INT) { ICell VAR_ICELL = VAR_IROW.METHOD_NAME(VAR_INT); if (VAR_ICELL == LITERAL_NULL) { VAR_ICELL = VAR_IROW.CreateCell(VAR_INT); } return VAR_ICELL; }
public override void METHOD_NAME(ByteBuffer VAR_BYTEBUFFER, long VAR_LONG) { long VAR_LONG = VAR_LONG + VAR_BYTEBUFFER.Length; if (VAR_LONG > buffer.Length) { Extend(VAR_LONG); } VAR_BYTEBUFFER.Read(buffer, (int)VAR_LONG, VAR_BYTEBUFFER.Length); if (VAR_LONG > size) { size = VAR_LONG; } }
public virtual void METHOD_NAME(int VAR_INT) { METHOD_NAME(VAR_INT.ToString()); }
public ICUNormalizer2CharFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, LITERAL_STRING); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, new string[] { LITERAL_STRING, LITERAL_STRING }, LITERAL_STRING); Normalizer2 VAR_NORMALIZER2 = Normalizer2.GetInstance(LITERAL_NULL, VAR_STRING, LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal) ? Normalizer2Mode.Compose : Normalizer2Mode.Decompose); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); if (VAR_STRING != LITERAL_NULL) { UnicodeSet VAR_UNICODESET = new UnicodeSet(VAR_STRING); if (VAR_UNICODESET.Any()) { VAR_UNICODESET.Freeze(); VAR_NORMALIZER2 = new FilteredNormalizer2(VAR_NORMALIZER2, VAR_UNICODESET); } } if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } this.VAR_NORMALIZER2 = VAR_NORMALIZER2; }
public virtual CreateAdditionalAssignmentsForHITResponse METHOD_NAME(CreateAdditionalAssignmentsForHITRequest VAR_CREATEADDITIONALASSIGNMENTSFORHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAdditionalAssignmentsForHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAdditionalAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<CreateAdditionalAssignmentsForHITResponse>(VAR_CREATEADDITIONALASSIGNMENTSFORHITREQUEST, VAR_VAR); }
public DeleteEventRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override long METHOD_NAME() { return size; }
public virtual UndeprecateWorkflowTypeResponse METHOD_NAME(UndeprecateWorkflowTypeRequest VAR_UNDEPRECATEWORKFLOWTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UndeprecateWorkflowTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UndeprecateWorkflowTypeResponseUnmarshaller.Instance; return Invoke<UndeprecateWorkflowTypeResponse>(VAR_UNDEPRECATEWORKFLOWTYPEREQUEST, VAR_VAR); }
public bool METHOD_NAME(int VAR_INT) { bool VAR_BOOL = false; for (int j = LITERAL_INT; !VAR_BOOL && (j < _limit); j++) { if (VAR_INT == _array[j]) { if (j + LITERAL_INT < _limit) { Array.Copy(_array, j + LITERAL_INT, _array, j, _limit - j); } _limit--; VAR_BOOL = true; } } return VAR_BOOL; }
public override string METHOD_NAME() { return new string (m_buf, LITERAL_INT, Length); }
public virtual void METHOD_NAME(TreeWalk VAR_TREEWALK, int VAR_INT) { state.VAR_TREEWALK = VAR_TREEWALK; state.dirCacheTree = VAR_INT; }
public virtual DescribeOrganizationResponse METHOD_NAME(DescribeOrganizationRequest VAR_DESCRIBEORGANIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeOrganizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeOrganizationResponseUnmarshaller.Instance; return Invoke<DescribeOrganizationResponse>(VAR_DESCRIBEORGANIZATIONREQUEST, VAR_VAR); }
public CharsRef(int VAR_INT) { chars = new char[VAR_INT]; }
public virtual RebootInstanceResponse METHOD_NAME(RebootInstanceRequest VAR_REBOOTINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RebootInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RebootInstanceResponseUnmarshaller.Instance; return Invoke<RebootInstanceResponse>(VAR_REBOOTINSTANCEREQUEST, VAR_VAR); }
public static TreeFilter METHOD_NAME(ICollection<TreeFilter> VAR_ICOLLECTION<TREEFILTER>) { if (VAR_ICOLLECTION<TREEFILTER>.Count < LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded); } TreeFilter[] VAR_TREEFILTER[] = new TreeFilter[VAR_ICOLLECTION<TREEFILTER>.Count]; Sharpen.Collections.ToArray(VAR_ICOLLECTION<TREEFILTER>, VAR_TREEFILTER[]); if (VAR_TREEFILTER[].Length == LITERAL_INT) { return METHOD_NAME(VAR_TREEFILTER[][LITERAL_INT], VAR_TREEFILTER[][LITERAL_INT]); } return new AndTreeFilter.List(VAR_TREEFILTER[]); }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (KeyValuePair<string, DocValuesProducer> entry in formats) { VAR_LONG += (entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR) + entry.Value.METHOD_NAME(); } return VAR_LONG; }
public virtual ExportApiResponse METHOD_NAME(ExportApiRequest VAR_EXPORTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportApiResponseUnmarshaller.Instance; return Invoke<ExportApiResponse>(VAR_EXPORTAPIREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { expValue = VAR_ANYOBJECTID != LITERAL_NULL ? VAR_ANYOBJECTID.ToObjectId() : LITERAL_NULL; }
public override void METHOD_NAME(int VAR_INT) { pos += VAR_INT; }
public override String METHOD_NAME() { return Convert.METHOD_NAME(_value, CultureInfo.CurrentCulture); }
public virtual bool METHOD_NAME() { return mPopup.isShowing(); }
public virtual DeleteDBClusterSnapshotResponse METHOD_NAME(DeleteDBClusterSnapshotRequest VAR_DELETEDBCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDBClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDBClusterSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteDBClusterSnapshotResponse>(VAR_DELETEDBCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public Filter(string VAR_STRING, List<string> VAR_LIST<STRING>) { _name = VAR_STRING; _values = VAR_LIST<STRING>; }
public virtual SearchRoomsResponse METHOD_NAME(SearchRoomsRequest VAR_SEARCHROOMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SearchRoomsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SearchRoomsResponseUnmarshaller.Instance; return Invoke<SearchRoomsResponse>(VAR_SEARCHROOMSREQUEST, VAR_VAR); }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { try { BeginRead(); return base.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); } catch (ThreadInterruptedException) { throw ReadTimedOut(); } finally { EndRead(); } }
public virtual DeleteLoadBalancerTlsCertificateResponse METHOD_NAME(DeleteLoadBalancerTlsCertificateRequest VAR_DELETELOADBALANCERTLSCERTIFICATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteLoadBalancerTlsCertificateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteLoadBalancerTlsCertificateResponseUnmarshaller.Instance; return Invoke<DeleteLoadBalancerTlsCertificateResponse>(VAR_DELETELOADBALANCERTLSCERTIFICATEREQUEST, VAR_VAR); }
public static MessageDigest METHOD_NAME() { try { return MessageDigest.GetInstance(HASH_FUNCTION); } catch (NoSuchAlgorithmException nsae) { throw new RuntimeException(MessageFormat.Format(JGitText.Get().requiredHashFunctionNotAvailable, HASH_FUNCTION), nsae); } }
public IfFunction(ValueSource VAR_VALUESOURCE, ValueSource VAR_VALUESOURCE, ValueSource VAR_VALUESOURCE) { this.VAR_VALUESOURCE = VAR_VALUESOURCE; this.VAR_VALUESOURCE = VAR_VALUESOURCE; this.VAR_VALUESOURCE = VAR_VALUESOURCE; }
public static double METHOD_NAME(double VAR_DOUBLE, double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; double VAR_DOUBLE = VAR_DOUBLE + LITERAL_INT; double VAR_DOUBLE = VAR_DOUBLE; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += VAR_DOUBLE[][i] / VAR_DOUBLE; VAR_DOUBLE *= VAR_DOUBLE; } return VAR_DOUBLE; }
public StandardQueryTreeBuilder() { SetBuilder(typeof(GroupQueryNode), new GroupQueryNodeBuilder()); SetBuilder(typeof(FieldQueryNode), new FieldQueryNodeBuilder()); SetBuilder(typeof(BooleanQueryNode), new BooleanQueryNodeBuilder()); SetBuilder(typeof(FuzzyQueryNode), new FuzzyQueryNodeBuilder()); SetBuilder(typeof(NumericQueryNode), new DummyQueryNodeBuilder()); SetBuilder(typeof(NumericRangeQueryNode), new NumericRangeQueryNodeBuilder()); SetBuilder(typeof(BoostQueryNode), new BoostQueryNodeBuilder()); SetBuilder(typeof(ModifierQueryNode), new ModifierQueryNodeBuilder()); SetBuilder(typeof(WildcardQueryNode), new WildcardQueryNodeBuilder()); SetBuilder(typeof(TokenizedPhraseQueryNode), new PhraseQueryNodeBuilder()); SetBuilder(typeof(MatchNoDocsQueryNode), new MatchNoDocsQueryNodeBuilder()); SetBuilder(typeof(PrefixWildcardQueryNode), new PrefixWildcardQueryNodeBuilder()); SetBuilder(typeof(TermRangeQueryNode), new TermRangeQueryNodeBuilder()); SetBuilder(typeof(RegexpQueryNode), new RegexpQueryNodeBuilder()); SetBuilder(typeof(SlopQueryNode), new SlopQueryNodeBuilder()); SetBuilder(typeof(StandardBooleanQueryNode), new StandardBooleanQueryNodeBuilder()); SetBuilder(typeof(MultiPhraseQueryNode), new MultiPhraseQueryNodeBuilder()); SetBuilder(typeof(MatchAllDocsQueryNode), new MatchAllDocsQueryNodeBuilder()); }
public java.lang.StringBuilder METHOD_NAME(bool VAR_BOOL) { append0(VAR_BOOL ? LITERAL_STRING : LITERAL_STRING); return this; }
public Tag(string VAR_STRING, string VAR_STRING) { _key = VAR_STRING; _value = VAR_STRING; }
public FederatedUser(string VAR_STRING, string VAR_STRING) { _federatedUserId = VAR_STRING; _arn = VAR_STRING; }
public QueryRescorer(Query VAR_QUERY) { this.VAR_QUERY = VAR_QUERY; }
public void METHOD_NAME(int VAR_INT, HSSFConditionalFormattingRule VAR_HSSFCONDITIONALFORMATTINGRULE) { cfAggregate.METHOD_NAME(VAR_INT, VAR_HSSFCONDITIONALFORMATTINGRULE.CfRuleRecord); }
public virtual RenameDetector METHOD_NAME() { return renameDetector; }
public virtual UpdateTemplatePermissionsResponse METHOD_NAME(UpdateTemplatePermissionsRequest VAR_UPDATETEMPLATEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTemplatePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTemplatePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateTemplatePermissionsResponse>(VAR_UPDATETEMPLATEPERMISSIONSREQUEST, VAR_VAR); }
public override java.nio.DoubleBuffer METHOD_NAME(int VAR_INT, double VAR_DOUBLE) { checkIndex(VAR_INT); byteBuffer.putDouble(VAR_INT * libcore.io.SizeOf.DOUBLE, VAR_DOUBLE); return this; }
public virtual ResetInstanceAttributeResponse METHOD_NAME(ResetInstanceAttributeRequest VAR_RESETINSTANCEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ResetInstanceAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ResetInstanceAttributeResponseUnmarshaller.Instance; return Invoke<ResetInstanceAttributeResponse>(VAR_RESETINSTANCEATTRIBUTEREQUEST, VAR_VAR); }
public DirectoryEntry METHOD_NAME() { EmbeddedObjectRefSubRecord VAR_EMBEDDEDOBJECTREFSUBRECORD = FindObjectRecord(); int? VAR_INT? = ((EmbeddedObjectRefSubRecord)VAR_EMBEDDEDOBJECTREFSUBRECORD).StreamId; String VAR_STRING = LITERAL_STRING + HexDump.ToHex((int)VAR_INT?); Entry VAR_ENTRY = _root.GetEntry(VAR_STRING); if (VAR_ENTRY is DirectoryEntry) { return (DirectoryEntry)VAR_ENTRY; } else { throw new IOException(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } }
public HashMap(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT); } if (VAR_INT == LITERAL_INT) { java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = (java.util.HashMap.HashMapEntry<K, V>[])EMPTY_TABLE; table = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[]; threshold = -LITERAL_INT; return; } if (VAR_INT < java.util.HashMap.MINIMUM_CAPACITY) { VAR_INT = java.util.HashMap.MINIMUM_CAPACITY; } else { if (VAR_INT > java.util.HashMap.MAXIMUM_CAPACITY) { VAR_INT = java.util.HashMap.MAXIMUM_CAPACITY; } else { VAR_INT = roundUpToPowerOfTwo(VAR_INT); } } makeTable(VAR_INT); }
public int METHOD_NAME() { return specialCachedValue.GetErrorValue(); }
public virtual void METHOD_NAME(BytesRef VAR_BYTESREF) { if (writer == LITERAL_NULL) { throw new InvalidOperationException(); } writer.Write(VAR_BYTESREF); }
public virtual UpdateHITReviewStatusResponse METHOD_NAME(UpdateHITReviewStatusRequest VAR_UPDATEHITREVIEWSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateHITReviewStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateHITReviewStatusResponseUnmarshaller.Instance; return Invoke<UpdateHITReviewStatusResponse>(VAR_UPDATEHITREVIEWSTATUSREQUEST, VAR_VAR); }
public ScandinavianNormalizationFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual DescribeDBSnapshotAttributesResponse METHOD_NAME(DescribeDBSnapshotAttributesRequest VAR_DESCRIBEDBSNAPSHOTATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBSnapshotAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBSnapshotAttributesResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotAttributesResponse>(VAR_DESCRIBEDBSNAPSHOTATTRIBUTESREQUEST, VAR_VAR); }
public GetNamespaceAuthorizationListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public LowFreqTerm(int[] VAR_INT[], byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { this.VAR_INT[] = VAR_INT[]; this.VAR_BYTE[] = VAR_BYTE[]; this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public void METHOD_NAME() { state = LITERAL_NULL; consumed = true; keepOrig = false; matched = false; }
public static bool METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length < LITERAL_INT || Constants.OBJECT_ID_STRING_LENGTH < VAR_STRING.Length) { return false; } try { for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { RawParseUtils.ParseHexInt4(unchecked((byte)VAR_STRING[i])); } return true; } catch (IndexOutOfRangeException) { return false; } }
public static int METHOD_NAME(FileMode VAR_FILEMODE, int VAR_INT) { return VAR_FILEMODE.CopyToLength() + VAR_INT + Constants.OBJECT_ID_LENGTH + LITERAL_INT; }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT) { Output.WriteLine(LITERAL_STRING + this._enclosing.RuleNames[VAR_PARSERRULECONTEXT.RuleIndex] + LITERAL_STRING + this._enclosing._input.LT(LITERAL_INT).Text); }
public virtual ModifyEventSubscriptionResponse METHOD_NAME(ModifyEventSubscriptionRequest VAR_MODIFYEVENTSUBSCRIPTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyEventSubscriptionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyEventSubscriptionResponseUnmarshaller.Instance; return Invoke<ModifyEventSubscriptionResponse>(VAR_MODIFYEVENTSUBSCRIPTIONREQUEST, VAR_VAR); }
public virtual NormalizeCharMap METHOD_NAME() { FST<CharsRef> VAR_FST<CHARSREF>; try { Outputs<CharsRef> VAR_OUTPUTS<CHARSREF> = CharSequenceOutputs.Singleton; Builder<CharsRef> VAR_BUILDER<CHARSREF> = new Builder<CharsRef>(FST.INPUT_TYPE.BYTE2, VAR_OUTPUTS<CHARSREF>); Int32sRef VAR_INT32SREF = new Int32sRef(); foreach (var ent in pendingPairs) { VAR_BUILDER<CHARSREF>.Add(Lucene.Net.Util.Fst.Util.ToUTF16(ent.Key, VAR_INT32SREF), new CharsRef(ent.Value)); } VAR_FST<CHARSREF> = VAR_BUILDER<CHARSREF>.Finish(); pendingPairs.Clear(); } catch (IOException ioe) { throw new Exception(LITERAL_STRING, ioe); } return new NormalizeCharMap(VAR_FST<CHARSREF>); }
public BootstrapActions(string VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { VAR_VALUEEVAL = e.GetErrorEval(); } return BoolEval.ValueOf(METHOD_NAME(VAR_VALUEEVAL)); }
public static IndexDeletionPolicy METHOD_NAME(Config VAR_CONFIG) { string VAR_STRING = VAR_CONFIG.Get(LITERAL_STRING, LITERAL_STRING); Type VAR_TYPE = Type.GetType(VAR_STRING); if (VAR_TYPE == LITERAL_NULL) { throw new Exception(LITERAL_STRING + VAR_STRING + LITERAL_STRING); } else if (VAR_TYPE.Equals(typeof(NoDeletionPolicy))) { return NoDeletionPolicy.INSTANCE; } else { try { return (IndexDeletionPolicy)Activator.CreateInstance(VAR_TYPE); } catch (Exception e) { } } }
public FontRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_font_height = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_attributes = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_color_palette_index = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_bold_weight = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_base_sub_script = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_underline = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_7_family = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_8_charset = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); field_9_zero = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); int VAR_INT = (byte)VAR_RECORDINPUTSTREAM.ReadByte(); int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUByte(); if (VAR_INT > LITERAL_INT) { if (VAR_INT == LITERAL_INT) { field_11_font_name = VAR_RECORDINPUTSTREAM.ReadCompressedUnicode(VAR_INT); } else { field_11_font_name = VAR_RECORDINPUTSTREAM.ReadUnicodeLEString(VAR_INT); } } else { field_11_font_name = LITERAL_STRING; } }
public virtual string METHOD_NAME() { return destination.METHOD_NAME(); }
public override string METHOD_NAME() { return SubSlice.METHOD_NAME() + LITERAL_STRING + Terms; }
public override java.nio.IntBuffer METHOD_NAME() { return java.nio.ReadOnlyIntArrayBuffer.copy(this, _mark); }
protected internal override void METHOD_NAME() { base.METHOD_NAME(); }
public static void METHOD_NAME(double[] VAR_DOUBLE[], int VAR_INT, int VAR_INT, double VAR_DOUBLE) { java.util.Arrays.checkStartAndEnd(VAR_DOUBLE[].Length, VAR_INT, VAR_INT); { for (int i = VAR_INT; i < VAR_INT; i++) { VAR_DOUBLE[][i] = VAR_DOUBLE; } } }
public ByteBuffer METHOD_NAME() { if (nextBlock == POIFSConstants.END_OF_CHAIN) { throw new IndexOutOfRangeException(LITERAL_STRING); } try { loopDetector.Claim(nextBlock); ByteBuffer VAR_BYTEBUFFER = pStream.blockStore.GetBlockAt(nextBlock); nextBlock = pStream.blockStore.GetNextBlock(nextBlock); return VAR_BYTEBUFFER; } catch (IOException e) { throw new RuntimeException(e.Message); } }
public DFAState METHOD_NAME() { return currentState; }
public virtual E METHOD_NAME(E VAR_E) { return backingMap.lowerKey(VAR_E); }
public FinnishLightStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(NumAreas).Append(LITERAL_STRING); for (int k = LITERAL_INT; k < _numberOfRegions; k++) { CellRangeAddress VAR_CELLRANGEADDRESS = _regions[_startIndex + k]; VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLRANGEADDRESS.FirstRow).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLRANGEADDRESS.LastRow).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLRANGEADDRESS.FirstColumn).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_CELLRANGEADDRESS.LastColumn).Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual string METHOD_NAME(int VAR_INT, int VAR_INT, bool VAR_BOOL) { if (VAR_INT == VAR_INT) { return string.Empty; } int VAR_INT = GetStart(VAR_INT); int VAR_INT = GetEnd(VAR_INT - LITERAL_INT); if (VAR_BOOL && content[VAR_INT - LITERAL_INT] == LITERAL_CHAR) { VAR_INT--; } return Decode(VAR_INT, VAR_INT); }
public virtual RevokeDomainAccessResponse METHOD_NAME(RevokeDomainAccessRequest VAR_REVOKEDOMAINACCESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeDomainAccessRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeDomainAccessResponseUnmarshaller.Instance; return Invoke<RevokeDomainAccessResponse>(VAR_REVOKEDOMAINACCESSREQUEST, VAR_VAR); }
public GetPhotoStoreRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DescribeVirtualInterfacesResponse METHOD_NAME(DescribeVirtualInterfacesRequest VAR_DESCRIBEVIRTUALINTERFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVirtualInterfacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeVirtualInterfacesResponse>(VAR_DESCRIBEVIRTUALINTERFACESREQUEST, VAR_VAR); }
public virtual EmptyTreeIterator METHOD_NAME() { return new EmptyTreeIterator(this); }
public java.io.File[] METHOD_NAME(java.io.FileFilter VAR_JAVA.IO.FILEFILTER) { java.io.File[] VAR_JAVA.IO.FILE[] = METHOD_NAME(); if (VAR_JAVA.IO.FILEFILTER == LITERAL_NULL || VAR_JAVA.IO.FILE[] == LITERAL_NULL) { return VAR_JAVA.IO.FILE[]; } java.util.List<java.io.File> VAR_JAVA.UTIL.LIST<JAVA.IO.FILE> = new java.util.ArrayList<java.io.File>(VAR_JAVA.IO.FILE[].Length); foreach (java.io.File file in VAR_JAVA.IO.FILE[]) { if (VAR_JAVA.IO.FILEFILTER.accept(file)) { VAR_JAVA.UTIL.LIST<JAVA.IO.FILE>.add(file); } } return VAR_JAVA.UTIL.LIST<JAVA.IO.FILE>.toArray(new java.io.File[VAR_JAVA.UTIL.LIST<JAVA.IO.FILE>.size()]); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (IsDefaultField(this.m_field)) { return this.m_text.ToString(); } else { return this.m_field + LITERAL_STRING + this.m_text; } }
public virtual WithdrawByoipCidrResponse METHOD_NAME(WithdrawByoipCidrRequest VAR_WITHDRAWBYOIPCIDRREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = WithdrawByoipCidrRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = WithdrawByoipCidrResponseUnmarshaller.Instance; return Invoke<WithdrawByoipCidrResponse>(VAR_WITHDRAWBYOIPCIDRREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_formatFlags); }
public override java.nio.CharBuffer METHOD_NAME(int VAR_INT, char VAR_CHAR) { checkIndex(VAR_INT); byteBuffer.putChar(VAR_INT * libcore.io.SizeOf.CHAR, VAR_CHAR); return this; }
public ICUTransformFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { string VAR_STRING = Require(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING); string VAR_STRING = Get(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, new string[] { LITERAL_STRING, LITERAL_STRING }, LITERAL_STRING, false); TransliterationDirection VAR_TRANSLITERATIONDIRECTION = LITERAL_STRING.Equals(VAR_STRING, StringComparison.Ordinal) ? Transliterator.Forward : Transliterator.Reverse; transliterator = Transliterator.GetInstance(VAR_STRING, VAR_TRANSLITERATIONDIRECTION); if (VAR_IDICTIONARY<STRING, STRING>.Count != LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual UpdateFilterResponse METHOD_NAME(UpdateFilterRequest VAR_UPDATEFILTERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFilterRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFilterResponseUnmarshaller.Instance; return Invoke<UpdateFilterResponse>(VAR_UPDATEFILTERREQUEST, VAR_VAR); }
public StoredField(string VAR_STRING, int VAR_INT) : base(name, TYPE) { FieldsData = new Int32(VAR_INT); }
public int METHOD_NAME(Term VAR_TERM) { int VAR_INT = Field.CompareToOrdinal(VAR_TERM.Field); if (VAR_INT == LITERAL_INT) { return Bytes.METHOD_NAME(VAR_TERM.Bytes); } else { return VAR_INT; } }
public void METHOD_NAME() { lock (this.mBlock) { if (this.mParseState != LITERAL_NULL) { this.mParseState.Dispose(); this.mParseState = LITERAL_NULL; this.mBlock.decOpenCountLocked(); } } }
public virtual float METHOD_NAME() { var VAR_VAR = _filter.Cardinality(); return VAR_VAR / (float)_bloomSize; }
public virtual DeleteResolverEndpointResponse METHOD_NAME(DeleteResolverEndpointRequest VAR_DELETERESOLVERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteResolverEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteResolverEndpointResponseUnmarshaller.Instance; return Invoke<DeleteResolverEndpointResponse>(VAR_DELETERESOLVERENDPOINTREQUEST, VAR_VAR); }
public virtual AssociateHostedConnectionResponse METHOD_NAME(AssociateHostedConnectionRequest VAR_ASSOCIATEHOSTEDCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateHostedConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AssociateHostedConnectionResponse>(VAR_ASSOCIATEHOSTEDCONNECTIONREQUEST, VAR_VAR); }
public string METHOD_NAME() { return this.canonicalName; }
public static void METHOD_NAME(String VAR_STRING, FreeRefFunction VAR_FREEREFFUNCTION) { AnalysisToolPak.METHOD_NAME(VAR_STRING, VAR_FREEREFFUNCTION); }
public GetRepoBuildStatusRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public GetFramedPhotoUrlsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public SimpleHTMLFormatter(string VAR_STRING, string VAR_STRING) { this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { _thedata = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT, _thedata, LITERAL_INT, VAR_INT); }
public virtual string METHOD_NAME() { return key; }
public AttachVolumeRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _volumeId = VAR_STRING; _instanceId = VAR_STRING; _device = VAR_STRING; }
public long METHOD_NAME() { return (blocks.Count + (currentBlock != LITERAL_NULL ? LITERAL_INT : LITERAL_INT)) * bytesUsedPerBlock; }
public override object[] METHOD_NAME() { lock (this._enclosing) { return base.METHOD_NAME(); } }
public RevWalk(Repository VAR_REPOSITORY, int VAR_INT) : base(repo) { this.VAR_INT = VAR_INT; this.UNSHALLOW = NewFlag(LITERAL_STRING); this.REINTERESTING = NewFlag(LITERAL_STRING); }
public override bool METHOD_NAME(object VAR_OBJECT) { return this == VAR_OBJECT; }
public virtual ChangeResourceRecordSetsResponse METHOD_NAME(ChangeResourceRecordSetsRequest VAR_CHANGERESOURCERECORDSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ChangeResourceRecordSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ChangeResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ChangeResourceRecordSetsResponse>(VAR_CHANGERESOURCERECORDSETSREQUEST, VAR_VAR); }
public override java.util.Iterator<K> METHOD_NAME() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is java.util.Collections.ReverseComparator2<T> && ((java.util.Collections.ReverseComparator2<T>)VAR_OBJECT).cmp.METHOD_NAME(cmp); }
public virtual bool METHOD_NAME() { return checkEofAfterPackFooter; }
public virtual DescribeDirectConnectGatewayAssociationProposalsResponse METHOD_NAME(DescribeDirectConnectGatewayAssociationProposalsRequest VAR_DESCRIBEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDirectConnectGatewayAssociationProposalsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDirectConnectGatewayAssociationProposalsResponseUnmarshaller.Instance; return Invoke<DescribeDirectConnectGatewayAssociationProposalsResponse>(VAR_DESCRIBEDIRECTCONNECTGATEWAYASSOCIATIONPROPOSALSREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { this.VAR_BYTE[] = VAR_BYTE[]; pos = VAR_INT; limit = VAR_INT + VAR_INT; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, float VAR_FLOAT) { throw new System.NotImplementedException(); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT == LITERAL_NULL) return false; if (!GetType().METHOD_NAME(VAR_OBJECT.GetType())) return false; return ToString().METHOD_NAME(VAR_OBJECT.ToString(), StringComparison.Ordinal); }
public virtual PutSchemaFromJsonResponse METHOD_NAME(PutSchemaFromJsonRequest VAR_PUTSCHEMAFROMJSONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutSchemaFromJsonRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutSchemaFromJsonResponseUnmarshaller.Instance; return Invoke<PutSchemaFromJsonResponse>(VAR_PUTSCHEMAFROMJSONREQUEST, VAR_VAR); }
public virtual UnassignPrivateIpAddressesResponse METHOD_NAME(UnassignPrivateIpAddressesRequest VAR_UNASSIGNPRIVATEIPADDRESSESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UnassignPrivateIpAddressesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UnassignPrivateIpAddressesResponseUnmarshaller.Instance; return Invoke<UnassignPrivateIpAddressesResponse>(VAR_UNASSIGNPRIVATEIPADDRESSESREQUEST, VAR_VAR); }
public ArrayPtg METHOD_NAME(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { int VAR_INT = VAR_ILITTLEENDIANINPUT.ReadUByte(); short VAR_SHORT = VAR_ILITTLEENDIANINPUT.ReadShort(); VAR_INT++; VAR_SHORT++; int VAR_INT = VAR_SHORT * VAR_INT; Object[] VAR_OBJECT[] = ConstantValueParser.Parse(VAR_ILITTLEENDIANINPUT, VAR_INT); ArrayPtg VAR_ARRAYPTG = new ArrayPtg(_reserved0, _reserved1, _reserved2, VAR_INT, VAR_SHORT, VAR_OBJECT[]); VAR_ARRAYPTG.PtgClass = this.PtgClass; return VAR_ARRAYPTG; }
public NativeUnixDirectory(File VAR_FILE, Directory VAR_DIRECTORY)throws IOException { this (VAR_FILE, DEFAULT_MERGE_BUFFER_SIZE, DEFAULT_MIN_BYTES_DIRECT, VAR_DIRECTORY) ; }
public virtual CreateRestApiResponse METHOD_NAME(CreateRestApiRequest VAR_CREATERESTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateRestApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateRestApiResponseUnmarshaller.Instance; return Invoke<CreateRestApiResponse>(VAR_CREATERESTAPIREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(Ref3DPtg VAR_REF3DPTG) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = CreateExternSheetRefEvaluator(VAR_REF3DPTG.ExternSheetIndex); return new LazyRefEval(VAR_REF3DPTG.Row, VAR_REF3DPTG.Column, VAR_SHEETRANGEEVALUATOR); }
public void METHOD_NAME(FieldInfos VAR_FIELDINFOS) { foreach (FieldInfo fieldInfo in VAR_FIELDINFOS) { METHOD_NAME(fieldInfo); } }
public static dalvik.system.CloseGuard METHOD_NAME() { if (!ENABLED) { return NOOP; } return new dalvik.system.CloseGuard(); }
public virtual void METHOD_NAME(long VAR_LONG) { METHOD_NAME(VAR_LONG.ToString()); }
public static string METHOD_NAME(string VAR_STRING, string VAR_STRING, long VAR_LONG) { if (VAR_LONG == -LITERAL_INT) { return LITERAL_NULL; } else if (VAR_LONG == LITERAL_INT) { return SegmentFileName(VAR_STRING, LITERAL_STRING, VAR_STRING); } else { Debug.Assert(VAR_LONG > LITERAL_INT); StringBuilder VAR_STRINGBUILDER = (new StringBuilder(VAR_STRING.Length + LITERAL_INT + VAR_STRING.Length)).Append(VAR_STRING).Append(LITERAL_CHAR).Append(VAR_LONG.ToString(Character.MaxRadix)); if (VAR_STRING.Length > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR).Append(VAR_STRING); } return VAR_STRINGBUILDER.ToString(); } }
public virtual string METHOD_NAME() { if (Symbol != LITERAL_NULL) { return Symbol.Text; } return LITERAL_NULL; }
public override long METHOD_NAME() { return size; }
public virtual FileMode METHOD_NAME() { return newMode; }
public bool METHOD_NAME() { return opaque; }
public bool METHOD_NAME() { return requireEndImpl(address); }
public static InternalWorkbook METHOD_NAME(ExternSheetRecord[] VAR_EXTERNSHEETRECORD[], BoundSheetRecord[] VAR_BOUNDSHEETRECORD[], SSTRecord VAR_SSTRECORD) { List<Record> VAR_LIST<RECORD> = new List<Record>(); if (VAR_BOUNDSHEETRECORD[] != LITERAL_NULL) { for (int i = LITERAL_INT; i < VAR_BOUNDSHEETRECORD[].Length; i++) { VAR_LIST<RECORD>.Add(VAR_BOUNDSHEETRECORD[][i]); } } if (VAR_SSTRECORD != LITERAL_NULL) { VAR_LIST<RECORD>.Add(VAR_SSTRECORD); } if (VAR_EXTERNSHEETRECORD[] != LITERAL_NULL) { VAR_LIST<RECORD>.Add(SupBookRecord.CreateInternalReferences((short)VAR_EXTERNSHEETRECORD[].Length)); for (int i = LITERAL_INT; i < VAR_EXTERNSHEETRECORD[].Length; i++) { VAR_LIST<RECORD>.Add(VAR_EXTERNSHEETRECORD[][i]); } } VAR_LIST<RECORD>.Add(EOFRecord.instance); return InternalWorkbook.CreateWorkbook(VAR_LIST<RECORD>); }
public virtual string METHOD_NAME() { return LITERAL_NULL; }
public virtual UpdateNotebookInstanceLifecycleConfigResponse METHOD_NAME(UpdateNotebookInstanceLifecycleConfigRequest VAR_UPDATENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateNotebookInstanceLifecycleConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<UpdateNotebookInstanceLifecycleConfigResponse>(VAR_UPDATENOTEBOOKINSTANCELIFECYCLECONFIGREQUEST, VAR_VAR); }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { VAR_RECORDVISITOR.VisitRecord(_pls); for (int i = LITERAL_INT; i < _plsContinues.Length; i++) { VAR_RECORDVISITOR.VisitRecord(_plsContinues[i]); } }
public static BoolEval METHOD_NAME(bool VAR_BOOL) { return VAR_BOOL ? TRUE : FALSE; }
public IEvaluationName METHOD_NAME(String VAR_STRING, int VAR_INT) { for (int i = LITERAL_INT; i < _iBook.NumNames; i++) { NameRecord VAR_NAMERECORD = _iBook.GetNameRecord(i); if (VAR_NAMERECORD.SheetNumber == VAR_INT + LITERAL_INT && VAR_STRING.Equals(VAR_NAMERECORD.NameText, StringComparison.OrdinalIgnoreCase)) { return new Name(VAR_NAMERECORD, i); } } return VAR_INT == -LITERAL_INT ? LITERAL_NULL : METHOD_NAME(VAR_STRING, -LITERAL_INT); }
public String METHOD_NAME(long VAR_LONG) { String VAR_STRING = LITERAL_NULL; if (dictionary != LITERAL_NULL) VAR_STRING = (String)dictionary[VAR_LONG]; if (VAR_STRING == LITERAL_NULL) VAR_STRING = SectionIDMap.METHOD_NAME(FormatID.Bytes, VAR_LONG); if (VAR_STRING == LITERAL_NULL) VAR_STRING = SectionIDMap.UNDEFINED; return VAR_STRING; }
public virtual BatchCreateRoomMembershipResponse METHOD_NAME(BatchCreateRoomMembershipRequest VAR_BATCHCREATEROOMMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchCreateRoomMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchCreateRoomMembershipResponseUnmarshaller.Instance; return Invoke<BatchCreateRoomMembershipResponse>(VAR_BATCHCREATEROOMMEMBERSHIPREQUEST, VAR_VAR); }
public V METHOD_NAME() { return value; }
public virtual DeleteQueueResponse METHOD_NAME(DeleteQueueRequest VAR_DELETEQUEUEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteQueueRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteQueueResponseUnmarshaller.Instance; return Invoke<DeleteQueueResponse>(VAR_DELETEQUEUEREQUEST, VAR_VAR); }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public virtual NGit.BatchRefUpdate METHOD_NAME(ReceiveCommand VAR_RECEIVECOMMAND) { commands.AddItem(VAR_RECEIVECOMMAND); return this; }
public virtual DetachLoadBalancerTargetGroupsResponse METHOD_NAME(DetachLoadBalancerTargetGroupsRequest VAR_DETACHLOADBALANCERTARGETGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachLoadBalancerTargetGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachLoadBalancerTargetGroupsResponseUnmarshaller.Instance; return Invoke<DetachLoadBalancerTargetGroupsResponse>(VAR_DETACHLOADBALANCERTARGETGROUPSREQUEST, VAR_VAR); }
public FrameRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_borderType = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_options = VAR_RECORDINPUTSTREAM.ReadShort(); }
public override sealed Explanation METHOD_NAME(BasicStats VAR_BASICSTATS) { Explanation VAR_EXPLANATION = new Explanation(); VAR_EXPLANATION.Description = this.GetType().Name + LITERAL_STRING; VAR_EXPLANATION.Value = CalculateLambda(VAR_BASICSTATS); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.TotalTermFreq, LITERAL_STRING)); VAR_EXPLANATION.AddDetail(new Explanation(VAR_BASICSTATS.NumberOfDocuments, LITERAL_STRING)); return VAR_EXPLANATION; }
public override bool METHOD_NAME(ValueEval VAR_VALUEEVAL) { if (VAR_VALUEEVAL is ErrorEval) { int VAR_INT = ((ErrorEval)VAR_VALUEEVAL).ErrorCode; return Evaluate(VAR_INT - _value); } return false; }
public S3Signer() { _s3Signer = new Amazon.Runtime.Internal.Auth.S3Signer(AWSConfigsS3.UseSignatureVersion4, RegionDetectionUpdater); }
public virtual RejectDomainTransferFromAnotherAwsAccountResponse METHOD_NAME(RejectDomainTransferFromAnotherAwsAccountRequest VAR_REJECTDOMAINTRANSFERFROMANOTHERAWSACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectDomainTransferFromAnotherAwsAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller.Instance; return Invoke<RejectDomainTransferFromAnotherAwsAccountResponse>(VAR_REJECTDOMAINTRANSFERFROMANOTHERAWSACCOUNTREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual GetIdentityNotificationAttributesResponse METHOD_NAME(GetIdentityNotificationAttributesRequest VAR_GETIDENTITYNOTIFICATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityNotificationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityNotificationAttributesResponseUnmarshaller.Instance; return Invoke<GetIdentityNotificationAttributesResponse>(VAR_GETIDENTITYNOTIFICATIONATTRIBUTESREQUEST, VAR_VAR); }
public override java.nio.DoubleBuffer METHOD_NAME() { return new java.nio.ReadOnlyDoubleArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { if (mSize != LITERAL_INT && VAR_INT <= mKeys[mSize - LITERAL_INT]) { put(VAR_INT, VAR_E); return; } if (mGarbage && mSize >= mKeys.Length) { gc(); } int VAR_INT = mSize; if (VAR_INT >= mKeys.Length) { int VAR_INT = android.util.@internal.ArrayUtils.idealIntArraySize(VAR_INT + LITERAL_INT); int[] VAR_INT[] = new int[VAR_INT]; object[] VAR_OBJECT[] = new object[VAR_INT]; System.Array.Copy(mKeys, LITERAL_INT, VAR_INT[], LITERAL_INT, mKeys.Length); System.Array.Copy(mValues, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, mValues.Length); mKeys = VAR_INT[]; mValues = VAR_OBJECT[]; } mKeys[VAR_INT] = VAR_INT; mValues[VAR_INT] = VAR_E; mSize = VAR_INT + LITERAL_INT; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public long METHOD_NAME() { return RamUsageEstimator.AlignObjectSize(LITERAL_INT * RamUsageEstimator.NUM_BYTES_OBJECT_REF) + docIDs.METHOD_NAME() + offsets.METHOD_NAME(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(Margin).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public FreeTextSuggester(Analyzer VAR_ANALYZER, Analyzer VAR_ANALYZER, int VAR_INT, byte VAR_BYTE) { this.VAR_INT = VAR_INT; this.VAR_ANALYZER = AddShingles(VAR_ANALYZER); this.VAR_ANALYZER = AddShingles(VAR_ANALYZER); if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } if ((VAR_BYTE & LITERAL_INT) != LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_BYTE = VAR_BYTE; }
public CJKWidthFilter(TokenStream VAR_TOKENSTREAM) : base(input) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ModifyVpnTunnelOptionsResponse METHOD_NAME(ModifyVpnTunnelOptionsRequest VAR_MODIFYVPNTUNNELOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpnTunnelOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpnTunnelOptionsResponseUnmarshaller.Instance; return Invoke<ModifyVpnTunnelOptionsResponse>(VAR_MODIFYVPNTUNNELOPTIONSREQUEST, VAR_VAR); }
public override int METHOD_NAME() { if (bitList != LITERAL_INT) { docID = (wordNum << LITERAL_INT) | ((bitList & LITERAL_INT) - LITERAL_INT); bitList = (int)((uint)bitList >> LITERAL_INT); return docID; } NextWord(); if (wordNum == int.MaxValue) { return docID = NO_MORE_DOCS; } bitList = BitUtil.BitList(word); Debug.Assert(bitList != LITERAL_INT); docID = (wordNum << LITERAL_INT) | ((bitList & LITERAL_INT) - LITERAL_INT); bitList = (int)((uint)bitList >> LITERAL_INT); return docID; }
public virtual GetTransitGatewayRouteTableAssociationsResponse METHOD_NAME(GetTransitGatewayRouteTableAssociationsRequest VAR_GETTRANSITGATEWAYROUTETABLEASSOCIATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTransitGatewayRouteTableAssociationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTransitGatewayRouteTableAssociationsResponseUnmarshaller.Instance; return Invoke<GetTransitGatewayRouteTableAssociationsResponse>(VAR_GETTRANSITGATEWAYROUTETABLEASSOCIATIONSREQUEST, VAR_VAR); }
public virtual DescribeLoggingStatusResponse METHOD_NAME(DescribeLoggingStatusRequest VAR_DESCRIBELOGGINGSTATUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLoggingStatusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLoggingStatusResponseUnmarshaller.Instance; return Invoke<DescribeLoggingStatusResponse>(VAR_DESCRIBELOGGINGSTATUSREQUEST, VAR_VAR); }
public PorterStemFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public virtual RefStorage METHOD_NAME() { return storage; }
public static java.nio.CharBuffer METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public virtual CreateVoiceConnectorResponse METHOD_NAME(CreateVoiceConnectorRequest VAR_CREATEVOICECONNECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVoiceConnectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVoiceConnectorResponseUnmarshaller.Instance; return Invoke<CreateVoiceConnectorResponse>(VAR_CREATEVOICECONNECTORREQUEST, VAR_VAR); }
public virtual ParseException METHOD_NAME() { jj_expentries.Clear(); bool[] VAR_BOOL[] = new bool[LITERAL_INT]; if (jj_kind >= LITERAL_INT) { VAR_BOOL[][jj_kind] = true; jj_kind = -LITERAL_INT; } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (jj_la1[i] == jj_gen) { for (int j = LITERAL_INT; j < LITERAL_INT; j++) { if ((jj_la1_0[i] & (LITERAL_INT << j)) != LITERAL_INT) { VAR_BOOL[][j] = true; } } } } for (int i = LITERAL_INT; i < LITERAL_INT; i++) { if (VAR_BOOL[][i]) { jj_expentry = new int[LITERAL_INT]; jj_expentry[LITERAL_INT] = i; jj_expentries.Add(jj_expentry); } } jj_endpos = LITERAL_INT; Jj_rescan_token(); Jj_add_error_token(LITERAL_INT, LITERAL_INT); int[][] VAR_INT[][] = new int[jj_expentries.Count][]; for (int i = LITERAL_INT; i < jj_expentries.Count; i++) { VAR_INT[][][i] = jj_expentries[i]; } return new ParseException(Token, VAR_INT[][], QueryParserConstants.TokenImage); }
public void METHOD_NAME(String VAR_STRING, int VAR_INT) { int VAR_INT = GetSheetIndex(VAR_STRING); BoundSheetRecord VAR_BOUNDSHEETRECORD = boundsheets[VAR_INT]; boundsheets.RemoveAt(VAR_INT); boundsheets.Insert(VAR_INT, VAR_BOUNDSHEETRECORD); int VAR_INT = records.Bspos - (boundsheets.Count - LITERAL_INT); Record VAR_RECORD = records[(VAR_INT + VAR_INT)]; records.Remove(VAR_INT + VAR_INT); records.Add(VAR_INT + VAR_INT, VAR_RECORD); }
public UpdateRepoBuildRuleRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.POST; }
public virtual bool METHOD_NAME(string VAR_STRING) { return map.ContainsKey(VAR_STRING); }
public virtual DescribeAutoScalingInstancesResponse METHOD_NAME() { return METHOD_NAME(new DescribeAutoScalingInstancesRequest()); }
public NLPTokenizerOp() { tokenizer = LITERAL_NULL; }
public virtual int METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public bool METHOD_NAME(IntList VAR_INTLIST) { bool VAR_BOOL = false; for (int j = LITERAL_INT; j < _limit;) { if (!VAR_INTLIST.Contains(_array[j])) { Remove(j); VAR_BOOL = true; } else { j++; } } return VAR_BOOL; }
public virtual string METHOD_NAME() { return path.METHOD_NAME(); }
public virtual UpdateSecurityGroupRuleDescriptionsEgressResponse METHOD_NAME(UpdateSecurityGroupRuleDescriptionsEgressRequest VAR_UPDATESECURITYGROUPRULEDESCRIPTIONSEGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSecurityGroupRuleDescriptionsEgressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSecurityGroupRuleDescriptionsEgressResponseUnmarshaller.Instance; return Invoke<UpdateSecurityGroupRuleDescriptionsEgressResponse>(VAR_UPDATESECURITYGROUPRULEDESCRIPTIONSEGRESSREQUEST, VAR_VAR); }
public virtual SetVaultAccessPolicyResponse METHOD_NAME(SetVaultAccessPolicyRequest VAR_SETVAULTACCESSPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetVaultAccessPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetVaultAccessPolicyResponseUnmarshaller.Instance; return Invoke<SetVaultAccessPolicyResponse>(VAR_SETVAULTACCESSPOLICYREQUEST, VAR_VAR); }
public virtual PutAutoScalingPolicyResponse METHOD_NAME(PutAutoScalingPolicyRequest VAR_PUTAUTOSCALINGPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAutoScalingPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAutoScalingPolicyResponseUnmarshaller.Instance; return Invoke<PutAutoScalingPolicyResponse>(VAR_PUTAUTOSCALINGPOLICYREQUEST, VAR_VAR); }
public virtual CancelReservedInstancesListingResponse METHOD_NAME(CancelReservedInstancesListingRequest VAR_CANCELRESERVEDINSTANCESLISTINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelReservedInstancesListingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelReservedInstancesListingResponseUnmarshaller.Instance; return Invoke<CancelReservedInstancesListingResponse>(VAR_CANCELRESERVEDINSTANCESLISTINGREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual ListTagsForDeliveryStreamResponse METHOD_NAME(ListTagsForDeliveryStreamRequest VAR_LISTTAGSFORDELIVERYSTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForDeliveryStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForDeliveryStreamResponseUnmarshaller.Instance; return Invoke<ListTagsForDeliveryStreamResponse>(VAR_LISTTAGSFORDELIVERYSTREAMREQUEST, VAR_VAR); }
public virtual RegisterDomainResponse METHOD_NAME(RegisterDomainRequest VAR_REGISTERDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterDomainResponseUnmarshaller.Instance; return Invoke<RegisterDomainResponse>(VAR_REGISTERDOMAINREQUEST, VAR_VAR); }
public virtual ListEntityRecognizersResponse METHOD_NAME(ListEntityRecognizersRequest VAR_LISTENTITYRECOGNIZERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListEntityRecognizersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListEntityRecognizersResponseUnmarshaller.Instance; return Invoke<ListEntityRecognizersResponse>(VAR_LISTENTITYRECOGNIZERSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidTimeout, Sharpen.Extensions.ValueOf(VAR_INT))); } timeout = VAR_INT; }
public GetRepoSourceRepoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual DescribeBatchInferenceJobResponse METHOD_NAME(DescribeBatchInferenceJobRequest VAR_DESCRIBEBATCHINFERENCEJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeBatchInferenceJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeBatchInferenceJobResponseUnmarshaller.Instance; return Invoke<DescribeBatchInferenceJobResponse>(VAR_DESCRIBEBATCHINFERENCEJOBREQUEST, VAR_VAR); }
public CreateSecurityGroupRequest(string VAR_STRING, string VAR_STRING) { _groupName = VAR_STRING; _description = VAR_STRING; }
public override int METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { SerializingRecordVisitor VAR_SERIALIZINGRECORDVISITOR = new SerializingRecordVisitor(VAR_BYTE[], VAR_INT); VisitContainedRecords(VAR_SERIALIZINGRECORDVISITOR); return VAR_SERIALIZINGRECORDVISITOR.CountBytesWritten(); }
public virtual BatchGetImageResponse METHOD_NAME(BatchGetImageRequest VAR_BATCHGETIMAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchGetImageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchGetImageResponseUnmarshaller.Instance; return Invoke<BatchGetImageResponse>(VAR_BATCHGETIMAGEREQUEST, VAR_VAR); }
public override int METHOD_NAME() { try { BeginRead(); return base.METHOD_NAME(); } catch (ThreadInterruptedException) { throw ReadTimedOut(); } finally { EndRead(); } }
public virtual PollForActivityTaskResponse METHOD_NAME(PollForActivityTaskRequest VAR_POLLFORACTIVITYTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PollForActivityTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PollForActivityTaskResponseUnmarshaller.Instance; return Invoke<PollForActivityTaskResponse>(VAR_POLLFORACTIVITYTASKREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(StringBuilder VAR_STRINGBUILDER) { return index; }
public virtual float METHOD_NAME(int VAR_INT) { Debug.Assert(IsSupported(VAR_INT)); return LITERAL_FLOAT; }
public override string METHOD_NAME() { return buf.METHOD_NAME(); }
public PrecedenceQueryParser(Analyzer VAR_ANALYZER) : base(analyer) { SetQueryNodeProcessor(new PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler)); }
public int METHOD_NAME() { return _position; }
public override bool METHOD_NAME(object VAR_OBJECT) { return this.GetType() == VAR_OBJECT.GetType(); }
public override java.nio.IntBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public void METHOD_NAME(int VAR_INT) { _out.METHOD_NAME(VAR_INT); _size += LITERAL_INT; }
public virtual ExpireSessionResponse METHOD_NAME(ExpireSessionRequest VAR_EXPIRESESSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExpireSessionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExpireSessionResponseUnmarshaller.Instance; return Invoke<ExpireSessionResponse>(VAR_EXPIRESESSIONREQUEST, VAR_VAR); }
public GetSubscriptionAttributesRequest(string VAR_STRING) { _subscriptionArn = VAR_STRING; }
public virtual GetMetricDataResponse METHOD_NAME(GetMetricDataRequest VAR_GETMETRICDATAREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetMetricDataRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetMetricDataResponseUnmarshaller.Instance; return Invoke<GetMetricDataResponse>(VAR_GETMETRICDATAREQUEST, VAR_VAR); }
public virtual DescribeDhcpOptionsResponse METHOD_NAME(DescribeDhcpOptionsRequest VAR_DESCRIBEDHCPOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDhcpOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDhcpOptionsResponseUnmarshaller.Instance; return Invoke<DescribeDhcpOptionsResponse>(VAR_DESCRIBEDHCPOPTIONSREQUEST, VAR_VAR); }
public virtual java.util.NavigableSet<E> METHOD_NAME(E VAR_E, bool VAR_BOOL, E VAR_E, bool VAR_BOOL) { java.util.Comparator<E> VAR_JAVA.UTIL.COMPARATOR<E> = backingMap.comparator(); int VAR_INT = (VAR_JAVA.UTIL.COMPARATOR<E> == LITERAL_NULL) ? ((java.lang.Comparable<E>)VAR_E).compareTo(VAR_E) : VAR_JAVA.UTIL.COMPARATOR<E>.compare(VAR_E, VAR_E); if (VAR_INT <= LITERAL_INT) { return new java.util.TreeSet<E>(backingMap.subMap(VAR_E, VAR_BOOL, VAR_E, VAR_BOOL)); } throw new System.ArgumentException(); }
public virtual SendEmailResponse METHOD_NAME(SendEmailRequest VAR_SENDEMAILREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendEmailRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendEmailResponseUnmarshaller.Instance; return Invoke<SendEmailResponse>(VAR_SENDEMAILREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return Convert.METHOD_NAME(this._value, CultureInfo.CurrentCulture); }
public static double METHOD_NAME(DateTime VAR_DATETIME) { return METHOD_NAME(VAR_DATETIME, false); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is ItalianStemmer; }
public virtual ListenerHandle METHOD_NAME(IndexChangedListener VAR_INDEXCHANGEDLISTENER) { return AddListener<IndexChangedListener>(VAR_INDEXCHANGEDLISTENER); }
public virtual SynthesizeSpeechResponse METHOD_NAME(SynthesizeSpeechRequest VAR_SYNTHESIZESPEECHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SynthesizeSpeechRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SynthesizeSpeechResponseUnmarshaller.Instance; return Invoke<SynthesizeSpeechResponse>(VAR_SYNTHESIZESPEECHREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(TextFragment VAR_TEXTFRAGMENT) { TextEndPos = VAR_TEXTFRAGMENT.TextEndPos; Score = Math.Max(Score, VAR_TEXTFRAGMENT.Score); }
public virtual CreateLedgerResponse METHOD_NAME(CreateLedgerRequest VAR_CREATELEDGERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateLedgerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateLedgerResponseUnmarshaller.Instance; return Invoke<CreateLedgerResponse>(VAR_CREATELEDGERREQUEST, VAR_VAR); }
public virtual DescribeFleetPortSettingsResponse METHOD_NAME(DescribeFleetPortSettingsRequest VAR_DESCRIBEFLEETPORTSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetPortSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetPortSettingsResponseUnmarshaller.Instance; return Invoke<DescribeFleetPortSettingsResponse>(VAR_DESCRIBEFLEETPORTSETTINGSREQUEST, VAR_VAR); }
public string METHOD_NAME() { return host; }
public override short METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getShort(_position++ * libcore.io.SizeOf.SHORT); }
public void METHOD_NAME(ICharStream VAR_ICHARSTREAM) { jjmatchedPos = jjnewStateCnt = LITERAL_INT; curLexState = defaultLexState; m_input_stream = VAR_ICHARSTREAM; ReInitRounds(); }
public override void METHOD_NAME(int VAR_INT, long VAR_LONG) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; blocks[VAR_INT] = (blocks[VAR_INT] & ~(LITERAL_INT << VAR_INT)) | (VAR_LONG << VAR_INT); }
public ByteSequencesWriter(DataOutput VAR_DATAOUTPUT) { this.VAR_DATAOUTPUT = VAR_DATAOUTPUT; }
public MultiTermsEnum(ReaderSlice[] VAR_READERSLICE[]) { queue = new TermMergeQueue(VAR_READERSLICE[].Length); top = new TermsEnumWithSlice[VAR_READERSLICE[].Length]; subs = new TermsEnumWithSlice[VAR_READERSLICE[].Length]; subDocs = new MultiDocsEnum.EnumWithSlice[VAR_READERSLICE[].Length]; subDocsAndPositions = new MultiDocsAndPositionsEnum.EnumWithSlice[VAR_READERSLICE[].Length]; for (int i = LITERAL_INT; i < VAR_READERSLICE[].Length; i++) { subs[i] = new TermsEnumWithSlice(i, VAR_READERSLICE[][i]); subDocs[i] = new MultiDocsEnum.EnumWithSlice(); subDocs[i].Slice = VAR_READERSLICE[][i]; subDocsAndPositions[i] = new MultiDocsAndPositionsEnum.EnumWithSlice(); subDocsAndPositions[i].Slice = VAR_READERSLICE[][i]; } currentSubs = new TermsEnumWithSlice[VAR_READERSLICE[].Length]; }
public char METHOD_NAME() { if (start == end) { return java.text.CharacterIteratorClass.DONE; } offset = end - LITERAL_INT; return @string[offset]; }
public AttributeSource(AttributeFactory VAR_ATTRIBUTEFACTORY) { this.attributes = new JCG.LinkedDictionary<Type, Util.Attribute>(); this.attributeImpls = new JCG.LinkedDictionary<Type, Util.Attribute>(); this.currentState = new State[LITERAL_INT]; this.VAR_ATTRIBUTEFACTORY = VAR_ATTRIBUTEFACTORY; }
public java.util.regex.Matcher METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return METHOD_NAME(VAR_JAVA.LANG.CHARSEQUENCE, LITERAL_INT, VAR_JAVA.LANG.CHARSEQUENCE.Length); }
public virtual GetConfigurationProfileResponse METHOD_NAME(GetConfigurationProfileRequest VAR_GETCONFIGURATIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetConfigurationProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetConfigurationProfileResponseUnmarshaller.Instance; return Invoke<GetConfigurationProfileResponse>(VAR_GETCONFIGURATIONPROFILEREQUEST, VAR_VAR); }
public ValueEval METHOD_NAME(int VAR_INT, int VAR_INT) { return new NumberEval(VAR_INT + LITERAL_INT); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT) { Debug.Assert(VAR_INT >= LITERAL_INT, LITERAL_STRING + VAR_INT + LITERAL_STRING); if (VAR_FLOAT[].Length < VAR_INT) { float[] VAR_FLOAT[] = new float[Oversize(VAR_INT, RamUsageEstimator.NUM_BYTES_SINGLE)]; Array.Copy(VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[], LITERAL_INT, VAR_FLOAT[].Length); return VAR_FLOAT[]; } else { return VAR_FLOAT[]; } }
public virtual DescribeVpcPeeringConnectionsResponse METHOD_NAME(DescribeVpcPeeringConnectionsRequest VAR_DESCRIBEVPCPEERINGCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeVpcPeeringConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeVpcPeeringConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeVpcPeeringConnectionsResponse>(VAR_DESCRIBEVPCPEERINGCONNECTIONSREQUEST, VAR_VAR); }
public override java.nio.FloatBuffer METHOD_NAME(float VAR_FLOAT) { throw new java.nio.ReadOnlyBufferException(); }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = LITERAL_INT; for (int i = VAR_INT; i < VAR_INT; i++) { VAR_INT += _ptgs[i].Size; } return VAR_INT; }
public DirectBytesStartArray(int VAR_INT, Counter VAR_COUNTER) { this.bytesUsed = VAR_COUNTER; this.m_initSize = VAR_INT; }
public override void METHOD_NAME() { foreach (T[] block in directory) { if (block != LITERAL_NULL) { Arrays.Fill(block, default(T)); } } size = LITERAL_INT; tailDirIdx = LITERAL_INT; tailBlkIdx = LITERAL_INT; tailBlock = directory[LITERAL_INT]; }
public virtual UploadMultipartPartResponse METHOD_NAME(UploadMultipartPartRequest VAR_UPLOADMULTIPARTPARTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UploadMultipartPartRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UploadMultipartPartResponseUnmarshaller.Instance; return Invoke<UploadMultipartPartResponse>(VAR_UPLOADMULTIPARTPARTREQUEST, VAR_VAR); }
public HCenterRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_hcenter = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual CreateDBClusterEndpointResponse METHOD_NAME(CreateDBClusterEndpointRequest VAR_CREATEDBCLUSTERENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBClusterEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBClusterEndpointResponseUnmarshaller.Instance; return Invoke<CreateDBClusterEndpointResponse>(VAR_CREATEDBCLUSTERENDPOINTREQUEST, VAR_VAR); }
public bool METHOD_NAME() { return iterator.nextIndex() < end; }
public CredentialItem(string VAR_STRING, bool VAR_BOOL) { this.VAR_STRING = VAR_STRING; this.valueSecure = VAR_BOOL; }
public virtual DescribeCustomAvailabilityZonesResponse METHOD_NAME(DescribeCustomAvailabilityZonesRequest VAR_DESCRIBECUSTOMAVAILABILITYZONESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCustomAvailabilityZonesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCustomAvailabilityZonesResponseUnmarshaller.Instance; return Invoke<DescribeCustomAvailabilityZonesResponse>(VAR_DESCRIBECUSTOMAVAILABILITYZONESREQUEST, VAR_VAR); }
public virtual DescribeClusterParameterGroupsResponse METHOD_NAME() { return METHOD_NAME(new DescribeClusterParameterGroupsRequest()); }
public Item(char VAR_CHAR, char VAR_CHAR) { parent = VAR_CHAR; child = VAR_CHAR; }
public void METHOD_NAME(int[] VAR_INT[], int[] VAR_INT[]) { this.VAR_INT[] = VAR_INT[]; this.VAR_INT[] = VAR_INT[]; if (VAR_INT[] != LITERAL_NULL && tmpFreqs == LITERAL_NULL) { tmpFreqs = new int[tmpDocs.Length]; } }
public virtual ChangeMessageVisibilityResponse METHOD_NAME(string VAR_STRING, string VAR_STRING, int VAR_INT) { var VAR_VAR = new ChangeMessageVisibilityRequest(); VAR_VAR.QueueUrl = VAR_STRING; VAR_VAR.ReceiptHandle = VAR_STRING; VAR_VAR.VisibilityTimeout = VAR_INT; return METHOD_NAME(VAR_VAR); }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return this.processors.METHOD_NAME(VAR_OBJECT); }
public override int METHOD_NAME(int VAR_INT) { return returnState; }
public virtual ModifyVolumeAttributeResponse METHOD_NAME(ModifyVolumeAttributeRequest VAR_MODIFYVOLUMEATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVolumeAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVolumeAttributeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeAttributeResponse>(VAR_MODIFYVOLUMEATTRIBUTEREQUEST, VAR_VAR); }
public virtual DeleteVolumeResponse METHOD_NAME(DeleteVolumeRequest VAR_DELETEVOLUMEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVolumeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVolumeResponseUnmarshaller.Instance; return Invoke<DeleteVolumeResponse>(VAR_DELETEVOLUMEREQUEST, VAR_VAR); }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, long VAR_LONG) { checkIndex(VAR_INT, libcore.io.SizeOf.LONG); libcore.io.Memory.pokeLong(backingArray, offset + VAR_INT, VAR_LONG, _order); return this; }
public virtual bool METHOD_NAME() { return changeType != DiffEntry.ChangeType.MODIFY || newMode != oldMode; }
public override void METHOD_NAME(FieldInfo VAR_FIELDINFO) { count = interval; }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new JapaneseReadingFormFilter(VAR_TOKENSTREAM, useRomaji); }
public static CellRangeAddress METHOD_NAME(String VAR_STRING) { int VAR_INT = VAR_STRING.IndexOf(LITERAL_STRING, StringComparison.Ordinal); CellReference VAR_CELLREFERENCE; CellReference VAR_CELLREFERENCE; if (VAR_INT == -LITERAL_INT) { VAR_CELLREFERENCE = new CellReference(VAR_STRING); VAR_CELLREFERENCE = VAR_CELLREFERENCE; } else { VAR_CELLREFERENCE = new CellReference(VAR_STRING.Substring(LITERAL_INT, VAR_INT)); VAR_CELLREFERENCE = new CellReference(VAR_STRING.Substring(VAR_INT + LITERAL_INT)); } return new CellRangeAddress(VAR_CELLREFERENCE.Row, VAR_CELLREFERENCE.Row, VAR_CELLREFERENCE.Col, VAR_CELLREFERENCE.Col); }
public virtual ModifySelfservicePermissionsResponse METHOD_NAME(ModifySelfservicePermissionsRequest VAR_MODIFYSELFSERVICEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifySelfservicePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifySelfservicePermissionsResponseUnmarshaller.Instance; return Invoke<ModifySelfservicePermissionsResponse>(VAR_MODIFYSELFSERVICEPERMISSIONSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(string VAR_STRING) { int VAR_INT; if (TokenTypeMap.TryGetValue(VAR_STRING, out VAR_INT)) { return VAR_INT; } return TokenConstants.InvalidType; }
public virtual int METHOD_NAME(java.nio.LongBuffer VAR_JAVA.NIO.LONGBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.LONGBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.LONGBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.LONGBUFFER._position; long VAR_LONG; long VAR_LONG; while (VAR_INT > LITERAL_INT) { VAR_LONG = get(VAR_INT); VAR_LONG = VAR_JAVA.NIO.LONGBUFFER.get(VAR_INT); if (VAR_LONG != VAR_LONG) { return VAR_LONG < VAR_LONG ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.LONGBUFFER.remaining(); }
public virtual ApproveSkillResponse METHOD_NAME(ApproveSkillRequest VAR_APPROVESKILLREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ApproveSkillRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ApproveSkillResponseUnmarshaller.Instance; return Invoke<ApproveSkillResponse>(VAR_APPROVESKILLREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { if (_ulrOutput.AvailableSpace < VAR_INT) { WriteContinue(); } }
public virtual GetApiKeysResponse METHOD_NAME(GetApiKeysRequest VAR_GETAPIKEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApiKeysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApiKeysResponseUnmarshaller.Instance; return Invoke<GetApiKeysResponse>(VAR_GETAPIKEYSREQUEST, VAR_VAR); }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public int METHOD_NAME(RowColKey VAR_ROWCOLKEY) { int VAR_INT = _rowIndex - VAR_ROWCOLKEY._rowIndex; if (VAR_INT != LITERAL_INT) { return VAR_INT; } return _columnIndex - VAR_ROWCOLKEY._columnIndex; }
public ATNConfig(ATNConfig VAR_ATNCONFIG, ATNState VAR_ATNSTATE, PredictionContext VAR_PREDICTIONCONTEXT, SemanticContext VAR_SEMANTICCONTEXT) { this.VAR_ATNSTATE = VAR_ATNSTATE; this.alt = VAR_ATNCONFIG.alt; this.VAR_PREDICTIONCONTEXT = VAR_PREDICTIONCONTEXT; this.VAR_SEMANTICCONTEXT = VAR_SEMANTICCONTEXT; this.reachesIntoOuterContext = VAR_ATNCONFIG.reachesIntoOuterContext; }
public void METHOD_NAME(FormulaShifter VAR_FORMULASHIFTER) { for (int i = LITERAL_INT; i < NumNames; ++i) { NameRecord VAR_NAMERECORD = GetNameRecord(i); Ptg[] VAR_PTG[] = VAR_NAMERECORD.NameDefinition; if (VAR_FORMULASHIFTER.AdjustFormula(VAR_PTG[], VAR_NAMERECORD.SheetNumber)) { VAR_NAMERECORD.NameDefinition = VAR_PTG[]; } } }
public virtual ListReviewPolicyResultsForHITResponse METHOD_NAME(ListReviewPolicyResultsForHITRequest VAR_LISTREVIEWPOLICYRESULTSFORHITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListReviewPolicyResultsForHITRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListReviewPolicyResultsForHITResponseUnmarshaller.Instance; return Invoke<ListReviewPolicyResultsForHITResponse>(VAR_LISTREVIEWPOLICYRESULTSFORHITREQUEST, VAR_VAR); }
public virtual GetExportResponse METHOD_NAME(GetExportRequest VAR_GETEXPORTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetExportRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetExportResponseUnmarshaller.Instance; return Invoke<GetExportResponse>(VAR_GETEXPORTREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(float VAR_FLOAT, float VAR_FLOAT, double VAR_DOUBLE, float VAR_FLOAT) { tf_hyper_min = VAR_FLOAT; tf_hyper_max = VAR_FLOAT; tf_hyper_base = VAR_DOUBLE; tf_hyper_xoffset = VAR_FLOAT; }
public override java.nio.CharBuffer METHOD_NAME() { return new java.nio.ReadWriteCharArrayBuffer(remaining(), backingArray, offset + _position); }
public LexerNoViableAltException(Lexer VAR_LEXER, ICharStream VAR_ICHARSTREAM, int VAR_INT, ATNConfigSet VAR_ATNCONFIGSET) : base(lexer, input) { this.VAR_INT = VAR_INT; this.VAR_ATNCONFIGSET = VAR_ATNCONFIGSET; }
public virtual CreateCompilationJobResponse METHOD_NAME(CreateCompilationJobRequest VAR_CREATECOMPILATIONJOBREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCompilationJobRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCompilationJobResponseUnmarshaller.Instance; return Invoke<CreateCompilationJobResponse>(VAR_CREATECOMPILATIONJOBREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return position; }
public virtual bool METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { java.nio.CharBuffer VAR_JAVA.NIO.CHARBUFFER; if (VAR_JAVA.LANG.CHARSEQUENCE is java.nio.CharBuffer) { VAR_JAVA.NIO.CHARBUFFER = ((java.nio.CharBuffer)VAR_JAVA.LANG.CHARSEQUENCE).duplicate(); } else { VAR_JAVA.NIO.CHARBUFFER = java.nio.CharBuffer.wrap(VAR_JAVA.LANG.CHARSEQUENCE); } return implCanEncode(VAR_JAVA.NIO.CHARBUFFER); }
public virtual void METHOD_NAME(int VAR_INT, E VAR_E) { lock (this) { object[] VAR_OBJECT[] = new object[elements.Length + LITERAL_INT]; System.Array.Copy(elements, LITERAL_INT, VAR_OBJECT[], LITERAL_INT, VAR_INT); VAR_OBJECT[][VAR_INT] = VAR_E; System.Array.Copy(elements, VAR_INT, VAR_OBJECT[], VAR_INT + LITERAL_INT, elements.Length - VAR_INT); elements = VAR_OBJECT[]; } }
public virtual StopMonitoringScheduleResponse METHOD_NAME(StopMonitoringScheduleRequest VAR_STOPMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<StopMonitoringScheduleResponse>(VAR_STOPMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public int METHOD_NAME(int VAR_INT) { return field_5_dbcells.Get(VAR_INT); }
public sealed override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public virtual string[] METHOD_NAME(string[] VAR_STRING[], string[] VAR_STRING[], double[] VAR_DOUBLE[]) { lock (this) { string[] VAR_STRING[] = chunker.chunk(VAR_STRING[], VAR_STRING[]); if (VAR_DOUBLE[] != LITERAL_NULL) chunker.VAR_DOUBLE[](VAR_DOUBLE[]); return VAR_STRING[]; } }
public virtual Ref METHOD_NAME() { return this; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(OptionFlags)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(RowHeight)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public AlibabaCloudCredentials METHOD_NAME() { return credentials; }
public override SeekStatus METHOD_NAME(BytesRef VAR_BYTESREF) { throw new System.NotSupportedException(); }
public java.util.NavigableSet<K> METHOD_NAME() { java.util.TreeMap<K, V>.BoundedMap.BoundedKeySet VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDKEYSET = this._keySet; return VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDKEYSET != LITERAL_NULL ? VAR_JAVA.UTIL.TREEMAP<K, V>.BOUNDEDMAP.BOUNDEDKEYSET : (this._keySet = new java.util.TreeMap<K, V>.BoundedMap.BoundedKeySet(this)); }
public ListEventsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_wStyle).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_cLine).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_dxMin).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_str).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(_unused).Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override string METHOD_NAME() { return LITERAL_STRING + this.phase + LITERAL_STRING + this.bytesUsed + LITERAL_STRING; }
public virtual RemoteRefUpdate METHOD_NAME(string VAR_STRING) { return remoteUpdates.Get(VAR_STRING); }
public virtual java.util.Iterator<E> METHOD_NAME() { object[] VAR_OBJECT[] = elements; return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public TerminateInstancesRequest(List<string> VAR_LIST<STRING>) { _instanceIds = VAR_LIST<STRING>; }
public virtual CreateDataRepositoryTaskResponse METHOD_NAME(CreateDataRepositoryTaskRequest VAR_CREATEDATAREPOSITORYTASKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDataRepositoryTaskRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDataRepositoryTaskResponseUnmarshaller.Instance; return Invoke<CreateDataRepositoryTaskResponse>(VAR_CREATEDATAREPOSITORYTASKREQUEST, VAR_VAR); }
public virtual UndeprecateActivityTypeResponse METHOD_NAME(UndeprecateActivityTypeRequest VAR_UNDEPRECATEACTIVITYTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UndeprecateActivityTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UndeprecateActivityTypeResponseUnmarshaller.Instance; return Invoke<UndeprecateActivityTypeResponse>(VAR_UNDEPRECATEACTIVITYTYPEREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { EndRecord VAR_ENDRECORD = new EndRecord(); return VAR_ENDRECORD; }
public virtual ListLabelingJobsResponse METHOD_NAME(ListLabelingJobsRequest VAR_LISTLABELINGJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLabelingJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLabelingJobsResponseUnmarshaller.Instance; return Invoke<ListLabelingJobsResponse>(VAR_LISTLABELINGJOBSREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING) { this.tag = VAR_STRING; }
public String METHOD_NAME(NamePtg VAR_NAMEPTG) { return _iBook.GetNameRecord(VAR_NAMEPTG.Index).NameText; }
public Builder() { data = new GrowableByteArrayDataOutput(LITERAL_INT); bufferSize = LITERAL_INT; previousDoc = -LITERAL_INT; indexInterval = LITERAL_INT; cardinality = LITERAL_INT; numBlocks = LITERAL_INT; }
public SpanPositionRangeQuery(SpanQuery VAR_SPANQUERY, int VAR_INT, int VAR_INT) : base(match) { this.m_start = VAR_INT; this.m_end = VAR_INT; }
public virtual CreateDBProxyResponse METHOD_NAME(CreateDBProxyRequest VAR_CREATEDBPROXYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDBProxyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDBProxyResponseUnmarshaller.Instance; return Invoke<CreateDBProxyResponse>(VAR_CREATEDBPROXYREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is LovinsStemmer; }
public virtual ModifyReplicationGroupShardConfigurationResponse METHOD_NAME(ModifyReplicationGroupShardConfigurationRequest VAR_MODIFYREPLICATIONGROUPSHARDCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyReplicationGroupShardConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyReplicationGroupShardConfigurationResponseUnmarshaller.Instance; return Invoke<ModifyReplicationGroupShardConfigurationResponse>(VAR_MODIFYREPLICATIONGROUPSHARDCONFIGURATIONREQUEST, VAR_VAR); }
public virtual DeleteFacesResponse METHOD_NAME(DeleteFacesRequest VAR_DELETEFACESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFacesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFacesResponseUnmarshaller.Instance; return Invoke<DeleteFacesResponse>(VAR_DELETEFACESREQUEST, VAR_VAR); }
public SSTSerializer(IntMapper<UnicodeString> VAR_INTMAPPER<UNICODESTRING>, int VAR_INT, int VAR_INT) { this.VAR_INTMAPPER<UNICODESTRING> = VAR_INTMAPPER<UNICODESTRING>; _numStrings = VAR_INT; _numUniqueStrings = VAR_INT; int VAR_INT = ExtSSTRecord.GetNumberOfInfoRecsForStrings(VAR_INTMAPPER<UNICODESTRING>.Size); this.bucketAbsoluteOffsets = new int[VAR_INT]; this.bucketRelativeOffsets = new int[VAR_INT]; }
public URISyntaxException(string VAR_STRING, string VAR_STRING, int VAR_INT) : base(reason) { if (VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL) { throw new System.ArgumentNullException(); } if (VAR_INT < -LITERAL_INT) { throw new System.ArgumentException(); } this.VAR_STRING = VAR_STRING; this.VAR_INT = VAR_INT; }
public override string METHOD_NAME() { return LITERAL_STRING + Dim + LITERAL_STRING + Arrays.METHOD_NAME(Path) + LITERAL_STRING + Assoc + LITERAL_STRING; }
public virtual bool METHOD_NAME() { return true; }
public static AttrPtg METHOD_NAME() { return new AttrPtg(optiSum.Set(LITERAL_INT), LITERAL_INT, LITERAL_NULL, -LITERAL_INT); }
public virtual GetModelsResponse METHOD_NAME(GetModelsRequest VAR_GETMODELSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetModelsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetModelsResponseUnmarshaller.Instance; return Invoke<GetModelsResponse>(VAR_GETMODELSREQUEST, VAR_VAR); }
public virtual RefStorage METHOD_NAME() { return RefStorage.LOOSE; }
public ForwardBytesReader(byte[] VAR_BYTE[]) { this.VAR_BYTE[] = VAR_BYTE[]; }
public virtual long METHOD_NAME() { return fst == LITERAL_NULL ? LITERAL_INT : fst.GetSizeInBytes(); }
public override java.nio.ShortBuffer METHOD_NAME() { return java.nio.ReadOnlyShortArrayBuffer.copy(this, _mark); }
public virtual ListFiltersResponse METHOD_NAME(ListFiltersRequest VAR_LISTFILTERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListFiltersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListFiltersResponseUnmarshaller.Instance; return Invoke<ListFiltersResponse>(VAR_LISTFILTERSREQUEST, VAR_VAR); }
public HSSFRichTextString(String VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { _string = new UnicodeString(LITERAL_STRING); } else { this._string = new UnicodeString(VAR_STRING); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Buffer.BlockCopy(bytes, pos, VAR_BYTE[], VAR_INT, VAR_INT); pos += VAR_INT; }
public virtual UpdateDomainNameserversResponse METHOD_NAME(UpdateDomainNameserversRequest VAR_UPDATEDOMAINNAMESERVERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDomainNameserversRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDomainNameserversResponseUnmarshaller.Instance; return Invoke<UpdateDomainNameserversResponse>(VAR_UPDATEDOMAINNAMESERVERSREQUEST, VAR_VAR); }
public virtual ListWorkersWithQualificationTypeResponse METHOD_NAME(ListWorkersWithQualificationTypeRequest VAR_LISTWORKERSWITHQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWorkersWithQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWorkersWithQualificationTypeResponseUnmarshaller.Instance; return Invoke<ListWorkersWithQualificationTypeResponse>(VAR_LISTWORKERSWITHQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public ResetCacheParameterGroupRequest(string VAR_STRING, List<ParameterNameValue> VAR_LIST<PARAMETERNAMEVALUE>) { _cacheParameterGroupName = VAR_STRING; _parameterNameValues = VAR_LIST<PARAMETERNAMEVALUE>; }
public EscherPropertyMetaData(String VAR_STRING) { this.VAR_STRING = VAR_STRING; }
public UserInputQueryBuilder(string VAR_STRING, Analyzer VAR_ANALYZER) { this.VAR_ANALYZER = VAR_ANALYZER; this.VAR_STRING = VAR_STRING; }
public java.nio.charset.CharsetDecoder METHOD_NAME(string VAR_STRING) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } if (string.IsNullOrEmpty(VAR_STRING)) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_STRING.Length > maxCharsPerByte()) { throw new System.ArgumentException(LITERAL_STRING + VAR_STRING.Length + LITERAL_STRING + maxCharsPerByte()); } replacementChars = VAR_STRING; implReplaceWith(VAR_STRING); return this; }
public virtual void METHOD_NAME() { throw new System.IO.IOException(); }
public virtual UpdateFileSystemResponse METHOD_NAME(UpdateFileSystemRequest VAR_UPDATEFILESYSTEMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFileSystemRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFileSystemResponseUnmarshaller.Instance; return Invoke<UpdateFileSystemResponse>(VAR_UPDATEFILESYSTEMREQUEST, VAR_VAR); }
public int METHOD_NAME() { return _in.METHOD_NAME(); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(WSBool1)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Autobreaks).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(Dialog).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(RowSumsBelow).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(RowSumsRight).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(WSBool2)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(FitToPage).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(DisplayGuts).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(AlternateExpression).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(AlternateFormula).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual PutGatewayResponseResponse METHOD_NAME(PutGatewayResponseRequest VAR_PUTGATEWAYRESPONSEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutGatewayResponseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutGatewayResponseResponseUnmarshaller.Instance; return Invoke<PutGatewayResponseResponse>(VAR_PUTGATEWAYRESPONSEREQUEST, VAR_VAR); }
public Term[] METHOD_NAME() { IList<Term> VAR_ILIST<TERM> = new List<Term>(); foreach (string fieldName in stopWordsPerField.Keys) { ISet<string> VAR_ISET<STRING> = stopWordsPerField[fieldName]; foreach (string text in VAR_ISET<STRING>) { VAR_ILIST<TERM>.Add(new Term(fieldName, text)); } } return VAR_ILIST<TERM>.ToArray(); }
public virtual bool METHOD_NAME() { return update; }
public static InternalSheet METHOD_NAME(RecordStream VAR_RECORDSTREAM) { return new InternalSheet(VAR_RECORDSTREAM); }
public sealed override java.nio.IntBuffer METHOD_NAME(int[] VAR_INT[], int VAR_INT, int VAR_INT) { if (VAR_INT > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, VAR_INT[], VAR_INT, VAR_INT); _position += VAR_INT; return this; }
public virtual DisassociateVpcCidrBlockResponse METHOD_NAME(DisassociateVpcCidrBlockRequest VAR_DISASSOCIATEVPCCIDRBLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateVpcCidrBlockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateVpcCidrBlockResponseUnmarshaller.Instance; return Invoke<DisassociateVpcCidrBlockResponse>(VAR_DISASSOCIATEVPCCIDRBLOCKREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(TaskStats VAR_TASKSTATS) { numRuns += VAR_TASKSTATS.NumRuns; elapsed += VAR_TASKSTATS.Elapsed; maxTotMem += VAR_TASKSTATS.MaxTotMem; maxUsedMem += VAR_TASKSTATS.MaxUsedMem; count += VAR_TASKSTATS.Count; if (round != VAR_TASKSTATS.round) { round = -LITERAL_INT; } if (countsByTime != LITERAL_NULL && VAR_TASKSTATS.countsByTime != LITERAL_NULL) { if (countsByTimeStepMSec != VAR_TASKSTATS.countsByTimeStepMSec) { throw new InvalidOperationException(LITERAL_STRING); } if (countsByTime.Length != VAR_TASKSTATS.countsByTime.Length) { throw new InvalidOperationException(LITERAL_STRING); } for (int i = LITERAL_INT; i < VAR_TASKSTATS.countsByTime.Length; i++) { countsByTime[i] += VAR_TASKSTATS.countsByTime[i]; } } }
public virtual StartStreamProcessorResponse METHOD_NAME(StartStreamProcessorRequest VAR_STARTSTREAMPROCESSORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartStreamProcessorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartStreamProcessorResponseUnmarshaller.Instance; return Invoke<StartStreamProcessorResponse>(VAR_STARTSTREAMPROCESSORREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(char VAR_CHAR) { METHOD_NAME(VAR_CHAR.ToString()); }
public StepConfig(string VAR_STRING, HadoopJarStepConfig VAR_HADOOPJARSTEPCONFIG) { _name = VAR_STRING; _hadoopJarStep = VAR_HADOOPJARSTEPCONFIG; }
public virtual GetIdentityPoliciesResponse METHOD_NAME(GetIdentityPoliciesRequest VAR_GETIDENTITYPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdentityPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdentityPoliciesResponseUnmarshaller.Instance; return Invoke<GetIdentityPoliciesResponse>(VAR_GETIDENTITYPOLICIESREQUEST, VAR_VAR); }
public virtual ListAccountsResponse METHOD_NAME(ListAccountsRequest VAR_LISTACCOUNTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAccountsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAccountsResponseUnmarshaller.Instance; return Invoke<ListAccountsResponse>(VAR_LISTACCOUNTSREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return compressionLevel; }
public java.lang.StringBuffer METHOD_NAME(char[] VAR_CHAR[]) { lock (this) { append0(VAR_CHAR[]); return this; } }
public override string METHOD_NAME() { return key + LITERAL_STRING + value; }
public override long METHOD_NAME(long VAR_LONG) { if (VAR_LONG < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_LONG); } lock (@lock) { checkNotClosed(); if (VAR_LONG < LITERAL_INT) { return LITERAL_INT; } if (end - pos >= VAR_LONG) { pos += (int)(VAR_LONG); return VAR_LONG; } long VAR_LONG = end - pos; pos = end; while (VAR_LONG < VAR_LONG) { if (fillBuf() == -LITERAL_INT) { return VAR_LONG; } if (end - pos >= VAR_LONG - VAR_LONG) { pos += (int)(VAR_LONG - VAR_LONG); return VAR_LONG; } VAR_LONG += (end - pos); pos = end; } return VAR_LONG; } }
public void METHOD_NAME(FormulaShifter VAR_FORMULASHIFTER, int VAR_INT) { _valuesAgg.METHOD_NAME(VAR_FORMULASHIFTER, VAR_INT); }
public override void METHOD_NAME() { lock (@lock) { if (isOpen()) { buf = LITERAL_NULL; } } }
public override void METHOD_NAME(long VAR_LONG) { this.VAR_LONG = (int)(VAR_LONG - pointer); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); bool VAR_BOOL = false; if (externalWorkbookNumber >= LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(externalWorkbookNumber); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_BOOL = true; } if (sheetName != LITERAL_NULL) { SheetNameFormatter.AppendFormat(VAR_STRINGBUILDER, sheetName); VAR_BOOL = true; } if (VAR_BOOL) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(nameName); return VAR_STRINGBUILDER.ToString(); }
public virtual bool METHOD_NAME() { return mState == STATE_IDLE; }
public static NGit.Transport.Transport METHOD_NAME(Repository VAR_REPOSITORY, URIish VAR_URIISH, stringremoteName VAR_STRINGREMOTENAME) { foreach (JavaWeakReference<TransportProtocol> @ref in protocols) { TransportProtocol VAR_TRANSPORTPROTOCOL = @ref.Get(); if (VAR_TRANSPORTPROTOCOL == LITERAL_NULL) { protocols.Remove(@ref); continue; } if (VAR_TRANSPORTPROTOCOL.CanHandle(VAR_URIISH, VAR_REPOSITORY, remoteName)) { return VAR_TRANSPORTPROTOCOL.METHOD_NAME(VAR_URIISH, VAR_REPOSITORY, remoteName); } } throw new NGit.Errors.NotSupportedException(MessageFormat.Format(JGitText.Get().URINotSupported, VAR_URIISH)); }
public void METHOD_NAME(Color VAR_COLOR) { foreground = VAR_COLOR; }
public virtual DeleteAliasResponse METHOD_NAME(DeleteAliasRequest VAR_DELETEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAliasResponseUnmarshaller.Instance; return Invoke<DeleteAliasResponse>(VAR_DELETEALIASREQUEST, VAR_VAR); }
public override SeekStatus METHOD_NAME(BytesRef VAR_BYTESREF) { termUpto = BinarySearch(VAR_BYTESREF, br, LITERAL_INT, info.terms.Count - LITERAL_INT, info.terms, info.sortedTerms, BytesRef.UTF8SortedAsUnicodeComparer); if (termUpto < LITERAL_INT) { termUpto = -termUpto - LITERAL_INT; if (termUpto >= info.terms.Count) { return SeekStatus.END; } else { info.terms.Get(info.sortedTerms[termUpto], br); return SeekStatus.NOT_FOUND; } } else { return SeekStatus.FOUND; } }
public CreateApplicationVersionRequest(string VAR_STRING, string VAR_STRING) { _applicationName = VAR_STRING; _versionLabel = VAR_STRING; }
public override string METHOD_NAME() { return ruleName + LITERAL_STRING + bypassTokenType; }
public virtual int METHOD_NAME(object VAR_OBJECT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_OBJECT, VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public virtual int METHOD_NAME(java.nio.ShortBuffer VAR_JAVA.NIO.SHORTBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.SHORTBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.SHORTBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.SHORTBUFFER._position; short VAR_SHORT; short VAR_SHORT; while (VAR_INT > LITERAL_INT) { VAR_SHORT = get(VAR_INT); VAR_SHORT = VAR_JAVA.NIO.SHORTBUFFER.get(VAR_INT); if (VAR_SHORT != VAR_SHORT) { return VAR_SHORT < VAR_SHORT ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.SHORTBUFFER.remaining(); }
public virtual DescribeSecurityConfigurationResponse METHOD_NAME(DescribeSecurityConfigurationRequest VAR_DESCRIBESECURITYCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSecurityConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeSecurityConfigurationResponse>(VAR_DESCRIBESECURITYCONFIGURATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(int VAR_INT, E VAR_E) { insertElementAt(VAR_E, VAR_INT); }
public virtual GetDownloadUrlForLayerResponse METHOD_NAME(GetDownloadUrlForLayerRequest VAR_GETDOWNLOADURLFORLAYERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDownloadUrlForLayerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDownloadUrlForLayerResponseUnmarshaller.Instance; return Invoke<GetDownloadUrlForLayerResponse>(VAR_GETDOWNLOADURLFORLAYERREQUEST, VAR_VAR); }
public override java.io.Writer METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { if (VAR_JAVA.LANG.CHARSEQUENCE == LITERAL_NULL) { VAR_JAVA.LANG.CHARSEQUENCE = java.lang.CharSequenceProxy.Wrap(LITERAL_STRING); } write(VAR_JAVA.LANG.CHARSEQUENCE.ToString()); return this; }
public virtual RevWalk METHOD_NAME() { return walker; }
public virtual int METHOD_NAME(object VAR_OBJECT) { object[] VAR_OBJECT[] = elements; return METHOD_NAME(VAR_OBJECT, VAR_OBJECT[], LITERAL_INT, VAR_OBJECT[].Length); }
public override java.nio.IntBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { checkIndex(VAR_INT); backingArray[offset + VAR_INT] = VAR_INT; return this; }
public HSSFTextbox(HSSFShape VAR_HSSFSHAPE, HSSFAnchor VAR_HSSFANCHOR) : base(parent, anchor) { HorizontalAlignment = HorizontalTextAlignment.Left; VerticalAlignment = VerticalTextAlignment.Top; this.String = (new HSSFRichTextString(LITERAL_STRING)); }
public GetRegionRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual ListObjectChildrenResponse METHOD_NAME(ListObjectChildrenRequest VAR_LISTOBJECTCHILDRENREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListObjectChildrenRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListObjectChildrenResponseUnmarshaller.Instance; return Invoke<ListObjectChildrenResponse>(VAR_LISTOBJECTCHILDRENREQUEST, VAR_VAR); }
public virtual GetIdResponse METHOD_NAME(GetIdRequest VAR_GETIDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetIdRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetIdResponseUnmarshaller.Instance; return Invoke<GetIdResponse>(VAR_GETIDREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return passphrase; }
public virtual IDictionary<string, Ref> METHOD_NAME() { try { return RefDatabase.GetRefs(NGit.RefDatabase.ALL); } catch (IOException) { return new Dictionary<string, Ref>(); } }
public bool METHOD_NAME() { return this.hasNext(); }
public virtual int METHOD_NAME() { return METHOD_NAME(rootNode); }
public HadoopJarStepConfig METHOD_NAME() { List<string> VAR_LIST<STRING> = new List<string>(); if (reducer == LITERAL_NULL) { hadoopConfig.Add(LITERAL_STRING, LITERAL_STRING); } foreach (KeyValuePair<string, string> entry in hadoopConfig) { VAR_LIST<STRING>.Add(LITERAL_STRING); VAR_LIST<STRING>.Add(string.Format(CultureInfo.InvariantCulture, LITERAL_STRING, entry.Key, entry.Value)); } foreach (string input in inputs) { VAR_LIST<STRING>.Add(LITERAL_STRING); VAR_LIST<STRING>.Add(input); } if (output != LITERAL_NULL) { VAR_LIST<STRING>.Add(LITERAL_STRING); VAR_LIST<STRING>.Add(output); } if (mapper != LITERAL_NULL) { VAR_LIST<STRING>.Add(LITERAL_STRING); VAR_LIST<STRING>.Add(mapper); } if (reducer != LITERAL_NULL) { VAR_LIST<STRING>.Add(LITERAL_STRING); VAR_LIST<STRING>.Add(reducer); } return new HadoopJarStepConfig { Jar = LITERAL_STRING, Args = VAR_LIST<STRING> }; }
public virtual GetRelationalDatabaseEventsResponse METHOD_NAME(GetRelationalDatabaseEventsRequest VAR_GETRELATIONALDATABASEEVENTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetRelationalDatabaseEventsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetRelationalDatabaseEventsResponseUnmarshaller.Instance; return Invoke<GetRelationalDatabaseEventsResponse>(VAR_GETRELATIONALDATABASEEVENTSREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { METHOD_NAME(VAR_INT, VAR_INT, VAR_INT, VAR_INT, LITERAL_INT); }
public virtual UpdateUserSecurityProfilesResponse METHOD_NAME(UpdateUserSecurityProfilesRequest VAR_UPDATEUSERSECURITYPROFILESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateUserSecurityProfilesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateUserSecurityProfilesResponseUnmarshaller.Instance; return Invoke<UpdateUserSecurityProfilesResponse>(VAR_UPDATEUSERSECURITYPROFILESREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.action; }
public CreateVolumeRequest(string VAR_STRING, int VAR_INT) { _availabilityZone = VAR_STRING; _size = VAR_INT; }
public void METHOD_NAME(int VAR_INT, DFAState VAR_DFASTATE) { if (!IsPrecedenceDfa) { throw new Exception(LITERAL_STRING); } if (VAR_INT < LITERAL_INT) { return; } lock (s0) { if (VAR_INT >= s0.edges.Length) { s0.edges = Arrays.CopyOf(s0.edges, VAR_INT + LITERAL_INT); } s0.edges[VAR_INT] = VAR_DFASTATE; } }
public EditPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public Builder() { data = new GrowableByteArrayDataOutput(LITERAL_INT); bufferSize = LITERAL_INT; previousDoc = -LITERAL_INT; indexInterval = LITERAL_INT; cardinality = LITERAL_INT; numBlocks = LITERAL_INT; }
public virtual DeleteFlowDefinitionResponse METHOD_NAME(DeleteFlowDefinitionRequest VAR_DELETEFLOWDEFINITIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteFlowDefinitionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteFlowDefinitionResponseUnmarshaller.Instance; return Invoke<DeleteFlowDefinitionResponse>(VAR_DELETEFLOWDEFINITIONREQUEST, VAR_VAR); }
public void METHOD_NAME() { lastFailedRefreshTime = DateTime.UtcNow.Ticks; }
public ModifyDBInstanceRequest(string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; }
public virtual GetTemplateSummaryResponse METHOD_NAME(GetTemplateSummaryRequest VAR_GETTEMPLATESUMMARYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTemplateSummaryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTemplateSummaryResponseUnmarshaller.Instance; return Invoke<GetTemplateSummaryResponse>(VAR_GETTEMPLATESUMMARYREQUEST, VAR_VAR); }
public virtual RevokeSnapshotAccessResponse METHOD_NAME(RevokeSnapshotAccessRequest VAR_REVOKESNAPSHOTACCESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RevokeSnapshotAccessRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RevokeSnapshotAccessResponseUnmarshaller.Instance; return Invoke<RevokeSnapshotAccessResponse>(VAR_REVOKESNAPSHOTACCESSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { int VAR_INT = field_6_name_text.Length; int VAR_INT = field_7_comment_text.Length; VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_record_type); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_2_frt_cell_ref_flag); VAR_ILITTLEENDIANOUTPUT.WriteLong(field_3_reserved); VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); VAR_ILITTLEENDIANOUTPUT.WriteByte(LITERAL_INT); StringUtil.PutCompressedUnicode(field_6_name_text, VAR_ILITTLEENDIANOUTPUT); VAR_ILITTLEENDIANOUTPUT.WriteByte(LITERAL_INT); StringUtil.PutCompressedUnicode(field_7_comment_text, VAR_ILITTLEENDIANOUTPUT); }
public virtual StartProjectVersionResponse METHOD_NAME(StartProjectVersionRequest VAR_STARTPROJECTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StartProjectVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StartProjectVersionResponseUnmarshaller.Instance; return Invoke<StartProjectVersionResponse>(VAR_STARTPROJECTVERSIONREQUEST, VAR_VAR); }
public MoPenDeleteGroupMemberRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual int METHOD_NAME() { lock (this) { return mMax; } }
public virtual NGit.Api.DiffCommand METHOD_NAME(string VAR_STRING) { this.VAR_STRING = VAR_STRING; return this; }
public virtual CreateFlowLogsResponse METHOD_NAME(CreateFlowLogsRequest VAR_CREATEFLOWLOGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFlowLogsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFlowLogsResponseUnmarshaller.Instance; return Invoke<CreateFlowLogsResponse>(VAR_CREATEFLOWLOGSREQUEST, VAR_VAR); }
public void METHOD_NAME(String VAR_STRING, int VAR_INT, int VAR_INT) { bool VAR_BOOL = StringUtil.HasMultibyte(VAR_STRING); int VAR_INT = LITERAL_INT + LITERAL_INT + LITERAL_INT; int VAR_INT = LITERAL_INT; if (VAR_BOOL) { VAR_INT |= LITERAL_INT; VAR_INT += LITERAL_INT; } if (VAR_INT > LITERAL_INT) { VAR_INT |= LITERAL_INT; VAR_INT += LITERAL_INT; } if (VAR_INT > LITERAL_INT) { VAR_INT |= LITERAL_INT; VAR_INT += LITERAL_INT; } WriteContinueIfRequired(VAR_INT); WriteShort(VAR_STRING.Length); WriteByte(VAR_INT); if (VAR_INT > LITERAL_INT) { WriteShort(VAR_INT); } if (VAR_INT > LITERAL_INT) { WriteInt(VAR_INT); } WriteCharacterData(VAR_STRING, VAR_BOOL); }
public override String METHOD_NAME(String[] VAR_STRING[]) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (IsExternalFunction) { VAR_STRINGBUILDER.Append(VAR_STRING[][LITERAL_INT]); AppendArgs(VAR_STRINGBUILDER, LITERAL_INT, VAR_STRING[]); } else { VAR_STRINGBUILDER.Append(Name); AppendArgs(VAR_STRINGBUILDER, LITERAL_INT, VAR_STRING[]); } return VAR_STRINGBUILDER.ToString(); }
public virtual DetectStackDriftResponse METHOD_NAME(DetectStackDriftRequest VAR_DETECTSTACKDRIFTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetectStackDriftRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetectStackDriftResponseUnmarshaller.Instance; return Invoke<DetectStackDriftResponse>(VAR_DETECTSTACKDRIFTREQUEST, VAR_VAR); }
public override ObjectId METHOD_NAME(TreeFormatter VAR_TREEFORMATTER) { return Delegate().METHOD_NAME(VAR_TREEFORMATTER); }
public override string METHOD_NAME(IEscapeQuerySyntax VAR_IESCAPEQUERYSYNTAX) { if (IsDefaultField(this.m_field)) { return GetTermEscaped(VAR_IESCAPEQUERYSYNTAX); } else { return this.m_field + LITERAL_STRING + GetTermEscaped(VAR_IESCAPEQUERYSYNTAX); } }
public virtual RenderUiTemplateResponse METHOD_NAME(RenderUiTemplateRequest VAR_RENDERUITEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RenderUiTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RenderUiTemplateResponseUnmarshaller.Instance; return Invoke<RenderUiTemplateResponse>(VAR_RENDERUITEMPLATEREQUEST, VAR_VAR); }
public sealed override java.nio.LongBuffer METHOD_NAME() { return java.nio.LongToByteBufferAdapter.METHOD_NAME(this); }
public virtual DescribeLimitsResponse METHOD_NAME(DescribeLimitsRequest VAR_DESCRIBELIMITSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLimitsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLimitsResponseUnmarshaller.Instance; return Invoke<DescribeLimitsResponse>(VAR_DESCRIBELIMITSREQUEST, VAR_VAR); }
public virtual DescribeAssessmentTargetsResponse METHOD_NAME(DescribeAssessmentTargetsRequest VAR_DESCRIBEASSESSMENTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAssessmentTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAssessmentTargetsResponseUnmarshaller.Instance; return Invoke<DescribeAssessmentTargetsResponse>(VAR_DESCRIBEASSESSMENTTARGETSREQUEST, VAR_VAR); }
public virtual DeleteClientVpnRouteResponse METHOD_NAME(DeleteClientVpnRouteRequest VAR_DELETECLIENTVPNROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteClientVpnRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteClientVpnRouteResponseUnmarshaller.Instance; return Invoke<DeleteClientVpnRouteResponse>(VAR_DELETECLIENTVPNROUTEREQUEST, VAR_VAR); }
public virtual NGit.Api.RebaseCommand METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { try { this.upstreamCommit = walk.ParseCommit(VAR_ANYOBJECTID); this.upstreamCommitName = VAR_ANYOBJECTID.Name; } catch (IOException e) { throw new JGitInternalException(MessageFormat.Format(JGitText.Get().couldNotReadObjectWhileParsingCommit, VAR_ANYOBJECTID.Name), e); } return this; }
public override ICollection<ChildScorer> METHOD_NAME() { return new[] { new ChildScorer(scorer, LITERAL_STRING) }; }
public override string METHOD_NAME(int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_INT); } }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = LITERAL_INT; for (int i = LITERAL_INT, iSize = VAR_DOUBLE[].Length; i < iSize; i++) { VAR_DOUBLE += VAR_DOUBLE[][i]; } return VAR_DOUBLE; }
public static BlankRecord[] METHOD_NAME(MulBlankRecord VAR_MULBLANKRECORD) { BlankRecord[] VAR_BLANKRECORD[] = new BlankRecord[VAR_MULBLANKRECORD.NumColumns]; for (int k = LITERAL_INT; k < VAR_MULBLANKRECORD.NumColumns; k++) { BlankRecord VAR_BLANKRECORD = new BlankRecord(); VAR_BLANKRECORD.Column = k + VAR_MULBLANKRECORD.FirstColumn; VAR_BLANKRECORD.Row = VAR_MULBLANKRECORD.Row; VAR_BLANKRECORD.XFIndex = VAR_MULBLANKRECORD.GetXFAt(k); VAR_BLANKRECORD[][k] = VAR_BLANKRECORD; } return VAR_BLANKRECORD[]; }
public virtual DeregisterDBProxyTargetsResponse METHOD_NAME(DeregisterDBProxyTargetsRequest VAR_DEREGISTERDBPROXYTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterDBProxyTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterDBProxyTargetsResponseUnmarshaller.Instance; return Invoke<DeregisterDBProxyTargetsResponse>(VAR_DEREGISTERDBPROXYTARGETSREQUEST, VAR_VAR); }
public SummaryInformation(PropertySet VAR_PROPERTYSET) : base(ps) { if (!IsSummaryInformation) throw new UnexpectedPropertySetTypeException(LITERAL_STRING + GetType().Name); }
public void METHOD_NAME(AlibabaCloudCredentialsProvider VAR_ALIBABACLOUDCREDENTIALSPROVIDER) { if (_credential != LITERAL_NULL) { return; } _credential = new CredentialsBackupCompatibilityAdaptor(VAR_ALIBABACLOUDCREDENTIALSPROVIDER); }
public CharArrayReader(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > VAR_CHAR[].Length || VAR_INT < LITERAL_INT || VAR_INT + VAR_INT < LITERAL_INT) { throw new System.ArgumentException(); } this.VAR_CHAR[] = VAR_CHAR[]; this.pos = VAR_INT; this.markedPos = VAR_INT; int VAR_INT = VAR_CHAR[].Length; this.count = VAR_INT + VAR_INT < VAR_INT ? VAR_INT : VAR_INT; }
public virtual Object METHOD_NAME(long VAR_LONG) { wasNull = false; for (int i = LITERAL_INT; i < properties.Length; i++) if (VAR_LONG == properties[i].ID) return properties[i].Value; wasNull = true; return LITERAL_NULL; }
public BufferedOutputStream(java.io.OutputStream VAR_JAVA.IO.OUTPUTSTREAM, int VAR_INT) : base(@out) { if (VAR_INT <= LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } buf = new byte[VAR_INT]; }
public AuthorizeDBSecurityGroupIngressRequest(string VAR_STRING) { _dbSecurityGroupName = VAR_STRING; }
public ArrayDataSource(T[] VAR_T[]) { this.VAR_T[] = VAR_T[]; }
public virtual CreateDeploymentResponse METHOD_NAME(CreateDeploymentRequest VAR_CREATEDEPLOYMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDeploymentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDeploymentResponseUnmarshaller.Instance; return Invoke<CreateDeploymentResponse>(VAR_CREATEDEPLOYMENTREQUEST, VAR_VAR); }
public sealed override int METHOD_NAME() { int VAR_INT = _position + libcore.io.SizeOf.INT; if (VAR_INT > _limit) { throw new java.nio.BufferUnderflowException(); } int VAR_INT = libcore.io.Memory.peekInt(backingArray, offset + _position, _order); _position = VAR_INT; return VAR_INT; }
public virtual DeleteTransitGatewayRouteResponse METHOD_NAME(DeleteTransitGatewayRouteRequest VAR_DELETETRANSITGATEWAYROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTransitGatewayRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTransitGatewayRouteResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayRouteResponse>(VAR_DELETETRANSITGATEWAYROUTEREQUEST, VAR_VAR); }
public ListMultipartUploadsRequest(string VAR_STRING) { _vaultName = VAR_STRING; }
public override float METHOD_NAME(int VAR_INT, float VAR_FLOAT) { return outerInstance.METHOD_NAME(stats, VAR_FLOAT, norms == LITERAL_NULL ? LITERAL_FLOAT : outerInstance.DecodeNormValue((byte)norms.Get(VAR_INT))); }
public char METHOD_NAME() { if (offset >= (end - LITERAL_INT)) { offset = end; return java.text.CharacterIteratorClass.DONE; } return @string[++offset]; }
public CherryPickResult(RevCommit VAR_REVCOMMIT, IList<Ref> VAR_ILIST<REF>) { this.status = CherryPickResult.CherryPickStatus.OK; this.VAR_REVCOMMIT = VAR_REVCOMMIT; this.VAR_ILIST<REF> = VAR_ILIST<REF>; this.failingPaths = LITERAL_NULL; }
public static Token METHOD_NAME(int VAR_INT) { return METHOD_NAME(VAR_INT, LITERAL_NULL); }
public IClientAnchor METHOD_NAME(double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_DOUBLE); }
public UpdateInstanceRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public override java.nio.ByteBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { checkIndex(VAR_INT, libcore.io.SizeOf.INT); libcore.io.Memory.pokeInt(backingArray, offset + VAR_INT, VAR_INT, _order); return this; }
public byte[] METHOD_NAME() { int VAR_INT = DataSize + LITERAL_INT; using (MemoryStream baos = new MemoryStream(VAR_INT)) { METHOD_NAME(new LittleEndianOutputStream(baos)); if (baos.Length != VAR_INT) { throw new Exception(LITERAL_STRING); } return baos.ToArray(); } }
public virtual GetFieldLevelEncryptionProfileResponse METHOD_NAME(GetFieldLevelEncryptionProfileRequest VAR_GETFIELDLEVELENCRYPTIONPROFILEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetFieldLevelEncryptionProfileRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetFieldLevelEncryptionProfileResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionProfileResponse>(VAR_GETFIELDLEVELENCRYPTIONPROFILEREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_number_of_sheets); if (IsExternalReferences) { StringUtil.WriteUnicodeString(VAR_ILITTLEENDIANOUTPUT, field_2_encoded_url); for (int i = LITERAL_INT; i < field_3_sheet_names.Length; i++) { StringUtil.WriteUnicodeString(VAR_ILITTLEENDIANOUTPUT, field_3_sheet_names[i]); } } else { int VAR_INT = _isAddInFunctions ? TAG_ADD_IN_FUNCTIONS : TAG_INTERNAL_REFERENCES; VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); } }
public BitsSlice(IBits VAR_IBITS, ReaderSlice VAR_READERSLICE) { this.VAR_IBITS = VAR_IBITS; this.start = VAR_READERSLICE.Start; this.length = VAR_READERSLICE.Length; Debug.Assert(length >= LITERAL_INT, LITERAL_STRING + length); }
public void METHOD_NAME(int VAR_INT) { names.RemoveAt(VAR_INT); workbook.METHOD_NAME(VAR_INT); }
public virtual ListConfigurationRevisionsResponse METHOD_NAME(ListConfigurationRevisionsRequest VAR_LISTCONFIGURATIONREVISIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListConfigurationRevisionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListConfigurationRevisionsResponseUnmarshaller.Instance; return Invoke<ListConfigurationRevisionsResponse>(VAR_LISTCONFIGURATIONREVISIONSREQUEST, VAR_VAR); }
public override ObjectStream METHOD_NAME() { return new ObjectStream.SmallStream(this); }
public bool METHOD_NAME() { return directory.METHOD_NAME(); }
public void METHOD_NAME() { _limit = LITERAL_INT; }
public virtual void METHOD_NAME(long VAR_LONG) { maxObjectSizeLimit = VAR_LONG; }
public virtual DescribeEventSubscriptionsResponse METHOD_NAME(DescribeEventSubscriptionsRequest VAR_DESCRIBEEVENTSUBSCRIPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeEventSubscriptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeEventSubscriptionsResponseUnmarshaller.Instance; return Invoke<DescribeEventSubscriptionsResponse>(VAR_DESCRIBEEVENTSUBSCRIPTIONSREQUEST, VAR_VAR); }
public bool METHOD_NAME(FormulaCellCacheEntry VAR_FORMULACELLCACHEENTRY) { if (VAR_FORMULACELLCACHEENTRY == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING); } if (_currentlyEvaluatingCells.Contains(VAR_FORMULACELLCACHEENTRY)) { return false; } _currentlyEvaluatingCells.Add(VAR_FORMULACELLCACHEENTRY); _evaluationFrames.Add(new CellEvaluationFrame(VAR_FORMULACELLCACHEENTRY)); return true; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(sid); VAR_ILITTLEENDIANOUTPUT.WriteShort(_cbFContinued); if (_linkPtg == LITERAL_NULL) { VAR_ILITTLEENDIANOUTPUT.WriteShort(LITERAL_INT); } else { int VAR_INT = _linkPtg.Size; int VAR_INT = VAR_INT + LITERAL_INT; if (_unknownPostFormulaByte != LITERAL_NULL) { VAR_INT++; } VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); VAR_ILITTLEENDIANOUTPUT.WriteShort(VAR_INT); VAR_ILITTLEENDIANOUTPUT.WriteInt(_unknownPreFormulaInt); _linkPtg.Write(VAR_ILITTLEENDIANOUTPUT); if (_unknownPostFormulaByte != LITERAL_NULL) { VAR_ILITTLEENDIANOUTPUT.WriteByte(Convert.ToByte(_unknownPostFormulaByte, CultureInfo.InvariantCulture)); } } VAR_ILITTLEENDIANOUTPUT.WriteShort(_cLines); VAR_ILITTLEENDIANOUTPUT.WriteShort(_iSel); VAR_ILITTLEENDIANOUTPUT.WriteShort(_flags); VAR_ILITTLEENDIANOUTPUT.WriteShort(_idEdit); if (_dropData != LITERAL_NULL) { _dropData.METHOD_NAME(VAR_ILITTLEENDIANOUTPUT); } if (_rgLines != LITERAL_NULL) { foreach (String str in _rgLines) { StringUtil.WriteUnicodeString(VAR_ILITTLEENDIANOUTPUT, str); } } if (_bsels != LITERAL_NULL) { foreach (bool val in _bsels) { VAR_ILITTLEENDIANOUTPUT.WriteByte(val ? LITERAL_INT : LITERAL_INT); } } }
public virtual void METHOD_NAME(int VAR_INT) { if (@readonly) { throw new InvalidOperationException(LITERAL_STRING); } int VAR_INT = intervals.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Interval VAR_INTERVAL = intervals[i]; int VAR_INT = VAR_INTERVAL.a; int VAR_INT = VAR_INTERVAL.b; if (VAR_INT < VAR_INT) { break; } if (VAR_INT == VAR_INT && VAR_INT == VAR_INT) { intervals.RemoveAt(i); break; } if (VAR_INT == VAR_INT) { intervals[i] = Interval.Of(VAR_INTERVAL.VAR_INT + LITERAL_INT, VAR_INTERVAL.VAR_INT); break; } if (VAR_INT == VAR_INT) { intervals[i] = Interval.Of(VAR_INTERVAL.VAR_INT, VAR_INTERVAL.VAR_INT - LITERAL_INT); break; } if (VAR_INT > VAR_INT && VAR_INT < VAR_INT) { int VAR_INT = VAR_INTERVAL.VAR_INT; intervals[i] = Interval.Of(VAR_INTERVAL.VAR_INT, VAR_INT - LITERAL_INT); Add(VAR_INT + LITERAL_INT, VAR_INT); } } }
public virtual ArrayList<int> METHOD_NAME() { ArrayList<int> VAR_ARRAYLIST<INT> = new ArrayList<int>(Count); int VAR_INT = intervals.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Interval VAR_INTERVAL = intervals[i]; int VAR_INT = VAR_INTERVAL.a; int VAR_INT = VAR_INTERVAL.b; for (int v = VAR_INT; v <= VAR_INT; v++) { VAR_ARRAYLIST<INT>.Add(v); } } return VAR_ARRAYLIST<INT>; }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public virtual CharsRef METHOD_NAME() { Debug.Assert(upto < count); lastEndOffset = endOffsets[upto]; lastPosLength = posLengths[upto]; CharsRef VAR_CHARSREF = outputs[upto++]; posIncr = LITERAL_INT; if (upto == count) { Reset(); } return VAR_CHARSREF; }
public FSTTermsWriter(SegmentWriteState VAR_SEGMENTWRITESTATE, PostingsWriterBase VAR_POSTINGSWRITERBASE) { var VAR_VAR = IndexFileNames.SegmentFileName(VAR_SEGMENTWRITESTATE.SegmentInfo.Name, VAR_SEGMENTWRITESTATE.SegmentSuffix, TERMS_EXTENSION); _postingsWriter = VAR_POSTINGSWRITERBASE; _fieldInfos = VAR_SEGMENTWRITESTATE.FieldInfos; _output = VAR_SEGMENTWRITESTATE.Directory.CreateOutput(VAR_VAR, VAR_SEGMENTWRITESTATE.Context); var VAR_VAR = false; try { WriteHeader(_output); _postingsWriter.Init(_output); VAR_VAR = true; } finally { if (!VAR_VAR) { IOUtils.DisposeWhileHandlingException(_output); } } }
public virtual int METHOD_NAME(Cell VAR_CELL) { return string.CompareOrdinal(TokenString, VAR_CELL.TokenString); }
public virtual ListAccountSettingsResponse METHOD_NAME(ListAccountSettingsRequest VAR_LISTACCOUNTSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAccountSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAccountSettingsResponseUnmarshaller.Instance; return Invoke<ListAccountSettingsResponse>(VAR_LISTACCOUNTSETTINGSREQUEST, VAR_VAR); }
public bool METHOD_NAME() { matchFound = findNextImpl(address, input, matchOffsets); if (matchFound) { findPos = matchOffsets[LITERAL_INT]; } return matchFound; }
public override V METHOD_NAME() { return this.nextEntry().value; }
public virtual DescribeLocalGatewaysResponse METHOD_NAME(DescribeLocalGatewaysRequest VAR_DESCRIBELOCALGATEWAYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeLocalGatewaysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeLocalGatewaysResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewaysResponse>(VAR_DESCRIBELOCALGATEWAYSREQUEST, VAR_VAR); }
public ByteArrayDataInput(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Reset(VAR_BYTE[], VAR_INT, VAR_INT); }
public override string METHOD_NAME() { return base.METHOD_NAME() + LITERAL_STRING + revstr; }
public virtual RegisterCrossAccountAccessRoleResponse METHOD_NAME(RegisterCrossAccountAccessRoleRequest VAR_REGISTERCROSSACCOUNTACCESSROLEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RegisterCrossAccountAccessRoleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RegisterCrossAccountAccessRoleResponseUnmarshaller.Instance; return Invoke<RegisterCrossAccountAccessRoleResponse>(VAR_REGISTERCROSSACCOUNTACCESSROLEREQUEST, VAR_VAR); }
public override void METHOD_NAME() { this._enclosing.METHOD_NAME(); }
public virtual DescribeFileSystemsResponse METHOD_NAME(DescribeFileSystemsRequest VAR_DESCRIBEFILESYSTEMSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFileSystemsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFileSystemsResponseUnmarshaller.Instance; return Invoke<DescribeFileSystemsResponse>(VAR_DESCRIBEFILESYSTEMSREQUEST, VAR_VAR); }
public ReverseStringFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { AssureMatchVersion(); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public Builder() { InitializeInstanceFields(); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new IrishLowerCaseFilter(VAR_TOKENSTREAM); }
public virtual GetQualificationTypeResponse METHOD_NAME(GetQualificationTypeRequest VAR_GETQUALIFICATIONTYPEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetQualificationTypeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetQualificationTypeResponseUnmarshaller.Instance; return Invoke<GetQualificationTypeResponse>(VAR_GETQUALIFICATIONTYPEREQUEST, VAR_VAR); }
public override Merger METHOD_NAME(Repository VAR_REPOSITORY, bool VAR_BOOL) { return new ResolveMerger(VAR_REPOSITORY, VAR_BOOL); }
public String METHOD_NAME(int VAR_INT) { return _externalNameRecords[VAR_INT].Text; }
public PlotWalk(Repository VAR_REPOSITORY) : base(repo) { base.Sort(RevSort.TOPO, true); reverseRefMap = VAR_REPOSITORY.GetAllRefsByPeeledObjectId(); }
public virtual SubscribeToDatasetResponse METHOD_NAME(SubscribeToDatasetRequest VAR_SUBSCRIBETODATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SubscribeToDatasetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SubscribeToDatasetResponseUnmarshaller.Instance; return Invoke<SubscribeToDatasetResponse>(VAR_SUBSCRIBETODATASETREQUEST, VAR_VAR); }
public java.lang.StringBuilder METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { append0(VAR_CHAR[], VAR_INT, VAR_INT); return this; }
public override int METHOD_NAME(string VAR_STRING, int VAR_INT) { lock (this) { return base.METHOD_NAME(VAR_STRING, VAR_INT); } }
public virtual java.util.List<E> METHOD_NAME(int VAR_INT, int VAR_INT) { object[] VAR_OBJECT[] = elements; if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT || VAR_INT > VAR_OBJECT[].Length) { throw new System.IndexOutOfRangeException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_OBJECT[].Length); } return new java.util.concurrent.CopyOnWriteArrayList<E>.CowSubList(this, VAR_OBJECT[], VAR_INT, VAR_INT); }
public virtual FormatError.Severity METHOD_NAME() { return severity; }
public virtual DescribeBundleTasksResponse METHOD_NAME() { return METHOD_NAME(new DescribeBundleTasksRequest()); }
public CompositeReaderContext METHOD_NAME() { return (CompositeReaderContext)METHOD_NAME(LITERAL_NULL, reader, LITERAL_INT, LITERAL_INT); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(GetHideObj())).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public UseSelFSRecord(int VAR_INT) { _options = VAR_INT; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is RomanianStemmer; }
public virtual AbortMultipartUploadResponse METHOD_NAME(AbortMultipartUploadRequest VAR_ABORTMULTIPARTUPLOADREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AbortMultipartUploadRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AbortMultipartUploadResponseUnmarshaller.Instance; return Invoke<AbortMultipartUploadResponse>(VAR_ABORTMULTIPARTUPLOADREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(Parser VAR_PARSER) { EndErrorCondition(VAR_PARSER); }
public virtual ModifyVpnConnectionResponse METHOD_NAME(ModifyVpnConnectionRequest VAR_MODIFYVPNCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyVpnConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyVpnConnectionResponseUnmarshaller.Instance; return Invoke<ModifyVpnConnectionResponse>(VAR_MODIFYVPNCONNECTIONREQUEST, VAR_VAR); }
public virtual GetSendStatisticsResponse METHOD_NAME() { return METHOD_NAME(new GetSendStatisticsRequest()); }
public virtual CreateVoiceConnectorGroupResponse METHOD_NAME(CreateVoiceConnectorGroupRequest VAR_CREATEVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<CreateVoiceConnectorGroupResponse>(VAR_CREATEVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public InitiateJobRequest(string VAR_STRING, JobParameters VAR_JOBPARAMETERS) { _vaultName = VAR_STRING; _jobParameters = VAR_JOBPARAMETERS; }
public java.util.regex.MatchResult METHOD_NAME() { ensureMatch(); return new java.util.regex.MatchResultImpl(input, matchOffsets); }
public static string METHOD_NAME(string VAR_STRING) { string VAR_STRING; inflFormTranslations.TryGetValue(VAR_STRING, out VAR_STRING); return VAR_STRING; }
public static ErrPtg METHOD_NAME(int VAR_INT) { switch (VAR_INT) { case HSSFErrorConstants.ERROR_DIV_0: return DIV_ZERO; case HSSFErrorConstants.ERROR_NA: return N_A; case HSSFErrorConstants.ERROR_NAME: return NAME_INVALID; case HSSFErrorConstants.ERROR_NULL: return NULL_INTERSECTION; case HSSFErrorConstants.ERROR_NUM: return NUM_ERROR; case HSSFErrorConstants.ERROR_REF: return REF_INVALID; case HSSFErrorConstants.ERROR_VALUE: return VALUE_INVALID; } throw new InvalidOperationException(LITERAL_STRING + VAR_INT + LITERAL_STRING); }
public virtual GetBasePathMappingResponse METHOD_NAME(GetBasePathMappingRequest VAR_GETBASEPATHMAPPINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBasePathMappingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBasePathMappingResponseUnmarshaller.Instance; return Invoke<GetBasePathMappingResponse>(VAR_GETBASEPATHMAPPINGREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { this.w1 = VAR_ANYOBJECTID.w1; this.w2 = VAR_ANYOBJECTID.w2; this.w3 = VAR_ANYOBJECTID.w3; this.w4 = VAR_ANYOBJECTID.w4; this.w5 = VAR_ANYOBJECTID.w5; }
public static IList<ITree> METHOD_NAME(ITree VAR_ITREE) { if (VAR_ITREE.Parent == LITERAL_NULL) { return Collections.EmptyList<ITree>(); } IList<ITree> VAR_ILIST<ITREE> = new List<ITree>(); VAR_ITREE = VAR_ITREE.Parent; while (VAR_ITREE != LITERAL_NULL) { VAR_ILIST<ITREE>.Insert(LITERAL_INT, VAR_ITREE); VAR_ITREE = VAR_ITREE.Parent; } return VAR_ILIST<ITREE>; }
public virtual GetUsagePlanResponse METHOD_NAME(GetUsagePlanRequest VAR_GETUSAGEPLANREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUsagePlanRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUsagePlanResponseUnmarshaller.Instance; return Invoke<GetUsagePlanResponse>(VAR_GETUSAGEPLANREQUEST, VAR_VAR); }
public virtual UpdateLoadBalancerAttributeResponse METHOD_NAME(UpdateLoadBalancerAttributeRequest VAR_UPDATELOADBALANCERATTRIBUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateLoadBalancerAttributeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateLoadBalancerAttributeResponseUnmarshaller.Instance; return Invoke<UpdateLoadBalancerAttributeResponse>(VAR_UPDATELOADBALANCERATTRIBUTEREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(int VAR_INT, bool VAR_BOOL, long VAR_LONG) { if (Math.Abs(numPoints + LITERAL_INT - VAR_INT) > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + numPoints + LITERAL_STRING); } if (VAR_BOOL) { numGoodPoints += LITERAL_INT; recallPoints.Add(new RecallPoint(VAR_INT, numGoodPoints)); if (recallPoints.Count == LITERAL_INT && VAR_INT <= LITERAL_INT) { mrr = LITERAL_INT / VAR_INT; } } numPoints = VAR_INT; double VAR_DOUBLE = numGoodPoints / numPoints; if (VAR_BOOL) { pReleventSum += VAR_DOUBLE; } if (VAR_INT < pAt.Length) { pAt[VAR_INT] = VAR_DOUBLE; } recall = maxGoodPoints <= LITERAL_INT ? VAR_DOUBLE : numGoodPoints / maxGoodPoints; docNamesExtractTime += VAR_LONG; }
public virtual UpdateExperimentResponse METHOD_NAME(UpdateExperimentRequest VAR_UPDATEEXPERIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateExperimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateExperimentResponseUnmarshaller.Instance; return Invoke<UpdateExperimentResponse>(VAR_UPDATEEXPERIMENTREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + a.METHOD_NAME() + LITERAL_STRING + b.METHOD_NAME() + LITERAL_STRING; }
public string METHOD_NAME() { return accessKeyId; }
public virtual GetBulkPublishDetailsResponse METHOD_NAME(GetBulkPublishDetailsRequest VAR_GETBULKPUBLISHDETAILSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetBulkPublishDetailsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetBulkPublishDetailsResponseUnmarshaller.Instance; return Invoke<GetBulkPublishDetailsResponse>(VAR_GETBULKPUBLISHDETAILSREQUEST, VAR_VAR); }
public static float[] METHOD_NAME(float[] VAR_FLOAT[]) { return METHOD_NAME(VAR_FLOAT[], LITERAL_INT + VAR_FLOAT[].Length); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { VAR_DOUBLE = METHOD_NAME(EvalArg(VAR_VALUEEVAL, VAR_INT, VAR_INT), EvalArg(VAR_VALUEEVAL, VAR_INT, VAR_INT), EvalArg(VAR_VALUEEVAL, VAR_INT, VAR_INT)); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { return Hash(VAR_BYTE[], unchecked((int)LITERAL_INT), VAR_INT, VAR_INT); }
public static Formula METHOD_NAME(Ptg[] VAR_PTG[]) { if (VAR_PTG[] == LITERAL_NULL || VAR_PTG[].Length < LITERAL_INT) { return EMPTY; } int VAR_INT = Ptg.GetEncodedSize(VAR_PTG[]); byte[] VAR_BYTE[] = new byte[VAR_INT]; Ptg.SerializePtgs(VAR_PTG[], VAR_BYTE[], LITERAL_INT); int VAR_INT = Ptg.GetEncodedSizeWithoutArrayData(VAR_PTG[]); return new Formula(VAR_BYTE[], VAR_INT); }
public override string METHOD_NAME(string VAR_STRING) { return LITERAL_NULL; }
public static int METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT, int VAR_INT) { Debug.Assert(VAR_INT + VAR_INT <= VAR_INT); if (VAR_INT + VAR_INT < VAR_INT) { Array.Copy(VAR_CHAR[], VAR_INT + VAR_INT, VAR_CHAR[], VAR_INT, VAR_INT - VAR_INT - VAR_INT); } return VAR_INT - VAR_INT; }
public ThreadSafeProgressMonitor(ProgressMonitor VAR_PROGRESSMONITOR) { this.VAR_PROGRESSMONITOR = VAR_PROGRESSMONITOR; this.Lock = new ReentrantLock(); this.mainThread = Sharpen.Thread.CurrentThread(); this.workers = new AtomicInteger(LITERAL_INT); this.pendingUpdates = new AtomicInteger(LITERAL_INT); this.process = Sharpen.Extensions.CreateSemaphore(LITERAL_INT); }
public SendMessageBatchRequestEntry(string VAR_STRING, string VAR_STRING) { _id = VAR_STRING; _messageBody = VAR_STRING; }
public virtual DescribeAddressResponse METHOD_NAME(DescribeAddressRequest VAR_DESCRIBEADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeAddressResponseUnmarshaller.Instance; return Invoke<DescribeAddressResponse>(VAR_DESCRIBEADDRESSREQUEST, VAR_VAR); }
public GetEventRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual DescribeRuleResponse METHOD_NAME(DescribeRuleRequest VAR_DESCRIBERULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRuleResponseUnmarshaller.Instance; return Invoke<DescribeRuleResponse>(VAR_DESCRIBERULEREQUEST, VAR_VAR); }
public RevObject METHOD_NAME() { return @object; }
public JapaneseIterationMarkCharFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { normalizeKanji = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, NORMALIZE_KANJI_PARAM, JapaneseIterationMarkCharFilter.NORMALIZE_KANJI_DEFAULT); normalizeKana = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, NORMALIZE_KANA_PARAM, JapaneseIterationMarkCharFilter.NORMALIZE_KANA_DEFAULT); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override char METHOD_NAME() { if (--index < start) { index = start; return Done; } else { return Current; } }
public LoggingConfig(string VAR_STRING, string VAR_STRING) { _bucket = VAR_STRING; _prefix = VAR_STRING; }
public static String METHOD_NAME(String VAR_STRING) { return METHOD_NAME(VAR_STRING, LITERAL_CHAR); }
public virtual PutMetricAlarmResponse METHOD_NAME(PutMetricAlarmRequest VAR_PUTMETRICALARMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutMetricAlarmRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutMetricAlarmResponseUnmarshaller.Instance; return Invoke<PutMetricAlarmResponse>(VAR_PUTMETRICALARMREQUEST, VAR_VAR); }
public virtual CreateExclusionsPreviewResponse METHOD_NAME(CreateExclusionsPreviewRequest VAR_CREATEEXCLUSIONSPREVIEWREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateExclusionsPreviewRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateExclusionsPreviewResponseUnmarshaller.Instance; return Invoke<CreateExclusionsPreviewResponse>(VAR_CREATEEXCLUSIONSPREVIEWREQUEST, VAR_VAR); }
public virtual OutputStream METHOD_NAME() { return buf; }
public virtual int METHOD_NAME() { return threads; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int[] VAR_INT[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | (VAR_INT << LITERAL_INT) | ((int)((uint)VAR_INT >> LITERAL_INT)); int VAR_INT = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_INT[][VAR_INT++] = ((VAR_INT & LITERAL_INT) << LITERAL_INT) | VAR_INT; } }
public bool METHOD_NAME() { Debug.Assert(upto + BufferOffset <= EndIndex); return upto + BufferOffset == EndIndex; }
public ClientException(string VAR_STRING) : base(message) { ErrorMessage = VAR_STRING; }
public static NumberRecord[] METHOD_NAME(MulRKRecord VAR_MULRKRECORD) { NumberRecord[] VAR_NUMBERRECORD[] = new NumberRecord[VAR_MULRKRECORD.NumColumns]; for (int k = LITERAL_INT; k < VAR_MULRKRECORD.NumColumns; k++) { NumberRecord VAR_NUMBERRECORD = new NumberRecord(); VAR_NUMBERRECORD.Column = ((short)(k + VAR_MULRKRECORD.FirstColumn)); VAR_NUMBERRECORD.Row = (VAR_MULRKRECORD.Row); VAR_NUMBERRECORD.XFIndex = (VAR_MULRKRECORD.GetXFAt(k)); VAR_NUMBERRECORD.Value = (VAR_MULRKRECORD.GetRKNumberAt(k)); VAR_NUMBERRECORD[][k] = VAR_NUMBERRECORD; } return VAR_NUMBERRECORD[]; }
public virtual IList<ReceiveCommand> METHOD_NAME() { return Sharpen.Collections.UnmodifiableList(commands); }
public virtual UpdateVoiceConnectorResponse METHOD_NAME(UpdateVoiceConnectorRequest VAR_UPDATEVOICECONNECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateVoiceConnectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateVoiceConnectorResponseUnmarshaller.Instance; return Invoke<UpdateVoiceConnectorResponse>(VAR_UPDATEVOICECONNECTORREQUEST, VAR_VAR); }
public static String METHOD_NAME(int VAR_INT) { if (FormulaError.IsValidCode(VAR_INT)) { return FormulaError.ForInt(VAR_INT).String; } return LITERAL_STRING + VAR_INT + LITERAL_STRING; }
public override long METHOD_NAME() { if (set) { return NO_MORE_ORDS; } else { set = true; return @in.GetOrd(docID); } }
public void METHOD_NAME() { lock (this.mBlock) { if (this.mParseState != LITERAL_NULL) { this.mParseState.Dispose(); this.mParseState = LITERAL_NULL; this.mBlock.decOpenCountLocked(); } } }
public SheetRefEvaluator(WorkbookEvaluator VAR_WORKBOOKEVALUATOR, EvaluationTracker VAR_EVALUATIONTRACKER, int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } _bookEvaluator = VAR_WORKBOOKEVALUATOR; _tracker = VAR_EVALUATIONTRACKER; _sheetIndex = VAR_INT; }
public virtual AuthorizeDBSecurityGroupIngressResponse METHOD_NAME(AuthorizeDBSecurityGroupIngressRequest VAR_AUTHORIZEDBSECURITYGROUPINGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AuthorizeDBSecurityGroupIngressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AuthorizeDBSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeDBSecurityGroupIngressResponse>(VAR_AUTHORIZEDBSECURITYGROUPINGRESSREQUEST, VAR_VAR); }
public override V METHOD_NAME(K VAR_K, V VAR_V) { if ((object)VAR_K == LITERAL_NULL) { return putValueForNullKey(VAR_V); } int VAR_INT = secondaryHash(VAR_K.GetHashCode()); java.util.HashMap.HashMapEntry<K, V>[] VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = table; int VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length - LITERAL_INT); { for (java.util.HashMap.HashMapEntry<K, V> e = VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[][VAR_INT]; e != LITERAL_NULL; e = e.next) { if (e.VAR_INT == VAR_INT && VAR_K.Equals(e.VAR_K)) { preModify(e); V VAR_V = e.VAR_V; e.VAR_V = VAR_V; return VAR_V; } } } modCount++; if (_size++ > threshold) { VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[] = doubleCapacity(); VAR_INT = VAR_INT & (VAR_JAVA.UTIL.HASHMAP.HASHMAPENTRY<K, V>[].Length - LITERAL_INT); } addNewEntry(VAR_K, VAR_V, VAR_INT, VAR_INT); return default(V); }
public virtual GetTrafficPolicyInstanceResponse METHOD_NAME(GetTrafficPolicyInstanceRequest VAR_GETTRAFFICPOLICYINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTrafficPolicyInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<GetTrafficPolicyInstanceResponse>(VAR_GETTRAFFICPOLICYINSTANCEREQUEST, VAR_VAR); }
public Message(Content VAR_CONTENT, Body VAR_BODY) { _subject = VAR_CONTENT; _body = VAR_BODY; }
public LbsDropData() { _str = LITERAL_STRING; _unused = LITERAL_INT; }
public Deleted3DPxg(String VAR_STRING) : this(-LITERAL_INT, sheetName) { ; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual RevTree METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevObject VAR_REVOBJECT = Peel(ParseAny(VAR_ANYOBJECTID)); RevTree VAR_REVTREE; if (VAR_REVOBJECT is RevCommit) { VAR_REVTREE = ((RevCommit)VAR_REVOBJECT).Tree; } else { if (!(VAR_REVOBJECT is RevTree)) { throw new IncorrectObjectTypeException(VAR_ANYOBJECTID.ToObjectId(), Constants.TYPE_TREE); } else { VAR_REVTREE = (RevTree)VAR_REVOBJECT; } } ParseHeaders(VAR_REVTREE); return VAR_REVTREE; }
public virtual DisableFastSnapshotRestoresResponse METHOD_NAME(DisableFastSnapshotRestoresRequest VAR_DISABLEFASTSNAPSHOTRESTORESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisableFastSnapshotRestoresRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisableFastSnapshotRestoresResponseUnmarshaller.Instance; return Invoke<DisableFastSnapshotRestoresResponse>(VAR_DISABLEFASTSNAPSHOTRESTORESREQUEST, VAR_VAR); }
public override int METHOD_NAME() { return this._enclosing._size; }
public virtual CreateStreamResponse METHOD_NAME(CreateStreamRequest VAR_CREATESTREAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateStreamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateStreamResponseUnmarshaller.Instance; return Invoke<CreateStreamResponse>(VAR_CREATESTREAMREQUEST, VAR_VAR); }
public string METHOD_NAME(string VAR_STRING) { reset(); java.lang.StringBuffer VAR_JAVA.LANG.STRINGBUFFER = new java.lang.StringBuffer(input.Length); while (find()) { appendReplacement(VAR_JAVA.LANG.STRINGBUFFER, VAR_STRING); } return appendTail(VAR_JAVA.LANG.STRINGBUFFER).ToString(); }
public virtual DeregisterInstanceEventNotificationAttributesResponse METHOD_NAME(DeregisterInstanceEventNotificationAttributesRequest VAR_DEREGISTERINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterInstanceEventNotificationAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterInstanceEventNotificationAttributesResponseUnmarshaller.Instance; return Invoke<DeregisterInstanceEventNotificationAttributesResponse>(VAR_DEREGISTERINSTANCEEVENTNOTIFICATIONATTRIBUTESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME() { return depth; }
public override long METHOD_NAME() { if (_position == _limit) { throw new java.nio.BufferUnderflowException(); } return byteBuffer.getLong(_position++ * libcore.io.SizeOf.LONG); }
public override bool METHOD_NAME() { return this._enclosing._size == LITERAL_INT; }
public void METHOD_NAME(NameRecord VAR_NAMERECORD) { _definedNames.Add(VAR_NAMERECORD); int VAR_INT = FindFirstRecordLocBySid(ExternSheetRecord.sid); if (VAR_INT == -LITERAL_INT) VAR_INT = FindFirstRecordLocBySid(SupBookRecord.sid); if (VAR_INT == -LITERAL_INT) VAR_INT = FindFirstRecordLocBySid(CountryRecord.sid); int VAR_INT = _definedNames.Count; _workbookRecordList.Add(VAR_INT + VAR_INT, VAR_NAMERECORD); }
public virtual void METHOD_NAME(RevSort VAR_REVSORT, bool VAR_BOOL) { AssertNotStarted(); if (VAR_BOOL) { sorting.AddItem(VAR_REVSORT); } else { sorting.Remove(VAR_REVSORT); } if (sorting.Count > LITERAL_INT) { sorting.Remove(RevSort.NONE); } else { if (sorting.Count == LITERAL_INT) { sorting.AddItem(RevSort.NONE); } } }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual DisassociateSkillGroupFromRoomResponse METHOD_NAME(DisassociateSkillGroupFromRoomRequest VAR_DISASSOCIATESKILLGROUPFROMROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateSkillGroupFromRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateSkillGroupFromRoomResponseUnmarshaller.Instance; return Invoke<DisassociateSkillGroupFromRoomResponse>(VAR_DISASSOCIATESKILLGROUPFROMROOMREQUEST, VAR_VAR); }
public static byte[] METHOD_NAME(long VAR_LONG) { return METHOD_NAME(System.Convert.ToString(VAR_LONG)); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_LINKSDIRTY); }
public void METHOD_NAME(SrndQuery VAR_SRNDQUERY) { Token VAR_TOKEN = LITERAL_NULL; while (true) { switch ((jj_ntk == -LITERAL_INT) ? Jj_ntk() : jj_ntk) { case RegexpToken.CARAT: ; break; default: jj_la1[LITERAL_INT] = jj_gen; goto label_8; } Jj_consume_token(RegexpToken.CARAT); VAR_TOKEN = Jj_consume_token(RegexpToken.NUMBER); float VAR_FLOAT; try { VAR_FLOAT = float.Parse(VAR_TOKEN.Image); } catch (Exception floatExc) { { if (true) throw new ParseException(boostErrorMessage + VAR_TOKEN.Image + LITERAL_STRING + floatExc + LITERAL_STRING); } } if (VAR_FLOAT <= LITERAL_INT) { { if (true) throw new ParseException(boostErrorMessage + VAR_TOKEN.Image); } } VAR_SRNDQUERY.Weight = (VAR_FLOAT * VAR_SRNDQUERY.Weight); } label_8: ; }
public virtual ListLogPatternSetsResponse METHOD_NAME(ListLogPatternSetsRequest VAR_LISTLOGPATTERNSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLogPatternSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLogPatternSetsResponseUnmarshaller.Instance; return Invoke<ListLogPatternSetsResponse>(VAR_LISTLOGPATTERNSETSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { return LITERAL_STRING + this.m_begin + LITERAL_STRING + this.m_end + LITERAL_STRING + this.m_field + LITERAL_STRING + this.m_text + LITERAL_STRING; }
public virtual ListAssessmentTargetsResponse METHOD_NAME(ListAssessmentTargetsRequest VAR_LISTASSESSMENTTARGETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListAssessmentTargetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListAssessmentTargetsResponseUnmarshaller.Instance; return Invoke<ListAssessmentTargetsResponse>(VAR_LISTASSESSMENTTARGETSREQUEST, VAR_VAR); }
public IFontFormatting METHOD_NAME() { return METHOD_NAME(false); }
public virtual UpdateRoomResponse METHOD_NAME(UpdateRoomRequest VAR_UPDATEROOMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateRoomRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateRoomResponseUnmarshaller.Instance; return Invoke<UpdateRoomResponse>(VAR_UPDATEROOMREQUEST, VAR_VAR); }
public virtual ListLexiconsResponse METHOD_NAME(ListLexiconsRequest VAR_LISTLEXICONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListLexiconsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListLexiconsResponseUnmarshaller.Instance; return Invoke<ListLexiconsResponse>(VAR_LISTLEXICONSREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is KpStemmer; }
public override void METHOD_NAME(string VAR_STRING, int VAR_INT, int VAR_INT) { string VAR_STRING = Sharpen.StringHelper.Substring(VAR_STRING, VAR_INT, VAR_INT + VAR_INT); buf.append(VAR_STRING); }
public PackLock(FilePath VAR_FILEPATH, FS VAR_FS) { FilePath VAR_FILEPATH = VAR_FILEPATH.GetParentFile(); string VAR_STRING = VAR_FILEPATH.GetName(); keepFile = new FilePath(VAR_FILEPATH, Sharpen.Runtime.Substring(VAR_STRING, LITERAL_INT, VAR_STRING.Length - LITERAL_INT) + LITERAL_STRING); this.VAR_FS = VAR_FS; }
public virtual CreatePublicKeyResponse METHOD_NAME(CreatePublicKeyRequest VAR_CREATEPUBLICKEYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreatePublicKeyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreatePublicKeyResponseUnmarshaller.Instance; return Invoke<CreatePublicKeyResponse>(VAR_CREATEPUBLICKEYREQUEST, VAR_VAR); }
public virtual PersonIdent METHOD_NAME() { return refLogIdent; }
public override bool METHOD_NAME(Object VAR_OBJECT) { if (this == VAR_OBJECT) return true; if (!(VAR_OBJECT is EscherComplexProperty)) return false; EscherComplexProperty VAR_ESCHERCOMPLEXPROPERTY = (EscherComplexProperty)VAR_OBJECT; if (!Arrays.METHOD_NAME(_complexData, VAR_ESCHERCOMPLEXPROPERTY._complexData)) return false; return true; }
public virtual void METHOD_NAME(int VAR_INT) { if (buf == LITERAL_NULL) { throw new System.IO.IOException(); } if (pos == LITERAL_INT) { throw new System.IO.IOException(LITERAL_STRING); } buf[--pos] = unchecked((byte)VAR_INT); }
public virtual GetSegmentImportJobsResponse METHOD_NAME(GetSegmentImportJobsRequest VAR_GETSEGMENTIMPORTJOBSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetSegmentImportJobsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetSegmentImportJobsResponseUnmarshaller.Instance; return Invoke<GetSegmentImportJobsResponse>(VAR_GETSEGMENTIMPORTJOBSREQUEST, VAR_VAR); }
public virtual VerifyEmailAddressResponse METHOD_NAME(VerifyEmailAddressRequest VAR_VERIFYEMAILADDRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = VerifyEmailAddressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = VerifyEmailAddressResponseUnmarshaller.Instance; return Invoke<VerifyEmailAddressResponse>(VAR_VERIFYEMAILADDRESSREQUEST, VAR_VAR); }
public virtual GetTagsResponse METHOD_NAME(GetTagsRequest VAR_GETTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetTagsResponseUnmarshaller.Instance; return Invoke<GetTagsResponse>(VAR_GETTAGSREQUEST, VAR_VAR); }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(text).Append(LITERAL_CHAR); foreach (Toffs to in termsOffsets) VAR_STRINGBUILDER.Append(to.METHOD_NAME()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override TreeFilter METHOD_NAME() { return new OrTreeFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public StandardTokenizerImpl(TextReader VAR_TEXTREADER) { this.zzReader = VAR_TEXTREADER; }
public MoPenFindGroupRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public static java.text.BreakIterator METHOD_NAME() { return METHOD_NAME(System.Globalization.CultureInfo.CurrentCulture); }
public virtual bool METHOD_NAME() { return true; }
public override java.nio.LongBuffer METHOD_NAME() { java.nio.LongToByteBufferAdapter VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER = new java.nio.LongToByteBufferAdapter(byteBuffer.METHOD_NAME()); VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._limit = _limit; VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._position = _position; VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER._mark = _mark; VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER.byteBuffer._order = byteBuffer._order; return VAR_JAVA.NIO.LONGTOBYTEBUFFERADAPTER; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { Debug.Assert(VAR_BYTE[].Length >= VAR_INT + VAR_INT); if (VAR_INT == LITERAL_INT) { return; } if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != LITERAL_NULL) { outerInstance.blocks.Add(outerInstance.currentBlock); outerInstance.blockEnd.Add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = LITERAL_INT; } int VAR_INT = VAR_INT + VAR_INT; while (true) { int VAR_INT = VAR_INT - VAR_INT; int VAR_INT = outerInstance.blockSize - outerInstance.upto; if (VAR_INT < VAR_INT) { System.Buffer.BlockCopy(VAR_BYTE[], VAR_INT, outerInstance.currentBlock, outerInstance.upto, VAR_INT); outerInstance.blocks.Add(outerInstance.currentBlock); outerInstance.blockEnd.Add(outerInstance.blockSize); outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = LITERAL_INT; VAR_INT += VAR_INT; } else { System.Buffer.BlockCopy(VAR_BYTE[], VAR_INT, outerInstance.currentBlock, outerInstance.upto, VAR_INT); outerInstance.upto += VAR_INT; break; } } }
public override java.nio.ByteBuffer METHOD_NAME(float VAR_FLOAT) { throw new System.NotImplementedException(); }
public virtual System.Type METHOD_NAME() { return arg; }
public virtual GetVaultAccessPolicyResponse METHOD_NAME(GetVaultAccessPolicyRequest VAR_GETVAULTACCESSPOLICYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVaultAccessPolicyRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVaultAccessPolicyResponseUnmarshaller.Instance; return Invoke<GetVaultAccessPolicyResponse>(VAR_GETVAULTACCESSPOLICYREQUEST, VAR_VAR); }
public virtual GetReusableDelegationSetLimitResponse METHOD_NAME(GetReusableDelegationSetLimitRequest VAR_GETREUSABLEDELEGATIONSETLIMITREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetReusableDelegationSetLimitRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetReusableDelegationSetLimitResponseUnmarshaller.Instance; return Invoke<GetReusableDelegationSetLimitResponse>(VAR_GETREUSABLEDELEGATIONSETLIMITREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(WeightedPhraseInfo VAR_WEIGHTEDPHRASEINFO) { int VAR_INT = StartOffset - VAR_WEIGHTEDPHRASEINFO.StartOffset; if (VAR_INT != LITERAL_INT) { return VAR_INT; } VAR_INT = EndOffset - VAR_WEIGHTEDPHRASEINFO.EndOffset; if (VAR_INT != LITERAL_INT) { return VAR_INT; } return (int)Math.Sign(Boost - VAR_WEIGHTEDPHRASEINFO.Boost); }
public virtual StopRelationalDatabaseResponse METHOD_NAME(StopRelationalDatabaseRequest VAR_STOPRELATIONALDATABASEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = StopRelationalDatabaseRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = StopRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StopRelationalDatabaseResponse>(VAR_STOPRELATIONALDATABASEREQUEST, VAR_VAR); }
public override void METHOD_NAME() { Arrays.Fill(blocks, LITERAL_INT); }
public virtual UpdateScriptResponse METHOD_NAME(UpdateScriptRequest VAR_UPDATESCRIPTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateScriptRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateScriptResponseUnmarshaller.Instance; return Invoke<UpdateScriptResponse>(VAR_UPDATESCRIPTREQUEST, VAR_VAR); }
public InterpreterRuleContext(ParserRuleContext VAR_PARSERRULECONTEXT, int VAR_INT, int VAR_INT) : base(parent, invokingStateNumber) { this.VAR_INT = VAR_INT; }
public virtual CreateFileSystemFromBackupResponse METHOD_NAME(CreateFileSystemFromBackupRequest VAR_CREATEFILESYSTEMFROMBACKUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateFileSystemFromBackupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateFileSystemFromBackupResponseUnmarshaller.Instance; return Invoke<CreateFileSystemFromBackupResponse>(VAR_CREATEFILESYSTEMFROMBACKUPREQUEST, VAR_VAR); }
public override int METHOD_NAME(double VAR_DOUBLE) { if (VAR_DOUBLE == LITERAL_INT) { return m_maxLevels; } int VAR_INT = GeohashUtils.LookupHashLenForWidthHeight(VAR_DOUBLE, VAR_DOUBLE); return Math.Max(Math.Min(VAR_INT, m_maxLevels), LITERAL_INT); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { ValueEval VAR_VALUEEVAL; ValueEval VAR_VALUEEVAL; try { VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_VALUEEVAL = OperandResolver.GetSingleValue(VAR_VALUEEVAL, VAR_INT, VAR_INT); } catch (EvaluationException e) { return e.GetErrorEval(); } StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetText(VAR_VALUEEVAL)); VAR_STRINGBUILDER.Append(GetText(VAR_VALUEEVAL)); return new StringEval(VAR_STRINGBUILDER.ToString()); }
public static IChartDataSource<double> METHOD_NAME(ISheet VAR_ISHEET, CellRangeAddress VAR_CELLRANGEADDRESS) { return new DoubleCellRangeDataSource(VAR_ISHEET, VAR_CELLRANGEADDRESS); }
public static FuncPtg METHOD_NAME(ILittleEndianInput VAR_ILITTLEENDIANINPUT) { return METHOD_NAME(VAR_ILITTLEENDIANINPUT.ReadUShort()); }
public virtual InitiateVaultLockResponse METHOD_NAME(InitiateVaultLockRequest VAR_INITIATEVAULTLOCKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InitiateVaultLockRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InitiateVaultLockResponseUnmarshaller.Instance; return Invoke<InitiateVaultLockResponse>(VAR_INITIATEVAULTLOCKREQUEST, VAR_VAR); }
public virtual K METHOD_NAME() { return key; }
public bool METHOD_NAME(int VAR_INT) { return ((VAR_INT & this._mask) != LITERAL_INT); }
public DoubleMetaphoneFilter(TokenStream VAR_TOKENSTREAM, int VAR_INT, bool VAR_BOOL) : base(input) { this.encoder.MaxCodeLen = VAR_INT; this.VAR_BOOL = VAR_BOOL; this.termAtt = AddAttribute<ICharTermAttribute>(); this.posAtt = AddAttribute<IPositionIncrementAttribute>(); }
public bool METHOD_NAME(String VAR_STRING, String VAR_STRING) { return workbook.METHOD_NAME(VAR_STRING, VAR_STRING); }
public DescribeEngineDefaultParametersRequest(string VAR_STRING) { _cacheParameterGroupFamily = VAR_STRING; }
public virtual void METHOD_NAME() { endB++; }
public JapaneseReadingFormFilter(TokenStream VAR_TOKENSTREAM, bool VAR_BOOL) : base(input) { this.VAR_BOOL = VAR_BOOL; this.termAttr = AddAttribute<ICharTermAttribute>(); this.readingAttr = AddAttribute<IReadingAttribute>(); }
public virtual DeleteContactResponse METHOD_NAME(DeleteContactRequest VAR_DELETECONTACTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteContactRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteContactResponseUnmarshaller.Instance; return Invoke<DeleteContactResponse>(VAR_DELETECONTACTREQUEST, VAR_VAR); }
public static int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, char VAR_CHAR) { int VAR_INT = VAR_BYTE[].Length; while (VAR_INT < VAR_INT) { if (VAR_BYTE[][VAR_INT++] == VAR_CHAR) { return VAR_INT; } } return VAR_INT; }
public virtual InvokeEndpointResponse METHOD_NAME(InvokeEndpointRequest VAR_INVOKEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = InvokeEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = InvokeEndpointResponseUnmarshaller.Instance; return Invoke<InvokeEndpointResponse>(VAR_INVOKEENDPOINTREQUEST, VAR_VAR); }
public virtual PutAccountSettingDefaultResponse METHOD_NAME(PutAccountSettingDefaultRequest VAR_PUTACCOUNTSETTINGDEFAULTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutAccountSettingDefaultRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutAccountSettingDefaultResponseUnmarshaller.Instance; return Invoke<PutAccountSettingDefaultResponse>(VAR_PUTACCOUNTSETTINGDEFAULTREQUEST, VAR_VAR); }
public static FileInfo METHOD_NAME(FileInfo VAR_FILEINFO) { DirectoryInfo VAR_DIRECTORYINFO = VAR_FILEINFO.Directory; string VAR_STRING = LITERAL_STRING + VAR_FILEINFO.Name; return VAR_DIRECTORYINFO == LITERAL_NULL ? new FileInfo(VAR_STRING) : new FileInfo(System.IO.Path.Combine(VAR_DIRECTORYINFO.FullName, VAR_STRING)); }
public string METHOD_NAME() { return METHOD_NAME(true); }
public String METHOD_NAME(int VAR_INT) { return _funcMap[VAR_INT]; }
public virtual RecordHandlerProgressResponse METHOD_NAME(RecordHandlerProgressRequest VAR_RECORDHANDLERPROGRESSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RecordHandlerProgressRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RecordHandlerProgressResponseUnmarshaller.Instance; return Invoke<RecordHandlerProgressResponse>(VAR_RECORDHANDLERPROGRESSREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { lock (this) { insert0(VAR_INT, VAR_CHAR[], VAR_INT, VAR_INT); return this; } }
public virtual RevObject METHOD_NAME(AnyObjectId VAR_ANYOBJECTID, int VAR_INT) { RevObject VAR_REVOBJECT = objects.Get(VAR_ANYOBJECTID); if (VAR_REVOBJECT == LITERAL_NULL) { switch (VAR_INT) { case Constants.OBJ_COMMIT: { VAR_REVOBJECT = CreateCommit(VAR_ANYOBJECTID); break; } case Constants.OBJ_TREE: { VAR_REVOBJECT = new RevTree(VAR_ANYOBJECTID); break; } case Constants.OBJ_BLOB: { VAR_REVOBJECT = new RevBlob(VAR_ANYOBJECTID); break; } case Constants.OBJ_TAG: { VAR_REVOBJECT = new RevTag(VAR_ANYOBJECTID); break; } default: { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidGitType, Sharpen.Extensions.ValueOf(VAR_INT))); } } objects.Add(VAR_REVOBJECT); } return VAR_REVOBJECT; }
public virtual BytesRef METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT, VAR_CHAR[].Length); }
public java.lang.StringBuilder METHOD_NAME(char VAR_CHAR) { append0(VAR_CHAR); return this; }
public void METHOD_NAME(String VAR_STRING) { int VAR_INT = GetNameIndex(VAR_STRING); METHOD_NAME(VAR_INT); }
public WrappedPositionArray() { for (int i = LITERAL_INT; i < positions.Length; i++) { positions[i] = new Position(); } }
public PasswordRev4Record(int VAR_INT) { field_1_password = VAR_INT; }
public static char[] METHOD_NAME(int VAR_INT) { return ToHexChars(VAR_INT, LITERAL_INT); }
public RemovePermissionRequest(string VAR_STRING, string VAR_STRING) { _topicArn = VAR_STRING; _label = VAR_STRING; }
public virtual UpdateOrganizationConfigurationResponse METHOD_NAME(UpdateOrganizationConfigurationRequest VAR_UPDATEORGANIZATIONCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateOrganizationConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateOrganizationConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateOrganizationConfigurationResponse>(VAR_UPDATEORGANIZATIONCONFIGURATIONREQUEST, VAR_VAR); }
public override void METHOD_NAME(BytesRef VAR_BYTESREF, TermState VAR_TERMSTATE) { if (!VAR_BYTESREF.Equals(term)) { state.CopyFrom(VAR_TERMSTATE); term = BytesRef.DeepCopyOf(VAR_BYTESREF); seekPending = true; } }
public virtual void METHOD_NAME() { newline(); }
public override string METHOD_NAME() { return LITERAL_STRING + @delegate + LITERAL_STRING + (maxCachedBytes / LITERAL_INT / LITERAL_INT) + LITERAL_STRING + (maxMergeSizeBytes / LITERAL_INT / LITERAL_INT) + LITERAL_STRING; }
public virtual DescribeWorkforceResponse METHOD_NAME(DescribeWorkforceRequest VAR_DESCRIBEWORKFORCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeWorkforceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeWorkforceResponseUnmarshaller.Instance; return Invoke<DescribeWorkforceResponse>(VAR_DESCRIBEWORKFORCEREQUEST, VAR_VAR); }
public ToggleFeaturesRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public java.lang.StringBuffer METHOD_NAME(char[] VAR_CHAR[], int VAR_INT, int VAR_INT) { lock (this) { append0(VAR_CHAR[], VAR_INT, VAR_INT); return this; } }
public override java.nio.ShortBuffer METHOD_NAME(short VAR_SHORT) { if (_position == _limit) { throw new java.nio.BufferOverflowException(); } byteBuffer.putShort(_position++ * libcore.io.SizeOf.SHORT, VAR_SHORT); return this; }
public override char METHOD_NAME() { index = (limit == start) ? limit : limit - LITERAL_INT; return Current; }
public WeightedSpanTermExtractor(string VAR_STRING) { if (VAR_STRING != LITERAL_NULL) { this.VAR_STRING = VAR_STRING.Intern(); } }
public StringReader(string VAR_STRING) { this.VAR_STRING = VAR_STRING; this.count = VAR_STRING.Length; }
public GetThumbnailsRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual NGit.Api.TagCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); this.VAR_STRING = VAR_STRING; return this; }
public override string METHOD_NAME() { lock (mutex) { return c.METHOD_NAME(); } }
public override string METHOD_NAME() { return METHOD_NAME((IList<string>)LITERAL_NULL, (Antlr4.Runtime.RuleContext)LITERAL_NULL); }
public override string METHOD_NAME() { return LITERAL_STRING + segmentsFileName + LITERAL_STRING; }
public override int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, IEscherRecordFactory VAR_IESCHERRECORDFACTORY) { int VAR_INT = ReadHeader(VAR_BYTE[], VAR_INT); int VAR_INT = VAR_INT + HEADER_SIZE; field_pictureData = new byte[VAR_INT]; Array.Copy(VAR_BYTE[], VAR_INT, field_pictureData, LITERAL_INT, VAR_INT); return VAR_INT + LITERAL_INT; }
public static int[] METHOD_NAME(int[] VAR_INT[], int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(VAR_INT[], LITERAL_INT, VAR_INT); }
public void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.Write(data); }
public override E METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT && VAR_INT < _size) { java.util.LinkedList.Link<E> VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = voidLink; if (VAR_INT < (_size / LITERAL_INT)) { { for (int i = LITERAL_INT; i <= VAR_INT; i++) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.next; } } } else { { for (int i = _size; i > VAR_INT; i--) { VAR_JAVA.UTIL.LINKEDLIST.LINK<E> = VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.previous; } } } return VAR_JAVA.UTIL.LINKEDLIST.LINK<E>.data; } throw new System.IndexOutOfRangeException(); }
public static bool METHOD_NAME(CellRangeAddress VAR_CELLRANGEADDRESS, CellRangeAddress VAR_CELLRANGEADDRESS) { int VAR_INT = VAR_CELLRANGEADDRESS.FirstRow; int VAR_INT = VAR_CELLRANGEADDRESS.LastRow; int VAR_INT = VAR_CELLRANGEADDRESS.FirstColumn; int VAR_INT = VAR_CELLRANGEADDRESS.LastColumn; if (VAR_CELLRANGEADDRESS.FirstRow > LITERAL_INT && VAR_CELLRANGEADDRESS.FirstRow - LITERAL_INT == VAR_INT || VAR_INT > LITERAL_INT && VAR_INT - LITERAL_INT == VAR_CELLRANGEADDRESS.LastRow) { return VAR_CELLRANGEADDRESS.FirstColumn == VAR_INT && VAR_CELLRANGEADDRESS.LastColumn == VAR_INT; } if (VAR_CELLRANGEADDRESS.FirstColumn > LITERAL_INT && VAR_CELLRANGEADDRESS.FirstColumn - LITERAL_INT == VAR_INT || VAR_INT > LITERAL_INT && VAR_CELLRANGEADDRESS.LastColumn == VAR_INT - LITERAL_INT) { return VAR_CELLRANGEADDRESS.FirstRow == VAR_INT && VAR_CELLRANGEADDRESS.LastRow == VAR_INT; } return false; }
public void METHOD_NAME(int VAR_INT, RecordVisitor VAR_RECORDVISITOR) { CellValueRecordInterface[] VAR_CELLVALUERECORDINTERFACE[] = records[VAR_INT]; if (VAR_CELLVALUERECORDINTERFACE[] == LITERAL_NULL) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } for (int i = LITERAL_INT; i < VAR_CELLVALUERECORDINTERFACE[].Length; i++) { RecordBase VAR_RECORDBASE = (RecordBase)VAR_CELLVALUERECORDINTERFACE[][i]; if (VAR_RECORDBASE == LITERAL_NULL) { continue; } int VAR_INT = CountBlanks(VAR_CELLVALUERECORDINTERFACE[], i); if (VAR_INT > LITERAL_INT) { VAR_RECORDVISITOR.VisitRecord(CreateMBR(VAR_CELLVALUERECORDINTERFACE[], i, VAR_INT)); i += VAR_INT - LITERAL_INT; } else if (VAR_RECORDBASE is RecordAggregate) { RecordAggregate VAR_RECORDAGGREGATE = (RecordAggregate)VAR_RECORDBASE; VAR_RECORDAGGREGATE.VisitContainedRecords(VAR_RECORDVISITOR); } else { VAR_RECORDVISITOR.VisitRecord((Record)VAR_RECORDBASE); } } }
public virtual DeleteVpnConnectionResponse METHOD_NAME(DeleteVpnConnectionRequest VAR_DELETEVPNCONNECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpnConnectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpnConnectionResponseUnmarshaller.Instance; return Invoke<DeleteVpnConnectionResponse>(VAR_DELETEVPNCONNECTIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME() { username = LITERAL_NULL; if (password != LITERAL_NULL) { Arrays.Fill(password, (char)LITERAL_INT); password = LITERAL_NULL; } }
public override string METHOD_NAME() { return string.Format(CultureInfo.InvariantCulture, LITERAL_STRING, TotalTime / LITERAL_INT, ReadTime / LITERAL_INT, SortTime / LITERAL_INT, MergeTime / LITERAL_INT, Lines, TempMergeFiles, MergeRounds, (double)BufferSize / MB); }
public virtual DetachLoadBalancersResponse METHOD_NAME(DetachLoadBalancersRequest VAR_DETACHLOADBALANCERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DetachLoadBalancersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DetachLoadBalancersResponseUnmarshaller.Instance; return Invoke<DetachLoadBalancersResponse>(VAR_DETACHLOADBALANCERSREQUEST, VAR_VAR); }
public virtual Span[] METHOD_NAME(string VAR_STRING) { lock (this) { if (sentenceSplitter != LITERAL_NULL) { return sentenceSplitter.sentPosDetect(VAR_STRING); } else { Span[] VAR_SPAN[] = new Span[LITERAL_INT]; VAR_SPAN[][LITERAL_INT] = new Span(LITERAL_INT, VAR_STRING.Length); return VAR_SPAN[]; } } }
public virtual bool METHOD_NAME() { return GetHost() != LITERAL_NULL; }
public void METHOD_NAME(int VAR_INT) { field_1_xf_index = isBuiltinFlag.Set(field_1_xf_index); field_2_builtin_style = VAR_INT; }
public virtual ObjectReader METHOD_NAME() { return reader; }
public void METHOD_NAME(EscherProperty VAR_ESCHERPROPERTY) { properties.Add(VAR_ESCHERPROPERTY); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(StringUtil.ToHexString(sid).ToUpper() + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_rawData)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public string METHOD_NAME(int VAR_INT) { ensureMatch(); int VAR_INT = matchOffsets[VAR_INT * LITERAL_INT]; int VAR_INT = matchOffsets[(VAR_INT * LITERAL_INT) + LITERAL_INT]; if (VAR_INT == -LITERAL_INT || VAR_INT == -LITERAL_INT) { return LITERAL_NULL; } else { return Sharpen.StringHelper.Substring(input, VAR_INT, VAR_INT); } }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_COMPANY); }
public override RevFilter METHOD_NAME() { RevFilter[] VAR_REVFILTER[] = new RevFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_REVFILTER[].Length; i++) { VAR_REVFILTER[][i] = subfilters[i].METHOD_NAME(); } return new OrRevFilter.List(VAR_REVFILTER[]); }
public static java.nio.charset.Charset METHOD_NAME() { return DEFAULT_CHARSET; }
public void METHOD_NAME(HSSFName VAR_HSSFNAME) { int VAR_INT = GetNameIndex(VAR_HSSFNAME); METHOD_NAME(VAR_INT); }
public AttributeValueUpdate(AttributeValue VAR_ATTRIBUTEVALUE, AttributeAction VAR_ATTRIBUTEACTION) { _value = VAR_ATTRIBUTEVALUE; _action = VAR_ATTRIBUTEACTION; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(this.Text).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual DisassociateSkillFromSkillGroupResponse METHOD_NAME(DisassociateSkillFromSkillGroupRequest VAR_DISASSOCIATESKILLFROMSKILLGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateSkillFromSkillGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateSkillFromSkillGroupResponseUnmarshaller.Instance; return Invoke<DisassociateSkillFromSkillGroupResponse>(VAR_DISASSOCIATESKILLFROMSKILLGROUPREQUEST, VAR_VAR); }
public override string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); if (!Field.Equals(VAR_STRING, StringComparison.Ordinal)) { VAR_STRINGBUILDER.Append(Field); VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(_prefix.Text()); VAR_STRINGBUILDER.Append(LITERAL_CHAR); VAR_STRINGBUILDER.Append(ToStringUtils.Boost(Boost)); return VAR_STRINGBUILDER.METHOD_NAME(); }
public NameRecord METHOD_NAME(int VAR_INT) { return (NameRecord)_definedNames[VAR_INT]; }
public override Object METHOD_NAME() { BottomMarginRecord VAR_BOTTOMMARGINRECORD = new BottomMarginRecord(); VAR_BOTTOMMARGINRECORD.field_1_margin = this.field_1_margin; return VAR_BOTTOMMARGINRECORD; }
public virtual V METHOD_NAME(V VAR_V) { throw new System.NotSupportedException(); }
public QuadPrefixTree(SpatialContext VAR_SPATIALCONTEXT, IRectangle VAR_IRECTANGLE, int VAR_INT) : base(ctx, maxLevels) { xmin = VAR_IRECTANGLE.MinX; xmax = VAR_IRECTANGLE.MaxX; ymin = VAR_IRECTANGLE.MinY; ymax = VAR_IRECTANGLE.MaxY; levelW = new double[VAR_INT]; levelH = new double[VAR_INT]; levelS = new int[VAR_INT]; levelN = new int[VAR_INT]; gridW = xmax - xmin; gridH = ymax - ymin; this.xmid = xmin + gridW / LITERAL_INT; this.ymid = ymin + gridH / LITERAL_INT; levelW[LITERAL_INT] = gridW / LITERAL_INT; levelH[LITERAL_INT] = gridH / LITERAL_INT; levelS[LITERAL_INT] = LITERAL_INT; levelN[LITERAL_INT] = LITERAL_INT; for (int i = LITERAL_INT; i < levelW.Length; i++) { levelW[i] = levelW[i - LITERAL_INT] / LITERAL_INT; levelH[i] = levelH[i - LITERAL_INT] / LITERAL_INT; levelS[i] = levelS[i - LITERAL_INT] * LITERAL_INT; levelN[i] = levelN[i - LITERAL_INT] * LITERAL_INT; } }
public static HSSFAnchor METHOD_NAME(EscherContainerRecord VAR_ESCHERCONTAINERRECORD) { if (LITERAL_NULL != VAR_ESCHERCONTAINERRECORD.GetChildById(EscherChildAnchorRecord.RECORD_ID)) { return new HSSFChildAnchor((EscherChildAnchorRecord)VAR_ESCHERCONTAINERRECORD.GetChildById(EscherChildAnchorRecord.RECORD_ID)); } else { if (LITERAL_NULL != VAR_ESCHERCONTAINERRECORD.GetChildById(EscherClientAnchorRecord.RECORD_ID)) { return new HSSFClientAnchor((EscherClientAnchorRecord)VAR_ESCHERCONTAINERRECORD.GetChildById(EscherClientAnchorRecord.RECORD_ID)); } return LITERAL_NULL; } }
public virtual void METHOD_NAME() { if (_input != LITERAL_NULL) { _input.Seek(LITERAL_INT); } _token = LITERAL_NULL; _type = TokenConstants.InvalidType; _channel = TokenConstants.DefaultChannel; _tokenStartCharIndex = -LITERAL_INT; _tokenStartColumn = -LITERAL_INT; _tokenStartLine = -LITERAL_INT; _text = LITERAL_NULL; _hitEOF = false; _mode = Antlr4.Runtime.Lexer.DEFAULT_MODE; _modeStack.Clear(); Interpreter.METHOD_NAME(); }
public override java.nio.ShortBuffer METHOD_NAME() { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); java.nio.ByteBuffer VAR_JAVA.NIO.BYTEBUFFER = byteBuffer.METHOD_NAME().order(byteBuffer.order()); java.nio.ShortBuffer VAR_JAVA.NIO.SHORTBUFFER = new java.nio.ShortToByteBufferAdapter(VAR_JAVA.NIO.BYTEBUFFER); byteBuffer.clear(); return VAR_JAVA.NIO.SHORTBUFFER; }
public virtual bool METHOD_NAME() { return packedGitMMAP; }
public override bool METHOD_NAME(object VAR_OBJECT) { MutableValueDouble VAR_MUTABLEVALUEDOUBLE = (MutableValueDouble)VAR_OBJECT; return Value == VAR_MUTABLEVALUEDOUBLE.Value && Exists == VAR_MUTABLEVALUEDOUBLE.Exists; }
public virtual PurchaseReservedInstancesOfferingResponse METHOD_NAME(PurchaseReservedInstancesOfferingRequest VAR_PURCHASERESERVEDINSTANCESOFFERINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PurchaseReservedInstancesOfferingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PurchaseReservedInstancesOfferingResponseUnmarshaller.Instance; return Invoke<PurchaseReservedInstancesOfferingResponse>(VAR_PURCHASERESERVEDINSTANCESOFFERINGREQUEST, VAR_VAR); }
public virtual char METHOD_NAME() { throw new System.NotImplementedException(); }
public virtual AssociateRepositoryResponse METHOD_NAME(AssociateRepositoryRequest VAR_ASSOCIATEREPOSITORYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateRepositoryRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateRepositoryResponseUnmarshaller.Instance; return Invoke<AssociateRepositoryResponse>(VAR_ASSOCIATEREPOSITORYREQUEST, VAR_VAR); }
public virtual ImportApiKeysResponse METHOD_NAME(ImportApiKeysRequest VAR_IMPORTAPIKEYSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ImportApiKeysRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ImportApiKeysResponseUnmarshaller.Instance; return Invoke<ImportApiKeysResponse>(VAR_IMPORTAPIKEYSREQUEST, VAR_VAR); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteByte(sid + PtgClass); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_index_extern_sheet); VAR_ILITTLEENDIANOUTPUT.WriteInt(unused1); VAR_ILITTLEENDIANOUTPUT.WriteInt(unused2); }
public virtual BinaryHunk.Type METHOD_NAME() { return type; }
public static DateTime METHOD_NAME(double VAR_DOUBLE, bool VAR_BOOL) { return METHOD_NAME(VAR_DOUBLE, VAR_BOOL, false); }
public virtual DeleteSnapshotScheduleResponse METHOD_NAME(DeleteSnapshotScheduleRequest VAR_DELETESNAPSHOTSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteSnapshotScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<DeleteSnapshotScheduleResponse>(VAR_DELETESNAPSHOTSCHEDULEREQUEST, VAR_VAR); }
public void METHOD_NAME(String VAR_STRING, String VAR_STRING) { this.workbook.METHOD_NAME(VAR_STRING, VAR_STRING); }
public virtual CreateCloudFormationStackResponse METHOD_NAME(CreateCloudFormationStackRequest VAR_CREATECLOUDFORMATIONSTACKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCloudFormationStackRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCloudFormationStackResponseUnmarshaller.Instance; return Invoke<CreateCloudFormationStackResponse>(VAR_CREATECLOUDFORMATIONSTACKREQUEST, VAR_VAR); }
public void METHOD_NAME(sbyte VAR_SBYTE)throws IOException { Debug . Assert(bufferPos ==buffer.position() , "bufferPos=" +bufferPos + " vs buffer.position()=" +buffer.position() ) ; buffer.put(VAR_SBYTE) ; if ( ++bufferPos ==bufferSize ) {dump(); } }
public ExtendedFormatRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_font_index = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_format_index = VAR_RECORDINPUTSTREAM.ReadShort(); field_3_cell_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_4_alignment_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_5_indention_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_6_border_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_7_palette_options = VAR_RECORDINPUTSTREAM.ReadShort(); field_8_adtl_palette_options = VAR_RECORDINPUTSTREAM.ReadInt(); field_9_fill_palette_options = VAR_RECORDINPUTSTREAM.ReadShort(); }
public int METHOD_NAME(String VAR_STRING, String VAR_STRING) { return _iBook.METHOD_NAME(VAR_STRING, VAR_STRING); }
public HSSFObjectData(EscherContainerRecord VAR_ESCHERCONTAINERRECORD, ObjRecord VAR_OBJRECORD, DirectoryEntry VAR_DIRECTORYENTRY) : base(spContainer, objRecord) { this.VAR_DIRECTORYENTRY = VAR_DIRECTORYENTRY; }
public virtual long METHOD_NAME() { long VAR_LONG = RamUsageEstimator.AlignObjectSize(BaseRamBytesUsed()) + (pending != LITERAL_NULL ? RamUsageEstimator.SizeOf(pending) : LITERAL_INT) + RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (long)RamUsageEstimator.NUM_BYTES_OBJECT_REF * values.Length); return VAR_LONG + valuesBytes; }
public virtual UpdateApnsVoipChannelResponse METHOD_NAME(UpdateApnsVoipChannelRequest VAR_UPDATEAPNSVOIPCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateApnsVoipChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<UpdateApnsVoipChannelResponse>(VAR_UPDATEAPNSVOIPCHANNELREQUEST, VAR_VAR); }
public virtual string[] METHOD_NAME() { return nameValPairs.Keys.ToArray(); }
public virtual DeleteAutoSnapshotResponse METHOD_NAME(DeleteAutoSnapshotRequest VAR_DELETEAUTOSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAutoSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAutoSnapshotResponseUnmarshaller.Instance; return Invoke<DeleteAutoSnapshotResponse>(VAR_DELETEAUTOSNAPSHOTREQUEST, VAR_VAR); }
public int METHOD_NAME() { return _lowIx; }
public virtual DescribeSubscribedWorkteamResponse METHOD_NAME(DescribeSubscribedWorkteamRequest VAR_DESCRIBESUBSCRIBEDWORKTEAMREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeSubscribedWorkteamRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeSubscribedWorkteamResponseUnmarshaller.Instance; return Invoke<DescribeSubscribedWorkteamResponse>(VAR_DESCRIBESUBSCRIBEDWORKTEAMREQUEST, VAR_VAR); }
public virtual DeleteVpnGatewayResponse METHOD_NAME(DeleteVpnGatewayRequest VAR_DELETEVPNGATEWAYREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVpnGatewayRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVpnGatewayResponseUnmarshaller.Instance; return Invoke<DeleteVpnGatewayResponse>(VAR_DELETEVPNGATEWAYREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(int VAR_INT) { return intSet.Exists(VAR_INT); }
public virtual string METHOD_NAME() { return _constantName; }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(field_1_formatIndex); }
public virtual bool METHOD_NAME() { return size() == LITERAL_INT; }
public virtual DescribeCacheParametersResponse METHOD_NAME(DescribeCacheParametersRequest VAR_DESCRIBECACHEPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCacheParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCacheParametersResponseUnmarshaller.Instance; return Invoke<DescribeCacheParametersResponse>(VAR_DESCRIBECACHEPARAMETERSREQUEST, VAR_VAR); }
public SimpleFraction(int VAR_INT, int VAR_INT) { this.VAR_INT = VAR_INT; this.VAR_INT = VAR_INT; }
public static int METHOD_NAME(int VAR_INT) { return idealByteArraySize(VAR_INT); }
public virtual SubmoduleStatusCommand METHOD_NAME() { return new SubmoduleStatusCommand(repo); }
public virtual PutRecordBatchResponse METHOD_NAME(PutRecordBatchRequest VAR_PUTRECORDBATCHREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutRecordBatchRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutRecordBatchResponseUnmarshaller.Instance; return Invoke<PutRecordBatchResponse>(VAR_PUTRECORDBATCHREQUEST, VAR_VAR); }
public QueryTermScorer(WeightedTerm[] VAR_WEIGHTEDTERM[]) { termsToFind = new Dictionary<string, WeightedTerm>(); for (int i = LITERAL_INT; i < VAR_WEIGHTEDTERM[].Length; i++) { if (!termsToFind.TryGetValue(VAR_WEIGHTEDTERM[][i].Term, out WeightedTerm existingTerm) || (existingTerm == LITERAL_NULL) || (existingTerm.Weight < VAR_WEIGHTEDTERM[][i].Weight)) { termsToFind[VAR_WEIGHTEDTERM[][i].Term] = VAR_WEIGHTEDTERM[][i]; maxTermWeight = Math.Max(maxTermWeight, VAR_WEIGHTEDTERM[][i].Weight); } } }
public static bool METHOD_NAME(IEnumerable<BitSet> VAR_IENUMERABLE<BITSET>) { return !HasNonConflictingAltSet(VAR_IENUMERABLE<BITSET>); }
public virtual DescribeRuntimeConfigurationResponse METHOD_NAME(DescribeRuntimeConfigurationRequest VAR_DESCRIBERUNTIMECONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeRuntimeConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeRuntimeConfigurationResponseUnmarshaller.Instance; return Invoke<DescribeRuntimeConfigurationResponse>(VAR_DESCRIBERUNTIMECONFIGURATIONREQUEST, VAR_VAR); }
public virtual RevCommit METHOD_NAME(AnyObjectId VAR_ANYOBJECTID) { RevObject VAR_REVOBJECT = Peel(ParseAny(VAR_ANYOBJECTID)); if (!(VAR_REVOBJECT is RevCommit)) { throw new IncorrectObjectTypeException(VAR_ANYOBJECTID.ToObjectId(), Constants.TYPE_COMMIT); } return (RevCommit)VAR_REVOBJECT; }
public short METHOD_NAME() { return (short)ReadUShort(); }
public void METHOD_NAME() { for (int i = LITERAL_INT; i <= size; i++) { heap[i] = default(T); } size = LITERAL_INT; }
public virtual CreateVPCAssociationAuthorizationResponse METHOD_NAME(CreateVPCAssociationAuthorizationRequest VAR_CREATEVPCASSOCIATIONAUTHORIZATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateVPCAssociationAuthorizationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateVPCAssociationAuthorizationResponseUnmarshaller.Instance; return Invoke<CreateVPCAssociationAuthorizationResponse>(VAR_CREATEVPCASSOCIATIONAUTHORIZATIONREQUEST, VAR_VAR); }
public ModifyCacheParameterGroupRequest(string VAR_STRING, List<ParameterNameValue> VAR_LIST<PARAMETERNAMEVALUE>) { _cacheParameterGroupName = VAR_STRING; _parameterNameValues = VAR_LIST<PARAMETERNAMEVALUE>; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is CatalanStemmer; }
public AutomatonQuery(Term VAR_TERM, Automaton VAR_AUTOMATON) : base(term.Field) { this.m_term = VAR_TERM; this.m_automaton = VAR_AUTOMATON; this.m_compiled = new CompiledAutomaton(VAR_AUTOMATON); }
public virtual string METHOD_NAME() { return pattern; }
public virtual int METHOD_NAME(java.nio.IntBuffer VAR_JAVA.NIO.INTBUFFER) { int VAR_INT = (remaining() < VAR_JAVA.NIO.INTBUFFER.remaining()) ? remaining() : VAR_JAVA.NIO.INTBUFFER.remaining(); int VAR_INT = _position; int VAR_INT = VAR_JAVA.NIO.INTBUFFER._position; int VAR_INT; int VAR_INT; while (VAR_INT > LITERAL_INT) { VAR_INT = get(VAR_INT); VAR_INT = VAR_JAVA.NIO.INTBUFFER.get(VAR_INT); if (VAR_INT != VAR_INT) { return VAR_INT < VAR_INT ? -LITERAL_INT : LITERAL_INT; } VAR_INT++; VAR_INT++; VAR_INT--; } return remaining() - VAR_JAVA.NIO.INTBUFFER.remaining(); }
public virtual bool METHOD_NAME() { return this._next != this._enclosing.header; }
public override Type METHOD_NAME() { return typeof(IndexChangedListener); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(AnchorId)).Append(LITERAL_STRING).Append(AnchorId).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Link1)).Append(LITERAL_STRING).Append(Link1).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(HexDump.ToHex(Link2)).Append(LITERAL_STRING).Append(Link2).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(Environment.NewLine); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual void METHOD_NAME(bool VAR_BOOL) { if (VAR_BOOL && renameDetector == LITERAL_NULL) { AssertHaveRepository(); renameDetector = new RenameDetector(db); } else { if (!VAR_BOOL) { renameDetector = LITERAL_NULL; } } }
public virtual bool METHOD_NAME(int VAR_INT) { return VAR_INT >= LITERAL_INT && VAR_INT <= LITERAL_INT; }
public void METHOD_NAME(bool VAR_BOOL) { this.VAR_BOOL = VAR_BOOL; gramSize = new CircularSequence(this); }
public override TokenStream METHOD_NAME(TokenStream VAR_TOKENSTREAM) { return new TypeAsPayloadTokenFilter(VAR_TOKENSTREAM); }
public virtual CreateIndexResponse METHOD_NAME(CreateIndexRequest VAR_CREATEINDEXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateIndexRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateIndexResponseUnmarshaller.Instance; return Invoke<CreateIndexResponse>(VAR_CREATEINDEXREQUEST, VAR_VAR); }
public QualityQuery(string VAR_STRING, IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) { this.VAR_STRING = VAR_STRING; this.VAR_IDICTIONARY<STRING, STRING> = VAR_IDICTIONARY<STRING, STRING>; }
public virtual void METHOD_NAME(E VAR_E) { addFirstImpl(VAR_E); }
public ValidateConfigurationSettingsRequest(string VAR_STRING, List<ConfigurationOptionSetting> VAR_LIST<CONFIGURATIONOPTIONSETTING>) { _applicationName = VAR_STRING; _optionSettings = VAR_LIST<CONFIGURATIONOPTIONSETTING>; }
public static RepositoryCache.FileKey METHOD_NAME(FilePath VAR_FILEPATH, FS VAR_FS) { return new RepositoryCache.FileKey(VAR_FILEPATH, VAR_FS); }
public void METHOD_NAME() { MutableSection VAR_MUTABLESECTION = (MutableSection)FirstSection; VAR_MUTABLESECTION.RemoveProperty(PropertyIDMap.PID_SCALE); }
public DocumentDictionary(IndexReader VAR_INDEXREADER, string VAR_STRING, string VAR_STRING, string VAR_STRING, string VAR_STRING) { this.m_reader = VAR_INDEXREADER; this.VAR_STRING = VAR_STRING; this.VAR_STRING = VAR_STRING; this.m_payloadField = VAR_STRING; this.m_contextsField = VAR_STRING; }
public override long METHOD_NAME(int VAR_INT) { int VAR_INT = VAR_INT / LITERAL_INT; int VAR_INT = VAR_INT % LITERAL_INT; int VAR_INT = VAR_INT * LITERAL_INT; return ((long)((ulong)blocks[VAR_INT] >> VAR_INT)) & LITERAL_INT; }
public virtual void METHOD_NAME() { lock (mutex) { c.METHOD_NAME(); } }
public bool METHOD_NAME() { return _nextIndex < _endIx; }
public virtual AssociateVirtualInterfaceResponse METHOD_NAME(AssociateVirtualInterfaceRequest VAR_ASSOCIATEVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<AssociateVirtualInterfaceResponse>(VAR_ASSOCIATEVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual ValueSource METHOD_NAME(IPoint VAR_IPOINT) { return METHOD_NAME(VAR_IPOINT, LITERAL_INT); }
public virtual float METHOD_NAME() { position += posIncAtt.PositionIncrement; string VAR_STRING = termAtt.ToString(); WeightedSpanTerm VAR_WEIGHTEDSPANTERM; if (!fieldWeightedSpanTerms.TryGetValue(VAR_STRING, out VAR_WEIGHTEDSPANTERM) || VAR_WEIGHTEDSPANTERM == LITERAL_NULL) { return LITERAL_INT; } if (VAR_WEIGHTEDSPANTERM.IsPositionSensitive && !VAR_WEIGHTEDSPANTERM.CheckPosition(position)) { return LITERAL_INT; } float VAR_FLOAT = VAR_WEIGHTEDSPANTERM.Weight; if (!foundTerms.Contains(VAR_STRING)) { totalScore += VAR_FLOAT; foundTerms.Add(VAR_STRING); } return VAR_FLOAT; }
public virtual E METHOD_NAME() { java.util.MapClass.Entry<E, object> VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT> = backingMap.pollFirstEntry(); return (VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT> == LITERAL_NULL) ? default(E) : VAR_JAVA.UTIL.MAPCLASS.ENTRY<E, OBJECT>.getKey(); }
public virtual void METHOD_NAME(ParserRuleContext VAR_PARSERRULECONTEXT) { Output.WriteLine(LITERAL_STRING + this._enclosing.RuleNames[VAR_PARSERRULECONTEXT.RuleIndex] + LITERAL_STRING + this._enclosing._input.LT(LITERAL_INT).Text); }
public override java.nio.ShortBuffer METHOD_NAME(int VAR_INT, short VAR_SHORT) { checkIndex(VAR_INT); byteBuffer.putShort(VAR_INT * libcore.io.SizeOf.SHORT, VAR_SHORT); return this; }
public void METHOD_NAME(ICell VAR_ICELL) { _bookEvaluator.METHOD_NAME(new HSSFEvaluationCell(VAR_ICELL)); }
public void METHOD_NAME(ICell VAR_ICELL, int VAR_INT) { if (cells.ContainsKey(VAR_INT)) { throw new ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } bool VAR_BOOL = false; foreach (ICell cellinrow in cells.Values) { if (cellinrow.Equals(VAR_ICELL)) { VAR_BOOL = true; break; } } if (!VAR_BOOL) { throw new ArgumentException(LITERAL_STRING); } RemoveCell(VAR_ICELL, false); ((HSSFCell)VAR_ICELL).UpdateCellNum(VAR_INT); AddCell(VAR_ICELL); }
public virtual void METHOD_NAME(java.io.PipedWriter VAR_JAVA.IO.PIPEDWRITER) { throw new System.NotImplementedException(); }
public override void METHOD_NAME(ILittleEndianOutput VAR_ILITTLEENDIANOUTPUT) { VAR_ILITTLEENDIANOUTPUT.WriteShort(FirstColumn); VAR_ILITTLEENDIANOUTPUT.WriteShort(LastColumn); VAR_ILITTLEENDIANOUTPUT.WriteShort(ColumnWidth); VAR_ILITTLEENDIANOUTPUT.WriteShort(XFIndex); VAR_ILITTLEENDIANOUTPUT.WriteShort(_options); VAR_ILITTLEENDIANOUTPUT.WriteShort(field_6_reserved); }
public virtual ModifyWorkspaceCreationPropertiesResponse METHOD_NAME(ModifyWorkspaceCreationPropertiesRequest VAR_MODIFYWORKSPACECREATIONPROPERTIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyWorkspaceCreationPropertiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyWorkspaceCreationPropertiesResponseUnmarshaller.Instance; return Invoke<ModifyWorkspaceCreationPropertiesResponse>(VAR_MODIFYWORKSPACECREATIONPROPERTIESREQUEST, VAR_VAR); }
public BoolDocValues(ValueSource VAR_VALUESOURCE) { this.m_vs = VAR_VALUESOURCE; }
public void METHOD_NAME() { nextWrite--; while (count > LITERAL_INT) { if (nextWrite == -LITERAL_INT) { nextWrite = positions.Length - LITERAL_INT; } positions[nextWrite--].METHOD_NAME(); count--; } nextWrite = LITERAL_INT; nextPos = LITERAL_INT; count = LITERAL_INT; }
public virtual UpdateDirectConnectGatewayAssociationResponse METHOD_NAME(UpdateDirectConnectGatewayAssociationRequest VAR_UPDATEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDirectConnectGatewayAssociationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDirectConnectGatewayAssociationResponseUnmarshaller.Instance; return Invoke<UpdateDirectConnectGatewayAssociationResponse>(VAR_UPDATEDIRECTCONNECTGATEWAYASSOCIATIONREQUEST, VAR_VAR); }
public EditPhotoStoreRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public override string METHOD_NAME() { return LITERAL_STRING; }
public virtual NGit.Api.AddCommand METHOD_NAME(string VAR_STRING) { CheckCallable(); filepatterns.AddItem(VAR_STRING); return this; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(StringUtil.ToHexString(sid).ToUpper() + LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ToHex(_rawData)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(LITERAL_STRING).Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual UpdateBrokerResponse METHOD_NAME(UpdateBrokerRequest VAR_UPDATEBROKERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateBrokerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateBrokerResponseUnmarshaller.Instance; return Invoke<UpdateBrokerResponse>(VAR_UPDATEBROKERREQUEST, VAR_VAR); }
public override Object METHOD_NAME() { return this; }
public virtual AssociateS3ResourcesResponse METHOD_NAME(AssociateS3ResourcesRequest VAR_ASSOCIATES3RESOURCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AssociateS3ResourcesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AssociateS3ResourcesResponseUnmarshaller.Instance; return Invoke<AssociateS3ResourcesResponse>(VAR_ASSOCIATES3RESOURCESREQUEST, VAR_VAR); }
public UnknownRecord(int VAR_INT, byte[] VAR_BYTE[]) { _sid = VAR_INT & LITERAL_INT; _rawData = VAR_BYTE[]; }
public override RevFilter METHOD_NAME() { return new AndRevFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public int METHOD_NAME(int VAR_INT) { return (VAR_INT & this._mask); }
public virtual CancelResizeResponse METHOD_NAME(CancelResizeRequest VAR_CANCELRESIZEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CancelResizeRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CancelResizeResponseUnmarshaller.Instance; return Invoke<CancelResizeResponse>(VAR_CANCELRESIZEREQUEST, VAR_VAR); }
public virtual CreateTransitGatewayRouteResponse METHOD_NAME(CreateTransitGatewayRouteRequest VAR_CREATETRANSITGATEWAYROUTEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitGatewayRouteRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitGatewayRouteResponseUnmarshaller.Instance; return Invoke<CreateTransitGatewayRouteResponse>(VAR_CREATETRANSITGATEWAYROUTEREQUEST, VAR_VAR); }
public FastVectorHighlighter(bool VAR_BOOL, bool VAR_BOOL, IFragListBuilder VAR_IFRAGLISTBUILDER, IFragmentsBuilder VAR_IFRAGMENTSBUILDER) { this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; this.VAR_IFRAGLISTBUILDER = VAR_IFRAGLISTBUILDER; this.VAR_IFRAGMENTSBUILDER = VAR_IFRAGMENTSBUILDER; }
public virtual SetTypeDefaultVersionResponse METHOD_NAME(SetTypeDefaultVersionRequest VAR_SETTYPEDEFAULTVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SetTypeDefaultVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SetTypeDefaultVersionResponseUnmarshaller.Instance; return Invoke<SetTypeDefaultVersionResponse>(VAR_SETTYPEDEFAULTVERSIONREQUEST, VAR_VAR); }
public override sealed long METHOD_NAME(FieldInvertState VAR_FIELDINVERTSTATE) { return Get(VAR_FIELDINVERTSTATE.Name).METHOD_NAME(VAR_FIELDINVERTSTATE); }
public virtual CreateCustomVerificationEmailTemplateResponse METHOD_NAME(CreateCustomVerificationEmailTemplateRequest VAR_CREATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateCustomVerificationEmailTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateCustomVerificationEmailTemplateResponseUnmarshaller.Instance; return Invoke<CreateCustomVerificationEmailTemplateResponse>(VAR_CREATECUSTOMVERIFICATIONEMAILTEMPLATEREQUEST, VAR_VAR); }
public static double METHOD_NAME(double[] VAR_DOUBLE[]) { double VAR_DOUBLE = double.NaN; if (VAR_DOUBLE[] != LITERAL_NULL && VAR_DOUBLE[].Length >= LITERAL_INT) { int VAR_INT = VAR_DOUBLE[].Length; Array.Sort(VAR_DOUBLE[]); VAR_DOUBLE = (VAR_INT % LITERAL_INT == LITERAL_INT) ? (VAR_DOUBLE[][VAR_INT / LITERAL_INT] + VAR_DOUBLE[][VAR_INT / LITERAL_INT - LITERAL_INT]) / LITERAL_INT : VAR_DOUBLE[][VAR_INT / LITERAL_INT]; } return VAR_DOUBLE; }
public virtual void METHOD_NAME(IParseTreeListener VAR_IPARSETREELISTENER, IParseTree VAR_IPARSETREE) { if (VAR_IPARSETREE is IErrorNode) { VAR_IPARSETREELISTENER.VisitErrorNode((IErrorNode)VAR_IPARSETREE); return; } else { if (VAR_IPARSETREE is ITerminalNode) { VAR_IPARSETREELISTENER.VisitTerminal((ITerminalNode)VAR_IPARSETREE); return; } } IRuleNode VAR_IRULENODE = (IRuleNode)VAR_IPARSETREE; EnterRule(VAR_IPARSETREELISTENER, VAR_IRULENODE); int VAR_INT = VAR_IRULENODE.ChildCount; for (int i = LITERAL_INT; i < VAR_INT; i++) { METHOD_NAME(VAR_IPARSETREELISTENER, VAR_IRULENODE.GetChild(i)); } ExitRule(VAR_IPARSETREELISTENER, VAR_IRULENODE); }
public SCLRecord(RecordInputStream VAR_RECORDINPUTSTREAM) { field_1_numerator = VAR_RECORDINPUTSTREAM.ReadShort(); field_2_denominator = VAR_RECORDINPUTSTREAM.ReadShort(); }
public bool METHOD_NAME(T VAR_T) { int VAR_INT = elements.Count; elements.METHOD_NAME(VAR_T); if (valueKeyMap.ContainsKey(VAR_T)) { valueKeyMap[VAR_T] = VAR_INT; } else { valueKeyMap.METHOD_NAME(VAR_T, VAR_INT); } return true; }
public RawText(byte[] VAR_BYTE[]) { content = VAR_BYTE[]; lines = RawParseUtils.LineMap(content, LITERAL_INT, content.Length); }
public void METHOD_NAME(int VAR_INT) { CheckPosition(LITERAL_INT); int VAR_INT = _writeIndex; _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _buf[VAR_INT++] = (byte)((VAR_INT >> LITERAL_INT) & LITERAL_INT); _writeIndex = VAR_INT; }
public GetRepoBatchRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public MoPenDoRecognizeRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public override java.util.Iterator<java.util.MapClass.Entry<K, V>> METHOD_NAME() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual DeleteApnsSandboxChannelResponse METHOD_NAME(DeleteApnsSandboxChannelRequest VAR_DELETEAPNSSANDBOXCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApnsSandboxChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApnsSandboxChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsSandboxChannelResponse>(VAR_DELETEAPNSSANDBOXCHANNELREQUEST, VAR_VAR); }
public short METHOD_NAME() { return (short)_rc4.Xorshort(_le.ReadUShort()); }
public virtual DeleteEndpointResponse METHOD_NAME(DeleteEndpointRequest VAR_DELETEENDPOINTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteEndpointRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteEndpointResponseUnmarshaller.Instance; return Invoke<DeleteEndpointResponse>(VAR_DELETEENDPOINTREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(object VAR_OBJECT) { return list.METHOD_NAME(VAR_OBJECT); }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT || VAR_INT < LITERAL_INT) throw new TokenMgrError(LITERAL_STRING + VAR_INT + LITERAL_STRING, TokenMgrError.INVALID_LEXICAL_STATE); elsecurLexState = VAR_INT; }
public GetIndustryInfoChildrenListRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public Credential(string VAR_STRING, string VAR_STRING, int VAR_INT) { AccessKeyId = VAR_STRING; AccessSecret = VAR_STRING; RefreshDate = new DateTime(); SetExpiredDate(VAR_INT); }
public KeywordMarkerFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { wordFiles = Get(VAR_IDICTIONARY<STRING, STRING>, PROTECTED_TOKENS); stringPattern = Get(VAR_IDICTIONARY<STRING, STRING>, PATTERN); ignoreCase = GetBoolean(VAR_IDICTIONARY<STRING, STRING>, LITERAL_STRING, false); if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public CellRangeAddress METHOD_NAME(int VAR_INT) { return _regions[_startIndex + VAR_INT]; }
public virtual PutEmailIdentityDkimSigningAttributesResponse METHOD_NAME(PutEmailIdentityDkimSigningAttributesRequest VAR_PUTEMAILIDENTITYDKIMSIGNINGATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = PutEmailIdentityDkimSigningAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = PutEmailIdentityDkimSigningAttributesResponseUnmarshaller.Instance; return Invoke<PutEmailIdentityDkimSigningAttributesResponse>(VAR_PUTEMAILIDENTITYDKIMSIGNINGATTRIBUTESREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public static void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { if (VAR_INT < LITERAL_INT || VAR_INT > VAR_INT) { throw new System.IndexOutOfRangeException(LITERAL_STRING + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT); } if (VAR_INT > VAR_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_INT + LITERAL_STRING + VAR_INT); } }
public Loc(int VAR_INT, int VAR_INT, int VAR_INT, int VAR_INT) { _bookSheetColumn = ToBookSheetColumn(VAR_INT, VAR_INT, VAR_INT); _rowIndex = VAR_INT; }
public BoolErrRecord(RecordInputStream VAR_RECORDINPUTSTREAM) : base(in1) { switch (VAR_RECORDINPUTSTREAM.Remaining) { case LITERAL_INT: _value = VAR_RECORDINPUTSTREAM.ReadByte(); break; case LITERAL_INT: _value = VAR_RECORDINPUTSTREAM.ReadUShort(); break; default: throw new RecordFormatException(LITERAL_STRING + VAR_RECORDINPUTSTREAM.Remaining + LITERAL_STRING); } int VAR_INT = VAR_RECORDINPUTSTREAM.ReadUByte(); switch (VAR_INT) { case LITERAL_INT: _isError = false; break; case LITERAL_INT: _isError = true; break; default: throw new RecordFormatException(LITERAL_STRING + VAR_INT + LITERAL_STRING); } }
public override string METHOD_NAME() { return LITERAL_STRING + Ord; }
public Note(AnyObjectId VAR_ANYOBJECTID, ObjectId VAR_OBJECTID) : base(noteOn) { data = VAR_OBJECTID; }
public virtual GetModelVersionResponse METHOD_NAME(GetModelVersionRequest VAR_GETMODELVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetModelVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetModelVersionResponseUnmarshaller.Instance; return Invoke<GetModelVersionResponse>(VAR_GETMODELVERSIONREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { int VAR_INT = (int)VAR_INT; Break VAR_BREAK = (Break)_breakMap[VAR_INT]; if (VAR_BREAK != LITERAL_NULL) { VAR_BREAK.VAR_INT = VAR_INT; VAR_BREAK.VAR_INT = VAR_INT; VAR_BREAK.VAR_INT = VAR_INT; } else { VAR_BREAK = new Break(VAR_INT, VAR_INT, VAR_INT); _breaks.Add(VAR_BREAK); } _breakMap[VAR_INT] = VAR_BREAK; }
public virtual DescribeUsageReportSubscriptionsResponse METHOD_NAME(DescribeUsageReportSubscriptionsRequest VAR_DESCRIBEUSAGEREPORTSUBSCRIPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeUsageReportSubscriptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeUsageReportSubscriptionsResponseUnmarshaller.Instance; return Invoke<DescribeUsageReportSubscriptionsResponse>(VAR_DESCRIBEUSAGEREPORTSUBSCRIPTIONSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME(E VAR_E) { return addLastImpl(VAR_E); }
public RegistrantProfileRealNameVerificationRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Method = MethodType.POST; }
public RowColKey(int VAR_INT, int VAR_INT) { _rowIndex = VAR_INT; _columnIndex = VAR_INT; }
public virtual DisassociateTransitGatewayMulticastDomainResponse METHOD_NAME(DisassociateTransitGatewayMulticastDomainRequest VAR_DISASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateTransitGatewayMulticastDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateTransitGatewayMulticastDomainResponseUnmarshaller.Instance; return Invoke<DisassociateTransitGatewayMulticastDomainResponse>(VAR_DISASSOCIATETRANSITGATEWAYMULTICASTDOMAINREQUEST, VAR_VAR); }
public virtual java.nio.charset.Charset METHOD_NAME() { throw new System.NotSupportedException(); }
public override Object METHOD_NAME() { RightMarginRecord VAR_RIGHTMARGINRECORD = new RightMarginRecord(); VAR_RIGHTMARGINRECORD.field_1_margin = this.field_1_margin; return VAR_RIGHTMARGINRECORD; }
public virtual ListTrafficPoliciesResponse METHOD_NAME(ListTrafficPoliciesRequest VAR_LISTTRAFFICPOLICIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTrafficPoliciesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTrafficPoliciesResponseUnmarshaller.Instance; return Invoke<ListTrafficPoliciesResponse>(VAR_LISTTRAFFICPOLICIESREQUEST, VAR_VAR); }
public DeleteKeyPairRequest(string VAR_STRING) { _keyName = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, byte[] VAR_BYTE[]) { int VAR_INT = GetActualSizeOfElements(SizeOfElements); Array.Copy(VAR_BYTE[], LITERAL_INT, _complexData, FIXED_SIZE + VAR_INT * VAR_INT, VAR_INT); }
public FieldDoc(int VAR_INT, float VAR_FLOAT, object[] VAR_OBJECT[]) : base(doc, score) { this.VAR_OBJECT[] = VAR_OBJECT[]; }
public override RevFilter METHOD_NAME() { return new OrRevFilter.Binary(a.METHOD_NAME(), b.METHOD_NAME()); }
public virtual void METHOD_NAME(int VAR_INT, long VAR_LONG) { while (count < VAR_INT) { Add(VAR_LONG); } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (long)((ulong)VAR_LONG >> LITERAL_INT); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); VAR_LONG[][VAR_INT++] = ((long)((ulong)VAR_LONG >> LITERAL_INT)) & LITERAL_INT; VAR_LONG[][VAR_INT++] = VAR_LONG & LITERAL_INT; } }
public virtual RawText METHOD_NAME() { return resultContents; }
public void METHOD_NAME(int VAR_INT) { if (VAR_INT < LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING); } this.VAR_INT = VAR_INT; }
public FieldInfo(RecordInputStream VAR_RECORDINPUTSTREAM) { _isxvi = VAR_RECORDINPUTSTREAM.ReadShort(); _isxvd = VAR_RECORDINPUTSTREAM.ReadShort(); _idObj = VAR_RECORDINPUTSTREAM.ReadShort(); }
public virtual DescribeDBEngineVersionsResponse METHOD_NAME(DescribeDBEngineVersionsRequest VAR_DESCRIBEDBENGINEVERSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeDBEngineVersionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeDBEngineVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDBEngineVersionsResponse>(VAR_DESCRIBEDBENGINEVERSIONSREQUEST, VAR_VAR); }
public virtual CopyDBSnapshotResponse METHOD_NAME(CopyDBSnapshotRequest VAR_COPYDBSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyDBSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyDBSnapshotResponseUnmarshaller.Instance; return Invoke<CopyDBSnapshotResponse>(VAR_COPYDBSNAPSHOTREQUEST, VAR_VAR); }
public DFA(DecisionState VAR_DECISIONSTATE, int VAR_INT) { this.VAR_DECISIONSTATE = VAR_DECISIONSTATE; this.VAR_INT = VAR_INT; this.precedenceDfa = false; if (VAR_DECISIONSTATE is StarLoopEntryState && ((StarLoopEntryState)VAR_DECISIONSTATE).isPrecedenceDecision) { this.precedenceDfa = true; DFAState VAR_DFASTATE = new DFAState(new ATNConfigSet()); VAR_DFASTATE.edges = new DFAState[LITERAL_INT]; VAR_DFASTATE.isAcceptState = false; VAR_DFASTATE.requiresFullContext = false; this.s0 = VAR_DFASTATE; } }
public QueryParserTokenManager(ICharStream VAR_ICHARSTREAM) { m_input_stream = VAR_ICHARSTREAM; }
public override string METHOD_NAME() { return LITERAL_STRING + LITERAL_STRING + GetChild().METHOD_NAME() + LITERAL_STRING; }
public virtual UpdateResolverRuleResponse METHOD_NAME(UpdateResolverRuleRequest VAR_UPDATERESOLVERRULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateResolverRuleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateResolverRuleResponseUnmarshaller.Instance; return Invoke<UpdateResolverRuleResponse>(VAR_UPDATERESOLVERRULEREQUEST, VAR_VAR); }
public int METHOD_NAME(BytesRef VAR_BYTESREF) { return utf8SortedAsUnicodeSortOrder.Compare(this, VAR_BYTESREF); }
public virtual void METHOD_NAME() { ns.Clear(); ks.Length = LITERAL_INT; cur = outerInstance.m_root; Run(); }
public virtual ModifyWorkspaceAccessPropertiesResponse METHOD_NAME(ModifyWorkspaceAccessPropertiesRequest VAR_MODIFYWORKSPACEACCESSPROPERTIESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyWorkspaceAccessPropertiesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyWorkspaceAccessPropertiesResponseUnmarshaller.Instance; return Invoke<ModifyWorkspaceAccessPropertiesResponse>(VAR_MODIFYWORKSPACEACCESSPROPERTIESREQUEST, VAR_VAR); }
public virtual DescribeFleetAttributesResponse METHOD_NAME(DescribeFleetAttributesRequest VAR_DESCRIBEFLEETATTRIBUTESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeFleetAttributesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeFleetAttributesResponseUnmarshaller.Instance; return Invoke<DescribeFleetAttributesResponse>(VAR_DESCRIBEFLEETATTRIBUTESREQUEST, VAR_VAR); }
public virtual CreateBuildResponse METHOD_NAME(CreateBuildRequest VAR_CREATEBUILDREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateBuildRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateBuildResponseUnmarshaller.Instance; return Invoke<CreateBuildResponse>(VAR_CREATEBUILDREQUEST, VAR_VAR); }
public static java.nio.FloatBuffer METHOD_NAME(float[] VAR_FLOAT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_FLOAT[].Length, VAR_INT, VAR_INT); java.nio.FloatBuffer VAR_JAVA.NIO.FLOATBUFFER = new java.nio.ReadWriteFloatArrayBuffer(VAR_FLOAT[]); VAR_JAVA.NIO.FLOATBUFFER._position = VAR_INT; VAR_JAVA.NIO.FLOATBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.FLOATBUFFER; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); DateFormatTokenizer VAR_DATEFORMATTOKENIZER = new DateFormatTokenizer(format); string VAR_STRING; while ((VAR_STRING = VAR_DATEFORMATTOKENIZER.GetNextToken()) != LITERAL_NULL) { if (VAR_STRINGBUILDER.Length > LITERAL_INT) { VAR_STRINGBUILDER.Append(LITERAL_STRING); } VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(VAR_STRING).Append(LITERAL_STRING); } return VAR_STRINGBUILDER.METHOD_NAME(); }
public override byte METHOD_NAME() { return data[pos++]; }
public virtual CreateDatasetResponse METHOD_NAME(CreateDatasetRequest VAR_CREATEDATASETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateDatasetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateDatasetResponseUnmarshaller.Instance; return Invoke<CreateDatasetResponse>(VAR_CREATEDATASETREQUEST, VAR_VAR); }
public override BytesRef METHOD_NAME() { termOrd++; if (termOrd < outerInstance.terms.Length) { return SetTerm(); } else { return LITERAL_NULL; } }
public static FontCharset METHOD_NAME(int VAR_INT) { if (VAR_INT >= LITERAL_INT && VAR_INT <= LITERAL_INT) return _table[VAR_INT]; return LITERAL_NULL; }
public static string METHOD_NAME(string VAR_STRING) { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR || VAR_CHAR == LITERAL_CHAR) { VAR_STRINGBUILDER.Append(LITERAL_CHAR); } VAR_STRINGBUILDER.Append(VAR_CHAR); } return VAR_STRINGBUILDER.ToString(); }
public virtual RejectVpcEndpointConnectionsResponse METHOD_NAME(RejectVpcEndpointConnectionsRequest VAR_REJECTVPCENDPOINTCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectVpcEndpointConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectVpcEndpointConnectionsResponseUnmarshaller.Instance; return Invoke<RejectVpcEndpointConnectionsResponse>(VAR_REJECTVPCENDPOINTCONNECTIONSREQUEST, VAR_VAR); }
public override V METHOD_NAME() { return this.nextEntry().value; }
public ShingleAnalyzerWrapper(Analyzer VAR_ANALYZER, int VAR_INT, int VAR_INT, string VAR_STRING, bool VAR_BOOL, bool VAR_BOOL, string VAR_STRING) : base(@delegate.Strategy) { this.VAR_ANALYZER = VAR_ANALYZER; if (VAR_INT < LITERAL_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_INT = VAR_INT; if (VAR_INT < LITERAL_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } if (VAR_INT > VAR_INT) { throw new ArgumentOutOfRangeException(LITERAL_STRING); } this.VAR_INT = VAR_INT; this.VAR_STRING = (VAR_STRING == LITERAL_NULL ? LITERAL_STRING : VAR_STRING); this.VAR_BOOL = VAR_BOOL; this.VAR_BOOL = VAR_BOOL; this.VAR_STRING = VAR_STRING; }
public virtual CreateInterconnectResponse METHOD_NAME(CreateInterconnectRequest VAR_CREATEINTERCONNECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateInterconnectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateInterconnectResponseUnmarshaller.Instance; return Invoke<CreateInterconnectResponse>(VAR_CREATEINTERCONNECTREQUEST, VAR_VAR); }
public virtual DeleteTrafficMirrorTargetResponse METHOD_NAME(DeleteTrafficMirrorTargetRequest VAR_DELETETRAFFICMIRRORTARGETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteTrafficMirrorTargetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteTrafficMirrorTargetResponseUnmarshaller.Instance; return Invoke<DeleteTrafficMirrorTargetResponse>(VAR_DELETETRAFFICMIRRORTARGETREQUEST, VAR_VAR); }
public virtual UpdateMonitoringScheduleResponse METHOD_NAME(UpdateMonitoringScheduleRequest VAR_UPDATEMONITORINGSCHEDULEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateMonitoringScheduleRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateMonitoringScheduleResponseUnmarshaller.Instance; return Invoke<UpdateMonitoringScheduleResponse>(VAR_UPDATEMONITORINGSCHEDULEREQUEST, VAR_VAR); }
public virtual DeleteGatewayGroupResponse METHOD_NAME(DeleteGatewayGroupRequest VAR_DELETEGATEWAYGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteGatewayGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteGatewayGroupResponseUnmarshaller.Instance; return Invoke<DeleteGatewayGroupResponse>(VAR_DELETEGATEWAYGROUPREQUEST, VAR_VAR); }
public virtual ListStackSetOperationsResponse METHOD_NAME(ListStackSetOperationsRequest VAR_LISTSTACKSETOPERATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListStackSetOperationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListStackSetOperationsResponseUnmarshaller.Instance; return Invoke<ListStackSetOperationsResponse>(VAR_LISTSTACKSETOPERATIONSREQUEST, VAR_VAR); }
public ListOfOutputs(Outputs<T> VAR_OUTPUTS<T>) { this.VAR_OUTPUTS<T> = VAR_OUTPUTS<T>; }
public ExceedsLimit(long VAR_LONG, long VAR_LONG) { this.VAR_LONG = VAR_LONG; this.VAR_LONG = VAR_LONG; }
public GetIndustryInfoRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public CreateVpnGatewayRequest(GatewayType VAR_GATEWAYTYPE) { _type = VAR_GATEWAYTYPE; }
public int METHOD_NAME(PointTransitions VAR_POINTTRANSITIONS) { return point - VAR_POINTTRANSITIONS.point; }
public virtual DeleteQueuedReservedInstancesResponse METHOD_NAME(DeleteQueuedReservedInstancesRequest VAR_DELETEQUEUEDRESERVEDINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteQueuedReservedInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteQueuedReservedInstancesResponseUnmarshaller.Instance; return Invoke<DeleteQueuedReservedInstancesResponse>(VAR_DELETEQUEUEDRESERVEDINSTANCESREQUEST, VAR_VAR); }
public static NGit.AbbreviatedObjectId METHOD_NAME(string VAR_STRING) { if (VAR_STRING.Length > Constants.OBJECT_ID_STRING_LENGTH) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidId, VAR_STRING)); } byte[] VAR_BYTE[] = Constants.EncodeASCII(VAR_STRING); return FromHexString(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); }
public int METHOD_NAME(int VAR_INT) { int VAR_INT; switch (VAR_INT >> LITERAL_INT) { case LITERAL_INT: { VAR_INT = w1; break; } case LITERAL_INT: { VAR_INT = w2; break; } case LITERAL_INT: { VAR_INT = w3; break; } case LITERAL_INT: { VAR_INT = w4; break; } case LITERAL_INT: { VAR_INT = w5; break; } default: { throw Sharpen.Extensions.CreateIndexOutOfRangeException(VAR_INT); } } return ((int)(((uint)VAR_INT) >> (LITERAL_INT * (LITERAL_INT - (VAR_INT & LITERAL_INT))))) & unchecked((int)(LITERAL_INT)); }
public SpanFirstBuilder(ISpanQueryBuilder VAR_ISPANQUERYBUILDER) { this.VAR_ISPANQUERYBUILDER = VAR_ISPANQUERYBUILDER; }
public virtual DescribeInstancesResponse METHOD_NAME(DescribeInstancesRequest VAR_DESCRIBEINSTANCESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeInstancesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeInstancesResponseUnmarshaller.Instance; return Invoke<DescribeInstancesResponse>(VAR_DESCRIBEINSTANCESREQUEST, VAR_VAR); }
public virtual DescribeProjectsResponse METHOD_NAME(DescribeProjectsRequest VAR_DESCRIBEPROJECTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeProjectsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeProjectsResponseUnmarshaller.Instance; return Invoke<DescribeProjectsResponse>(VAR_DESCRIBEPROJECTSREQUEST, VAR_VAR); }
public static string METHOD_NAME(string VAR_STRING) { var VAR_VAR = new StringBuilder(); for (int i = LITERAL_INT; i < VAR_STRING.Length; i++) { char VAR_CHAR = VAR_STRING[i]; if (i > LITERAL_INT) { VAR_VAR.Append(LITERAL_CHAR); } if (VAR_CHAR < LITERAL_INT) { VAR_VAR.Append(VAR_CHAR); } else { if (VAR_CHAR >= UNI_SUR_HIGH_START && VAR_CHAR <= UNI_SUR_HIGH_END) { VAR_VAR.Append(LITERAL_STRING); } else if (VAR_CHAR >= UNI_SUR_LOW_START && VAR_CHAR <= UNI_SUR_LOW_END) { VAR_VAR.Append(LITERAL_STRING); } else if (VAR_CHAR > UNI_SUR_LOW_END) { if (VAR_CHAR == LITERAL_INT) { VAR_VAR.Append(LITERAL_STRING); } else { VAR_VAR.Append(LITERAL_STRING); } } VAR_VAR.Append(LITERAL_STRING + ((short)VAR_CHAR).ToString(LITERAL_STRING)); } } return VAR_VAR.ToString(); }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL) { double VAR_DOUBLE; try { double VAR_DOUBLE = NumericFunction.SingleOperandEvaluate(VAR_VALUEEVAL, VAR_INT, VAR_INT); VAR_DOUBLE = Math.Log(VAR_DOUBLE) / NumericFunction.LOG_10_TO_BASE_e; NumericFunction.CheckValue(VAR_DOUBLE); } catch (EvaluationException e) { return e.GetErrorEval(); } return new NumberEval(VAR_DOUBLE); }
public virtual long METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return LITERAL_INT * Int64Count(VAR_INT, VAR_INT, VAR_INT); }
public Policy(string VAR_STRING, IList<Statement> VAR_ILIST<STATEMENT>) { this.VAR_STRING = VAR_STRING; this.VAR_ILIST<STATEMENT> = VAR_ILIST<STATEMENT>; }
public FunctionQuery(ValueSource VAR_VALUESOURCE) { this.VAR_VALUESOURCE = VAR_VALUESOURCE; }
public virtual UpdateGameServerResponse METHOD_NAME(UpdateGameServerRequest VAR_UPDATEGAMESERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateGameServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateGameServerResponseUnmarshaller.Instance; return Invoke<UpdateGameServerResponse>(VAR_UPDATEGAMESERVERREQUEST, VAR_VAR); }
public virtual GetDetectorVersionResponse METHOD_NAME(GetDetectorVersionRequest VAR_GETDETECTORVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDetectorVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDetectorVersionResponseUnmarshaller.Instance; return Invoke<GetDetectorVersionResponse>(VAR_GETDETECTORVERSIONREQUEST, VAR_VAR); }
public virtual void METHOD_NAME(string VAR_STRING, string VAR_STRING, Analyzer VAR_ANALYZER) { if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_STRING == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } if (VAR_ANALYZER == LITERAL_NULL) { throw new System.ArgumentException(LITERAL_STRING); } TokenStream VAR_TOKENSTREAM; try { VAR_TOKENSTREAM = VAR_ANALYZER.GetTokenStream(VAR_STRING, VAR_STRING); } catch (IOException ex) { throw new Exception(ex.ToString(), ex); } METHOD_NAME(VAR_STRING, VAR_TOKENSTREAM, LITERAL_FLOAT, VAR_ANALYZER.GetPositionIncrementGap(VAR_STRING), VAR_ANALYZER.GetOffsetGap(VAR_STRING)); }
public override bool METHOD_NAME(string VAR_STRING) { return false; }
public override long METHOD_NAME() { int VAR_INT = LITERAL_INT + (int)(ord / outerInstance.totalIndexInterval); if (VAR_INT >= fieldIndex.numIndexTerms) { return -LITERAL_INT; } ord += outerInstance.totalIndexInterval; long VAR_LONG = fieldIndex.termOffsets.Get(VAR_INT); int VAR_INT = (int)(fieldIndex.termOffsets.Get(LITERAL_INT + VAR_INT) - VAR_LONG); outerInstance.termBytesReader.FillSlice(term, fieldIndex.termBytesStart + VAR_LONG, VAR_INT); return fieldIndex.termsStart + fieldIndex.termsDictOffsets.Get(VAR_INT); }
public virtual DisassociateMemberFromGroupResponse METHOD_NAME(DisassociateMemberFromGroupRequest VAR_DISASSOCIATEMEMBERFROMGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateMemberFromGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateMemberFromGroupResponseUnmarshaller.Instance; return Invoke<DisassociateMemberFromGroupResponse>(VAR_DISASSOCIATEMEMBERFROMGROUPREQUEST, VAR_VAR); }
public UnmergedPathException(DirCacheEntry VAR_DIRCACHEENTRY) : base(MessageFormat.Format(JGitText.Get().unmergedPath, dce.PathString)) { entry = VAR_DIRCACHEENTRY; }
public Name(NameRecord VAR_NAMERECORD, int VAR_INT) { _nameRecord = VAR_NAMERECORD; _index = VAR_INT; }
public void METHOD_NAME(ET VAR_ET) { if (expectedModCount == list.modCount) { java.util.LinkedList.Link<ET> VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> = link.next; java.util.LinkedList.Link<ET> VAR_JAVA.UTIL.LINKEDLIST.LINK<ET> = new java.util.LinkedList.Link<ET>(VAR_ET, link, VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>); link.next = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>.previous = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; link = VAR_JAVA.UTIL.LINKEDLIST.LINK<ET>; lastLink = LITERAL_NULL; pos++; expectedModCount++; list._size++; list.modCount++; } else { throw new java.util.ConcurrentModificationException(); } }
public java.nio.ByteOrder METHOD_NAME() { return _order; }
public override ValueFiller METHOD_NAME() { return new ValueFillerAnonymousInnerClassHelper(this); }
public virtual NGit.Api.SubmoduleInitCommand METHOD_NAME(string VAR_STRING) { paths.AddItem(VAR_STRING); return this; }
public virtual DeleteInterconnectResponse METHOD_NAME(DeleteInterconnectRequest VAR_DELETEINTERCONNECTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInterconnectRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInterconnectResponseUnmarshaller.Instance; return Invoke<DeleteInterconnectResponse>(VAR_DELETEINTERCONNECTREQUEST, VAR_VAR); }
public Credential(string VAR_STRING, string VAR_STRING) { AccessKeyId = VAR_STRING; AccessSecret = VAR_STRING; RefreshDate = DateTime.UtcNow; }
public DeleteRepoWebhookRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.DELETE; }
public virtual DeleteDeviceResponse METHOD_NAME(DeleteDeviceRequest VAR_DELETEDEVICEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteDeviceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteDeviceResponseUnmarshaller.Instance; return Invoke<DeleteDeviceResponse>(VAR_DELETEDEVICEREQUEST, VAR_VAR); }
public virtual CreateEventBusResponse METHOD_NAME(CreateEventBusRequest VAR_CREATEEVENTBUSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateEventBusRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateEventBusResponseUnmarshaller.Instance; return Invoke<CreateEventBusResponse>(VAR_CREATEEVENTBUSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return enabled; }
public virtual bool METHOD_NAME() { return signed; }
public virtual DeleteRuleVersionResponse METHOD_NAME(DeleteRuleVersionRequest VAR_DELETERULEVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRuleVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRuleVersionResponseUnmarshaller.Instance; return Invoke<DeleteRuleVersionResponse>(VAR_DELETERULEVERSIONREQUEST, VAR_VAR); }
public override long METHOD_NAME(long VAR_LONG) { throw new NotSupportedException(); }
public CreateAppCookieStickinessPolicyRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _loadBalancerName = VAR_STRING; _policyName = VAR_STRING; _cookieName = VAR_STRING; }
public virtual NGit.Api.BlameCommand METHOD_NAME(DiffAlgorithm VAR_DIFFALGORITHM) { this.VAR_DIFFALGORITHM = VAR_DIFFALGORITHM; return this; }
public virtual DisassociateSkillFromUsersResponse METHOD_NAME(DisassociateSkillFromUsersRequest VAR_DISASSOCIATESKILLFROMUSERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateSkillFromUsersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateSkillFromUsersResponseUnmarshaller.Instance; return Invoke<DisassociateSkillFromUsersResponse>(VAR_DISASSOCIATESKILLFROMUSERSREQUEST, VAR_VAR); }
public PatchIdDiffFormatter() : base(new DigestOutputStream(NullOutputStream.INSTANCE, Constants.NewMessageDigest())) { digest = ((DigestOutputStream)GetOutputStream()).GetMessageDigest(); }
public virtual SendMessageResponse METHOD_NAME(SendMessageRequest VAR_SENDMESSAGEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = SendMessageRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = SendMessageResponseUnmarshaller.Instance; return Invoke<SendMessageResponse>(VAR_SENDMESSAGEREQUEST, VAR_VAR); }
public static ParsePathType METHOD_NAME(FileInfo VAR_FILEINFO) { int VAR_INT = LITERAL_INT; ParsePathType? VAR_PARSEPATHTYPE?; if (pathName2Type.TryGetValue(VAR_FILEINFO.Name.ToUpperInvariant(), out VAR_PARSEPATHTYPE?) && VAR_PARSEPATHTYPE? != LITERAL_NULL) { return VAR_PARSEPATHTYPE?.Value; } DirectoryInfo VAR_DIRECTORYINFO = VAR_FILEINFO.Directory; while (VAR_DIRECTORYINFO != LITERAL_NULL && ++VAR_INT < MAX_PATH_LENGTH) { if (pathName2Type.TryGetValue(VAR_DIRECTORYINFO.Name.ToUpperInvariant(), out VAR_PARSEPATHTYPE?) && VAR_PARSEPATHTYPE? != LITERAL_NULL) { return VAR_PARSEPATHTYPE?.Value; } VAR_DIRECTORYINFO = VAR_DIRECTORYINFO.Parent; } return DEFAULT_PATH_TYPE; }
public static long METHOD_NAME(int VAR_INT) { return VAR_INT + (VAR_INT * LITERAL_INT / LITERAL_INT); }
public virtual UpdateDashboardPermissionsResponse METHOD_NAME(UpdateDashboardPermissionsRequest VAR_UPDATEDASHBOARDPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDashboardPermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDashboardPermissionsResponse>(VAR_UPDATEDASHBOARDPERMISSIONSREQUEST, VAR_VAR); }
public String METHOD_NAME() { switch (_cellType) { case CellType.Numeric: string VAR_STRING = _numberValue.ToString(CultureInfo.InvariantCulture); return VAR_STRING; case CellType.String: return LITERAL_CHAR + _textValue + LITERAL_CHAR; case CellType.Boolean: return _boolValue ? LITERAL_STRING : LITERAL_STRING; case CellType.Error: return ErrorEval.GetText(_errorCode); } return LITERAL_STRING + _cellType + LITERAL_STRING; }
public void METHOD_NAME(RevFlagSet VAR_REVFLAGSET) { flags |= VAR_REVFLAGSET.mask; }
public virtual NGit.Transport.URIish METHOD_NAME(string VAR_STRING) { NGit.Transport.URIish VAR_NGIT.TRANSPORT.URIISH = new NGit.Transport.URIish(this); VAR_NGIT.TRANSPORT.URIISH.host = VAR_STRING; return VAR_NGIT.TRANSPORT.URIISH; }
public void METHOD_NAME() { CellCacheEntry[] VAR_CELLCACHEENTRY[] = _sensitiveInputCells; if (VAR_CELLCACHEENTRY[] != LITERAL_NULL) { for (int i = VAR_CELLCACHEENTRY[].Length - LITERAL_INT; i >= LITERAL_INT; i--) { VAR_CELLCACHEENTRY[][i].ClearConsumingCell(this); } } _sensitiveInputCells = LITERAL_NULL; ClearValue(); }
public virtual GetDiskSnapshotResponse METHOD_NAME(GetDiskSnapshotRequest VAR_GETDISKSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDiskSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDiskSnapshotResponseUnmarshaller.Instance; return Invoke<GetDiskSnapshotResponse>(VAR_GETDISKSNAPSHOTREQUEST, VAR_VAR); }
public virtual DescribeIpv6PoolsResponse METHOD_NAME(DescribeIpv6PoolsRequest VAR_DESCRIBEIPV6POOLSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeIpv6PoolsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeIpv6PoolsResponseUnmarshaller.Instance; return Invoke<DescribeIpv6PoolsResponse>(VAR_DESCRIBEIPV6POOLSREQUEST, VAR_VAR); }
public virtual UpdateDetectorResponse METHOD_NAME(UpdateDetectorRequest VAR_UPDATEDETECTORREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateDetectorRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateDetectorResponseUnmarshaller.Instance; return Invoke<UpdateDetectorResponse>(VAR_UPDATEDETECTORREQUEST, VAR_VAR); }
public virtual DeleteInstanceResponse METHOD_NAME(DeleteInstanceRequest VAR_DELETEINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteInstanceResponseUnmarshaller.Instance; return Invoke<DeleteInstanceResponse>(VAR_DELETEINSTANCEREQUEST, VAR_VAR); }
public virtual ListThreatIntelSetsResponse METHOD_NAME(ListThreatIntelSetsRequest VAR_LISTTHREATINTELSETSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListThreatIntelSetsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListThreatIntelSetsResponseUnmarshaller.Instance; return Invoke<ListThreatIntelSetsResponse>(VAR_LISTTHREATINTELSETSREQUEST, VAR_VAR); }
public virtual ExportClientVpnClientConfigurationResponse METHOD_NAME(ExportClientVpnClientConfigurationRequest VAR_EXPORTCLIENTVPNCLIENTCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ExportClientVpnClientConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ExportClientVpnClientConfigurationResponseUnmarshaller.Instance; return Invoke<ExportClientVpnClientConfigurationResponse>(VAR_EXPORTCLIENTVPNCLIENTCONFIGURATIONREQUEST, VAR_VAR); }
public override float METHOD_NAME(int VAR_INT, string VAR_STRING, int VAR_INT, int VAR_INT, int VAR_INT, float VAR_FLOAT, float VAR_FLOAT) { if (VAR_INT == LITERAL_INT) { return VAR_FLOAT; } else { return Math.Max(VAR_FLOAT, VAR_FLOAT); } }
public CreateDBParameterGroupRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _dbParameterGroupName = VAR_STRING; _dbParameterGroupFamily = VAR_STRING; _description = VAR_STRING; }
public void METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { this.costs[VAR_INT][VAR_INT] = (short)VAR_INT; }
public override bool METHOD_NAME() { return true; }
public virtual CreateTransitVirtualInterfaceResponse METHOD_NAME(CreateTransitVirtualInterfaceRequest VAR_CREATETRANSITVIRTUALINTERFACEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateTransitVirtualInterfaceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateTransitVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<CreateTransitVirtualInterfaceResponse>(VAR_CREATETRANSITVIRTUALINTERFACEREQUEST, VAR_VAR); }
public virtual BatchDetectSentimentResponse METHOD_NAME(BatchDetectSentimentRequest VAR_BATCHDETECTSENTIMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = BatchDetectSentimentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = BatchDetectSentimentResponseUnmarshaller.Instance; return Invoke<BatchDetectSentimentResponse>(VAR_BATCHDETECTSENTIMENTREQUEST, VAR_VAR); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (!(VAR_OBJECT is Antlr4.Runtime.Misc.Interval)) { return false; } Antlr4.Runtime.Misc.Interval VAR_ANTLR4.RUNTIME.MISC.INTERVAL = (Antlr4.Runtime.Misc.Interval)VAR_OBJECT; return this.a == VAR_ANTLR4.RUNTIME.MISC.INTERVAL.a && this.b == VAR_ANTLR4.RUNTIME.MISC.INTERVAL.b; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(HexDump.ShortToHex(_options)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual SmallDocSet METHOD_NAME(SmallDocSet VAR_SMALLDOCSET) { SmallDocSet VAR_SMALLDOCSET; SmallDocSet VAR_SMALLDOCSET; if (VAR_SMALLDOCSET.intSet.Count > this.intSet.Count) { VAR_SMALLDOCSET = VAR_SMALLDOCSET; VAR_SMALLDOCSET = this; } else { VAR_SMALLDOCSET = this; VAR_SMALLDOCSET = VAR_SMALLDOCSET; } foreach (int v in VAR_SMALLDOCSET.intSet.Keys) { if (v == VAR_SMALLDOCSET.intSet.EmptyVal) { continue; } VAR_SMALLDOCSET.Set(v); } return VAR_SMALLDOCSET; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (VAR_OBJECT is NGit.Diff.Edit) { NGit.Diff.Edit VAR_NGIT.DIFF.EDIT = (NGit.Diff.Edit)VAR_OBJECT; return this.beginA == VAR_NGIT.DIFF.EDIT.beginA && this.endA == VAR_NGIT.DIFF.EDIT.endA && this.beginB == VAR_NGIT.DIFF.EDIT.beginB && this.endB == VAR_NGIT.DIFF.EDIT.endB; } return false; }
public virtual int METHOD_NAME() { return bigFileThreshold; }
public override string METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(GetSeverity().METHOD_NAME().ToLower()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetOffset()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetMessage()); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(GetLineText()); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override java.nio.IntBuffer METHOD_NAME() { return new java.nio.ReadWriteIntArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual DeleteApplicationResponse METHOD_NAME(DeleteApplicationRequest VAR_DELETEAPPLICATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteApplicationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteApplicationResponseUnmarshaller.Instance; return Invoke<DeleteApplicationResponse>(VAR_DELETEAPPLICATIONREQUEST, VAR_VAR); }
public TokenOffsetPayloadTokenFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new System.ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this.GetType() != VAR_OBJECT.GetType()) { return false; } var VAR_VAR = (MultiFunction)VAR_OBJECT; return JCG.ListEqualityComparer<ValueSource>.Default.METHOD_NAME(this.m_sources, VAR_VAR.m_sources); }
public virtual SpanQuery METHOD_NAME(XmlElement VAR_XMLELEMENT) { ISpanQueryBuilder VAR_ISPANQUERYBUILDER; if (!builders.TryGetValue(VAR_XMLELEMENT.Name, out VAR_ISPANQUERYBUILDER) || VAR_ISPANQUERYBUILDER == LITERAL_NULL) { throw new ParserException(LITERAL_STRING + VAR_XMLELEMENT.Name); } return VAR_ISPANQUERYBUILDER.METHOD_NAME(VAR_XMLELEMENT); }
public virtual void METHOD_NAME() { int VAR_INT = refCount.IncrementAndGet(); Debug.Assert(VAR_INT > LITERAL_INT); }
public String METHOD_NAME() { return _formula; }
public T METHOD_NAME() { T VAR_T = top; if (iter.MoveNext()) { top = iter.Current; } else { top = default(T); } return VAR_T; }
public virtual ObjectId METHOD_NAME() { return expValue; }
public DefaultPassageFormatter(string VAR_STRING, string VAR_STRING, string VAR_STRING, bool VAR_BOOL) { if (VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL || VAR_STRING == LITERAL_NULL) { throw new ArgumentException(); } this.m_preTag = VAR_STRING; this.m_postTag = VAR_STRING; this.m_ellipsis = VAR_STRING; this.m_escape = VAR_BOOL; }
public virtual UpdateImagePermissionsResponse METHOD_NAME(UpdateImagePermissionsRequest VAR_UPDATEIMAGEPERMISSIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateImagePermissionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateImagePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateImagePermissionsResponse>(VAR_UPDATEIMAGEPERMISSIONSREQUEST, VAR_VAR); }
public virtual ListCustomVerificationEmailTemplatesResponse METHOD_NAME(ListCustomVerificationEmailTemplatesRequest VAR_LISTCUSTOMVERIFICATIONEMAILTEMPLATESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListCustomVerificationEmailTemplatesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListCustomVerificationEmailTemplatesResponseUnmarshaller.Instance; return Invoke<ListCustomVerificationEmailTemplatesResponse>(VAR_LISTCUSTOMVERIFICATIONEMAILTEMPLATESREQUEST, VAR_VAR); }
public virtual int METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { throw new System.NotImplementedException(); }
public StringCharacterIterator(string VAR_STRING, int VAR_INT) { @string = VAR_STRING; start = LITERAL_INT; end = @string.Length; if (VAR_INT < LITERAL_INT || VAR_INT > end) { throw new System.ArgumentException(); } offset = VAR_INT; }
public virtual DeleteQueryLoggingConfigResponse METHOD_NAME(DeleteQueryLoggingConfigRequest VAR_DELETEQUERYLOGGINGCONFIGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteQueryLoggingConfigRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteQueryLoggingConfigResponseUnmarshaller.Instance; return Invoke<DeleteQueryLoggingConfigResponse>(VAR_DELETEQUERYLOGGINGCONFIGREQUEST, VAR_VAR); }
public InvalidPatternException(string VAR_STRING, string VAR_STRING) : base(message) { this.VAR_STRING = VAR_STRING; }
public int METHOD_NAME(int VAR_INT, int VAR_INT) { int VAR_INT = _externSheetRecord.GetExtbookIndexFromRefIndex(VAR_INT); return _externalBookBlocks[VAR_INT].GetNameIx(VAR_INT); }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (!base.METHOD_NAME(VAR_OBJECT)) { return false; } if (this.GetType() != VAR_OBJECT.GetType()) { return false; } FuzzyQuery VAR_FUZZYQUERY = (FuzzyQuery)VAR_OBJECT; if (maxEdits != VAR_FUZZYQUERY.maxEdits) { return false; } if (prefixLength != VAR_FUZZYQUERY.prefixLength) { return false; } if (maxExpansions != VAR_FUZZYQUERY.maxExpansions) { return false; } if (transpositions != VAR_FUZZYQUERY.transpositions) { return false; } if (term == LITERAL_NULL) { if (VAR_FUZZYQUERY.term != LITERAL_NULL) { return false; } } else if (!term.METHOD_NAME(VAR_FUZZYQUERY.term)) { return false; } return true; }
public virtual Term METHOD_NAME(string VAR_STRING) { return new Term(VAR_STRING, TermText); }
public static MessageDigest METHOD_NAME() { try { return MessageDigest.GetInstance(HASH_FUNCTION); } catch (NoSuchAlgorithmException nsae) { throw new RuntimeException(MessageFormat.Format(JGitText.Get().requiredHashFunctionNotAvailable, HASH_FUNCTION), nsae); } }
public virtual void METHOD_NAME() { lock (@lock) { count = LITERAL_INT; } }
m_stoplist = new JCG.Dictionary<string, IList<object>>(LITERAL_INT); m_classmap = new TernaryTree(); m_vspace = new ByteVector(); m_vspace.Alloc(LITERAL_INT);
public virtual DescribeCollectionResponse METHOD_NAME(DescribeCollectionRequest VAR_DESCRIBECOLLECTIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeCollectionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeCollectionResponseUnmarshaller.Instance; return Invoke<DescribeCollectionResponse>(VAR_DESCRIBECOLLECTIONREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, char[] VAR_CHAR[]) { lock (this) { insert0(VAR_INT, VAR_CHAR[]); return this; } }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { for (int i = LITERAL_INT; i < VAR_INT; ++i) { long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = (VAR_LONG << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | ((long)((ulong)VAR_LONG >> LITERAL_INT)); long VAR_LONG = VAR_BYTE[][VAR_INT++] & LITERAL_INT; VAR_LONG[][VAR_INT++] = ((VAR_LONG & LITERAL_INT) << LITERAL_INT) | VAR_LONG; } }
public GetSearchRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.GET; }
public virtual void METHOD_NAME() { bool VAR_BOOL; if (p >= LITERAL_INT) { if (fetchedEOF) { VAR_BOOL = p < tokens.Count - LITERAL_INT; } else { VAR_BOOL = p < tokens.Count; } } else { VAR_BOOL = false; } if (!VAR_BOOL && LA(LITERAL_INT) == IntStreamConstants.EOF) { throw new InvalidOperationException(LITERAL_STRING); } if (Sync(p + LITERAL_INT)) { p = AdjustSeekIndex(p + LITERAL_INT); } }
public virtual CharBlockArray METHOD_NAME(string VAR_STRING) { int VAR_INT = VAR_STRING.Length; int VAR_INT = LITERAL_INT; while (VAR_INT > LITERAL_INT) { if (this.current.length == this.blockSize) { AddBlock(); } int VAR_INT = VAR_INT; int VAR_INT = this.blockSize - this.current.length; if (VAR_INT < VAR_INT) { VAR_INT = VAR_INT; } VAR_STRING.CopyTo(VAR_INT, this.current.chars, this.current.length, VAR_INT); VAR_INT += VAR_INT; VAR_INT -= VAR_INT; this.current.length += VAR_INT; } this.length += VAR_STRING.Length; return this; }
public virtual ConfigureHealthCheckResponse METHOD_NAME(ConfigureHealthCheckRequest VAR_CONFIGUREHEALTHCHECKREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ConfigureHealthCheckRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ConfigureHealthCheckResponseUnmarshaller.Instance; return Invoke<ConfigureHealthCheckResponse>(VAR_CONFIGUREHEALTHCHECKREQUEST, VAR_VAR); }
public CommonRoaRequest(string VAR_STRING) : base(product) { AcceptFormat = FormatType.JSON; }
public static int METHOD_NAME(char[] VAR_CHAR[]) { return METHOD_NAME(VAR_CHAR[], LITERAL_INT); }
public virtual void METHOD_NAME(TextReader VAR_TEXTREADER) { if (!(FieldsData is TextReader)) { throw new ArgumentException(LITERAL_STRING + FieldsData.GetType().Name + LITERAL_STRING); } FieldsData = VAR_TEXTREADER; }
public virtual DeleteUsagePlanResponse METHOD_NAME(DeleteUsagePlanRequest VAR_DELETEUSAGEPLANREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteUsagePlanRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteUsagePlanResponseUnmarshaller.Instance; return Invoke<DeleteUsagePlanResponse>(VAR_DELETEUSAGEPLANREQUEST, VAR_VAR); }
public virtual DeleteThreatIntelSetResponse METHOD_NAME(DeleteThreatIntelSetRequest VAR_DELETETHREATINTELSETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteThreatIntelSetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteThreatIntelSetResponseUnmarshaller.Instance; return Invoke<DeleteThreatIntelSetResponse>(VAR_DELETETHREATINTELSETREQUEST, VAR_VAR); }
public virtual DescribePlacementGroupsResponse METHOD_NAME(DescribePlacementGroupsRequest VAR_DESCRIBEPLACEMENTGROUPSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribePlacementGroupsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribePlacementGroupsResponseUnmarshaller.Instance; return Invoke<DescribePlacementGroupsResponse>(VAR_DESCRIBEPLACEMENTGROUPSREQUEST, VAR_VAR); }
public virtual EnableAddOnResponse METHOD_NAME(EnableAddOnRequest VAR_ENABLEADDONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = EnableAddOnRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = EnableAddOnResponseUnmarshaller.Instance; return Invoke<EnableAddOnResponse>(VAR_ENABLEADDONREQUEST, VAR_VAR); }
public override RevFilter METHOD_NAME() { RevFilter[] VAR_REVFILTER[] = new RevFilter[subfilters.Length]; for (int i = LITERAL_INT; i < VAR_REVFILTER[].Length; i++) { VAR_REVFILTER[][i] = subfilters[i].METHOD_NAME(); } return new AndRevFilter.List(VAR_REVFILTER[]); }
public virtual ListTagsForResourceResponse METHOD_NAME(ListTagsForResourceRequest VAR_LISTTAGSFORRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTagsForResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTagsForResourceResponseUnmarshaller.Instance; return Invoke<ListTagsForResourceResponse>(VAR_LISTTAGSFORRESOURCEREQUEST, VAR_VAR); }
public virtual WeightedSpanTerm METHOD_NAME(string VAR_STRING) { WeightedSpanTerm VAR_WEIGHTEDSPANTERM; fieldWeightedSpanTerms.TryGetValue(VAR_STRING, out VAR_WEIGHTEDSPANTERM); return VAR_WEIGHTEDSPANTERM; }
public Slope() { func = new LinearRegressionFunction(LinearRegressionFunction.FUNCTION.SLOPE); }
public override string METHOD_NAME() { return Truncated; }
public virtual UpdateSubnetGroupResponse METHOD_NAME(UpdateSubnetGroupRequest VAR_UPDATESUBNETGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateSubnetGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateSubnetGroupResponseUnmarshaller.Instance; return Invoke<UpdateSubnetGroupResponse>(VAR_UPDATESUBNETGROUPREQUEST, VAR_VAR); }
public void METHOD_NAME(int VAR_INT) { CheckIndex(VAR_INT); _cfHeaders.RemoveAt(VAR_INT); }
public static long METHOD_NAME(long[] VAR_LONG[], long[] VAR_LONG[], int VAR_INT, int VAR_INT) { long VAR_LONG = LITERAL_INT; for (int i = VAR_INT, end = VAR_INT + VAR_INT; i < end; ++i) { VAR_LONG += (VAR_LONG[][i] & VAR_LONG[][i]).PopCount(); } return VAR_LONG; }
public override bool METHOD_NAME() { return true; }
public JapaneseBaseFormFilterFactory(IDictionary<string, string> VAR_IDICTIONARY<STRING, STRING>) : base(args) { if (VAR_IDICTIONARY<STRING, STRING>.Count > LITERAL_INT) { throw new ArgumentException(LITERAL_STRING + VAR_IDICTIONARY<STRING, STRING>); } }
public override void METHOD_NAME(RecordVisitor VAR_RECORDVISITOR) { VAR_RECORDVISITOR.VisitRecord(header); for (int i = LITERAL_INT; i < rules.Count; i++) { CFRuleRecord VAR_CFRULERECORD = rules[i]; VAR_RECORDVISITOR.VisitRecord(VAR_CFRULERECORD); } }
public void METHOD_NAME(bool VAR_BOOL) { DrawingGroupRecord VAR_DRAWINGGROUPRECORD = (DrawingGroupRecord)workbook.FindFirstRecordBySid(DrawingGroupRecord.sid); VAR_DRAWINGGROUPRECORD.Decode(); IList VAR_ILIST = VAR_DRAWINGGROUPRECORD.EscherRecords; for (IEnumerator iterator = VAR_ILIST.GetEnumerator(); iterator.MoveNext();) { EscherRecord VAR_ESCHERRECORD = (EscherRecord)iterator.Current; if (VAR_BOOL) Console.WriteLine(VAR_ESCHERRECORD.ToString()); elseescherRecord.Display(LITERAL_INT); } }
public virtual int METHOD_NAME() { return nDeleted; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_INT); VAR_STRINGBUILDER.Append(GetType().Name).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(_offset).Append(LITERAL_STRING).Append(LastIndex); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public int[] METHOD_NAME() { Debug.Assert(bytesStart != LITERAL_NULL, LITERAL_STRING); int VAR_INT = LITERAL_INT; for (int i = LITERAL_INT; i < hashSize; i++) { if (ids[i] != -LITERAL_INT) { if (VAR_INT < i) { ids[VAR_INT] = ids[i]; ids[i] = -LITERAL_INT; } VAR_INT++; } } Debug.Assert(VAR_INT == count); lastCount = count; return ids; }
public AccessKey(string VAR_STRING, string VAR_STRING, StatusType VAR_STATUSTYPE, string VAR_STRING) { _userName = VAR_STRING; _accessKeyId = VAR_STRING; _status = VAR_STATUSTYPE; _secretAccessKey = VAR_STRING; }
public virtual GetDomainResponse METHOD_NAME(GetDomainRequest VAR_GETDOMAINREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainResponseUnmarshaller.Instance; return Invoke<GetDomainResponse>(VAR_GETDOMAINREQUEST, VAR_VAR); }
public virtual ListTypeRegistrationsResponse METHOD_NAME(ListTypeRegistrationsRequest VAR_LISTTYPEREGISTRATIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListTypeRegistrationsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListTypeRegistrationsResponseUnmarshaller.Instance; return Invoke<ListTypeRegistrationsResponse>(VAR_LISTTYPEREGISTRATIONSREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return false; }
public DeleteTableRequest(string VAR_STRING) { _tableName = VAR_STRING; }
public virtual UpdateAccountSettingsResponse METHOD_NAME(UpdateAccountSettingsRequest VAR_UPDATEACCOUNTSETTINGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateAccountSettingsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateAccountSettingsResponseUnmarshaller.Instance; return Invoke<UpdateAccountSettingsResponse>(VAR_UPDATEACCOUNTSETTINGSREQUEST, VAR_VAR); }
public SearcherTracker(IndexSearcher VAR_INDEXSEARCHER) { Searcher = VAR_INDEXSEARCHER; Version = ((DirectoryReader)VAR_INDEXSEARCHER.IndexReader).Version; VAR_INDEXSEARCHER.IndexReader.IncRef(); RecordTimeSec = Time.NanoTime() / NANOS_PER_SEC; }
public Principal(string VAR_STRING) : this(AWS_PROVIDER, accountId) { if (VAR_STRING == LITERAL_NULL) { throw new ArgumentNullException(LITERAL_STRING); } }
public V METHOD_NAME(V VAR_V) { V VAR_V = value; value = VAR_V; return VAR_V; }
public ListMomentPhotosRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { Protocol = ProtocolType.HTTPS; }
public virtual bool METHOD_NAME(object VAR_OBJECT) { return map.ContainsKey(VAR_OBJECT); }
public LinearOffsetRange(int VAR_INT, int VAR_INT) { if (VAR_INT == LITERAL_INT) { throw new ArgumentException(LITERAL_STRING); } _offset = VAR_INT; _Length = VAR_INT; }
public virtual ListPipelinesResponse METHOD_NAME() { return METHOD_NAME(new ListPipelinesRequest()); }
public static bool METHOD_NAME(Directory VAR_DIRECTORY) { string[] VAR_STRING[]; try { VAR_STRING[] = VAR_DIRECTORY.ListAll(); } catch (DirectoryNotFoundException nsde) { return false; } if (VAR_STRING[] != LITERAL_NULL) { string VAR_STRING = IndexFileNames.SEGMENTS + LITERAL_STRING; foreach (string file in VAR_STRING[]) { if (file.StartsWith(VAR_STRING, StringComparison.Ordinal) || file.Equals(IndexFileNames.SEGMENTS_GEN, StringComparison.Ordinal)) { return true; } } } return false; }
public virtual DisassociateFromMasterAccountResponse METHOD_NAME(DisassociateFromMasterAccountRequest VAR_DISASSOCIATEFROMMASTERACCOUNTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateFromMasterAccountRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateFromMasterAccountResponseUnmarshaller.Instance; return Invoke<DisassociateFromMasterAccountResponse>(VAR_DISASSOCIATEFROMMASTERACCOUNTREQUEST, VAR_VAR); }
public virtual GetVoiceTemplateResponse METHOD_NAME(GetVoiceTemplateRequest VAR_GETVOICETEMPLATEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceTemplateRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceTemplateResponseUnmarshaller.Instance; return Invoke<GetVoiceTemplateResponse>(VAR_GETVOICETEMPLATEREQUEST, VAR_VAR); }
public virtual long METHOD_NAME() { return RamUsageEstimator.SizeOf(_filter.GetBits()); }
public virtual RejectInvitationResponse METHOD_NAME(RejectInvitationRequest VAR_REJECTINVITATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectInvitationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectInvitationResponseUnmarshaller.Instance; return Invoke<RejectInvitationResponse>(VAR_REJECTINVITATIONREQUEST, VAR_VAR); }
public virtual RejectQualificationRequestResponse METHOD_NAME(RejectQualificationRequestRequest VAR_REJECTQUALIFICATIONREQUESTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectQualificationRequestRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectQualificationRequestResponseUnmarshaller.Instance; return Invoke<RejectQualificationRequestResponse>(VAR_REJECTQUALIFICATIONREQUESTREQUEST, VAR_VAR); }
public sealed override object METHOD_NAME() { return protectedArray(); }
public virtual void METHOD_NAME(string VAR_STRING) { throw new System.NotImplementedException(); }
public override void METHOD_NAME(FieldInfos VAR_FIELDINFOS, int VAR_INT) { if (_numDocsWritten != VAR_INT) { throw new Exception(LITERAL_STRING + VAR_INT + LITERAL_STRING + _numDocsWritten + LITERAL_STRING + _output + LITERAL_STRING); } Write(END); NewLine(); SimpleTextUtil.WriteChecksum(_output, _scratch); }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { while (VAR_INT > LITERAL_INT) { int VAR_INT = _reader.Read(VAR_BYTE[], VAR_INT, VAR_INT); if (VAR_INT < LITERAL_INT) { throw new EndOfStreamException(); } VAR_INT -= VAR_INT; VAR_INT += VAR_INT; } }
public override long METHOD_NAME() { long VAR_LONG = LITERAL_INT; foreach (KeyValuePair<string, FieldsProducer> entry in formats) { VAR_LONG += entry.Key.Length * RamUsageEstimator.NUM_BYTES_CHAR; VAR_LONG += entry.Value.METHOD_NAME(); } return VAR_LONG; }
public override bool METHOD_NAME(object VAR_OBJECT) { if (this == VAR_OBJECT) { return true; } if (LITERAL_NULL == VAR_OBJECT || this.GetType() != VAR_OBJECT.GetType()) { return false; } JaroWinklerDistance VAR_JAROWINKLERDISTANCE = (JaroWinklerDistance)VAR_OBJECT; return (J2N.BitConversion.SingleToInt32Bits(VAR_JAROWINKLERDISTANCE.threshold) == J2N.BitConversion.SingleToInt32Bits(this.threshold)); }
public virtual NGit.BatchRefUpdate METHOD_NAME(ReceiveCommand VAR_RECEIVECOMMAND) { commands.AddItem(VAR_RECEIVECOMMAND); return this; }
public override void METHOD_NAME(byte[] VAR_BYTE[], int VAR_INT, int VAR_INT) { try { BeginWrite(); dst.METHOD_NAME(VAR_BYTE[], VAR_INT, VAR_INT); } catch (ThreadInterruptedException) { throw WriteTimedOut(); } finally { EndWrite(); } }
public virtual DeregisterGameServerResponse METHOD_NAME(DeregisterGameServerRequest VAR_DEREGISTERGAMESERVERREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeregisterGameServerRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeregisterGameServerResponseUnmarshaller.Instance; return Invoke<DeregisterGameServerResponse>(VAR_DEREGISTERGAMESERVERREQUEST, VAR_VAR); }
public void METHOD_NAME(byte[] VAR_BYTE[]) { try { out1.METHOD_NAME(VAR_BYTE[], LITERAL_INT, VAR_BYTE[].Length); } catch (IOException e) { throw new RuntimeException(e); } }
public override bool METHOD_NAME(int VAR_INT, int VAR_INT, int VAR_INT) { return VAR_INT >= from && VAR_INT <= to; }
public override void METHOD_NAME(FieldInfos VAR_FIELDINFOS, int VAR_INT) { if (numBufferedDocs > LITERAL_INT) { Flush(); } else { Debug.Assert(bufferedDocs.Length == LITERAL_INT); } if (docBase != VAR_INT) { throw new Exception(LITERAL_STRING + docBase + LITERAL_STRING + VAR_INT); } indexWriter.METHOD_NAME(VAR_INT, fieldsStream.GetFilePointer()); CodecUtil.WriteFooter(fieldsStream); Debug.Assert(bufferedDocs.Length == LITERAL_INT); }
public override Sharpen.Iterator<string> METHOD_NAME() { Sharpen.Iterator<string> VAR_SHARPEN.ITERATOR<STRING> = names.Values.METHOD_NAME(); return new _Iterator_276(VAR_SHARPEN.ITERATOR<STRING>); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(StringUtil.ToHexString(ColWidth)).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public DataValidityTable(RecordStream VAR_RECORDSTREAM) { _headerRec = (DVALRecord)VAR_RECORDSTREAM.GetNext(); IList VAR_ILIST = new ArrayList(); while (VAR_RECORDSTREAM.PeekNextClass() == typeof(DVRecord)) { VAR_ILIST.Add(VAR_RECORDSTREAM.GetNext()); } _validationList = VAR_ILIST; }
public virtual DeleteRoomMembershipResponse METHOD_NAME(DeleteRoomMembershipRequest VAR_DELETEROOMMEMBERSHIPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteRoomMembershipRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteRoomMembershipResponseUnmarshaller.Instance; return Invoke<DeleteRoomMembershipResponse>(VAR_DELETEROOMMEMBERSHIPREQUEST, VAR_VAR); }
public QueryParserTokenManager(ICharStream VAR_ICHARSTREAM, int VAR_INT) : this(stream) { SwitchTo(VAR_INT); }
public RebootDBInstanceRequest(string VAR_STRING) { _dbInstanceIdentifier = VAR_STRING; }
public virtual CreateAutoScalingGroupResponse METHOD_NAME(CreateAutoScalingGroupRequest VAR_CREATEAUTOSCALINGGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CreateAutoScalingGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CreateAutoScalingGroupResponseUnmarshaller.Instance; return Invoke<CreateAutoScalingGroupResponse>(VAR_CREATEAUTOSCALINGGROUPREQUEST, VAR_VAR); }
public K METHOD_NAME(K VAR_K) { java.util.MapClass.Entry<K, V> VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> = this.findBounded(VAR_K, java.util.TreeMap.Relation.FLOOR); return VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V> != LITERAL_NULL ? VAR_JAVA.UTIL.MAPCLASS.ENTRY<K, V>.getKey() : default(K); }
public override bool METHOD_NAME(RevWalk VAR_REVWALK, RevCommit VAR_REVCOMMIT) { return true; }
public virtual bool METHOD_NAME() { return getFeature(org.xmlpull.v1.XmlPullParserClass.FEATURE_VALIDATION); }
public override void METHOD_NAME(int VAR_INT) { lock (this) { if (@out == LITERAL_NULL) { setError(); return; } try { @out.METHOD_NAME(VAR_INT); int VAR_INT = VAR_INT & unchecked((int)(LITERAL_INT)); bool VAR_BOOL = VAR_INT == unchecked((int)(LITERAL_INT)) || VAR_INT == unchecked((int)(LITERAL_INT)); if (autoFlush && VAR_BOOL) { flush(); } } catch (System.IO.IOException) { setError(); } } }
public virtual UpdateScalingParametersResponse METHOD_NAME(UpdateScalingParametersRequest VAR_UPDATESCALINGPARAMETERSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateScalingParametersRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateScalingParametersResponseUnmarshaller.Instance; return Invoke<UpdateScalingParametersResponse>(VAR_UPDATESCALINGPARAMETERSREQUEST, VAR_VAR); }
public virtual ModifyDBClusterParameterGroupResponse METHOD_NAME(ModifyDBClusterParameterGroupRequest VAR_MODIFYDBCLUSTERPARAMETERGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ModifyDBClusterParameterGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ModifyDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<ModifyDBClusterParameterGroupResponse>(VAR_MODIFYDBCLUSTERPARAMETERGROUPREQUEST, VAR_VAR); }
public virtual GetOperationsForResourceResponse METHOD_NAME(GetOperationsForResourceRequest VAR_GETOPERATIONSFORRESOURCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetOperationsForResourceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetOperationsForResourceResponseUnmarshaller.Instance; return Invoke<GetOperationsForResourceResponse>(VAR_GETOPERATIONSFORRESOURCEREQUEST, VAR_VAR); }
public NLPTokenizerOp(TokenizerModel VAR_TOKENIZERMODEL) { tokenizer = new TokenizerME(VAR_TOKENIZERMODEL); }
public StartImageScanRequest() : base(LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING, LITERAL_STRING) { UriPattern = LITERAL_STRING; Method = MethodType.PUT; }
public virtual UpdateFleetResponse METHOD_NAME(UpdateFleetRequest VAR_UPDATEFLEETREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateFleetRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateFleetResponseUnmarshaller.Instance; return Invoke<UpdateFleetResponse>(VAR_UPDATEFLEETREQUEST, VAR_VAR); }
public virtual android.text.Editable METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return new android.text.SpannableStringBuilder(VAR_JAVA.LANG.CHARSEQUENCE); }
public static TreeFilter METHOD_NAME(params string[] VAR_STRING[]) { if (VAR_STRING[].Length == LITERAL_INT) { throw new ArgumentException(JGitText.Get().atLeastOnePathIsRequired); } int VAR_INT = VAR_STRING[].Length; PathFilter[] VAR_PATHFILTER[] = new PathFilter[VAR_INT]; for (int i = LITERAL_INT; i < VAR_INT; i++) { VAR_PATHFILTER[][i] = PathFilter.Create(VAR_STRING[][i]); } return Create(VAR_PATHFILTER[]); }
public virtual DescribeHostedConnectionsResponse METHOD_NAME(DescribeHostedConnectionsRequest VAR_DESCRIBEHOSTEDCONNECTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DescribeHostedConnectionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DescribeHostedConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeHostedConnectionsResponse>(VAR_DESCRIBEHOSTEDCONNECTIONSREQUEST, VAR_VAR); }
public virtual RejectTransitGatewayPeeringAttachmentResponse METHOD_NAME(RejectTransitGatewayPeeringAttachmentRequest VAR_REJECTTRANSITGATEWAYPEERINGATTACHMENTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RejectTransitGatewayPeeringAttachmentRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RejectTransitGatewayPeeringAttachmentResponseUnmarshaller.Instance; return Invoke<RejectTransitGatewayPeeringAttachmentResponse>(VAR_REJECTTRANSITGATEWAYPEERINGATTACHMENTREQUEST, VAR_VAR); }
public static double METHOD_NAME(long VAR_LONG) { return (double)VAR_LONG / EMU_PER_POINT; }
public override ValueEval METHOD_NAME(int VAR_INT, int VAR_INT, ValueEval VAR_VALUEEVAL, ValueEval VAR_VALUEEVAL) { return VAR_VALUEEVAL; }
public BytesRef METHOD_NAME(string VAR_STRING) { foreach (IIndexableField field in fields) { if (field.Name.Equals(VAR_STRING, StringComparison.Ordinal)) { BytesRef VAR_BYTESREF = field.METHOD_NAME(); if (VAR_BYTESREF != LITERAL_NULL) { return VAR_BYTESREF; } } } return LITERAL_NULL; }
public CRNBlock(RecordStream VAR_RECORDSTREAM) { _countRecord = (CRNCountRecord)VAR_RECORDSTREAM.GetNext(); int VAR_INT = _countRecord.NumberOfCRNs; CRNRecord[] VAR_CRNRECORD[] = new CRNRecord[VAR_INT]; for (int i = LITERAL_INT; i < VAR_CRNRECORD[].Length; i++) { VAR_CRNRECORD[][i] = (CRNRecord)VAR_RECORDSTREAM.GetNext(); } _crns = VAR_CRNRECORD[]; }
public override int METHOD_NAME(int VAR_INT, long[] VAR_LONG[], int VAR_INT, int VAR_INT) { return current.METHOD_NAME(VAR_INT, VAR_LONG[], VAR_INT, VAR_INT); }
public RefDirectory.LooseRef METHOD_NAME(ObjectIdRef VAR_OBJECTIDREF) { return this; }
public virtual UpdateModelVersionResponse METHOD_NAME(UpdateModelVersionRequest VAR_UPDATEMODELVERSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateModelVersionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateModelVersionResponseUnmarshaller.Instance; return Invoke<UpdateModelVersionResponse>(VAR_UPDATEMODELVERSIONREQUEST, VAR_VAR); }
public Builder() : base() { lastDocID = -LITERAL_INT; wordNum = -LITERAL_INT; word = LITERAL_INT; }
public override bool METHOD_NAME() { int VAR_INT; int VAR_INT; int VAR_INT; int VAR_INT; VAR_INT = m_cursor; do { if (!r_mark_regions()) { goto lab0; } } while (false); lab0: m_cursor = VAR_INT; m_limit_backward = m_cursor; m_cursor = m_limit; VAR_INT = m_limit - m_cursor; do { if (!r_main_suffix()) { goto lab1; } } while (false); lab1: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_consonant_pair()) { goto lab2; } } while (false); lab2: m_cursor = m_limit - VAR_INT; VAR_INT = m_limit - m_cursor; do { if (!r_other_suffix()) { goto lab3; } } while (false); lab3: m_cursor = m_limit - VAR_INT; m_cursor = m_limit_backward; return true; }
public virtual int METHOD_NAME() { return LITERAL_INT; }
public override FetchConnection METHOD_NAME() { if (src == LITERAL_NULL) { throw new TransportException(uri, JGitText.Get().onlyOneFetchSupported); } try { return new BundleFetchConnection(this, src); } finally { src = LITERAL_NULL; } }
public virtual DeleteWorkGroupResponse METHOD_NAME(DeleteWorkGroupRequest VAR_DELETEWORKGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteWorkGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteWorkGroupResponseUnmarshaller.Instance; return Invoke<DeleteWorkGroupResponse>(VAR_DELETEWORKGROUPREQUEST, VAR_VAR); }
public virtual GetApiResponse METHOD_NAME(GetApiRequest VAR_GETAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetApiResponseUnmarshaller.Instance; return Invoke<GetApiResponse>(VAR_GETAPIREQUEST, VAR_VAR); }
public override java.nio.LongBuffer METHOD_NAME() { return new java.nio.ReadOnlyLongArrayBuffer(remaining(), backingArray, offset + _position); }
public override string METHOD_NAME() { string VAR_STRING = GetType().FullName; int VAR_INT = VAR_STRING.IndexOf(LITERAL_CHAR); VAR_STRING = Sharpen.Runtime.Substring(VAR_STRING, VAR_INT + LITERAL_INT, VAR_STRING.Length); return LITERAL_STRING + VAR_STRING + LITERAL_STRING + tokens.Get(this.VAR_INT) + LITERAL_STRING + text + LITERAL_STRING; }
public override string METHOD_NAME() { return LITERAL_STRING + token + LITERAL_STRING; }
public static EvaluationException METHOD_NAME() { return new EvaluationException(ErrorEval.REF_INVALID); }
public IEnumerator<Entry> METHOD_NAME() { return new FilteringIterator(this); ; }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING + recordType); VAR_STRINGBUILDER.Append(LITERAL_STRING + grbitFrt); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
public override void METHOD_NAME(MutableValue VAR_MUTABLEVALUE) { MutableValueStr VAR_MUTABLEVALUESTR = (MutableValueStr)VAR_MUTABLEVALUE; Exists = VAR_MUTABLEVALUESTR.Exists; Value.CopyBytes(VAR_MUTABLEVALUESTR.Value); }
public ReaderSlice(int VAR_INT, int VAR_INT, int VAR_INT) { this.Start = VAR_INT; this.Length = VAR_INT; this.ReaderIndex = VAR_INT; }
public virtual AddTagsResponse METHOD_NAME(AddTagsRequest VAR_ADDTAGSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = AddTagsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = AddTagsResponseUnmarshaller.Instance; return Invoke<AddTagsResponse>(VAR_ADDTAGSREQUEST, VAR_VAR); }
public static java.net.URI METHOD_NAME(string VAR_STRING) { try { return new java.net.URI(VAR_STRING); } catch (java.net.URISyntaxException e) { throw new System.ArgumentException(e.Message); } }
public virtual UpdateConfigurationSetTrackingOptionsResponse METHOD_NAME(UpdateConfigurationSetTrackingOptionsRequest VAR_UPDATECONFIGURATIONSETTRACKINGOPTIONSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateConfigurationSetTrackingOptionsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateConfigurationSetTrackingOptionsResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetTrackingOptionsResponse>(VAR_UPDATECONFIGURATIONSETTRACKINGOPTIONSREQUEST, VAR_VAR); }
public override void METHOD_NAME(byte[][] VAR_BYTE[][], int VAR_INT, int VAR_INT) { bytesUsed.AddAndGet(-((VAR_INT - VAR_INT) * m_blockSize)); for (var i = VAR_INT; i < VAR_INT; i++) { VAR_BYTE[][][i] = LITERAL_NULL; } }
public override java.nio.DoubleBuffer METHOD_NAME() { throw new java.nio.ReadOnlyBufferException(); }
public virtual GetVoiceConnectorStreamingConfigurationResponse METHOD_NAME(GetVoiceConnectorStreamingConfigurationRequest VAR_GETVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorStreamingConfigurationResponse>(VAR_GETVOICECONNECTORSTREAMINGCONFIGURATIONREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return this.pos + LITERAL_INT < this._enclosing.size(); }
public double METHOD_NAME(int VAR_INT) { return RKUtil.DecodeNumber(field_3_rks[VAR_INT].rk); }
public virtual ReimportApiResponse METHOD_NAME(ReimportApiRequest VAR_REIMPORTAPIREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ReimportApiRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ReimportApiResponseUnmarshaller.Instance; return Invoke<ReimportApiResponse>(VAR_REIMPORTAPIREQUEST, VAR_VAR); }
public virtual bool METHOD_NAME() { return this.link.previous != this.list.voidLink; }
public void METHOD_NAME(BytesRef VAR_BYTESREF, long VAR_LONG) { var VAR_VAR = (int)(VAR_LONG >> blockBits); var VAR_VAR = (int)(VAR_LONG & blockMask); var VAR_VAR = VAR_BYTESREF.Bytes = blocks[VAR_VAR]; if ((VAR_VAR[VAR_VAR] & LITERAL_INT) == LITERAL_INT) { VAR_BYTESREF.Length = VAR_VAR[VAR_VAR]; VAR_BYTESREF.Offset = VAR_VAR + LITERAL_INT; } else { VAR_BYTESREF.Length = ((VAR_VAR[VAR_VAR] & LITERAL_INT) << LITERAL_INT) | (VAR_VAR[LITERAL_INT + VAR_VAR] & LITERAL_INT); VAR_BYTESREF.Offset = VAR_VAR + LITERAL_INT; Debug.Assert(VAR_BYTESREF.Length > LITERAL_INT); } }
public virtual void METHOD_NAME() { if (n < array.Length) { byte[] VAR_BYTE[] = new byte[n]; System.Array.Copy(array, LITERAL_INT, VAR_BYTE[], LITERAL_INT, n); array = VAR_BYTE[]; } }
public virtual SubmoduleUpdateCommand METHOD_NAME() { return new SubmoduleUpdateCommand(repo); }
public static java.nio.ShortBuffer METHOD_NAME(short[] VAR_SHORT[], int VAR_INT, int VAR_INT) { java.util.Arrays.checkOffsetAndCount(VAR_SHORT[].Length, VAR_INT, VAR_INT); java.nio.ShortBuffer VAR_JAVA.NIO.SHORTBUFFER = new java.nio.ReadWriteShortArrayBuffer(VAR_SHORT[]); VAR_JAVA.NIO.SHORTBUFFER._position = VAR_INT; VAR_JAVA.NIO.SHORTBUFFER._limit = VAR_INT + VAR_INT; return VAR_JAVA.NIO.SHORTBUFFER; }
public virtual GetVpcLinksResponse METHOD_NAME(GetVpcLinksRequest VAR_GETVPCLINKSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetVpcLinksRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetVpcLinksResponseUnmarshaller.Instance; return Invoke<GetVpcLinksResponse>(VAR_GETVPCLINKSREQUEST, VAR_VAR); }
public virtual RemoveResourcePermissionResponse METHOD_NAME(RemoveResourcePermissionRequest VAR_REMOVERESOURCEPERMISSIONREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = RemoveResourcePermissionRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = RemoveResourcePermissionResponseUnmarshaller.Instance; return Invoke<RemoveResourcePermissionResponse>(VAR_REMOVERESOURCEPERMISSIONREQUEST, VAR_VAR); }
public virtual ListIndexResponse METHOD_NAME(ListIndexRequest VAR_LISTINDEXREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListIndexRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListIndexResponseUnmarshaller.Instance; return Invoke<ListIndexResponse>(VAR_LISTINDEXREQUEST, VAR_VAR); }
public virtual IList<int> METHOD_NAME() { IList<int> VAR_ILIST<INT> = new ArrayList<int>(); int VAR_INT = intervals.Count; for (int i = LITERAL_INT; i < VAR_INT; i++) { Interval VAR_INTERVAL = intervals[i]; int VAR_INT = VAR_INTERVAL.a; int VAR_INT = VAR_INTERVAL.b; for (int v = VAR_INT; v <= VAR_INT; v++) { VAR_ILIST<INT>.Add(v); } } return VAR_ILIST<INT>; }
public CreateCustomerGatewayRequest(GatewayType VAR_GATEWAYTYPE, string VAR_STRING, int VAR_INT) { _type = VAR_GATEWAYTYPE; _publicIp = VAR_STRING; _bgpAsn = VAR_INT; }
public int METHOD_NAME(DateTime VAR_DATETIME, int VAR_INT) { GregorianCalendar VAR_GREGORIANCALENDAR = new GregorianCalendar(); int VAR_INT; if (VAR_INT == LITERAL_INT) { VAR_INT = VAR_GREGORIANCALENDAR.GetWeekOfYear(VAR_DATETIME, CalendarWeekRule.FirstDay, DayOfWeek.Sunday); } else { VAR_INT = VAR_GREGORIANCALENDAR.GetWeekOfYear(VAR_DATETIME, CalendarWeekRule.FirstDay, DayOfWeek.Monday); } return VAR_INT; }
public override string METHOD_NAME() { string VAR_STRING = LITERAL_STRING + doc + LITERAL_STRING + offset + LITERAL_STRING + position + LITERAL_STRING + count; if (rptGroup >= LITERAL_INT) { VAR_STRING += LITERAL_STRING + rptGroup + LITERAL_STRING + rptInd; } return VAR_STRING; }
public virtual java.util.ListIterator<E> METHOD_NAME() { return METHOD_NAME(LITERAL_INT); }
public virtual GetUserEndpointsResponse METHOD_NAME(GetUserEndpointsRequest VAR_GETUSERENDPOINTSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetUserEndpointsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetUserEndpointsResponseUnmarshaller.Instance; return Invoke<GetUserEndpointsResponse>(VAR_GETUSERENDPOINTSREQUEST, VAR_VAR); }
public UAX29URLEmailTokenizerImpl(TextReader VAR_TEXTREADER) { this.zzReader = VAR_TEXTREADER; }
public virtual NGit.Api.ResetCommand METHOD_NAME(string VAR_STRING) { if (mode != LITERAL_NULL) { throw new JGitInternalException(MessageFormat.Format(JGitText.Get().illegalCombinationOfArguments, LITERAL_STRING, LITERAL_STRING)); } filepaths.AddItem(VAR_STRING); return this; }
public Record METHOD_NAME(short VAR_SHORT, int VAR_INT) { int VAR_INT = LITERAL_INT; for (IEnumerator iterator = records.GetEnumerator(); iterator.MoveNext();) { Record VAR_RECORD = (Record)iterator.Current; if (VAR_RECORD.Sid == VAR_SHORT) { if (VAR_INT++ == VAR_INT) return VAR_RECORD; } } return LITERAL_NULL; }
public virtual int[] METHOD_NAME() { return ToIntegerList().METHOD_NAME(); }
public virtual GetDomainNamesResponse METHOD_NAME(GetDomainNamesRequest VAR_GETDOMAINNAMESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = GetDomainNamesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = GetDomainNamesResponseUnmarshaller.Instance; return Invoke<GetDomainNamesResponse>(VAR_GETDOMAINNAMESREQUEST, VAR_VAR); }
public virtual UpdateTemplateAliasResponse METHOD_NAME(UpdateTemplateAliasRequest VAR_UPDATETEMPLATEALIASREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UpdateTemplateAliasRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UpdateTemplateAliasResponseUnmarshaller.Instance; return Invoke<UpdateTemplateAliasResponse>(VAR_UPDATETEMPLATEALIASREQUEST, VAR_VAR); }
public virtual string METHOD_NAME() { return receivePack; }
public virtual java.util.Set<K> METHOD_NAME() { lock (this) { java.util.Set<K> VAR_JAVA.UTIL.SET<K> = _keySet; return (VAR_JAVA.UTIL.SET<K> != LITERAL_NULL) ? VAR_JAVA.UTIL.SET<K> : (_keySet = new java.util.Hashtable<K, V>.KeySet(this)); } }
public AssociateAddressRequest(string VAR_STRING, string VAR_STRING) { _instanceId = VAR_STRING; _publicIp = VAR_STRING; }
public static java.nio.CharBuffer METHOD_NAME(java.lang.CharSequence VAR_JAVA.LANG.CHARSEQUENCE) { return new java.nio.CharSequenceAdapter(VAR_JAVA.LANG.CHARSEQUENCE); }
public void METHOD_NAME() { METHOD_NAME(true, true); }
public static double METHOD_NAME(int VAR_INT, int VAR_INT) { double VAR_DOUBLE = LITERAL_INT; if (VAR_INT < LITERAL_INT || VAR_INT < LITERAL_INT || VAR_INT < VAR_INT) { VAR_DOUBLE = double.NaN; } else { int VAR_INT = Math.Min(VAR_INT - VAR_INT, VAR_INT); int VAR_INT = Math.Max(VAR_INT - VAR_INT, VAR_INT); for (int i = VAR_INT; i < VAR_INT; i++) { VAR_DOUBLE *= i + LITERAL_INT; } VAR_DOUBLE /= Factorial(VAR_INT); } return VAR_DOUBLE; }
public static string METHOD_NAME(long VAR_LONG) { return METHOD_NAME(VAR_LONG, LITERAL_INT); }
public string METHOD_NAME() { return GetCredentials().GetAccessKeySecret(); }
public static BoundSheetRecord[] METHOD_NAME(List<BoundSheetRecord> VAR_LIST<BOUNDSHEETRECORD>) { BoundSheetRecord[] VAR_BOUNDSHEETRECORD[] = VAR_LIST<BOUNDSHEETRECORD>.ToArray(); Array.Sort(VAR_BOUNDSHEETRECORD[], new BOFComparator()); return VAR_BOUNDSHEETRECORD[]; }
public virtual DeleteNotebookInstanceResponse METHOD_NAME(DeleteNotebookInstanceRequest VAR_DELETENOTEBOOKINSTANCEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteNotebookInstanceRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteNotebookInstanceResponseUnmarshaller.Instance; return Invoke<DeleteNotebookInstanceResponse>(VAR_DELETENOTEBOOKINSTANCEREQUEST, VAR_VAR); }
public void METHOD_NAME() { lock (this.mBlock) { if (this.mParseState != LITERAL_NULL) { this.mParseState.Dispose(); this.mParseState = LITERAL_NULL; this.mBlock.decOpenCountLocked(); } } }
public static FilePath METHOD_NAME(FilePath VAR_FILEPATH, FS VAR_FS) { if (IsGitRepository(VAR_FILEPATH, VAR_FS)) { return VAR_FILEPATH; } if (IsGitRepository(new FilePath(VAR_FILEPATH, Constants.DOT_GIT), VAR_FS)) { return new FilePath(VAR_FILEPATH, Constants.DOT_GIT); } string VAR_STRING = VAR_FILEPATH.GetName(); FilePath VAR_FILEPATH = VAR_FILEPATH.GetParentFile(); if (IsGitRepository(new FilePath(VAR_FILEPATH, VAR_STRING + Constants.DOT_GIT_EXT), VAR_FS)) { return new FilePath(VAR_FILEPATH, VAR_STRING + Constants.DOT_GIT_EXT); } return LITERAL_NULL; }
public virtual ListWorkflowTypesResponse METHOD_NAME(ListWorkflowTypesRequest VAR_LISTWORKFLOWTYPESREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListWorkflowTypesRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListWorkflowTypesResponseUnmarshaller.Instance; return Invoke<ListWorkflowTypesResponse>(VAR_LISTWORKFLOWTYPESREQUEST, VAR_VAR); }
public virtual CopyClusterSnapshotResponse METHOD_NAME(CopyClusterSnapshotRequest VAR_COPYCLUSTERSNAPSHOTREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = CopyClusterSnapshotRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = CopyClusterSnapshotResponseUnmarshaller.Instance; return Invoke<CopyClusterSnapshotResponse>(VAR_COPYCLUSTERSNAPSHOTREQUEST, VAR_VAR); }
public Ptg[] METHOD_NAME(IEvaluationCell VAR_IEVALUATIONCELL) { ICell VAR_ICELL = ((HSSFEvaluationCell)VAR_IEVALUATIONCELL).HSSFCell; FormulaRecordAggregate VAR_FORMULARECORDAGGREGATE = (FormulaRecordAggregate)((HSSFCell)VAR_ICELL).CellValueRecord; return VAR_FORMULARECORDAGGREGATE.FormulaTokens; }
public virtual DisassociateVPCFromHostedZoneResponse METHOD_NAME(DisassociateVPCFromHostedZoneRequest VAR_DISASSOCIATEVPCFROMHOSTEDZONEREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DisassociateVPCFromHostedZoneRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DisassociateVPCFromHostedZoneResponseUnmarshaller.Instance; return Invoke<DisassociateVPCFromHostedZoneResponse>(VAR_DISASSOCIATEVPCFROMHOSTEDZONEREQUEST, VAR_VAR); }
public java.lang.StringBuffer METHOD_NAME(int VAR_INT, int VAR_INT) { return METHOD_NAME(VAR_INT, System.Convert.ToString(VAR_INT)); }
public virtual void METHOD_NAME(BytesRef VAR_BYTESREF) { if (!(FieldsData is BytesRef)) { throw new System.ArgumentException(LITERAL_STRING + FieldsData.GetType().Name + LITERAL_STRING); } if (m_type.IsIndexed) { throw new System.ArgumentException(LITERAL_STRING); } FieldsData = VAR_BYTESREF; }
public override bool METHOD_NAME(object VAR_OBJECT) { return VAR_OBJECT is GermanStemmer; }
public virtual UntagMeetingResponse METHOD_NAME(UntagMeetingRequest VAR_UNTAGMEETINGREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = UntagMeetingRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = UntagMeetingResponseUnmarshaller.Instance; return Invoke<UntagMeetingResponse>(VAR_UNTAGMEETINGREQUEST, VAR_VAR); }
public override String METHOD_NAME() { StringBuilder VAR_STRINGBUILDER = new StringBuilder(); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING).Append(FullPrecision).Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(LITERAL_STRING); return VAR_STRINGBUILDER.METHOD_NAME(); }
static public double METHOD_NAME(double VAR_DOUBLE, int VAR_INT, double VAR_DOUBLE, double VAR_DOUBLE) { return METHOD_NAME(VAR_DOUBLE, VAR_INT, VAR_DOUBLE, VAR_DOUBLE, LITERAL_INT); }
public ValueEval METHOD_NAME(Area3DPtg VAR_AREA3DPTG) { SheetRangeEvaluator VAR_SHEETRANGEEVALUATOR = CreateExternSheetRefEvaluator(VAR_AREA3DPTG.ExternSheetIndex); return new LazyAreaEval(VAR_AREA3DPTG.FirstRow, VAR_AREA3DPTG.FirstColumn, VAR_AREA3DPTG.LastRow, VAR_AREA3DPTG.LastColumn, VAR_SHEETRANGEEVALUATOR); }
public override bool METHOD_NAME(object VAR_OBJECT) { android.graphics.Rect VAR_ANDROID.GRAPHICS.RECT = (android.graphics.Rect)VAR_OBJECT; if (VAR_ANDROID.GRAPHICS.RECT != LITERAL_NULL) { return left == VAR_ANDROID.GRAPHICS.RECT.left && top == VAR_ANDROID.GRAPHICS.RECT.top && right == VAR_ANDROID.GRAPHICS.RECT.right && bottom == VAR_ANDROID.GRAPHICS.RECT.bottom; } return false; }
public bool METHOD_NAME(int VAR_INT) { return (_firstColumn <= VAR_INT) && (_lastColumn >= VAR_INT); }
public RunJobFlowRequest(string VAR_STRING, JobFlowInstancesConfig VAR_JOBFLOWINSTANCESCONFIG) { _name = VAR_STRING; _instances = VAR_JOBFLOWINSTANCESCONFIG; }
public override string METHOD_NAME() { if (NoBreak == LITERAL_NULL && PostBreak == LITERAL_NULL && PreBreak != LITERAL_NULL && PreBreak.Equals(LITERAL_STRING, StringComparison.Ordinal)) { return LITERAL_STRING; } StringBuilder VAR_STRINGBUILDER = new StringBuilder(LITERAL_STRING); VAR_STRINGBUILDER.Append(PreBreak); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(PostBreak); VAR_STRINGBUILDER.Append(LITERAL_STRING); VAR_STRINGBUILDER.Append(NoBreak); VAR_STRINGBUILDER.Append(LITERAL_CHAR); return VAR_STRINGBUILDER.METHOD_NAME(); }
public virtual ListPublishedSchemaArnsResponse METHOD_NAME(ListPublishedSchemaArnsRequest VAR_LISTPUBLISHEDSCHEMAARNSREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = ListPublishedSchemaArnsRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = ListPublishedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListPublishedSchemaArnsResponse>(VAR_LISTPUBLISHEDSCHEMAARNSREQUEST, VAR_VAR); }
public StoredField(string VAR_STRING, float VAR_FLOAT) : base(name, TYPE) { FieldsData = new Single(VAR_FLOAT); }
public virtual DescribeNetworkAclsResponse METHOD_NAME() { return METHOD_NAME(new DescribeNetworkAclsRequest()); }
public virtual NGit.Api.PushCommand METHOD_NAME(Ref VAR_REF) { refSpecs.AddItem(new RefSpec(VAR_REF.GetLeaf().GetName())); return this; }
public virtual DeleteVoiceConnectorGroupResponse METHOD_NAME(DeleteVoiceConnectorGroupRequest VAR_DELETEVOICECONNECTORGROUPREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteVoiceConnectorGroupRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteVoiceConnectorGroupResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorGroupResponse>(VAR_DELETEVOICECONNECTORGROUPREQUEST, VAR_VAR); }
public IntervalSet(IList<Interval> VAR_ILIST<INTERVAL>) { this.VAR_ILIST<INTERVAL> = VAR_ILIST<INTERVAL>; }
public IteratorQueue(IEnumerator<T> VAR_IENUMERATOR<T>) { this.VAR_IENUMERATOR<T> = VAR_IENUMERATOR<T>; T VAR_T = RemoveTop(); Debug.Assert(VAR_T == LITERAL_NULL); }
public static long[] METHOD_NAME(long[] VAR_LONG[]) { return METHOD_NAME(VAR_LONG[], LITERAL_INT + VAR_LONG[].Length); }
public StemmerOverrideMap(FST<BytesRef> VAR_FST<BYTESREF>, bool VAR_BOOL) { this.VAR_FST<BYTESREF> = VAR_FST<BYTESREF>; this.VAR_BOOL = VAR_BOOL; }
public virtual DeleteAdmChannelResponse METHOD_NAME(DeleteAdmChannelRequest VAR_DELETEADMCHANNELREQUEST) { var VAR_VAR = new InvokeOptions(); VAR_VAR.RequestMarshaller = DeleteAdmChannelRequestMarshaller.Instance; VAR_VAR.ResponseUnmarshaller = DeleteAdmChannelResponseUnmarshaller.Instance; return Invoke<DeleteAdmChannelResponse>(VAR_DELETEADMCHANNELREQUEST, VAR_VAR); }
public SetSubscriptionAttributesRequest(string VAR_STRING, string VAR_STRING, string VAR_STRING) { _subscriptionArn = VAR_STRING; _attributeName = VAR_STRING; _attributeValue = VAR_STRING; }
public virtual void METHOD_NAME(char VAR_CHAR) { m_buf[m_len++] = VAR_CHAR; }
public override bool METHOD_NAME(object VAR_OBJECT) { lock (this._enclosing) { int VAR_INT = this._enclosing._size; this._enclosing.METHOD_NAME(VAR_OBJECT); return this._enclosing._size != VAR_INT; } }
public virtual bool METHOD_NAME() { return false; }
